
./bin/main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000200 <OSStartHighRdy>:
@              e) Enable interrupts (tasks will run with interrupts enabled).
@********************************************************************************************************

.thumb_func
OSStartHighRdy:
    CPSID   I                                                   @ Prevent interruption during context switch
 8000200:	b672      	cpsid	i
    MOVW    R0, #:lower16:NVIC_SYSPRI14                         @ Set the PendSV exception priority
 8000202:	f64e 5022 	movw	r0, #60706	; 0xed22
    MOVT    R0, #:upper16:NVIC_SYSPRI14
 8000206:	f2ce 0000 	movt	r0, #57344	; 0xe000

    MOVW    R1, #:lower16:NVIC_PENDSV_PRI
 800020a:	f240 01ff 	movw	r1, #255	; 0xff
    MOVT    R1, #:upper16:NVIC_PENDSV_PRI
 800020e:	f2c0 0100 	movt	r1, #0
    STRB    R1, [R0]
 8000212:	7001      	strb	r1, [r0, #0]

    MOVW    R0, #:lower16:OS_CPU_ExceptStkBase                  @ Initialize the MSP to the OS_CPU_ExceptStkBase
 8000214:	f243 7074 	movw	r0, #14196	; 0x3774
    MOVT    R0, #:upper16:OS_CPU_ExceptStkBase
 8000218:	f2c2 0000 	movt	r0, #8192	; 0x2000
    LDR     R1, [R0]
 800021c:	6801      	ldr	r1, [r0, #0]
    MSR     MSP, R1
 800021e:	f381 8808 	msr	MSP, r1

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 8000222:	f242 5010 	movw	r0, #9488	; 0x2510
    MOVT    R0, #:upper16:OSPrioCur
 8000226:	f2c2 0000 	movt	r0, #8192	; 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 800022a:	f242 5104 	movw	r1, #9476	; 0x2504
    MOVT    R1, #:upper16:OSPrioHighRdy
 800022e:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDRB    R2, [R1]
 8000232:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 8000234:	7002      	strb	r2, [r0, #0]

    MOVW    R5, #:lower16:OSTCBCurPtr
 8000236:	f242 55dc 	movw	r5, #9692	; 0x25dc
    MOVT    R5, #:upper16:OSTCBCurPtr
 800023a:	f2c2 0500 	movt	r5, #8192	; 0x2000
    MOVW    R1, #:lower16:OSTCBHighRdyPtr                       @ OSTCBCurPtr = OSTCBHighRdyPtr;
 800023e:	f242 51e8 	movw	r1, #9704	; 0x25e8
    MOVT    R1, #:upper16:OSTCBHighRdyPtr
 8000242:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDR     R2, [R1]
 8000246:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R5]
 8000248:	602a      	str	r2, [r5, #0]

    LDR     R0, [R2]                                            @ R0 is new process SP; SP = OSTCBHighRdyPtr->StkPtr;
 800024a:	6810      	ldr	r0, [r2, #0]
    MSR     PSP, R0                                             @ Load PSP with new process SP
 800024c:	f380 8809 	msr	PSP, r0

    MRS     R0, CONTROL
 8000250:	f3ef 8014 	mrs	r0, CONTROL
    ORR     R0, R0, #2
 8000254:	f040 0002 	orr.w	r0, r0, #2
    MSR     CONTROL, R0
 8000258:	f380 8814 	msr	CONTROL, r0
    ISB                                                         @ Sync instruction stream
 800025c:	f3bf 8f6f 	isb	sy

    LDMFD    SP!, {R4-R11}                                      @ Restore r4-11 from new process stack
 8000260:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    LDMFD    SP!, {R0-R3}                                       @ Restore r0, r3
 8000264:	bc0f      	pop	{r0, r1, r2, r3}
    LDMFD    SP!, {R12, LR}                                     @ Load R12 and LR
 8000266:	e8bd 5000 	ldmia.w	sp!, {ip, lr}
    LDMFD    SP!, {R1, R2}                                      @ Load PC and discard xPSR
 800026a:	bc06      	pop	{r1, r2}
    CPSIE    I
 800026c:	b662      	cpsie	i
    BX       R1
 800026e:	4708      	bx	r1

08000270 <OSCtxSw>:
@              triggers the PendSV exception which is where the real work is done.
@********************************************************************************************************

.thumb_func
OSCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 8000270:	4818      	ldr	r0, [pc, #96]	; (80002d4 <OS_CPU_PendSVHandler+0x50>)
    LDR     R1, =NVIC_PENDSVSET
 8000272:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    STR     R1, [R0]
 8000276:	6001      	str	r1, [r0, #0]
    BX      LR
 8000278:	4770      	bx	lr

0800027a <OSIntCtxSw>:
@              be handled when there are no more interrupts active and interrupts are enabled.
@********************************************************************************************************

.thumb_func
OSIntCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 800027a:	4816      	ldr	r0, [pc, #88]	; (80002d4 <OS_CPU_PendSVHandler+0x50>)
    LDR     R1, =NVIC_PENDSVSET
 800027c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    STR     R1, [R0]
 8000280:	6001      	str	r1, [r0, #0]
    BX      LR
 8000282:	4770      	bx	lr

08000284 <OS_CPU_PendSVHandler>:
@              therefore safe to assume that context being switched out was using the process stack (PSP).
@********************************************************************************************************

.thumb_func
OS_CPU_PendSVHandler:
    CPSID   I                                                   @ Prevent interruption during context switch
 8000284:	b672      	cpsid	i
    MRS     R0, PSP                                             @ PSP is process stack pointer
 8000286:	f3ef 8009 	mrs	r0, PSP
    STMFD   R0!, {R4-R11}                                       @ Save remaining regs r4-11 on process stack
 800028a:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

    MOVW    R5, #:lower16:OSTCBCurPtr                           @ OSTCBCurPtr->OSTCBStkPtr = SP;
 800028e:	f242 55dc 	movw	r5, #9692	; 0x25dc
    MOVT    R5, #:upper16:OSTCBCurPtr
 8000292:	f2c2 0500 	movt	r5, #8192	; 0x2000
    LDR     R6, [R5]
 8000296:	682e      	ldr	r6, [r5, #0]
    STR     R0, [R6]                                            @ R0 is SP of process being switched out
 8000298:	6030      	str	r0, [r6, #0]

                                                                @ At this point, entire context of process has been saved
    MOV     R4, LR                                              @ Save LR exc_return value
 800029a:	4674      	mov	r4, lr
    BL      OSTaskSwHook                                        @ OSTaskSwHook();
 800029c:	f005 fd76 	bl	8005d8c <OSTaskSwHook>

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 80002a0:	f242 5010 	movw	r0, #9488	; 0x2510
    MOVT    R0, #:upper16:OSPrioCur
 80002a4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 80002a8:	f242 5104 	movw	r1, #9476	; 0x2504
    MOVT    R1, #:upper16:OSPrioHighRdy
 80002ac:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDRB    R2, [R1]
 80002b0:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 80002b2:	7002      	strb	r2, [r0, #0]

    MOVW    R1, #:lower16:OSTCBHighRdyPtr                      @ OSTCBCurPtr = OSTCBHighRdyPtr;
 80002b4:	f242 51e8 	movw	r1, #9704	; 0x25e8
    MOVT    R1, #:upper16:OSTCBHighRdyPtr
 80002b8:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDR     R2, [R1]
 80002bc:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R5]
 80002be:	602a      	str	r2, [r5, #0]

    ORR     LR, R4, #0xF4                                       @ Ensure exception return uses process stack
 80002c0:	f044 0ef4 	orr.w	lr, r4, #244	; 0xf4
    LDR     R0, [R2]                                            @ R0 is new process SP; SP = OSTCBHighRdyPtr->StkPtr;
 80002c4:	6810      	ldr	r0, [r2, #0]
    LDMFD   R0!, {R4-R11}                                       @ Restore r4-11 from new process stack
 80002c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, R0                                             @ Load PSP with new process SP
 80002ca:	f380 8809 	msr	PSP, r0
    CPSIE   I
 80002ce:	b662      	cpsie	i
    BX      LR                                                  @ Exception return will restore remaining context
 80002d0:	4770      	bx	lr
 80002d2:	0000      	.short	0x0000
@              triggers the PendSV exception which is where the real work is done.
@********************************************************************************************************

.thumb_func
OSCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 80002d4:	e000ed04 	.word	0xe000ed04

080002d8 <CPU_IntDis>:
@              void  CPU_IntEn (void);
@********************************************************************************************************

.thumb_func
CPU_IntDis:
        CPSID   I
 80002d8:	b672      	cpsid	i
        BX      LR
 80002da:	4770      	bx	lr

080002dc <CPU_IntEn>:

.thumb_func
CPU_IntEn:
        CPSIE   I
 80002dc:	b662      	cpsie	i
        BX      LR
 80002de:	4770      	bx	lr

080002e0 <CPU_SR_Save>:
@                       }
@********************************************************************************************************

.thumb_func
CPU_SR_Save:
        MRS     R0, PRIMASK                     @ Set prio int mask to mask all (except faults)
 80002e0:	f3ef 8010 	mrs	r0, PRIMASK
        CPSID   I
 80002e4:	b672      	cpsid	i
        BX      LR
 80002e6:	4770      	bx	lr

080002e8 <CPU_SR_Restore>:

.thumb_func
CPU_SR_Restore:                                  @ See Note #2.
        MSR     PRIMASK, R0
 80002e8:	f380 8810 	msr	PRIMASK, r0
        BX      LR
 80002ec:	4770      	bx	lr

080002ee <CPU_WaitForInt>:
@ Argument(s) : none.
@********************************************************************************************************

.thumb_func
CPU_WaitForInt:
        WFI                                     @ Wait for interrupt
 80002ee:	bf30      	wfi
        BX      LR
 80002f0:	4770      	bx	lr

080002f2 <CPU_WaitForExcept>:
@ Argument(s) : none.
@********************************************************************************************************

.thumb_func
CPU_WaitForExcept:
        WFE                                     @ Wait for exception
 80002f2:	bf20      	wfe
        BX      LR
 80002f4:	4770      	bx	lr

080002f6 <CPU_CntLeadZeros>:
@                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
@********************************************************************************************************

.thumb_func
CPU_CntLeadZeros:
        CLZ     R0, R0                          @ Count leading zeros
 80002f6:	fab0 f080 	clz	r0, r0
        BX      LR
 80002fa:	4770      	bx	lr

080002fc <CPU_CntTrailZeros>:
@                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
@********************************************************************************************************

.thumb_func
CPU_CntTrailZeros:
        RBIT    R0, R0                          @ Reverse bits
 80002fc:	fa90 f0a0 	rbit	r0, r0
        CLZ     R0, R0                          @ Count trailing zeros
 8000300:	fab0 f080 	clz	r0, r0
        BX      LR
 8000304:	4770      	bx	lr

08000306 <CPU_RevBits>:
@                       'val's final bit  N       =  'val's original bit  0
@********************************************************************************************************

.thumb_func
CPU_RevBits:
        RBIT    R0, R0                          @ Reverse bits
 8000306:	fa90 f0a0 	rbit	r0, r0
        BX      LR
 800030a:	4770      	bx	lr

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b97e 	b.w	8000620 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	468c      	mov	ip, r1
 8000342:	460e      	mov	r6, r1
 8000344:	4604      	mov	r4, r0
 8000346:	9d08      	ldr	r5, [sp, #32]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d150      	bne.n	80003ee <__udivmoddi4+0xb2>
 800034c:	428a      	cmp	r2, r1
 800034e:	4617      	mov	r7, r2
 8000350:	d96c      	bls.n	800042c <__udivmoddi4+0xf0>
 8000352:	fab2 fe82 	clz	lr, r2
 8000356:	f1be 0f00 	cmp.w	lr, #0
 800035a:	d00b      	beq.n	8000374 <__udivmoddi4+0x38>
 800035c:	f1ce 0420 	rsb	r4, lr, #32
 8000360:	fa20 f404 	lsr.w	r4, r0, r4
 8000364:	fa01 f60e 	lsl.w	r6, r1, lr
 8000368:	ea44 0c06 	orr.w	ip, r4, r6
 800036c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000370:	fa00 f40e 	lsl.w	r4, r0, lr
 8000374:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000378:	0c22      	lsrs	r2, r4, #16
 800037a:	fbbc f0f9 	udiv	r0, ip, r9
 800037e:	fa1f f887 	uxth.w	r8, r7
 8000382:	fb09 c610 	mls	r6, r9, r0, ip
 8000386:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800038a:	fb00 f308 	mul.w	r3, r0, r8
 800038e:	42b3      	cmp	r3, r6
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0x6a>
 8000392:	19f6      	adds	r6, r6, r7
 8000394:	f100 32ff 	add.w	r2, r0, #4294967295
 8000398:	f080 8122 	bcs.w	80005e0 <__udivmoddi4+0x2a4>
 800039c:	42b3      	cmp	r3, r6
 800039e:	f240 811f 	bls.w	80005e0 <__udivmoddi4+0x2a4>
 80003a2:	3802      	subs	r0, #2
 80003a4:	443e      	add	r6, r7
 80003a6:	1af6      	subs	r6, r6, r3
 80003a8:	b2a2      	uxth	r2, r4
 80003aa:	fbb6 f3f9 	udiv	r3, r6, r9
 80003ae:	fb09 6613 	mls	r6, r9, r3, r6
 80003b2:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 80003b6:	fb03 f808 	mul.w	r8, r3, r8
 80003ba:	45a0      	cmp	r8, r4
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0x96>
 80003be:	19e4      	adds	r4, r4, r7
 80003c0:	f103 32ff 	add.w	r2, r3, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x2a0>
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x2a0>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ebc8 0404 	rsb	r4, r8, r4
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	2100      	movs	r1, #0
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d062      	beq.n	80004a6 <__udivmoddi4+0x16a>
 80003e0:	fa24 f40e 	lsr.w	r4, r4, lr
 80003e4:	2300      	movs	r3, #0
 80003e6:	602c      	str	r4, [r5, #0]
 80003e8:	606b      	str	r3, [r5, #4]
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	428b      	cmp	r3, r1
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0xc6>
 80003f2:	2d00      	cmp	r5, #0
 80003f4:	d055      	beq.n	80004a2 <__udivmoddi4+0x166>
 80003f6:	2100      	movs	r1, #0
 80003f8:	e885 0041 	stmia.w	r5, {r0, r6}
 80003fc:	4608      	mov	r0, r1
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f183 	clz	r1, r3
 8000406:	2900      	cmp	r1, #0
 8000408:	f040 8090 	bne.w	800052c <__udivmoddi4+0x1f0>
 800040c:	42b3      	cmp	r3, r6
 800040e:	d302      	bcc.n	8000416 <__udivmoddi4+0xda>
 8000410:	4282      	cmp	r2, r0
 8000412:	f200 80f8 	bhi.w	8000606 <__udivmoddi4+0x2ca>
 8000416:	1a84      	subs	r4, r0, r2
 8000418:	eb66 0603 	sbc.w	r6, r6, r3
 800041c:	2001      	movs	r0, #1
 800041e:	46b4      	mov	ip, r6
 8000420:	2d00      	cmp	r5, #0
 8000422:	d040      	beq.n	80004a6 <__udivmoddi4+0x16a>
 8000424:	e885 1010 	stmia.w	r5, {r4, ip}
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	b912      	cbnz	r2, 8000434 <__udivmoddi4+0xf8>
 800042e:	2701      	movs	r7, #1
 8000430:	fbb7 f7f2 	udiv	r7, r7, r2
 8000434:	fab7 fe87 	clz	lr, r7
 8000438:	f1be 0f00 	cmp.w	lr, #0
 800043c:	d135      	bne.n	80004aa <__udivmoddi4+0x16e>
 800043e:	1bf3      	subs	r3, r6, r7
 8000440:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	2101      	movs	r1, #1
 800044a:	fbb3 f0f8 	udiv	r0, r3, r8
 800044e:	0c22      	lsrs	r2, r4, #16
 8000450:	fb08 3610 	mls	r6, r8, r0, r3
 8000454:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000458:	fb0c f300 	mul.w	r3, ip, r0
 800045c:	42b3      	cmp	r3, r6
 800045e:	d907      	bls.n	8000470 <__udivmoddi4+0x134>
 8000460:	19f6      	adds	r6, r6, r7
 8000462:	f100 32ff 	add.w	r2, r0, #4294967295
 8000466:	d202      	bcs.n	800046e <__udivmoddi4+0x132>
 8000468:	42b3      	cmp	r3, r6
 800046a:	f200 80ce 	bhi.w	800060a <__udivmoddi4+0x2ce>
 800046e:	4610      	mov	r0, r2
 8000470:	1af6      	subs	r6, r6, r3
 8000472:	b2a2      	uxth	r2, r4
 8000474:	fbb6 f3f8 	udiv	r3, r6, r8
 8000478:	fb08 6613 	mls	r6, r8, r3, r6
 800047c:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000480:	fb0c fc03 	mul.w	ip, ip, r3
 8000484:	45a4      	cmp	ip, r4
 8000486:	d907      	bls.n	8000498 <__udivmoddi4+0x15c>
 8000488:	19e4      	adds	r4, r4, r7
 800048a:	f103 32ff 	add.w	r2, r3, #4294967295
 800048e:	d202      	bcs.n	8000496 <__udivmoddi4+0x15a>
 8000490:	45a4      	cmp	ip, r4
 8000492:	f200 80b5 	bhi.w	8000600 <__udivmoddi4+0x2c4>
 8000496:	4613      	mov	r3, r2
 8000498:	ebcc 0404 	rsb	r4, ip, r4
 800049c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a0:	e79c      	b.n	80003dc <__udivmoddi4+0xa0>
 80004a2:	4629      	mov	r1, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004aa:	f1ce 0120 	rsb	r1, lr, #32
 80004ae:	fa06 f30e 	lsl.w	r3, r6, lr
 80004b2:	fa07 f70e 	lsl.w	r7, r7, lr
 80004b6:	fa20 f901 	lsr.w	r9, r0, r1
 80004ba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80004be:	40ce      	lsrs	r6, r1
 80004c0:	ea49 0903 	orr.w	r9, r9, r3
 80004c4:	fbb6 faf8 	udiv	sl, r6, r8
 80004c8:	ea4f 4419 	mov.w	r4, r9, lsr #16
 80004cc:	fb08 661a 	mls	r6, r8, sl, r6
 80004d0:	fa1f fc87 	uxth.w	ip, r7
 80004d4:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 80004d8:	fb0a f20c 	mul.w	r2, sl, ip
 80004dc:	429a      	cmp	r2, r3
 80004de:	fa00 f40e 	lsl.w	r4, r0, lr
 80004e2:	d90a      	bls.n	80004fa <__udivmoddi4+0x1be>
 80004e4:	19db      	adds	r3, r3, r7
 80004e6:	f10a 31ff 	add.w	r1, sl, #4294967295
 80004ea:	f080 8087 	bcs.w	80005fc <__udivmoddi4+0x2c0>
 80004ee:	429a      	cmp	r2, r3
 80004f0:	f240 8084 	bls.w	80005fc <__udivmoddi4+0x2c0>
 80004f4:	f1aa 0a02 	sub.w	sl, sl, #2
 80004f8:	443b      	add	r3, r7
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	fa1f f989 	uxth.w	r9, r9
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 800050c:	fb01 f60c 	mul.w	r6, r1, ip
 8000510:	429e      	cmp	r6, r3
 8000512:	d907      	bls.n	8000524 <__udivmoddi4+0x1e8>
 8000514:	19db      	adds	r3, r3, r7
 8000516:	f101 32ff 	add.w	r2, r1, #4294967295
 800051a:	d26b      	bcs.n	80005f4 <__udivmoddi4+0x2b8>
 800051c:	429e      	cmp	r6, r3
 800051e:	d969      	bls.n	80005f4 <__udivmoddi4+0x2b8>
 8000520:	3902      	subs	r1, #2
 8000522:	443b      	add	r3, r7
 8000524:	1b9b      	subs	r3, r3, r6
 8000526:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800052a:	e78e      	b.n	800044a <__udivmoddi4+0x10e>
 800052c:	f1c1 0e20 	rsb	lr, r1, #32
 8000530:	fa22 f40e 	lsr.w	r4, r2, lr
 8000534:	408b      	lsls	r3, r1
 8000536:	4323      	orrs	r3, r4
 8000538:	fa20 f70e 	lsr.w	r7, r0, lr
 800053c:	fa06 f401 	lsl.w	r4, r6, r1
 8000540:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000544:	fa26 f60e 	lsr.w	r6, r6, lr
 8000548:	433c      	orrs	r4, r7
 800054a:	fbb6 f9fc 	udiv	r9, r6, ip
 800054e:	0c27      	lsrs	r7, r4, #16
 8000550:	fb0c 6619 	mls	r6, ip, r9, r6
 8000554:	fa1f f883 	uxth.w	r8, r3
 8000558:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 800055c:	fb09 f708 	mul.w	r7, r9, r8
 8000560:	42b7      	cmp	r7, r6
 8000562:	fa02 f201 	lsl.w	r2, r2, r1
 8000566:	fa00 fa01 	lsl.w	sl, r0, r1
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x242>
 800056c:	18f6      	adds	r6, r6, r3
 800056e:	f109 30ff 	add.w	r0, r9, #4294967295
 8000572:	d241      	bcs.n	80005f8 <__udivmoddi4+0x2bc>
 8000574:	42b7      	cmp	r7, r6
 8000576:	d93f      	bls.n	80005f8 <__udivmoddi4+0x2bc>
 8000578:	f1a9 0902 	sub.w	r9, r9, #2
 800057c:	441e      	add	r6, r3
 800057e:	1bf6      	subs	r6, r6, r7
 8000580:	b2a0      	uxth	r0, r4
 8000582:	fbb6 f4fc 	udiv	r4, r6, ip
 8000586:	fb0c 6614 	mls	r6, ip, r4, r6
 800058a:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 800058e:	fb04 f808 	mul.w	r8, r4, r8
 8000592:	45b8      	cmp	r8, r7
 8000594:	d907      	bls.n	80005a6 <__udivmoddi4+0x26a>
 8000596:	18ff      	adds	r7, r7, r3
 8000598:	f104 30ff 	add.w	r0, r4, #4294967295
 800059c:	d228      	bcs.n	80005f0 <__udivmoddi4+0x2b4>
 800059e:	45b8      	cmp	r8, r7
 80005a0:	d926      	bls.n	80005f0 <__udivmoddi4+0x2b4>
 80005a2:	3c02      	subs	r4, #2
 80005a4:	441f      	add	r7, r3
 80005a6:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 80005aa:	ebc8 0707 	rsb	r7, r8, r7
 80005ae:	fba0 8902 	umull	r8, r9, r0, r2
 80005b2:	454f      	cmp	r7, r9
 80005b4:	4644      	mov	r4, r8
 80005b6:	464e      	mov	r6, r9
 80005b8:	d314      	bcc.n	80005e4 <__udivmoddi4+0x2a8>
 80005ba:	d029      	beq.n	8000610 <__udivmoddi4+0x2d4>
 80005bc:	b365      	cbz	r5, 8000618 <__udivmoddi4+0x2dc>
 80005be:	ebba 0304 	subs.w	r3, sl, r4
 80005c2:	eb67 0706 	sbc.w	r7, r7, r6
 80005c6:	fa07 fe0e 	lsl.w	lr, r7, lr
 80005ca:	40cb      	lsrs	r3, r1
 80005cc:	40cf      	lsrs	r7, r1
 80005ce:	ea4e 0303 	orr.w	r3, lr, r3
 80005d2:	e885 0088 	stmia.w	r5, {r3, r7}
 80005d6:	2100      	movs	r1, #0
 80005d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005dc:	4613      	mov	r3, r2
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x96>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e6e0      	b.n	80003a6 <__udivmoddi4+0x6a>
 80005e4:	ebb8 0402 	subs.w	r4, r8, r2
 80005e8:	eb69 0603 	sbc.w	r6, r9, r3
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7e5      	b.n	80005bc <__udivmoddi4+0x280>
 80005f0:	4604      	mov	r4, r0
 80005f2:	e7d8      	b.n	80005a6 <__udivmoddi4+0x26a>
 80005f4:	4611      	mov	r1, r2
 80005f6:	e795      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005f8:	4681      	mov	r9, r0
 80005fa:	e7c0      	b.n	800057e <__udivmoddi4+0x242>
 80005fc:	468a      	mov	sl, r1
 80005fe:	e77c      	b.n	80004fa <__udivmoddi4+0x1be>
 8000600:	3b02      	subs	r3, #2
 8000602:	443c      	add	r4, r7
 8000604:	e748      	b.n	8000498 <__udivmoddi4+0x15c>
 8000606:	4608      	mov	r0, r1
 8000608:	e70a      	b.n	8000420 <__udivmoddi4+0xe4>
 800060a:	3802      	subs	r0, #2
 800060c:	443e      	add	r6, r7
 800060e:	e72f      	b.n	8000470 <__udivmoddi4+0x134>
 8000610:	45c2      	cmp	sl, r8
 8000612:	d3e7      	bcc.n	80005e4 <__udivmoddi4+0x2a8>
 8000614:	463e      	mov	r6, r7
 8000616:	e7d1      	b.n	80005bc <__udivmoddi4+0x280>
 8000618:	4629      	mov	r1, r5
 800061a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800061e:	bf00      	nop

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <memcpy>:
 8000624:	4684      	mov	ip, r0
 8000626:	ea41 0300 	orr.w	r3, r1, r0
 800062a:	f013 0303 	ands.w	r3, r3, #3
 800062e:	d16d      	bne.n	800070c <memcpy+0xe8>
 8000630:	3a40      	subs	r2, #64	; 0x40
 8000632:	d341      	bcc.n	80006b8 <memcpy+0x94>
 8000634:	f851 3b04 	ldr.w	r3, [r1], #4
 8000638:	f840 3b04 	str.w	r3, [r0], #4
 800063c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000640:	f840 3b04 	str.w	r3, [r0], #4
 8000644:	f851 3b04 	ldr.w	r3, [r1], #4
 8000648:	f840 3b04 	str.w	r3, [r0], #4
 800064c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000650:	f840 3b04 	str.w	r3, [r0], #4
 8000654:	f851 3b04 	ldr.w	r3, [r1], #4
 8000658:	f840 3b04 	str.w	r3, [r0], #4
 800065c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000660:	f840 3b04 	str.w	r3, [r0], #4
 8000664:	f851 3b04 	ldr.w	r3, [r1], #4
 8000668:	f840 3b04 	str.w	r3, [r0], #4
 800066c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000670:	f840 3b04 	str.w	r3, [r0], #4
 8000674:	f851 3b04 	ldr.w	r3, [r1], #4
 8000678:	f840 3b04 	str.w	r3, [r0], #4
 800067c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000680:	f840 3b04 	str.w	r3, [r0], #4
 8000684:	f851 3b04 	ldr.w	r3, [r1], #4
 8000688:	f840 3b04 	str.w	r3, [r0], #4
 800068c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000690:	f840 3b04 	str.w	r3, [r0], #4
 8000694:	f851 3b04 	ldr.w	r3, [r1], #4
 8000698:	f840 3b04 	str.w	r3, [r0], #4
 800069c:	f851 3b04 	ldr.w	r3, [r1], #4
 80006a0:	f840 3b04 	str.w	r3, [r0], #4
 80006a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80006a8:	f840 3b04 	str.w	r3, [r0], #4
 80006ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80006b0:	f840 3b04 	str.w	r3, [r0], #4
 80006b4:	3a40      	subs	r2, #64	; 0x40
 80006b6:	d2bd      	bcs.n	8000634 <memcpy+0x10>
 80006b8:	3230      	adds	r2, #48	; 0x30
 80006ba:	d311      	bcc.n	80006e0 <memcpy+0xbc>
 80006bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80006c0:	f840 3b04 	str.w	r3, [r0], #4
 80006c4:	f851 3b04 	ldr.w	r3, [r1], #4
 80006c8:	f840 3b04 	str.w	r3, [r0], #4
 80006cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80006d0:	f840 3b04 	str.w	r3, [r0], #4
 80006d4:	f851 3b04 	ldr.w	r3, [r1], #4
 80006d8:	f840 3b04 	str.w	r3, [r0], #4
 80006dc:	3a10      	subs	r2, #16
 80006de:	d2ed      	bcs.n	80006bc <memcpy+0x98>
 80006e0:	320c      	adds	r2, #12
 80006e2:	d305      	bcc.n	80006f0 <memcpy+0xcc>
 80006e4:	f851 3b04 	ldr.w	r3, [r1], #4
 80006e8:	f840 3b04 	str.w	r3, [r0], #4
 80006ec:	3a04      	subs	r2, #4
 80006ee:	d2f9      	bcs.n	80006e4 <memcpy+0xc0>
 80006f0:	3204      	adds	r2, #4
 80006f2:	d008      	beq.n	8000706 <memcpy+0xe2>
 80006f4:	07d2      	lsls	r2, r2, #31
 80006f6:	bf1c      	itt	ne
 80006f8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80006fc:	f800 3b01 	strbne.w	r3, [r0], #1
 8000700:	d301      	bcc.n	8000706 <memcpy+0xe2>
 8000702:	880b      	ldrh	r3, [r1, #0]
 8000704:	8003      	strh	r3, [r0, #0]
 8000706:	4660      	mov	r0, ip
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	2a08      	cmp	r2, #8
 800070e:	d313      	bcc.n	8000738 <memcpy+0x114>
 8000710:	078b      	lsls	r3, r1, #30
 8000712:	d08d      	beq.n	8000630 <memcpy+0xc>
 8000714:	f010 0303 	ands.w	r3, r0, #3
 8000718:	d08a      	beq.n	8000630 <memcpy+0xc>
 800071a:	f1c3 0304 	rsb	r3, r3, #4
 800071e:	1ad2      	subs	r2, r2, r3
 8000720:	07db      	lsls	r3, r3, #31
 8000722:	bf1c      	itt	ne
 8000724:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000728:	f800 3b01 	strbne.w	r3, [r0], #1
 800072c:	d380      	bcc.n	8000630 <memcpy+0xc>
 800072e:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000732:	f820 3b02 	strh.w	r3, [r0], #2
 8000736:	e77b      	b.n	8000630 <memcpy+0xc>
 8000738:	3a04      	subs	r2, #4
 800073a:	d3d9      	bcc.n	80006f0 <memcpy+0xcc>
 800073c:	3a01      	subs	r2, #1
 800073e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000742:	f800 3b01 	strb.w	r3, [r0], #1
 8000746:	d2f9      	bcs.n	800073c <memcpy+0x118>
 8000748:	780b      	ldrb	r3, [r1, #0]
 800074a:	7003      	strb	r3, [r0, #0]
 800074c:	784b      	ldrb	r3, [r1, #1]
 800074e:	7043      	strb	r3, [r0, #1]
 8000750:	788b      	ldrb	r3, [r1, #2]
 8000752:	7083      	strb	r3, [r0, #2]
 8000754:	4660      	mov	r0, ip
 8000756:	4770      	bx	lr
	...

08000780 <strlen>:
 8000780:	f890 f000 	pld	[r0]
 8000784:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8000788:	f020 0107 	bic.w	r1, r0, #7
 800078c:	f06f 0c00 	mvn.w	ip, #0
 8000790:	f010 0407 	ands.w	r4, r0, #7
 8000794:	f891 f020 	pld	[r1, #32]
 8000798:	f040 8049 	bne.w	800082e <strlen+0xae>
 800079c:	f04f 0400 	mov.w	r4, #0
 80007a0:	f06f 0007 	mvn.w	r0, #7
 80007a4:	e9d1 2300 	ldrd	r2, r3, [r1]
 80007a8:	f891 f040 	pld	[r1, #64]	; 0x40
 80007ac:	f100 0008 	add.w	r0, r0, #8
 80007b0:	fa82 f24c 	uadd8	r2, r2, ip
 80007b4:	faa4 f28c 	sel	r2, r4, ip
 80007b8:	fa83 f34c 	uadd8	r3, r3, ip
 80007bc:	faa2 f38c 	sel	r3, r2, ip
 80007c0:	bb4b      	cbnz	r3, 8000816 <strlen+0x96>
 80007c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80007c6:	fa82 f24c 	uadd8	r2, r2, ip
 80007ca:	f100 0008 	add.w	r0, r0, #8
 80007ce:	faa4 f28c 	sel	r2, r4, ip
 80007d2:	fa83 f34c 	uadd8	r3, r3, ip
 80007d6:	faa2 f38c 	sel	r3, r2, ip
 80007da:	b9e3      	cbnz	r3, 8000816 <strlen+0x96>
 80007dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 80007e0:	fa82 f24c 	uadd8	r2, r2, ip
 80007e4:	f100 0008 	add.w	r0, r0, #8
 80007e8:	faa4 f28c 	sel	r2, r4, ip
 80007ec:	fa83 f34c 	uadd8	r3, r3, ip
 80007f0:	faa2 f38c 	sel	r3, r2, ip
 80007f4:	b97b      	cbnz	r3, 8000816 <strlen+0x96>
 80007f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80007fa:	f101 0120 	add.w	r1, r1, #32
 80007fe:	fa82 f24c 	uadd8	r2, r2, ip
 8000802:	f100 0008 	add.w	r0, r0, #8
 8000806:	faa4 f28c 	sel	r2, r4, ip
 800080a:	fa83 f34c 	uadd8	r3, r3, ip
 800080e:	faa2 f38c 	sel	r3, r2, ip
 8000812:	2b00      	cmp	r3, #0
 8000814:	d0c6      	beq.n	80007a4 <strlen+0x24>
 8000816:	2a00      	cmp	r2, #0
 8000818:	bf04      	itt	eq
 800081a:	3004      	addeq	r0, #4
 800081c:	461a      	moveq	r2, r3
 800081e:	ba12      	rev	r2, r2
 8000820:	fab2 f282 	clz	r2, r2
 8000824:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8000828:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 800082c:	4770      	bx	lr
 800082e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000832:	f004 0503 	and.w	r5, r4, #3
 8000836:	f1c4 0000 	rsb	r0, r4, #0
 800083a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 800083e:	f014 0f04 	tst.w	r4, #4
 8000842:	f891 f040 	pld	[r1, #64]	; 0x40
 8000846:	fa0c f505 	lsl.w	r5, ip, r5
 800084a:	ea62 0205 	orn	r2, r2, r5
 800084e:	bf1c      	itt	ne
 8000850:	ea63 0305 	ornne	r3, r3, r5
 8000854:	4662      	movne	r2, ip
 8000856:	f04f 0400 	mov.w	r4, #0
 800085a:	e7a9      	b.n	80007b0 <strlen+0x30>
 800085c:	0000      	movs	r0, r0
	...

08000860 <memchr>:
 8000860:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000864:	2a10      	cmp	r2, #16
 8000866:	db2b      	blt.n	80008c0 <memchr+0x60>
 8000868:	f010 0f07 	tst.w	r0, #7
 800086c:	d008      	beq.n	8000880 <memchr+0x20>
 800086e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000872:	3a01      	subs	r2, #1
 8000874:	428b      	cmp	r3, r1
 8000876:	d02d      	beq.n	80008d4 <memchr+0x74>
 8000878:	f010 0f07 	tst.w	r0, #7
 800087c:	b342      	cbz	r2, 80008d0 <memchr+0x70>
 800087e:	d1f6      	bne.n	800086e <memchr+0xe>
 8000880:	b4f0      	push	{r4, r5, r6, r7}
 8000882:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000886:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800088a:	f022 0407 	bic.w	r4, r2, #7
 800088e:	f07f 0700 	mvns.w	r7, #0
 8000892:	2300      	movs	r3, #0
 8000894:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000898:	3c08      	subs	r4, #8
 800089a:	ea85 0501 	eor.w	r5, r5, r1
 800089e:	ea86 0601 	eor.w	r6, r6, r1
 80008a2:	fa85 f547 	uadd8	r5, r5, r7
 80008a6:	faa3 f587 	sel	r5, r3, r7
 80008aa:	fa86 f647 	uadd8	r6, r6, r7
 80008ae:	faa5 f687 	sel	r6, r5, r7
 80008b2:	b98e      	cbnz	r6, 80008d8 <memchr+0x78>
 80008b4:	d1ee      	bne.n	8000894 <memchr+0x34>
 80008b6:	bcf0      	pop	{r4, r5, r6, r7}
 80008b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80008bc:	f002 0207 	and.w	r2, r2, #7
 80008c0:	b132      	cbz	r2, 80008d0 <memchr+0x70>
 80008c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80008c6:	3a01      	subs	r2, #1
 80008c8:	ea83 0301 	eor.w	r3, r3, r1
 80008cc:	b113      	cbz	r3, 80008d4 <memchr+0x74>
 80008ce:	d1f8      	bne.n	80008c2 <memchr+0x62>
 80008d0:	2000      	movs	r0, #0
 80008d2:	4770      	bx	lr
 80008d4:	3801      	subs	r0, #1
 80008d6:	4770      	bx	lr
 80008d8:	2d00      	cmp	r5, #0
 80008da:	bf06      	itte	eq
 80008dc:	4635      	moveq	r5, r6
 80008de:	3803      	subeq	r0, #3
 80008e0:	3807      	subne	r0, #7
 80008e2:	f015 0f01 	tst.w	r5, #1
 80008e6:	d107      	bne.n	80008f8 <memchr+0x98>
 80008e8:	3001      	adds	r0, #1
 80008ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80008ee:	bf02      	ittt	eq
 80008f0:	3001      	addeq	r0, #1
 80008f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80008f6:	3001      	addeq	r0, #1
 80008f8:	bcf0      	pop	{r4, r5, r6, r7}
 80008fa:	3801      	subs	r0, #1
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop

08000900 <__aeabi_drsub>:
 8000900:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000904:	e002      	b.n	800090c <__adddf3>
 8000906:	bf00      	nop

08000908 <__aeabi_dsub>:
 8000908:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800090c <__adddf3>:
 800090c:	b530      	push	{r4, r5, lr}
 800090e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000912:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000916:	ea94 0f05 	teq	r4, r5
 800091a:	bf08      	it	eq
 800091c:	ea90 0f02 	teqeq	r0, r2
 8000920:	bf1f      	itttt	ne
 8000922:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000926:	ea55 0c02 	orrsne.w	ip, r5, r2
 800092a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800092e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000932:	f000 80e2 	beq.w	8000afa <__adddf3+0x1ee>
 8000936:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800093a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800093e:	bfb8      	it	lt
 8000940:	426d      	neglt	r5, r5
 8000942:	dd0c      	ble.n	800095e <__adddf3+0x52>
 8000944:	442c      	add	r4, r5
 8000946:	ea80 0202 	eor.w	r2, r0, r2
 800094a:	ea81 0303 	eor.w	r3, r1, r3
 800094e:	ea82 0000 	eor.w	r0, r2, r0
 8000952:	ea83 0101 	eor.w	r1, r3, r1
 8000956:	ea80 0202 	eor.w	r2, r0, r2
 800095a:	ea81 0303 	eor.w	r3, r1, r3
 800095e:	2d36      	cmp	r5, #54	; 0x36
 8000960:	bf88      	it	hi
 8000962:	bd30      	pophi	{r4, r5, pc}
 8000964:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000968:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800096c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000970:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000974:	d002      	beq.n	800097c <__adddf3+0x70>
 8000976:	4240      	negs	r0, r0
 8000978:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800097c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000980:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000984:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000988:	d002      	beq.n	8000990 <__adddf3+0x84>
 800098a:	4252      	negs	r2, r2
 800098c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000990:	ea94 0f05 	teq	r4, r5
 8000994:	f000 80a7 	beq.w	8000ae6 <__adddf3+0x1da>
 8000998:	f1a4 0401 	sub.w	r4, r4, #1
 800099c:	f1d5 0e20 	rsbs	lr, r5, #32
 80009a0:	db0d      	blt.n	80009be <__adddf3+0xb2>
 80009a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80009a6:	fa22 f205 	lsr.w	r2, r2, r5
 80009aa:	1880      	adds	r0, r0, r2
 80009ac:	f141 0100 	adc.w	r1, r1, #0
 80009b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80009b4:	1880      	adds	r0, r0, r2
 80009b6:	fa43 f305 	asr.w	r3, r3, r5
 80009ba:	4159      	adcs	r1, r3
 80009bc:	e00e      	b.n	80009dc <__adddf3+0xd0>
 80009be:	f1a5 0520 	sub.w	r5, r5, #32
 80009c2:	f10e 0e20 	add.w	lr, lr, #32
 80009c6:	2a01      	cmp	r2, #1
 80009c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80009cc:	bf28      	it	cs
 80009ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80009d2:	fa43 f305 	asr.w	r3, r3, r5
 80009d6:	18c0      	adds	r0, r0, r3
 80009d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80009dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80009e0:	d507      	bpl.n	80009f2 <__adddf3+0xe6>
 80009e2:	f04f 0e00 	mov.w	lr, #0
 80009e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80009ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80009ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80009f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80009f6:	d31b      	bcc.n	8000a30 <__adddf3+0x124>
 80009f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80009fc:	d30c      	bcc.n	8000a18 <__adddf3+0x10c>
 80009fe:	0849      	lsrs	r1, r1, #1
 8000a00:	ea5f 0030 	movs.w	r0, r0, rrx
 8000a04:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000a08:	f104 0401 	add.w	r4, r4, #1
 8000a0c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000a10:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000a14:	f080 809a 	bcs.w	8000b4c <__adddf3+0x240>
 8000a18:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000a1c:	bf08      	it	eq
 8000a1e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a22:	f150 0000 	adcs.w	r0, r0, #0
 8000a26:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a2a:	ea41 0105 	orr.w	r1, r1, r5
 8000a2e:	bd30      	pop	{r4, r5, pc}
 8000a30:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000a34:	4140      	adcs	r0, r0
 8000a36:	eb41 0101 	adc.w	r1, r1, r1
 8000a3a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a3e:	f1a4 0401 	sub.w	r4, r4, #1
 8000a42:	d1e9      	bne.n	8000a18 <__adddf3+0x10c>
 8000a44:	f091 0f00 	teq	r1, #0
 8000a48:	bf04      	itt	eq
 8000a4a:	4601      	moveq	r1, r0
 8000a4c:	2000      	moveq	r0, #0
 8000a4e:	fab1 f381 	clz	r3, r1
 8000a52:	bf08      	it	eq
 8000a54:	3320      	addeq	r3, #32
 8000a56:	f1a3 030b 	sub.w	r3, r3, #11
 8000a5a:	f1b3 0220 	subs.w	r2, r3, #32
 8000a5e:	da0c      	bge.n	8000a7a <__adddf3+0x16e>
 8000a60:	320c      	adds	r2, #12
 8000a62:	dd08      	ble.n	8000a76 <__adddf3+0x16a>
 8000a64:	f102 0c14 	add.w	ip, r2, #20
 8000a68:	f1c2 020c 	rsb	r2, r2, #12
 8000a6c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000a70:	fa21 f102 	lsr.w	r1, r1, r2
 8000a74:	e00c      	b.n	8000a90 <__adddf3+0x184>
 8000a76:	f102 0214 	add.w	r2, r2, #20
 8000a7a:	bfd8      	it	le
 8000a7c:	f1c2 0c20 	rsble	ip, r2, #32
 8000a80:	fa01 f102 	lsl.w	r1, r1, r2
 8000a84:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000a88:	bfdc      	itt	le
 8000a8a:	ea41 010c 	orrle.w	r1, r1, ip
 8000a8e:	4090      	lslle	r0, r2
 8000a90:	1ae4      	subs	r4, r4, r3
 8000a92:	bfa2      	ittt	ge
 8000a94:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000a98:	4329      	orrge	r1, r5
 8000a9a:	bd30      	popge	{r4, r5, pc}
 8000a9c:	ea6f 0404 	mvn.w	r4, r4
 8000aa0:	3c1f      	subs	r4, #31
 8000aa2:	da1c      	bge.n	8000ade <__adddf3+0x1d2>
 8000aa4:	340c      	adds	r4, #12
 8000aa6:	dc0e      	bgt.n	8000ac6 <__adddf3+0x1ba>
 8000aa8:	f104 0414 	add.w	r4, r4, #20
 8000aac:	f1c4 0220 	rsb	r2, r4, #32
 8000ab0:	fa20 f004 	lsr.w	r0, r0, r4
 8000ab4:	fa01 f302 	lsl.w	r3, r1, r2
 8000ab8:	ea40 0003 	orr.w	r0, r0, r3
 8000abc:	fa21 f304 	lsr.w	r3, r1, r4
 8000ac0:	ea45 0103 	orr.w	r1, r5, r3
 8000ac4:	bd30      	pop	{r4, r5, pc}
 8000ac6:	f1c4 040c 	rsb	r4, r4, #12
 8000aca:	f1c4 0220 	rsb	r2, r4, #32
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	fa01 f304 	lsl.w	r3, r1, r4
 8000ad6:	ea40 0003 	orr.w	r0, r0, r3
 8000ada:	4629      	mov	r1, r5
 8000adc:	bd30      	pop	{r4, r5, pc}
 8000ade:	fa21 f004 	lsr.w	r0, r1, r4
 8000ae2:	4629      	mov	r1, r5
 8000ae4:	bd30      	pop	{r4, r5, pc}
 8000ae6:	f094 0f00 	teq	r4, #0
 8000aea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000aee:	bf06      	itte	eq
 8000af0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000af4:	3401      	addeq	r4, #1
 8000af6:	3d01      	subne	r5, #1
 8000af8:	e74e      	b.n	8000998 <__adddf3+0x8c>
 8000afa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000afe:	bf18      	it	ne
 8000b00:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000b04:	d029      	beq.n	8000b5a <__adddf3+0x24e>
 8000b06:	ea94 0f05 	teq	r4, r5
 8000b0a:	bf08      	it	eq
 8000b0c:	ea90 0f02 	teqeq	r0, r2
 8000b10:	d005      	beq.n	8000b1e <__adddf3+0x212>
 8000b12:	ea54 0c00 	orrs.w	ip, r4, r0
 8000b16:	bf04      	itt	eq
 8000b18:	4619      	moveq	r1, r3
 8000b1a:	4610      	moveq	r0, r2
 8000b1c:	bd30      	pop	{r4, r5, pc}
 8000b1e:	ea91 0f03 	teq	r1, r3
 8000b22:	bf1e      	ittt	ne
 8000b24:	2100      	movne	r1, #0
 8000b26:	2000      	movne	r0, #0
 8000b28:	bd30      	popne	{r4, r5, pc}
 8000b2a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000b2e:	d105      	bne.n	8000b3c <__adddf3+0x230>
 8000b30:	0040      	lsls	r0, r0, #1
 8000b32:	4149      	adcs	r1, r1
 8000b34:	bf28      	it	cs
 8000b36:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000b3a:	bd30      	pop	{r4, r5, pc}
 8000b3c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000b40:	bf3c      	itt	cc
 8000b42:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000b46:	bd30      	popcc	{r4, r5, pc}
 8000b48:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000b4c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000b50:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	bd30      	pop	{r4, r5, pc}
 8000b5a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000b5e:	bf1a      	itte	ne
 8000b60:	4619      	movne	r1, r3
 8000b62:	4610      	movne	r0, r2
 8000b64:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000b68:	bf1c      	itt	ne
 8000b6a:	460b      	movne	r3, r1
 8000b6c:	4602      	movne	r2, r0
 8000b6e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000b72:	bf06      	itte	eq
 8000b74:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000b78:	ea91 0f03 	teqeq	r1, r3
 8000b7c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000b80:	bd30      	pop	{r4, r5, pc}
 8000b82:	bf00      	nop

08000b84 <__aeabi_ui2d>:
 8000b84:	f090 0f00 	teq	r0, #0
 8000b88:	bf04      	itt	eq
 8000b8a:	2100      	moveq	r1, #0
 8000b8c:	4770      	bxeq	lr
 8000b8e:	b530      	push	{r4, r5, lr}
 8000b90:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000b94:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000b98:	f04f 0500 	mov.w	r5, #0
 8000b9c:	f04f 0100 	mov.w	r1, #0
 8000ba0:	e750      	b.n	8000a44 <__adddf3+0x138>
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_i2d>:
 8000ba4:	f090 0f00 	teq	r0, #0
 8000ba8:	bf04      	itt	eq
 8000baa:	2100      	moveq	r1, #0
 8000bac:	4770      	bxeq	lr
 8000bae:	b530      	push	{r4, r5, lr}
 8000bb0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000bb4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000bb8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000bbc:	bf48      	it	mi
 8000bbe:	4240      	negmi	r0, r0
 8000bc0:	f04f 0100 	mov.w	r1, #0
 8000bc4:	e73e      	b.n	8000a44 <__adddf3+0x138>
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_f2d>:
 8000bc8:	0042      	lsls	r2, r0, #1
 8000bca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000bce:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bd2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000bd6:	bf1f      	itttt	ne
 8000bd8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000bdc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000be0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000be4:	4770      	bxne	lr
 8000be6:	f092 0f00 	teq	r2, #0
 8000bea:	bf14      	ite	ne
 8000bec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000bf0:	4770      	bxeq	lr
 8000bf2:	b530      	push	{r4, r5, lr}
 8000bf4:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000bf8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000bfc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000c00:	e720      	b.n	8000a44 <__adddf3+0x138>
 8000c02:	bf00      	nop

08000c04 <__aeabi_ul2d>:
 8000c04:	ea50 0201 	orrs.w	r2, r0, r1
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	b530      	push	{r4, r5, lr}
 8000c0e:	f04f 0500 	mov.w	r5, #0
 8000c12:	e00a      	b.n	8000c2a <__aeabi_l2d+0x16>

08000c14 <__aeabi_l2d>:
 8000c14:	ea50 0201 	orrs.w	r2, r0, r1
 8000c18:	bf08      	it	eq
 8000c1a:	4770      	bxeq	lr
 8000c1c:	b530      	push	{r4, r5, lr}
 8000c1e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000c22:	d502      	bpl.n	8000c2a <__aeabi_l2d+0x16>
 8000c24:	4240      	negs	r0, r0
 8000c26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c2a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000c2e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000c32:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000c36:	f43f aedc 	beq.w	80009f2 <__adddf3+0xe6>
 8000c3a:	f04f 0203 	mov.w	r2, #3
 8000c3e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000c42:	bf18      	it	ne
 8000c44:	3203      	addne	r2, #3
 8000c46:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000c4a:	bf18      	it	ne
 8000c4c:	3203      	addne	r2, #3
 8000c4e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000c52:	f1c2 0320 	rsb	r3, r2, #32
 8000c56:	fa00 fc03 	lsl.w	ip, r0, r3
 8000c5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c5e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000c62:	ea40 000e 	orr.w	r0, r0, lr
 8000c66:	fa21 f102 	lsr.w	r1, r1, r2
 8000c6a:	4414      	add	r4, r2
 8000c6c:	e6c1      	b.n	80009f2 <__adddf3+0xe6>
 8000c6e:	bf00      	nop

08000c70 <__aeabi_dmul>:
 8000c70:	b570      	push	{r4, r5, r6, lr}
 8000c72:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c76:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000c7a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000c7e:	bf1d      	ittte	ne
 8000c80:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000c84:	ea94 0f0c 	teqne	r4, ip
 8000c88:	ea95 0f0c 	teqne	r5, ip
 8000c8c:	f000 f8de 	bleq	8000e4c <__aeabi_dmul+0x1dc>
 8000c90:	442c      	add	r4, r5
 8000c92:	ea81 0603 	eor.w	r6, r1, r3
 8000c96:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000c9a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000c9e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000ca2:	bf18      	it	ne
 8000ca4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000ca8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000cb0:	d038      	beq.n	8000d24 <__aeabi_dmul+0xb4>
 8000cb2:	fba0 ce02 	umull	ip, lr, r0, r2
 8000cb6:	f04f 0500 	mov.w	r5, #0
 8000cba:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000cbe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000cc2:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000cc6:	f04f 0600 	mov.w	r6, #0
 8000cca:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000cce:	f09c 0f00 	teq	ip, #0
 8000cd2:	bf18      	it	ne
 8000cd4:	f04e 0e01 	orrne.w	lr, lr, #1
 8000cd8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000cdc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000ce0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000ce4:	d204      	bcs.n	8000cf0 <__aeabi_dmul+0x80>
 8000ce6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000cea:	416d      	adcs	r5, r5
 8000cec:	eb46 0606 	adc.w	r6, r6, r6
 8000cf0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000cf4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000cf8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000cfc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000d00:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000d04:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000d08:	bf88      	it	hi
 8000d0a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000d0e:	d81e      	bhi.n	8000d4e <__aeabi_dmul+0xde>
 8000d10:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000d14:	bf08      	it	eq
 8000d16:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000d1a:	f150 0000 	adcs.w	r0, r0, #0
 8000d1e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000d22:	bd70      	pop	{r4, r5, r6, pc}
 8000d24:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000d28:	ea46 0101 	orr.w	r1, r6, r1
 8000d2c:	ea40 0002 	orr.w	r0, r0, r2
 8000d30:	ea81 0103 	eor.w	r1, r1, r3
 8000d34:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000d38:	bfc2      	ittt	gt
 8000d3a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000d3e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000d42:	bd70      	popgt	{r4, r5, r6, pc}
 8000d44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d48:	f04f 0e00 	mov.w	lr, #0
 8000d4c:	3c01      	subs	r4, #1
 8000d4e:	f300 80ab 	bgt.w	8000ea8 <__aeabi_dmul+0x238>
 8000d52:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000d56:	bfde      	ittt	le
 8000d58:	2000      	movle	r0, #0
 8000d5a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000d5e:	bd70      	pople	{r4, r5, r6, pc}
 8000d60:	f1c4 0400 	rsb	r4, r4, #0
 8000d64:	3c20      	subs	r4, #32
 8000d66:	da35      	bge.n	8000dd4 <__aeabi_dmul+0x164>
 8000d68:	340c      	adds	r4, #12
 8000d6a:	dc1b      	bgt.n	8000da4 <__aeabi_dmul+0x134>
 8000d6c:	f104 0414 	add.w	r4, r4, #20
 8000d70:	f1c4 0520 	rsb	r5, r4, #32
 8000d74:	fa00 f305 	lsl.w	r3, r0, r5
 8000d78:	fa20 f004 	lsr.w	r0, r0, r4
 8000d7c:	fa01 f205 	lsl.w	r2, r1, r5
 8000d80:	ea40 0002 	orr.w	r0, r0, r2
 8000d84:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000d88:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000d8c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000d90:	fa21 f604 	lsr.w	r6, r1, r4
 8000d94:	eb42 0106 	adc.w	r1, r2, r6
 8000d98:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000d9c:	bf08      	it	eq
 8000d9e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000da2:	bd70      	pop	{r4, r5, r6, pc}
 8000da4:	f1c4 040c 	rsb	r4, r4, #12
 8000da8:	f1c4 0520 	rsb	r5, r4, #32
 8000dac:	fa00 f304 	lsl.w	r3, r0, r4
 8000db0:	fa20 f005 	lsr.w	r0, r0, r5
 8000db4:	fa01 f204 	lsl.w	r2, r1, r4
 8000db8:	ea40 0002 	orr.w	r0, r0, r2
 8000dbc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000dc0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000dc4:	f141 0100 	adc.w	r1, r1, #0
 8000dc8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000dcc:	bf08      	it	eq
 8000dce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000dd2:	bd70      	pop	{r4, r5, r6, pc}
 8000dd4:	f1c4 0520 	rsb	r5, r4, #32
 8000dd8:	fa00 f205 	lsl.w	r2, r0, r5
 8000ddc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000de0:	fa20 f304 	lsr.w	r3, r0, r4
 8000de4:	fa01 f205 	lsl.w	r2, r1, r5
 8000de8:	ea43 0302 	orr.w	r3, r3, r2
 8000dec:	fa21 f004 	lsr.w	r0, r1, r4
 8000df0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000df4:	fa21 f204 	lsr.w	r2, r1, r4
 8000df8:	ea20 0002 	bic.w	r0, r0, r2
 8000dfc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000e00:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000e04:	bf08      	it	eq
 8000e06:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000e0a:	bd70      	pop	{r4, r5, r6, pc}
 8000e0c:	f094 0f00 	teq	r4, #0
 8000e10:	d10f      	bne.n	8000e32 <__aeabi_dmul+0x1c2>
 8000e12:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000e16:	0040      	lsls	r0, r0, #1
 8000e18:	eb41 0101 	adc.w	r1, r1, r1
 8000e1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000e20:	bf08      	it	eq
 8000e22:	3c01      	subeq	r4, #1
 8000e24:	d0f7      	beq.n	8000e16 <__aeabi_dmul+0x1a6>
 8000e26:	ea41 0106 	orr.w	r1, r1, r6
 8000e2a:	f095 0f00 	teq	r5, #0
 8000e2e:	bf18      	it	ne
 8000e30:	4770      	bxne	lr
 8000e32:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000e36:	0052      	lsls	r2, r2, #1
 8000e38:	eb43 0303 	adc.w	r3, r3, r3
 8000e3c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000e40:	bf08      	it	eq
 8000e42:	3d01      	subeq	r5, #1
 8000e44:	d0f7      	beq.n	8000e36 <__aeabi_dmul+0x1c6>
 8000e46:	ea43 0306 	orr.w	r3, r3, r6
 8000e4a:	4770      	bx	lr
 8000e4c:	ea94 0f0c 	teq	r4, ip
 8000e50:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000e54:	bf18      	it	ne
 8000e56:	ea95 0f0c 	teqne	r5, ip
 8000e5a:	d00c      	beq.n	8000e76 <__aeabi_dmul+0x206>
 8000e5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000e60:	bf18      	it	ne
 8000e62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000e66:	d1d1      	bne.n	8000e0c <__aeabi_dmul+0x19c>
 8000e68:	ea81 0103 	eor.w	r1, r1, r3
 8000e6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000e70:	f04f 0000 	mov.w	r0, #0
 8000e74:	bd70      	pop	{r4, r5, r6, pc}
 8000e76:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000e7a:	bf06      	itte	eq
 8000e7c:	4610      	moveq	r0, r2
 8000e7e:	4619      	moveq	r1, r3
 8000e80:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000e84:	d019      	beq.n	8000eba <__aeabi_dmul+0x24a>
 8000e86:	ea94 0f0c 	teq	r4, ip
 8000e8a:	d102      	bne.n	8000e92 <__aeabi_dmul+0x222>
 8000e8c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000e90:	d113      	bne.n	8000eba <__aeabi_dmul+0x24a>
 8000e92:	ea95 0f0c 	teq	r5, ip
 8000e96:	d105      	bne.n	8000ea4 <__aeabi_dmul+0x234>
 8000e98:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000e9c:	bf1c      	itt	ne
 8000e9e:	4610      	movne	r0, r2
 8000ea0:	4619      	movne	r1, r3
 8000ea2:	d10a      	bne.n	8000eba <__aeabi_dmul+0x24a>
 8000ea4:	ea81 0103 	eor.w	r1, r1, r3
 8000ea8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000eac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000eb0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000eb4:	f04f 0000 	mov.w	r0, #0
 8000eb8:	bd70      	pop	{r4, r5, r6, pc}
 8000eba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000ebe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000ec2:	bd70      	pop	{r4, r5, r6, pc}

08000ec4 <__aeabi_ddiv>:
 8000ec4:	b570      	push	{r4, r5, r6, lr}
 8000ec6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000ece:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000ed2:	bf1d      	ittte	ne
 8000ed4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000ed8:	ea94 0f0c 	teqne	r4, ip
 8000edc:	ea95 0f0c 	teqne	r5, ip
 8000ee0:	f000 f8a7 	bleq	8001032 <__aeabi_ddiv+0x16e>
 8000ee4:	eba4 0405 	sub.w	r4, r4, r5
 8000ee8:	ea81 0e03 	eor.w	lr, r1, r3
 8000eec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ef0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000ef4:	f000 8088 	beq.w	8001008 <__aeabi_ddiv+0x144>
 8000ef8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000efc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000f00:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000f04:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000f08:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000f0c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000f10:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000f14:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000f18:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000f1c:	429d      	cmp	r5, r3
 8000f1e:	bf08      	it	eq
 8000f20:	4296      	cmpeq	r6, r2
 8000f22:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000f26:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000f2a:	d202      	bcs.n	8000f32 <__aeabi_ddiv+0x6e>
 8000f2c:	085b      	lsrs	r3, r3, #1
 8000f2e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000f32:	1ab6      	subs	r6, r6, r2
 8000f34:	eb65 0503 	sbc.w	r5, r5, r3
 8000f38:	085b      	lsrs	r3, r3, #1
 8000f3a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000f3e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000f42:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000f46:	ebb6 0e02 	subs.w	lr, r6, r2
 8000f4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000f4e:	bf22      	ittt	cs
 8000f50:	1ab6      	subcs	r6, r6, r2
 8000f52:	4675      	movcs	r5, lr
 8000f54:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f58:	085b      	lsrs	r3, r3, #1
 8000f5a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000f5e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000f62:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000f66:	bf22      	ittt	cs
 8000f68:	1ab6      	subcs	r6, r6, r2
 8000f6a:	4675      	movcs	r5, lr
 8000f6c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f70:	085b      	lsrs	r3, r3, #1
 8000f72:	ea4f 0232 	mov.w	r2, r2, rrx
 8000f76:	ebb6 0e02 	subs.w	lr, r6, r2
 8000f7a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000f7e:	bf22      	ittt	cs
 8000f80:	1ab6      	subcs	r6, r6, r2
 8000f82:	4675      	movcs	r5, lr
 8000f84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f88:	085b      	lsrs	r3, r3, #1
 8000f8a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000f8e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000f92:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000f96:	bf22      	ittt	cs
 8000f98:	1ab6      	subcs	r6, r6, r2
 8000f9a:	4675      	movcs	r5, lr
 8000f9c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fa0:	ea55 0e06 	orrs.w	lr, r5, r6
 8000fa4:	d018      	beq.n	8000fd8 <__aeabi_ddiv+0x114>
 8000fa6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000faa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000fae:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000fb2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000fb6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000fba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000fbe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000fc2:	d1c0      	bne.n	8000f46 <__aeabi_ddiv+0x82>
 8000fc4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000fc8:	d10b      	bne.n	8000fe2 <__aeabi_ddiv+0x11e>
 8000fca:	ea41 0100 	orr.w	r1, r1, r0
 8000fce:	f04f 0000 	mov.w	r0, #0
 8000fd2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000fd6:	e7b6      	b.n	8000f46 <__aeabi_ddiv+0x82>
 8000fd8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000fdc:	bf04      	itt	eq
 8000fde:	4301      	orreq	r1, r0
 8000fe0:	2000      	moveq	r0, #0
 8000fe2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000fe6:	bf88      	it	hi
 8000fe8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000fec:	f63f aeaf 	bhi.w	8000d4e <__aeabi_dmul+0xde>
 8000ff0:	ebb5 0c03 	subs.w	ip, r5, r3
 8000ff4:	bf04      	itt	eq
 8000ff6:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000ffa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000ffe:	f150 0000 	adcs.w	r0, r0, #0
 8001002:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8001006:	bd70      	pop	{r4, r5, r6, pc}
 8001008:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800100c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8001010:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8001014:	bfc2      	ittt	gt
 8001016:	ebd4 050c 	rsbsgt	r5, r4, ip
 800101a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800101e:	bd70      	popgt	{r4, r5, r6, pc}
 8001020:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001024:	f04f 0e00 	mov.w	lr, #0
 8001028:	3c01      	subs	r4, #1
 800102a:	e690      	b.n	8000d4e <__aeabi_dmul+0xde>
 800102c:	ea45 0e06 	orr.w	lr, r5, r6
 8001030:	e68d      	b.n	8000d4e <__aeabi_dmul+0xde>
 8001032:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8001036:	ea94 0f0c 	teq	r4, ip
 800103a:	bf08      	it	eq
 800103c:	ea95 0f0c 	teqeq	r5, ip
 8001040:	f43f af3b 	beq.w	8000eba <__aeabi_dmul+0x24a>
 8001044:	ea94 0f0c 	teq	r4, ip
 8001048:	d10a      	bne.n	8001060 <__aeabi_ddiv+0x19c>
 800104a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800104e:	f47f af34 	bne.w	8000eba <__aeabi_dmul+0x24a>
 8001052:	ea95 0f0c 	teq	r5, ip
 8001056:	f47f af25 	bne.w	8000ea4 <__aeabi_dmul+0x234>
 800105a:	4610      	mov	r0, r2
 800105c:	4619      	mov	r1, r3
 800105e:	e72c      	b.n	8000eba <__aeabi_dmul+0x24a>
 8001060:	ea95 0f0c 	teq	r5, ip
 8001064:	d106      	bne.n	8001074 <__aeabi_ddiv+0x1b0>
 8001066:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800106a:	f43f aefd 	beq.w	8000e68 <__aeabi_dmul+0x1f8>
 800106e:	4610      	mov	r0, r2
 8001070:	4619      	mov	r1, r3
 8001072:	e722      	b.n	8000eba <__aeabi_dmul+0x24a>
 8001074:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001078:	bf18      	it	ne
 800107a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800107e:	f47f aec5 	bne.w	8000e0c <__aeabi_dmul+0x19c>
 8001082:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8001086:	f47f af0d 	bne.w	8000ea4 <__aeabi_dmul+0x234>
 800108a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800108e:	f47f aeeb 	bne.w	8000e68 <__aeabi_dmul+0x1f8>
 8001092:	e712      	b.n	8000eba <__aeabi_dmul+0x24a>

08001094 <__gedf2>:
 8001094:	f04f 3cff 	mov.w	ip, #4294967295
 8001098:	e006      	b.n	80010a8 <__cmpdf2+0x4>
 800109a:	bf00      	nop

0800109c <__ledf2>:
 800109c:	f04f 0c01 	mov.w	ip, #1
 80010a0:	e002      	b.n	80010a8 <__cmpdf2+0x4>
 80010a2:	bf00      	nop

080010a4 <__cmpdf2>:
 80010a4:	f04f 0c01 	mov.w	ip, #1
 80010a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80010b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80010b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80010b8:	bf18      	it	ne
 80010ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80010be:	d01b      	beq.n	80010f8 <__cmpdf2+0x54>
 80010c0:	b001      	add	sp, #4
 80010c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80010c6:	bf0c      	ite	eq
 80010c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80010cc:	ea91 0f03 	teqne	r1, r3
 80010d0:	bf02      	ittt	eq
 80010d2:	ea90 0f02 	teqeq	r0, r2
 80010d6:	2000      	moveq	r0, #0
 80010d8:	4770      	bxeq	lr
 80010da:	f110 0f00 	cmn.w	r0, #0
 80010de:	ea91 0f03 	teq	r1, r3
 80010e2:	bf58      	it	pl
 80010e4:	4299      	cmppl	r1, r3
 80010e6:	bf08      	it	eq
 80010e8:	4290      	cmpeq	r0, r2
 80010ea:	bf2c      	ite	cs
 80010ec:	17d8      	asrcs	r0, r3, #31
 80010ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80010f2:	f040 0001 	orr.w	r0, r0, #1
 80010f6:	4770      	bx	lr
 80010f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80010fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001100:	d102      	bne.n	8001108 <__cmpdf2+0x64>
 8001102:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8001106:	d107      	bne.n	8001118 <__cmpdf2+0x74>
 8001108:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800110c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001110:	d1d6      	bne.n	80010c0 <__cmpdf2+0x1c>
 8001112:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8001116:	d0d3      	beq.n	80010c0 <__cmpdf2+0x1c>
 8001118:	f85d 0b04 	ldr.w	r0, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop

08001120 <__aeabi_cdrcmple>:
 8001120:	4684      	mov	ip, r0
 8001122:	4610      	mov	r0, r2
 8001124:	4662      	mov	r2, ip
 8001126:	468c      	mov	ip, r1
 8001128:	4619      	mov	r1, r3
 800112a:	4663      	mov	r3, ip
 800112c:	e000      	b.n	8001130 <__aeabi_cdcmpeq>
 800112e:	bf00      	nop

08001130 <__aeabi_cdcmpeq>:
 8001130:	b501      	push	{r0, lr}
 8001132:	f7ff ffb7 	bl	80010a4 <__cmpdf2>
 8001136:	2800      	cmp	r0, #0
 8001138:	bf48      	it	mi
 800113a:	f110 0f00 	cmnmi.w	r0, #0
 800113e:	bd01      	pop	{r0, pc}

08001140 <__aeabi_dcmpeq>:
 8001140:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001144:	f7ff fff4 	bl	8001130 <__aeabi_cdcmpeq>
 8001148:	bf0c      	ite	eq
 800114a:	2001      	moveq	r0, #1
 800114c:	2000      	movne	r0, #0
 800114e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001152:	bf00      	nop

08001154 <__aeabi_dcmplt>:
 8001154:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001158:	f7ff ffea 	bl	8001130 <__aeabi_cdcmpeq>
 800115c:	bf34      	ite	cc
 800115e:	2001      	movcc	r0, #1
 8001160:	2000      	movcs	r0, #0
 8001162:	f85d fb08 	ldr.w	pc, [sp], #8
 8001166:	bf00      	nop

08001168 <__aeabi_dcmple>:
 8001168:	f84d ed08 	str.w	lr, [sp, #-8]!
 800116c:	f7ff ffe0 	bl	8001130 <__aeabi_cdcmpeq>
 8001170:	bf94      	ite	ls
 8001172:	2001      	movls	r0, #1
 8001174:	2000      	movhi	r0, #0
 8001176:	f85d fb08 	ldr.w	pc, [sp], #8
 800117a:	bf00      	nop

0800117c <__aeabi_dcmpge>:
 800117c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001180:	f7ff ffce 	bl	8001120 <__aeabi_cdrcmple>
 8001184:	bf94      	ite	ls
 8001186:	2001      	movls	r0, #1
 8001188:	2000      	movhi	r0, #0
 800118a:	f85d fb08 	ldr.w	pc, [sp], #8
 800118e:	bf00      	nop

08001190 <__aeabi_dcmpgt>:
 8001190:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001194:	f7ff ffc4 	bl	8001120 <__aeabi_cdrcmple>
 8001198:	bf34      	ite	cc
 800119a:	2001      	movcc	r0, #1
 800119c:	2000      	movcs	r0, #0
 800119e:	f85d fb08 	ldr.w	pc, [sp], #8
 80011a2:	bf00      	nop

080011a4 <__aeabi_dcmpun>:
 80011a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80011a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80011ac:	d102      	bne.n	80011b4 <__aeabi_dcmpun+0x10>
 80011ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80011b2:	d10a      	bne.n	80011ca <__aeabi_dcmpun+0x26>
 80011b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80011b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80011bc:	d102      	bne.n	80011c4 <__aeabi_dcmpun+0x20>
 80011be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80011c2:	d102      	bne.n	80011ca <__aeabi_dcmpun+0x26>
 80011c4:	f04f 0000 	mov.w	r0, #0
 80011c8:	4770      	bx	lr
 80011ca:	f04f 0001 	mov.w	r0, #1
 80011ce:	4770      	bx	lr

080011d0 <__aeabi_d2iz>:
 80011d0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80011d4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80011d8:	d215      	bcs.n	8001206 <__aeabi_d2iz+0x36>
 80011da:	d511      	bpl.n	8001200 <__aeabi_d2iz+0x30>
 80011dc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80011e0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80011e4:	d912      	bls.n	800120c <__aeabi_d2iz+0x3c>
 80011e6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80011ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011ee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80011f2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80011f6:	fa23 f002 	lsr.w	r0, r3, r2
 80011fa:	bf18      	it	ne
 80011fc:	4240      	negne	r0, r0
 80011fe:	4770      	bx	lr
 8001200:	f04f 0000 	mov.w	r0, #0
 8001204:	4770      	bx	lr
 8001206:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800120a:	d105      	bne.n	8001218 <__aeabi_d2iz+0x48>
 800120c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8001210:	bf08      	it	eq
 8001212:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001216:	4770      	bx	lr
 8001218:	f04f 0000 	mov.w	r0, #0
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop

08001220 <main>:
 * \returns 0 always
 *
 * \brief This is the standard entry point for C code.
 */
int main (void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08c      	sub	sp, #48	; 0x30
 8001224:	af0a      	add	r7, sp, #40	; 0x28
  OS_ERR  err;

  // Disable all interrupts                                               // <3>
  BSP_IntDisAll();
 8001226:	f004 ffa3 	bl	8006170 <BSP_IntDisAll>
  // Enable Interrupt UART
  BSP_IntEn (BSP_INT_ID_USIC1_01); //**
 800122a:	205b      	movs	r0, #91	; 0x5b
 800122c:	f004 ffa6 	bl	800617c <BSP_IntEn>
  BSP_IntEn (BSP_INT_ID_USIC1_00); //**
 8001230:	205a      	movs	r0, #90	; 0x5a
 8001232:	f004 ffa3 	bl	800617c <BSP_IntEn>

// init SEMI Hosting DEBUG Support                                        // <4>
#if SEMI_HOSTING
  initRetargetSwo();
 8001236:	f005 fe99 	bl	8006f6c <initRetargetSwo>
  SEGGER_RTT_ConfigUpBuffer (0, NULL, NULL, 0,
           SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL);
#endif

  // Init uC/OS-III
  OSInit (&err);                                                          // <5>
 800123a:	1dbb      	adds	r3, r7, #6
 800123c:	4618      	mov	r0, r3
 800123e:	f001 fe89 	bl	8002f54 <OSInit>
  if (err != OS_ERR_NONE)
 8001242:	88fb      	ldrh	r3, [r7, #6]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d002      	beq.n	800124e <main+0x2e>
    APP_TRACE_DBG ("Error OSInit: main\n");
 8001248:	4814      	ldr	r0, [pc, #80]	; (800129c <main+0x7c>)
 800124a:	f006 fd45 	bl	8007cd8 <puts>

  /* Create the start task */                                             // <6>
  OSTaskCreate ( (OS_TCB     *) &AppStartTaskTCB,
 800124e:	1dbb      	adds	r3, r7, #6
 8001250:	9308      	str	r3, [sp, #32]
 8001252:	2303      	movs	r3, #3
 8001254:	9307      	str	r3, [sp, #28]
 8001256:	2300      	movs	r3, #0
 8001258:	9306      	str	r3, [sp, #24]
 800125a:	2300      	movs	r3, #0
 800125c:	9305      	str	r3, [sp, #20]
 800125e:	2300      	movs	r3, #0
 8001260:	9304      	str	r3, [sp, #16]
 8001262:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001266:	9303      	str	r3, [sp, #12]
 8001268:	2319      	movs	r3, #25
 800126a:	9302      	str	r3, [sp, #8]
 800126c:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <main+0x80>)
 800126e:	9301      	str	r3, [sp, #4]
 8001270:	2302      	movs	r3, #2
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	2300      	movs	r3, #0
 8001276:	4a0b      	ldr	r2, [pc, #44]	; (80012a4 <main+0x84>)
 8001278:	490b      	ldr	r1, [pc, #44]	; (80012a8 <main+0x88>)
 800127a:	480c      	ldr	r0, [pc, #48]	; (80012ac <main+0x8c>)
 800127c:	f000 feac 	bl	8001fd8 <OSTaskCreate>
           (void       *) 0,
           (OS_OPT) (OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
           (OS_ERR     *) &err);

  // Start multitasking (i.e., give control to uC/OS-III)
  OSStart (&err);                                                         // <7>
 8001280:	1dbb      	adds	r3, r7, #6
 8001282:	4618      	mov	r0, r3
 8001284:	f002 f8ba 	bl	80033fc <OSStart>
  if (err != OS_ERR_NONE)
 8001288:	88fb      	ldrh	r3, [r7, #6]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d002      	beq.n	8001294 <main+0x74>
    APP_TRACE_DBG ("Error OSStart: main\n");
 800128e:	4808      	ldr	r0, [pc, #32]	; (80012b0 <main+0x90>)
 8001290:	f006 fd22 	bl	8007cd8 <puts>

  while (1) {                                                             // <8>
    APP_TRACE_DBG ("Should never be output! Bug?\n");
 8001294:	4807      	ldr	r0, [pc, #28]	; (80012b4 <main+0x94>)
 8001296:	f006 fd1f 	bl	8007cd8 <puts>
  }
 800129a:	e7fb      	b.n	8001294 <main+0x74>
 800129c:	0800db50 	.word	0x0800db50
 80012a0:	200009c8 	.word	0x200009c8
 80012a4:	080012b9 	.word	0x080012b9
 80012a8:	0800db64 	.word	0x0800db64
 80012ac:	20000dc8 	.word	0x20000dc8
 80012b0:	0800db74 	.word	0x0800db74
 80012b4:	0800db88 	.word	0x0800db88

080012b8 <AppTaskStart>:
 * \brief Startup (init) task that loads board support functions,
 *        initializes CPU services, the memory, the systick timer,
 *        etc. and finally invokes other application tasks.
 */
static void AppTaskStart (void *p_arg)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  CPU_INT32U  cnts;
  OS_ERR      err;

  (void) p_arg;
  // initialize BSP functions
  BSP_Init();                                                             // <9>
 80012c0:	f005 fe22 	bl	8006f08 <BSP_Init>
  // initialize the uC/CPU services
  CPU_Init();
 80012c4:	f000 fa6c 	bl	80017a0 <CPU_Init>
  // determine SysTick reference frequency
  cpu_clk_freq = BSP_SysClkFreqGet();
 80012c8:	f005 fdc4 	bl	8006e54 <BSP_SysClkFreqGet>
 80012cc:	6178      	str	r0, [r7, #20]
  // determine nbr SysTick increments
  cnts = cpu_clk_freq / (CPU_INT32U) OSCfg_TickRate_Hz;
 80012ce:	4b17      	ldr	r3, [pc, #92]	; (800132c <AppTaskStart+0x74>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	697a      	ldr	r2, [r7, #20]
 80012d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d8:	613b      	str	r3, [r7, #16]
  // init uCOS-III periodic time src (SysTick)
  OS_CPU_SysTickInit (cnts);
 80012da:	6938      	ldr	r0, [r7, #16]
 80012dc:	f004 fdcc 	bl	8005e78 <OS_CPU_SysTickInit>
  // initialize memory management module
  Mem_Init();
 80012e0:	f000 fb46 	bl	8001970 <Mem_Init>
  // initialize mathematical module
  Math_Init();
 80012e4:	f000 fc16 	bl	8001b14 <Math_Init>

// compute CPU capacity with no task running
#if (OS_CFG_STAT_TASK_EN > 0u)                                           // <10>
  OSStatTaskCPUUsageInit (&err);
 80012e8:	f107 030e 	add.w	r3, r7, #14
 80012ec:	4618      	mov	r0, r3
 80012ee:	f003 f939 	bl	8004564 <OSStatTaskCPUUsageInit>
  if (err != OS_ERR_NONE)
 80012f2:	89fb      	ldrh	r3, [r7, #14]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d002      	beq.n	80012fe <AppTaskStart+0x46>
    APP_TRACE_DBG ("Error OSStatTaskCPUUsageInit: AppTaskStart\n");
 80012f8:	480d      	ldr	r0, [pc, #52]	; (8001330 <AppTaskStart+0x78>)
 80012fa:	f006 fced 	bl	8007cd8 <puts>
#endif

  APP_TRACE_INFO ("Creating Application Objects...\n");                  // <11>
 80012fe:	480d      	ldr	r0, [pc, #52]	; (8001334 <AppTaskStart+0x7c>)
 8001300:	f006 fcea 	bl	8007cd8 <puts>
  // create application objects
  AppObjCreate();
 8001304:	f000 f81c 	bl	8001340 <AppObjCreate>

  APP_TRACE_INFO ("Creating Application Tasks...\n");                    // <12>
 8001308:	480b      	ldr	r0, [pc, #44]	; (8001338 <AppTaskStart+0x80>)
 800130a:	f006 fce5 	bl	8007cd8 <puts>
  // create application tasks
  AppTaskCreate();
 800130e:	f000 f849 	bl	80013a4 <AppTaskCreate>

  while (DEF_TRUE) {                                                     // <13>
    // Suspend current task
    OSTaskSuspend ( (OS_TCB *) 0, &err);
 8001312:	f107 030e 	add.w	r3, r7, #14
 8001316:	4619      	mov	r1, r3
 8001318:	2000      	movs	r0, #0
 800131a:	f001 f919 	bl	8002550 <OSTaskSuspend>
    if (err != OS_ERR_NONE)
 800131e:	89fb      	ldrh	r3, [r7, #14]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d0f6      	beq.n	8001312 <AppTaskStart+0x5a>
      APP_TRACE_DBG ("Error OSTaskSuspend: AppTaskStart\n");
 8001324:	4805      	ldr	r0, [pc, #20]	; (800133c <AppTaskStart+0x84>)
 8001326:	f006 fcd7 	bl	8007cd8 <puts>
  }
 800132a:	e7f2      	b.n	8001312 <AppTaskStart+0x5a>
 800132c:	0800df4c 	.word	0x0800df4c
 8001330:	0800dba8 	.word	0x0800dba8
 8001334:	0800dbd4 	.word	0x0800dbd4
 8001338:	0800dbf4 	.word	0x0800dbf4
 800133c:	0800dc14 	.word	0x0800dc14

08001340 <AppObjCreate>:
 * \brief Creates application objects.
 * \params none
 * \returns none
 */
static void AppObjCreate (void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af02      	add	r7, sp, #8
	OS_ERR      err;

	// Create Shared Memory
	OSMemCreate ( (OS_MEM    *) &Mem_Partition,
 8001346:	1dbb      	adds	r3, r7, #6
 8001348:	9301      	str	r3, [sp, #4]
 800134a:	2314      	movs	r3, #20
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	2302      	movs	r3, #2
 8001350:	4a0d      	ldr	r2, [pc, #52]	; (8001388 <AppObjCreate+0x48>)
 8001352:	490e      	ldr	r1, [pc, #56]	; (800138c <AppObjCreate+0x4c>)
 8001354:	480e      	ldr	r0, [pc, #56]	; (8001390 <AppObjCreate+0x50>)
 8001356:	f004 f98f 	bl	8005678 <OSMemCreate>
			(CPU_CHAR  *) "Mem Partition",
			(void      *) &MyPartitionStorage[0][0],
			(OS_MEM_QTY)  NUM_MSG,
			(OS_MEM_SIZE) MAX_MSG_LENGTH * sizeof (CPU_CHAR),
			(OS_ERR    *) &err);
	if (err != OS_ERR_NONE)
 800135a:	88fb      	ldrh	r3, [r7, #6]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d002      	beq.n	8001366 <AppObjCreate+0x26>
	  APP_TRACE_DBG ("Error OSMemCreate: AppObjCreate\n");
 8001360:	480c      	ldr	r0, [pc, #48]	; (8001394 <AppObjCreate+0x54>)
 8001362:	f006 fcb9 	bl	8007cd8 <puts>

	// Create Message Queue
	OSQCreate ( (OS_Q *)     &UART_ISR,
 8001366:	1dbb      	adds	r3, r7, #6
 8001368:	2202      	movs	r2, #2
 800136a:	490b      	ldr	r1, [pc, #44]	; (8001398 <AppObjCreate+0x58>)
 800136c:	480b      	ldr	r0, [pc, #44]	; (800139c <AppObjCreate+0x5c>)
 800136e:	f000 fbef 	bl	8001b50 <OSQCreate>
		  (CPU_CHAR *) "ISR Queue",
		  (OS_MSG_QTY) NUM_MSG,
		  (OS_ERR   *) &err);
	if (err != OS_ERR_NONE)
 8001372:	88fb      	ldrh	r3, [r7, #6]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d002      	beq.n	800137e <AppObjCreate+0x3e>
	  APP_TRACE_DBG ("Error OSQCreate: AppObjCreate\n");
 8001378:	4809      	ldr	r0, [pc, #36]	; (80013a0 <AppObjCreate+0x60>)
 800137a:	f006 fcad 	bl	8007cd8 <puts>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20001ed0 	.word	0x20001ed0
 800138c:	0800dc38 	.word	0x0800dc38
 8001390:	20001f1c 	.word	0x20001f1c
 8001394:	0800dc48 	.word	0x0800dc48
 8001398:	0800dc68 	.word	0x0800dc68
 800139c:	20001eec 	.word	0x20001eec
 80013a0:	0800dc74 	.word	0x0800dc74

080013a4 <AppTaskCreate>:
 * \brief Creates one application task.
 * \params none
 * \returns none
 */
static void  AppTaskCreate (void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08c      	sub	sp, #48	; 0x30
 80013a8:	af0a      	add	r7, sp, #40	; 0x28
  OS_ERR      err;

  // create AppTask_COM
  OSTaskCreate ( (OS_TCB     *) &AppTaskComTCB,
 80013aa:	1dbb      	adds	r3, r7, #6
 80013ac:	9308      	str	r3, [sp, #32]
 80013ae:	2303      	movs	r3, #3
 80013b0:	9307      	str	r3, [sp, #28]
 80013b2:	2300      	movs	r3, #0
 80013b4:	9306      	str	r3, [sp, #24]
 80013b6:	2300      	movs	r3, #0
 80013b8:	9305      	str	r3, [sp, #20]
 80013ba:	2300      	movs	r3, #0
 80013bc:	9304      	str	r3, [sp, #16]
 80013be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013c2:	9303      	str	r3, [sp, #12]
 80013c4:	2319      	movs	r3, #25
 80013c6:	9302      	str	r3, [sp, #8]
 80013c8:	4b28      	ldr	r3, [pc, #160]	; (800146c <AppTaskCreate+0xc8>)
 80013ca:	9301      	str	r3, [sp, #4]
 80013cc:	230a      	movs	r3, #10
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	2300      	movs	r3, #0
 80013d2:	4a27      	ldr	r2, [pc, #156]	; (8001470 <AppTaskCreate+0xcc>)
 80013d4:	4927      	ldr	r1, [pc, #156]	; (8001474 <AppTaskCreate+0xd0>)
 80013d6:	4828      	ldr	r0, [pc, #160]	; (8001478 <AppTaskCreate+0xd4>)
 80013d8:	f000 fdfe 	bl	8001fd8 <OSTaskCreate>
           (OS_MSG_QTY) 0u,
           (OS_TICK) 0u,
           (void       *) 0,
           (OS_OPT) (OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
           (OS_ERR     *) &err);
  if (err != OS_ERR_NONE)
 80013dc:	88fb      	ldrh	r3, [r7, #6]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d002      	beq.n	80013e8 <AppTaskCreate+0x44>
    APP_TRACE_DBG ("Error OSTaskCreate: AppTaskCreate\n");
 80013e2:	4826      	ldr	r0, [pc, #152]	; (800147c <AppTaskCreate+0xd8>)
 80013e4:	f006 fc78 	bl	8007cd8 <puts>

  // create AppTask_IO
    OSTaskCreate ( (OS_TCB     *) &AppTaskEndstopsTCB,
 80013e8:	1dbb      	adds	r3, r7, #6
 80013ea:	9308      	str	r3, [sp, #32]
 80013ec:	2303      	movs	r3, #3
 80013ee:	9307      	str	r3, [sp, #28]
 80013f0:	2300      	movs	r3, #0
 80013f2:	9306      	str	r3, [sp, #24]
 80013f4:	2300      	movs	r3, #0
 80013f6:	9305      	str	r3, [sp, #20]
 80013f8:	2300      	movs	r3, #0
 80013fa:	9304      	str	r3, [sp, #16]
 80013fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001400:	9303      	str	r3, [sp, #12]
 8001402:	2319      	movs	r3, #25
 8001404:	9302      	str	r3, [sp, #8]
 8001406:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <AppTaskCreate+0xdc>)
 8001408:	9301      	str	r3, [sp, #4]
 800140a:	230c      	movs	r3, #12
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	2300      	movs	r3, #0
 8001410:	4a1c      	ldr	r2, [pc, #112]	; (8001484 <AppTaskCreate+0xe0>)
 8001412:	491d      	ldr	r1, [pc, #116]	; (8001488 <AppTaskCreate+0xe4>)
 8001414:	481d      	ldr	r0, [pc, #116]	; (800148c <AppTaskCreate+0xe8>)
 8001416:	f000 fddf 	bl	8001fd8 <OSTaskCreate>
             (OS_MSG_QTY) 0u,
             (OS_TICK) 0u,
             (void       *) 0,
             (OS_OPT) (OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
             (OS_ERR     *) &err);
    if (err != OS_ERR_NONE)
 800141a:	88fb      	ldrh	r3, [r7, #6]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d002      	beq.n	8001426 <AppTaskCreate+0x82>
      APP_TRACE_DBG ("Error OSTaskCreate: AppTaskCreate\n");
 8001420:	4816      	ldr	r0, [pc, #88]	; (800147c <AppTaskCreate+0xd8>)
 8001422:	f006 fc59 	bl	8007cd8 <puts>

    // create AppTask_IO
      OSTaskCreate ( (OS_TCB     *) &AppTaskServoTCB,
 8001426:	1dbb      	adds	r3, r7, #6
 8001428:	9308      	str	r3, [sp, #32]
 800142a:	2303      	movs	r3, #3
 800142c:	9307      	str	r3, [sp, #28]
 800142e:	2300      	movs	r3, #0
 8001430:	9306      	str	r3, [sp, #24]
 8001432:	2300      	movs	r3, #0
 8001434:	9305      	str	r3, [sp, #20]
 8001436:	2300      	movs	r3, #0
 8001438:	9304      	str	r3, [sp, #16]
 800143a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800143e:	9303      	str	r3, [sp, #12]
 8001440:	2319      	movs	r3, #25
 8001442:	9302      	str	r3, [sp, #8]
 8001444:	4b12      	ldr	r3, [pc, #72]	; (8001490 <AppTaskCreate+0xec>)
 8001446:	9301      	str	r3, [sp, #4]
 8001448:	230d      	movs	r3, #13
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	2300      	movs	r3, #0
 800144e:	4a11      	ldr	r2, [pc, #68]	; (8001494 <AppTaskCreate+0xf0>)
 8001450:	4911      	ldr	r1, [pc, #68]	; (8001498 <AppTaskCreate+0xf4>)
 8001452:	4812      	ldr	r0, [pc, #72]	; (800149c <AppTaskCreate+0xf8>)
 8001454:	f000 fdc0 	bl	8001fd8 <OSTaskCreate>
               (OS_MSG_QTY) 0u,
               (OS_TICK) 0u,
               (void       *) 0,
               (OS_OPT) (OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
               (OS_ERR     *) &err);
      if (err != OS_ERR_NONE)
 8001458:	88fb      	ldrh	r3, [r7, #6]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d002      	beq.n	8001464 <AppTaskCreate+0xc0>
        APP_TRACE_DBG ("Error OSTaskCreate: AppTaskCreate\n");
 800145e:	4807      	ldr	r0, [pc, #28]	; (800147c <AppTaskCreate+0xd8>)
 8001460:	f006 fc3a 	bl	8007cd8 <puts>
}
 8001464:	bf00      	nop
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000e88 	.word	0x20000e88
 8001470:	080014a1 	.word	0x080014a1
 8001474:	0800dc94 	.word	0x0800dc94
 8001478:	20001a88 	.word	0x20001a88
 800147c:	0800dc9c 	.word	0x0800dc9c
 8001480:	20001288 	.word	0x20001288
 8001484:	080015e1 	.word	0x080015e1
 8001488:	0800dcc0 	.word	0x0800dcc0
 800148c:	20001b48 	.word	0x20001b48
 8001490:	20001688 	.word	0x20001688
 8001494:	080016c5 	.word	0x080016c5
 8001498:	0800dcd0 	.word	0x0800dcd0
 800149c:	20001c08 	.word	0x20001c08

080014a0 <AppTaskCom>:
 *        (3) Launch a terminal program and connect with 9600-8N1
 *            Enter strings like: #12345$, #abc$, etc.
 *            The XMC will respond with: XMC: 12345, XMC: abc, etc.
 */
static void AppTaskCom (void *p_arg)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b09a      	sub	sp, #104	; 0x68
 80014a4:	af02      	add	r7, sp, #8
 80014a6:	6078      	str	r0, [r7, #4]
  void        *p_msg;
  OS_ERR      err;
  OS_MSG_SIZE msg_size;
  CPU_TS      ts;
  CPU_CHAR    msg[MAX_MSG_LENGTH];
  CPU_INT08U  i = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  CPU_CHAR    debug_msg[MAX_MSG_LENGTH + 30];

  (void) p_arg;                                                          // <14>
  APP_TRACE_INFO ("Entering AppTaskCom ...\n");
 80014ae:	4845      	ldr	r0, [pc, #276]	; (80015c4 <AppTaskCom+0x124>)
 80014b0:	f006 fc12 	bl	8007cd8 <puts>
  while (DEF_TRUE) {
    // empty the message buffer
    memset (&msg, 0, MAX_MSG_LENGTH);                                    // <15>
 80014b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80014b8:	2214      	movs	r2, #20
 80014ba:	2100      	movs	r1, #0
 80014bc:	4618      	mov	r0, r3
 80014be:	f006 fb75 	bl	8007bac <memset>

    // wait until a message is received
    p_msg = OSQPend (&UART_ISR,                                          // <16>
 80014c2:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80014c6:	f107 0356 	add.w	r3, r7, #86	; 0x56
 80014ca:	9301      	str	r3, [sp, #4]
 80014cc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	4613      	mov	r3, r2
 80014d4:	2200      	movs	r2, #0
 80014d6:	2100      	movs	r1, #0
 80014d8:	483b      	ldr	r0, [pc, #236]	; (80015c8 <AppTaskCom+0x128>)
 80014da:	f000 fb89 	bl	8001bf0 <OSQPend>
 80014de:	65b8      	str	r0, [r7, #88]	; 0x58
         0,
         OS_OPT_PEND_BLOCKING,
         &msg_size,
         &ts,
         &err);
    if (err != OS_ERR_NONE)
 80014e0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d002      	beq.n	80014ee <AppTaskCom+0x4e>
      APP_TRACE_DBG ("Error OSQPend: AppTaskCom\n");
 80014e8:	4838      	ldr	r0, [pc, #224]	; (80015cc <AppTaskCom+0x12c>)
 80014ea:	f006 fbf5 	bl	8007cd8 <puts>

    // obtain message we received
    memcpy (msg, (CPU_CHAR*) p_msg, msg_size - 1);                       // <17>
 80014ee:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80014f2:	3b01      	subs	r3, #1
 80014f4:	461a      	mov	r2, r3
 80014f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80014fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff f891 	bl	8000624 <memcpy>

    // release the memory partition allocated in the UART service routine
    OSMemPut (&Mem_Partition, p_msg, &err);                              // <18>
 8001502:	f107 0356 	add.w	r3, r7, #86	; 0x56
 8001506:	461a      	mov	r2, r3
 8001508:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800150a:	4831      	ldr	r0, [pc, #196]	; (80015d0 <AppTaskCom+0x130>)
 800150c:	f004 f97c 	bl	8005808 <OSMemPut>
    if (err != OS_ERR_NONE)
 8001510:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001514:	2b00      	cmp	r3, #0
 8001516:	d002      	beq.n	800151e <AppTaskCom+0x7e>
      APP_TRACE_DBG ("Error OSMemPut: AppTaskCom\n");
 8001518:	482e      	ldr	r0, [pc, #184]	; (80015d4 <AppTaskCom+0x134>)
 800151a:	f006 fbdd 	bl	8007cd8 <puts>

    // send ACK in return
    XMC_UART_CH_Transmit (XMC_UART1_CH1, ACK);                           // <19>
 800151e:	2106      	movs	r1, #6
 8001520:	482d      	ldr	r0, [pc, #180]	; (80015d8 <AppTaskCom+0x138>)
 8001522:	f005 ffef 	bl	8007504 <XMC_UART_CH_Transmit>

    // print the received message to the debug interface
    sprintf (debug_msg, "Msg: %s\tLength: %d\n", msg, msg_size - 1);     // <20>
 8001526:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800152a:	3b01      	subs	r3, #1
 800152c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001530:	f107 0008 	add.w	r0, r7, #8
 8001534:	4929      	ldr	r1, [pc, #164]	; (80015dc <AppTaskCom+0x13c>)
 8001536:	f006 fbd7 	bl	8007ce8 <sprintf>
    APP_TRACE_INFO (debug_msg);
 800153a:	f107 0308 	add.w	r3, r7, #8
 800153e:	4618      	mov	r0, r3
 8001540:	f006 fb82 	bl	8007c48 <printf>

    // send the received message back via the UART pre-text with "XMC: "
    XMC_UART_CH_Transmit (XMC_UART1_CH1, 'X');                           // <21>
 8001544:	2158      	movs	r1, #88	; 0x58
 8001546:	4824      	ldr	r0, [pc, #144]	; (80015d8 <AppTaskCom+0x138>)
 8001548:	f005 ffdc 	bl	8007504 <XMC_UART_CH_Transmit>
    XMC_UART_CH_Transmit (XMC_UART1_CH1, 'M');
 800154c:	214d      	movs	r1, #77	; 0x4d
 800154e:	4822      	ldr	r0, [pc, #136]	; (80015d8 <AppTaskCom+0x138>)
 8001550:	f005 ffd8 	bl	8007504 <XMC_UART_CH_Transmit>
    XMC_UART_CH_Transmit (XMC_UART1_CH1, 'C');
 8001554:	2143      	movs	r1, #67	; 0x43
 8001556:	4820      	ldr	r0, [pc, #128]	; (80015d8 <AppTaskCom+0x138>)
 8001558:	f005 ffd4 	bl	8007504 <XMC_UART_CH_Transmit>
    XMC_UART_CH_Transmit (XMC_UART1_CH1, ':');
 800155c:	213a      	movs	r1, #58	; 0x3a
 800155e:	481e      	ldr	r0, [pc, #120]	; (80015d8 <AppTaskCom+0x138>)
 8001560:	f005 ffd0 	bl	8007504 <XMC_UART_CH_Transmit>
    XMC_UART_CH_Transmit (XMC_UART1_CH1, ' ');
 8001564:	2120      	movs	r1, #32
 8001566:	481c      	ldr	r0, [pc, #112]	; (80015d8 <AppTaskCom+0x138>)
 8001568:	f005 ffcc 	bl	8007504 <XMC_UART_CH_Transmit>
    for (i = 0; i <= msg_size; i++) {
 800156c:	2300      	movs	r3, #0
 800156e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001572:	e019      	b.n	80015a8 <AppTaskCom+0x108>
    	if (msg[i] != 0){
 8001574:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001578:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800157c:	4413      	add	r3, r2
 800157e:	f913 3c24 	ldrsb.w	r3, [r3, #-36]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d018      	beq.n	80015b8 <AppTaskCom+0x118>
 			XMC_UART_CH_Transmit (XMC_UART1_CH1, msg[i]);
 8001586:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800158a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800158e:	4413      	add	r3, r2
 8001590:	f913 3c24 	ldrsb.w	r3, [r3, #-36]
 8001594:	b29b      	uxth	r3, r3
 8001596:	4619      	mov	r1, r3
 8001598:	480f      	ldr	r0, [pc, #60]	; (80015d8 <AppTaskCom+0x138>)
 800159a:	f005 ffb3 	bl	8007504 <XMC_UART_CH_Transmit>
    XMC_UART_CH_Transmit (XMC_UART1_CH1, 'X');                           // <21>
    XMC_UART_CH_Transmit (XMC_UART1_CH1, 'M');
    XMC_UART_CH_Transmit (XMC_UART1_CH1, 'C');
    XMC_UART_CH_Transmit (XMC_UART1_CH1, ':');
    XMC_UART_CH_Transmit (XMC_UART1_CH1, ' ');
    for (i = 0; i <= msg_size; i++) {
 800159e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80015a2:	3301      	adds	r3, #1
 80015a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80015a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d9de      	bls.n	8001574 <AppTaskCom+0xd4>
 80015b6:	e000      	b.n	80015ba <AppTaskCom+0x11a>
    	if (msg[i] != 0){
 			XMC_UART_CH_Transmit (XMC_UART1_CH1, msg[i]);
     	}else{
       		break;
 80015b8:	bf00      	nop
    	}
    }
    XMC_UART_CH_Transmit (XMC_UART1_CH1, '\n');
 80015ba:	210a      	movs	r1, #10
 80015bc:	4806      	ldr	r0, [pc, #24]	; (80015d8 <AppTaskCom+0x138>)
 80015be:	f005 ffa1 	bl	8007504 <XMC_UART_CH_Transmit>
  }
 80015c2:	e777      	b.n	80014b4 <AppTaskCom+0x14>
 80015c4:	0800dcdc 	.word	0x0800dcdc
 80015c8:	20001eec 	.word	0x20001eec
 80015cc:	0800dcf4 	.word	0x0800dcf4
 80015d0:	20001f1c 	.word	0x20001f1c
 80015d4:	0800dd10 	.word	0x0800dd10
 80015d8:	48020200 	.word	0x48020200
 80015dc:	0800dd2c 	.word	0x0800dd2c

080015e0 <AppTaskEndstops>:
}
/***********************************AppTask_Io*/
static void AppTaskEndstops (void *p_arg)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	_Bool l_state1 =1;
 80015e8:	2301      	movs	r3, #1
 80015ea:	73fb      	strb	r3, [r7, #15]
	_Bool l_state2 =1;
 80015ec:	2301      	movs	r3, #1
 80015ee:	73bb      	strb	r3, [r7, #14]
	_Bool l_state3 =1;
 80015f0:	2301      	movs	r3, #1
 80015f2:	737b      	strb	r3, [r7, #13]
	_Bool l_state4 =1;
 80015f4:	2301      	movs	r3, #1
 80015f6:	733b      	strb	r3, [r7, #12]
	OS_ERR      err;
	CPU_TS      ts=0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60bb      	str	r3, [r7, #8]
	APP_TRACE_INFO ("Entering AppTaskEndstops ...\n");
 80015fc:	482b      	ldr	r0, [pc, #172]	; (80016ac <AppTaskEndstops+0xcc>)
 80015fe:	f006 fb6b 	bl	8007cd8 <puts>
	while(1){
//ENDSTOP1
		if(0==debounce(ENDSTOP1)){			//Button 2	//
 8001602:	210f      	movs	r1, #15
 8001604:	482a      	ldr	r0, [pc, #168]	; (80016b0 <AppTaskEndstops+0xd0>)
 8001606:	f000 f87b 	bl	8001700 <debounce>
 800160a:	4603      	mov	r3, r0
 800160c:	f083 0301 	eor.w	r3, r3, #1
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d008      	beq.n	8001628 <AppTaskEndstops+0x48>
			if(l_state1){
 8001616:	7bfb      	ldrb	r3, [r7, #15]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d007      	beq.n	800162c <AppTaskEndstops+0x4c>
				APP_TRACE_INFO ("ENDSTOP1 PRESSED ...\n");
 800161c:	4825      	ldr	r0, [pc, #148]	; (80016b4 <AppTaskEndstops+0xd4>)
 800161e:	f006 fb5b 	bl	8007cd8 <puts>
				l_state1=0;
 8001622:	2300      	movs	r3, #0
 8001624:	73fb      	strb	r3, [r7, #15]
 8001626:	e001      	b.n	800162c <AppTaskEndstops+0x4c>
			}
		}else{
			l_state1=1;
 8001628:	2301      	movs	r3, #1
 800162a:	73fb      	strb	r3, [r7, #15]
		}
//ENDSTOP2
		if(0==debounce(ENDSTOP2)){			//Button 1	//
 800162c:	210d      	movs	r1, #13
 800162e:	4820      	ldr	r0, [pc, #128]	; (80016b0 <AppTaskEndstops+0xd0>)
 8001630:	f000 f866 	bl	8001700 <debounce>
 8001634:	4603      	mov	r3, r0
 8001636:	f083 0301 	eor.w	r3, r3, #1
 800163a:	b2db      	uxtb	r3, r3
 800163c:	2b00      	cmp	r3, #0
 800163e:	d008      	beq.n	8001652 <AppTaskEndstops+0x72>
			if(l_state2){
 8001640:	7bbb      	ldrb	r3, [r7, #14]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d007      	beq.n	8001656 <AppTaskEndstops+0x76>
				APP_TRACE_INFO ("ENDSTOP2 PRESSED ...\n");
 8001646:	481c      	ldr	r0, [pc, #112]	; (80016b8 <AppTaskEndstops+0xd8>)
 8001648:	f006 fb46 	bl	8007cd8 <puts>
				l_state2=0;
 800164c:	2300      	movs	r3, #0
 800164e:	73bb      	strb	r3, [r7, #14]
 8001650:	e001      	b.n	8001656 <AppTaskEndstops+0x76>
			}
		}else{
			l_state2=1;
 8001652:	2301      	movs	r3, #1
 8001654:	73bb      	strb	r3, [r7, #14]
		}
//ENDSTOP3
		if(0==debounce(ENDSTOP3)){			//Button 1	//
 8001656:	210e      	movs	r1, #14
 8001658:	4815      	ldr	r0, [pc, #84]	; (80016b0 <AppTaskEndstops+0xd0>)
 800165a:	f000 f851 	bl	8001700 <debounce>
 800165e:	4603      	mov	r3, r0
 8001660:	f083 0301 	eor.w	r3, r3, #1
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d008      	beq.n	800167c <AppTaskEndstops+0x9c>
			if(l_state3){
 800166a:	7b7b      	ldrb	r3, [r7, #13]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d007      	beq.n	8001680 <AppTaskEndstops+0xa0>
				APP_TRACE_INFO ("ENDSTOP3 PRESSED ...\n");
 8001670:	4812      	ldr	r0, [pc, #72]	; (80016bc <AppTaskEndstops+0xdc>)
 8001672:	f006 fb31 	bl	8007cd8 <puts>
				l_state3=0;
 8001676:	2300      	movs	r3, #0
 8001678:	737b      	strb	r3, [r7, #13]
 800167a:	e001      	b.n	8001680 <AppTaskEndstops+0xa0>
			}
		}else{
			l_state3=1;
 800167c:	2301      	movs	r3, #1
 800167e:	737b      	strb	r3, [r7, #13]
		}
//ENDSTOP4
		if(0==debounce(ENDSTOP4)){			//Button 1	//
 8001680:	210c      	movs	r1, #12
 8001682:	480b      	ldr	r0, [pc, #44]	; (80016b0 <AppTaskEndstops+0xd0>)
 8001684:	f000 f83c 	bl	8001700 <debounce>
 8001688:	4603      	mov	r3, r0
 800168a:	f083 0301 	eor.w	r3, r3, #1
 800168e:	b2db      	uxtb	r3, r3
 8001690:	2b00      	cmp	r3, #0
 8001692:	d008      	beq.n	80016a6 <AppTaskEndstops+0xc6>
			if(l_state4){
 8001694:	7b3b      	ldrb	r3, [r7, #12]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0b3      	beq.n	8001602 <AppTaskEndstops+0x22>
				APP_TRACE_INFO ("ENDSTOP4 PRESSED ...\n");
 800169a:	4809      	ldr	r0, [pc, #36]	; (80016c0 <AppTaskEndstops+0xe0>)
 800169c:	f006 fb1c 	bl	8007cd8 <puts>
				l_state4=0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	733b      	strb	r3, [r7, #12]
 80016a4:	e7ad      	b.n	8001602 <AppTaskEndstops+0x22>
			}
		}else{
			l_state4=1;
 80016a6:	2301      	movs	r3, #1
 80016a8:	733b      	strb	r3, [r7, #12]
		}
	}//Whileend
 80016aa:	e7aa      	b.n	8001602 <AppTaskEndstops+0x22>
 80016ac:	0800dd40 	.word	0x0800dd40
 80016b0:	48028100 	.word	0x48028100
 80016b4:	0800dd60 	.word	0x0800dd60
 80016b8:	0800dd78 	.word	0x0800dd78
 80016bc:	0800dd90 	.word	0x0800dd90
 80016c0:	0800dda8 	.word	0x0800dda8

080016c4 <AppTaskServo>:
}
//Servo
static void AppTaskServo (void *p_arg){
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	OS_ERR      err;
	CPU_TS      ts=0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
	APP_TRACE_INFO ("Entering AppTaskServo ...\n");
 80016d0:	4801      	ldr	r0, [pc, #4]	; (80016d8 <AppTaskServo+0x14>)
 80016d2:	f006 fb01 	bl	8007cd8 <puts>
	while(1){

	}
 80016d6:	e7fe      	b.n	80016d6 <AppTaskServo+0x12>
 80016d8:	0800ddc0 	.word	0x0800ddc0

080016dc <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	460b      	mov	r3, r1
 80016e6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016ec:	78fb      	ldrb	r3, [r7, #3]
 80016ee:	fa22 f303 	lsr.w	r3, r2, r3
 80016f2:	f003 0301 	and.w	r3, r3, #1
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr

08001700 <debounce>:
#include <mylib.h>
#include <bsp_gpio.h>


//_________________________________DEBOUNCE
_Bool debounce(int port,  int pin){
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af02      	add	r7, sp, #8
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
	CPU_INT08U i=10;
 800170a:	230a      	movs	r3, #10
 800170c:	73fb      	strb	r3, [r7, #15]
	CPU_INT08U time=0;
 800170e:	2300      	movs	r3, #0
 8001710:	73bb      	strb	r3, [r7, #14]
	CPU_INT08U f_press=0;
 8001712:	2300      	movs	r3, #0
 8001714:	737b      	strb	r3, [r7, #13]
	CPU_INT08U press=0;
 8001716:	2300      	movs	r3, #0
 8001718:	733b      	strb	r3, [r7, #12]
	OS_ERR      err;
	f_press=XMC_GPIO_GetInput((XMC_GPIO_PORT_t *const) port,(const uint8_t)pin);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	4611      	mov	r1, r2
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff ffda 	bl	80016dc <XMC_GPIO_GetInput>
 8001728:	4603      	mov	r3, r0
 800172a:	737b      	strb	r3, [r7, #13]
	while(--i){
 800172c:	e027      	b.n	800177e <debounce+0x7e>
		press=XMC_GPIO_GetInput((XMC_GPIO_PORT_t *const) port,(const uint8_t)pin);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	b2d2      	uxtb	r2, r2
 8001734:	4611      	mov	r1, r2
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff ffd0 	bl	80016dc <XMC_GPIO_GetInput>
 800173c:	4603      	mov	r3, r0
 800173e:	733b      	strb	r3, [r7, #12]
		if(f_press==press){
 8001740:	7b7a      	ldrb	r2, [r7, #13]
 8001742:	7b3b      	ldrb	r3, [r7, #12]
 8001744:	429a      	cmp	r2, r3
 8001746:	d103      	bne.n	8001750 <debounce+0x50>
			time++;
 8001748:	7bbb      	ldrb	r3, [r7, #14]
 800174a:	3301      	adds	r3, #1
 800174c:	73bb      	strb	r3, [r7, #14]
 800174e:	e006      	b.n	800175e <debounce+0x5e>
		}else{
			return press;
 8001750:	7b3b      	ldrb	r3, [r7, #12]
 8001752:	2b00      	cmp	r3, #0
 8001754:	bf14      	ite	ne
 8001756:	2301      	movne	r3, #1
 8001758:	2300      	moveq	r3, #0
 800175a:	b2db      	uxtb	r3, r3
 800175c:	e01b      	b.n	8001796 <debounce+0x96>
		}
		//wait(100000);
		OSTimeDlyHMSM  (0,
 800175e:	f107 030a 	add.w	r3, r7, #10
 8001762:	9301      	str	r3, [sp, #4]
 8001764:	2300      	movs	r3, #0
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	2301      	movs	r3, #1
 800176a:	2200      	movs	r2, #0
 800176c:	2100      	movs	r1, #0
 800176e:	2000      	movs	r0, #0
 8001770:	f003 fa60 	bl	8004c34 <OSTimeDlyHMSM>
			   			0,
  						0,
		 	    		1,
						OS_OPT_TIME_HMSM_STRICT ,
			       		&err);
  		if (err != OS_ERR_NONE)
 8001774:	897b      	ldrh	r3, [r7, #10]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <debounce+0x7e>
  			return 3;
 800177a:	2301      	movs	r3, #1
 800177c:	e00b      	b.n	8001796 <debounce+0x96>
	CPU_INT08U time=0;
	CPU_INT08U f_press=0;
	CPU_INT08U press=0;
	OS_ERR      err;
	f_press=XMC_GPIO_GetInput((XMC_GPIO_PORT_t *const) port,(const uint8_t)pin);
	while(--i){
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	3b01      	subs	r3, #1
 8001782:	73fb      	strb	r3, [r7, #15]
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1d1      	bne.n	800172e <debounce+0x2e>
						OS_OPT_TIME_HMSM_STRICT ,
			       		&err);
  		if (err != OS_ERR_NONE)
  			return 3;
	}
	return f_press;
 800178a:	7b7b      	ldrb	r3, [r7, #13]
 800178c:	2b00      	cmp	r3, #0
 800178e:	bf14      	ite	ne
 8001790:	2301      	movne	r3, #1
 8001792:	2300      	moveq	r3, #0
 8001794:	b2db      	uxtb	r3, r3
}
 8001796:	4618      	mov	r0, r3
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop

080017a0 <CPU_Init>:
*                                                   & other CPU interrupts disabled time measurement functions
*********************************************************************************************************
*/

void  CPU_Init (void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
                                                                /* --------------------- INIT TS ---------------------- */
#if ((CPU_CFG_TS_EN     == DEF_ENABLED) || \
     (CPU_CFG_TS_TMR_EN == DEF_ENABLED))
    CPU_TS_Init();                                              /* See Note #3a.                                        */
 80017a4:	f000 f832 	bl	800180c <CPU_TS_Init>
    CPU_IntDisMeasInit();                                       /* See Note #3b.                                        */
#endif

                                                                /* ------------------ INIT CPU NAME ------------------- */
#if (CPU_CFG_NAME_EN == DEF_ENABLED)
     CPU_NameInit();
 80017a8:	f000 f82a 	bl	8001800 <CPU_NameInit>
#endif

#if (CPU_CFG_CACHE_MGMT_EN == DEF_ENABLED)
     CPU_Cache_Init();
#endif
}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <CPU_SW_Exception>:
*                   See also 'cpu_core.h  CPU_SW_EXCEPTION()  Note #1'.
*********************************************************************************************************
*/

void  CPU_SW_Exception (void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
    while (DEF_ON) {
        ;
    }
 80017b4:	e7fe      	b.n	80017b4 <CPU_SW_Exception+0x4>
 80017b6:	bf00      	nop

080017b8 <CPU_NameClr>:
*********************************************************************************************************
*/

#if (CPU_CFG_NAME_EN == DEF_ENABLED)
void  CPU_NameClr (void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
 80017be:	2300      	movs	r3, #0
 80017c0:	607b      	str	r3, [r7, #4]


    CPU_CRITICAL_ENTER();
 80017c2:	f7fe fd8d 	bl	80002e0 <CPU_SR_Save>
 80017c6:	6078      	str	r0, [r7, #4]
    Mem_Clr((void     *)&CPU_Name[0],
 80017c8:	2110      	movs	r1, #16
 80017ca:	4805      	ldr	r0, [pc, #20]	; (80017e0 <CPU_NameClr+0x28>)
 80017cc:	f000 f8f6 	bl	80019bc <Mem_Clr>
            (CPU_SIZE_T) CPU_CFG_NAME_SIZE);
    CPU_CRITICAL_EXIT();
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7fe fd89 	bl	80002e8 <CPU_SR_Restore>
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20001f40 	.word	0x20001f40

080017e4 <CPU_TS_TmrFreqSet>:
*********************************************************************************************************
*/

#if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
void  CPU_TS_TmrFreqSet (CPU_TS_TMR_FREQ  freq_hz)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
    CPU_TS_TmrFreq_Hz = freq_hz;
 80017ec:	4a03      	ldr	r2, [pc, #12]	; (80017fc <CPU_TS_TmrFreqSet+0x18>)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6013      	str	r3, [r2, #0]
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr
 80017fc:	20001f3c 	.word	0x20001f3c

08001800 <CPU_NameInit>:
*********************************************************************************************************
*/

#if (CPU_CFG_NAME_EN == DEF_ENABLED)
static  void  CPU_NameInit (void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
    CPU_NameClr();
 8001804:	f7ff ffd8 	bl	80017b8 <CPU_NameClr>
}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}

0800180c <CPU_TS_Init>:
*/

#if ((CPU_CFG_TS_EN     == DEF_ENABLED) || \
     (CPU_CFG_TS_TMR_EN == DEF_ENABLED))
static  void  CPU_TS_Init (void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
#endif


                                                                /* ----------------- INIT CPU TS TMR ------------------ */
#if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
    CPU_TS_TmrFreq_Hz   = 0u;                                   /* Init/clr     ts tmr freq (see Note #1a).             */
 8001810:	4b03      	ldr	r3, [pc, #12]	; (8001820 <CPU_TS_Init+0x14>)
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
    CPU_TS_TmrInit();                                           /* Init & start ts tmr      (see Note #1b).             */
 8001816:	f005 fc0b 	bl	8007030 <CPU_TS_TmrInit>
#if  ((CPU_CFG_TS_64_EN    == DEF_ENABLED)  && \
      (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_64))
    CPU_TS_64_Accum   = 0u;                                     /* Init 64-bit accum'd ts.                              */
    CPU_TS_64_TmrPrev = ts_tmr_cnts;                            /* Init 64-bit ts prev tmr val.                         */
#endif
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20001f3c 	.word	0x20001f3c

08001824 <CPU_IntSrcEn>:
*               (3) See 'CPU_IntSrcDis()  Note #3'.
*********************************************************************************************************
*/

void  CPU_IntSrcEn (CPU_INT08U  pos)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	71fb      	strb	r3, [r7, #7]
    CPU_INT08U  group;
    CPU_INT08U  nbr;
    CPU_INT08U  pos_max;
    CPU_SR_ALLOC();
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]


    switch (pos) {
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	2b0f      	cmp	r3, #15
 8001836:	d857      	bhi.n	80018e8 <CPU_IntSrcEn+0xc4>
 8001838:	a201      	add	r2, pc, #4	; (adr r2, 8001840 <CPU_IntSrcEn+0x1c>)
 800183a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183e:	bf00      	nop
 8001840:	08001951 	.word	0x08001951
 8001844:	08001951 	.word	0x08001951
 8001848:	08001951 	.word	0x08001951
 800184c:	08001951 	.word	0x08001951
 8001850:	08001881 	.word	0x08001881
 8001854:	0800189b 	.word	0x0800189b
 8001858:	080018b5 	.word	0x080018b5
 800185c:	08001951 	.word	0x08001951
 8001860:	08001951 	.word	0x08001951
 8001864:	08001951 	.word	0x08001951
 8001868:	08001951 	.word	0x08001951
 800186c:	08001951 	.word	0x08001951
 8001870:	08001951 	.word	0x08001951
 8001874:	08001951 	.word	0x08001951
 8001878:	08001951 	.word	0x08001951
 800187c:	080018cf 	.word	0x080018cf
        case CPU_INT_DBGMON:                                    /* Debug monitor (see Note #2).                         */
        case CPU_INT_PENDSV:                                    /* PendSV (see Note #2).                                */
             break;

        case CPU_INT_MEM:                                       /* Memory management.                                   */
             CPU_CRITICAL_ENTER();
 8001880:	f7fe fd2e 	bl	80002e0 <CPU_SR_Save>
 8001884:	60f8      	str	r0, [r7, #12]
             CPU_REG_NVIC_SHCSR |= CPU_REG_NVIC_SHCSR_MEMFAULTENA;
 8001886:	4a36      	ldr	r2, [pc, #216]	; (8001960 <CPU_IntSrcEn+0x13c>)
 8001888:	4b35      	ldr	r3, [pc, #212]	; (8001960 <CPU_IntSrcEn+0x13c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001890:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f7fe fd28 	bl	80002e8 <CPU_SR_Restore>
             break;
 8001898:	e05d      	b.n	8001956 <CPU_IntSrcEn+0x132>

        case CPU_INT_BUSFAULT:                                  /* Bus fault.                                           */
             CPU_CRITICAL_ENTER();
 800189a:	f7fe fd21 	bl	80002e0 <CPU_SR_Save>
 800189e:	60f8      	str	r0, [r7, #12]
             CPU_REG_NVIC_SHCSR |= CPU_REG_NVIC_SHCSR_BUSFAULTENA;
 80018a0:	4a2f      	ldr	r2, [pc, #188]	; (8001960 <CPU_IntSrcEn+0x13c>)
 80018a2:	4b2f      	ldr	r3, [pc, #188]	; (8001960 <CPU_IntSrcEn+0x13c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018aa:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 80018ac:	68f8      	ldr	r0, [r7, #12]
 80018ae:	f7fe fd1b 	bl	80002e8 <CPU_SR_Restore>
             break;
 80018b2:	e050      	b.n	8001956 <CPU_IntSrcEn+0x132>

        case CPU_INT_USAGEFAULT:                                /* Usage fault.                                         */
             CPU_CRITICAL_ENTER();
 80018b4:	f7fe fd14 	bl	80002e0 <CPU_SR_Save>
 80018b8:	60f8      	str	r0, [r7, #12]
             CPU_REG_NVIC_SHCSR |= CPU_REG_NVIC_SHCSR_USGFAULTENA;
 80018ba:	4a29      	ldr	r2, [pc, #164]	; (8001960 <CPU_IntSrcEn+0x13c>)
 80018bc:	4b28      	ldr	r3, [pc, #160]	; (8001960 <CPU_IntSrcEn+0x13c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018c4:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 80018c6:	68f8      	ldr	r0, [r7, #12]
 80018c8:	f7fe fd0e 	bl	80002e8 <CPU_SR_Restore>
             break;
 80018cc:	e043      	b.n	8001956 <CPU_IntSrcEn+0x132>

        case CPU_INT_SYSTICK:                                   /* SysTick.                                             */
             CPU_CRITICAL_ENTER();
 80018ce:	f7fe fd07 	bl	80002e0 <CPU_SR_Save>
 80018d2:	60f8      	str	r0, [r7, #12]
             CPU_REG_NVIC_ST_CTRL |= CPU_REG_NVIC_ST_CTRL_ENABLE;
 80018d4:	4a23      	ldr	r2, [pc, #140]	; (8001964 <CPU_IntSrcEn+0x140>)
 80018d6:	4b23      	ldr	r3, [pc, #140]	; (8001964 <CPU_IntSrcEn+0x140>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 80018e0:	68f8      	ldr	r0, [r7, #12]
 80018e2:	f7fe fd01 	bl	80002e8 <CPU_SR_Restore>
             break;
 80018e6:	e036      	b.n	8001956 <CPU_IntSrcEn+0x132>


                                                                /* ---------------- EXTERNAL INTERRUPT ---------------- */
        default:
            pos_max = CPU_INT_SRC_POS_MAX;
 80018e8:	4b1f      	ldr	r3, [pc, #124]	; (8001968 <CPU_IntSrcEn+0x144>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	3301      	adds	r3, #1
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	f003 031f 	and.w	r3, r3, #31
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	015b      	lsls	r3, r3, #5
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	3310      	adds	r3, #16
 80018fc:	72fb      	strb	r3, [r7, #11]
            if (pos < pos_max) {                                /* See Note #3.                                         */
 80018fe:	79fa      	ldrb	r2, [r7, #7]
 8001900:	7afb      	ldrb	r3, [r7, #11]
 8001902:	429a      	cmp	r2, r3
 8001904:	d226      	bcs.n	8001954 <CPU_IntSrcEn+0x130>
                 group = (pos - 16) / 32;
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	3b10      	subs	r3, #16
 800190a:	2b00      	cmp	r3, #0
 800190c:	da00      	bge.n	8001910 <CPU_IntSrcEn+0xec>
 800190e:	331f      	adds	r3, #31
 8001910:	115b      	asrs	r3, r3, #5
 8001912:	72bb      	strb	r3, [r7, #10]
                 nbr   = (pos - 16) % 32;
 8001914:	79fb      	ldrb	r3, [r7, #7]
 8001916:	f1a3 0210 	sub.w	r2, r3, #16
 800191a:	4b14      	ldr	r3, [pc, #80]	; (800196c <CPU_IntSrcEn+0x148>)
 800191c:	4013      	ands	r3, r2
 800191e:	2b00      	cmp	r3, #0
 8001920:	da03      	bge.n	800192a <CPU_IntSrcEn+0x106>
 8001922:	3b01      	subs	r3, #1
 8001924:	f063 031f 	orn	r3, r3, #31
 8001928:	3301      	adds	r3, #1
 800192a:	727b      	strb	r3, [r7, #9]

                 CPU_CRITICAL_ENTER();
 800192c:	f7fe fcd8 	bl	80002e0 <CPU_SR_Save>
 8001930:	60f8      	str	r0, [r7, #12]
                 CPU_REG_NVIC_SETEN(group) = DEF_BIT(nbr);
 8001932:	7abb      	ldrb	r3, [r7, #10]
 8001934:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
 8001938:	3340      	adds	r3, #64	; 0x40
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4619      	mov	r1, r3
 800193e:	7a7b      	ldrb	r3, [r7, #9]
 8001940:	2201      	movs	r2, #1
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	600b      	str	r3, [r1, #0]
                 CPU_CRITICAL_EXIT();
 8001948:	68f8      	ldr	r0, [r7, #12]
 800194a:	f7fe fccd 	bl	80002e8 <CPU_SR_Restore>
             }
             break;
 800194e:	e001      	b.n	8001954 <CPU_IntSrcEn+0x130>
        case CPU_INT_RSVD_07:
        case CPU_INT_RSVD_08:
        case CPU_INT_RSVD_09:
        case CPU_INT_RSVD_10:
        case CPU_INT_RSVD_13:
             break;
 8001950:	bf00      	nop
 8001952:	e000      	b.n	8001956 <CPU_IntSrcEn+0x132>

                 CPU_CRITICAL_ENTER();
                 CPU_REG_NVIC_SETEN(group) = DEF_BIT(nbr);
                 CPU_CRITICAL_EXIT();
             }
             break;
 8001954:	bf00      	nop
    }
}
 8001956:	bf00      	nop
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	e000ed24 	.word	0xe000ed24
 8001964:	e000e010 	.word	0xe000e010
 8001968:	e000e004 	.word	0xe000e004
 800196c:	8000001f 	.word	0x8000001f

08001970 <Mem_Init>:
*                   (b) BEFORE product's application calls any memory library module function(s)
*********************************************************************************************************
*/

void  Mem_Init (void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af02      	add	r7, sp, #8

                                                                /* ------------------ INIT SEG LIST ------------------- */
    Mem_SegHeadPtr = DEF_NULL;
 8001976:	4b0d      	ldr	r3, [pc, #52]	; (80019ac <Mem_Init+0x3c>)
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]

                                                                /* ------------------ INIT HEAP SEG ------------------- */
#ifdef  LIB_MEM_CFG_HEAP_BASE_ADDR
        heap_base_addr = LIB_MEM_CFG_HEAP_BASE_ADDR;
#else
        heap_base_addr = (CPU_ADDR)&Mem_Heap[0u];
 800197c:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <Mem_Init+0x40>)
 800197e:	607b      	str	r3, [r7, #4]
#endif

        Mem_SegCreate("Heap",
 8001980:	1cbb      	adds	r3, r7, #2
 8001982:	9301      	str	r3, [sp, #4]
 8001984:	2301      	movs	r3, #1
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	4909      	ldr	r1, [pc, #36]	; (80019b4 <Mem_Init+0x44>)
 8001990:	4809      	ldr	r0, [pc, #36]	; (80019b8 <Mem_Init+0x48>)
 8001992:	f000 f87b 	bl	8001a8c <Mem_SegCreate>
                      &Mem_SegHeap,                             /* Create heap seg.                                     */
                       heap_base_addr,
                       LIB_MEM_CFG_HEAP_SIZE,
                       LIB_MEM_PADDING_ALIGN_NONE,
                      &err);
        if (err != LIB_MEM_ERR_NONE) {
 8001996:	887b      	ldrh	r3, [r7, #2]
 8001998:	f242 7210 	movw	r2, #10000	; 0x2710
 800199c:	4293      	cmp	r3, r2
 800199e:	d001      	beq.n	80019a4 <Mem_Init+0x34>
            CPU_SW_EXCEPTION(;);
 80019a0:	f7ff ff06 	bl	80017b0 <CPU_SW_Exception>
        }
    }
#endif
}
 80019a4:	bf00      	nop
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20001f64 	.word	0x20001f64
 80019b0:	20001f68 	.word	0x20001f68
 80019b4:	20001f50 	.word	0x20001f50
 80019b8:	0800dddc 	.word	0x0800dddc

080019bc <Mem_Clr>:
*********************************************************************************************************
*/

void  Mem_Clr (void        *pmem,
               CPU_SIZE_T   size)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
    Mem_Set(pmem,
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	2100      	movs	r1, #0
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 f804 	bl	80019d8 <Mem_Set>
            0u,                                                 /* See Note #2.                                         */
            size);
}
 80019d0:	bf00      	nop
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <Mem_Set>:
*/

void  Mem_Set (void        *pmem,
               CPU_INT08U   data_val,
               CPU_SIZE_T   size)
{
 80019d8:	b480      	push	{r7}
 80019da:	b08b      	sub	sp, #44	; 0x2c
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	460b      	mov	r3, r1
 80019e2:	607a      	str	r2, [r7, #4]
 80019e4:	72fb      	strb	r3, [r7, #11]
        return;
    }
#endif


    data_align = 0u;
 80019e6:	2300      	movs	r3, #0
 80019e8:	623b      	str	r3, [r7, #32]
    for (i = 0u; i < sizeof(CPU_ALIGN); i++) {                  /* Fill each data_align octet with data val.            */
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
 80019ee:	e009      	b.n	8001a04 <Mem_Set+0x2c>
        data_align <<=  DEF_OCTET_NBR_BITS;
 80019f0:	6a3b      	ldr	r3, [r7, #32]
 80019f2:	021b      	lsls	r3, r3, #8
 80019f4:	623b      	str	r3, [r7, #32]
        data_align  |= (CPU_ALIGN)data_val;
 80019f6:	7afb      	ldrb	r3, [r7, #11]
 80019f8:	6a3a      	ldr	r2, [r7, #32]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	623b      	str	r3, [r7, #32]
    }
#endif


    data_align = 0u;
    for (i = 0u; i < sizeof(CPU_ALIGN); i++) {                  /* Fill each data_align octet with data val.            */
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	3301      	adds	r3, #1
 8001a02:	617b      	str	r3, [r7, #20]
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	2b03      	cmp	r3, #3
 8001a08:	d9f2      	bls.n	80019f0 <Mem_Set+0x18>
        data_align <<=  DEF_OCTET_NBR_BITS;
        data_align  |= (CPU_ALIGN)data_val;
    }

    size_rem      =  size;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
    mem_align_mod = (CPU_INT08U)((CPU_ADDR)pmem % sizeof(CPU_ALIGN));   /* See Note #3.                                 */
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	f003 0303 	and.w	r3, r3, #3
 8001a16:	613b      	str	r3, [r7, #16]

    pmem_08 = (CPU_INT08U *)pmem;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	61bb      	str	r3, [r7, #24]
    if (mem_align_mod != 0u) {                                  /* If leading octets avail,                   ...       */
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d013      	beq.n	8001a4a <Mem_Set+0x72>
        i = mem_align_mod;
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	617b      	str	r3, [r7, #20]
        while ((size_rem > 0) &&                                /* ... start mem buf fill with leading octets ...       */
 8001a26:	e00a      	b.n	8001a3e <Mem_Set+0x66>
               (i        < sizeof(CPU_ALIGN ))) {               /* ... until next CPU_ALIGN word boundary.              */
           *pmem_08++ = data_val;
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	1c5a      	adds	r2, r3, #1
 8001a2c:	61ba      	str	r2, [r7, #24]
 8001a2e:	7afa      	ldrb	r2, [r7, #11]
 8001a30:	701a      	strb	r2, [r3, #0]
            size_rem -= sizeof(CPU_INT08U);
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	3b01      	subs	r3, #1
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
            i++;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	617b      	str	r3, [r7, #20]
    mem_align_mod = (CPU_INT08U)((CPU_ADDR)pmem % sizeof(CPU_ALIGN));   /* See Note #3.                                 */

    pmem_08 = (CPU_INT08U *)pmem;
    if (mem_align_mod != 0u) {                                  /* If leading octets avail,                   ...       */
        i = mem_align_mod;
        while ((size_rem > 0) &&                                /* ... start mem buf fill with leading octets ...       */
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d002      	beq.n	8001a4a <Mem_Set+0x72>
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	2b03      	cmp	r3, #3
 8001a48:	d9ee      	bls.n	8001a28 <Mem_Set+0x50>
            size_rem -= sizeof(CPU_INT08U);
            i++;
        }
    }

    pmem_align = (CPU_ALIGN *)pmem_08;                          /* See Note #2.                                         */
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	61fb      	str	r3, [r7, #28]
    while (size_rem >= sizeof(CPU_ALIGN)) {                     /* While mem buf aligned on CPU_ALIGN word boundaries,  */
 8001a4e:	e007      	b.n	8001a60 <Mem_Set+0x88>
       *pmem_align++ = data_align;                              /* ... fill mem buf with    CPU_ALIGN-sized data.       */
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	1d1a      	adds	r2, r3, #4
 8001a54:	61fa      	str	r2, [r7, #28]
 8001a56:	6a3a      	ldr	r2, [r7, #32]
 8001a58:	601a      	str	r2, [r3, #0]
        size_rem    -= sizeof(CPU_ALIGN);
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	3b04      	subs	r3, #4
 8001a5e:	627b      	str	r3, [r7, #36]	; 0x24
            i++;
        }
    }

    pmem_align = (CPU_ALIGN *)pmem_08;                          /* See Note #2.                                         */
    while (size_rem >= sizeof(CPU_ALIGN)) {                     /* While mem buf aligned on CPU_ALIGN word boundaries,  */
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	2b03      	cmp	r3, #3
 8001a64:	d8f4      	bhi.n	8001a50 <Mem_Set+0x78>
       *pmem_align++ = data_align;                              /* ... fill mem buf with    CPU_ALIGN-sized data.       */
        size_rem    -= sizeof(CPU_ALIGN);
    }

    pmem_08 = (CPU_INT08U *)pmem_align;
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	61bb      	str	r3, [r7, #24]
    while (size_rem > 0) {                                      /* Finish mem buf fill with trailing octets.            */
 8001a6a:	e007      	b.n	8001a7c <Mem_Set+0xa4>
       *pmem_08++   = data_val;
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	1c5a      	adds	r2, r3, #1
 8001a70:	61ba      	str	r2, [r7, #24]
 8001a72:	7afa      	ldrb	r2, [r7, #11]
 8001a74:	701a      	strb	r2, [r3, #0]
        size_rem   -= sizeof(CPU_INT08U);
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
       *pmem_align++ = data_align;                              /* ... fill mem buf with    CPU_ALIGN-sized data.       */
        size_rem    -= sizeof(CPU_ALIGN);
    }

    pmem_08 = (CPU_INT08U *)pmem_align;
    while (size_rem > 0) {                                      /* Finish mem buf fill with trailing octets.            */
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f4      	bne.n	8001a6c <Mem_Set+0x94>
       *pmem_08++   = data_val;
        size_rem   -= sizeof(CPU_INT08U);
    }
}
 8001a82:	bf00      	nop
 8001a84:	372c      	adds	r7, #44	; 0x2c
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr

08001a8c <Mem_SegCreate>:
                            MEM_SEG     *p_seg,
                            CPU_ADDR     seg_base_addr,
                            CPU_SIZE_T   size,
                            CPU_SIZE_T   padding_align,
                            LIB_ERR     *p_err)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b088      	sub	sp, #32
 8001a90:	af02      	add	r7, sp, #8
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
 8001a98:	603b      	str	r3, [r7, #0]
    CPU_SR_ALLOC();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
       *p_err = LIB_MEM_ERR_INVALID_MEM_ALIGN;
        return;
    }
#endif

    CPU_CRITICAL_ENTER();
 8001a9e:	f7fe fc1f 	bl	80002e0 <CPU_SR_Save>
 8001aa2:	6178      	str	r0, [r7, #20]
        CPU_CRITICAL_EXIT();
        return;
    }
#endif

    Mem_SegCreateCritical(p_name,                               /* Create seg.                                          */
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	6a3b      	ldr	r3, [r7, #32]
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	68b9      	ldr	r1, [r7, #8]
 8001aae:	68f8      	ldr	r0, [r7, #12]
 8001ab0:	f000 f80c 	bl	8001acc <Mem_SegCreateCritical>
                          p_seg,
                          seg_base_addr,
                          padding_align,
                          size);
    CPU_CRITICAL_EXIT();
 8001ab4:	6978      	ldr	r0, [r7, #20]
 8001ab6:	f7fe fc17 	bl	80002e8 <CPU_SR_Restore>

   *p_err = LIB_MEM_ERR_NONE;
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	f242 7210 	movw	r2, #10000	; 0x2710
 8001ac0:	801a      	strh	r2, [r3, #0]
}
 8001ac2:	bf00      	nop
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop

08001acc <Mem_SegCreateCritical>:
static  void  Mem_SegCreateCritical(const  CPU_CHAR    *p_name,
                                           MEM_SEG     *p_seg,
                                           CPU_ADDR     seg_base_addr,
                                           CPU_SIZE_T   padding_align,
                                           CPU_SIZE_T   size)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
 8001ad8:	603b      	str	r3, [r7, #0]
    p_seg->AddrBase         =  seg_base_addr;
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	601a      	str	r2, [r3, #0]
    p_seg->AddrEnd          = (seg_base_addr + (size - 1u));
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	1e5a      	subs	r2, r3, #1
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	605a      	str	r2, [r3, #4]
    p_seg->AddrNext         =  seg_base_addr;
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	609a      	str	r2, [r3, #8]
    p_seg->NextPtr          =  Mem_SegHeadPtr;
 8001af2:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <Mem_SegCreateCritical+0x44>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	60da      	str	r2, [r3, #12]
    p_seg->PaddingAlign     =  padding_align;
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	611a      	str	r2, [r3, #16]
    p_seg->AllocInfoHeadPtr = DEF_NULL;
#else
    (void)&p_name;
#endif

    Mem_SegHeadPtr = p_seg;
 8001b00:	4a03      	ldr	r2, [pc, #12]	; (8001b10 <Mem_SegCreateCritical+0x44>)
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	6013      	str	r3, [r2, #0]
}
 8001b06:	bf00      	nop
 8001b08:	3714      	adds	r7, #20
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr
 8001b10:	20001f64 	.word	0x20001f64

08001b14 <Math_Init>:
*                   as when srand() is first called with a seed value of 1".
*********************************************************************************************************
*/

void  Math_Init (void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
    Math_RandSetSeed((RAND_NBR)RAND_SEED_INIT_VAL);             /* See Note #2.                                         */
 8001b18:	2001      	movs	r0, #1
 8001b1a:	f000 f803 	bl	8001b24 <Math_RandSetSeed>
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop

08001b24 <Math_RandSetSeed>:
*                   See also 'Math_Rand()  Note #1b'.
*********************************************************************************************************
*/

void  Math_RandSetSeed (RAND_NBR  seed)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
    CPU_SR_ALLOC();
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60fb      	str	r3, [r7, #12]


    CPU_CRITICAL_ENTER();
 8001b30:	f7fe fbd6 	bl	80002e0 <CPU_SR_Save>
 8001b34:	60f8      	str	r0, [r7, #12]
    Math_RandSeedCur = seed;
 8001b36:	4a05      	ldr	r2, [pc, #20]	; (8001b4c <Math_RandSetSeed+0x28>)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6013      	str	r3, [r2, #0]
    CPU_CRITICAL_EXIT();
 8001b3c:	68f8      	ldr	r0, [r7, #12]
 8001b3e:	f7fe fbd3 	bl	80002e8 <CPU_SR_Restore>
}
 8001b42:	bf00      	nop
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20002368 	.word	0x20002368

08001b50 <OSQCreate>:
void  OSQCreate (OS_Q        *p_q,
                 CPU_CHAR    *p_name,
                 OS_MSG_QTY   max_qty,
                 OS_ERR      *p_err)

{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	603b      	str	r3, [r7, #0]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	80fb      	strh	r3, [r7, #6]
    CPU_SR_ALLOC();
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to be called from an ISR                   */
 8001b64:	4b1f      	ldr	r3, [pc, #124]	; (8001be4 <OSQCreate+0x94>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d004      	beq.n	8001b76 <OSQCreate+0x26>
       *p_err = OS_ERR_CREATE_ISR;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	f642 62e1 	movw	r2, #12001	; 0x2ee1
 8001b72:	801a      	strh	r2, [r3, #0]
        return;
 8001b74:	e033      	b.n	8001bde <OSQCreate+0x8e>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_q == (OS_Q *)0) {                                 /* Validate arguments                                     */
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d104      	bne.n	8001b86 <OSQCreate+0x36>
       *p_err = OS_ERR_OBJ_PTR_NULL;
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	f645 52c3 	movw	r2, #24003	; 0x5dc3
 8001b82:	801a      	strh	r2, [r3, #0]
        return;
 8001b84:	e02b      	b.n	8001bde <OSQCreate+0x8e>
    }
    if (max_qty == (OS_MSG_QTY)0) {                         /* Cannot specify a zero size queue                       */
 8001b86:	88fb      	ldrh	r3, [r7, #6]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d104      	bne.n	8001b96 <OSQCreate+0x46>
       *p_err = OS_ERR_Q_SIZE;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	f246 5294 	movw	r2, #26004	; 0x6594
 8001b92:	801a      	strh	r2, [r3, #0]
        return;
 8001b94:	e023      	b.n	8001bde <OSQCreate+0x8e>
    }
#endif

    OS_CRITICAL_ENTER();
 8001b96:	f7fe fba3 	bl	80002e0 <CPU_SR_Save>
 8001b9a:	6178      	str	r0, [r7, #20]
#if OS_OBJ_TYPE_REQ > 0u
    p_q->Type    = OS_OBJ_TYPE_Q;                           /* Mark the data structure as a message queue             */
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	4a12      	ldr	r2, [pc, #72]	; (8001be8 <OSQCreate+0x98>)
 8001ba0:	601a      	str	r2, [r3, #0]
#endif
#if OS_CFG_DBG_EN > 0u
    p_q->NamePtr = p_name;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	68ba      	ldr	r2, [r7, #8]
 8001ba6:	605a      	str	r2, [r3, #4]
#else
    (void)&p_name;
#endif
    OS_MsgQInit(&p_q->MsgQ,                                 /* Initialize the queue                                   */
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	3320      	adds	r3, #32
 8001bac:	88fa      	ldrh	r2, [r7, #6]
 8001bae:	4611      	mov	r1, r2
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f001 f8cf 	bl	8002d54 <OS_MsgQInit>
                max_qty);
    OS_PendListInit(&p_q->PendList);                        /* Initialize the waiting list                            */
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	3308      	adds	r3, #8
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f001 fdb6 	bl	800372c <OS_PendListInit>

#if OS_CFG_DBG_EN > 0u
    OS_QDbgListAdd(p_q);
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f000 f965 	bl	8001e90 <OS_QDbgListAdd>
#endif
    OSQQty++;                                               /* One more queue created                                 */
 8001bc6:	4b09      	ldr	r3, [pc, #36]	; (8001bec <OSQCreate+0x9c>)
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	4b07      	ldr	r3, [pc, #28]	; (8001bec <OSQCreate+0x9c>)
 8001bd0:	801a      	strh	r2, [r3, #0]
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_Q_CREATE(p_q, p_name);                         /* Record the event.                                      */
#endif
    OS_CRITICAL_EXIT_NO_SCHED();
 8001bd2:	6978      	ldr	r0, [r7, #20]
 8001bd4:	f7fe fb88 	bl	80002e8 <CPU_SR_Restore>
   *p_err = OS_ERR_NONE;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	801a      	strh	r2, [r3, #0]
}
 8001bde:	3718      	adds	r7, #24
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20002608 	.word	0x20002608
 8001be8:	55455551 	.word	0x55455551
 8001bec:	200025e0 	.word	0x200025e0

08001bf0 <OSQPend>:
                OS_TICK       timeout,
                OS_OPT        opt,
                OS_MSG_SIZE  *p_msg_size,
                CPU_TS       *p_ts,
                OS_ERR       *p_err)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08e      	sub	sp, #56	; 0x38
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	603b      	str	r3, [r7, #0]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	80fb      	strh	r3, [r7, #6]
    OS_PEND_DATA  pend_data;
    void         *p_void;
    CPU_SR_ALLOC();
 8001c00:	2300      	movs	r3, #0
 8001c02:	633b      	str	r3, [r7, #48]	; 0x30
        return ((void *)0);
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 8001c04:	4b72      	ldr	r3, [pc, #456]	; (8001dd0 <OSQPend+0x1e0>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d005      	beq.n	8001c18 <OSQPend+0x28>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_PEND_FAILED(p_q);                        /* Record the event.                                      */
#endif
       *p_err = OS_ERR_PEND_ISR;
 8001c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c0e:	f246 12ae 	movw	r2, #25006	; 0x61ae
 8001c12:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 8001c14:	2300      	movs	r3, #0
 8001c16:	e0d7      	b.n	8001dc8 <OSQPend+0x1d8>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_q == (OS_Q *)0) {                                 /* Validate arguments                                     */
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d105      	bne.n	8001c2a <OSQPend+0x3a>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_PEND_FAILED(p_q);                        /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_PTR_NULL;
 8001c1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c20:	f645 52c3 	movw	r2, #24003	; 0x5dc3
 8001c24:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 8001c26:	2300      	movs	r3, #0
 8001c28:	e0ce      	b.n	8001dc8 <OSQPend+0x1d8>
    }
    if (p_msg_size == (OS_MSG_SIZE *)0) {
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d105      	bne.n	8001c3c <OSQPend+0x4c>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_PEND_FAILED(p_q);                        /* Record the event.                                      */
#endif
       *p_err = OS_ERR_PTR_INVALID;
 8001c30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c32:	f246 22d5 	movw	r2, #25301	; 0x62d5
 8001c36:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 8001c38:	2300      	movs	r3, #0
 8001c3a:	e0c5      	b.n	8001dc8 <OSQPend+0x1d8>
    }
    switch (opt) {
 8001c3c:	88fb      	ldrh	r3, [r7, #6]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d008      	beq.n	8001c54 <OSQPend+0x64>
 8001c42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c46:	d005      	beq.n	8001c54 <OSQPend+0x64>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_Q_PEND_FAILED(p_q);                   /* Record the event.                                      */
#endif
            *p_err = OS_ERR_OPT_INVALID;
 8001c48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c4a:	f645 6225 	movw	r2, #24101	; 0x5e25
 8001c4e:	801a      	strh	r2, [r3, #0]
             return ((void *)0);
 8001c50:	2300      	movs	r3, #0
 8001c52:	e0b9      	b.n	8001dc8 <OSQPend+0x1d8>
        return ((void *)0);
    }
    switch (opt) {
        case OS_OPT_PEND_BLOCKING:
        case OS_OPT_PEND_NON_BLOCKING:
             break;
 8001c54:	bf00      	nop
             return ((void *)0);
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_q->Type != OS_OBJ_TYPE_Q) {                       /* Make sure message queue was created                    */
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a5e      	ldr	r2, [pc, #376]	; (8001dd4 <OSQPend+0x1e4>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d005      	beq.n	8001c6c <OSQPend+0x7c>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_PEND_FAILED(p_q);                        /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_TYPE;
 8001c60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c62:	f645 52c4 	movw	r2, #24004	; 0x5dc4
 8001c66:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 8001c68:	2300      	movs	r3, #0
 8001c6a:	e0ad      	b.n	8001dc8 <OSQPend+0x1d8>
    }
#endif

    if (p_ts != (CPU_TS *)0) {
 8001c6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d002      	beq.n	8001c78 <OSQPend+0x88>
       *p_ts  = (CPU_TS  )0;                                /* Initialize the returned timestamp                      */
 8001c72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
    }

    CPU_CRITICAL_ENTER();
 8001c78:	f7fe fb32 	bl	80002e0 <CPU_SR_Save>
 8001c7c:	6338      	str	r0, [r7, #48]	; 0x30
    p_void = OS_MsgQGet(&p_q->MsgQ,                         /* Any message waiting in the message queue?              */
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f103 0020 	add.w	r0, r3, #32
 8001c84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001c88:	6839      	ldr	r1, [r7, #0]
 8001c8a:	f001 f87d 	bl	8002d88 <OS_MsgQGet>
 8001c8e:	6378      	str	r0, [r7, #52]	; 0x34
                        p_msg_size,
                        p_ts,
                        p_err);
    if (*p_err == OS_ERR_NONE) {
 8001c90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d104      	bne.n	8001ca2 <OSQPend+0xb2>
        CPU_CRITICAL_EXIT();
 8001c98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c9a:	f7fe fb25 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_PEND(p_q);                               /* Record the event.                                      */
#endif
        return (p_void);                                    /* Yes, Return message received                           */
 8001c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ca0:	e092      	b.n	8001dc8 <OSQPend+0x1d8>
    }

    if ((opt & OS_OPT_PEND_NON_BLOCKING) != (OS_OPT)0) {    /* Caller wants to block if not available?                */
 8001ca2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	da08      	bge.n	8001cbc <OSQPend+0xcc>
        CPU_CRITICAL_EXIT();
 8001caa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001cac:	f7fe fb1c 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_PEND_FAILED(p_q);                        /* Record the event.                                      */
#endif
       *p_err = OS_ERR_PEND_WOULD_BLOCK;                    /* No                                                     */
 8001cb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cb2:	f246 12b0 	movw	r2, #25008	; 0x61b0
 8001cb6:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 8001cb8:	2300      	movs	r3, #0
 8001cba:	e085      	b.n	8001dc8 <OSQPend+0x1d8>
    } else {
        if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /* Can't pend when the scheduler is locked                */
 8001cbc:	4b46      	ldr	r3, [pc, #280]	; (8001dd8 <OSQPend+0x1e8>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d008      	beq.n	8001cd6 <OSQPend+0xe6>
            CPU_CRITICAL_EXIT();
 8001cc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001cc6:	f7fe fb0f 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
            TRACE_OS_Q_PEND_FAILED(p_q);                    /* Record the event.                                      */
#endif
           *p_err = OS_ERR_SCHED_LOCKED;
 8001cca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ccc:	f646 5263 	movw	r2, #28003	; 0x6d63
 8001cd0:	801a      	strh	r2, [r3, #0]
            return ((void *)0);
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	e078      	b.n	8001dc8 <OSQPend+0x1d8>
        }
    }
                                                            /* Lock the scheduler/re-enable interrupts                */
    OS_CRITICAL_ENTER_CPU_EXIT();
    OS_Pend(&pend_data,                                     /* Block task pending on Message Queue                    */
 8001cd6:	f107 0010 	add.w	r0, r7, #16
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	2205      	movs	r2, #5
 8001cde:	68f9      	ldr	r1, [r7, #12]
 8001ce0:	f001 fc1e 	bl	8003520 <OS_Pend>
            (OS_PEND_OBJ *)((void *)p_q),
            OS_TASK_PEND_ON_Q,
            timeout);
    OS_CRITICAL_EXIT_NO_SCHED();
 8001ce4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ce6:	f7fe faff 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_Q_PEND_BLOCK(p_q);                             /* Record the event.                                      */
#endif
    OSSched();                                              /* Find the next highest priority task ready to run       */
 8001cea:	f001 faad 	bl	8003248 <OSSched>

    CPU_CRITICAL_ENTER();
 8001cee:	f7fe faf7 	bl	80002e0 <CPU_SR_Save>
 8001cf2:	6338      	str	r0, [r7, #48]	; 0x30
    switch (OSTCBCurPtr->PendStatus) {
 8001cf4:	4b39      	ldr	r3, [pc, #228]	; (8001ddc <OSQPend+0x1ec>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cfc:	2b03      	cmp	r3, #3
 8001cfe:	d855      	bhi.n	8001dac <OSQPend+0x1bc>
 8001d00:	a201      	add	r2, pc, #4	; (adr r2, 8001d08 <OSQPend+0x118>)
 8001d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d06:	bf00      	nop
 8001d08:	08001d19 	.word	0x08001d19
 8001d0c:	08001d45 	.word	0x08001d45
 8001d10:	08001d89 	.word	0x08001d89
 8001d14:	08001d69 	.word	0x08001d69
        case OS_STATUS_PEND_OK:                             /* Extract message from TCB (Put there by Post)           */
             p_void     = OSTCBCurPtr->MsgPtr;
 8001d18:	4b30      	ldr	r3, [pc, #192]	; (8001ddc <OSQPend+0x1ec>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1e:	637b      	str	r3, [r7, #52]	; 0x34
            *p_msg_size = OSTCBCurPtr->MsgSize;
 8001d20:	4b2e      	ldr	r3, [pc, #184]	; (8001ddc <OSQPend+0x1ec>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	801a      	strh	r2, [r3, #0]
             if (p_ts  != (CPU_TS *)0) {
 8001d2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d004      	beq.n	8001d3c <OSQPend+0x14c>
                *p_ts   =  OSTCBCurPtr->TS;
 8001d32:	4b2a      	ldr	r3, [pc, #168]	; (8001ddc <OSQPend+0x1ec>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001d38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d3a:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_Q_PEND(p_q);                          /* Record the event.                                      */
#endif
            *p_err      = OS_ERR_NONE;
 8001d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d3e:	2200      	movs	r2, #0
 8001d40:	801a      	strh	r2, [r3, #0]
             break;
 8001d42:	e03d      	b.n	8001dc0 <OSQPend+0x1d0>

        case OS_STATUS_PEND_ABORT:                          /* Indicate that we aborted                               */
             p_void     = (void      *)0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	637b      	str	r3, [r7, #52]	; 0x34
            *p_msg_size = (OS_MSG_SIZE)0;
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	801a      	strh	r2, [r3, #0]
             if (p_ts  != (CPU_TS *)0) {
 8001d4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d004      	beq.n	8001d5e <OSQPend+0x16e>
                *p_ts   =  OSTCBCurPtr->TS;
 8001d54:	4b21      	ldr	r3, [pc, #132]	; (8001ddc <OSQPend+0x1ec>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001d5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d5c:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_Q_PEND_FAILED(p_q);                   /* Record the event.                                      */
#endif
            *p_err      = OS_ERR_PEND_ABORT;
 8001d5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d60:	f246 12a9 	movw	r2, #25001	; 0x61a9
 8001d64:	801a      	strh	r2, [r3, #0]
             break;
 8001d66:	e02b      	b.n	8001dc0 <OSQPend+0x1d0>

        case OS_STATUS_PEND_TIMEOUT:                        /* Indicate that we didn't get event within TO            */
             p_void     = (void      *)0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	637b      	str	r3, [r7, #52]	; 0x34
            *p_msg_size = (OS_MSG_SIZE)0;
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	801a      	strh	r2, [r3, #0]
             if (p_ts  != (CPU_TS *)0) {
 8001d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d002      	beq.n	8001d7e <OSQPend+0x18e>
                *p_ts   = (CPU_TS  )0;
 8001d78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_Q_PEND_FAILED(p_q);                   /* Record the event.                                      */
#endif
            *p_err      = OS_ERR_TIMEOUT;
 8001d7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d80:	f247 22d9 	movw	r2, #29401	; 0x72d9
 8001d84:	801a      	strh	r2, [r3, #0]
             break;
 8001d86:	e01b      	b.n	8001dc0 <OSQPend+0x1d0>

        case OS_STATUS_PEND_DEL:                            /* Indicate that object pended on has been deleted        */
             p_void     = (void      *)0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	637b      	str	r3, [r7, #52]	; 0x34
            *p_msg_size = (OS_MSG_SIZE)0;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	801a      	strh	r2, [r3, #0]
             if (p_ts  != (CPU_TS *)0) {
 8001d92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d004      	beq.n	8001da2 <OSQPend+0x1b2>
                *p_ts   =  OSTCBCurPtr->TS;
 8001d98:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <OSQPend+0x1ec>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001d9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001da0:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_Q_PEND_FAILED(p_q);                   /* Record the event.                                      */
#endif
            *p_err      = OS_ERR_OBJ_DEL;
 8001da2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001da4:	f645 52c2 	movw	r2, #24002	; 0x5dc2
 8001da8:	801a      	strh	r2, [r3, #0]
             break;
 8001daa:	e009      	b.n	8001dc0 <OSQPend+0x1d0>

        default:
             p_void     = (void      *)0;
 8001dac:	2300      	movs	r3, #0
 8001dae:	637b      	str	r3, [r7, #52]	; 0x34
            *p_msg_size = (OS_MSG_SIZE)0;
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	2200      	movs	r2, #0
 8001db4:	801a      	strh	r2, [r3, #0]
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_Q_PEND_FAILED(p_q);                   /* Record the event.                                      */
#endif
            *p_err      = OS_ERR_STATUS_INVALID;
 8001db6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001db8:	f646 622e 	movw	r2, #28206	; 0x6e2e
 8001dbc:	801a      	strh	r2, [r3, #0]
             break;
 8001dbe:	bf00      	nop
    }
    CPU_CRITICAL_EXIT();
 8001dc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001dc2:	f7fe fa91 	bl	80002e8 <CPU_SR_Restore>
    return (p_void);
 8001dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3738      	adds	r7, #56	; 0x38
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20002608 	.word	0x20002608
 8001dd4:	55455551 	.word	0x55455551
 8001dd8:	20002370 	.word	0x20002370
 8001ddc:	200025dc 	.word	0x200025dc

08001de0 <OSQPost>:
void  OSQPost (OS_Q         *p_q,
               void         *p_void,
               OS_MSG_SIZE   msg_size,
               OS_OPT        opt,
               OS_ERR       *p_err)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b088      	sub	sp, #32
 8001de4:	af02      	add	r7, sp, #8
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	4611      	mov	r1, r2
 8001dec:	461a      	mov	r2, r3
 8001dee:	460b      	mov	r3, r1
 8001df0:	80fb      	strh	r3, [r7, #6]
 8001df2:	4613      	mov	r3, r2
 8001df4:	80bb      	strh	r3, [r7, #4]
        return;
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_q == (OS_Q *)0) {                                 /* Validate 'p_q'                                         */
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d104      	bne.n	8001e06 <OSQPost+0x26>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_POST_FAILED(p_q);                        /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_PTR_NULL;
 8001dfc:	6a3b      	ldr	r3, [r7, #32]
 8001dfe:	f645 52c3 	movw	r2, #24003	; 0x5dc3
 8001e02:	801a      	strh	r2, [r3, #0]
        return;
 8001e04:	e03f      	b.n	8001e86 <OSQPost+0xa6>
    }
    switch (opt) {                                          /* Validate 'opt'                                         */
 8001e06:	88bb      	ldrh	r3, [r7, #4]
 8001e08:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 8001e0c:	d022      	beq.n	8001e54 <OSQPost+0x74>
 8001e0e:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 8001e12:	dc07      	bgt.n	8001e24 <OSQPost+0x44>
 8001e14:	2b10      	cmp	r3, #16
 8001e16:	d01d      	beq.n	8001e54 <OSQPost+0x74>
 8001e18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e1c:	d01a      	beq.n	8001e54 <OSQPost+0x74>
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d018      	beq.n	8001e54 <OSQPost+0x74>
 8001e22:	e012      	b.n	8001e4a <OSQPost+0x6a>
 8001e24:	f248 0210 	movw	r2, #32784	; 0x8010
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d013      	beq.n	8001e54 <OSQPost+0x74>
 8001e2c:	f248 0210 	movw	r2, #32784	; 0x8010
 8001e30:	4293      	cmp	r3, r2
 8001e32:	dc03      	bgt.n	8001e3c <OSQPost+0x5c>
 8001e34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e38:	d00c      	beq.n	8001e54 <OSQPost+0x74>
 8001e3a:	e006      	b.n	8001e4a <OSQPost+0x6a>
 8001e3c:	f5b3 4f02 	cmp.w	r3, #33280	; 0x8200
 8001e40:	d008      	beq.n	8001e54 <OSQPost+0x74>
 8001e42:	f248 2210 	movw	r2, #33296	; 0x8210
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d004      	beq.n	8001e54 <OSQPost+0x74>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_Q_POST_FAILED(p_q);                   /* Record the event.                                      */
#endif
            *p_err =  OS_ERR_OPT_INVALID;
 8001e4a:	6a3b      	ldr	r3, [r7, #32]
 8001e4c:	f645 6225 	movw	r2, #24101	; 0x5e25
 8001e50:	801a      	strh	r2, [r3, #0]
             return;
 8001e52:	e018      	b.n	8001e86 <OSQPost+0xa6>
        case OS_OPT_POST_LIFO | OS_OPT_POST_ALL:
        case OS_OPT_POST_FIFO | OS_OPT_POST_NO_SCHED:
        case OS_OPT_POST_LIFO | OS_OPT_POST_NO_SCHED:
        case OS_OPT_POST_FIFO | OS_OPT_POST_ALL | OS_OPT_POST_NO_SCHED:
        case OS_OPT_POST_LIFO | OS_OPT_POST_ALL | OS_OPT_POST_NO_SCHED:
             break;
 8001e54:	bf00      	nop
             return;
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_q->Type != OS_OBJ_TYPE_Q) {                       /* Make sure message queue was created                    */
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a0c      	ldr	r2, [pc, #48]	; (8001e8c <OSQPost+0xac>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d004      	beq.n	8001e6a <OSQPost+0x8a>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_POST_FAILED(p_q);                        /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_TYPE;
 8001e60:	6a3b      	ldr	r3, [r7, #32]
 8001e62:	f645 52c4 	movw	r2, #24004	; 0x5dc4
 8001e66:	801a      	strh	r2, [r3, #0]
        return;
 8001e68:	e00d      	b.n	8001e86 <OSQPost+0xa6>
    }
#endif

    ts = OS_TS_GET();                                       /* Get timestamp                                          */
 8001e6a:	f005 f8ff 	bl	800706c <CPU_TS_TmrRd>
 8001e6e:	6178      	str	r0, [r7, #20]
    }
#endif
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_Q_POST(p_q);                                   /* Record the event.                                      */
#endif
    OS_QPost(p_q,
 8001e70:	88b9      	ldrh	r1, [r7, #4]
 8001e72:	88fa      	ldrh	r2, [r7, #6]
 8001e74:	6a3b      	ldr	r3, [r7, #32]
 8001e76:	9301      	str	r3, [sp, #4]
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	68b9      	ldr	r1, [r7, #8]
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f000 f841 	bl	8001f08 <OS_QPost>
             p_void,
             msg_size,
             opt,
             ts,
             p_err);
}
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	55455551 	.word	0x55455551

08001e90 <OS_QDbgListAdd>:
*/


#if OS_CFG_DBG_EN > 0u
void  OS_QDbgListAdd (OS_Q  *p_q)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
    p_q->DbgNamePtr               = (CPU_CHAR *)((void *)" ");
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a0e      	ldr	r2, [pc, #56]	; (8001ed4 <OS_QDbgListAdd+0x44>)
 8001e9c:	61da      	str	r2, [r3, #28]
    p_q->DbgPrevPtr               = (OS_Q     *)0;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	615a      	str	r2, [r3, #20]
    if (OSQDbgListPtr == (OS_Q *)0) {
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <OS_QDbgListAdd+0x48>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d103      	bne.n	8001eb4 <OS_QDbgListAdd+0x24>
        p_q->DbgNextPtr           = (OS_Q     *)0;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	619a      	str	r2, [r3, #24]
 8001eb2:	e007      	b.n	8001ec4 <OS_QDbgListAdd+0x34>
    } else {
        p_q->DbgNextPtr           =  OSQDbgListPtr;
 8001eb4:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <OS_QDbgListAdd+0x48>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	619a      	str	r2, [r3, #24]
        OSQDbgListPtr->DbgPrevPtr =  p_q;
 8001ebc:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <OS_QDbgListAdd+0x48>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	615a      	str	r2, [r3, #20]
    }
    OSQDbgListPtr                 =  p_q;
 8001ec4:	4a04      	ldr	r2, [pc, #16]	; (8001ed8 <OS_QDbgListAdd+0x48>)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6013      	str	r3, [r2, #0]
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr
 8001ed4:	0800de20 	.word	0x0800de20
 8001ed8:	20002798 	.word	0x20002798

08001edc <OS_QInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_QInit (OS_ERR  *p_err)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSQDbgListPtr = (OS_Q *)0;
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <OS_QInit+0x24>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
#endif

    OSQQty        = (OS_OBJ_QTY)0;
 8001eea:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <OS_QInit+0x28>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	801a      	strh	r2, [r3, #0]
   *p_err         = OS_ERR_NONE;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	801a      	strh	r2, [r3, #0]
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr
 8001f00:	20002798 	.word	0x20002798
 8001f04:	200025e0 	.word	0x200025e0

08001f08 <OS_QPost>:
                void         *p_void,
                OS_MSG_SIZE   msg_size,
                OS_OPT        opt,
                CPU_TS        ts,
                OS_ERR       *p_err)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08c      	sub	sp, #48	; 0x30
 8001f0c:	af02      	add	r7, sp, #8
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	4611      	mov	r1, r2
 8001f14:	461a      	mov	r2, r3
 8001f16:	460b      	mov	r3, r1
 8001f18:	80fb      	strh	r3, [r7, #6]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	80bb      	strh	r3, [r7, #4]
    OS_OPT         post_type;
    OS_PEND_LIST  *p_pend_list;
    OS_PEND_DATA  *p_pend_data;
    OS_PEND_DATA  *p_pend_data_next;
    OS_TCB        *p_tcb;
    CPU_SR_ALLOC();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61fb      	str	r3, [r7, #28]



    OS_CRITICAL_ENTER();
 8001f22:	f7fe f9dd 	bl	80002e0 <CPU_SR_Save>
 8001f26:	61f8      	str	r0, [r7, #28]
    p_pend_list = &p_q->PendList;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	3308      	adds	r3, #8
 8001f2c:	61bb      	str	r3, [r7, #24]
    if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0) {         /* Any task waiting on message queue?                     */
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	891b      	ldrh	r3, [r3, #8]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d11a      	bne.n	8001f6c <OS_QPost+0x64>
        if ((opt & OS_OPT_POST_LIFO) == (OS_OPT)0) {        /* Determine whether we post FIFO or LIFO                 */
 8001f36:	88bb      	ldrh	r3, [r7, #4]
 8001f38:	f003 0310 	and.w	r3, r3, #16
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d102      	bne.n	8001f46 <OS_QPost+0x3e>
            post_type = OS_OPT_POST_FIFO;
 8001f40:	2300      	movs	r3, #0
 8001f42:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001f44:	e001      	b.n	8001f4a <OS_QPost+0x42>
        } else {
            post_type = OS_OPT_POST_LIFO;
 8001f46:	2310      	movs	r3, #16
 8001f48:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
        OS_MsgQPut(&p_q->MsgQ,                              /* Place message in the message queue                     */
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f103 0020 	add.w	r0, r3, #32
 8001f50:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001f52:	88fa      	ldrh	r2, [r7, #6]
 8001f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f56:	9301      	str	r3, [sp, #4]
 8001f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	68b9      	ldr	r1, [r7, #8]
 8001f60:	f000 ff70 	bl	8002e44 <OS_MsgQPut>
                   p_void,
                   msg_size,
                   post_type,
                   ts,
                   p_err);
        OS_CRITICAL_EXIT();
 8001f64:	69f8      	ldr	r0, [r7, #28]
 8001f66:	f7fe f9bf 	bl	80002e8 <CPU_SR_Restore>
        return;
 8001f6a:	e031      	b.n	8001fd0 <OS_QPost+0xc8>
    }

    if ((opt & OS_OPT_POST_ALL) != (OS_OPT)0) {             /* Post message to all tasks waiting?                     */
 8001f6c:	88bb      	ldrh	r3, [r7, #4]
 8001f6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <OS_QPost+0x76>
        cnt = p_pend_list->NbrEntries;                      /* Yes                                                    */
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	891b      	ldrh	r3, [r3, #8]
 8001f7a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001f7c:	e001      	b.n	8001f82 <OS_QPost+0x7a>
    } else {
        cnt = (OS_OBJ_QTY)1;                                /* No                                                     */
 8001f7e:	2301      	movs	r3, #1
 8001f80:	84fb      	strh	r3, [r7, #38]	; 0x26
    }
    p_pend_data = p_pend_list->HeadPtr;
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	623b      	str	r3, [r7, #32]
    while (cnt > 0u) {
 8001f88:	e013      	b.n	8001fb2 <OS_QPost+0xaa>
        p_tcb            = p_pend_data->TCBPtr;
 8001f8a:	6a3b      	ldr	r3, [r7, #32]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	617b      	str	r3, [r7, #20]
        p_pend_data_next = p_pend_data->NextPtr;
 8001f90:	6a3b      	ldr	r3, [r7, #32]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	613b      	str	r3, [r7, #16]
        OS_Post((OS_PEND_OBJ *)((void *)p_q),
 8001f96:	88fa      	ldrh	r2, [r7, #6]
 8001f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	6979      	ldr	r1, [r7, #20]
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f001 fcbc 	bl	8003920 <OS_Post>
                p_tcb,
                p_void,
                msg_size,
                ts);
        p_pend_data = p_pend_data_next;
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	623b      	str	r3, [r7, #32]
        cnt--;
 8001fac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	84fb      	strh	r3, [r7, #38]	; 0x26
        cnt = p_pend_list->NbrEntries;                      /* Yes                                                    */
    } else {
        cnt = (OS_OBJ_QTY)1;                                /* No                                                     */
    }
    p_pend_data = p_pend_list->HeadPtr;
    while (cnt > 0u) {
 8001fb2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1e8      	bne.n	8001f8a <OS_QPost+0x82>
                msg_size,
                ts);
        p_pend_data = p_pend_data_next;
        cnt--;
    }
    OS_CRITICAL_EXIT_NO_SCHED();
 8001fb8:	69f8      	ldr	r0, [r7, #28]
 8001fba:	f7fe f995 	bl	80002e8 <CPU_SR_Restore>
    if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0) {
 8001fbe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	db01      	blt.n	8001fca <OS_QPost+0xc2>
        OSSched();                                          /* Run the scheduler                                      */
 8001fc6:	f001 f93f 	bl	8003248 <OSSched>
    }
   *p_err = OS_ERR_NONE;
 8001fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fcc:	2200      	movs	r2, #0
 8001fce:	801a      	strh	r2, [r3, #0]
}
 8001fd0:	3728      	adds	r7, #40	; 0x28
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop

08001fd8 <OSTaskCreate>:
                    OS_MSG_QTY     q_size,
                    OS_TICK        time_quanta,
                    void          *p_ext,
                    OS_OPT         opt,
                    OS_ERR        *p_err)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08c      	sub	sp, #48	; 0x30
 8001fdc:	af02      	add	r7, sp, #8
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
 8001fe4:	603b      	str	r3, [r7, #0]
    OS_TLS_ID      id;
#endif

    CPU_STK       *p_sp;
    CPU_STK       *p_stk_limit;
    CPU_SR_ALLOC();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61bb      	str	r3, [r7, #24]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* ---------- CANNOT CREATE A TASK FROM AN ISR ---------- */
 8001fea:	4b75      	ldr	r3, [pc, #468]	; (80021c0 <OSTaskCreate+0x1e8>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d004      	beq.n	8001ffc <OSTaskCreate+0x24>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_TASK_CREATE_ISR;
 8001ff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ff4:	f247 124a 	movw	r2, #29002	; 0x714a
 8001ff8:	801a      	strh	r2, [r3, #0]
        return;
 8001ffa:	e0dd      	b.n	80021b8 <OSTaskCreate+0x1e0>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u                                  /* ---------------- VALIDATE ARGUMENTS ------------------ */
    if (p_tcb == (OS_TCB *)0) {                             /* User must supply a valid OS_TCB                        */
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d104      	bne.n	800200c <OSTaskCreate+0x34>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_TCB_INVALID;
 8002002:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002004:	f247 12ad 	movw	r2, #29101	; 0x71ad
 8002008:	801a      	strh	r2, [r3, #0]
        return;
 800200a:	e0d5      	b.n	80021b8 <OSTaskCreate+0x1e0>
    }
    if (p_task == (OS_TASK_PTR)0) {                         /* User must supply a valid task                          */
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d104      	bne.n	800201c <OSTaskCreate+0x44>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_TASK_INVALID;
 8002012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002014:	f247 124f 	movw	r2, #29007	; 0x714f
 8002018:	801a      	strh	r2, [r3, #0]
        return;
 800201a:	e0cd      	b.n	80021b8 <OSTaskCreate+0x1e0>
    }
    if (p_stk_base == (CPU_STK *)0) {                       /* User must supply a valid stack base address            */
 800201c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800201e:	2b00      	cmp	r3, #0
 8002020:	d104      	bne.n	800202c <OSTaskCreate+0x54>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_STK_INVALID;
 8002022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002024:	f646 622f 	movw	r2, #28207	; 0x6e2f
 8002028:	801a      	strh	r2, [r3, #0]
        return;
 800202a:	e0c5      	b.n	80021b8 <OSTaskCreate+0x1e0>
    }
    if (stk_size < OSCfg_StkSizeMin) {                      /* User must supply a valid minimum stack size            */
 800202c:	4b65      	ldr	r3, [pc, #404]	; (80021c4 <OSTaskCreate+0x1ec>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002032:	429a      	cmp	r2, r3
 8002034:	d204      	bcs.n	8002040 <OSTaskCreate+0x68>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_STK_SIZE_INVALID;
 8002036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002038:	f646 6230 	movw	r2, #28208	; 0x6e30
 800203c:	801a      	strh	r2, [r3, #0]
        return;
 800203e:	e0bb      	b.n	80021b8 <OSTaskCreate+0x1e0>
    }
    if (stk_limit >= stk_size) {                            /* User must supply a valid stack limit                   */
 8002040:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002044:	429a      	cmp	r2, r3
 8002046:	d304      	bcc.n	8002052 <OSTaskCreate+0x7a>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_STK_LIMIT_INVALID;
 8002048:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800204a:	f646 6231 	movw	r2, #28209	; 0x6e31
 800204e:	801a      	strh	r2, [r3, #0]
        return;
 8002050:	e0b2      	b.n	80021b8 <OSTaskCreate+0x1e0>
    }
    if (prio >= OS_CFG_PRIO_MAX) {                          /* Priority must be within 0 and OS_CFG_PRIO_MAX-1        */
 8002052:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002056:	2b1f      	cmp	r3, #31
 8002058:	d904      	bls.n	8002064 <OSTaskCreate+0x8c>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_PRIO_INVALID;
 800205a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800205c:	f246 2273 	movw	r2, #25203	; 0x6273
 8002060:	801a      	strh	r2, [r3, #0]
        return;
 8002062:	e0a9      	b.n	80021b8 <OSTaskCreate+0x1e0>
            return;
        }
    }
#endif

    if (prio == (OS_CFG_PRIO_MAX - 1u)) {
 8002064:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002068:	2b1f      	cmp	r3, #31
 800206a:	d108      	bne.n	800207e <OSTaskCreate+0xa6>
        if (p_tcb != &OSIdleTaskTCB) {
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4a56      	ldr	r2, [pc, #344]	; (80021c8 <OSTaskCreate+0x1f0>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d004      	beq.n	800207e <OSTaskCreate+0xa6>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
            TRACE_OS_TASK_CREATE_FAILED(p_tcb);             /* Record the event.                                      */
#endif
           *p_err = OS_ERR_PRIO_INVALID;                    /* Not allowed to use same priority as idle task          */
 8002074:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002076:	f246 2273 	movw	r2, #25203	; 0x6273
 800207a:	801a      	strh	r2, [r3, #0]
            return;
 800207c:	e09c      	b.n	80021b8 <OSTaskCreate+0x1e0>
        }
    }

    OS_TaskInitTCB(p_tcb);                                  /* Initialize the TCB to default values                   */
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f000 faca 	bl	8002618 <OS_TaskInitTCB>

   *p_err = OS_ERR_NONE;
 8002084:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002086:	2200      	movs	r2, #0
 8002088:	801a      	strh	r2, [r3, #0]
                                                            /* --------------- CLEAR THE TASK'S STACK --------------- */
    if ((opt & OS_OPT_TASK_STK_CHK) != (OS_OPT)0) {         /* See if stack checking has been enabled                 */
 800208a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b00      	cmp	r3, #0
 8002094:	d017      	beq.n	80020c6 <OSTaskCreate+0xee>
        if ((opt & OS_OPT_TASK_STK_CLR) != (OS_OPT)0) {     /* See if stack needs to be cleared                       */
 8002096:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d011      	beq.n	80020c6 <OSTaskCreate+0xee>
            p_sp = p_stk_base;
 80020a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020a4:	61fb      	str	r3, [r7, #28]
            for (i = 0u; i < stk_size; i++) {               /* Stack grows from HIGH to LOW memory                    */
 80020a6:	2300      	movs	r3, #0
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24
 80020aa:	e008      	b.n	80020be <OSTaskCreate+0xe6>
               *p_sp = (CPU_STK)0;                          /* Clear from bottom of stack and up!                     */
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
                p_sp++;
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	3304      	adds	r3, #4
 80020b6:	61fb      	str	r3, [r7, #28]
   *p_err = OS_ERR_NONE;
                                                            /* --------------- CLEAR THE TASK'S STACK --------------- */
    if ((opt & OS_OPT_TASK_STK_CHK) != (OS_OPT)0) {         /* See if stack checking has been enabled                 */
        if ((opt & OS_OPT_TASK_STK_CLR) != (OS_OPT)0) {     /* See if stack needs to be cleared                       */
            p_sp = p_stk_base;
            for (i = 0u; i < stk_size; i++) {               /* Stack grows from HIGH to LOW memory                    */
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	3301      	adds	r3, #1
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
 80020be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d3f2      	bcc.n	80020ac <OSTaskCreate+0xd4>
            }
        }
    }
                                                            /* ------- INITIALIZE THE STACK FRAME OF THE TASK ------- */
#if (CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO)
    p_stk_limit = p_stk_base + stk_limit;
 80020c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020cc:	4413      	add	r3, r2
 80020ce:	617b      	str	r3, [r7, #20]
#else
    p_stk_limit = p_stk_base + (stk_size - 1u) - stk_limit;
#endif

    p_sp = OSTaskStkInit(p_task,
 80020d0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80020d4:	9301      	str	r3, [sp, #4]
 80020d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020de:	6839      	ldr	r1, [r7, #0]
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f003 fdcf 	bl	8005c84 <OSTaskStkInit>
 80020e6:	61f8      	str	r0, [r7, #28]
                         stk_size,
                         opt);

                                                            /* -------------- INITIALIZE THE TCB FIELDS ------------- */
#if OS_CFG_DBG_EN > 0u
    p_tcb->TaskEntryAddr = p_task;                          /* Save task entry point address                          */
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	629a      	str	r2, [r3, #40]	; 0x28
    p_tcb->TaskEntryArg  = p_arg;                           /* Save task entry argument                               */
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif

#if OS_CFG_DBG_EN > 0u
    p_tcb->NamePtr       = p_name;                          /* Save task name                                         */
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	621a      	str	r2, [r3, #32]
#else
    (void)&p_name;
#endif

    p_tcb->Prio          = prio;                            /* Save the task's priority                               */
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002100:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

#if OS_CFG_MUTEX_EN > 0u
    p_tcb->BasePrio      = prio;                            /* Set the base priority                                  */
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800210a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
#endif

    p_tcb->StkPtr        = p_sp;                            /* Save the new top-of-stack pointer                      */
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	69fa      	ldr	r2, [r7, #28]
 8002112:	601a      	str	r2, [r3, #0]
#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u))
    p_tcb->StkLimitPtr   = p_stk_limit;                     /* Save the stack limit pointer                           */
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	609a      	str	r2, [r3, #8]
    }
#else
    (void)&time_quanta;
#endif

    p_tcb->ExtPtr        = p_ext;                           /* Save pointer to TCB extension                          */
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800211e:	605a      	str	r2, [r3, #4]
#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u))
    p_tcb->StkBasePtr    = p_stk_base;                      /* Save pointer to the base address of the stack          */
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002124:	625a      	str	r2, [r3, #36]	; 0x24
    p_tcb->StkSize       = stk_size;                        /* Save the stack size (in number of CPU_STK elements)    */
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800212a:	641a      	str	r2, [r3, #64]	; 0x40
#endif
    p_tcb->Opt           = opt;                             /* Save task options                                      */
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002132:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if OS_CFG_TASK_REG_TBL_SIZE > 0u
    for (reg_nbr = 0u; reg_nbr < OS_CFG_TASK_REG_TBL_SIZE; reg_nbr++) {
 8002136:	2300      	movs	r3, #0
 8002138:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800213c:	e00b      	b.n	8002156 <OSTaskCreate+0x17e>
        p_tcb->RegTbl[reg_nbr] = (OS_REG)0;
 800213e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	321e      	adds	r2, #30
 8002146:	2100      	movs	r1, #0
 8002148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    p_tcb->StkSize       = stk_size;                        /* Save the stack size (in number of CPU_STK elements)    */
#endif
    p_tcb->Opt           = opt;                             /* Save task options                                      */

#if OS_CFG_TASK_REG_TBL_SIZE > 0u
    for (reg_nbr = 0u; reg_nbr < OS_CFG_TASK_REG_TBL_SIZE; reg_nbr++) {
 800214c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002150:	3301      	adds	r3, #1
 8002152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002156:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800215a:	2b00      	cmp	r3, #0
 800215c:	d0ef      	beq.n	800213e <OSTaskCreate+0x166>
        p_tcb->RegTbl[reg_nbr] = (OS_REG)0;
    }
#endif

#if OS_CFG_TASK_Q_EN > 0u
    OS_MsgQInit(&p_tcb->MsgQ,                               /* Initialize the task's message queue                    */
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	3360      	adds	r3, #96	; 0x60
 8002162:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002166:	4611      	mov	r1, r2
 8002168:	4618      	mov	r0, r3
 800216a:	f000 fdf3 	bl	8002d54 <OS_MsgQInit>
                q_size);
#else
    (void)&q_size;
#endif

    OSTaskCreateHook(p_tcb);                                /* Call user defined hook                                 */
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f003 fd64 	bl	8005c3c <OSTaskCreateHook>
        p_tcb->TLS_Tbl[id] = (OS_TLS)0;
    }
    OS_TLS_TaskCreate(p_tcb);                               /* Call TLS hook                                          */
#endif
                                                            /* --------------- ADD TASK TO READY LIST --------------- */
    OS_CRITICAL_ENTER();
 8002174:	f7fe f8b4 	bl	80002e0 <CPU_SR_Save>
 8002178:	61b8      	str	r0, [r7, #24]
    OS_PrioInsert(p_tcb->Prio);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002180:	4618      	mov	r0, r3
 8002182:	f002 fc9d 	bl	8004ac0 <OS_PrioInsert>
    OS_RdyListInsertTail(p_tcb);
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f001 fd14 	bl	8003bb4 <OS_RdyListInsertTail>

#if OS_CFG_DBG_EN > 0u
    OS_TaskDbgListAdd(p_tcb);
 800218c:	68f8      	ldr	r0, [r7, #12]
 800218e:	f000 fa01 	bl	8002594 <OS_TaskDbgListAdd>
#endif

    OSTaskQty++;                                            /* Increment the #tasks counter                           */
 8002192:	4b0e      	ldr	r3, [pc, #56]	; (80021cc <OSTaskCreate+0x1f4>)
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	3301      	adds	r3, #1
 8002198:	b29a      	uxth	r2, r3
 800219a:	4b0c      	ldr	r3, [pc, #48]	; (80021cc <OSTaskCreate+0x1f4>)
 800219c:	801a      	strh	r2, [r3, #0]

    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Return if multitasking has not started                 */
 800219e:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <OSTaskCreate+0x1f8>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d003      	beq.n	80021ae <OSTaskCreate+0x1d6>
        OS_CRITICAL_EXIT();
 80021a6:	69b8      	ldr	r0, [r7, #24]
 80021a8:	f7fe f89e 	bl	80002e8 <CPU_SR_Restore>
        return;
 80021ac:	e004      	b.n	80021b8 <OSTaskCreate+0x1e0>
    }

    OS_CRITICAL_EXIT_NO_SCHED();
 80021ae:	69b8      	ldr	r0, [r7, #24]
 80021b0:	f7fe f89a 	bl	80002e8 <CPU_SR_Restore>

    OSSched();
 80021b4:	f001 f848 	bl	8003248 <OSSched>
}
 80021b8:	3728      	adds	r7, #40	; 0x28
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20002608 	.word	0x20002608
 80021c4:	0800df48 	.word	0x0800df48
 80021c8:	200026d8 	.word	0x200026d8
 80021cc:	2000260a 	.word	0x2000260a
 80021d0:	20002381 	.word	0x20002381

080021d4 <OSTaskResume>:
*/

#if OS_CFG_TASK_SUSPEND_EN > 0u
void  OSTaskResume (OS_TCB  *p_tcb,
                    OS_ERR  *p_err)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
    CPU_SR_ALLOC();
 80021de:	2300      	movs	r3, #0
 80021e0:	60fb      	str	r3, [r7, #12]
    }
#endif

#if (OS_CFG_ISR_POST_DEFERRED_EN   == 0u) && \
    (OS_CFG_CALLED_FROM_ISR_CHK_EN >  0u)
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 80021e2:	4b13      	ldr	r3, [pc, #76]	; (8002230 <OSTaskResume+0x5c>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d004      	beq.n	80021f4 <OSTaskResume+0x20>
       *p_err = OS_ERR_TASK_RESUME_ISR;
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	f247 1255 	movw	r2, #29013	; 0x7155
 80021f0:	801a      	strh	r2, [r3, #0]
        return;
 80021f2:	e019      	b.n	8002228 <OSTaskResume+0x54>
    }
#endif


    CPU_CRITICAL_ENTER();
 80021f4:	f7fe f874 	bl	80002e0 <CPU_SR_Save>
 80021f8:	60f8      	str	r0, [r7, #12]
#if OS_CFG_ARG_CHK_EN > 0u
    if ((p_tcb == (OS_TCB *)0) ||                           /* We cannot resume 'self'                                */
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d004      	beq.n	800220a <OSTaskResume+0x36>
        (p_tcb == OSTCBCurPtr)) {
 8002200:	4b0c      	ldr	r3, [pc, #48]	; (8002234 <OSTaskResume+0x60>)
 8002202:	681b      	ldr	r3, [r3, #0]
#endif


    CPU_CRITICAL_ENTER();
#if OS_CFG_ARG_CHK_EN > 0u
    if ((p_tcb == (OS_TCB *)0) ||                           /* We cannot resume 'self'                                */
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	429a      	cmp	r2, r3
 8002208:	d107      	bne.n	800221a <OSTaskResume+0x46>
        (p_tcb == OSTCBCurPtr)) {
        CPU_CRITICAL_EXIT();
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f7fe f86c 	bl	80002e8 <CPU_SR_Restore>
       *p_err  = OS_ERR_TASK_RESUME_SELF;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	f247 1257 	movw	r2, #29015	; 0x7157
 8002216:	801a      	strh	r2, [r3, #0]
        return;
 8002218:	e006      	b.n	8002228 <OSTaskResume+0x54>
    }
#endif
    CPU_CRITICAL_EXIT();
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f7fe f864 	bl	80002e8 <CPU_SR_Restore>
                    (OS_ERR    *)p_err);
        return;
    }
#endif

    OS_TaskResume(p_tcb, p_err);
 8002220:	6839      	ldr	r1, [r7, #0]
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 fac6 	bl	80027b4 <OS_TaskResume>

#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_TASK_RESUME(p_tcb);                            /* Record the event.                                      */
#endif
}
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20002608 	.word	0x20002608
 8002234:	200025dc 	.word	0x200025dc

08002238 <OSTaskSemPend>:

OS_SEM_CTR  OSTaskSemPend (OS_TICK   timeout,
                           OS_OPT    opt,
                           CPU_TS   *p_ts,
                           OS_ERR   *p_err)
{
 8002238:	b590      	push	{r4, r7, lr}
 800223a:	b087      	sub	sp, #28
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	607a      	str	r2, [r7, #4]
 8002242:	603b      	str	r3, [r7, #0]
 8002244:	460b      	mov	r3, r1
 8002246:	817b      	strh	r3, [r7, #10]
    OS_SEM_CTR    ctr;
    CPU_SR_ALLOC();
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]
        return ((OS_SEM_CTR)0);
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 800224c:	4b6f      	ldr	r3, [pc, #444]	; (800240c <OSTaskSemPend+0x1d4>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d005      	beq.n	8002260 <OSTaskSemPend+0x28>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_SEM_PEND_FAILED(OSTCBCurPtr);         /* Record the event.                                      */
#endif
       *p_err = OS_ERR_PEND_ISR;
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	f246 12ae 	movw	r2, #25006	; 0x61ae
 800225a:	801a      	strh	r2, [r3, #0]
        return ((OS_SEM_CTR)0);
 800225c:	2300      	movs	r3, #0
 800225e:	e0d0      	b.n	8002402 <OSTaskSemPend+0x1ca>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    switch (opt) {                                          /* Validate 'opt'                                         */
 8002260:	897b      	ldrh	r3, [r7, #10]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d008      	beq.n	8002278 <OSTaskSemPend+0x40>
 8002266:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800226a:	d005      	beq.n	8002278 <OSTaskSemPend+0x40>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_TASK_SEM_PEND_FAILED(OSTCBCurPtr);    /* Record the event.                                      */
#endif
            *p_err = OS_ERR_OPT_INVALID;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	f645 6225 	movw	r2, #24101	; 0x5e25
 8002272:	801a      	strh	r2, [r3, #0]
             return ((OS_SEM_CTR)0);
 8002274:	2300      	movs	r3, #0
 8002276:	e0c4      	b.n	8002402 <OSTaskSemPend+0x1ca>

#if OS_CFG_ARG_CHK_EN > 0u
    switch (opt) {                                          /* Validate 'opt'                                         */
        case OS_OPT_PEND_BLOCKING:
        case OS_OPT_PEND_NON_BLOCKING:
             break;
 8002278:	bf00      	nop
            *p_err = OS_ERR_OPT_INVALID;
             return ((OS_SEM_CTR)0);
    }
#endif

    if (p_ts != (CPU_TS *)0) {
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d002      	beq.n	8002286 <OSTaskSemPend+0x4e>
       *p_ts  = (CPU_TS  )0;                                /* Initialize the returned timestamp                      */
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
    }

    CPU_CRITICAL_ENTER();
 8002286:	f7fe f82b 	bl	80002e0 <CPU_SR_Save>
 800228a:	6178      	str	r0, [r7, #20]
    if (OSTCBCurPtr->SemCtr > (OS_SEM_CTR)0) {              /* See if task already been signaled                      */
 800228c:	4b60      	ldr	r3, [pc, #384]	; (8002410 <OSTaskSemPend+0x1d8>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002292:	2b00      	cmp	r3, #0
 8002294:	d035      	beq.n	8002302 <OSTaskSemPend+0xca>
        OSTCBCurPtr->SemCtr--;
 8002296:	4b5e      	ldr	r3, [pc, #376]	; (8002410 <OSTaskSemPend+0x1d8>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800229c:	3a01      	subs	r2, #1
 800229e:	64da      	str	r2, [r3, #76]	; 0x4c
        ctr    = OSTCBCurPtr->SemCtr;
 80022a0:	4b5b      	ldr	r3, [pc, #364]	; (8002410 <OSTaskSemPend+0x1d8>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a6:	613b      	str	r3, [r7, #16]
        if (p_ts != (CPU_TS *)0) {
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d004      	beq.n	80022b8 <OSTaskSemPend+0x80>
           *p_ts  = OSTCBCurPtr->TS;
 80022ae:	4b58      	ldr	r3, [pc, #352]	; (8002410 <OSTaskSemPend+0x1d8>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	601a      	str	r2, [r3, #0]
        }
#if OS_CFG_TASK_PROFILE_EN > 0u
        OSTCBCurPtr->SemPendTime = OS_TS_GET() - OSTCBCurPtr->TS;
 80022b8:	4b55      	ldr	r3, [pc, #340]	; (8002410 <OSTaskSemPend+0x1d8>)
 80022ba:	681c      	ldr	r4, [r3, #0]
 80022bc:	f004 fed6 	bl	800706c <CPU_TS_TmrRd>
 80022c0:	4602      	mov	r2, r0
 80022c2:	4b53      	ldr	r3, [pc, #332]	; (8002410 <OSTaskSemPend+0x1d8>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        if (OSTCBCurPtr->SemPendTimeMax < OSTCBCurPtr->SemPendTime) {
 80022ce:	4b50      	ldr	r3, [pc, #320]	; (8002410 <OSTaskSemPend+0x1d8>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80022d6:	4b4e      	ldr	r3, [pc, #312]	; (8002410 <OSTaskSemPend+0x1d8>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80022de:	429a      	cmp	r2, r3
 80022e0:	d207      	bcs.n	80022f2 <OSTaskSemPend+0xba>
            OSTCBCurPtr->SemPendTimeMax = OSTCBCurPtr->SemPendTime;
 80022e2:	4b4b      	ldr	r3, [pc, #300]	; (8002410 <OSTaskSemPend+0x1d8>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a4a      	ldr	r2, [pc, #296]	; (8002410 <OSTaskSemPend+0x1d8>)
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 80022ee:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        }
#endif
        CPU_CRITICAL_EXIT();
 80022f2:	6978      	ldr	r0, [r7, #20]
 80022f4:	f7fd fff8 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_SEM_PEND(OSTCBCurPtr);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_NONE;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	2200      	movs	r2, #0
 80022fc:	801a      	strh	r2, [r3, #0]
        return (ctr);
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	e07f      	b.n	8002402 <OSTaskSemPend+0x1ca>
    }

    if ((opt & OS_OPT_PEND_NON_BLOCKING) != (OS_OPT)0) {    /* Caller wants to block if not available?                */
 8002302:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002306:	2b00      	cmp	r3, #0
 8002308:	da08      	bge.n	800231c <OSTaskSemPend+0xe4>
        CPU_CRITICAL_EXIT();        
 800230a:	6978      	ldr	r0, [r7, #20]
 800230c:	f7fd ffec 	bl	80002e8 <CPU_SR_Restore>
       *p_err = OS_ERR_PEND_WOULD_BLOCK;                    /* No                                                     */
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	f246 12b0 	movw	r2, #25008	; 0x61b0
 8002316:	801a      	strh	r2, [r3, #0]
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_SEM_PEND_FAILED(OSTCBCurPtr);         /* Record the event.                                      */
#endif
        return ((OS_SEM_CTR)0);
 8002318:	2300      	movs	r3, #0
 800231a:	e072      	b.n	8002402 <OSTaskSemPend+0x1ca>
    } else {                                                /* Yes                                                    */
        if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /* Can't pend when the scheduler is locked                */
 800231c:	4b3d      	ldr	r3, [pc, #244]	; (8002414 <OSTaskSemPend+0x1dc>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d008      	beq.n	8002336 <OSTaskSemPend+0xfe>
            CPU_CRITICAL_EXIT();
 8002324:	6978      	ldr	r0, [r7, #20]
 8002326:	f7fd ffdf 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
            TRACE_OS_TASK_SEM_PEND_FAILED(OSTCBCurPtr);     /* Record the event.                                      */
#endif
           *p_err = OS_ERR_SCHED_LOCKED;
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	f646 5263 	movw	r2, #28003	; 0x6d63
 8002330:	801a      	strh	r2, [r3, #0]
            return ((OS_SEM_CTR)0);
 8002332:	2300      	movs	r3, #0
 8002334:	e065      	b.n	8002402 <OSTaskSemPend+0x1ca>
        }
    }
                                                            /* Lock the scheduler/re-enable interrupts                */
    OS_CRITICAL_ENTER_CPU_EXIT();
    OS_Pend((OS_PEND_DATA *)0,                              /* Block task pending on Signal                           */
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2207      	movs	r2, #7
 800233a:	2100      	movs	r1, #0
 800233c:	2000      	movs	r0, #0
 800233e:	f001 f8ef 	bl	8003520 <OS_Pend>
            (OS_PEND_OBJ  *)0,
            (OS_STATE      )OS_TASK_PEND_ON_TASK_SEM,
            (OS_TICK       )timeout);
    OS_CRITICAL_EXIT_NO_SCHED();
 8002342:	6978      	ldr	r0, [r7, #20]
 8002344:	f7fd ffd0 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_TASK_SEM_PEND_BLOCK(OSTCBCurPtr);              /* Record the event.                                      */
#endif
    OSSched();                                              /* Find next highest priority task ready to run           */
 8002348:	f000 ff7e 	bl	8003248 <OSSched>

    CPU_CRITICAL_ENTER();
 800234c:	f7fd ffc8 	bl	80002e0 <CPU_SR_Save>
 8002350:	6178      	str	r0, [r7, #20]
    switch (OSTCBCurPtr->PendStatus) {                      /* See if we timed-out or aborted                         */
 8002352:	4b2f      	ldr	r3, [pc, #188]	; (8002410 <OSTaskSemPend+0x1d8>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800235a:	2b01      	cmp	r3, #1
 800235c:	d02c      	beq.n	80023b8 <OSTaskSemPend+0x180>
 800235e:	2b03      	cmp	r3, #3
 8002360:	d037      	beq.n	80023d2 <OSTaskSemPend+0x19a>
 8002362:	2b00      	cmp	r3, #0
 8002364:	d140      	bne.n	80023e8 <OSTaskSemPend+0x1b0>
        case OS_STATUS_PEND_OK:
             if (p_ts != (CPU_TS *)0) {
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d021      	beq.n	80023b0 <OSTaskSemPend+0x178>
                *p_ts                    =  OSTCBCurPtr->TS;
 800236c:	4b28      	ldr	r3, [pc, #160]	; (8002410 <OSTaskSemPend+0x1d8>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	601a      	str	r2, [r3, #0]
#if OS_CFG_TASK_PROFILE_EN > 0u
                OSTCBCurPtr->SemPendTime = OS_TS_GET() - OSTCBCurPtr->TS;
 8002376:	4b26      	ldr	r3, [pc, #152]	; (8002410 <OSTaskSemPend+0x1d8>)
 8002378:	681c      	ldr	r4, [r3, #0]
 800237a:	f004 fe77 	bl	800706c <CPU_TS_TmrRd>
 800237e:	4602      	mov	r2, r0
 8002380:	4b23      	ldr	r3, [pc, #140]	; (8002410 <OSTaskSemPend+0x1d8>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
                if (OSTCBCurPtr->SemPendTimeMax < OSTCBCurPtr->SemPendTime) {
 800238c:	4b20      	ldr	r3, [pc, #128]	; (8002410 <OSTaskSemPend+0x1d8>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002394:	4b1e      	ldr	r3, [pc, #120]	; (8002410 <OSTaskSemPend+0x1d8>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800239c:	429a      	cmp	r2, r3
 800239e:	d207      	bcs.n	80023b0 <OSTaskSemPend+0x178>
                    OSTCBCurPtr->SemPendTimeMax = OSTCBCurPtr->SemPendTime;
 80023a0:	4b1b      	ldr	r3, [pc, #108]	; (8002410 <OSTaskSemPend+0x1d8>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a1a      	ldr	r2, [pc, #104]	; (8002410 <OSTaskSemPend+0x1d8>)
 80023a6:	6812      	ldr	r2, [r2, #0]
 80023a8:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 80023ac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#endif
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_TASK_SEM_PEND(OSTCBCurPtr);           /* Record the event.                                      */
#endif
            *p_err = OS_ERR_NONE;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	2200      	movs	r2, #0
 80023b4:	801a      	strh	r2, [r3, #0]
             break;
 80023b6:	e01c      	b.n	80023f2 <OSTaskSemPend+0x1ba>

        case OS_STATUS_PEND_ABORT:
             if (p_ts != (CPU_TS *)0) {
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d004      	beq.n	80023c8 <OSTaskSemPend+0x190>
                *p_ts  =  OSTCBCurPtr->TS;
 80023be:	4b14      	ldr	r3, [pc, #80]	; (8002410 <OSTaskSemPend+0x1d8>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_TASK_SEM_PEND_FAILED(OSTCBCurPtr);    /* Record the event.                                      */
#endif
            *p_err = OS_ERR_PEND_ABORT;                     /* Indicate that we aborted                               */
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	f246 12a9 	movw	r2, #25001	; 0x61a9
 80023ce:	801a      	strh	r2, [r3, #0]
             break;
 80023d0:	e00f      	b.n	80023f2 <OSTaskSemPend+0x1ba>

        case OS_STATUS_PEND_TIMEOUT:
             if (p_ts != (CPU_TS *)0) {
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d002      	beq.n	80023de <OSTaskSemPend+0x1a6>
                *p_ts  = (CPU_TS  )0;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_TASK_SEM_PEND_FAILED(OSTCBCurPtr);    /* Record the event.                                      */
#endif
            *p_err = OS_ERR_TIMEOUT;                        /* Indicate that we didn't get event within TO            */
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	f247 22d9 	movw	r2, #29401	; 0x72d9
 80023e4:	801a      	strh	r2, [r3, #0]
             break;
 80023e6:	e004      	b.n	80023f2 <OSTaskSemPend+0x1ba>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_TASK_SEM_PEND_FAILED(OSTCBCurPtr);    /* Record the event.                                      */
#endif
            *p_err = OS_ERR_STATUS_INVALID;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	f646 622e 	movw	r2, #28206	; 0x6e2e
 80023ee:	801a      	strh	r2, [r3, #0]
             break;
 80023f0:	bf00      	nop
    }
    ctr = OSTCBCurPtr->SemCtr;
 80023f2:	4b07      	ldr	r3, [pc, #28]	; (8002410 <OSTaskSemPend+0x1d8>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f8:	613b      	str	r3, [r7, #16]
    CPU_CRITICAL_EXIT();
 80023fa:	6978      	ldr	r0, [r7, #20]
 80023fc:	f7fd ff74 	bl	80002e8 <CPU_SR_Restore>
    return (ctr);
 8002400:	693b      	ldr	r3, [r7, #16]
}
 8002402:	4618      	mov	r0, r3
 8002404:	371c      	adds	r7, #28
 8002406:	46bd      	mov	sp, r7
 8002408:	bd90      	pop	{r4, r7, pc}
 800240a:	bf00      	nop
 800240c:	20002608 	.word	0x20002608
 8002410:	200025dc 	.word	0x200025dc
 8002414:	20002370 	.word	0x20002370

08002418 <OSTaskSemPost>:
*/

OS_SEM_CTR  OSTaskSemPost (OS_TCB  *p_tcb,
                           OS_OPT   opt,
                           OS_ERR  *p_err)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	460b      	mov	r3, r1
 8002422:	607a      	str	r2, [r7, #4]
 8002424:	817b      	strh	r3, [r7, #10]
        return ((OS_SEM_CTR)0);
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    switch (opt) {                                          /* Validate 'opt'                                         */
 8002426:	897b      	ldrh	r3, [r7, #10]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d008      	beq.n	800243e <OSTaskSemPost+0x26>
 800242c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002430:	d005      	beq.n	800243e <OSTaskSemPost+0x26>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_TASK_SEM_POST_FAILED(p_tcb);          /* Record the event.                                      */
#endif
            *p_err =  OS_ERR_OPT_INVALID;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f645 6225 	movw	r2, #24101	; 0x5e25
 8002438:	801a      	strh	r2, [r3, #0]
             return ((OS_SEM_CTR)0u);
 800243a:	2300      	movs	r3, #0
 800243c:	e00b      	b.n	8002456 <OSTaskSemPost+0x3e>

#if OS_CFG_ARG_CHK_EN > 0u
    switch (opt) {                                          /* Validate 'opt'                                         */
        case OS_OPT_POST_NONE:
        case OS_OPT_POST_NO_SCHED:
             break;
 800243e:	bf00      	nop
            *p_err =  OS_ERR_OPT_INVALID;
             return ((OS_SEM_CTR)0u);
    }
#endif

    ts = OS_TS_GET();                                       /* Get timestamp                                          */
 8002440:	f004 fe14 	bl	800706c <CPU_TS_TmrRd>
 8002444:	6178      	str	r0, [r7, #20]

#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_TASK_SEM_POST(p_tcb);                          /* Record the event.                                      */
#endif

    ctr = OS_TaskSemPost(p_tcb,
 8002446:	8979      	ldrh	r1, [r7, #10]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f000 fa57 	bl	8002900 <OS_TaskSemPost>
 8002452:	6138      	str	r0, [r7, #16]
                         opt,
                         ts,
                         p_err);

    return (ctr);
 8002454:	693b      	ldr	r3, [r7, #16]
}
 8002456:	4618      	mov	r0, r3
 8002458:	3718      	adds	r7, #24
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop

08002460 <OSTaskStkChk>:
#if OS_CFG_STAT_TASK_STK_CHK_EN > 0u
void  OSTaskStkChk (OS_TCB        *p_tcb,
                    CPU_STK_SIZE  *p_free,
                    CPU_STK_SIZE  *p_used,
                    OS_ERR        *p_err)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b088      	sub	sp, #32
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
 800246c:	603b      	str	r3, [r7, #0]
    CPU_STK_SIZE  free_stk;
    CPU_STK      *p_stk;
    CPU_SR_ALLOC();
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* See if trying to check stack from ISR                  */
 8002472:	4b35      	ldr	r3, [pc, #212]	; (8002548 <OSTaskStkChk+0xe8>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d004      	beq.n	8002484 <OSTaskStkChk+0x24>
       *p_err = OS_ERR_TASK_STK_CHK_ISR;
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	f247 1259 	movw	r2, #29017	; 0x7159
 8002480:	801a      	strh	r2, [r3, #0]
        return;
 8002482:	e05e      	b.n	8002542 <OSTaskStkChk+0xe2>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_free == (CPU_STK_SIZE*)0) {                       /* User must specify valid destinations for the sizes     */
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d104      	bne.n	8002494 <OSTaskStkChk+0x34>
       *p_err  = OS_ERR_PTR_INVALID;
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	f246 22d5 	movw	r2, #25301	; 0x62d5
 8002490:	801a      	strh	r2, [r3, #0]
        return;
 8002492:	e056      	b.n	8002542 <OSTaskStkChk+0xe2>
    }

    if (p_used == (CPU_STK_SIZE*)0) {
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d104      	bne.n	80024a4 <OSTaskStkChk+0x44>
       *p_err  = OS_ERR_PTR_INVALID;
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	f246 22d5 	movw	r2, #25301	; 0x62d5
 80024a0:	801a      	strh	r2, [r3, #0]
        return;
 80024a2:	e04e      	b.n	8002542 <OSTaskStkChk+0xe2>
    }
#endif

    CPU_CRITICAL_ENTER();
 80024a4:	f7fd ff1c 	bl	80002e0 <CPU_SR_Save>
 80024a8:	6178      	str	r0, [r7, #20]
    if (p_tcb == (OS_TCB *)0) {                             /* Check the stack of the current task?                   */
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d102      	bne.n	80024b6 <OSTaskStkChk+0x56>
        p_tcb = OSTCBCurPtr;                                /* Yes                                                    */
 80024b0:	4b26      	ldr	r3, [pc, #152]	; (800254c <OSTaskStkChk+0xec>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	60fb      	str	r3, [r7, #12]
    }

    if (p_tcb->StkPtr == (CPU_STK*)0) {                     /* Make sure task exist                                   */
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10d      	bne.n	80024da <OSTaskStkChk+0x7a>
        CPU_CRITICAL_EXIT();
 80024be:	6978      	ldr	r0, [r7, #20]
 80024c0:	f7fd ff12 	bl	80002e8 <CPU_SR_Restore>
       *p_free = (CPU_STK_SIZE)0;
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
       *p_used = (CPU_STK_SIZE)0;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
       *p_err  =  OS_ERR_TASK_NOT_EXIST;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	f247 1252 	movw	r2, #29010	; 0x7152
 80024d6:	801a      	strh	r2, [r3, #0]
        return;
 80024d8:	e033      	b.n	8002542 <OSTaskStkChk+0xe2>
    }

    if ((p_tcb->Opt & OS_OPT_TASK_STK_CHK) == (OS_OPT)0) {  /* Make sure stack checking option is set                 */
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10d      	bne.n	8002504 <OSTaskStkChk+0xa4>
        CPU_CRITICAL_EXIT();
 80024e8:	6978      	ldr	r0, [r7, #20]
 80024ea:	f7fd fefd 	bl	80002e8 <CPU_SR_Restore>
       *p_free = (CPU_STK_SIZE)0;
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
       *p_used = (CPU_STK_SIZE)0;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]
       *p_err  =  OS_ERR_TASK_OPT;
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	f247 1254 	movw	r2, #29012	; 0x7154
 8002500:	801a      	strh	r2, [r3, #0]
        return;
 8002502:	e01e      	b.n	8002542 <OSTaskStkChk+0xe2>
    }
    CPU_CRITICAL_EXIT();
 8002504:	6978      	ldr	r0, [r7, #20]
 8002506:	f7fd feef 	bl	80002e8 <CPU_SR_Restore>

    free_stk  = 0u;
 800250a:	2300      	movs	r3, #0
 800250c:	61fb      	str	r3, [r7, #28]
#if CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO
    p_stk = p_tcb->StkBasePtr;                              /* Start at the lowest memory and go up                   */
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002512:	61bb      	str	r3, [r7, #24]
    while (*p_stk == (CPU_STK)0) {                          /* Compute the number of zero entries on the stk          */
 8002514:	e005      	b.n	8002522 <OSTaskStkChk+0xc2>
        p_stk++;
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	3304      	adds	r3, #4
 800251a:	61bb      	str	r3, [r7, #24]
        free_stk++;
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	3301      	adds	r3, #1
 8002520:	61fb      	str	r3, [r7, #28]
    CPU_CRITICAL_EXIT();

    free_stk  = 0u;
#if CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO
    p_stk = p_tcb->StkBasePtr;                              /* Start at the lowest memory and go up                   */
    while (*p_stk == (CPU_STK)0) {                          /* Compute the number of zero entries on the stk          */
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0f5      	beq.n	8002516 <OSTaskStkChk+0xb6>
    while (*p_stk == (CPU_STK)0) {
        free_stk++;
        p_stk--;
    }
#endif
   *p_free = free_stk;
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	69fa      	ldr	r2, [r7, #28]
 800252e:	601a      	str	r2, [r3, #0]
   *p_used = (p_tcb->StkSize - free_stk);                   /* Compute number of entries used on the stack            */
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	1ad2      	subs	r2, r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	601a      	str	r2, [r3, #0]
   *p_err  = OS_ERR_NONE;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	2200      	movs	r2, #0
 8002540:	801a      	strh	r2, [r3, #0]
}
 8002542:	3720      	adds	r7, #32
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	20002608 	.word	0x20002608
 800254c:	200025dc 	.word	0x200025dc

08002550 <OSTaskSuspend>:
*/

#if OS_CFG_TASK_SUSPEND_EN > 0u
void   OSTaskSuspend (OS_TCB  *p_tcb,
                      OS_ERR  *p_err)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
    }
#endif

#if (OS_CFG_ISR_POST_DEFERRED_EN   == 0u) && \
    (OS_CFG_CALLED_FROM_ISR_CHK_EN >  0u)
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 800255a:	4b0c      	ldr	r3, [pc, #48]	; (800258c <OSTaskSuspend+0x3c>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d004      	beq.n	800256c <OSTaskSuspend+0x1c>
       *p_err = OS_ERR_TASK_SUSPEND_ISR;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	f247 125d 	movw	r2, #29021	; 0x715d
 8002568:	801a      	strh	r2, [r3, #0]
        return;
 800256a:	e00c      	b.n	8002586 <OSTaskSuspend+0x36>
    }
#endif

    if (p_tcb == &OSIdleTaskTCB) {                          /* Make sure not suspending the idle task                 */
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a08      	ldr	r2, [pc, #32]	; (8002590 <OSTaskSuspend+0x40>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d104      	bne.n	800257e <OSTaskSuspend+0x2e>
       *p_err = OS_ERR_TASK_SUSPEND_IDLE;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	f247 125b 	movw	r2, #29019	; 0x715b
 800257a:	801a      	strh	r2, [r3, #0]
        return;
 800257c:	e003      	b.n	8002586 <OSTaskSuspend+0x36>
                    (OS_ERR    *)p_err);
        return;
    }
#endif

    OS_TaskSuspend(p_tcb, p_err);
 800257e:	6839      	ldr	r1, [r7, #0]
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 fa51 	bl	8002a28 <OS_TaskSuspend>
}
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	20002608 	.word	0x20002608
 8002590:	200026d8 	.word	0x200026d8

08002594 <OS_TaskDbgListAdd>:
************************************************************************************************************************
*/

#if OS_CFG_DBG_EN > 0u
void  OS_TaskDbgListAdd (OS_TCB  *p_tcb)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
    p_tcb->DbgPrevPtr                = (OS_TCB *)0;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    if (OSTaskDbgListPtr == (OS_TCB *)0) {
 80025a4:	4b0d      	ldr	r3, [pc, #52]	; (80025dc <OS_TaskDbgListAdd+0x48>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d104      	bne.n	80025b6 <OS_TaskDbgListAdd+0x22>
        p_tcb->DbgNextPtr            = (OS_TCB *)0;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80025b4:	e009      	b.n	80025ca <OS_TaskDbgListAdd+0x36>
    } else {
        p_tcb->DbgNextPtr            =  OSTaskDbgListPtr;
 80025b6:	4b09      	ldr	r3, [pc, #36]	; (80025dc <OS_TaskDbgListAdd+0x48>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        OSTaskDbgListPtr->DbgPrevPtr =  p_tcb;
 80025c0:	4b06      	ldr	r3, [pc, #24]	; (80025dc <OS_TaskDbgListAdd+0x48>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    }
    OSTaskDbgListPtr                 =  p_tcb;
 80025ca:	4a04      	ldr	r2, [pc, #16]	; (80025dc <OS_TaskDbgListAdd+0x48>)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6013      	str	r3, [r2, #0]
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bc80      	pop	{r7}
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	200025f0 	.word	0x200025f0

080025e0 <OS_TaskInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TaskInit (OS_ERR  *p_err)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSTaskDbgListPtr = (OS_TCB      *)0;
 80025e8:	4b08      	ldr	r3, [pc, #32]	; (800260c <OS_TaskInit+0x2c>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
#endif

    OSTaskQty        = (OS_OBJ_QTY   )0;                    /* Clear the number of tasks                              */
 80025ee:	4b08      	ldr	r3, [pc, #32]	; (8002610 <OS_TaskInit+0x30>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	801a      	strh	r2, [r3, #0]
    OSTaskCtxSwCtr   = (OS_CTX_SW_CTR)0;                    /* Clear the context switch counter                       */
 80025f4:	4b07      	ldr	r3, [pc, #28]	; (8002614 <OS_TaskInit+0x34>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]

   *p_err            = OS_ERR_NONE;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	801a      	strh	r2, [r3, #0]
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	bc80      	pop	{r7}
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	200025f0 	.word	0x200025f0
 8002610:	2000260a 	.word	0x2000260a
 8002614:	20002604 	.word	0x20002604

08002618 <OS_TaskInitTCB>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TaskInitTCB (OS_TCB  *p_tcb)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
#if OS_CFG_TASK_PROFILE_EN > 0u
    CPU_TS      ts;
#endif


    p_tcb->StkPtr             = (CPU_STK       *)0;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u))
    p_tcb->StkLimitPtr        = (CPU_STK       *)0;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	609a      	str	r2, [r3, #8]
#endif

    p_tcb->ExtPtr             = (void          *)0;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	605a      	str	r2, [r3, #4]

    p_tcb->NextPtr            = (OS_TCB        *)0;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	60da      	str	r2, [r3, #12]
    p_tcb->PrevPtr            = (OS_TCB        *)0;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	611a      	str	r2, [r3, #16]

    p_tcb->TickNextPtr        = (OS_TCB        *)0;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	615a      	str	r2, [r3, #20]
    p_tcb->TickPrevPtr        = (OS_TCB        *)0;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	619a      	str	r2, [r3, #24]
    p_tcb->TickListPtr        = (OS_TICK_LIST  *)0;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	61da      	str	r2, [r3, #28]

#if OS_CFG_DBG_EN > 0u
    p_tcb->NamePtr            = (CPU_CHAR      *)((void *)"?Task");
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a56      	ldr	r2, [pc, #344]	; (80027ac <OS_TaskInitTCB+0x194>)
 8002654:	621a      	str	r2, [r3, #32]
#endif

#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u))
    p_tcb->StkBasePtr         = (CPU_STK       *)0;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	625a      	str	r2, [r3, #36]	; 0x24
#endif

#if OS_CFG_DBG_EN > 0u
    p_tcb->TaskEntryAddr      = (OS_TASK_PTR    )0;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	629a      	str	r2, [r3, #40]	; 0x28
    p_tcb->TaskEntryArg       = (void          *)0;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	62da      	str	r2, [r3, #44]	; 0x2c
#endif

#if (OS_CFG_PEND_MULTI_EN > 0u)
    p_tcb->PendDataTblPtr     = (OS_PEND_DATA  *)0;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	631a      	str	r2, [r3, #48]	; 0x30
    p_tcb->PendDataTblEntries = (OS_OBJ_QTY     )0u;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
#endif

    p_tcb->TS                 = (CPU_TS         )0u;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	649a      	str	r2, [r3, #72]	; 0x48

#if (OS_MSG_EN > 0u)
    p_tcb->MsgPtr             = (void          *)0;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	659a      	str	r2, [r3, #88]	; 0x58
    p_tcb->MsgSize            = (OS_MSG_SIZE    )0u;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
#endif

#if OS_CFG_TASK_Q_EN > 0u
    OS_MsgQInit(&p_tcb->MsgQ,
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	3360      	adds	r3, #96	; 0x60
 800268e:	2100      	movs	r1, #0
 8002690:	4618      	mov	r0, r3
 8002692:	f000 fb5f 	bl	8002d54 <OS_MsgQInit>
                (OS_MSG_QTY)0u);
#if OS_CFG_TASK_PROFILE_EN > 0u
    p_tcb->MsgQPendTime       = (CPU_TS         )0u;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	671a      	str	r2, [r3, #112]	; 0x70
    p_tcb->MsgQPendTimeMax    = (CPU_TS         )0u;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	675a      	str	r2, [r3, #116]	; 0x74
#endif
#endif

#if OS_CFG_FLAG_EN > 0u
    p_tcb->FlagsPend          = (OS_FLAGS       )0u;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	67da      	str	r2, [r3, #124]	; 0x7c
    p_tcb->FlagsOpt           = (OS_OPT         )0u;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
    p_tcb->FlagsRdy           = (OS_FLAGS       )0u;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

#if OS_CFG_TASK_REG_TBL_SIZE > 0u
    for (reg_id = 0u; reg_id < OS_CFG_TASK_REG_TBL_SIZE; reg_id++) {
 80026b8:	2300      	movs	r3, #0
 80026ba:	73fb      	strb	r3, [r7, #15]
 80026bc:	e008      	b.n	80026d0 <OS_TaskInitTCB+0xb8>
        p_tcb->RegTbl[reg_id] = (OS_REG)0u;
 80026be:	7bfa      	ldrb	r2, [r7, #15]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	321e      	adds	r2, #30
 80026c4:	2100      	movs	r1, #0
 80026c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    p_tcb->FlagsOpt           = (OS_OPT         )0u;
    p_tcb->FlagsRdy           = (OS_FLAGS       )0u;
#endif

#if OS_CFG_TASK_REG_TBL_SIZE > 0u
    for (reg_id = 0u; reg_id < OS_CFG_TASK_REG_TBL_SIZE; reg_id++) {
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
 80026cc:	3301      	adds	r3, #1
 80026ce:	73fb      	strb	r3, [r7, #15]
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0f3      	beq.n	80026be <OS_TaskInitTCB+0xa6>
    for (id = 0u; id < OS_CFG_TLS_TBL_SIZE; id++) {
        p_tcb->TLS_Tbl[id]    = (OS_TLS)0;
    }
#endif

    p_tcb->SemCtr             = (OS_SEM_CTR     )0u;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	64da      	str	r2, [r3, #76]	; 0x4c
#if OS_CFG_TASK_PROFILE_EN > 0u
    p_tcb->SemPendTime        = (CPU_TS         )0u;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    p_tcb->SemPendTimeMax     = (CPU_TS         )0u;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#endif

#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u))
    p_tcb->StkSize            = (CPU_STK_SIZE   )0u;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	641a      	str	r2, [r3, #64]	; 0x40
#endif


#if OS_CFG_TASK_SUSPEND_EN > 0u
    p_tcb->SuspendCtr         = (OS_NESTING_CTR )0u;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
#endif

#if OS_CFG_STAT_TASK_STK_CHK_EN > 0u
    p_tcb->StkFree            = (CPU_STK_SIZE   )0u;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    p_tcb->StkUsed            = (CPU_STK_SIZE   )0u;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
#endif

    p_tcb->Opt                = (OS_OPT         )0u;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    p_tcb->TickRemain         = (OS_TICK        )0u;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	651a      	str	r2, [r3, #80]	; 0x50
    p_tcb->TickCtrPrev        = (OS_TICK        )0u;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	655a      	str	r2, [r3, #84]	; 0x54
    p_tcb->TimeQuanta         = (OS_TICK        )0u;
    p_tcb->TimeQuantaCtr      = (OS_TICK        )0u;
#endif

#if OS_CFG_TASK_PROFILE_EN > 0u
    p_tcb->CPUUsage           = (OS_CPU_USAGE   )0u;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    p_tcb->CPUUsageMax        = (OS_CPU_USAGE   )0u;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
    p_tcb->CtxSwCtr           = (OS_CTX_SW_CTR  )0u;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    p_tcb->CyclesDelta        = (CPU_TS         )0u;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ts                        = OS_TS_GET();                /* Read the current timestamp and save                    */
 800273e:	f004 fc95 	bl	800706c <CPU_TS_TmrRd>
 8002742:	60b8      	str	r0, [r7, #8]
    p_tcb->CyclesStart        = ts;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    p_tcb->CyclesTotal        = (OS_CYCLES      )0u;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif
#ifdef CPU_CFG_INT_DIS_MEAS_EN
    p_tcb->IntDisTimeMax      = (CPU_TS         )0u;
#endif
#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
    p_tcb->SchedLockTimeMax   = (CPU_TS         )0u;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
#endif

    p_tcb->PendOn             = (OS_STATE       )OS_TASK_PEND_ON_NOTHING;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    p_tcb->PendStatus         = (OS_STATUS      )OS_STATUS_PEND_OK;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    p_tcb->TaskState          = (OS_STATE       )OS_TASK_STATE_RDY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

    p_tcb->Prio               = (OS_PRIO        )OS_PRIO_INIT;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2220      	movs	r2, #32
 8002778:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
#if OS_CFG_MUTEX_EN > 0u
    p_tcb->BasePrio           = (OS_PRIO        )OS_PRIO_INIT;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2220      	movs	r2, #32
 8002780:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    p_tcb->MutexGrpHeadPtr    = (OS_MUTEX      *)0;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	63da      	str	r2, [r3, #60]	; 0x3c
#endif

#if OS_CFG_DBG_EN > 0u
    p_tcb->DbgPrevPtr         = (OS_TCB        *)0;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    p_tcb->DbgNextPtr         = (OS_TCB        *)0;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    p_tcb->DbgNamePtr         = (CPU_CHAR      *)((void *)" ");
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a04      	ldr	r2, [pc, #16]	; (80027b0 <OS_TaskInitTCB+0x198>)
 800279e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
#endif
}
 80027a2:	bf00      	nop
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	0800de24 	.word	0x0800de24
 80027b0:	0800de2c 	.word	0x0800de2c

080027b4 <OS_TaskResume>:
*/

#if OS_CFG_TASK_SUSPEND_EN > 0u
void  OS_TaskResume (OS_TCB  *p_tcb,
                     OS_ERR  *p_err)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
    CPU_SR_ALLOC();
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]


    CPU_CRITICAL_ENTER();
 80027c2:	f7fd fd8d 	bl	80002e0 <CPU_SR_Save>
 80027c6:	60f8      	str	r0, [r7, #12]
   *p_err  = OS_ERR_NONE;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	2200      	movs	r2, #0
 80027cc:	801a      	strh	r2, [r3, #0]
    switch (p_tcb->TaskState) {
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80027d4:	2b07      	cmp	r3, #7
 80027d6:	d872      	bhi.n	80028be <OS_TaskResume+0x10a>
 80027d8:	a201      	add	r2, pc, #4	; (adr r2, 80027e0 <OS_TaskResume+0x2c>)
 80027da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027de:	bf00      	nop
 80027e0:	08002801 	.word	0x08002801
 80027e4:	08002801 	.word	0x08002801
 80027e8:	08002801 	.word	0x08002801
 80027ec:	08002801 	.word	0x08002801
 80027f0:	08002811 	.word	0x08002811
 80027f4:	08002841 	.word	0x08002841
 80027f8:	0800286b 	.word	0x0800286b
 80027fc:	08002895 	.word	0x08002895
        case OS_TASK_STATE_RDY:
        case OS_TASK_STATE_DLY:
        case OS_TASK_STATE_PEND:
        case OS_TASK_STATE_PEND_TIMEOUT:
             CPU_CRITICAL_EXIT();
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f7fd fd71 	bl	80002e8 <CPU_SR_Restore>
            *p_err = OS_ERR_TASK_NOT_SUSPENDED;
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	f247 1253 	movw	r2, #29011	; 0x7153
 800280c:	801a      	strh	r2, [r3, #0]
             break;
 800280e:	e05e      	b.n	80028ce <OS_TaskResume+0x11a>

        case OS_TASK_STATE_SUSPENDED:
             OS_CRITICAL_ENTER_CPU_EXIT();
             p_tcb->SuspendCtr--;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8002816:	3b01      	subs	r3, #1
 8002818:	b2da      	uxtb	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             if (p_tcb->SuspendCtr == (OS_NESTING_CTR)0) {
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8002826:	2b00      	cmp	r3, #0
 8002828:	d106      	bne.n	8002838 <OS_TaskResume+0x84>
                 p_tcb->TaskState = OS_TASK_STATE_RDY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                 OS_RdyListInsert(p_tcb);                            /* Insert the task in the ready list                      */
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f001 f960 	bl	8003af8 <OS_RdyListInsert>
             }
             OS_CRITICAL_EXIT_NO_SCHED();
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f7fd fd55 	bl	80002e8 <CPU_SR_Restore>
             break;
 800283e:	e046      	b.n	80028ce <OS_TaskResume+0x11a>

        case OS_TASK_STATE_DLY_SUSPENDED:
             p_tcb->SuspendCtr--;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8002846:	3b01      	subs	r3, #1
 8002848:	b2da      	uxtb	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             if (p_tcb->SuspendCtr == (OS_NESTING_CTR)0) {
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8002856:	2b00      	cmp	r3, #0
 8002858:	d103      	bne.n	8002862 <OS_TaskResume+0xae>
                 p_tcb->TaskState = OS_TASK_STATE_DLY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             }
             CPU_CRITICAL_EXIT();
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f7fd fd40 	bl	80002e8 <CPU_SR_Restore>
             break;
 8002868:	e031      	b.n	80028ce <OS_TaskResume+0x11a>

        case OS_TASK_STATE_PEND_SUSPENDED:
             p_tcb->SuspendCtr--;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8002870:	3b01      	subs	r3, #1
 8002872:	b2da      	uxtb	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             if (p_tcb->SuspendCtr == (OS_NESTING_CTR)0) {
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8002880:	2b00      	cmp	r3, #0
 8002882:	d103      	bne.n	800288c <OS_TaskResume+0xd8>
                 p_tcb->TaskState = OS_TASK_STATE_PEND;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2202      	movs	r2, #2
 8002888:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             }
             CPU_CRITICAL_EXIT();
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f7fd fd2b 	bl	80002e8 <CPU_SR_Restore>
             break;
 8002892:	e01c      	b.n	80028ce <OS_TaskResume+0x11a>

        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             p_tcb->SuspendCtr--;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800289a:	3b01      	subs	r3, #1
 800289c:	b2da      	uxtb	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             if (p_tcb->SuspendCtr == (OS_NESTING_CTR)0) {
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d103      	bne.n	80028b6 <OS_TaskResume+0x102>
                 p_tcb->TaskState = OS_TASK_STATE_PEND_TIMEOUT;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2203      	movs	r2, #3
 80028b2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             }
             CPU_CRITICAL_EXIT();
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f7fd fd16 	bl	80002e8 <CPU_SR_Restore>
             break;
 80028bc:	e007      	b.n	80028ce <OS_TaskResume+0x11a>

        default:
             CPU_CRITICAL_EXIT();
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f7fd fd12 	bl	80002e8 <CPU_SR_Restore>
            *p_err = OS_ERR_STATE_INVALID;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	f646 622d 	movw	r2, #28205	; 0x6e2d
 80028ca:	801a      	strh	r2, [r3, #0]
             return;
 80028cc:	e001      	b.n	80028d2 <OS_TaskResume+0x11e>
    }

    OSSched();
 80028ce:	f000 fcbb 	bl	8003248 <OSSched>
}
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <OS_TaskReturn>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TaskReturn (void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
    OS_ERR  err;



    OSTaskReturnHook(OSTCBCurPtr);                          /* Call hook to let user decide on what to do             */
 80028de:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <OS_TaskReturn+0x20>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f003 f9bc 	bl	8005c60 <OSTaskReturnHook>
#if OS_CFG_TASK_DEL_EN > 0u
    OSTaskDel((OS_TCB *)0,                                  /* Delete task if it accidentally returns!                */
              (OS_ERR *)&err);
#else
    for (;;) {
        OSTimeDly((OS_TICK )OSCfg_TickRate_Hz,
 80028e8:	4b04      	ldr	r3, [pc, #16]	; (80028fc <OS_TaskReturn+0x24>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	1dba      	adds	r2, r7, #6
 80028ee:	2100      	movs	r1, #0
 80028f0:	4618      	mov	r0, r3
 80028f2:	f002 f933 	bl	8004b5c <OSTimeDly>
                  (OS_OPT  )OS_OPT_TIME_DLY,
                  (OS_ERR *)&err);
    }
 80028f6:	e7f7      	b.n	80028e8 <OS_TaskReturn+0x10>
 80028f8:	200025dc 	.word	0x200025dc
 80028fc:	0800df4c 	.word	0x0800df4c

08002900 <OS_TaskSemPost>:

OS_SEM_CTR  OS_TaskSemPost (OS_TCB  *p_tcb,
                            OS_OPT   opt,
                            CPU_TS   ts,
                            OS_ERR  *p_err)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b088      	sub	sp, #32
 8002904:	af02      	add	r7, sp, #8
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	607a      	str	r2, [r7, #4]
 800290a:	603b      	str	r3, [r7, #0]
 800290c:	460b      	mov	r3, r1
 800290e:	817b      	strh	r3, [r7, #10]
    OS_SEM_CTR  ctr;
    CPU_SR_ALLOC();
 8002910:	2300      	movs	r3, #0
 8002912:	613b      	str	r3, [r7, #16]



    OS_CRITICAL_ENTER();
 8002914:	f7fd fce4 	bl	80002e0 <CPU_SR_Save>
 8002918:	6138      	str	r0, [r7, #16]
    if (p_tcb == (OS_TCB *)0) {                             /* Post signal to 'self'?                                 */
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d102      	bne.n	8002926 <OS_TaskSemPost+0x26>
        p_tcb = OSTCBCurPtr;
 8002920:	4b40      	ldr	r3, [pc, #256]	; (8002a24 <OS_TaskSemPost+0x124>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	60fb      	str	r3, [r7, #12]
    }
    p_tcb->TS = ts;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	649a      	str	r2, [r3, #72]	; 0x48
   *p_err     = OS_ERR_NONE;                                /* Assume we won't have any errors                        */
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	2200      	movs	r2, #0
 8002930:	801a      	strh	r2, [r3, #0]
    switch (p_tcb->TaskState) {
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002938:	2b07      	cmp	r3, #7
 800293a:	d863      	bhi.n	8002a04 <OS_TaskSemPost+0x104>
 800293c:	a201      	add	r2, pc, #4	; (adr r2, 8002944 <OS_TaskSemPost+0x44>)
 800293e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002942:	bf00      	nop
 8002944:	08002965 	.word	0x08002965
 8002948:	08002965 	.word	0x08002965
 800294c:	0800299b 	.word	0x0800299b
 8002950:	0800299b 	.word	0x0800299b
 8002954:	08002965 	.word	0x08002965
 8002958:	08002965 	.word	0x08002965
 800295c:	0800299b 	.word	0x0800299b
 8002960:	0800299b 	.word	0x0800299b
                          return ((OS_SEM_CTR)0);
                      }
                      break;

                 case 4u:
                      if (p_tcb->SemCtr == DEF_INT_32U_MAX_VAL) {
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296c:	d108      	bne.n	8002980 <OS_TaskSemPost+0x80>
                          OS_CRITICAL_EXIT();
 800296e:	6938      	ldr	r0, [r7, #16]
 8002970:	f7fd fcba 	bl	80002e8 <CPU_SR_Restore>
                         *p_err = OS_ERR_SEM_OVF;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	f646 52c5 	movw	r2, #28101	; 0x6dc5
 800297a:	801a      	strh	r2, [r3, #0]
                          return ((OS_SEM_CTR)0);
 800297c:	2300      	movs	r3, #0
 800297e:	e04d      	b.n	8002a1c <OS_TaskSemPost+0x11c>
                      }
                      break;
 8002980:	bf00      	nop

                 default:
                      break;
             }
             p_tcb->SemCtr++;                               /* Task signaled is not pending on anything               */
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002986:	1c5a      	adds	r2, r3, #1
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	64da      	str	r2, [r3, #76]	; 0x4c
             ctr = p_tcb->SemCtr;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002990:	617b      	str	r3, [r7, #20]
             OS_CRITICAL_EXIT();
 8002992:	6938      	ldr	r0, [r7, #16]
 8002994:	f7fd fca8 	bl	80002e8 <CPU_SR_Restore>
             break;
 8002998:	e03f      	b.n	8002a1a <OS_TaskSemPost+0x11a>

        case OS_TASK_STATE_PEND:
        case OS_TASK_STATE_PEND_TIMEOUT:
        case OS_TASK_STATE_PEND_SUSPENDED:
        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             if (p_tcb->PendOn == OS_TASK_PEND_ON_TASK_SEM) {   /* Is task signaled waiting for a signal?             */
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80029a0:	2b07      	cmp	r3, #7
 80029a2:	d114      	bne.n	80029ce <OS_TaskSemPost+0xce>
                 OS_Post((OS_PEND_OBJ *)0,                      /*      Task is pending on signal                     */
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	9300      	str	r3, [sp, #0]
 80029a8:	2300      	movs	r3, #0
 80029aa:	2200      	movs	r2, #0
 80029ac:	68f9      	ldr	r1, [r7, #12]
 80029ae:	2000      	movs	r0, #0
 80029b0:	f000 ffb6 	bl	8003920 <OS_Post>
                         (OS_TCB      *)p_tcb,
                         (void        *)0,
                         (OS_MSG_SIZE  )0u,
                         (CPU_TS       )ts);
                 ctr = p_tcb->SemCtr;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b8:	617b      	str	r3, [r7, #20]
                 OS_CRITICAL_EXIT_NO_SCHED();
 80029ba:	6938      	ldr	r0, [r7, #16]
 80029bc:	f7fd fc94 	bl	80002e8 <CPU_SR_Restore>
                 if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0) {
 80029c0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	db27      	blt.n	8002a18 <OS_TaskSemPost+0x118>
                     OSSched();                                 /* Run the scheduler                                  */
 80029c8:	f000 fc3e 	bl	8003248 <OSSched>
                 }
                 p_tcb->SemCtr++;                           /* No,  Task signaled is NOT pending on semaphore ...     */
                 ctr = p_tcb->SemCtr;                       /*      ... it must be waiting on something else          */
                 OS_CRITICAL_EXIT();
             }
             break;
 80029cc:	e024      	b.n	8002a18 <OS_TaskSemPost+0x118>
                              return ((OS_SEM_CTR)0);
                          }
                          break;

                     case 4u:
                          if (p_tcb->SemCtr == DEF_INT_32U_MAX_VAL) {
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d6:	d108      	bne.n	80029ea <OS_TaskSemPost+0xea>
                              OS_CRITICAL_EXIT();
 80029d8:	6938      	ldr	r0, [r7, #16]
 80029da:	f7fd fc85 	bl	80002e8 <CPU_SR_Restore>
                             *p_err = OS_ERR_SEM_OVF;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	f646 52c5 	movw	r2, #28101	; 0x6dc5
 80029e4:	801a      	strh	r2, [r3, #0]
                              return ((OS_SEM_CTR)0);
 80029e6:	2300      	movs	r3, #0
 80029e8:	e018      	b.n	8002a1c <OS_TaskSemPost+0x11c>
                          }
                          break;
 80029ea:	bf00      	nop

                     default:
                          break;
                 }
                 p_tcb->SemCtr++;                           /* No,  Task signaled is NOT pending on semaphore ...     */
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f0:	1c5a      	adds	r2, r3, #1
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	64da      	str	r2, [r3, #76]	; 0x4c
                 ctr = p_tcb->SemCtr;                       /*      ... it must be waiting on something else          */
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029fa:	617b      	str	r3, [r7, #20]
                 OS_CRITICAL_EXIT();
 80029fc:	6938      	ldr	r0, [r7, #16]
 80029fe:	f7fd fc73 	bl	80002e8 <CPU_SR_Restore>
             }
             break;
 8002a02:	e009      	b.n	8002a18 <OS_TaskSemPost+0x118>

        default:
             OS_CRITICAL_EXIT();
 8002a04:	6938      	ldr	r0, [r7, #16]
 8002a06:	f7fd fc6f 	bl	80002e8 <CPU_SR_Restore>
            *p_err = OS_ERR_STATE_INVALID;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	f646 622d 	movw	r2, #28205	; 0x6e2d
 8002a10:	801a      	strh	r2, [r3, #0]
             ctr   = (OS_SEM_CTR)0;
 8002a12:	2300      	movs	r3, #0
 8002a14:	617b      	str	r3, [r7, #20]
             break;
 8002a16:	e000      	b.n	8002a1a <OS_TaskSemPost+0x11a>
                 }
                 p_tcb->SemCtr++;                           /* No,  Task signaled is NOT pending on semaphore ...     */
                 ctr = p_tcb->SemCtr;                       /*      ... it must be waiting on something else          */
                 OS_CRITICAL_EXIT();
             }
             break;
 8002a18:	bf00      	nop
             OS_CRITICAL_EXIT();
            *p_err = OS_ERR_STATE_INVALID;
             ctr   = (OS_SEM_CTR)0;
             break;
    }
    return (ctr);
 8002a1a:	697b      	ldr	r3, [r7, #20]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	200025dc 	.word	0x200025dc

08002a28 <OS_TaskSuspend>:
*/

#if OS_CFG_TASK_SUSPEND_EN > 0u
void  OS_TaskSuspend (OS_TCB  *p_tcb,
                      OS_ERR  *p_err)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
    CPU_SR_ALLOC();
 8002a32:	2300      	movs	r3, #0
 8002a34:	60fb      	str	r3, [r7, #12]


    CPU_CRITICAL_ENTER();
 8002a36:	f7fd fc53 	bl	80002e0 <CPU_SR_Save>
 8002a3a:	60f8      	str	r0, [r7, #12]
    if (p_tcb == (OS_TCB *)0) {                             /* See if specified to suspend self                       */
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d102      	bne.n	8002a48 <OS_TaskSuspend+0x20>
        p_tcb = OSTCBCurPtr;
 8002a42:	4b3d      	ldr	r3, [pc, #244]	; (8002b38 <OS_TaskSuspend+0x110>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	607b      	str	r3, [r7, #4]
    }

    if (p_tcb == OSTCBCurPtr) {
 8002a48:	4b3b      	ldr	r3, [pc, #236]	; (8002b38 <OS_TaskSuspend+0x110>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d10b      	bne.n	8002a6a <OS_TaskSuspend+0x42>
        if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /* Can't suspend when the scheduler is locked             */
 8002a52:	4b3a      	ldr	r3, [pc, #232]	; (8002b3c <OS_TaskSuspend+0x114>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d007      	beq.n	8002a6a <OS_TaskSuspend+0x42>
            CPU_CRITICAL_EXIT();
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f7fd fc44 	bl	80002e8 <CPU_SR_Restore>
           *p_err = OS_ERR_SCHED_LOCKED;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	f646 5263 	movw	r2, #28003	; 0x6d63
 8002a66:	801a      	strh	r2, [r3, #0]
            return;
 8002a68:	e063      	b.n	8002b32 <OS_TaskSuspend+0x10a>
        }
    }

   *p_err = OS_ERR_NONE;
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	801a      	strh	r2, [r3, #0]
    switch (p_tcb->TaskState) {
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002a76:	2b07      	cmp	r3, #7
 8002a78:	d851      	bhi.n	8002b1e <OS_TaskSuspend+0xf6>
 8002a7a:	a201      	add	r2, pc, #4	; (adr r2, 8002a80 <OS_TaskSuspend+0x58>)
 8002a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a80:	08002aa1 	.word	0x08002aa1
 8002a84:	08002abf 	.word	0x08002abf
 8002a88:	08002ad7 	.word	0x08002ad7
 8002a8c:	08002aef 	.word	0x08002aef
 8002a90:	08002b07 	.word	0x08002b07
 8002a94:	08002b07 	.word	0x08002b07
 8002a98:	08002b07 	.word	0x08002b07
 8002a9c:	08002b07 	.word	0x08002b07
        case OS_TASK_STATE_RDY:
             OS_CRITICAL_ENTER_CPU_EXIT();
             p_tcb->TaskState  =  OS_TASK_STATE_SUSPENDED;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2204      	movs	r2, #4
 8002aa4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             p_tcb->SuspendCtr = (OS_NESTING_CTR)1;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             OS_RdyListRemove(p_tcb);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f001 f8bf 	bl	8003c34 <OS_RdyListRemove>
             OS_CRITICAL_EXIT_NO_SCHED();
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f7fd fc16 	bl	80002e8 <CPU_SR_Restore>
             break;
 8002abc:	e037      	b.n	8002b2e <OS_TaskSuspend+0x106>

        case OS_TASK_STATE_DLY:
             p_tcb->TaskState  = OS_TASK_STATE_DLY_SUSPENDED;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2205      	movs	r2, #5
 8002ac2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             p_tcb->SuspendCtr = (OS_NESTING_CTR)1;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             CPU_CRITICAL_EXIT();
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f7fd fc0a 	bl	80002e8 <CPU_SR_Restore>
             break;
 8002ad4:	e02b      	b.n	8002b2e <OS_TaskSuspend+0x106>

        case OS_TASK_STATE_PEND:
             p_tcb->TaskState  = OS_TASK_STATE_PEND_SUSPENDED;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2206      	movs	r2, #6
 8002ada:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             p_tcb->SuspendCtr = (OS_NESTING_CTR)1;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             CPU_CRITICAL_EXIT();
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f7fd fbfe 	bl	80002e8 <CPU_SR_Restore>
             break;
 8002aec:	e01f      	b.n	8002b2e <OS_TaskSuspend+0x106>

        case OS_TASK_STATE_PEND_TIMEOUT:
             p_tcb->TaskState  = OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2207      	movs	r2, #7
 8002af2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             p_tcb->SuspendCtr = (OS_NESTING_CTR)1;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             CPU_CRITICAL_EXIT();
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f7fd fbf2 	bl	80002e8 <CPU_SR_Restore>
             break;
 8002b04:	e013      	b.n	8002b2e <OS_TaskSuspend+0x106>

        case OS_TASK_STATE_SUSPENDED:
        case OS_TASK_STATE_DLY_SUSPENDED:
        case OS_TASK_STATE_PEND_SUSPENDED:
        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             p_tcb->SuspendCtr++;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	b2da      	uxtb	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             CPU_CRITICAL_EXIT();
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f7fd fbe6 	bl	80002e8 <CPU_SR_Restore>
             break;
 8002b1c:	e007      	b.n	8002b2e <OS_TaskSuspend+0x106>

        default:
             CPU_CRITICAL_EXIT();
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f7fd fbe2 	bl	80002e8 <CPU_SR_Restore>
            *p_err = OS_ERR_STATE_INVALID;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	f646 622d 	movw	r2, #28205	; 0x6e2d
 8002b2a:	801a      	strh	r2, [r3, #0]
             return;
 8002b2c:	e001      	b.n	8002b32 <OS_TaskSuspend+0x10a>
    }

    OSSched();
 8002b2e:	f000 fb8b 	bl	8003248 <OSSched>
}
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	200025dc 	.word	0x200025dc
 8002b3c:	20002370 	.word	0x20002370

08002b40 <OS_TaskChangePrio>:
************************************************************************************************************************
*/

void  OS_TaskChangePrio(OS_TCB  *p_tcb,
                        OS_PRIO  prio_new)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	460b      	mov	r3, r1
 8002b4a:	70fb      	strb	r3, [r7, #3]
    OS_PRIO  prio_cur;
#endif


    do {
        p_tcb_owner = (OS_TCB *)0;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	60fb      	str	r3, [r7, #12]
#if OS_CFG_MUTEX_EN > 0
        prio_cur    = p_tcb->Prio;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002b56:	72fb      	strb	r3, [r7, #11]
#endif
        switch (p_tcb->TaskState) {
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002b5e:	2b07      	cmp	r3, #7
 8002b60:	f200 808c 	bhi.w	8002c7c <OS_TaskChangePrio+0x13c>
 8002b64:	a201      	add	r2, pc, #4	; (adr r2, 8002b6c <OS_TaskChangePrio+0x2c>)
 8002b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b6a:	bf00      	nop
 8002b6c:	08002b8d 	.word	0x08002b8d
 8002b70:	08002bc1 	.word	0x08002bc1
 8002b74:	08002bcb 	.word	0x08002bcb
 8002b78:	08002bcb 	.word	0x08002bcb
 8002b7c:	08002bc1 	.word	0x08002bc1
 8002b80:	08002bc1 	.word	0x08002bc1
 8002b84:	08002bcb 	.word	0x08002bcb
 8002b88:	08002bcb 	.word	0x08002bcb
            case OS_TASK_STATE_RDY:
                 OS_RdyListRemove(p_tcb);                   /* Remove from current priority                           */
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f001 f851 	bl	8003c34 <OS_RdyListRemove>
                 p_tcb->Prio = prio_new;                    /* Set new task priority                                  */
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	78fa      	ldrb	r2, [r7, #3]
 8002b96:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                 OS_PrioInsert(p_tcb->Prio);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f001 ff8d 	bl	8004ac0 <OS_PrioInsert>
                 if (p_tcb == OSTCBCurPtr) {
 8002ba6:	4b37      	ldr	r3, [pc, #220]	; (8002c84 <OS_TaskChangePrio+0x144>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d103      	bne.n	8002bb8 <OS_TaskChangePrio+0x78>
                     OS_RdyListInsertHead(p_tcb);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 ffbf 	bl	8003b34 <OS_RdyListInsertHead>
                 } else {
                     OS_RdyListInsertTail(p_tcb);
                 }
                 break;
 8002bb6:	e05a      	b.n	8002c6e <OS_TaskChangePrio+0x12e>
                 p_tcb->Prio = prio_new;                    /* Set new task priority                                  */
                 OS_PrioInsert(p_tcb->Prio);
                 if (p_tcb == OSTCBCurPtr) {
                     OS_RdyListInsertHead(p_tcb);
                 } else {
                     OS_RdyListInsertTail(p_tcb);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 fffb 	bl	8003bb4 <OS_RdyListInsertTail>
                 }
                 break;
 8002bbe:	e056      	b.n	8002c6e <OS_TaskChangePrio+0x12e>

            case OS_TASK_STATE_DLY:                         /* Nothing to do except change the priority in the OS_TCB */
            case OS_TASK_STATE_SUSPENDED:
            case OS_TASK_STATE_DLY_SUSPENDED:
                 p_tcb->Prio = prio_new;                    /* Set new task priority                                  */
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	78fa      	ldrb	r2, [r7, #3]
 8002bc4:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                 break;
 8002bc8:	e051      	b.n	8002c6e <OS_TaskChangePrio+0x12e>

            case OS_TASK_STATE_PEND:
            case OS_TASK_STATE_PEND_TIMEOUT:
            case OS_TASK_STATE_PEND_SUSPENDED:
            case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
                 p_tcb->Prio = prio_new;                    /* Set new task priority                                  */
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	78fa      	ldrb	r2, [r7, #3]
 8002bce:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                 switch (p_tcb->PendOn) {                   /* What to do depends on what we are pending on           */
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	2b05      	cmp	r3, #5
 8002bdc:	d843      	bhi.n	8002c66 <OS_TaskChangePrio+0x126>
 8002bde:	a201      	add	r2, pc, #4	; (adr r2, 8002be4 <OS_TaskChangePrio+0xa4>)
 8002be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be4:	08002bfd 	.word	0x08002bfd
 8002be8:	08002c67 	.word	0x08002c67
 8002bec:	08002bfd 	.word	0x08002bfd
 8002bf0:	08002c05 	.word	0x08002c05
 8002bf4:	08002bfd 	.word	0x08002bfd
 8002bf8:	08002bfd 	.word	0x08002bfd
                     case OS_TASK_PEND_ON_FLAG:
                     case OS_TASK_PEND_ON_MULTI:
                     case OS_TASK_PEND_ON_Q:
                     case OS_TASK_PEND_ON_SEM:
                          OS_PendListChangePrio(p_tcb);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 fd69 	bl	80036d4 <OS_PendListChangePrio>
                          break;
 8002c02:	e033      	b.n	8002c6c <OS_TaskChangePrio+0x12c>

                     case OS_TASK_PEND_ON_MUTEX:
#if OS_CFG_MUTEX_EN > 0
                          OS_PendListChangePrio(p_tcb);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 fd65 	bl	80036d4 <OS_PendListChangePrio>
                          p_tcb_owner = ((OS_MUTEX *)p_tcb->PendDataTblPtr->PendObjPtr)->OwnerTCBPtr;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	60fb      	str	r3, [r7, #12]
                          if (prio_cur > prio_new) {         /* Are we increasing the priority?                        */
 8002c14:	7afa      	ldrb	r2, [r7, #11]
 8002c16:	78fb      	ldrb	r3, [r7, #3]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d908      	bls.n	8002c2e <OS_TaskChangePrio+0xee>
                              if (p_tcb_owner->Prio <= prio_new) {/* Yes, do we need to give this prio to the owner?   */
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002c22:	78fa      	ldrb	r2, [r7, #3]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d320      	bcc.n	8002c6a <OS_TaskChangePrio+0x12a>
                                  p_tcb_owner = (OS_TCB *)0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60fb      	str	r3, [r7, #12]
#endif
                                  }
                              }
                          }
#endif
                         break;
 8002c2c:	e01d      	b.n	8002c6a <OS_TaskChangePrio+0x12a>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
                                 TRACE_OS_MUTEX_TASK_PRIO_INHERIT(p_tcb_owner, prio_new);
#endif
                              }
                          } else {
                              if (p_tcb_owner->Prio == prio_cur) {/* No, is it required to check for a lower prio?     */
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002c34:	7afa      	ldrb	r2, [r7, #11]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d117      	bne.n	8002c6a <OS_TaskChangePrio+0x12a>
                                  prio_new = OS_MutexGrpPrioFindHighest(p_tcb_owner);
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f002 fbd6 	bl	80053ec <OS_MutexGrpPrioFindHighest>
 8002c40:	4603      	mov	r3, r0
 8002c42:	70fb      	strb	r3, [r7, #3]
                                  prio_new = prio_new > p_tcb_owner->BasePrio ? p_tcb_owner->BasePrio : prio_new;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8002c4a:	78fb      	ldrb	r3, [r7, #3]
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	bf28      	it	cs
 8002c50:	4613      	movcs	r3, r2
 8002c52:	70fb      	strb	r3, [r7, #3]
                                  if (prio_new == p_tcb_owner->Prio) {
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002c5a:	78fa      	ldrb	r2, [r7, #3]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d104      	bne.n	8002c6a <OS_TaskChangePrio+0x12a>
                                      p_tcb_owner = (OS_TCB *)0;
 8002c60:	2300      	movs	r3, #0
 8002c62:	60fb      	str	r3, [r7, #12]
#endif
                                  }
                              }
                          }
#endif
                         break;
 8002c64:	e001      	b.n	8002c6a <OS_TaskChangePrio+0x12a>

                     case OS_TASK_PEND_ON_TASK_Q:
                     case OS_TASK_PEND_ON_TASK_SEM:
                     default:
                          break;
 8002c66:	bf00      	nop
 8002c68:	e000      	b.n	8002c6c <OS_TaskChangePrio+0x12c>
#endif
                                  }
                              }
                          }
#endif
                         break;
 8002c6a:	bf00      	nop
                     case OS_TASK_PEND_ON_TASK_Q:
                     case OS_TASK_PEND_ON_TASK_SEM:
                     default:
                          break;
                 }
                 break;
 8002c6c:	bf00      	nop

            default:
                 return;
        }
        p_tcb = p_tcb_owner;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	607b      	str	r3, [r7, #4]
    } while (p_tcb != (OS_TCB *)0);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f47f af69 	bne.w	8002b4c <OS_TaskChangePrio+0xc>
 8002c7a:	e000      	b.n	8002c7e <OS_TaskChangePrio+0x13e>
                          break;
                 }
                 break;

            default:
                 return;
 8002c7c:	bf00      	nop
        }
        p_tcb = p_tcb_owner;
    } while (p_tcb != (OS_TCB *)0);
}
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	200025dc 	.word	0x200025dc

08002c88 <OS_MsgPoolInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MsgPoolInit (OS_ERR  *p_err)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b087      	sub	sp, #28
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (OSCfg_MsgPoolBasePtr == (OS_MSG *)0) {
 8002c90:	4b2d      	ldr	r3, [pc, #180]	; (8002d48 <OS_MsgPoolInit+0xc0>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d104      	bne.n	8002ca2 <OS_MsgPoolInit+0x1a>
       *p_err = OS_ERR_MSG_POOL_NULL_PTR;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f245 721e 	movw	r2, #22302	; 0x571e
 8002c9e:	801a      	strh	r2, [r3, #0]
        return;
 8002ca0:	e04e      	b.n	8002d40 <OS_MsgPoolInit+0xb8>
    }
    if (OSCfg_MsgPoolSize == (OS_MSG_QTY)0) {
 8002ca2:	4b2a      	ldr	r3, [pc, #168]	; (8002d4c <OS_MsgPoolInit+0xc4>)
 8002ca4:	881b      	ldrh	r3, [r3, #0]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d104      	bne.n	8002cb4 <OS_MsgPoolInit+0x2c>
       *p_err = OS_ERR_MSG_POOL_EMPTY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f245 721d 	movw	r2, #22301	; 0x571d
 8002cb0:	801a      	strh	r2, [r3, #0]
        return;
 8002cb2:	e045      	b.n	8002d40 <OS_MsgPoolInit+0xb8>
    }
#endif

    p_msg1 = OSCfg_MsgPoolBasePtr;
 8002cb4:	4b24      	ldr	r3, [pc, #144]	; (8002d48 <OS_MsgPoolInit+0xc0>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	617b      	str	r3, [r7, #20]
    p_msg2 = OSCfg_MsgPoolBasePtr;
 8002cba:	4b23      	ldr	r3, [pc, #140]	; (8002d48 <OS_MsgPoolInit+0xc0>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	613b      	str	r3, [r7, #16]
    p_msg2++;
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	3310      	adds	r3, #16
 8002cc4:	613b      	str	r3, [r7, #16]
    loops  = OSCfg_MsgPoolSize - 1u;
 8002cc6:	4b21      	ldr	r3, [pc, #132]	; (8002d4c <OS_MsgPoolInit+0xc4>)
 8002cc8:	881b      	ldrh	r3, [r3, #0]
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	81bb      	strh	r3, [r7, #12]
    for (i = 0u; i < loops; i++) {                          /* Init. list of free OS_MSGs                             */
 8002cce:	2300      	movs	r3, #0
 8002cd0:	81fb      	strh	r3, [r7, #14]
 8002cd2:	e014      	b.n	8002cfe <OS_MsgPoolInit+0x76>
        p_msg1->NextPtr = p_msg2;
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	601a      	str	r2, [r3, #0]
        p_msg1->MsgPtr  = (void      *)0;
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	605a      	str	r2, [r3, #4]
        p_msg1->MsgSize = (OS_MSG_SIZE)0u;
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	811a      	strh	r2, [r3, #8]
        p_msg1->MsgTS   = (CPU_TS     )0u;
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	60da      	str	r2, [r3, #12]
        p_msg1++;
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	3310      	adds	r3, #16
 8002cf0:	617b      	str	r3, [r7, #20]
        p_msg2++;
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	3310      	adds	r3, #16
 8002cf6:	613b      	str	r3, [r7, #16]

    p_msg1 = OSCfg_MsgPoolBasePtr;
    p_msg2 = OSCfg_MsgPoolBasePtr;
    p_msg2++;
    loops  = OSCfg_MsgPoolSize - 1u;
    for (i = 0u; i < loops; i++) {                          /* Init. list of free OS_MSGs                             */
 8002cf8:	89fb      	ldrh	r3, [r7, #14]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	81fb      	strh	r3, [r7, #14]
 8002cfe:	89fa      	ldrh	r2, [r7, #14]
 8002d00:	89bb      	ldrh	r3, [r7, #12]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d3e6      	bcc.n	8002cd4 <OS_MsgPoolInit+0x4c>
        p_msg1->MsgSize = (OS_MSG_SIZE)0u;
        p_msg1->MsgTS   = (CPU_TS     )0u;
        p_msg1++;
        p_msg2++;
    }
    p_msg1->NextPtr = (OS_MSG    *)0;                       /* Last OS_MSG                                            */
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
    p_msg1->MsgPtr  = (void      *)0;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	605a      	str	r2, [r3, #4]
    p_msg1->MsgSize = (OS_MSG_SIZE)0u;
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	2200      	movs	r2, #0
 8002d16:	811a      	strh	r2, [r3, #8]
    p_msg1->MsgTS   = (CPU_TS     )0u;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	60da      	str	r2, [r3, #12]

    OSMsgPool.NextPtr    =  OSCfg_MsgPoolBasePtr;
 8002d1e:	4b0a      	ldr	r3, [pc, #40]	; (8002d48 <OS_MsgPoolInit+0xc0>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a0b      	ldr	r2, [pc, #44]	; (8002d50 <OS_MsgPoolInit+0xc8>)
 8002d24:	6013      	str	r3, [r2, #0]
    OSMsgPool.NbrFree    =  OSCfg_MsgPoolSize;
 8002d26:	4b09      	ldr	r3, [pc, #36]	; (8002d4c <OS_MsgPoolInit+0xc4>)
 8002d28:	881a      	ldrh	r2, [r3, #0]
 8002d2a:	4b09      	ldr	r3, [pc, #36]	; (8002d50 <OS_MsgPoolInit+0xc8>)
 8002d2c:	809a      	strh	r2, [r3, #4]
    OSMsgPool.NbrUsed    = (OS_MSG_QTY)0;
 8002d2e:	4b08      	ldr	r3, [pc, #32]	; (8002d50 <OS_MsgPoolInit+0xc8>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	80da      	strh	r2, [r3, #6]
#if OS_CFG_DBG_EN > 0u
    OSMsgPool.NbrUsedMax = (OS_MSG_QTY)0;
 8002d34:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <OS_MsgPoolInit+0xc8>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	811a      	strh	r2, [r3, #8]
#endif
   *p_err                =  OS_ERR_NONE;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	801a      	strh	r2, [r3, #0]
}
 8002d40:	371c      	adds	r7, #28
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr
 8002d48:	0800df30 	.word	0x0800df30
 8002d4c:	0800df2c 	.word	0x0800df2c
 8002d50:	200026cc 	.word	0x200026cc

08002d54 <OS_MsgQInit>:
************************************************************************************************************************
*/

void  OS_MsgQInit (OS_MSG_Q    *p_msg_q,
                   OS_MSG_QTY   size)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	807b      	strh	r3, [r7, #2]
    p_msg_q->NbrEntriesSize = (OS_MSG_QTY)size;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	887a      	ldrh	r2, [r7, #2]
 8002d64:	811a      	strh	r2, [r3, #8]
    p_msg_q->NbrEntries     = (OS_MSG_QTY)0;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	815a      	strh	r2, [r3, #10]
#if OS_CFG_DBG_EN > 0u
    p_msg_q->NbrEntriesMax  = (OS_MSG_QTY)0;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	819a      	strh	r2, [r3, #12]
#endif
    p_msg_q->InPtr          = (OS_MSG   *)0;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
    p_msg_q->OutPtr         = (OS_MSG   *)0;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	605a      	str	r2, [r3, #4]
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bc80      	pop	{r7}
 8002d86:	4770      	bx	lr

08002d88 <OS_MsgQGet>:

void  *OS_MsgQGet (OS_MSG_Q     *p_msg_q,
                   OS_MSG_SIZE  *p_msg_size,
                   CPU_TS       *p_ts,
                   OS_ERR       *p_err)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b087      	sub	sp, #28
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
 8002d94:	603b      	str	r3, [r7, #0]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return ((void *)0);
    }
#endif

    if (p_msg_q->NbrEntries == (OS_MSG_QTY)0) {             /* Is the queue empty?                                    */
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	895b      	ldrh	r3, [r3, #10]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10e      	bne.n	8002dbc <OS_MsgQGet+0x34>
       *p_msg_size = (OS_MSG_SIZE)0;                        /* Yes                                                    */
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	2200      	movs	r2, #0
 8002da2:	801a      	strh	r2, [r3, #0]
        if (p_ts != (CPU_TS *)0) {
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d002      	beq.n	8002db0 <OS_MsgQGet+0x28>
           *p_ts  = (CPU_TS  )0;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]
        }
       *p_err = OS_ERR_Q_EMPTY;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	f246 5292 	movw	r2, #26002	; 0x6592
 8002db6:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 8002db8:	2300      	movs	r3, #0
 8002dba:	e03c      	b.n	8002e36 <OS_MsgQGet+0xae>
    }

    p_msg           = p_msg_q->OutPtr;                      /* No, get the next message to extract from the queue     */
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	617b      	str	r3, [r7, #20]
    p_void          = p_msg->MsgPtr;
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	613b      	str	r3, [r7, #16]
   *p_msg_size      = p_msg->MsgSize;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	891a      	ldrh	r2, [r3, #8]
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	801a      	strh	r2, [r3, #0]
    if (p_ts != (CPU_TS *)0) {
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <OS_MsgQGet+0x56>
       *p_ts  = p_msg->MsgTS;
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	601a      	str	r2, [r3, #0]
    }

    p_msg_q->OutPtr = p_msg->NextPtr;                       /* Point to next message to extract                       */
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	605a      	str	r2, [r3, #4]

    if (p_msg_q->OutPtr == (OS_MSG *)0) {                   /* Are there any more messages in the queue?              */
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d106      	bne.n	8002dfc <OS_MsgQGet+0x74>
        p_msg_q->InPtr      = (OS_MSG   *)0;                /* No                                                     */
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
        p_msg_q->NbrEntries = (OS_MSG_QTY)0;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	815a      	strh	r2, [r3, #10]
 8002dfa:	e005      	b.n	8002e08 <OS_MsgQGet+0x80>
    } else {
        p_msg_q->NbrEntries--;                              /* Yes, One less message in the queue                     */
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	895b      	ldrh	r3, [r3, #10]
 8002e00:	3b01      	subs	r3, #1
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	815a      	strh	r2, [r3, #10]
    }

    p_msg->NextPtr    = OSMsgPool.NextPtr;                  /* Return message control block to free list              */
 8002e08:	4b0d      	ldr	r3, [pc, #52]	; (8002e40 <OS_MsgQGet+0xb8>)
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	601a      	str	r2, [r3, #0]
    OSMsgPool.NextPtr = p_msg;
 8002e10:	4a0b      	ldr	r2, [pc, #44]	; (8002e40 <OS_MsgQGet+0xb8>)
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	6013      	str	r3, [r2, #0]
    OSMsgPool.NbrFree++;
 8002e16:	4b0a      	ldr	r3, [pc, #40]	; (8002e40 <OS_MsgQGet+0xb8>)
 8002e18:	889b      	ldrh	r3, [r3, #4]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	4b08      	ldr	r3, [pc, #32]	; (8002e40 <OS_MsgQGet+0xb8>)
 8002e20:	809a      	strh	r2, [r3, #4]
    OSMsgPool.NbrUsed--;
 8002e22:	4b07      	ldr	r3, [pc, #28]	; (8002e40 <OS_MsgQGet+0xb8>)
 8002e24:	88db      	ldrh	r3, [r3, #6]
 8002e26:	3b01      	subs	r3, #1
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	4b05      	ldr	r3, [pc, #20]	; (8002e40 <OS_MsgQGet+0xb8>)
 8002e2c:	80da      	strh	r2, [r3, #6]

   *p_err             = OS_ERR_NONE;
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	2200      	movs	r2, #0
 8002e32:	801a      	strh	r2, [r3, #0]
    return (p_void);
 8002e34:	693b      	ldr	r3, [r7, #16]
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	371c      	adds	r7, #28
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bc80      	pop	{r7}
 8002e3e:	4770      	bx	lr
 8002e40:	200026cc 	.word	0x200026cc

08002e44 <OS_MsgQPut>:
                  void         *p_void,
                  OS_MSG_SIZE   msg_size,
                  OS_OPT        opt,
                  CPU_TS        ts,
                  OS_ERR       *p_err)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b087      	sub	sp, #28
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	4611      	mov	r1, r2
 8002e50:	461a      	mov	r2, r3
 8002e52:	460b      	mov	r3, r1
 8002e54:	80fb      	strh	r3, [r7, #6]
 8002e56:	4613      	mov	r3, r2
 8002e58:	80bb      	strh	r3, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    if (p_msg_q->NbrEntries >= p_msg_q->NbrEntriesSize) {
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	895a      	ldrh	r2, [r3, #10]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	891b      	ldrh	r3, [r3, #8]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d304      	bcc.n	8002e70 <OS_MsgQPut+0x2c>
       *p_err = OS_ERR_Q_MAX;                               /* Message queue cannot accept any more messages          */
 8002e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e68:	f246 5293 	movw	r2, #26003	; 0x6593
 8002e6c:	801a      	strh	r2, [r3, #0]
        return;
 8002e6e:	e06b      	b.n	8002f48 <OS_MsgQPut+0x104>
    }

    if (OSMsgPool.NbrFree == (OS_MSG_QTY)0) {
 8002e70:	4b37      	ldr	r3, [pc, #220]	; (8002f50 <OS_MsgQPut+0x10c>)
 8002e72:	889b      	ldrh	r3, [r3, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d104      	bne.n	8002e82 <OS_MsgQPut+0x3e>
       *p_err = OS_ERR_MSG_POOL_EMPTY;                      /* No more OS_MSG to use                                  */
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	f245 721d 	movw	r2, #22301	; 0x571d
 8002e7e:	801a      	strh	r2, [r3, #0]
        return;
 8002e80:	e062      	b.n	8002f48 <OS_MsgQPut+0x104>
    }

    p_msg             = OSMsgPool.NextPtr;                  /* Remove message control block from free list            */
 8002e82:	4b33      	ldr	r3, [pc, #204]	; (8002f50 <OS_MsgQPut+0x10c>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	617b      	str	r3, [r7, #20]
    OSMsgPool.NextPtr = p_msg->NextPtr;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a30      	ldr	r2, [pc, #192]	; (8002f50 <OS_MsgQPut+0x10c>)
 8002e8e:	6013      	str	r3, [r2, #0]
    OSMsgPool.NbrFree--;
 8002e90:	4b2f      	ldr	r3, [pc, #188]	; (8002f50 <OS_MsgQPut+0x10c>)
 8002e92:	889b      	ldrh	r3, [r3, #4]
 8002e94:	3b01      	subs	r3, #1
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	4b2d      	ldr	r3, [pc, #180]	; (8002f50 <OS_MsgQPut+0x10c>)
 8002e9a:	809a      	strh	r2, [r3, #4]
    OSMsgPool.NbrUsed++;
 8002e9c:	4b2c      	ldr	r3, [pc, #176]	; (8002f50 <OS_MsgQPut+0x10c>)
 8002e9e:	88db      	ldrh	r3, [r3, #6]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	4b2a      	ldr	r3, [pc, #168]	; (8002f50 <OS_MsgQPut+0x10c>)
 8002ea6:	80da      	strh	r2, [r3, #6]

#if OS_CFG_DBG_EN > 0u
    if (OSMsgPool.NbrUsedMax < OSMsgPool.NbrUsed) {
 8002ea8:	4b29      	ldr	r3, [pc, #164]	; (8002f50 <OS_MsgQPut+0x10c>)
 8002eaa:	891a      	ldrh	r2, [r3, #8]
 8002eac:	4b28      	ldr	r3, [pc, #160]	; (8002f50 <OS_MsgQPut+0x10c>)
 8002eae:	88db      	ldrh	r3, [r3, #6]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d203      	bcs.n	8002ebc <OS_MsgQPut+0x78>
        OSMsgPool.NbrUsedMax = OSMsgPool.NbrUsed;
 8002eb4:	4b26      	ldr	r3, [pc, #152]	; (8002f50 <OS_MsgQPut+0x10c>)
 8002eb6:	88da      	ldrh	r2, [r3, #6]
 8002eb8:	4b25      	ldr	r3, [pc, #148]	; (8002f50 <OS_MsgQPut+0x10c>)
 8002eba:	811a      	strh	r2, [r3, #8]
    }
#endif

    if (p_msg_q->NbrEntries == (OS_MSG_QTY)0) {             /* Is this first message placed in the queue?             */
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	895b      	ldrh	r3, [r3, #10]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10c      	bne.n	8002ede <OS_MsgQPut+0x9a>
        p_msg_q->InPtr         = p_msg;                     /* Yes                                                    */
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	601a      	str	r2, [r3, #0]
        p_msg_q->OutPtr        = p_msg;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	605a      	str	r2, [r3, #4]
        p_msg_q->NbrEntries    = (OS_MSG_QTY)1;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	815a      	strh	r2, [r3, #10]
        p_msg->NextPtr         = (OS_MSG *)0;
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	e01e      	b.n	8002f1c <OS_MsgQPut+0xd8>
    } else {                                                /* No                                                     */
        if ((opt & OS_OPT_POST_LIFO) == OS_OPT_POST_FIFO) { /* Is it FIFO or LIFO?                                    */
 8002ede:	88bb      	ldrh	r3, [r7, #4]
 8002ee0:	f003 0310 	and.w	r3, r3, #16
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d10c      	bne.n	8002f02 <OS_MsgQPut+0xbe>
            p_msg_in           = p_msg_q->InPtr;            /* FIFO, add to the head                                  */
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	613b      	str	r3, [r7, #16]
            p_msg_in->NextPtr  = p_msg;
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	601a      	str	r2, [r3, #0]
            p_msg_q->InPtr     = p_msg;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	601a      	str	r2, [r3, #0]
            p_msg->NextPtr     = (OS_MSG *)0;
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	e006      	b.n	8002f10 <OS_MsgQPut+0xcc>
        } else {
            p_msg->NextPtr     = p_msg_q->OutPtr;           /* LIFO, add to the tail                                  */
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	601a      	str	r2, [r3, #0]
            p_msg_q->OutPtr    = p_msg;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	605a      	str	r2, [r3, #4]
        }
        p_msg_q->NbrEntries++;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	895b      	ldrh	r3, [r3, #10]
 8002f14:	3301      	adds	r3, #1
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	815a      	strh	r2, [r3, #10]
    }

#if OS_CFG_DBG_EN > 0u
    if (p_msg_q->NbrEntriesMax < p_msg_q->NbrEntries) {
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	899a      	ldrh	r2, [r3, #12]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	895b      	ldrh	r3, [r3, #10]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d203      	bcs.n	8002f30 <OS_MsgQPut+0xec>
        p_msg_q->NbrEntriesMax = p_msg_q->NbrEntries;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	895a      	ldrh	r2, [r3, #10]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	819a      	strh	r2, [r3, #12]
    }
#endif

    p_msg->MsgPtr  = p_void;                                /* Deposit message in the message queue entry             */
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	605a      	str	r2, [r3, #4]
    p_msg->MsgSize = msg_size;
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	88fa      	ldrh	r2, [r7, #6]
 8002f3a:	811a      	strh	r2, [r3, #8]
    p_msg->MsgTS   = ts;
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	6a3a      	ldr	r2, [r7, #32]
 8002f40:	60da      	str	r2, [r3, #12]
   *p_err          = OS_ERR_NONE;
 8002f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f44:	2200      	movs	r2, #0
 8002f46:	801a      	strh	r2, [r3, #0]
}
 8002f48:	371c      	adds	r7, #28
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr
 8002f50:	200026cc 	.word	0x200026cc

08002f54 <OSInit>:
* Returns    : none
************************************************************************************************************************
*/

void  OSInit (OS_ERR  *p_err)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    OSInitHook();                                           /* Call port specific initialization code                 */
 8002f5c:	f002 fe44 	bl	8005be8 <OSInitHook>

    OSIntNestingCtr                 = (OS_NESTING_CTR)0;    /* Clear the interrupt nesting counter                    */
 8002f60:	4b60      	ldr	r3, [pc, #384]	; (80030e4 <OSInit+0x190>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	701a      	strb	r2, [r3, #0]

    OSRunning                       =  OS_STATE_OS_STOPPED; /* Indicate that multitasking not started                 */
 8002f66:	4b60      	ldr	r3, [pc, #384]	; (80030e8 <OSInit+0x194>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	701a      	strb	r2, [r3, #0]

    OSSchedLockNestingCtr           = (OS_NESTING_CTR)0;    /* Clear the scheduling lock counter                      */
 8002f6c:	4b5f      	ldr	r3, [pc, #380]	; (80030ec <OSInit+0x198>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	701a      	strb	r2, [r3, #0]

    OSTCBCurPtr                     = (OS_TCB *)0;          /* Initialize OS_TCB pointers to a known state            */
 8002f72:	4b5f      	ldr	r3, [pc, #380]	; (80030f0 <OSInit+0x19c>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]
    OSTCBHighRdyPtr                 = (OS_TCB *)0;
 8002f78:	4b5e      	ldr	r3, [pc, #376]	; (80030f4 <OSInit+0x1a0>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]

    OSPrioCur                       = (OS_PRIO)0;           /* Initialize priority variables to a known state         */
 8002f7e:	4b5e      	ldr	r3, [pc, #376]	; (80030f8 <OSInit+0x1a4>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	701a      	strb	r2, [r3, #0]
    OSPrioHighRdy                   = (OS_PRIO)0;
 8002f84:	4b5d      	ldr	r3, [pc, #372]	; (80030fc <OSInit+0x1a8>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	701a      	strb	r2, [r3, #0]
    OSPrioSaved                     = (OS_PRIO)0;
 8002f8a:	4b5d      	ldr	r3, [pc, #372]	; (8003100 <OSInit+0x1ac>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	701a      	strb	r2, [r3, #0]

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
    OSSchedLockTimeBegin            = (CPU_TS)0;
 8002f90:	4b5c      	ldr	r3, [pc, #368]	; (8003104 <OSInit+0x1b0>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]
    OSSchedLockTimeMax              = (CPU_TS)0;
 8002f96:	4b5c      	ldr	r3, [pc, #368]	; (8003108 <OSInit+0x1b4>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	601a      	str	r2, [r3, #0]
    OSSchedLockTimeMaxCur           = (CPU_TS)0;
 8002f9c:	4b5b      	ldr	r3, [pc, #364]	; (800310c <OSInit+0x1b8>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	601a      	str	r2, [r3, #0]
#if OS_CFG_SCHED_ROUND_ROBIN_EN > 0u
    OSSchedRoundRobinEn             = DEF_FALSE;
    OSSchedRoundRobinDfltTimeQuanta = OSCfg_TickRate_Hz / 10u;
#endif

    if (OSCfg_ISRStkSize > (CPU_STK_SIZE)0) {
 8002fa2:	4b5b      	ldr	r3, [pc, #364]	; (8003110 <OSInit+0x1bc>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d015      	beq.n	8002fd6 <OSInit+0x82>
        p_stk = OSCfg_ISRStkBasePtr;                        /* Clear exception stack for stack checking.              */
 8002faa:	4b5a      	ldr	r3, [pc, #360]	; (8003114 <OSInit+0x1c0>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	60fb      	str	r3, [r7, #12]
        if (p_stk != (CPU_STK *)0) {
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00f      	beq.n	8002fd6 <OSInit+0x82>
            size  = OSCfg_ISRStkSize;
 8002fb6:	4b56      	ldr	r3, [pc, #344]	; (8003110 <OSInit+0x1bc>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	60bb      	str	r3, [r7, #8]
            while (size > (CPU_STK_SIZE)0) {
 8002fbc:	e008      	b.n	8002fd0 <OSInit+0x7c>
                size--;
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	60bb      	str	r3, [r7, #8]
               *p_stk = (CPU_STK)0;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]
                p_stk++;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	3304      	adds	r3, #4
 8002fce:	60fb      	str	r3, [r7, #12]

    if (OSCfg_ISRStkSize > (CPU_STK_SIZE)0) {
        p_stk = OSCfg_ISRStkBasePtr;                        /* Clear exception stack for stack checking.              */
        if (p_stk != (CPU_STK *)0) {
            size  = OSCfg_ISRStkSize;
            while (size > (CPU_STK_SIZE)0) {
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1f3      	bne.n	8002fbe <OSInit+0x6a>
            }
        }
    }

#if OS_CFG_APP_HOOKS_EN > 0u
    OS_AppTaskCreateHookPtr = (OS_APP_HOOK_TCB )0;          /* Clear application hook pointers                        */
 8002fd6:	4b50      	ldr	r3, [pc, #320]	; (8003118 <OSInit+0x1c4>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]
    OS_AppTaskDelHookPtr    = (OS_APP_HOOK_TCB )0;
 8002fdc:	4b4f      	ldr	r3, [pc, #316]	; (800311c <OSInit+0x1c8>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]
    OS_AppTaskReturnHookPtr = (OS_APP_HOOK_TCB )0;
 8002fe2:	4b4f      	ldr	r3, [pc, #316]	; (8003120 <OSInit+0x1cc>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]

    OS_AppIdleTaskHookPtr   = (OS_APP_HOOK_VOID)0;
 8002fe8:	4b4e      	ldr	r3, [pc, #312]	; (8003124 <OSInit+0x1d0>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	601a      	str	r2, [r3, #0]
    OS_AppStatTaskHookPtr   = (OS_APP_HOOK_VOID)0;
 8002fee:	4b4e      	ldr	r3, [pc, #312]	; (8003128 <OSInit+0x1d4>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	601a      	str	r2, [r3, #0]
    OS_AppTaskSwHookPtr     = (OS_APP_HOOK_VOID)0;
 8002ff4:	4b4d      	ldr	r3, [pc, #308]	; (800312c <OSInit+0x1d8>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	601a      	str	r2, [r3, #0]
    OS_AppTimeTickHookPtr   = (OS_APP_HOOK_VOID)0;
 8002ffa:	4b4d      	ldr	r3, [pc, #308]	; (8003130 <OSInit+0x1dc>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	601a      	str	r2, [r3, #0]
#endif

#if OS_CFG_TASK_REG_TBL_SIZE > 0u
    OSTaskRegNextAvailID    = (OS_REG_ID)0;
 8003000:	4b4c      	ldr	r3, [pc, #304]	; (8003134 <OSInit+0x1e0>)
 8003002:	2200      	movs	r2, #0
 8003004:	701a      	strb	r2, [r3, #0]
#endif

    OS_PrioInit();                                          /* Initialize the priority bitmap table                   */
 8003006:	f001 fd1f 	bl	8004a48 <OS_PrioInit>

    OS_RdyListInit();                                       /* Initialize the Ready List                              */
 800300a:	f000 fd51 	bl	8003ab0 <OS_RdyListInit>

    
#if OS_CFG_FLAG_EN > 0u                                     /* Initialize the Event Flag module                       */
    OS_FlagInit(p_err);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f001 f9fa 	bl	8004408 <OS_FlagInit>
    if (*p_err != OS_ERR_NONE) {
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d14a      	bne.n	80030b2 <OSInit+0x15e>
    }
#endif


#if OS_CFG_MEM_EN > 0u                                      /* Initialize the Memory Manager module                   */
    OS_MemInit(p_err);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f002 fc55 	bl	80058cc <OS_MemInit>
    if (*p_err != OS_ERR_NONE) {
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d145      	bne.n	80030b6 <OSInit+0x162>
    }
#endif


#if (OS_MSG_EN) > 0u                                        /* Initialize the free list of OS_MSGs                    */
    OS_MsgPoolInit(p_err);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7ff fe2c 	bl	8002c88 <OS_MsgPoolInit>
    if (*p_err != OS_ERR_NONE) {
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	881b      	ldrh	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d140      	bne.n	80030ba <OSInit+0x166>
    }
#endif


#if OS_CFG_MUTEX_EN > 0u                                    /* Initialize the Mutex Manager module                    */
    OS_MutexInit(p_err);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f002 f993 	bl	8005364 <OS_MutexInit>
    if (*p_err != OS_ERR_NONE) {
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	881b      	ldrh	r3, [r3, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d13b      	bne.n	80030be <OSInit+0x16a>
    }
#endif


#if OS_CFG_Q_EN > 0u
    OS_QInit(p_err);                                        /* Initialize the Message Queue Manager module            */
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7fe ff48 	bl	8001edc <OS_QInit>
    if (*p_err != OS_ERR_NONE) {
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	881b      	ldrh	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d136      	bne.n	80030c2 <OSInit+0x16e>
    }
#endif


#if OS_CFG_SEM_EN > 0u                                      /* Initialize the Semaphore Manager module                */
    OS_SemInit(p_err);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f001 ff19 	bl	8004e8c <OS_SemInit>
    if (*p_err != OS_ERR_NONE) {
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	881b      	ldrh	r3, [r3, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d131      	bne.n	80030c6 <OSInit+0x172>
        return;
    }
#endif


    OS_TaskInit(p_err);                                     /* Initialize the task manager                            */
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7ff fabc 	bl	80025e0 <OS_TaskInit>
    if (*p_err != OS_ERR_NONE) {
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	881b      	ldrh	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d12c      	bne.n	80030ca <OSInit+0x176>
        return;
    }
#endif

    
    OS_IdleTaskInit(p_err);                                 /* Initialize the Idle Task                               */
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 fa21 	bl	80034b8 <OS_IdleTaskInit>
    if (*p_err != OS_ERR_NONE) {
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	881b      	ldrh	r3, [r3, #0]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d127      	bne.n	80030ce <OSInit+0x17a>
        return;
    }


    OS_TickTaskInit(p_err);                                 /* Initialize the Tick Task                               */
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 febe 	bl	8003e00 <OS_TickTaskInit>
    if (*p_err != OS_ERR_NONE) {
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	881b      	ldrh	r3, [r3, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d122      	bne.n	80030d2 <OSInit+0x17e>
        return;
    }


#if OS_CFG_STAT_TASK_EN > 0u                                /* Initialize the Statistic Task                          */
    OS_StatTaskInit(p_err);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f001 fc71 	bl	8004974 <OS_StatTaskInit>
    if (*p_err != OS_ERR_NONE) {
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	881b      	ldrh	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d11d      	bne.n	80030d6 <OSInit+0x182>
    }
#endif


#if OS_CFG_TMR_EN > 0u                                      /* Initialize the Timer Manager module                    */
    OS_TmrInit(p_err);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f002 fc2c 	bl	80058f8 <OS_TmrInit>
    if (*p_err != OS_ERR_NONE) {
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	881b      	ldrh	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d118      	bne.n	80030da <OSInit+0x186>
    }
#endif


#if OS_CFG_DBG_EN > 0u
    OS_Dbg_Init();
 80030a8:	f002 f9ca 	bl	8005440 <OS_Dbg_Init>
#endif


    OSCfg_Init();
 80030ac:	f001 fee8 	bl	8004e80 <OSCfg_Init>
 80030b0:	e014      	b.n	80030dc <OSInit+0x188>

    
#if OS_CFG_FLAG_EN > 0u                                     /* Initialize the Event Flag module                       */
    OS_FlagInit(p_err);
    if (*p_err != OS_ERR_NONE) {
        return;
 80030b2:	bf00      	nop
 80030b4:	e012      	b.n	80030dc <OSInit+0x188>


#if OS_CFG_MEM_EN > 0u                                      /* Initialize the Memory Manager module                   */
    OS_MemInit(p_err);
    if (*p_err != OS_ERR_NONE) {
        return;
 80030b6:	bf00      	nop
 80030b8:	e010      	b.n	80030dc <OSInit+0x188>


#if (OS_MSG_EN) > 0u                                        /* Initialize the free list of OS_MSGs                    */
    OS_MsgPoolInit(p_err);
    if (*p_err != OS_ERR_NONE) {
        return;
 80030ba:	bf00      	nop
 80030bc:	e00e      	b.n	80030dc <OSInit+0x188>


#if OS_CFG_MUTEX_EN > 0u                                    /* Initialize the Mutex Manager module                    */
    OS_MutexInit(p_err);
    if (*p_err != OS_ERR_NONE) {
        return;
 80030be:	bf00      	nop
 80030c0:	e00c      	b.n	80030dc <OSInit+0x188>


#if OS_CFG_Q_EN > 0u
    OS_QInit(p_err);                                        /* Initialize the Message Queue Manager module            */
    if (*p_err != OS_ERR_NONE) {
        return;
 80030c2:	bf00      	nop
 80030c4:	e00a      	b.n	80030dc <OSInit+0x188>


#if OS_CFG_SEM_EN > 0u                                      /* Initialize the Semaphore Manager module                */
    OS_SemInit(p_err);
    if (*p_err != OS_ERR_NONE) {
        return;
 80030c6:	bf00      	nop
 80030c8:	e008      	b.n	80030dc <OSInit+0x188>
#endif


    OS_TaskInit(p_err);                                     /* Initialize the task manager                            */
    if (*p_err != OS_ERR_NONE) {
        return;
 80030ca:	bf00      	nop
 80030cc:	e006      	b.n	80030dc <OSInit+0x188>
#endif

    
    OS_IdleTaskInit(p_err);                                 /* Initialize the Idle Task                               */
    if (*p_err != OS_ERR_NONE) {
        return;
 80030ce:	bf00      	nop
 80030d0:	e004      	b.n	80030dc <OSInit+0x188>
    }


    OS_TickTaskInit(p_err);                                 /* Initialize the Tick Task                               */
    if (*p_err != OS_ERR_NONE) {
        return;
 80030d2:	bf00      	nop
 80030d4:	e002      	b.n	80030dc <OSInit+0x188>


#if OS_CFG_STAT_TASK_EN > 0u                                /* Initialize the Statistic Task                          */
    OS_StatTaskInit(p_err);
    if (*p_err != OS_ERR_NONE) {
        return;
 80030d6:	bf00      	nop
 80030d8:	e000      	b.n	80030dc <OSInit+0x188>


#if OS_CFG_TMR_EN > 0u                                      /* Initialize the Timer Manager module                    */
    OS_TmrInit(p_err);
    if (*p_err != OS_ERR_NONE) {
        return;
 80030da:	bf00      	nop
    OS_Dbg_Init();
#endif


    OSCfg_Init();
}
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	20002608 	.word	0x20002608
 80030e8:	20002381 	.word	0x20002381
 80030ec:	20002370 	.word	0x20002370
 80030f0:	200025dc 	.word	0x200025dc
 80030f4:	200025e8 	.word	0x200025e8
 80030f8:	20002510 	.word	0x20002510
 80030fc:	20002504 	.word	0x20002504
 8003100:	200025e4 	.word	0x200025e4
 8003104:	200025d8 	.word	0x200025d8
 8003108:	200027fc 	.word	0x200027fc
 800310c:	200025ec 	.word	0x200025ec
 8003110:	0800df28 	.word	0x0800df28
 8003114:	0800df24 	.word	0x0800df24
 8003118:	2000250c 	.word	0x2000250c
 800311c:	200025f8 	.word	0x200025f8
 8003120:	20002374 	.word	0x20002374
 8003124:	200027d4 	.word	0x200027d4
 8003128:	200027f0 	.word	0x200027f0
 800312c:	200027e0 	.word	0x200027e0
 8003130:	200025fc 	.word	0x200025fc
 8003134:	20002380 	.word	0x20002380

08003138 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 250 levels deep.
************************************************************************************************************************
*/

void  OSIntEnter (void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Is OS running?                                         */
 800313c:	4b0a      	ldr	r3, [pc, #40]	; (8003168 <OSIntEnter+0x30>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d10a      	bne.n	800315a <OSIntEnter+0x22>
        return;                                             /* No                                                     */
    }

    if (OSIntNestingCtr >= (OS_NESTING_CTR)250u) {          /* Have we nested past 250 levels?                        */
 8003144:	4b09      	ldr	r3, [pc, #36]	; (800316c <OSIntEnter+0x34>)
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	2bf9      	cmp	r3, #249	; 0xf9
 800314a:	d808      	bhi.n	800315e <OSIntEnter+0x26>
        return;                                             /* Yes                                                    */
    }

    OSIntNestingCtr++;                                      /* Increment ISR nesting level                            */
 800314c:	4b07      	ldr	r3, [pc, #28]	; (800316c <OSIntEnter+0x34>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	3301      	adds	r3, #1
 8003152:	b2da      	uxtb	r2, r3
 8003154:	4b05      	ldr	r3, [pc, #20]	; (800316c <OSIntEnter+0x34>)
 8003156:	701a      	strb	r2, [r3, #0]
 8003158:	e002      	b.n	8003160 <OSIntEnter+0x28>
*/

void  OSIntEnter (void)
{
    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Is OS running?                                         */
        return;                                             /* No                                                     */
 800315a:	bf00      	nop
 800315c:	e000      	b.n	8003160 <OSIntEnter+0x28>
    }

    if (OSIntNestingCtr >= (OS_NESTING_CTR)250u) {          /* Have we nested past 250 levels?                        */
        return;                                             /* Yes                                                    */
 800315e:	bf00      	nop
    }

    OSIntNestingCtr++;                                      /* Increment ISR nesting level                            */
}
 8003160:	46bd      	mov	sp, r7
 8003162:	bc80      	pop	{r7}
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	20002381 	.word	0x20002381
 800316c:	20002608 	.word	0x20002608

08003170 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OSSchedLock())
************************************************************************************************************************
*/

void  OSIntExit (void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
 8003176:	2300      	movs	r3, #0
 8003178:	607b      	str	r3, [r7, #4]



    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Has the OS started?                                    */
 800317a:	4b2b      	ldr	r3, [pc, #172]	; (8003228 <OSIntExit+0xb8>)
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d14e      	bne.n	8003220 <OSIntExit+0xb0>
        return;                                             /* No                                                     */
    }

    CPU_INT_DIS();
 8003182:	f7fd f8ad 	bl	80002e0 <CPU_SR_Save>
 8003186:	6078      	str	r0, [r7, #4]
    if (OSIntNestingCtr == (OS_NESTING_CTR)0) {             /* Prevent OSIntNestingCtr from wrapping                  */
 8003188:	4b28      	ldr	r3, [pc, #160]	; (800322c <OSIntExit+0xbc>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d103      	bne.n	8003198 <OSIntExit+0x28>
        CPU_INT_EN();
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7fd f8a9 	bl	80002e8 <CPU_SR_Restore>
        return;
 8003196:	e044      	b.n	8003222 <OSIntExit+0xb2>
    }
    OSIntNestingCtr--;
 8003198:	4b24      	ldr	r3, [pc, #144]	; (800322c <OSIntExit+0xbc>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	3b01      	subs	r3, #1
 800319e:	b2da      	uxtb	r2, r3
 80031a0:	4b22      	ldr	r3, [pc, #136]	; (800322c <OSIntExit+0xbc>)
 80031a2:	701a      	strb	r2, [r3, #0]
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* ISRs still nested?                                     */
 80031a4:	4b21      	ldr	r3, [pc, #132]	; (800322c <OSIntExit+0xbc>)
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <OSIntExit+0x44>
        CPU_INT_EN();                                       /* Yes                                                    */
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7fd f89b 	bl	80002e8 <CPU_SR_Restore>
        return;
 80031b2:	e036      	b.n	8003222 <OSIntExit+0xb2>
    }

    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {        /* Scheduler still locked?                                */
 80031b4:	4b1e      	ldr	r3, [pc, #120]	; (8003230 <OSIntExit+0xc0>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d003      	beq.n	80031c4 <OSIntExit+0x54>
        CPU_INT_EN();                                       /* Yes                                                    */
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f7fd f893 	bl	80002e8 <CPU_SR_Restore>
        return;
 80031c2:	e02e      	b.n	8003222 <OSIntExit+0xb2>
    }

    OSPrioHighRdy   = OS_PrioGetHighest();                  /* Find highest priority                                  */
 80031c4:	f001 fc58 	bl	8004a78 <OS_PrioGetHighest>
 80031c8:	4603      	mov	r3, r0
 80031ca:	461a      	mov	r2, r3
 80031cc:	4b19      	ldr	r3, [pc, #100]	; (8003234 <OSIntExit+0xc4>)
 80031ce:	701a      	strb	r2, [r3, #0]
    OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;     /* Get highest priority task ready-to-run                 */
 80031d0:	4b18      	ldr	r3, [pc, #96]	; (8003234 <OSIntExit+0xc4>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	4619      	mov	r1, r3
 80031d6:	4a18      	ldr	r2, [pc, #96]	; (8003238 <OSIntExit+0xc8>)
 80031d8:	460b      	mov	r3, r1
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	440b      	add	r3, r1
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a15      	ldr	r2, [pc, #84]	; (800323c <OSIntExit+0xcc>)
 80031e6:	6013      	str	r3, [r2, #0]
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                   /* Current task still the highest priority?               */
 80031e8:	4b14      	ldr	r3, [pc, #80]	; (800323c <OSIntExit+0xcc>)
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	4b14      	ldr	r3, [pc, #80]	; (8003240 <OSIntExit+0xd0>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d103      	bne.n	80031fc <OSIntExit+0x8c>
        CPU_INT_EN();                                       /* Yes                                                    */
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7fd f877 	bl	80002e8 <CPU_SR_Restore>
        return;
 80031fa:	e012      	b.n	8003222 <OSIntExit+0xb2>
    }

#if OS_CFG_TASK_PROFILE_EN > 0u
    OSTCBHighRdyPtr->CtxSwCtr++;                            /* Inc. # of context switches for this new task           */
 80031fc:	4b0f      	ldr	r3, [pc, #60]	; (800323c <OSIntExit+0xcc>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003204:	3201      	adds	r2, #1
 8003206:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#endif
    OSTaskCtxSwCtr++;                                       /* Keep track of the total number of ctx switches         */
 800320a:	4b0e      	ldr	r3, [pc, #56]	; (8003244 <OSIntExit+0xd4>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	3301      	adds	r3, #1
 8003210:	4a0c      	ldr	r2, [pc, #48]	; (8003244 <OSIntExit+0xd4>)
 8003212:	6013      	str	r3, [r2, #0]

#if defined(OS_CFG_TLS_TBL_SIZE) && (OS_CFG_TLS_TBL_SIZE > 0u)
    OS_TLS_TaskSw();
#endif

    OSIntCtxSw();                                           /* Perform interrupt level ctx switch                     */
 8003214:	f7fd f831 	bl	800027a <OSIntCtxSw>

    CPU_INT_EN();
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f7fd f865 	bl	80002e8 <CPU_SR_Restore>
 800321e:	e000      	b.n	8003222 <OSIntExit+0xb2>
    CPU_SR_ALLOC();



    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Has the OS started?                                    */
        return;                                             /* No                                                     */
 8003220:	bf00      	nop
#endif

    OSIntCtxSw();                                           /* Perform interrupt level ctx switch                     */

    CPU_INT_EN();
}
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	20002381 	.word	0x20002381
 800322c:	20002608 	.word	0x20002608
 8003230:	20002370 	.word	0x20002370
 8003234:	20002504 	.word	0x20002504
 8003238:	20002384 	.word	0x20002384
 800323c:	200025e8 	.word	0x200025e8
 8003240:	200025dc 	.word	0x200025dc
 8003244:	20002604 	.word	0x20002604

08003248 <OSSched>:
* Note(s)    : 1) Rescheduling is prevented when the scheduler is locked (see OSSchedLock())
************************************************************************************************************************
*/

void  OSSched (void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
 800324e:	2300      	movs	r3, #0
 8003250:	607b      	str	r3, [r7, #4]



    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* ISRs still nested?                                     */
 8003252:	4b20      	ldr	r3, [pc, #128]	; (80032d4 <OSSched+0x8c>)
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d136      	bne.n	80032c8 <OSSched+0x80>
        return;                                             /* Yes ... only schedule when no nested ISRs              */
    }

    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {        /* Scheduler locked?                                      */
 800325a:	4b1f      	ldr	r3, [pc, #124]	; (80032d8 <OSSched+0x90>)
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d134      	bne.n	80032cc <OSSched+0x84>
        return;                                             /* Yes                                                    */
    }

    CPU_INT_DIS();
 8003262:	f7fd f83d 	bl	80002e0 <CPU_SR_Save>
 8003266:	6078      	str	r0, [r7, #4]
    OSPrioHighRdy   = OS_PrioGetHighest();                  /* Find the highest priority ready                        */
 8003268:	f001 fc06 	bl	8004a78 <OS_PrioGetHighest>
 800326c:	4603      	mov	r3, r0
 800326e:	461a      	mov	r2, r3
 8003270:	4b1a      	ldr	r3, [pc, #104]	; (80032dc <OSSched+0x94>)
 8003272:	701a      	strb	r2, [r3, #0]
    OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;
 8003274:	4b19      	ldr	r3, [pc, #100]	; (80032dc <OSSched+0x94>)
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	4619      	mov	r1, r3
 800327a:	4a19      	ldr	r2, [pc, #100]	; (80032e0 <OSSched+0x98>)
 800327c:	460b      	mov	r3, r1
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	440b      	add	r3, r1
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a16      	ldr	r2, [pc, #88]	; (80032e4 <OSSched+0x9c>)
 800328a:	6013      	str	r3, [r2, #0]
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                   /* Current task is still highest priority task?           */
 800328c:	4b15      	ldr	r3, [pc, #84]	; (80032e4 <OSSched+0x9c>)
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	4b15      	ldr	r3, [pc, #84]	; (80032e8 <OSSched+0xa0>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	429a      	cmp	r2, r3
 8003296:	d103      	bne.n	80032a0 <OSSched+0x58>
        CPU_INT_EN();                                       /* Yes ... no need to context switch                      */
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f7fd f825 	bl	80002e8 <CPU_SR_Restore>
        return;
 800329e:	e016      	b.n	80032ce <OSSched+0x86>
    }

#if OS_CFG_TASK_PROFILE_EN > 0u
    OSTCBHighRdyPtr->CtxSwCtr++;                            /* Inc. # of context switches to this task                */
 80032a0:	4b10      	ldr	r3, [pc, #64]	; (80032e4 <OSSched+0x9c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80032a8:	3201      	adds	r2, #1
 80032aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#endif
    OSTaskCtxSwCtr++;                                       /* Increment context switch counter                       */
 80032ae:	4b0f      	ldr	r3, [pc, #60]	; (80032ec <OSSched+0xa4>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	3301      	adds	r3, #1
 80032b4:	4a0d      	ldr	r2, [pc, #52]	; (80032ec <OSSched+0xa4>)
 80032b6:	6013      	str	r3, [r2, #0]

#if defined(OS_CFG_TLS_TBL_SIZE) && (OS_CFG_TLS_TBL_SIZE > 0u)
    OS_TLS_TaskSw();
#endif

    OS_TASK_SW();                                           /* Perform a task level context switch                    */
 80032b8:	f7fc ffda 	bl	8000270 <OSCtxSw>
    CPU_INT_EN();
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f7fd f813 	bl	80002e8 <CPU_SR_Restore>

#ifdef OS_TASK_SW_SYNC
    OS_TASK_SW_SYNC();
 80032c2:	f3bf 8f6f 	isb	sy
 80032c6:	e002      	b.n	80032ce <OSSched+0x86>
    CPU_SR_ALLOC();



    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* ISRs still nested?                                     */
        return;                                             /* Yes ... only schedule when no nested ISRs              */
 80032c8:	bf00      	nop
 80032ca:	e000      	b.n	80032ce <OSSched+0x86>
    }

    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {        /* Scheduler locked?                                      */
        return;                                             /* Yes                                                    */
 80032cc:	bf00      	nop
    CPU_INT_EN();

#ifdef OS_TASK_SW_SYNC
    OS_TASK_SW_SYNC();
#endif
}
 80032ce:	3708      	adds	r7, #8
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	20002608 	.word	0x20002608
 80032d8:	20002370 	.word	0x20002370
 80032dc:	20002504 	.word	0x20002504
 80032e0:	20002384 	.word	0x20002384
 80032e4:	200025e8 	.word	0x200025e8
 80032e8:	200025dc 	.word	0x200025dc
 80032ec:	20002604 	.word	0x20002604

080032f0 <OSSchedLock>:
*                 call to OSSchedLock() you MUST have a call to OSSchedUnlock().
************************************************************************************************************************
*/

void  OSSchedLock (OS_ERR  *p_err)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
    CPU_SR_ALLOC();
 80032f8:	2300      	movs	r3, #0
 80032fa:	60fb      	str	r3, [r7, #12]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 80032fc:	4b17      	ldr	r3, [pc, #92]	; (800335c <OSSchedLock+0x6c>)
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d004      	beq.n	800330e <OSSchedLock+0x1e>
       *p_err = OS_ERR_SCHED_LOCK_ISR;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f646 5262 	movw	r2, #28002	; 0x6d62
 800330a:	801a      	strh	r2, [r3, #0]
        return;
 800330c:	e022      	b.n	8003354 <OSSchedLock+0x64>
    }
#endif

    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Make sure multitasking is running                      */
 800330e:	4b14      	ldr	r3, [pc, #80]	; (8003360 <OSSchedLock+0x70>)
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d004      	beq.n	8003320 <OSSchedLock+0x30>
       *p_err = OS_ERR_OS_NOT_RUNNING;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f645 6289 	movw	r2, #24201	; 0x5e89
 800331c:	801a      	strh	r2, [r3, #0]
        return;
 800331e:	e019      	b.n	8003354 <OSSchedLock+0x64>
    }

    if (OSSchedLockNestingCtr >= (OS_NESTING_CTR)250u) {    /* Prevent OSSchedLockNestingCtr overflowing              */
 8003320:	4b10      	ldr	r3, [pc, #64]	; (8003364 <OSSchedLock+0x74>)
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	2bf9      	cmp	r3, #249	; 0xf9
 8003326:	d904      	bls.n	8003332 <OSSchedLock+0x42>
       *p_err = OS_ERR_LOCK_NESTING_OVF;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f245 2209 	movw	r2, #21001	; 0x5209
 800332e:	801a      	strh	r2, [r3, #0]
        return;
 8003330:	e010      	b.n	8003354 <OSSchedLock+0x64>
    }

    CPU_CRITICAL_ENTER();
 8003332:	f7fc ffd5 	bl	80002e0 <CPU_SR_Save>
 8003336:	60f8      	str	r0, [r7, #12]
    OSSchedLockNestingCtr++;                                /* Increment lock nesting level                           */
 8003338:	4b0a      	ldr	r3, [pc, #40]	; (8003364 <OSSchedLock+0x74>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	3301      	adds	r3, #1
 800333e:	b2da      	uxtb	r2, r3
 8003340:	4b08      	ldr	r3, [pc, #32]	; (8003364 <OSSchedLock+0x74>)
 8003342:	701a      	strb	r2, [r3, #0]
#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
    OS_SchedLockTimeMeasStart();
 8003344:	f000 fcce 	bl	8003ce4 <OS_SchedLockTimeMeasStart>
#endif
    CPU_CRITICAL_EXIT();
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f7fc ffcd 	bl	80002e8 <CPU_SR_Restore>
   *p_err = OS_ERR_NONE;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	801a      	strh	r2, [r3, #0]
}
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	20002608 	.word	0x20002608
 8003360:	20002381 	.word	0x20002381
 8003364:	20002370 	.word	0x20002370

08003368 <OSSchedUnlock>:
*                 OSSchedLock() you MUST have a call to OSSchedUnlock().
************************************************************************************************************************
*/

void  OSSchedUnlock (OS_ERR  *p_err)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
    CPU_SR_ALLOC();
 8003370:	2300      	movs	r3, #0
 8003372:	60fb      	str	r3, [r7, #12]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 8003374:	4b1e      	ldr	r3, [pc, #120]	; (80033f0 <OSSchedUnlock+0x88>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d004      	beq.n	8003386 <OSSchedUnlock+0x1e>
       *p_err = OS_ERR_SCHED_UNLOCK_ISR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f646 5265 	movw	r2, #28005	; 0x6d65
 8003382:	801a      	strh	r2, [r3, #0]
        return;
 8003384:	e030      	b.n	80033e8 <OSSchedUnlock+0x80>
    }
#endif

    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Make sure multitasking is running                      */
 8003386:	4b1b      	ldr	r3, [pc, #108]	; (80033f4 <OSSchedUnlock+0x8c>)
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d004      	beq.n	8003398 <OSSchedUnlock+0x30>
       *p_err = OS_ERR_OS_NOT_RUNNING;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f645 6289 	movw	r2, #24201	; 0x5e89
 8003394:	801a      	strh	r2, [r3, #0]
        return;
 8003396:	e027      	b.n	80033e8 <OSSchedUnlock+0x80>
    }

    if (OSSchedLockNestingCtr == (OS_NESTING_CTR)0) {       /* See if the scheduler is locked                         */
 8003398:	4b17      	ldr	r3, [pc, #92]	; (80033f8 <OSSchedUnlock+0x90>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d104      	bne.n	80033aa <OSSchedUnlock+0x42>
       *p_err = OS_ERR_SCHED_NOT_LOCKED;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f646 5264 	movw	r2, #28004	; 0x6d64
 80033a6:	801a      	strh	r2, [r3, #0]
        return;
 80033a8:	e01e      	b.n	80033e8 <OSSchedUnlock+0x80>
    }

    CPU_CRITICAL_ENTER();
 80033aa:	f7fc ff99 	bl	80002e0 <CPU_SR_Save>
 80033ae:	60f8      	str	r0, [r7, #12]
    OSSchedLockNestingCtr--;                                /* Decrement lock nesting level                           */
 80033b0:	4b11      	ldr	r3, [pc, #68]	; (80033f8 <OSSchedUnlock+0x90>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	3b01      	subs	r3, #1
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	4b0f      	ldr	r3, [pc, #60]	; (80033f8 <OSSchedUnlock+0x90>)
 80033ba:	701a      	strb	r2, [r3, #0]
    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {
 80033bc:	4b0e      	ldr	r3, [pc, #56]	; (80033f8 <OSSchedUnlock+0x90>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d007      	beq.n	80033d4 <OSSchedUnlock+0x6c>
        CPU_CRITICAL_EXIT();                                /* Scheduler is still locked                              */
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f7fc ff8f 	bl	80002e8 <CPU_SR_Restore>
       *p_err = OS_ERR_SCHED_LOCKED;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f646 5263 	movw	r2, #28003	; 0x6d63
 80033d0:	801a      	strh	r2, [r3, #0]
        return;
 80033d2:	e009      	b.n	80033e8 <OSSchedUnlock+0x80>
    }

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
    OS_SchedLockTimeMeasStop();
 80033d4:	f000 fc98 	bl	8003d08 <OS_SchedLockTimeMeasStop>
#endif

    CPU_CRITICAL_EXIT();                                    /* Scheduler should be re-enabled                         */
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f7fc ff85 	bl	80002e8 <CPU_SR_Restore>
    OSSched();                                              /* Run the scheduler                                      */
 80033de:	f7ff ff33 	bl	8003248 <OSSched>
   *p_err = OS_ERR_NONE;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	801a      	strh	r2, [r3, #0]
}
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	20002608 	.word	0x20002608
 80033f4:	20002381 	.word	0x20002381
 80033f8:	20002370 	.word	0x20002370

080033fc <OSStart>:
*              2) OSStart() is not supposed to return.  If it does, that would be considered a fatal error.
************************************************************************************************************************
*/

void  OSStart (OS_ERR  *p_err)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    if (OSRunning == OS_STATE_OS_STOPPED) {
 8003404:	4b17      	ldr	r3, [pc, #92]	; (8003464 <OSStart+0x68>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d123      	bne.n	8003454 <OSStart+0x58>
        OSPrioHighRdy   = OS_PrioGetHighest();              /* Find the highest priority                              */
 800340c:	f001 fb34 	bl	8004a78 <OS_PrioGetHighest>
 8003410:	4603      	mov	r3, r0
 8003412:	461a      	mov	r2, r3
 8003414:	4b14      	ldr	r3, [pc, #80]	; (8003468 <OSStart+0x6c>)
 8003416:	701a      	strb	r2, [r3, #0]
        OSPrioCur       = OSPrioHighRdy;
 8003418:	4b13      	ldr	r3, [pc, #76]	; (8003468 <OSStart+0x6c>)
 800341a:	781a      	ldrb	r2, [r3, #0]
 800341c:	4b13      	ldr	r3, [pc, #76]	; (800346c <OSStart+0x70>)
 800341e:	701a      	strb	r2, [r3, #0]
        OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;
 8003420:	4b11      	ldr	r3, [pc, #68]	; (8003468 <OSStart+0x6c>)
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	4619      	mov	r1, r3
 8003426:	4a12      	ldr	r2, [pc, #72]	; (8003470 <OSStart+0x74>)
 8003428:	460b      	mov	r3, r1
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	440b      	add	r3, r1
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a0f      	ldr	r2, [pc, #60]	; (8003474 <OSStart+0x78>)
 8003436:	6013      	str	r3, [r2, #0]
        OSTCBCurPtr     = OSTCBHighRdyPtr;
 8003438:	4b0e      	ldr	r3, [pc, #56]	; (8003474 <OSStart+0x78>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a0e      	ldr	r2, [pc, #56]	; (8003478 <OSStart+0x7c>)
 800343e:	6013      	str	r3, [r2, #0]
        OSRunning       = OS_STATE_OS_RUNNING;
 8003440:	4b08      	ldr	r3, [pc, #32]	; (8003464 <OSStart+0x68>)
 8003442:	2201      	movs	r2, #1
 8003444:	701a      	strb	r2, [r3, #0]
        OSStartHighRdy();                                   /* Execute target specific code to start task             */
 8003446:	f7fc fedb 	bl	8000200 <OSStartHighRdy>
       *p_err           = OS_ERR_FATAL_RETURN;              /* OSStart() is not supposed to return                    */
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f643 2299 	movw	r2, #15001	; 0x3a99
 8003450:	801a      	strh	r2, [r3, #0]
    } else {
       *p_err           = OS_ERR_OS_RUNNING;                /* OS is already running                                  */
    }
}
 8003452:	e003      	b.n	800345c <OSStart+0x60>
        OSTCBCurPtr     = OSTCBHighRdyPtr;
        OSRunning       = OS_STATE_OS_RUNNING;
        OSStartHighRdy();                                   /* Execute target specific code to start task             */
       *p_err           = OS_ERR_FATAL_RETURN;              /* OSStart() is not supposed to return                    */
    } else {
       *p_err           = OS_ERR_OS_RUNNING;                /* OS is already running                                  */
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f645 628a 	movw	r2, #24202	; 0x5e8a
 800345a:	801a      	strh	r2, [r3, #0]
    }
}
 800345c:	bf00      	nop
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	20002381 	.word	0x20002381
 8003468:	20002504 	.word	0x20002504
 800346c:	20002510 	.word	0x20002510
 8003470:	20002384 	.word	0x20002384
 8003474:	200025e8 	.word	0x200025e8
 8003478:	200025dc 	.word	0x200025dc

0800347c <OS_IdleTask>:
*              3) This hook has been added to allow you to do such things as STOP the CPU to conserve power.
************************************************************************************************************************
*/

void  OS_IdleTask (void  *p_arg)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
    CPU_SR_ALLOC();
 8003484:	2300      	movs	r3, #0
 8003486:	60fb      	str	r3, [r7, #12]


    (void)&p_arg;                                           /* Prevent compiler warning for not using 'p_arg'         */

    while (DEF_ON) {
        CPU_CRITICAL_ENTER();
 8003488:	f7fc ff2a 	bl	80002e0 <CPU_SR_Save>
 800348c:	60f8      	str	r0, [r7, #12]
        OSIdleTaskCtr++;
 800348e:	4b08      	ldr	r3, [pc, #32]	; (80034b0 <OS_IdleTask+0x34>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	3301      	adds	r3, #1
 8003494:	4a06      	ldr	r2, [pc, #24]	; (80034b0 <OS_IdleTask+0x34>)
 8003496:	6013      	str	r3, [r2, #0]
#if OS_CFG_STAT_TASK_EN > 0u
        OSStatTaskCtr++;
 8003498:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <OS_IdleTask+0x38>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	3301      	adds	r3, #1
 800349e:	4a05      	ldr	r2, [pc, #20]	; (80034b4 <OS_IdleTask+0x38>)
 80034a0:	6013      	str	r3, [r2, #0]
#endif
        CPU_CRITICAL_EXIT();
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f7fc ff20 	bl	80002e8 <CPU_SR_Restore>

        OSIdleTaskHook();                                   /* Call user definable HOOK                               */
 80034a8:	f002 fb90 	bl	8005bcc <OSIdleTaskHook>
    }
 80034ac:	e7ec      	b.n	8003488 <OS_IdleTask+0xc>
 80034ae:	bf00      	nop
 80034b0:	200027e8 	.word	0x200027e8
 80034b4:	2000237c 	.word	0x2000237c

080034b8 <OS_IdleTaskInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_IdleTaskInit (OS_ERR  *p_err)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b08c      	sub	sp, #48	; 0x30
 80034bc:	af0a      	add	r7, sp, #40	; 0x28
 80034be:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    OSIdleTaskCtr = (OS_IDLE_CTR)0;
 80034c0:	4b10      	ldr	r3, [pc, #64]	; (8003504 <OS_IdleTaskInit+0x4c>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	601a      	str	r2, [r3, #0]
                                                            /* ---------------- CREATE THE IDLE TASK ---------------- */
    OSTaskCreate((OS_TCB     *)&OSIdleTaskTCB,
 80034c6:	4b10      	ldr	r3, [pc, #64]	; (8003508 <OS_IdleTaskInit+0x50>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a10      	ldr	r2, [pc, #64]	; (800350c <OS_IdleTaskInit+0x54>)
 80034cc:	6812      	ldr	r2, [r2, #0]
 80034ce:	4910      	ldr	r1, [pc, #64]	; (8003510 <OS_IdleTaskInit+0x58>)
 80034d0:	6809      	ldr	r1, [r1, #0]
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	9008      	str	r0, [sp, #32]
 80034d6:	200b      	movs	r0, #11
 80034d8:	9007      	str	r0, [sp, #28]
 80034da:	2000      	movs	r0, #0
 80034dc:	9006      	str	r0, [sp, #24]
 80034de:	2000      	movs	r0, #0
 80034e0:	9005      	str	r0, [sp, #20]
 80034e2:	2000      	movs	r0, #0
 80034e4:	9004      	str	r0, [sp, #16]
 80034e6:	9103      	str	r1, [sp, #12]
 80034e8:	9202      	str	r2, [sp, #8]
 80034ea:	9301      	str	r3, [sp, #4]
 80034ec:	231f      	movs	r3, #31
 80034ee:	9300      	str	r3, [sp, #0]
 80034f0:	2300      	movs	r3, #0
 80034f2:	4a08      	ldr	r2, [pc, #32]	; (8003514 <OS_IdleTaskInit+0x5c>)
 80034f4:	4908      	ldr	r1, [pc, #32]	; (8003518 <OS_IdleTaskInit+0x60>)
 80034f6:	4809      	ldr	r0, [pc, #36]	; (800351c <OS_IdleTaskInit+0x64>)
 80034f8:	f7fe fd6e 	bl	8001fd8 <OSTaskCreate>
                 (OS_MSG_QTY  )0u,
                 (OS_TICK     )0u,
                 (void       *)0,
                 (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR | OS_OPT_TASK_NO_TLS),
                 (OS_ERR     *)p_err);
}
 80034fc:	bf00      	nop
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	200027e8 	.word	0x200027e8
 8003508:	0800df18 	.word	0x0800df18
 800350c:	0800df1c 	.word	0x0800df1c
 8003510:	0800df20 	.word	0x0800df20
 8003514:	0800347d 	.word	0x0800347d
 8003518:	0800de30 	.word	0x0800de30
 800351c:	200026d8 	.word	0x200026d8

08003520 <OS_Pend>:

void  OS_Pend (OS_PEND_DATA  *p_pend_data,
               OS_PEND_OBJ   *p_obj,
               OS_STATE       pending_on,
               OS_TICK        timeout)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	603b      	str	r3, [r7, #0]
 800352c:	4613      	mov	r3, r2
 800352e:	71fb      	strb	r3, [r7, #7]
    OS_PEND_LIST  *p_pend_list;



    OSTCBCurPtr->PendOn     = pending_on;                    /* Resource not available, wait until it is              */
 8003530:	4b1b      	ldr	r3, [pc, #108]	; (80035a0 <OS_Pend+0x80>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	79fa      	ldrb	r2, [r7, #7]
 8003536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    OSTCBCurPtr->PendStatus = OS_STATUS_PEND_OK;
 800353a:	4b19      	ldr	r3, [pc, #100]	; (80035a0 <OS_Pend+0x80>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    OS_TaskBlock(OSTCBCurPtr,                                /* Block the task and add it to the tick list if needed  */
 8003544:	4b16      	ldr	r3, [pc, #88]	; (80035a0 <OS_Pend+0x80>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6839      	ldr	r1, [r7, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f000 fc06 	bl	8003d5c <OS_TaskBlock>
                 timeout);

    if (p_obj != (OS_PEND_OBJ *)0) {                         /* Add the current task to the pend list ...             */
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d011      	beq.n	800357a <OS_Pend+0x5a>
        p_pend_list             = &p_obj->PendList;          /* ... if there is an object to pend on                  */
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	3308      	adds	r3, #8
 800355a:	617b      	str	r3, [r7, #20]
        p_pend_data->PendObjPtr = p_obj;                     /* Save the pointer to the object pending on             */
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	60da      	str	r2, [r3, #12]
        OS_PendDataInit((OS_TCB       *)OSTCBCurPtr,         /* Initialize the remaining field                        */
 8003562:	4b0f      	ldr	r3, [pc, #60]	; (80035a0 <OS_Pend+0x80>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2201      	movs	r2, #1
 8003568:	68f9      	ldr	r1, [r7, #12]
 800356a:	4618      	mov	r0, r3
 800356c:	f000 f81a 	bl	80035a4 <OS_PendDataInit>
                        (OS_PEND_DATA *)p_pend_data,
                        (OS_OBJ_QTY    )1);
        OS_PendListInsertPrio(p_pend_list,                   /* Insert in the pend list in priority order             */
 8003570:	68f9      	ldr	r1, [r7, #12]
 8003572:	6978      	ldr	r0, [r7, #20]
 8003574:	f000 f8ec 	bl	8003750 <OS_PendListInsertPrio>
 8003578:	e008      	b.n	800358c <OS_Pend+0x6c>
                              p_pend_data);
    } else {
        OSTCBCurPtr->PendDataTblEntries = (OS_OBJ_QTY    )0; /* If no object being pended on the clear these fields   */
 800357a:	4b09      	ldr	r3, [pc, #36]	; (80035a0 <OS_Pend+0x80>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2200      	movs	r2, #0
 8003580:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        OSTCBCurPtr->PendDataTblPtr     = (OS_PEND_DATA *)0; /* ... in the TCB                                        */
 8003584:	4b06      	ldr	r3, [pc, #24]	; (80035a0 <OS_Pend+0x80>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2200      	movs	r2, #0
 800358a:	631a      	str	r2, [r3, #48]	; 0x30
    }
#if OS_CFG_DBG_EN > 0u
    OS_PendDbgNameAdd(p_obj,
 800358c:	4b04      	ldr	r3, [pc, #16]	; (80035a0 <OS_Pend+0x80>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4619      	mov	r1, r3
 8003592:	68b8      	ldr	r0, [r7, #8]
 8003594:	f000 f83c 	bl	8003610 <OS_PendDbgNameAdd>
                      OSTCBCurPtr);
#endif
}
 8003598:	bf00      	nop
 800359a:	3718      	adds	r7, #24
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	200025dc 	.word	0x200025dc

080035a4 <OS_PendDataInit>:
*/

void  OS_PendDataInit (OS_TCB        *p_tcb,
                       OS_PEND_DATA  *p_pend_data_tbl,
                       OS_OBJ_QTY     tbl_size)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b087      	sub	sp, #28
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	4613      	mov	r3, r2
 80035b0:	80fb      	strh	r3, [r7, #6]
    OS_OBJ_QTY  i;



    p_tcb->PendDataTblEntries = tbl_size;                   /* Link the TCB to the beginning of the table             */
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	88fa      	ldrh	r2, [r7, #6]
 80035b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    p_tcb->PendDataTblPtr     = p_pend_data_tbl;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	631a      	str	r2, [r3, #48]	; 0x30

    for (i = 0u; i < tbl_size; i++) {
 80035c0:	2300      	movs	r3, #0
 80035c2:	82fb      	strh	r3, [r7, #22]
 80035c4:	e01a      	b.n	80035fc <OS_PendDataInit+0x58>
        p_pend_data_tbl->NextPtr    = (OS_PEND_DATA *)0;    /* Initialize all the fields                              */
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	2200      	movs	r2, #0
 80035ca:	605a      	str	r2, [r3, #4]
        p_pend_data_tbl->PrevPtr    = (OS_PEND_DATA *)0;
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]
        p_pend_data_tbl->RdyObjPtr  = (OS_PEND_OBJ  *)0;
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	2200      	movs	r2, #0
 80035d6:	611a      	str	r2, [r3, #16]
        p_pend_data_tbl->RdyMsgPtr  = (void         *)0;
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2200      	movs	r2, #0
 80035dc:	615a      	str	r2, [r3, #20]
        p_pend_data_tbl->RdyMsgSize = (OS_MSG_SIZE   )0;
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2200      	movs	r2, #0
 80035e2:	831a      	strh	r2, [r3, #24]
        p_pend_data_tbl->RdyTS      = (CPU_TS        )0;
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	2200      	movs	r2, #0
 80035e8:	61da      	str	r2, [r3, #28]
        p_pend_data_tbl->TCBPtr     = p_tcb;                /* Every entry points back to the TCB of the task         */
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	609a      	str	r2, [r3, #8]
        p_pend_data_tbl++;
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	3320      	adds	r3, #32
 80035f4:	60bb      	str	r3, [r7, #8]


    p_tcb->PendDataTblEntries = tbl_size;                   /* Link the TCB to the beginning of the table             */
    p_tcb->PendDataTblPtr     = p_pend_data_tbl;

    for (i = 0u; i < tbl_size; i++) {
 80035f6:	8afb      	ldrh	r3, [r7, #22]
 80035f8:	3301      	adds	r3, #1
 80035fa:	82fb      	strh	r3, [r7, #22]
 80035fc:	8afa      	ldrh	r2, [r7, #22]
 80035fe:	88fb      	ldrh	r3, [r7, #6]
 8003600:	429a      	cmp	r2, r3
 8003602:	d3e0      	bcc.n	80035c6 <OS_PendDataInit+0x22>
        p_pend_data_tbl->RdyMsgSize = (OS_MSG_SIZE   )0;
        p_pend_data_tbl->RdyTS      = (CPU_TS        )0;
        p_pend_data_tbl->TCBPtr     = p_tcb;                /* Every entry points back to the TCB of the task         */
        p_pend_data_tbl++;
    }
}
 8003604:	bf00      	nop
 8003606:	371c      	adds	r7, #28
 8003608:	46bd      	mov	sp, r7
 800360a:	bc80      	pop	{r7}
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop

08003610 <OS_PendDbgNameAdd>:


#if OS_CFG_DBG_EN > 0u
void  OS_PendDbgNameAdd (OS_PEND_OBJ  *p_obj,
                         OS_TCB       *p_tcb)
{
 8003610:	b480      	push	{r7}
 8003612:	b087      	sub	sp, #28
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
    OS_PEND_LIST  *p_pend_list;
    OS_PEND_DATA  *p_pend_data;
    OS_TCB        *p_tcb1;


    if (p_obj != (OS_PEND_OBJ *)0) {
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d012      	beq.n	8003646 <OS_PendDbgNameAdd+0x36>
        p_tcb->DbgNamePtr =  p_obj->NamePtr;                /* Task pending on this object ... save name in TCB       */
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
        p_pend_list       = &p_obj->PendList;               /* Find name of HP task pending on this object ...        */
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	3308      	adds	r3, #8
 800362e:	617b      	str	r3, [r7, #20]
        p_pend_data       =  p_pend_list->HeadPtr;
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	613b      	str	r3, [r7, #16]
        p_tcb1            =  p_pend_data->TCBPtr;
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	60fb      	str	r3, [r7, #12]
        p_obj->DbgNamePtr = p_tcb1->NamePtr;                /* ... Save in object                                     */
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6a1a      	ldr	r2, [r3, #32]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	61da      	str	r2, [r3, #28]
            default:
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)" ");
                 break;
        }
    }
}
 8003644:	e016      	b.n	8003674 <OS_PendDbgNameAdd+0x64>
        p_pend_list       = &p_obj->PendList;               /* Find name of HP task pending on this object ...        */
        p_pend_data       =  p_pend_list->HeadPtr;
        p_tcb1            =  p_pend_data->TCBPtr;
        p_obj->DbgNamePtr = p_tcb1->NamePtr;                /* ... Save in object                                     */
    } else {
        switch (p_tcb->PendOn) {
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800364c:	2b02      	cmp	r3, #2
 800364e:	d002      	beq.n	8003656 <OS_PendDbgNameAdd+0x46>
 8003650:	2b07      	cmp	r3, #7
 8003652:	d005      	beq.n	8003660 <OS_PendDbgNameAdd+0x50>
 8003654:	e009      	b.n	800366a <OS_PendDbgNameAdd+0x5a>
            case OS_TASK_PEND_ON_TASK_Q:
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)"Task Q");
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	4a09      	ldr	r2, [pc, #36]	; (8003680 <OS_PendDbgNameAdd+0x70>)
 800365a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
                 break;
 800365e:	e009      	b.n	8003674 <OS_PendDbgNameAdd+0x64>

            case OS_TASK_PEND_ON_TASK_SEM:
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)"Task Sem");
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	4a08      	ldr	r2, [pc, #32]	; (8003684 <OS_PendDbgNameAdd+0x74>)
 8003664:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
                 break;
 8003668:	e004      	b.n	8003674 <OS_PendDbgNameAdd+0x64>

            default:
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)" ");
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	4a06      	ldr	r2, [pc, #24]	; (8003688 <OS_PendDbgNameAdd+0x78>)
 800366e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
                 break;
 8003672:	bf00      	nop
        }
    }
}
 8003674:	bf00      	nop
 8003676:	371c      	adds	r7, #28
 8003678:	46bd      	mov	sp, r7
 800367a:	bc80      	pop	{r7}
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	0800de44 	.word	0x0800de44
 8003684:	0800de4c 	.word	0x0800de4c
 8003688:	0800de58 	.word	0x0800de58

0800368c <OS_PendDbgNameRemove>:



void  OS_PendDbgNameRemove (OS_PEND_OBJ  *p_obj,
                            OS_TCB       *p_tcb)
{
 800368c:	b480      	push	{r7}
 800368e:	b087      	sub	sp, #28
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
    OS_PEND_LIST  *p_pend_list;
    OS_PEND_DATA  *p_pend_data;
    OS_TCB        *p_tcb1;


    p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)" ");          /* Remove name of object pended on for readied task       */
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	4a0d      	ldr	r2, [pc, #52]	; (80036d0 <OS_PendDbgNameRemove+0x44>)
 800369a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    p_pend_list       = &p_obj->PendList;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	3308      	adds	r3, #8
 80036a2:	617b      	str	r3, [r7, #20]
    p_pend_data       =  p_pend_list->HeadPtr;
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	613b      	str	r3, [r7, #16]
    if (p_pend_data  != (OS_PEND_DATA *)0) {
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d007      	beq.n	80036c0 <OS_PendDbgNameRemove+0x34>
        p_tcb1            = p_pend_data->TCBPtr;
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	60fb      	str	r3, [r7, #12]
        p_obj->DbgNamePtr = p_tcb1->NamePtr;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6a1a      	ldr	r2, [r3, #32]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	61da      	str	r2, [r3, #28]
    } else {
        p_obj->DbgNamePtr = (CPU_CHAR *)((void *)" ");      /* No other task pending on object                        */
    }
}
 80036be:	e002      	b.n	80036c6 <OS_PendDbgNameRemove+0x3a>
    p_pend_data       =  p_pend_list->HeadPtr;
    if (p_pend_data  != (OS_PEND_DATA *)0) {
        p_tcb1            = p_pend_data->TCBPtr;
        p_obj->DbgNamePtr = p_tcb1->NamePtr;
    } else {
        p_obj->DbgNamePtr = (CPU_CHAR *)((void *)" ");      /* No other task pending on object                        */
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a03      	ldr	r2, [pc, #12]	; (80036d0 <OS_PendDbgNameRemove+0x44>)
 80036c4:	61da      	str	r2, [r3, #28]
    }
}
 80036c6:	bf00      	nop
 80036c8:	371c      	adds	r7, #28
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bc80      	pop	{r7}
 80036ce:	4770      	bx	lr
 80036d0:	0800de58 	.word	0x0800de58

080036d4 <OS_PendListChangePrio>:
*              2) It's assumed that the TCB contains the NEW priority in its .Prio field.
************************************************************************************************************************
*/

void  OS_PendListChangePrio (OS_TCB   *p_tcb)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
    OS_PEND_DATA   *p_pend_data;
    OS_PEND_LIST   *p_pend_list;
    OS_PEND_OBJ    *p_obj;


    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to first wait list entry                 */
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e0:	613b      	str	r3, [r7, #16]
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get the number of pend list task is in         */
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036e8:	82fb      	strh	r3, [r7, #22]

    while (n_pend_list > 0u) {
 80036ea:	e017      	b.n	800371c <OS_PendListChangePrio+0x48>
        p_obj       =  p_pend_data->PendObjPtr;                     /* Get pointer to pend list                       */
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	60fb      	str	r3, [r7, #12]
        p_pend_list = &p_obj->PendList;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	3308      	adds	r3, #8
 80036f6:	60bb      	str	r3, [r7, #8]
        if (p_pend_list->NbrEntries > 1u) {                         /* Only move if multiple entries in the list      */
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	891b      	ldrh	r3, [r3, #8]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d907      	bls.n	8003710 <OS_PendListChangePrio+0x3c>
            OS_PendListRemove1(p_pend_list,                         /* Remove entry from current position             */
 8003700:	6939      	ldr	r1, [r7, #16]
 8003702:	68b8      	ldr	r0, [r7, #8]
 8003704:	f000 f8c2 	bl	800388c <OS_PendListRemove1>
                               p_pend_data);
            OS_PendListInsertPrio(p_pend_list,                      /* INSERT it back in the list                     */
 8003708:	6939      	ldr	r1, [r7, #16]
 800370a:	68b8      	ldr	r0, [r7, #8]
 800370c:	f000 f820 	bl	8003750 <OS_PendListInsertPrio>
                                  p_pend_data);
        }
        p_pend_data++;                                              /* Point to next wait list                        */
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	3320      	adds	r3, #32
 8003714:	613b      	str	r3, [r7, #16]
        n_pend_list--;
 8003716:	8afb      	ldrh	r3, [r7, #22]
 8003718:	3b01      	subs	r3, #1
 800371a:	82fb      	strh	r3, [r7, #22]


    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to first wait list entry                 */
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get the number of pend list task is in         */

    while (n_pend_list > 0u) {
 800371c:	8afb      	ldrh	r3, [r7, #22]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1e4      	bne.n	80036ec <OS_PendListChangePrio+0x18>
                                  p_pend_data);
        }
        p_pend_data++;                                              /* Point to next wait list                        */
        n_pend_list--;
    }
}
 8003722:	bf00      	nop
 8003724:	3718      	adds	r7, #24
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop

0800372c <OS_PendListInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application must not call it.
************************************************************************************************************************
*/

void  OS_PendListInit (OS_PEND_LIST  *p_pend_list)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
    p_pend_list->HeadPtr    = (OS_PEND_DATA *)0;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	601a      	str	r2, [r3, #0]
    p_pend_list->TailPtr    = (OS_PEND_DATA *)0;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	605a      	str	r2, [r3, #4]
    p_pend_list->NbrEntries = (OS_OBJ_QTY    )0;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	811a      	strh	r2, [r3, #8]
}
 8003746:	bf00      	nop
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	bc80      	pop	{r7}
 800374e:	4770      	bx	lr

08003750 <OS_PendListInsertPrio>:
************************************************************************************************************************
*/

void  OS_PendListInsertPrio (OS_PEND_LIST  *p_pend_list,
                             OS_PEND_DATA  *p_pend_data)
{
 8003750:	b480      	push	{r7}
 8003752:	b089      	sub	sp, #36	; 0x24
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
    OS_PEND_DATA  *p_pend_data_prev;
    OS_PEND_DATA  *p_pend_data_next;



    p_tcb = p_pend_data->TCBPtr;                                      /* Obtain the priority of the task to insert    */
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	61bb      	str	r3, [r7, #24]
    prio  = p_tcb->Prio;
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8003766:	75fb      	strb	r3, [r7, #23]
    if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0) {                   /* CASE 0: Insert when there are no entries     */
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	891b      	ldrh	r3, [r3, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10f      	bne.n	8003790 <OS_PendListInsertPrio+0x40>
        p_pend_list->NbrEntries = (OS_OBJ_QTY)1;                      /*         This is the first entry              */
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	811a      	strh	r2, [r3, #8]
        p_pend_data->NextPtr    = (OS_PEND_DATA *)0;                  /*         No other OS_PEND_DATAs in the list   */
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	2200      	movs	r2, #0
 800377a:	605a      	str	r2, [r3, #4]
        p_pend_data->PrevPtr    = (OS_PEND_DATA *)0;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	2200      	movs	r2, #0
 8003780:	601a      	str	r2, [r3, #0]
        p_pend_list->HeadPtr    = p_pend_data;                        /*                                              */
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	601a      	str	r2, [r3, #0]
        p_pend_list->TailPtr    = p_pend_data;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	605a      	str	r2, [r3, #4]
                p_pend_data_prev->NextPtr  = p_pend_data;
                p_pend_data_next->PrevPtr  = p_pend_data;
            }
        }
    }
}
 800378e:	e04d      	b.n	800382c <OS_PendListInsertPrio+0xdc>
        p_pend_data->NextPtr    = (OS_PEND_DATA *)0;                  /*         No other OS_PEND_DATAs in the list   */
        p_pend_data->PrevPtr    = (OS_PEND_DATA *)0;
        p_pend_list->HeadPtr    = p_pend_data;                        /*                                              */
        p_pend_list->TailPtr    = p_pend_data;
    } else {
        p_pend_list->NbrEntries++;                                    /* CASE 1: One more OS_PEND_DATA in the list    */
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	891b      	ldrh	r3, [r3, #8]
 8003794:	3301      	adds	r3, #1
 8003796:	b29a      	uxth	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	811a      	strh	r2, [r3, #8]
        p_pend_data_next = p_pend_list->HeadPtr;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	61fb      	str	r3, [r7, #28]
        while (p_pend_data_next != (OS_PEND_DATA *)0) {               /*         Find the position where to insert    */
 80037a2:	e00b      	b.n	80037bc <OS_PendListInsertPrio+0x6c>
            p_tcb_next   = p_pend_data_next->TCBPtr;
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	613b      	str	r3, [r7, #16]
            if (prio < p_tcb_next->Prio) {
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80037b0:	7dfa      	ldrb	r2, [r7, #23]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d306      	bcc.n	80037c4 <OS_PendListInsertPrio+0x74>
                break;                                                /*         Found! ... insert BEFORE current     */
            } else {
                p_pend_data_next = p_pend_data_next->NextPtr;         /*         Not Found, follow the list           */
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	61fb      	str	r3, [r7, #28]
        p_pend_list->HeadPtr    = p_pend_data;                        /*                                              */
        p_pend_list->TailPtr    = p_pend_data;
    } else {
        p_pend_list->NbrEntries++;                                    /* CASE 1: One more OS_PEND_DATA in the list    */
        p_pend_data_next = p_pend_list->HeadPtr;
        while (p_pend_data_next != (OS_PEND_DATA *)0) {               /*         Find the position where to insert    */
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1f0      	bne.n	80037a4 <OS_PendListInsertPrio+0x54>
 80037c2:	e000      	b.n	80037c6 <OS_PendListInsertPrio+0x76>
            p_tcb_next   = p_pend_data_next->TCBPtr;
            if (prio < p_tcb_next->Prio) {
                break;                                                /*         Found! ... insert BEFORE current     */
 80037c4:	bf00      	nop
            } else {
                p_pend_data_next = p_pend_data_next->NextPtr;         /*         Not Found, follow the list           */
            }
        }
        if (p_pend_data_next == (OS_PEND_DATA *)0) {                  /*         TCB to insert is lower in prio       */
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10f      	bne.n	80037ec <OS_PendListInsertPrio+0x9c>
            p_pend_data->NextPtr      = (OS_PEND_DATA *)0;            /*         ... insert at the tail.              */
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	2200      	movs	r2, #0
 80037d0:	605a      	str	r2, [r3, #4]
            p_pend_data_prev          = p_pend_list->TailPtr;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	60fb      	str	r3, [r7, #12]
            p_pend_data->PrevPtr      = p_pend_data_prev;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	601a      	str	r2, [r3, #0]
            p_pend_data_prev->NextPtr = p_pend_data;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	605a      	str	r2, [r3, #4]
            p_pend_list->TailPtr      = p_pend_data;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	605a      	str	r2, [r3, #4]
                p_pend_data_prev->NextPtr  = p_pend_data;
                p_pend_data_next->PrevPtr  = p_pend_data;
            }
        }
    }
}
 80037ea:	e01f      	b.n	800382c <OS_PendListInsertPrio+0xdc>
            p_pend_data_prev          = p_pend_list->TailPtr;
            p_pend_data->PrevPtr      = p_pend_data_prev;
            p_pend_data_prev->NextPtr = p_pend_data;
            p_pend_list->TailPtr      = p_pend_data;
        } else {
            if (p_pend_data_next->PrevPtr == (OS_PEND_DATA *)0) {     /*         Is new TCB highest priority?         */
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10c      	bne.n	800380e <OS_PendListInsertPrio+0xbe>
                p_pend_data_next->PrevPtr  = p_pend_data;             /*         Yes, insert as new Head of list      */
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	601a      	str	r2, [r3, #0]
                p_pend_data->PrevPtr       = (OS_PEND_DATA *)0;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]
                p_pend_data->NextPtr       = p_pend_data_next;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	69fa      	ldr	r2, [r7, #28]
 8003804:	605a      	str	r2, [r3, #4]
                p_pend_list->HeadPtr       = p_pend_data;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	601a      	str	r2, [r3, #0]
                p_pend_data_prev->NextPtr  = p_pend_data;
                p_pend_data_next->PrevPtr  = p_pend_data;
            }
        }
    }
}
 800380c:	e00e      	b.n	800382c <OS_PendListInsertPrio+0xdc>
                p_pend_data_next->PrevPtr  = p_pend_data;             /*         Yes, insert as new Head of list      */
                p_pend_data->PrevPtr       = (OS_PEND_DATA *)0;
                p_pend_data->NextPtr       = p_pend_data_next;
                p_pend_list->HeadPtr       = p_pend_data;
            } else {
                p_pend_data_prev           = p_pend_data_next->PrevPtr;/*        No,  insert in between two entries   */
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	60fb      	str	r3, [r7, #12]
                p_pend_data->PrevPtr       = p_pend_data_prev;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	601a      	str	r2, [r3, #0]
                p_pend_data->NextPtr       = p_pend_data_next;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	69fa      	ldr	r2, [r7, #28]
 800381e:	605a      	str	r2, [r3, #4]
                p_pend_data_prev->NextPtr  = p_pend_data;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	605a      	str	r2, [r3, #4]
                p_pend_data_next->PrevPtr  = p_pend_data;
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	601a      	str	r2, [r3, #0]
            }
        }
    }
}
 800382c:	bf00      	nop
 800382e:	3724      	adds	r7, #36	; 0x24
 8003830:	46bd      	mov	sp, r7
 8003832:	bc80      	pop	{r7}
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop

08003838 <OS_PendListRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_PendListRemove (OS_TCB  *p_tcb)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
    OS_PEND_LIST   *p_pend_list;
    OS_PEND_OBJ    *p_obj;



    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to the first OS_PEND_DATA to remove      */
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003844:	613b      	str	r3, [r7, #16]
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get number of entries in the table             */
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800384c:	82fb      	strh	r3, [r7, #22]

    while (n_pend_list > (OS_OBJ_QTY)0) {
 800384e:	e00f      	b.n	8003870 <OS_PendListRemove+0x38>
        p_obj       =  p_pend_data->PendObjPtr;                     /* Get pointer to pend list                       */
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	60fb      	str	r3, [r7, #12]
        p_pend_list = &p_obj->PendList;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	3308      	adds	r3, #8
 800385a:	60bb      	str	r3, [r7, #8]
        OS_PendListRemove1(p_pend_list,
 800385c:	6939      	ldr	r1, [r7, #16]
 800385e:	68b8      	ldr	r0, [r7, #8]
 8003860:	f000 f814 	bl	800388c <OS_PendListRemove1>
                           p_pend_data);
        p_pend_data++;
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	3320      	adds	r3, #32
 8003868:	613b      	str	r3, [r7, #16]
        n_pend_list--;
 800386a:	8afb      	ldrh	r3, [r7, #22]
 800386c:	3b01      	subs	r3, #1
 800386e:	82fb      	strh	r3, [r7, #22]


    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to the first OS_PEND_DATA to remove      */
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get number of entries in the table             */

    while (n_pend_list > (OS_OBJ_QTY)0) {
 8003870:	8afb      	ldrh	r3, [r7, #22]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1ec      	bne.n	8003850 <OS_PendListRemove+0x18>
        OS_PendListRemove1(p_pend_list,
                           p_pend_data);
        p_pend_data++;
        n_pend_list--;
    }
    p_tcb->PendDataTblEntries = (OS_OBJ_QTY    )0;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    p_tcb->PendDataTblPtr     = (OS_PEND_DATA *)0;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003884:	bf00      	nop
 8003886:	3718      	adds	r7, #24
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <OS_PendListRemove1>:
************************************************************************************************************************
*/

void  OS_PendListRemove1 (OS_PEND_LIST  *p_pend_list,
                          OS_PEND_DATA  *p_pend_data)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
    OS_PEND_DATA  *p_prev;
    OS_PEND_DATA  *p_next;



    if (p_pend_list->NbrEntries == 1u) {
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	891b      	ldrh	r3, [r3, #8]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d106      	bne.n	80038ac <OS_PendListRemove1+0x20>
        p_pend_list->HeadPtr = (OS_PEND_DATA *)0;           /* Only one entry in the pend list                        */
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	601a      	str	r2, [r3, #0]
        p_pend_list->TailPtr = (OS_PEND_DATA *)0;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	605a      	str	r2, [r3, #4]
 80038aa:	e027      	b.n	80038fc <OS_PendListRemove1+0x70>

    } else if (p_pend_data->PrevPtr == (OS_PEND_DATA *)0) { /* See if entry is at the head of the list                */
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d109      	bne.n	80038c8 <OS_PendListRemove1+0x3c>
        p_next               = p_pend_data->NextPtr;        /* Yes                                                    */
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	60fb      	str	r3, [r7, #12]
        p_next->PrevPtr      = (OS_PEND_DATA *)0;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	601a      	str	r2, [r3, #0]
        p_pend_list->HeadPtr = p_next;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	e019      	b.n	80038fc <OS_PendListRemove1+0x70>

    } else if (p_pend_data->NextPtr == (OS_PEND_DATA *)0) { /* See if entry is at the tail of the list                */
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d109      	bne.n	80038e4 <OS_PendListRemove1+0x58>
        p_prev               = p_pend_data->PrevPtr;        /* Yes                                                    */
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	60bb      	str	r3, [r7, #8]
        p_prev->NextPtr      = (OS_PEND_DATA *)0;
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	2200      	movs	r2, #0
 80038da:	605a      	str	r2, [r3, #4]
        p_pend_list->TailPtr = p_prev;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	605a      	str	r2, [r3, #4]
 80038e2:	e00b      	b.n	80038fc <OS_PendListRemove1+0x70>

    } else {
        p_prev               = p_pend_data->PrevPtr;        /* Remove from inside the list                            */
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	60bb      	str	r3, [r7, #8]
        p_next               = p_pend_data->NextPtr;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	60fb      	str	r3, [r7, #12]
        p_prev->NextPtr      = p_next;
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	605a      	str	r2, [r3, #4]
        p_next->PrevPtr      = p_prev;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	601a      	str	r2, [r3, #0]
    }
    p_pend_list->NbrEntries--;                              /* One less entry in the list                             */
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	891b      	ldrh	r3, [r3, #8]
 8003900:	3b01      	subs	r3, #1
 8003902:	b29a      	uxth	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	811a      	strh	r2, [r3, #8]
    p_pend_data->NextPtr = (OS_PEND_DATA *)0;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	2200      	movs	r2, #0
 800390c:	605a      	str	r2, [r3, #4]
    p_pend_data->PrevPtr = (OS_PEND_DATA *)0;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
}
 8003914:	bf00      	nop
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	bc80      	pop	{r7}
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop

08003920 <OS_Post>:
void  OS_Post (OS_PEND_OBJ  *p_obj,
               OS_TCB       *p_tcb,
               void         *p_void,
               OS_MSG_SIZE   msg_size,
               CPU_TS        ts)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af02      	add	r7, sp, #8
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
 800392c:	807b      	strh	r3, [r7, #2]
    switch (p_tcb->TaskState) {
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003934:	2b07      	cmp	r3, #7
 8003936:	f200 8086 	bhi.w	8003a46 <OS_Post+0x126>
 800393a:	a201      	add	r2, pc, #4	; (adr r2, 8003940 <OS_Post+0x20>)
 800393c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003940:	08003a47 	.word	0x08003a47
 8003944:	08003a47 	.word	0x08003a47
 8003948:	08003961 	.word	0x08003961
 800394c:	08003961 	.word	0x08003961
 8003950:	08003a47 	.word	0x08003a47
 8003954:	08003a47 	.word	0x08003a47
 8003958:	080039d7 	.word	0x080039d7
 800395c:	080039d7 	.word	0x080039d7
        case OS_TASK_STATE_DLY_SUSPENDED:                        /* Cannot Post a suspended task that was also dly'd  */
             break;

        case OS_TASK_STATE_PEND:
        case OS_TASK_STATE_PEND_TIMEOUT:
             if (p_tcb->PendOn == OS_TASK_PEND_ON_MULTI) {
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003966:	2b03      	cmp	r3, #3
 8003968:	d109      	bne.n	800397e <OS_Post+0x5e>
                 OS_Post1(p_obj,                                 /* Indicate which object was posted to               */
 800396a:	887a      	ldrh	r2, [r7, #2]
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	4613      	mov	r3, r2
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	68b9      	ldr	r1, [r7, #8]
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f000 f86a 	bl	8003a50 <OS_Post1>
 800397c:	e009      	b.n	8003992 <OS_Post+0x72>
                          p_void,
                          msg_size,
                          ts);
             } else {
#if (OS_MSG_EN > 0u)
                 p_tcb->MsgPtr  = p_void;                        /* Deposit message in OS_TCB of task waiting         */
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	659a      	str	r2, [r3, #88]	; 0x58
                 p_tcb->MsgSize = msg_size;                      /* ... assuming posting a message                    */
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	887a      	ldrh	r2, [r7, #2]
 8003988:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
#endif
                 p_tcb->TS      = ts;
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	649a      	str	r2, [r3, #72]	; 0x48
             }
             if (p_obj != (OS_PEND_OBJ *)0) {
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d006      	beq.n	80039a6 <OS_Post+0x86>
                 OS_PendListRemove(p_tcb);                       /* Remove task from wait list(s)                     */
 8003998:	68b8      	ldr	r0, [r7, #8]
 800399a:	f7ff ff4d 	bl	8003838 <OS_PendListRemove>
#if OS_CFG_DBG_EN > 0u
                 OS_PendDbgNameRemove(p_obj,
 800399e:	68b9      	ldr	r1, [r7, #8]
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f7ff fe73 	bl	800368c <OS_PendDbgNameRemove>
                                      p_tcb);
#endif
             }
             if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT) {
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80039ac:	2b03      	cmp	r3, #3
 80039ae:	d102      	bne.n	80039b6 <OS_Post+0x96>
                 OS_TickListRemove(p_tcb);                       /* Remove from tick list                             */
 80039b0:	68b8      	ldr	r0, [r7, #8]
 80039b2:	f000 fbab 	bl	800410c <OS_TickListRemove>
             }
             OS_RdyListInsert(p_tcb);                            /* Insert the task in the ready list                 */
 80039b6:	68b8      	ldr	r0, [r7, #8]
 80039b8:	f000 f89e 	bl	8003af8 <OS_RdyListInsert>
             p_tcb->TaskState  = OS_TASK_STATE_RDY;
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             p_tcb->PendStatus = OS_STATUS_PEND_OK;              /* Clear pend status                                 */
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
             p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;        /* Indicate no longer pending                        */
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
             break;
 80039d4:	e038      	b.n	8003a48 <OS_Post+0x128>

        case OS_TASK_STATE_PEND_SUSPENDED:
        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             if (p_tcb->PendOn == OS_TASK_PEND_ON_MULTI) {
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80039dc:	2b03      	cmp	r3, #3
 80039de:	d109      	bne.n	80039f4 <OS_Post+0xd4>
                 OS_Post1(p_obj,                                 /* Indicate which object was posted to               */
 80039e0:	887a      	ldrh	r2, [r7, #2]
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	4613      	mov	r3, r2
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	68b9      	ldr	r1, [r7, #8]
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f000 f82f 	bl	8003a50 <OS_Post1>
 80039f2:	e009      	b.n	8003a08 <OS_Post+0xe8>
                          p_void,
                          msg_size,
                          ts);
             } else {
#if (OS_MSG_EN > 0u)
                 p_tcb->MsgPtr  = p_void;                        /* Deposit message in OS_TCB of task waiting         */
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	659a      	str	r2, [r3, #88]	; 0x58
                 p_tcb->MsgSize = msg_size;                      /* ... assuming posting a message                    */
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	887a      	ldrh	r2, [r7, #2]
 80039fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
#endif
                 p_tcb->TS      = ts;
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	649a      	str	r2, [r3, #72]	; 0x48
             }
             if (p_obj != (OS_PEND_OBJ *)0) {
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d006      	beq.n	8003a1c <OS_Post+0xfc>
                 OS_PendListRemove(p_tcb);                       /* Remove task from wait list(s)                     */
 8003a0e:	68b8      	ldr	r0, [r7, #8]
 8003a10:	f7ff ff12 	bl	8003838 <OS_PendListRemove>
#if OS_CFG_DBG_EN > 0u
                 OS_PendDbgNameRemove(p_obj,
 8003a14:	68b9      	ldr	r1, [r7, #8]
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f7ff fe38 	bl	800368c <OS_PendDbgNameRemove>
                                      p_tcb);
#endif
             }
             if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED) {
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003a22:	2b07      	cmp	r3, #7
 8003a24:	d102      	bne.n	8003a2c <OS_Post+0x10c>
                 OS_TickListRemove(p_tcb);                       /* Cancel any timeout                                */
 8003a26:	68b8      	ldr	r0, [r7, #8]
 8003a28:	f000 fb70 	bl	800410c <OS_TickListRemove>
             }
             p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	2204      	movs	r2, #4
 8003a30:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             p_tcb->PendStatus = OS_STATUS_PEND_OK;              /* Clear pend status                                 */
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
             p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;        /* Indicate no longer pending                        */
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
             break;
 8003a44:	e000      	b.n	8003a48 <OS_Post+0x128>

        default:
             break;
 8003a46:	bf00      	nop
    }
}
 8003a48:	bf00      	nop
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <OS_Post1>:
void  OS_Post1 (OS_PEND_OBJ  *p_obj,
                OS_TCB       *p_tcb,
                void         *p_void,
                OS_MSG_SIZE   msg_size,
                CPU_TS        ts)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b087      	sub	sp, #28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
 8003a5c:	807b      	strh	r3, [r7, #2]
    OS_OBJ_QTY      n_pend_list;                                    /* Number of pend lists                           */
    OS_PEND_DATA   *p_pend_data;



    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to the first OS_PEND_DATA to remove      */
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a62:	613b      	str	r3, [r7, #16]
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get number of entries in the table             */
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a6a:	82fb      	strh	r3, [r7, #22]

    while (n_pend_list > (OS_OBJ_QTY)0) {                           /* Mark posted object in OS_PEND_DATA table       */
 8003a6c:	e017      	b.n	8003a9e <OS_Post1+0x4e>
        if (p_obj == p_pend_data->PendObjPtr) {                     /* Did we find the object posted to?              */
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	68da      	ldr	r2, [r3, #12]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d10c      	bne.n	8003a92 <OS_Post1+0x42>
            p_pend_data->RdyObjPtr  = p_obj;                        /* Yes, indicate the object in the .RdyObjPtr     */
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	611a      	str	r2, [r3, #16]
            p_pend_data->RdyMsgPtr  = p_void;                       /*      store the message posted                  */
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	615a      	str	r2, [r3, #20]
            p_pend_data->RdyMsgSize = msg_size;                     /*      store the size of the message posted      */
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	887a      	ldrh	r2, [r7, #2]
 8003a88:	831a      	strh	r2, [r3, #24]
            p_pend_data->RdyTS      = ts;                           /*      save the timestamp of the post            */
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	6a3a      	ldr	r2, [r7, #32]
 8003a8e:	61da      	str	r2, [r3, #28]
            break;
 8003a90:	e008      	b.n	8003aa4 <OS_Post1+0x54>
        }
        p_pend_data++;
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	3320      	adds	r3, #32
 8003a96:	613b      	str	r3, [r7, #16]
        n_pend_list--;
 8003a98:	8afb      	ldrh	r3, [r7, #22]
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	82fb      	strh	r3, [r7, #22]


    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to the first OS_PEND_DATA to remove      */
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get number of entries in the table             */

    while (n_pend_list > (OS_OBJ_QTY)0) {                           /* Mark posted object in OS_PEND_DATA table       */
 8003a9e:	8afb      	ldrh	r3, [r7, #22]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1e4      	bne.n	8003a6e <OS_Post1+0x1e>
            break;
        }
        p_pend_data++;
        n_pend_list--;
    }
}
 8003aa4:	bf00      	nop
 8003aa6:	371c      	adds	r7, #28
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bc80      	pop	{r7}
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop

08003ab0 <OS_RdyListInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_RdyListInit (void)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
    OS_PRIO       i;
    OS_RDY_LIST  *p_rdy_list;



    for (i = 0u; i < OS_CFG_PRIO_MAX; i++) {                /* Initialize the array of OS_RDY_LIST at each priority   */
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	71fb      	strb	r3, [r7, #7]
 8003aba:	e013      	b.n	8003ae4 <OS_RdyListInit+0x34>
        p_rdy_list = &OSRdyList[i];
 8003abc:	79fa      	ldrb	r2, [r7, #7]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	4413      	add	r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	4a0b      	ldr	r2, [pc, #44]	; (8003af4 <OS_RdyListInit+0x44>)
 8003ac8:	4413      	add	r3, r2
 8003aca:	603b      	str	r3, [r7, #0]
        p_rdy_list->NbrEntries = (OS_OBJ_QTY)0;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	811a      	strh	r2, [r3, #8]
        p_rdy_list->HeadPtr    = (OS_TCB   *)0;
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	601a      	str	r2, [r3, #0]
        p_rdy_list->TailPtr    = (OS_TCB   *)0;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	2200      	movs	r2, #0
 8003adc:	605a      	str	r2, [r3, #4]
    OS_PRIO       i;
    OS_RDY_LIST  *p_rdy_list;



    for (i = 0u; i < OS_CFG_PRIO_MAX; i++) {                /* Initialize the array of OS_RDY_LIST at each priority   */
 8003ade:	79fb      	ldrb	r3, [r7, #7]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	71fb      	strb	r3, [r7, #7]
 8003ae4:	79fb      	ldrb	r3, [r7, #7]
 8003ae6:	2b1f      	cmp	r3, #31
 8003ae8:	d9e8      	bls.n	8003abc <OS_RdyListInit+0xc>
        p_rdy_list = &OSRdyList[i];
        p_rdy_list->NbrEntries = (OS_OBJ_QTY)0;
        p_rdy_list->HeadPtr    = (OS_TCB   *)0;
        p_rdy_list->TailPtr    = (OS_TCB   *)0;
    }
}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bc80      	pop	{r7}
 8003af2:	4770      	bx	lr
 8003af4:	20002384 	.word	0x20002384

08003af8 <OS_RdyListInsert>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_RdyListInsert (OS_TCB  *p_tcb)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
    OS_PrioInsert(p_tcb->Prio);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 ffda 	bl	8004ac0 <OS_PrioInsert>
    if (p_tcb->Prio == OSPrioCur) {                         /* Are we readying a task at the same prio?               */
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8003b12:	4b07      	ldr	r3, [pc, #28]	; (8003b30 <OS_RdyListInsert+0x38>)
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d103      	bne.n	8003b22 <OS_RdyListInsert+0x2a>
        OS_RdyListInsertTail(p_tcb);                        /* Yes, insert readied task at the end of the list        */
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f84a 	bl	8003bb4 <OS_RdyListInsertTail>
    }

#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_READY(p_tcb);                         /* Record the event.                                      */
#endif
}
 8003b20:	e002      	b.n	8003b28 <OS_RdyListInsert+0x30>
{
    OS_PrioInsert(p_tcb->Prio);
    if (p_tcb->Prio == OSPrioCur) {                         /* Are we readying a task at the same prio?               */
        OS_RdyListInsertTail(p_tcb);                        /* Yes, insert readied task at the end of the list        */
    } else {
        OS_RdyListInsertHead(p_tcb);                        /* No,  insert readied task at the beginning of the list  */
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f806 	bl	8003b34 <OS_RdyListInsertHead>
    }

#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_READY(p_tcb);                         /* Record the event.                                      */
#endif
}
 8003b28:	bf00      	nop
 8003b2a:	3708      	adds	r7, #8
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	20002510 	.word	0x20002510

08003b34 <OS_RdyListInsertHead>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListInsertHead (OS_TCB  *p_tcb)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
    OS_RDY_LIST  *p_rdy_list;
    OS_TCB       *p_tcb2;



    p_rdy_list = &OSRdyList[p_tcb->Prio];
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8003b42:	461a      	mov	r2, r3
 8003b44:	4613      	mov	r3, r2
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	4413      	add	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4a18      	ldr	r2, [pc, #96]	; (8003bb0 <OS_RdyListInsertHead+0x7c>)
 8003b4e:	4413      	add	r3, r2
 8003b50:	60fb      	str	r3, [r7, #12]
    if (p_rdy_list->NbrEntries == (OS_OBJ_QTY)0) {          /* CASE 0: Insert when there are no entries               */
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	891b      	ldrh	r3, [r3, #8]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10f      	bne.n	8003b7a <OS_RdyListInsertHead+0x46>
        p_rdy_list->NbrEntries =  (OS_OBJ_QTY)1;            /*         This is the first entry                        */
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	811a      	strh	r2, [r3, #8]
        p_tcb->NextPtr         =  (OS_TCB   *)0;            /*         No other OS_TCBs in the list                   */
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	60da      	str	r2, [r3, #12]
        p_tcb->PrevPtr         =  (OS_TCB   *)0;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	611a      	str	r2, [r3, #16]
        p_rdy_list->HeadPtr    =  p_tcb;                    /*         Both list pointers point to this OS_TCB        */
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	601a      	str	r2, [r3, #0]
        p_rdy_list->TailPtr    =  p_tcb;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	605a      	str	r2, [r3, #4]
        p_tcb->PrevPtr         = (OS_TCB    *)0;
        p_tcb2                 = p_rdy_list->HeadPtr;       /*         Adjust old head of list's links                */
        p_tcb2->PrevPtr        = p_tcb;
        p_rdy_list->HeadPtr    = p_tcb;
    }
}
 8003b78:	e015      	b.n	8003ba6 <OS_RdyListInsertHead+0x72>
        p_tcb->NextPtr         =  (OS_TCB   *)0;            /*         No other OS_TCBs in the list                   */
        p_tcb->PrevPtr         =  (OS_TCB   *)0;
        p_rdy_list->HeadPtr    =  p_tcb;                    /*         Both list pointers point to this OS_TCB        */
        p_rdy_list->TailPtr    =  p_tcb;
    } else {                                                /* CASE 1: Insert BEFORE the current head of list         */
        p_rdy_list->NbrEntries++;                           /*         One more OS_TCB in the list                    */
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	891b      	ldrh	r3, [r3, #8]
 8003b7e:	3301      	adds	r3, #1
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	811a      	strh	r2, [r3, #8]
        p_tcb->NextPtr         = p_rdy_list->HeadPtr;       /*         Adjust new OS_TCBs links                       */
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	60da      	str	r2, [r3, #12]
        p_tcb->PrevPtr         = (OS_TCB    *)0;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	611a      	str	r2, [r3, #16]
        p_tcb2                 = p_rdy_list->HeadPtr;       /*         Adjust old head of list's links                */
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	60bb      	str	r3, [r7, #8]
        p_tcb2->PrevPtr        = p_tcb;
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	611a      	str	r2, [r3, #16]
        p_rdy_list->HeadPtr    = p_tcb;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	601a      	str	r2, [r3, #0]
    }
}
 8003ba6:	bf00      	nop
 8003ba8:	3714      	adds	r7, #20
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bc80      	pop	{r7}
 8003bae:	4770      	bx	lr
 8003bb0:	20002384 	.word	0x20002384

08003bb4 <OS_RdyListInsertTail>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListInsertTail (OS_TCB  *p_tcb)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
    OS_RDY_LIST  *p_rdy_list;
    OS_TCB       *p_tcb2;



    p_rdy_list = &OSRdyList[p_tcb->Prio];
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	4413      	add	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	4a18      	ldr	r2, [pc, #96]	; (8003c30 <OS_RdyListInsertTail+0x7c>)
 8003bce:	4413      	add	r3, r2
 8003bd0:	60fb      	str	r3, [r7, #12]
    if (p_rdy_list->NbrEntries == (OS_OBJ_QTY)0) {          /* CASE 0: Insert when there are no entries               */
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	891b      	ldrh	r3, [r3, #8]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10f      	bne.n	8003bfa <OS_RdyListInsertTail+0x46>
        p_rdy_list->NbrEntries  = (OS_OBJ_QTY)1;            /*         This is the first entry                        */
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	811a      	strh	r2, [r3, #8]
        p_tcb->NextPtr          = (OS_TCB   *)0;            /*         No other OS_TCBs in the list                   */
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	60da      	str	r2, [r3, #12]
        p_tcb->PrevPtr          = (OS_TCB   *)0;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	611a      	str	r2, [r3, #16]
        p_rdy_list->HeadPtr     = p_tcb;                    /*         Both list pointers point to this OS_TCB        */
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	601a      	str	r2, [r3, #0]
        p_rdy_list->TailPtr     = p_tcb;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	605a      	str	r2, [r3, #4]
        p_tcb2                  = p_rdy_list->TailPtr;
        p_tcb->PrevPtr          = p_tcb2;
        p_tcb2->NextPtr         = p_tcb;                    /*         Adjust old tail of list's links                */
        p_rdy_list->TailPtr     = p_tcb;
    }
}
 8003bf8:	e014      	b.n	8003c24 <OS_RdyListInsertTail+0x70>
        p_tcb->NextPtr          = (OS_TCB   *)0;            /*         No other OS_TCBs in the list                   */
        p_tcb->PrevPtr          = (OS_TCB   *)0;
        p_rdy_list->HeadPtr     = p_tcb;                    /*         Both list pointers point to this OS_TCB        */
        p_rdy_list->TailPtr     = p_tcb;
    } else {                                                /* CASE 1: Insert AFTER the current tail of list          */
        p_rdy_list->NbrEntries++;                           /*         One more OS_TCB in the list                    */
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	891b      	ldrh	r3, [r3, #8]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	811a      	strh	r2, [r3, #8]
        p_tcb->NextPtr          = (OS_TCB   *)0;            /*         Adjust new OS_TCBs links                       */
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	60da      	str	r2, [r3, #12]
        p_tcb2                  = p_rdy_list->TailPtr;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	60bb      	str	r3, [r7, #8]
        p_tcb->PrevPtr          = p_tcb2;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	611a      	str	r2, [r3, #16]
        p_tcb2->NextPtr         = p_tcb;                    /*         Adjust old tail of list's links                */
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	60da      	str	r2, [r3, #12]
        p_rdy_list->TailPtr     = p_tcb;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	605a      	str	r2, [r3, #4]
    }
}
 8003c24:	bf00      	nop
 8003c26:	3714      	adds	r7, #20
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bc80      	pop	{r7}
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	20002384 	.word	0x20002384

08003c34 <OS_RdyListRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListRemove (OS_TCB  *p_tcb)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
    OS_TCB       *p_tcb1;
    OS_TCB       *p_tcb2;



    p_rdy_list = &OSRdyList[p_tcb->Prio];
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8003c42:	461a      	mov	r2, r3
 8003c44:	4613      	mov	r3, r2
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	4413      	add	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4a24      	ldr	r2, [pc, #144]	; (8003ce0 <OS_RdyListRemove+0xac>)
 8003c4e:	4413      	add	r3, r2
 8003c50:	617b      	str	r3, [r7, #20]
    p_tcb1     = p_tcb->PrevPtr;                            /* Point to next and previous OS_TCB in the list          */
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	613b      	str	r3, [r7, #16]
    p_tcb2     = p_tcb->NextPtr;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	60fb      	str	r3, [r7, #12]
    if (p_tcb1 == (OS_TCB *)0) {                            /* Was the OS_TCB to remove was at the head?              */
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d11f      	bne.n	8003ca4 <OS_RdyListRemove+0x70>
        if (p_tcb2 == (OS_TCB *)0) {                        /* Yes, was it the only OS_TCB?                           */
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10f      	bne.n	8003c8a <OS_RdyListRemove+0x56>
            p_rdy_list->NbrEntries = (OS_OBJ_QTY)0;         /*      Yes, no more entries                              */
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	811a      	strh	r2, [r3, #8]
            p_rdy_list->HeadPtr    = (OS_TCB   *)0;
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	2200      	movs	r2, #0
 8003c74:	601a      	str	r2, [r3, #0]
            p_rdy_list->TailPtr    = (OS_TCB   *)0;
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	605a      	str	r2, [r3, #4]
            OS_PrioRemove(p_tcb->Prio);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 ff42 	bl	8004b0c <OS_PrioRemove>
 8003c88:	e01f      	b.n	8003cca <OS_RdyListRemove+0x96>
        } else {
            p_rdy_list->NbrEntries--;                       /*      No,  one less entry                               */
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	891b      	ldrh	r3, [r3, #8]
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	811a      	strh	r2, [r3, #8]
            p_tcb2->PrevPtr        = (OS_TCB   *)0;         /*           adjust back link of new list head            */
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	611a      	str	r2, [r3, #16]
            p_rdy_list->HeadPtr    = p_tcb2;                /*           adjust OS_RDY_LIST's new head                */
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	601a      	str	r2, [r3, #0]
 8003ca2:	e012      	b.n	8003cca <OS_RdyListRemove+0x96>
        }
    } else {
        p_rdy_list->NbrEntries--;                           /* No,  one less entry                                    */
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	891b      	ldrh	r3, [r3, #8]
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	811a      	strh	r2, [r3, #8]
        p_tcb1->NextPtr = p_tcb2;
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	60da      	str	r2, [r3, #12]
        if (p_tcb2 == (OS_TCB *)0) {
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d103      	bne.n	8003cc4 <OS_RdyListRemove+0x90>
            p_rdy_list->TailPtr = p_tcb1;                   /*      Removing the TCB at the tail, adj the tail ptr    */
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	605a      	str	r2, [r3, #4]
 8003cc2:	e002      	b.n	8003cca <OS_RdyListRemove+0x96>
        } else {
            p_tcb2->PrevPtr     = p_tcb1;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	611a      	str	r2, [r3, #16]
        }
    }
    p_tcb->PrevPtr = (OS_TCB *)0;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	611a      	str	r2, [r3, #16]
    p_tcb->NextPtr = (OS_TCB *)0;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	60da      	str	r2, [r3, #12]

#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_TASK_SUSPEND(p_tcb);                           /* Record the event.                                      */
#endif
}
 8003cd6:	bf00      	nop
 8003cd8:	3718      	adds	r7, #24
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	20002384 	.word	0x20002384

08003ce4 <OS_SchedLockTimeMeasStart>:
************************************************************************************************************************
*/

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
void  OS_SchedLockTimeMeasStart (void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
    if (OSSchedLockNestingCtr == 1u) {
 8003ce8:	4b05      	ldr	r3, [pc, #20]	; (8003d00 <OS_SchedLockTimeMeasStart+0x1c>)
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d104      	bne.n	8003cfa <OS_SchedLockTimeMeasStart+0x16>
        OSSchedLockTimeBegin = CPU_TS_TmrRd();
 8003cf0:	f003 f9bc 	bl	800706c <CPU_TS_TmrRd>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	4b03      	ldr	r3, [pc, #12]	; (8003d04 <OS_SchedLockTimeMeasStart+0x20>)
 8003cf8:	601a      	str	r2, [r3, #0]
    }
}
 8003cfa:	bf00      	nop
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	20002370 	.word	0x20002370
 8003d04:	200025d8 	.word	0x200025d8

08003d08 <OS_SchedLockTimeMeasStop>:




void  OS_SchedLockTimeMeasStop (void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
    CPU_TS_TMR  delta;


    if (OSSchedLockNestingCtr == (OS_NESTING_CTR)0) {       /* Make sure we fully un-nested scheduler lock            */
 8003d0e:	4b0f      	ldr	r3, [pc, #60]	; (8003d4c <OS_SchedLockTimeMeasStop+0x44>)
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d116      	bne.n	8003d44 <OS_SchedLockTimeMeasStop+0x3c>
        delta = CPU_TS_TmrRd()                              /* Compute the delta time between begin and end           */
 8003d16:	f003 f9a9 	bl	800706c <CPU_TS_TmrRd>
 8003d1a:	4602      	mov	r2, r0
              - OSSchedLockTimeBegin;
 8003d1c:	4b0c      	ldr	r3, [pc, #48]	; (8003d50 <OS_SchedLockTimeMeasStop+0x48>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
{
    CPU_TS_TMR  delta;


    if (OSSchedLockNestingCtr == (OS_NESTING_CTR)0) {       /* Make sure we fully un-nested scheduler lock            */
        delta = CPU_TS_TmrRd()                              /* Compute the delta time between begin and end           */
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	607b      	str	r3, [r7, #4]
              - OSSchedLockTimeBegin;
        if (OSSchedLockTimeMax    < delta) {                /* Detect peak value                                      */
 8003d24:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <OS_SchedLockTimeMeasStop+0x4c>)
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d202      	bcs.n	8003d34 <OS_SchedLockTimeMeasStop+0x2c>
            OSSchedLockTimeMax    = delta;
 8003d2e:	4a09      	ldr	r2, [pc, #36]	; (8003d54 <OS_SchedLockTimeMeasStop+0x4c>)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6013      	str	r3, [r2, #0]
        }
        if (OSSchedLockTimeMaxCur < delta) {                /* Detect peak value (for resettable value)               */
 8003d34:	4b08      	ldr	r3, [pc, #32]	; (8003d58 <OS_SchedLockTimeMeasStop+0x50>)
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d202      	bcs.n	8003d44 <OS_SchedLockTimeMeasStop+0x3c>
            OSSchedLockTimeMaxCur = delta;
 8003d3e:	4a06      	ldr	r2, [pc, #24]	; (8003d58 <OS_SchedLockTimeMeasStop+0x50>)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6013      	str	r3, [r2, #0]
        }
    }
}
 8003d44:	bf00      	nop
 8003d46:	3708      	adds	r7, #8
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	20002370 	.word	0x20002370
 8003d50:	200025d8 	.word	0x200025d8
 8003d54:	200027fc 	.word	0x200027fc
 8003d58:	200025ec 	.word	0x200025ec

08003d5c <OS_TaskBlock>:
************************************************************************************************************************
*/

void  OS_TaskBlock (OS_TCB   *p_tcb,
                    OS_TICK   timeout)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
    if (timeout > (OS_TICK)0) {                             /* Add task to tick list if timeout non zero               */
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d009      	beq.n	8003d80 <OS_TaskBlock+0x24>
        OS_TickListInsert(&OSTickListTimeout, p_tcb, timeout);
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	6879      	ldr	r1, [r7, #4]
 8003d70:	4809      	ldr	r0, [pc, #36]	; (8003d98 <OS_TaskBlock+0x3c>)
 8003d72:	f000 f8b1 	bl	8003ed8 <OS_TickListInsert>
        p_tcb->TaskState = OS_TASK_STATE_PEND_TIMEOUT;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2203      	movs	r2, #3
 8003d7a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8003d7e:	e003      	b.n	8003d88 <OS_TaskBlock+0x2c>
    } else {
        p_tcb->TaskState = OS_TASK_STATE_PEND;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2202      	movs	r2, #2
 8003d84:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    }
    OS_RdyListRemove(p_tcb);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f7ff ff53 	bl	8003c34 <OS_RdyListRemove>
}
 8003d8e:	bf00      	nop
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	200028ec 	.word	0x200028ec

08003d9c <OS_TickTask>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TickTask (void  *p_arg)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b088      	sub	sp, #32
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
    OS_ERR  err;
    CPU_TS  ts_delta;
    CPU_TS  ts_delta_dly;
    CPU_TS  ts_delta_timeout;
    CPU_SR_ALLOC();
 8003da4:	2300      	movs	r3, #0
 8003da6:	61fb      	str	r3, [r7, #28]


    (void)&p_arg;                                               /* Prevent compiler warning                             */

    while (DEF_ON) {
        (void)OSTaskSemPend((OS_TICK  )0,
 8003da8:	f107 030e 	add.w	r3, r7, #14
 8003dac:	2200      	movs	r2, #0
 8003dae:	2100      	movs	r1, #0
 8003db0:	2000      	movs	r0, #0
 8003db2:	f7fe fa41 	bl	8002238 <OSTaskSemPend>
                            (OS_OPT   )OS_OPT_PEND_BLOCKING,
                            (CPU_TS  *)0,
                            (OS_ERR  *)&err);                   /* Wait for signal from tick interrupt                  */
        if (err == OS_ERR_NONE) {
 8003db6:	89fb      	ldrh	r3, [r7, #14]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1f5      	bne.n	8003da8 <OS_TickTask+0xc>
            OS_CRITICAL_ENTER();
 8003dbc:	f7fc fa90 	bl	80002e0 <CPU_SR_Save>
 8003dc0:	61f8      	str	r0, [r7, #28]
            OSTickCtr++;                                        /* Keep track of the number of ticks                    */
 8003dc2:	4b0d      	ldr	r3, [pc, #52]	; (8003df8 <OS_TickTask+0x5c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	4a0b      	ldr	r2, [pc, #44]	; (8003df8 <OS_TickTask+0x5c>)
 8003dca:	6013      	str	r3, [r2, #0]
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
            TRACE_OS_TICK_INCREMENT(OSTickCtr);                 /* Record the event.                                    */
#endif
            OS_CRITICAL_EXIT();
 8003dcc:	69f8      	ldr	r0, [r7, #28]
 8003dce:	f7fc fa8b 	bl	80002e8 <CPU_SR_Restore>
            ts_delta_dly     = OS_TickListUpdateDly();
 8003dd2:	f000 fa05 	bl	80041e0 <OS_TickListUpdateDly>
 8003dd6:	61b8      	str	r0, [r7, #24]
            ts_delta_timeout = OS_TickListUpdateTimeout();
 8003dd8:	f000 fa64 	bl	80042a4 <OS_TickListUpdateTimeout>
 8003ddc:	6178      	str	r0, [r7, #20]
            ts_delta         = ts_delta_dly + ts_delta_timeout; /* Compute total execution time of list updates         */
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	4413      	add	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]
            if (OSTickTaskTimeMax < ts_delta) {
 8003de6:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <OS_TickTask+0x60>)
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d2db      	bcs.n	8003da8 <OS_TickTask+0xc>
                OSTickTaskTimeMax = ts_delta;
 8003df0:	4a02      	ldr	r2, [pc, #8]	; (8003dfc <OS_TickTask+0x60>)
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	6013      	str	r3, [r2, #0]
            }
        }
    }
 8003df6:	e7d7      	b.n	8003da8 <OS_TickTask+0xc>
 8003df8:	200027dc 	.word	0x200027dc
 8003dfc:	200028d0 	.word	0x200028d0

08003e00 <OS_TickTaskInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TickTaskInit (OS_ERR  *p_err)
{
 8003e00:	b590      	push	{r4, r7, lr}
 8003e02:	b08d      	sub	sp, #52	; 0x34
 8003e04:	af0a      	add	r7, sp, #40	; 0x28
 8003e06:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    OSTickCtr                    = (OS_TICK)0u;                         /* Clear the tick counter                            */
 8003e08:	4b28      	ldr	r3, [pc, #160]	; (8003eac <OS_TickTaskInit+0xac>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	601a      	str	r2, [r3, #0]

    OSTickListDly.TCB_Ptr        = (OS_TCB   *)0;
 8003e0e:	4b28      	ldr	r3, [pc, #160]	; (8003eb0 <OS_TickTaskInit+0xb0>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	601a      	str	r2, [r3, #0]
    OSTickListTimeout.TCB_Ptr    = (OS_TCB   *)0;
 8003e14:	4b27      	ldr	r3, [pc, #156]	; (8003eb4 <OS_TickTaskInit+0xb4>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	601a      	str	r2, [r3, #0]

#if OS_CFG_DBG_EN > 0u
    OSTickListDly.NbrEntries     = (OS_OBJ_QTY)0;
 8003e1a:	4b25      	ldr	r3, [pc, #148]	; (8003eb0 <OS_TickTaskInit+0xb0>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	809a      	strh	r2, [r3, #4]
    OSTickListDly.NbrUpdated     = (OS_OBJ_QTY)0;
 8003e20:	4b23      	ldr	r3, [pc, #140]	; (8003eb0 <OS_TickTaskInit+0xb0>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	80da      	strh	r2, [r3, #6]

    OSTickListTimeout.NbrEntries = (OS_OBJ_QTY)0;
 8003e26:	4b23      	ldr	r3, [pc, #140]	; (8003eb4 <OS_TickTaskInit+0xb4>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	809a      	strh	r2, [r3, #4]
    OSTickListTimeout.NbrUpdated = (OS_OBJ_QTY)0;
 8003e2c:	4b21      	ldr	r3, [pc, #132]	; (8003eb4 <OS_TickTaskInit+0xb4>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	80da      	strh	r2, [r3, #6]
#endif

                                                                        /* ---------------- CREATE THE TICK TASK ----------- */
    if (OSCfg_TickTaskStkBasePtr == (CPU_STK *)0) {
 8003e32:	4b21      	ldr	r3, [pc, #132]	; (8003eb8 <OS_TickTaskInit+0xb8>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d104      	bne.n	8003e44 <OS_TickTaskInit+0x44>
       *p_err = OS_ERR_TICK_STK_INVALID;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f247 2212 	movw	r2, #29202	; 0x7212
 8003e40:	801a      	strh	r2, [r3, #0]
        return;
 8003e42:	e02f      	b.n	8003ea4 <OS_TickTaskInit+0xa4>
    }

    if (OSCfg_TickTaskStkSize < OSCfg_StkSizeMin) {
 8003e44:	4b1d      	ldr	r3, [pc, #116]	; (8003ebc <OS_TickTaskInit+0xbc>)
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	4b1d      	ldr	r3, [pc, #116]	; (8003ec0 <OS_TickTaskInit+0xc0>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d204      	bcs.n	8003e5a <OS_TickTaskInit+0x5a>
       *p_err = OS_ERR_TICK_STK_SIZE_INVALID;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f247 2213 	movw	r2, #29203	; 0x7213
 8003e56:	801a      	strh	r2, [r3, #0]
        return;
 8003e58:	e024      	b.n	8003ea4 <OS_TickTaskInit+0xa4>
    }

    if (OSCfg_TickTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {                 /* Only one task at the 'Idle Task' priority         */
 8003e5a:	4b1a      	ldr	r3, [pc, #104]	; (8003ec4 <OS_TickTaskInit+0xc4>)
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	2b1e      	cmp	r3, #30
 8003e60:	d904      	bls.n	8003e6c <OS_TickTaskInit+0x6c>
       *p_err = OS_ERR_TICK_PRIO_INVALID;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f247 2211 	movw	r2, #29201	; 0x7211
 8003e68:	801a      	strh	r2, [r3, #0]
        return;
 8003e6a:	e01b      	b.n	8003ea4 <OS_TickTaskInit+0xa4>
    }

    OSTaskCreate((OS_TCB     *)&OSTickTaskTCB,
 8003e6c:	4b15      	ldr	r3, [pc, #84]	; (8003ec4 <OS_TickTaskInit+0xc4>)
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	4a11      	ldr	r2, [pc, #68]	; (8003eb8 <OS_TickTaskInit+0xb8>)
 8003e72:	6812      	ldr	r2, [r2, #0]
 8003e74:	4914      	ldr	r1, [pc, #80]	; (8003ec8 <OS_TickTaskInit+0xc8>)
 8003e76:	6809      	ldr	r1, [r1, #0]
 8003e78:	4810      	ldr	r0, [pc, #64]	; (8003ebc <OS_TickTaskInit+0xbc>)
 8003e7a:	6800      	ldr	r0, [r0, #0]
 8003e7c:	687c      	ldr	r4, [r7, #4]
 8003e7e:	9408      	str	r4, [sp, #32]
 8003e80:	240b      	movs	r4, #11
 8003e82:	9407      	str	r4, [sp, #28]
 8003e84:	2400      	movs	r4, #0
 8003e86:	9406      	str	r4, [sp, #24]
 8003e88:	2400      	movs	r4, #0
 8003e8a:	9405      	str	r4, [sp, #20]
 8003e8c:	2400      	movs	r4, #0
 8003e8e:	9404      	str	r4, [sp, #16]
 8003e90:	9003      	str	r0, [sp, #12]
 8003e92:	9102      	str	r1, [sp, #8]
 8003e94:	9201      	str	r2, [sp, #4]
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	2300      	movs	r3, #0
 8003e9a:	4a0c      	ldr	r2, [pc, #48]	; (8003ecc <OS_TickTaskInit+0xcc>)
 8003e9c:	490c      	ldr	r1, [pc, #48]	; (8003ed0 <OS_TickTaskInit+0xd0>)
 8003e9e:	480d      	ldr	r0, [pc, #52]	; (8003ed4 <OS_TickTaskInit+0xd4>)
 8003ea0:	f7fe f89a 	bl	8001fd8 <OSTaskCreate>
                 (OS_MSG_QTY  )0u,
                 (OS_TICK     )0u,
                 (void       *)0,
                 (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR | OS_OPT_TASK_NO_TLS),
                 (OS_ERR     *)p_err);
}
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd90      	pop	{r4, r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	200027dc 	.word	0x200027dc
 8003eb0:	200028e0 	.word	0x200028e0
 8003eb4:	200028ec 	.word	0x200028ec
 8003eb8:	0800df54 	.word	0x0800df54
 8003ebc:	0800df5c 	.word	0x0800df5c
 8003ec0:	0800df48 	.word	0x0800df48
 8003ec4:	0800df50 	.word	0x0800df50
 8003ec8:	0800df58 	.word	0x0800df58
 8003ecc:	08003d9d 	.word	0x08003d9d
 8003ed0:	0800de5c 	.word	0x0800de5c
 8003ed4:	20002514 	.word	0x20002514

08003ed8 <OS_TickListInsert>:
*/

void  OS_TickListInsert (OS_TICK_LIST  *p_list,
                         OS_TCB        *p_tcb,
                         OS_TICK        time)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b089      	sub	sp, #36	; 0x24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
    OS_TCB  *p_tcb1;
    OS_TCB  *p_tcb2;
    OS_TICK  remain;


    if (p_list->TCB_Ptr == (OS_TCB *)0) {                               /* Is the list empty?                                */
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d112      	bne.n	8003f12 <OS_TickListInsert+0x3a>
        p_tcb->TickRemain  = time;                                      /* Yes, Store time in TCB                            */
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	651a      	str	r2, [r3, #80]	; 0x50
        p_tcb->TickNextPtr = (OS_TCB *)0;
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	615a      	str	r2, [r3, #20]
        p_tcb->TickPrevPtr = (OS_TCB *)0;
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	2200      	movs	r2, #0
 8003efc:	619a      	str	r2, [r3, #24]
        p_tcb->TickListPtr = (OS_TICK_LIST *)p_list;                    /*      Link to this list                            */
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	61da      	str	r2, [r3, #28]
        p_list->TCB_Ptr    = p_tcb;                                     /*      Point to TCB of task to place in the list    */
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	601a      	str	r2, [r3, #0]
#if OS_CFG_DBG_EN > 0u
        p_list->NbrEntries = 1u;                                        /*      List contains 1 entry                        */
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	809a      	strh	r2, [r3, #4]
 8003f10:	e074      	b.n	8003ffc <OS_TickListInsert+0x124>
#endif
    } else {
        p_tcb1 = p_list->TCB_Ptr;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	61fb      	str	r3, [r7, #28]
        p_tcb2 = p_list->TCB_Ptr;                                       /* No,  Insert somewhere in the list in delta order  */
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	61bb      	str	r3, [r7, #24]
        remain = time;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	617b      	str	r3, [r7, #20]
        while (p_tcb2 != (OS_TCB *)0) {
 8003f22:	e053      	b.n	8003fcc <OS_TickListInsert+0xf4>
            if (remain <= p_tcb2->TickRemain) {
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d344      	bcc.n	8003fb8 <OS_TickListInsert+0xe0>
                if (p_tcb2->TickPrevPtr == (OS_TCB *)0) {               /*      Insert before the first entry in the list?   */
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d11e      	bne.n	8003f74 <OS_TickListInsert+0x9c>
                    p_tcb->TickRemain   = remain;                       /*      Yes, Store remaining time                    */                                          
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	651a      	str	r2, [r3, #80]	; 0x50
                    p_tcb->TickPrevPtr  = (OS_TCB *)0;
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	619a      	str	r2, [r3, #24]
                    p_tcb->TickNextPtr  = p_tcb2;    
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	615a      	str	r2, [r3, #20]
                    p_tcb->TickListPtr  = (OS_TICK_LIST *)p_list;       /*           Link TCB to this list                   */
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	61da      	str	r2, [r3, #28]
                    p_tcb2->TickRemain -= remain;                       /*           Reduce time of next entry in the list   */
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	1ad2      	subs	r2, r2, r3
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	651a      	str	r2, [r3, #80]	; 0x50
                    p_tcb2->TickPrevPtr = p_tcb;
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	619a      	str	r2, [r3, #24]
                    p_list->TCB_Ptr     = p_tcb;                        /*           Add TCB to the list                     */
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	601a      	str	r2, [r3, #0]
#if OS_CFG_DBG_EN > 0u
                    p_list->NbrEntries++;                               /*           List contains an extra entry            */
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	889b      	ldrh	r3, [r3, #4]
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	809a      	strh	r2, [r3, #4]
                    p_tcb1->TickNextPtr = p_tcb;
#if OS_CFG_DBG_EN > 0u
                    p_list->NbrEntries++;                               /*           List contains an extra entry            */
#endif
                }
                return;
 8003f72:	e043      	b.n	8003ffc <OS_TickListInsert+0x124>
                    p_list->TCB_Ptr     = p_tcb;                        /*           Add TCB to the list                     */
#if OS_CFG_DBG_EN > 0u
                    p_list->NbrEntries++;                               /*           List contains an extra entry            */
#endif
                } else {                                                /*      No,  Insert somewhere further in the list    */
                    p_tcb1              = p_tcb2->TickPrevPtr;
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	61fb      	str	r3, [r7, #28]
                    p_tcb->TickRemain   = remain;                       /*           Store remaining time                    */
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	651a      	str	r2, [r3, #80]	; 0x50
                    p_tcb->TickPrevPtr  = p_tcb1;
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	69fa      	ldr	r2, [r7, #28]
 8003f84:	619a      	str	r2, [r3, #24]
                    p_tcb->TickNextPtr  = p_tcb2;    
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	615a      	str	r2, [r3, #20]
                    p_tcb->TickListPtr  = (OS_TICK_LIST *)p_list;       /*           TCB points to this list                 */
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	61da      	str	r2, [r3, #28]
                    p_tcb2->TickRemain -= remain;                       /*           Reduce time of next entry in the list   */
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	1ad2      	subs	r2, r2, r3
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	651a      	str	r2, [r3, #80]	; 0x50
                    p_tcb2->TickPrevPtr = p_tcb;
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	68ba      	ldr	r2, [r7, #8]
 8003fa2:	619a      	str	r2, [r3, #24]
                    p_tcb1->TickNextPtr = p_tcb;
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	615a      	str	r2, [r3, #20]
#if OS_CFG_DBG_EN > 0u
                    p_list->NbrEntries++;                               /*           List contains an extra entry            */
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	889b      	ldrh	r3, [r3, #4]
 8003fae:	3301      	adds	r3, #1
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	809a      	strh	r2, [r3, #4]
#endif
                }
                return;
 8003fb6:	e021      	b.n	8003ffc <OS_TickListInsert+0x124>
            } else {
                remain -= p_tcb2->TickRemain;                           /*           Point to the next TCB in the list       */
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	617b      	str	r3, [r7, #20]
                p_tcb1  = p_tcb2;
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	61fb      	str	r3, [r7, #28]
                p_tcb2  = p_tcb2->TickNextPtr;
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	61bb      	str	r3, [r7, #24]
#endif
    } else {
        p_tcb1 = p_list->TCB_Ptr;
        p_tcb2 = p_list->TCB_Ptr;                                       /* No,  Insert somewhere in the list in delta order  */
        remain = time;
        while (p_tcb2 != (OS_TCB *)0) {
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1a8      	bne.n	8003f24 <OS_TickListInsert+0x4c>
                remain -= p_tcb2->TickRemain;                           /*           Point to the next TCB in the list       */
                p_tcb1  = p_tcb2;
                p_tcb2  = p_tcb2->TickNextPtr;
            }                 
        }
        p_tcb->TickRemain   = remain;                       
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	651a      	str	r2, [r3, #80]	; 0x50
        p_tcb->TickPrevPtr  = p_tcb1;
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	69fa      	ldr	r2, [r7, #28]
 8003fdc:	619a      	str	r2, [r3, #24]
        p_tcb->TickNextPtr  = (OS_TCB *)0;    
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	615a      	str	r2, [r3, #20]
        p_tcb->TickListPtr  = (OS_TICK_LIST *)p_list;                   /*           Link the list to the TCB                */
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	61da      	str	r2, [r3, #28]
        p_tcb1->TickNextPtr = p_tcb;
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	615a      	str	r2, [r3, #20]
#if OS_CFG_DBG_EN > 0u
        p_list->NbrEntries++;                                           /*           List contains an extra entry            */
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	889b      	ldrh	r3, [r3, #4]
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	809a      	strh	r2, [r3, #4]
#endif
    }
}
 8003ffc:	3724      	adds	r7, #36	; 0x24
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bc80      	pop	{r7}
 8004002:	4770      	bx	lr

08004004 <OS_TickListInsertDly>:

void  OS_TickListInsertDly (OS_TCB   *p_tcb,
                            OS_TICK   time,
                            OS_OPT    opt,
                            OS_ERR   *p_err)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	603b      	str	r3, [r7, #0]
 8004010:	4613      	mov	r3, r2
 8004012:	80fb      	strh	r3, [r7, #6]
    OS_TICK   remain;



    if (opt == OS_OPT_TIME_MATCH) {                                     /* MATCH to absolute OSTickCtr value mode            */
 8004014:	88fb      	ldrh	r3, [r7, #6]
 8004016:	2b04      	cmp	r3, #4
 8004018:	d113      	bne.n	8004042 <OS_TickListInsertDly+0x3e>
        remain = time - OSTickCtr;
 800401a:	4b3a      	ldr	r3, [pc, #232]	; (8004104 <OS_TickListInsertDly+0x100>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	617b      	str	r3, [r7, #20]
        if ((remain > OS_TICK_TH_RDY) ||                                /* If delay already occurred, ...                    */
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800402a:	d802      	bhi.n	8004032 <OS_TickListInsertDly+0x2e>
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d158      	bne.n	80040e4 <OS_TickListInsertDly+0xe0>
            (remain == (OS_TICK)0u)) {
            p_tcb->TickRemain = (OS_TICK)0u;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	651a      	str	r2, [r3, #80]	; 0x50
           *p_err             =  OS_ERR_TIME_ZERO_DLY;                  /* ... do NOT delay.                                 */
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	f247 227e 	movw	r2, #29310	; 0x727e
 800403e:	801a      	strh	r2, [r3, #0]
            return;
 8004040:	e05c      	b.n	80040fc <OS_TickListInsertDly+0xf8>
        }

    } else if (opt == OS_OPT_TIME_PERIODIC) {                           /* PERIODIC mode.                                    */
 8004042:	88fb      	ldrh	r3, [r7, #6]
 8004044:	2b08      	cmp	r3, #8
 8004046:	d13f      	bne.n	80040c8 <OS_TickListInsertDly+0xc4>
        if ((OSTickCtr - p_tcb->TickCtrPrev) > time) {
 8004048:	4b2e      	ldr	r3, [pc, #184]	; (8004104 <OS_TickListInsertDly+0x100>)
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004050:	1ad2      	subs	r2, r2, r3
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	429a      	cmp	r2, r3
 8004056:	d908      	bls.n	800406a <OS_TickListInsertDly+0x66>
            remain             = time;                                  /* ... first time we load .TickCtrPrev               */
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	617b      	str	r3, [r7, #20]
            p_tcb->TickCtrPrev = OSTickCtr + time;
 800405c:	4b29      	ldr	r3, [pc, #164]	; (8004104 <OS_TickListInsertDly+0x100>)
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	441a      	add	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	655a      	str	r2, [r3, #84]	; 0x54
 8004068:	e03c      	b.n	80040e4 <OS_TickListInsertDly+0xe0>
        } else {
            remain = time - (OSTickCtr - p_tcb->TickCtrPrev);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800406e:	4b25      	ldr	r3, [pc, #148]	; (8004104 <OS_TickListInsertDly+0x100>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	1ad2      	subs	r2, r2, r3
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	4413      	add	r3, r2
 8004078:	617b      	str	r3, [r7, #20]
            if ((remain > OS_TICK_TH_RDY) ||                            /* If delay time has already passed, ...             */
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004080:	d802      	bhi.n	8004088 <OS_TickListInsertDly+0x84>
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d118      	bne.n	80040ba <OS_TickListInsertDly+0xb6>
                (remain == (OS_TICK)0u)) {
                p_tcb->TickCtrPrev += time + time * ((OSTickCtr - p_tcb->TickCtrPrev) / time); /* Try to recover the period  */
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800408c:	4b1d      	ldr	r3, [pc, #116]	; (8004104 <OS_TickListInsertDly+0x100>)
 800408e:	6819      	ldr	r1, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004094:	1ac9      	subs	r1, r1, r3
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	fbb1 f3f3 	udiv	r3, r1, r3
 800409c:	3301      	adds	r3, #1
 800409e:	68b9      	ldr	r1, [r7, #8]
 80040a0:	fb01 f303 	mul.w	r3, r1, r3
 80040a4:	441a      	add	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	655a      	str	r2, [r3, #84]	; 0x54
                p_tcb->TickRemain   = (OS_TICK)0u;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	651a      	str	r2, [r3, #80]	; 0x50
               *p_err               =  OS_ERR_TIME_ZERO_DLY;            /* ... do NOT delay.                                 */
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	f247 227e 	movw	r2, #29310	; 0x727e
 80040b6:	801a      	strh	r2, [r3, #0]
                return;
 80040b8:	e020      	b.n	80040fc <OS_TickListInsertDly+0xf8>
            }
            p_tcb->TickCtrPrev += time;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	441a      	add	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	655a      	str	r2, [r3, #84]	; 0x54
 80040c6:	e00d      	b.n	80040e4 <OS_TickListInsertDly+0xe0>
        }

    } else if (time > (OS_TICK)0u) {                                    /* RELATIVE time delay mode                          */
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d002      	beq.n	80040d4 <OS_TickListInsertDly+0xd0>
        remain = time;
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	617b      	str	r3, [r7, #20]
 80040d2:	e007      	b.n	80040e4 <OS_TickListInsertDly+0xe0>

    } else {                                                            /* Zero time delay; ...                              */
        p_tcb->TickRemain = (OS_TICK)0u;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	651a      	str	r2, [r3, #80]	; 0x50
       *p_err             =  OS_ERR_TIME_ZERO_DLY;                      /* ... do NOT delay.                                 */
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	f247 227e 	movw	r2, #29310	; 0x727e
 80040e0:	801a      	strh	r2, [r3, #0]
        return;
 80040e2:	e00b      	b.n	80040fc <OS_TickListInsertDly+0xf8>
    }

    p_tcb->TaskState = OS_TASK_STATE_DLY;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    OS_TickListInsert(&OSTickListDly, p_tcb, remain);
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	68f9      	ldr	r1, [r7, #12]
 80040f0:	4805      	ldr	r0, [pc, #20]	; (8004108 <OS_TickListInsertDly+0x104>)
 80040f2:	f7ff fef1 	bl	8003ed8 <OS_TickListInsert>

   *p_err = OS_ERR_NONE;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	2200      	movs	r2, #0
 80040fa:	801a      	strh	r2, [r3, #0]
}
 80040fc:	3718      	adds	r7, #24
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	200027dc 	.word	0x200027dc
 8004108:	200028e0 	.word	0x200028e0

0800410c <OS_TickListRemove>:
*              2) This function is assumed to be called with interrupts disabled.
************************************************************************************************************************
*/

void  OS_TickListRemove (OS_TCB  *p_tcb)
{
 800410c:	b480      	push	{r7}
 800410e:	b087      	sub	sp, #28
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
    OS_TICK_LIST  *p_list;
    OS_TCB        *p_tcb1;
    OS_TCB        *p_tcb2;


    p_list = (OS_TICK_LIST *)p_tcb->TickListPtr;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	69db      	ldr	r3, [r3, #28]
 8004118:	617b      	str	r3, [r7, #20]
    p_tcb1  = p_tcb->TickPrevPtr;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	613b      	str	r3, [r7, #16]
    p_tcb2  = p_tcb->TickNextPtr;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	60fb      	str	r3, [r7, #12]
    if (p_tcb1 == (OS_TCB *)0) {
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d12c      	bne.n	8004186 <OS_TickListRemove+0x7a>
        if (p_tcb2 == (OS_TCB *)0) {                                    /* Remove ONLY entry in the list?                    */
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10c      	bne.n	800414c <OS_TickListRemove+0x40>
            p_list->TCB_Ptr    = (OS_TCB        *)0;
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	2200      	movs	r2, #0
 8004136:	601a      	str	r2, [r3, #0]
#if OS_CFG_DBG_EN > 0u
            p_list->NbrEntries = (OS_OBJ_QTY    )0u;
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	2200      	movs	r2, #0
 800413c:	809a      	strh	r2, [r3, #4]
#endif
            p_tcb->TickRemain   = (OS_TICK       )0u;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	651a      	str	r2, [r3, #80]	; 0x50
            p_tcb->TickListPtr  = (OS_TICK_LIST *)0;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	61da      	str	r2, [r3, #28]
#endif
        p_tcb->TickNextPtr  = (OS_TCB       *)0;
        p_tcb->TickRemain   = (OS_TICK       )0u;
        p_tcb->TickListPtr  = (OS_TICK_LIST *)0;
    }
}
 800414a:	e03e      	b.n	80041ca <OS_TickListRemove+0xbe>
            p_list->NbrEntries = (OS_OBJ_QTY    )0u;
#endif
            p_tcb->TickRemain   = (OS_TICK       )0u;
            p_tcb->TickListPtr  = (OS_TICK_LIST *)0;
        } else {
            p_tcb2->TickPrevPtr = (OS_TCB       *)0;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	619a      	str	r2, [r3, #24]
            p_tcb2->TickRemain += p_tcb->TickRemain;                    /* Add back the ticks to the delta                   */
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800415a:	441a      	add	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	651a      	str	r2, [r3, #80]	; 0x50
            p_list->TCB_Ptr    = p_tcb2;
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	601a      	str	r2, [r3, #0]
#if OS_CFG_DBG_EN > 0u
            p_list->NbrEntries--;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	889b      	ldrh	r3, [r3, #4]
 800416a:	3b01      	subs	r3, #1
 800416c:	b29a      	uxth	r2, r3
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	809a      	strh	r2, [r3, #4]
#endif
            p_tcb->TickNextPtr  = (OS_TCB       *)0;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	615a      	str	r2, [r3, #20]
            p_tcb->TickRemain   = (OS_TICK       )0u;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	651a      	str	r2, [r3, #80]	; 0x50
            p_tcb->TickListPtr  = (OS_TICK_LIST *)0;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	61da      	str	r2, [r3, #28]
#endif
        p_tcb->TickNextPtr  = (OS_TCB       *)0;
        p_tcb->TickRemain   = (OS_TICK       )0u;
        p_tcb->TickListPtr  = (OS_TICK_LIST *)0;
    }
}
 8004184:	e021      	b.n	80041ca <OS_TickListRemove+0xbe>
            p_tcb->TickNextPtr  = (OS_TCB       *)0;
            p_tcb->TickRemain   = (OS_TICK       )0u;
            p_tcb->TickListPtr  = (OS_TICK_LIST *)0;
        }
    } else {
        p_tcb1->TickNextPtr = p_tcb2;    
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	615a      	str	r2, [r3, #20]
        if (p_tcb2 != (OS_TCB *)0) {
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d009      	beq.n	80041a6 <OS_TickListRemove+0x9a>
            p_tcb2->TickPrevPtr = p_tcb1;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	619a      	str	r2, [r3, #24]
            p_tcb2->TickRemain += p_tcb->TickRemain;                    /* Add back the ticks to the delta list              */
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a0:	441a      	add	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	651a      	str	r2, [r3, #80]	; 0x50
        }
        p_tcb->TickPrevPtr  = (OS_TCB       *)0;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	619a      	str	r2, [r3, #24]
#if OS_CFG_DBG_EN > 0u
        p_list->NbrEntries--;
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	889b      	ldrh	r3, [r3, #4]
 80041b0:	3b01      	subs	r3, #1
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	809a      	strh	r2, [r3, #4]
#endif
        p_tcb->TickNextPtr  = (OS_TCB       *)0;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	615a      	str	r2, [r3, #20]
        p_tcb->TickRemain   = (OS_TICK       )0u;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	651a      	str	r2, [r3, #80]	; 0x50
        p_tcb->TickListPtr  = (OS_TICK_LIST *)0;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	61da      	str	r2, [r3, #28]
    }
}
 80041ca:	bf00      	nop
 80041cc:	371c      	adds	r7, #28
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bc80      	pop	{r7}
 80041d2:	4770      	bx	lr

080041d4 <OS_TickListResetPeak>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TickListResetPeak (void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
#if OS_CFG_DBG_EN > 0u
#endif
}
 80041d8:	bf00      	nop
 80041da:	46bd      	mov	sp, r7
 80041dc:	bc80      	pop	{r7}
 80041de:	4770      	bx	lr

080041e0 <OS_TickListUpdateDly>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

static  CPU_TS  OS_TickListUpdateDly (void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
    CPU_TS        ts_start;
    CPU_TS        ts_delta_dly;
#if OS_CFG_DBG_EN > 0u
    OS_OBJ_QTY    nbr_updated;
#endif
    CPU_SR_ALLOC();
 80041e6:	2300      	movs	r3, #0
 80041e8:	60fb      	str	r3, [r7, #12]

                                                              
                                                                        
    OS_CRITICAL_ENTER();
 80041ea:	f7fc f879 	bl	80002e0 <CPU_SR_Save>
 80041ee:	60f8      	str	r0, [r7, #12]
    ts_start    = OS_TS_GET();
 80041f0:	f002 ff3c 	bl	800706c <CPU_TS_TmrRd>
 80041f4:	60b8      	str	r0, [r7, #8]
#if OS_CFG_DBG_EN > 0u
    nbr_updated = (OS_OBJ_QTY)0u;
 80041f6:	2300      	movs	r3, #0
 80041f8:	827b      	strh	r3, [r7, #18]
#endif
    p_list      = &OSTickListDly;
 80041fa:	4b29      	ldr	r3, [pc, #164]	; (80042a0 <OS_TickListUpdateDly+0xc0>)
 80041fc:	607b      	str	r3, [r7, #4]
    p_tcb       = p_list->TCB_Ptr;                                      
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	617b      	str	r3, [r7, #20]
    if (p_tcb != (OS_TCB *)0) {
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d039      	beq.n	800427e <OS_TickListUpdateDly+0x9e>
        p_tcb->TickRemain--;
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800420e:	1e5a      	subs	r2, r3, #1
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	651a      	str	r2, [r3, #80]	; 0x50
        while (p_tcb->TickRemain == 0u) {
 8004214:	e02f      	b.n	8004276 <OS_TickListUpdateDly+0x96>
#if OS_CFG_DBG_EN > 0u
            nbr_updated++;											    /* Keep track of the number of TCBs updated          */
 8004216:	8a7b      	ldrh	r3, [r7, #18]
 8004218:	3301      	adds	r3, #1
 800421a:	827b      	strh	r3, [r7, #18]
#endif
            if (p_tcb->TaskState == OS_TASK_STATE_DLY) {
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004222:	2b01      	cmp	r3, #1
 8004224:	d107      	bne.n	8004236 <OS_TickListUpdateDly+0x56>
                p_tcb->TaskState = OS_TASK_STATE_RDY;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                OS_RdyListInsert(p_tcb);                                /* Insert the task in the ready list                 */
 800422e:	6978      	ldr	r0, [r7, #20]
 8004230:	f7ff fc62 	bl	8003af8 <OS_RdyListInsert>
 8004234:	e008      	b.n	8004248 <OS_TickListUpdateDly+0x68>
            } else if (p_tcb->TaskState == OS_TASK_STATE_DLY_SUSPENDED) {
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800423c:	2b05      	cmp	r3, #5
 800423e:	d103      	bne.n	8004248 <OS_TickListUpdateDly+0x68>
                p_tcb->TaskState = OS_TASK_STATE_SUSPENDED;
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	2204      	movs	r2, #4
 8004244:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
            }

            p_list->TCB_Ptr = p_tcb->TickNextPtr;
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	695a      	ldr	r2, [r3, #20]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	601a      	str	r2, [r3, #0]
            p_tcb           = p_list->TCB_Ptr;                          /* Get 'p_tcb' again for loop                        */
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	617b      	str	r3, [r7, #20]
            if (p_tcb == (OS_TCB *)0) {
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d103      	bne.n	8004264 <OS_TickListUpdateDly+0x84>
#if OS_CFG_DBG_EN > 0u
                p_list->NbrEntries = (OS_OBJ_QTY)0u;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	809a      	strh	r2, [r3, #4]
#endif
                break;
 8004262:	e00c      	b.n	800427e <OS_TickListUpdateDly+0x9e>
            } else {
#if OS_CFG_DBG_EN > 0u
                p_list->NbrEntries--;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	889b      	ldrh	r3, [r3, #4]
 8004268:	3b01      	subs	r3, #1
 800426a:	b29a      	uxth	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	809a      	strh	r2, [r3, #4]
#endif
                p_tcb->TickPrevPtr = (OS_TCB *)0;
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	2200      	movs	r2, #0
 8004274:	619a      	str	r2, [r3, #24]
#endif
    p_list      = &OSTickListDly;
    p_tcb       = p_list->TCB_Ptr;                                      
    if (p_tcb != (OS_TCB *)0) {
        p_tcb->TickRemain--;
        while (p_tcb->TickRemain == 0u) {
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0cb      	beq.n	8004216 <OS_TickListUpdateDly+0x36>
                p_tcb->TickPrevPtr = (OS_TCB *)0;
            }
        }
    }
#if OS_CFG_DBG_EN > 0u
    p_list->NbrUpdated = nbr_updated;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	8a7a      	ldrh	r2, [r7, #18]
 8004282:	80da      	strh	r2, [r3, #6]
#endif
    ts_delta_dly       = OS_TS_GET() - ts_start;                        /* Measure execution time of the update              */
 8004284:	f002 fef2 	bl	800706c <CPU_TS_TmrRd>
 8004288:	4602      	mov	r2, r0
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	603b      	str	r3, [r7, #0]
    OS_CRITICAL_EXIT();
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f7fc f829 	bl	80002e8 <CPU_SR_Restore>

    return (ts_delta_dly);
 8004296:	683b      	ldr	r3, [r7, #0]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3718      	adds	r7, #24
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	200028e0 	.word	0x200028e0

080042a4 <OS_TickListUpdateTimeout>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

static  CPU_TS  OS_TickListUpdateTimeout (void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b088      	sub	sp, #32
 80042a8:	af00      	add	r7, sp, #0
#endif
#if OS_CFG_MUTEX_EN > 0u
    OS_TCB       *p_tcb_owner;
    OS_PRIO       prio_new;
#endif
    CPU_SR_ALLOC();
 80042aa:	2300      	movs	r3, #0
 80042ac:	613b      	str	r3, [r7, #16]

                                                              
                                                                        
    OS_CRITICAL_ENTER();                                                /* ======= UPDATE TASKS WAITING WITH TIMEOUT ======= */
 80042ae:	f7fc f817 	bl	80002e0 <CPU_SR_Save>
 80042b2:	6138      	str	r0, [r7, #16]
    ts_start    = OS_TS_GET();
 80042b4:	f002 feda 	bl	800706c <CPU_TS_TmrRd>
 80042b8:	60f8      	str	r0, [r7, #12]
#if OS_CFG_DBG_EN > 0u
    nbr_updated = (OS_OBJ_QTY)0u;
 80042ba:	2300      	movs	r3, #0
 80042bc:	837b      	strh	r3, [r7, #26]
#endif
    p_list      = &OSTickListTimeout;
 80042be:	4b51      	ldr	r3, [pc, #324]	; (8004404 <OS_TickListUpdateTimeout+0x160>)
 80042c0:	60bb      	str	r3, [r7, #8]
    p_tcb       = p_list->TCB_Ptr;                                  
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	61fb      	str	r3, [r7, #28]
    if (p_tcb != (OS_TCB *)0) {
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f000 8089 	beq.w	80043e2 <OS_TickListUpdateTimeout+0x13e>
        p_tcb->TickRemain--;
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042d4:	1e5a      	subs	r2, r3, #1
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	651a      	str	r2, [r3, #80]	; 0x50
        while (p_tcb->TickRemain == 0u) {
 80042da:	e07d      	b.n	80043d8 <OS_TickListUpdateTimeout+0x134>
#if OS_CFG_DBG_EN > 0u
            nbr_updated++;
 80042dc:	8b7b      	ldrh	r3, [r7, #26]
 80042de:	3301      	adds	r3, #1
 80042e0:	837b      	strh	r3, [r7, #26]
#endif

#if OS_CFG_MUTEX_EN > 0u
            p_tcb_owner = (OS_TCB *)0;
 80042e2:	2300      	movs	r3, #0
 80042e4:	617b      	str	r3, [r7, #20]
            if (p_tcb->PendOn == OS_TASK_PEND_ON_MUTEX) {
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80042ec:	2b04      	cmp	r3, #4
 80042ee:	d104      	bne.n	80042fa <OS_TickListUpdateTimeout+0x56>
                p_tcb_owner = ((OS_MUTEX *)p_tcb->PendDataTblPtr->PendObjPtr)->OwnerTCBPtr;
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	617b      	str	r3, [r7, #20]
            }
#endif

#if (OS_MSG_EN > 0u)
            p_tcb->MsgPtr  = (void      *)0;
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	2200      	movs	r2, #0
 80042fe:	659a      	str	r2, [r3, #88]	; 0x58
            p_tcb->MsgSize = (OS_MSG_SIZE)0u;
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	2200      	movs	r2, #0
 8004304:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
#endif
            p_tcb->TS      = OS_TS_GET();
 8004308:	f002 feb0 	bl	800706c <CPU_TS_TmrRd>
 800430c:	4602      	mov	r2, r0
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	649a      	str	r2, [r3, #72]	; 0x48
            OS_PendListRemove(p_tcb);                                   /* Remove from wait list                             */
 8004312:	69f8      	ldr	r0, [r7, #28]
 8004314:	f7ff fa90 	bl	8003838 <OS_PendListRemove>
            if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT) {
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800431e:	2b03      	cmp	r3, #3
 8004320:	d107      	bne.n	8004332 <OS_TickListUpdateTimeout+0x8e>
                OS_RdyListInsert(p_tcb);                                /* Insert the task in the ready list                 */
 8004322:	69f8      	ldr	r0, [r7, #28]
 8004324:	f7ff fbe8 	bl	8003af8 <OS_RdyListInsert>
                p_tcb->TaskState  = OS_TASK_STATE_RDY;
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8004330:	e008      	b.n	8004344 <OS_TickListUpdateTimeout+0xa0>
            } else if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED) {
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004338:	2b07      	cmp	r3, #7
 800433a:	d103      	bne.n	8004344 <OS_TickListUpdateTimeout+0xa0>

                p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	2204      	movs	r2, #4
 8004340:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
            }
            p_tcb->PendStatus = OS_STATUS_PEND_TIMEOUT;                 /* Indicate pend timed out                           */
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	2203      	movs	r2, #3
 8004348:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;                /* Indicate no longer pending                        */
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if OS_CFG_MUTEX_EN > 0u
            if(p_tcb_owner != (OS_TCB *)0) {
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d027      	beq.n	80043aa <OS_TickListUpdateTimeout+0x106>
                if ((p_tcb_owner->Prio != p_tcb_owner->BasePrio) &&
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004366:	429a      	cmp	r2, r3
 8004368:	d01f      	beq.n	80043aa <OS_TickListUpdateTimeout+0x106>
                    (p_tcb_owner->Prio == p_tcb->Prio)) {               /* Has the owner inherited a priority?               */
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
            p_tcb->PendStatus = OS_STATUS_PEND_TIMEOUT;                 /* Indicate pend timed out                           */
            p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;                /* Indicate no longer pending                        */

#if OS_CFG_MUTEX_EN > 0u
            if(p_tcb_owner != (OS_TCB *)0) {
                if ((p_tcb_owner->Prio != p_tcb_owner->BasePrio) &&
 8004376:	429a      	cmp	r2, r3
 8004378:	d117      	bne.n	80043aa <OS_TickListUpdateTimeout+0x106>
                    (p_tcb_owner->Prio == p_tcb->Prio)) {               /* Has the owner inherited a priority?               */
                    prio_new = OS_MutexGrpPrioFindHighest(p_tcb_owner);
 800437a:	6978      	ldr	r0, [r7, #20]
 800437c:	f001 f836 	bl	80053ec <OS_MutexGrpPrioFindHighest>
 8004380:	4603      	mov	r3, r0
 8004382:	71fb      	strb	r3, [r7, #7]
                    prio_new = prio_new > p_tcb_owner->BasePrio ? p_tcb_owner->BasePrio : prio_new;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800438a:	79fb      	ldrb	r3, [r7, #7]
 800438c:	4293      	cmp	r3, r2
 800438e:	bf28      	it	cs
 8004390:	4613      	movcs	r3, r2
 8004392:	71fb      	strb	r3, [r7, #7]
                    if(prio_new != p_tcb_owner->Prio) {
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800439a:	79fa      	ldrb	r2, [r7, #7]
 800439c:	429a      	cmp	r2, r3
 800439e:	d004      	beq.n	80043aa <OS_TickListUpdateTimeout+0x106>
                        OS_TaskChangePrio(p_tcb_owner, prio_new);
 80043a0:	79fb      	ldrb	r3, [r7, #7]
 80043a2:	4619      	mov	r1, r3
 80043a4:	6978      	ldr	r0, [r7, #20]
 80043a6:	f7fe fbcb 	bl	8002b40 <OS_TaskChangePrio>
                    }
                }
            }
#endif

            p_list->TCB_Ptr = p_tcb->TickNextPtr;
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	695a      	ldr	r2, [r3, #20]
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	601a      	str	r2, [r3, #0]
            p_tcb           = p_list->TCB_Ptr;                          /* Get 'p_tcb' again for loop                        */
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	61fb      	str	r3, [r7, #28]
            if (p_tcb == (OS_TCB *)0) {
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d103      	bne.n	80043c6 <OS_TickListUpdateTimeout+0x122>
#if OS_CFG_DBG_EN > 0u
                p_list->NbrEntries = (OS_OBJ_QTY)0u;
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	2200      	movs	r2, #0
 80043c2:	809a      	strh	r2, [r3, #4]
#endif
                break;
 80043c4:	e00d      	b.n	80043e2 <OS_TickListUpdateTimeout+0x13e>
            } else {
#if OS_CFG_DBG_EN > 0u
                p_list->NbrEntries--;
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	889b      	ldrh	r3, [r3, #4]
 80043ca:	3b01      	subs	r3, #1
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	809a      	strh	r2, [r3, #4]
#endif
                p_tcb->TickPrevPtr = (OS_TCB *)0;
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	2200      	movs	r2, #0
 80043d6:	619a      	str	r2, [r3, #24]
#endif
    p_list      = &OSTickListTimeout;
    p_tcb       = p_list->TCB_Ptr;                                  
    if (p_tcb != (OS_TCB *)0) {
        p_tcb->TickRemain--;
        while (p_tcb->TickRemain == 0u) {
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f43f af7d 	beq.w	80042dc <OS_TickListUpdateTimeout+0x38>
                p_tcb->TickPrevPtr = (OS_TCB *)0;
            }
        }
    }
#if OS_CFG_DBG_EN > 0u
    p_list->NbrUpdated = nbr_updated;
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	8b7a      	ldrh	r2, [r7, #26]
 80043e6:	80da      	strh	r2, [r3, #6]
#endif
    ts_delta_timeout   = OS_TS_GET() - ts_start;                        /* Measure execution time of the update              */
 80043e8:	f002 fe40 	bl	800706c <CPU_TS_TmrRd>
 80043ec:	4602      	mov	r2, r0
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	603b      	str	r3, [r7, #0]
    OS_CRITICAL_EXIT();                                                 /* ------------------------------------------------- */
 80043f4:	6938      	ldr	r0, [r7, #16]
 80043f6:	f7fb ff77 	bl	80002e8 <CPU_SR_Restore>

    return (ts_delta_timeout);
 80043fa:	683b      	ldr	r3, [r7, #0]
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3720      	adds	r7, #32
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	200028ec 	.word	0x200028ec

08004408 <OS_FlagInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_FlagInit (OS_ERR  *p_err)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSFlagDbgListPtr = (OS_FLAG_GRP *)0;
 8004410:	4b06      	ldr	r3, [pc, #24]	; (800442c <OS_FlagInit+0x24>)
 8004412:	2200      	movs	r2, #0
 8004414:	601a      	str	r2, [r3, #0]
#endif

    OSFlagQty        = (OS_OBJ_QTY   )0;
 8004416:	4b06      	ldr	r3, [pc, #24]	; (8004430 <OS_FlagInit+0x28>)
 8004418:	2200      	movs	r2, #0
 800441a:	801a      	strh	r2, [r3, #0]
   *p_err            = OS_ERR_NONE;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	801a      	strh	r2, [r3, #0]
}
 8004422:	bf00      	nop
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	bc80      	pop	{r7}
 800442a:	4770      	bx	lr
 800442c:	200027f8 	.word	0x200027f8
 8004430:	200027f4 	.word	0x200027f4

08004434 <OSStatReset>:
* Returns    : none
************************************************************************************************************************
*/

void  OSStatReset (OS_ERR  *p_err)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
#endif
#if (OS_CFG_Q_EN > 0u)
    OS_Q        *p_q;
#endif
#endif
    CPU_SR_ALLOC();
 800443c:	2300      	movs	r3, #0
 800443e:	60fb      	str	r3, [r7, #12]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    CPU_CRITICAL_ENTER();
 8004440:	f7fb ff4e 	bl	80002e0 <CPU_SR_Save>
 8004444:	60f8      	str	r0, [r7, #12]
    OSIntQTaskTimeMax     = (CPU_TS    )0;                  /* Reset the task execution times                         */
    OSIntQNbrEntriesMax   = (OS_OBJ_QTY)0;                  /* Reset the queue maximum number of entries              */
#endif

#if OS_CFG_STAT_TASK_EN > 0u
    OSStatTaskCPUUsageMax = 0u;
 8004446:	4b3f      	ldr	r3, [pc, #252]	; (8004544 <OSStatReset+0x110>)
 8004448:	2200      	movs	r2, #0
 800444a:	801a      	strh	r2, [r3, #0]
    OSStatTaskTimeMax     = (CPU_TS)0;
 800444c:	4b3e      	ldr	r3, [pc, #248]	; (8004548 <OSStatReset+0x114>)
 800444e:	2200      	movs	r2, #0
 8004450:	601a      	str	r2, [r3, #0]
#endif

    OSTickTaskTimeMax     = (CPU_TS)0;
 8004452:	4b3e      	ldr	r3, [pc, #248]	; (800454c <OSStatReset+0x118>)
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]

#if OS_CFG_TMR_EN > 0u
    OSTmrTaskTimeMax      = (CPU_TS)0;
 8004458:	4b3d      	ldr	r3, [pc, #244]	; (8004550 <OSStatReset+0x11c>)
 800445a:	2200      	movs	r2, #0
 800445c:	601a      	str	r2, [r3, #0]
#ifdef CPU_CFG_INT_DIS_MEAS_EN
    OSIntDisTimeMax       = (CPU_TS)0;                      /* Reset the maximum interrupt disable time               */
#endif

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
    OSSchedLockTimeMax    = (CPU_TS)0;                      /* Reset the maximum scheduler lock time                  */
 800445e:	4b3d      	ldr	r3, [pc, #244]	; (8004554 <OSStatReset+0x120>)
 8004460:	2200      	movs	r2, #0
 8004462:	601a      	str	r2, [r3, #0]
#endif

#if ((OS_MSG_EN > 0u) && (OS_CFG_DBG_EN > 0u))
    OSMsgPool.NbrUsedMax  = 0u;
 8004464:	4b3c      	ldr	r3, [pc, #240]	; (8004558 <OSStatReset+0x124>)
 8004466:	2200      	movs	r2, #0
 8004468:	811a      	strh	r2, [r3, #8]
#endif
    CPU_CRITICAL_EXIT();
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f7fb ff3c 	bl	80002e8 <CPU_SR_Restore>

#if OS_CFG_DBG_EN > 0u
    CPU_CRITICAL_ENTER();
 8004470:	f7fb ff36 	bl	80002e0 <CPU_SR_Save>
 8004474:	60f8      	str	r0, [r7, #12]
    p_tcb = OSTaskDbgListPtr;
 8004476:	4b39      	ldr	r3, [pc, #228]	; (800455c <OSStatReset+0x128>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	617b      	str	r3, [r7, #20]
    CPU_CRITICAL_EXIT();
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f7fb ff33 	bl	80002e8 <CPU_SR_Restore>
    while (p_tcb != (OS_TCB *)0) {                          /* Reset per-Task statistics                              */
 8004482:	e034      	b.n	80044ee <OSStatReset+0xba>
        CPU_CRITICAL_ENTER();
 8004484:	f7fb ff2c 	bl	80002e0 <CPU_SR_Save>
 8004488:	60f8      	str	r0, [r7, #12]
#ifdef CPU_CFG_INT_DIS_MEAS_EN
        p_tcb->IntDisTimeMax    = (CPU_TS      )0;
#endif

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
        p_tcb->SchedLockTimeMax = (CPU_TS      )0;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	2200      	movs	r2, #0
 800448e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
#endif

#if OS_CFG_TASK_PROFILE_EN > 0u
#if OS_CFG_TASK_Q_EN > 0u
        p_tcb->MsgQPendTimeMax  = (CPU_TS      )0;
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2200      	movs	r2, #0
 8004496:	675a      	str	r2, [r3, #116]	; 0x74
#endif
        p_tcb->SemPendTimeMax   = (CPU_TS      )0;
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	2200      	movs	r2, #0
 800449c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        p_tcb->CtxSwCtr         = (OS_CTR      )0;
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        p_tcb->CPUUsage         = (OS_CPU_USAGE)0;
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
        p_tcb->CPUUsageMax      = (OS_CPU_USAGE)0;
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
        p_tcb->CyclesTotal      = (OS_CYCLES   )0;
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        p_tcb->CyclesTotalPrev  = (OS_CYCLES   )0;
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        p_tcb->CyclesStart      =  OS_TS_GET();
 80044c8:	f002 fdd0 	bl	800706c <CPU_TS_TmrRd>
 80044cc:	4602      	mov	r2, r0
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif

#if OS_CFG_TASK_Q_EN > 0u
        p_msg_q                 = &p_tcb->MsgQ;
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	3360      	adds	r3, #96	; 0x60
 80044d8:	60bb      	str	r3, [r7, #8]
        p_msg_q->NbrEntriesMax  = (OS_MSG_QTY  )0;
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	2200      	movs	r2, #0
 80044de:	819a      	strh	r2, [r3, #12]
#endif
        p_tcb                   = p_tcb->DbgNextPtr;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80044e6:	617b      	str	r3, [r7, #20]
        CPU_CRITICAL_EXIT();
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f7fb fefd 	bl	80002e8 <CPU_SR_Restore>

#if OS_CFG_DBG_EN > 0u
    CPU_CRITICAL_ENTER();
    p_tcb = OSTaskDbgListPtr;
    CPU_CRITICAL_EXIT();
    while (p_tcb != (OS_TCB *)0) {                          /* Reset per-Task statistics                              */
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1c7      	bne.n	8004484 <OSStatReset+0x50>
        CPU_CRITICAL_EXIT();
    }
#endif

#if (OS_CFG_Q_EN > 0u) && (OS_CFG_DBG_EN > 0u)
    CPU_CRITICAL_ENTER();
 80044f4:	f7fb fef4 	bl	80002e0 <CPU_SR_Save>
 80044f8:	60f8      	str	r0, [r7, #12]
    p_q = OSQDbgListPtr;
 80044fa:	4b19      	ldr	r3, [pc, #100]	; (8004560 <OSStatReset+0x12c>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	613b      	str	r3, [r7, #16]
    CPU_CRITICAL_EXIT();
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f7fb fef1 	bl	80002e8 <CPU_SR_Restore>
    while (p_q != (OS_Q *)0) {                              /* Reset message queues statistics                        */
 8004506:	e00e      	b.n	8004526 <OSStatReset+0xf2>
        CPU_CRITICAL_ENTER();
 8004508:	f7fb feea 	bl	80002e0 <CPU_SR_Save>
 800450c:	60f8      	str	r0, [r7, #12]
        p_msg_q                = &p_q->MsgQ;
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	3320      	adds	r3, #32
 8004512:	60bb      	str	r3, [r7, #8]
        p_msg_q->NbrEntriesMax = (OS_MSG_QTY)0;
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	2200      	movs	r2, #0
 8004518:	819a      	strh	r2, [r3, #12]
        p_q                    = p_q->DbgNextPtr;
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	613b      	str	r3, [r7, #16]
        CPU_CRITICAL_EXIT();
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f7fb fee1 	bl	80002e8 <CPU_SR_Restore>

#if (OS_CFG_Q_EN > 0u) && (OS_CFG_DBG_EN > 0u)
    CPU_CRITICAL_ENTER();
    p_q = OSQDbgListPtr;
    CPU_CRITICAL_EXIT();
    while (p_q != (OS_Q *)0) {                              /* Reset message queues statistics                        */
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1ed      	bne.n	8004508 <OSStatReset+0xd4>
        p_q                    = p_q->DbgNextPtr;
        CPU_CRITICAL_EXIT();
    }
#endif

    OS_TickListResetPeak();                                 /* Reset tick wheel statistics                            */
 800452c:	f7ff fe52 	bl	80041d4 <OS_TickListResetPeak>

#if OS_CFG_TMR_EN > 0u
    OS_TmrResetPeak();
 8004530:	f001 fa7e 	bl	8005a30 <OS_TmrResetPeak>
#endif


   *p_err = OS_ERR_NONE;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	801a      	strh	r2, [r3, #0]
}
 800453a:	bf00      	nop
 800453c:	3718      	adds	r7, #24
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	200025e2 	.word	0x200025e2
 8004548:	20002378 	.word	0x20002378
 800454c:	200028d0 	.word	0x200028d0
 8004550:	200025f4 	.word	0x200025f4
 8004554:	200027fc 	.word	0x200027fc
 8004558:	200026cc 	.word	0x200026cc
 800455c:	200025f0 	.word	0x200025f0
 8004560:	20002798 	.word	0x20002798

08004564 <OSStatTaskCPUUsageInit>:
* Returns    : none
************************************************************************************************************************
*/

void  OSStatTaskCPUUsageInit (OS_ERR  *p_err)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
    OS_ERR   err;
    OS_TICK  dly;
    CPU_SR_ALLOC();
 800456c:	2300      	movs	r3, #0
 800456e:	613b      	str	r3, [r7, #16]
        return;
    }
#endif

#if ((OS_CFG_TMR_EN > 0u) && (OS_CFG_TASK_SUSPEND_EN > 0u))
    OSTaskSuspend(&OSTmrTaskTCB, &err);
 8004570:	f107 030e 	add.w	r3, r7, #14
 8004574:	4619      	mov	r1, r3
 8004576:	4832      	ldr	r0, [pc, #200]	; (8004640 <OSStatTaskCPUUsageInit+0xdc>)
 8004578:	f7fd ffea 	bl	8002550 <OSTaskSuspend>
    if (err != OS_ERR_NONE) {
 800457c:	89fb      	ldrh	r3, [r7, #14]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d003      	beq.n	800458a <OSStatTaskCPUUsageInit+0x26>
       *p_err = err;
 8004582:	89fa      	ldrh	r2, [r7, #14]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	801a      	strh	r2, [r3, #0]
        return;
 8004588:	e056      	b.n	8004638 <OSStatTaskCPUUsageInit+0xd4>
    }
#endif

    OSTimeDly((OS_TICK )2,                                  /* Synchronize with clock tick                            */
 800458a:	f107 030e 	add.w	r3, r7, #14
 800458e:	461a      	mov	r2, r3
 8004590:	2100      	movs	r1, #0
 8004592:	2002      	movs	r0, #2
 8004594:	f000 fae2 	bl	8004b5c <OSTimeDly>
              (OS_OPT  )OS_OPT_TIME_DLY,
              (OS_ERR *)&err);
    if (err != OS_ERR_NONE) {
 8004598:	89fb      	ldrh	r3, [r7, #14]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d003      	beq.n	80045a6 <OSStatTaskCPUUsageInit+0x42>
       *p_err = err;
 800459e:	89fa      	ldrh	r2, [r7, #14]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	801a      	strh	r2, [r3, #0]
        return;
 80045a4:	e048      	b.n	8004638 <OSStatTaskCPUUsageInit+0xd4>
    }
    CPU_CRITICAL_ENTER();
 80045a6:	f7fb fe9b 	bl	80002e0 <CPU_SR_Save>
 80045aa:	6138      	str	r0, [r7, #16]
    OSStatTaskCtr = (OS_TICK)0;                             /* Clear idle counter                                     */
 80045ac:	4b25      	ldr	r3, [pc, #148]	; (8004644 <OSStatTaskCPUUsageInit+0xe0>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	601a      	str	r2, [r3, #0]
    CPU_CRITICAL_EXIT();
 80045b2:	6938      	ldr	r0, [r7, #16]
 80045b4:	f7fb fe98 	bl	80002e8 <CPU_SR_Restore>

    dly = (OS_TICK)0;
 80045b8:	2300      	movs	r3, #0
 80045ba:	617b      	str	r3, [r7, #20]
    if (OSCfg_TickRate_Hz > OSCfg_StatTaskRate_Hz) {
 80045bc:	4b22      	ldr	r3, [pc, #136]	; (8004648 <OSStatTaskCPUUsageInit+0xe4>)
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	4b22      	ldr	r3, [pc, #136]	; (800464c <OSStatTaskCPUUsageInit+0xe8>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d906      	bls.n	80045d6 <OSStatTaskCPUUsageInit+0x72>
        dly = (OS_TICK)(OSCfg_TickRate_Hz / OSCfg_StatTaskRate_Hz);
 80045c8:	4b1f      	ldr	r3, [pc, #124]	; (8004648 <OSStatTaskCPUUsageInit+0xe4>)
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	4b1f      	ldr	r3, [pc, #124]	; (800464c <OSStatTaskCPUUsageInit+0xe8>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d4:	617b      	str	r3, [r7, #20]
    }
    if (dly == (OS_TICK)0) {
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d106      	bne.n	80045ea <OSStatTaskCPUUsageInit+0x86>
        dly =  (OS_TICK)(OSCfg_TickRate_Hz / (OS_RATE_HZ)10);
 80045dc:	4b1a      	ldr	r3, [pc, #104]	; (8004648 <OSStatTaskCPUUsageInit+0xe4>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a1b      	ldr	r2, [pc, #108]	; (8004650 <OSStatTaskCPUUsageInit+0xec>)
 80045e2:	fba2 2303 	umull	r2, r3, r2, r3
 80045e6:	08db      	lsrs	r3, r3, #3
 80045e8:	617b      	str	r3, [r7, #20]
    }

    OSTimeDly(dly,                                          /* Determine MAX. idle counter value                      */
 80045ea:	f107 030e 	add.w	r3, r7, #14
 80045ee:	461a      	mov	r2, r3
 80045f0:	2100      	movs	r1, #0
 80045f2:	6978      	ldr	r0, [r7, #20]
 80045f4:	f000 fab2 	bl	8004b5c <OSTimeDly>
              OS_OPT_TIME_DLY,
              &err);

#if ((OS_CFG_TMR_EN > 0u) && (OS_CFG_TASK_SUSPEND_EN > 0u))
    OSTaskResume(&OSTmrTaskTCB, &err);
 80045f8:	f107 030e 	add.w	r3, r7, #14
 80045fc:	4619      	mov	r1, r3
 80045fe:	4810      	ldr	r0, [pc, #64]	; (8004640 <OSStatTaskCPUUsageInit+0xdc>)
 8004600:	f7fd fde8 	bl	80021d4 <OSTaskResume>
    if (err != OS_ERR_NONE) {
 8004604:	89fb      	ldrh	r3, [r7, #14]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <OSStatTaskCPUUsageInit+0xae>
       *p_err = err;
 800460a:	89fa      	ldrh	r2, [r7, #14]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	801a      	strh	r2, [r3, #0]
        return;
 8004610:	e012      	b.n	8004638 <OSStatTaskCPUUsageInit+0xd4>
    }
#endif

    CPU_CRITICAL_ENTER();
 8004612:	f7fb fe65 	bl	80002e0 <CPU_SR_Save>
 8004616:	6138      	str	r0, [r7, #16]
    OSStatTaskTimeMax = (CPU_TS)0;
 8004618:	4b0e      	ldr	r3, [pc, #56]	; (8004654 <OSStatTaskCPUUsageInit+0xf0>)
 800461a:	2200      	movs	r2, #0
 800461c:	601a      	str	r2, [r3, #0]

    OSStatTaskCtrMax  = OSStatTaskCtr;                      /* Store maximum idle counter count                       */
 800461e:	4b09      	ldr	r3, [pc, #36]	; (8004644 <OSStatTaskCPUUsageInit+0xe0>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a0d      	ldr	r2, [pc, #52]	; (8004658 <OSStatTaskCPUUsageInit+0xf4>)
 8004624:	6013      	str	r3, [r2, #0]
    OSStatTaskRdy     = OS_STATE_RDY;
 8004626:	4b0d      	ldr	r3, [pc, #52]	; (800465c <OSStatTaskCPUUsageInit+0xf8>)
 8004628:	2201      	movs	r2, #1
 800462a:	701a      	strb	r2, [r3, #0]
    CPU_CRITICAL_EXIT();
 800462c:	6938      	ldr	r0, [r7, #16]
 800462e:	f7fb fe5b 	bl	80002e8 <CPU_SR_Restore>
   *p_err             = OS_ERR_NONE;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	801a      	strh	r2, [r3, #0]
}
 8004638:	3718      	adds	r7, #24
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	2000260c 	.word	0x2000260c
 8004644:	2000237c 	.word	0x2000237c
 8004648:	0800df4c 	.word	0x0800df4c
 800464c:	0800df38 	.word	0x0800df38
 8004650:	cccccccd 	.word	0xcccccccd
 8004654:	20002378 	.word	0x20002378
 8004658:	200027d8 	.word	0x200027d8
 800465c:	20002505 	.word	0x20002505

08004660 <OS_StatTask>:
*              4) This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_StatTask (void  *p_arg)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b090      	sub	sp, #64	; 0x40
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
    OS_TICK      ctr_div;
    OS_ERR       err;
    OS_TICK      dly;
    CPU_TS       ts_start;
    CPU_TS       ts_end;
    CPU_SR_ALLOC();
 8004668:	2300      	movs	r3, #0
 800466a:	61bb      	str	r3, [r7, #24]



    (void)&p_arg;                                           /* Prevent compiler warning for not using 'p_arg'         */
    while (OSStatTaskRdy != DEF_TRUE) {
 800466c:	e008      	b.n	8004680 <OS_StatTask+0x20>
        OSTimeDly(2u * OSCfg_StatTaskRate_Hz,               /* Wait until statistic task is ready                     */
 800466e:	4b84      	ldr	r3, [pc, #528]	; (8004880 <OS_StatTask+0x220>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	005b      	lsls	r3, r3, #1
 8004674:	f107 020a 	add.w	r2, r7, #10
 8004678:	2100      	movs	r1, #0
 800467a:	4618      	mov	r0, r3
 800467c:	f000 fa6e 	bl	8004b5c <OSTimeDly>
    CPU_SR_ALLOC();



    (void)&p_arg;                                           /* Prevent compiler warning for not using 'p_arg'         */
    while (OSStatTaskRdy != DEF_TRUE) {
 8004680:	4b80      	ldr	r3, [pc, #512]	; (8004884 <OS_StatTask+0x224>)
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d1f2      	bne.n	800466e <OS_StatTask+0xe>
        OSTimeDly(2u * OSCfg_StatTaskRate_Hz,               /* Wait until statistic task is ready                     */
                  OS_OPT_TIME_DLY,
                  &err);
    }
    OSStatReset(&err);                                      /* Reset statistics                                       */
 8004688:	f107 030a 	add.w	r3, r7, #10
 800468c:	4618      	mov	r0, r3
 800468e:	f7ff fed1 	bl	8004434 <OSStatReset>

    dly = (OS_TICK)0;                                       /* Compute statistic task sleep delay                     */
 8004692:	2300      	movs	r3, #0
 8004694:	61fb      	str	r3, [r7, #28]
    if (OSCfg_TickRate_Hz > OSCfg_StatTaskRate_Hz) {
 8004696:	4b7c      	ldr	r3, [pc, #496]	; (8004888 <OS_StatTask+0x228>)
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	4b79      	ldr	r3, [pc, #484]	; (8004880 <OS_StatTask+0x220>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d906      	bls.n	80046b0 <OS_StatTask+0x50>
        dly = (OS_TICK)(OSCfg_TickRate_Hz / OSCfg_StatTaskRate_Hz);
 80046a2:	4b79      	ldr	r3, [pc, #484]	; (8004888 <OS_StatTask+0x228>)
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	4b76      	ldr	r3, [pc, #472]	; (8004880 <OS_StatTask+0x220>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ae:	61fb      	str	r3, [r7, #28]
    }
    if (dly == (OS_TICK)0) {
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d106      	bne.n	80046c4 <OS_StatTask+0x64>
        dly =  (OS_TICK)(OSCfg_TickRate_Hz / (OS_RATE_HZ)10);
 80046b6:	4b74      	ldr	r3, [pc, #464]	; (8004888 <OS_StatTask+0x228>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a74      	ldr	r2, [pc, #464]	; (800488c <OS_StatTask+0x22c>)
 80046bc:	fba2 2303 	umull	r2, r3, r2, r3
 80046c0:	08db      	lsrs	r3, r3, #3
 80046c2:	61fb      	str	r3, [r7, #28]
    }

    while (DEF_ON) {
        ts_start        = OS_TS_GET();
 80046c4:	f002 fcd2 	bl	800706c <CPU_TS_TmrRd>
 80046c8:	6178      	str	r0, [r7, #20]
#ifdef  CPU_CFG_INT_DIS_MEAS_EN
        OSIntDisTimeMax = CPU_IntDisMeasMaxGet();
#endif

        CPU_CRITICAL_ENTER();                               /* ----------------- OVERALL CPU USAGE ------------------ */
 80046ca:	f7fb fe09 	bl	80002e0 <CPU_SR_Save>
 80046ce:	61b8      	str	r0, [r7, #24]
        OSStatTaskCtrRun   = OSStatTaskCtr;                 /* Obtain the of the stat counter for the past .1 second  */
 80046d0:	4b6f      	ldr	r3, [pc, #444]	; (8004890 <OS_StatTask+0x230>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a6f      	ldr	r2, [pc, #444]	; (8004894 <OS_StatTask+0x234>)
 80046d6:	6013      	str	r3, [r2, #0]
        OSStatTaskCtr      = (OS_TICK)0;                    /* Reset the stat counter for the next .1 second          */
 80046d8:	4b6d      	ldr	r3, [pc, #436]	; (8004890 <OS_StatTask+0x230>)
 80046da:	2200      	movs	r2, #0
 80046dc:	601a      	str	r2, [r3, #0]
        CPU_CRITICAL_EXIT();
 80046de:	69b8      	ldr	r0, [r7, #24]
 80046e0:	f7fb fe02 	bl	80002e8 <CPU_SR_Restore>

        if (OSStatTaskCtrMax > OSStatTaskCtrRun) {          /* Compute CPU Usage with best resolution                 */
 80046e4:	4b6c      	ldr	r3, [pc, #432]	; (8004898 <OS_StatTask+0x238>)
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	4b6a      	ldr	r3, [pc, #424]	; (8004894 <OS_StatTask+0x234>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d94f      	bls.n	8004790 <OS_StatTask+0x130>
            if (OSStatTaskCtrMax < 400000u) {                                        /*            1 to       400,000 */
 80046f0:	4b69      	ldr	r3, [pc, #420]	; (8004898 <OS_StatTask+0x238>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a69      	ldr	r2, [pc, #420]	; (800489c <OS_StatTask+0x23c>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d805      	bhi.n	8004706 <OS_StatTask+0xa6>
                ctr_mult = 10000u;
 80046fa:	f242 7310 	movw	r3, #10000	; 0x2710
 80046fe:	627b      	str	r3, [r7, #36]	; 0x24
                ctr_div  =     1u;
 8004700:	2301      	movs	r3, #1
 8004702:	623b      	str	r3, [r7, #32]
 8004704:	e024      	b.n	8004750 <OS_StatTask+0xf0>
            } else if (OSStatTaskCtrMax <   4000000u) {                              /*      400,000 to     4,000,000 */
 8004706:	4b64      	ldr	r3, [pc, #400]	; (8004898 <OS_StatTask+0x238>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a65      	ldr	r2, [pc, #404]	; (80048a0 <OS_StatTask+0x240>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d805      	bhi.n	800471c <OS_StatTask+0xbc>
                ctr_mult =  1000u;
 8004710:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004714:	627b      	str	r3, [r7, #36]	; 0x24
                ctr_div  =    10u;
 8004716:	230a      	movs	r3, #10
 8004718:	623b      	str	r3, [r7, #32]
 800471a:	e019      	b.n	8004750 <OS_StatTask+0xf0>
            } else if (OSStatTaskCtrMax <  40000000u) {                              /*    4,000,000 to    40,000,000 */
 800471c:	4b5e      	ldr	r3, [pc, #376]	; (8004898 <OS_StatTask+0x238>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a60      	ldr	r2, [pc, #384]	; (80048a4 <OS_StatTask+0x244>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d804      	bhi.n	8004730 <OS_StatTask+0xd0>
                ctr_mult =   100u;
 8004726:	2364      	movs	r3, #100	; 0x64
 8004728:	627b      	str	r3, [r7, #36]	; 0x24
                ctr_div  =   100u;
 800472a:	2364      	movs	r3, #100	; 0x64
 800472c:	623b      	str	r3, [r7, #32]
 800472e:	e00f      	b.n	8004750 <OS_StatTask+0xf0>
            } else if (OSStatTaskCtrMax < 400000000u) {                              /*   40,000,000 to   400,000,000 */
 8004730:	4b59      	ldr	r3, [pc, #356]	; (8004898 <OS_StatTask+0x238>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a5c      	ldr	r2, [pc, #368]	; (80048a8 <OS_StatTask+0x248>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d805      	bhi.n	8004746 <OS_StatTask+0xe6>
                ctr_mult =    10u;
 800473a:	230a      	movs	r3, #10
 800473c:	627b      	str	r3, [r7, #36]	; 0x24
                ctr_div  =  1000u;
 800473e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004742:	623b      	str	r3, [r7, #32]
 8004744:	e004      	b.n	8004750 <OS_StatTask+0xf0>
            } else {                                                                 /*  400,000,000 and up           */
                ctr_mult =     1u;
 8004746:	2301      	movs	r3, #1
 8004748:	627b      	str	r3, [r7, #36]	; 0x24
                ctr_div  = 10000u;
 800474a:	f242 7310 	movw	r3, #10000	; 0x2710
 800474e:	623b      	str	r3, [r7, #32]
            }
            ctr_max            = OSStatTaskCtrMax / ctr_div;
 8004750:	4b51      	ldr	r3, [pc, #324]	; (8004898 <OS_StatTask+0x238>)
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	6a3b      	ldr	r3, [r7, #32]
 8004756:	fbb2 f3f3 	udiv	r3, r2, r3
 800475a:	613b      	str	r3, [r7, #16]
            OSStatTaskCPUUsage = (OS_CPU_USAGE)((OS_TICK)10000u - ctr_mult * OSStatTaskCtrRun / ctr_max);
 800475c:	4b4d      	ldr	r3, [pc, #308]	; (8004894 <OS_StatTask+0x234>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004762:	fb02 f203 	mul.w	r2, r2, r3
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	fbb2 f3f3 	udiv	r3, r2, r3
 800476c:	b29b      	uxth	r3, r3
 800476e:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8004772:	3310      	adds	r3, #16
 8004774:	b29a      	uxth	r2, r3
 8004776:	4b4d      	ldr	r3, [pc, #308]	; (80048ac <OS_StatTask+0x24c>)
 8004778:	801a      	strh	r2, [r3, #0]
            if (OSStatTaskCPUUsageMax < OSStatTaskCPUUsage) {
 800477a:	4b4d      	ldr	r3, [pc, #308]	; (80048b0 <OS_StatTask+0x250>)
 800477c:	881a      	ldrh	r2, [r3, #0]
 800477e:	4b4b      	ldr	r3, [pc, #300]	; (80048ac <OS_StatTask+0x24c>)
 8004780:	881b      	ldrh	r3, [r3, #0]
 8004782:	429a      	cmp	r2, r3
 8004784:	d208      	bcs.n	8004798 <OS_StatTask+0x138>
                OSStatTaskCPUUsageMax = OSStatTaskCPUUsage;
 8004786:	4b49      	ldr	r3, [pc, #292]	; (80048ac <OS_StatTask+0x24c>)
 8004788:	881a      	ldrh	r2, [r3, #0]
 800478a:	4b49      	ldr	r3, [pc, #292]	; (80048b0 <OS_StatTask+0x250>)
 800478c:	801a      	strh	r2, [r3, #0]
 800478e:	e003      	b.n	8004798 <OS_StatTask+0x138>
            }
        } else {
            OSStatTaskCPUUsage = (OS_CPU_USAGE)10000u;
 8004790:	4b46      	ldr	r3, [pc, #280]	; (80048ac <OS_StatTask+0x24c>)
 8004792:	f242 7210 	movw	r2, #10000	; 0x2710
 8004796:	801a      	strh	r2, [r3, #0]
        }

        OSStatTaskHook();                                   /* Invoke user definable hook                             */
 8004798:	f001 fa42 	bl	8005c20 <OSStatTaskHook>


#if OS_CFG_DBG_EN > 0u
#if OS_CFG_TASK_PROFILE_EN > 0u
        cycles_total = (OS_CYCLES)0;
 800479c:	2300      	movs	r3, #0
 800479e:	63bb      	str	r3, [r7, #56]	; 0x38

        CPU_CRITICAL_ENTER();
 80047a0:	f7fb fd9e 	bl	80002e0 <CPU_SR_Save>
 80047a4:	61b8      	str	r0, [r7, #24]
        p_tcb = OSTaskDbgListPtr;
 80047a6:	4b43      	ldr	r3, [pc, #268]	; (80048b4 <OS_StatTask+0x254>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	62bb      	str	r3, [r7, #40]	; 0x28
        CPU_CRITICAL_EXIT();
 80047ac:	69b8      	ldr	r0, [r7, #24]
 80047ae:	f7fb fd9b 	bl	80002e8 <CPU_SR_Restore>
        while (p_tcb != (OS_TCB *)0) {                      /* ----------------- TOTAL CYCLES COUNT ----------------- */
 80047b2:	e01f      	b.n	80047f4 <OS_StatTask+0x194>
            OS_CRITICAL_ENTER();
 80047b4:	f7fb fd94 	bl	80002e0 <CPU_SR_Save>
 80047b8:	61b8      	str	r0, [r7, #24]
            p_tcb->CyclesTotalPrev =  p_tcb->CyclesTotal;   /* Save accumulated # cycles into a temp variable         */
 80047ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047bc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80047c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
            p_tcb->CyclesTotal     = (OS_CYCLES)0;          /* Reset total cycles for task for next run               */
 80047c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c8:	2200      	movs	r2, #0
 80047ca:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            OS_CRITICAL_EXIT();
 80047ce:	69b8      	ldr	r0, [r7, #24]
 80047d0:	f7fb fd8a 	bl	80002e8 <CPU_SR_Restore>

            cycles_total          += p_tcb->CyclesTotalPrev;/* Perform sum of all task # cycles                       */
 80047d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047dc:	4413      	add	r3, r2
 80047de:	63bb      	str	r3, [r7, #56]	; 0x38

            CPU_CRITICAL_ENTER();
 80047e0:	f7fb fd7e 	bl	80002e0 <CPU_SR_Save>
 80047e4:	61b8      	str	r0, [r7, #24]
            p_tcb                  = p_tcb->DbgNextPtr;
 80047e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80047ec:	62bb      	str	r3, [r7, #40]	; 0x28
            CPU_CRITICAL_EXIT();
 80047ee:	69b8      	ldr	r0, [r7, #24]
 80047f0:	f7fb fd7a 	bl	80002e8 <CPU_SR_Restore>
        cycles_total = (OS_CYCLES)0;

        CPU_CRITICAL_ENTER();
        p_tcb = OSTaskDbgListPtr;
        CPU_CRITICAL_EXIT();
        while (p_tcb != (OS_TCB *)0) {                      /* ----------------- TOTAL CYCLES COUNT ----------------- */
 80047f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1dc      	bne.n	80047b4 <OS_StatTask+0x154>
#endif


#if OS_CFG_TASK_PROFILE_EN > 0u
                                                            /* ------------- INDIVIDUAL TASK CPU USAGE -------------- */
        if (cycles_total > (OS_CYCLES)0u) {                                          /* 'cycles_total' scaling ...    */
 80047fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d031      	beq.n	8004864 <OS_StatTask+0x204>
            if (cycles_total < 400000u) {                                            /*            1 to       400,000 */
 8004800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004802:	4a26      	ldr	r2, [pc, #152]	; (800489c <OS_StatTask+0x23c>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d805      	bhi.n	8004814 <OS_StatTask+0x1b4>
                cycles_mult = 10000u;
 8004808:	f242 7310 	movw	r3, #10000	; 0x2710
 800480c:	633b      	str	r3, [r7, #48]	; 0x30
                cycles_div  =     1u;
 800480e:	2301      	movs	r3, #1
 8004810:	637b      	str	r3, [r7, #52]	; 0x34
 8004812:	e021      	b.n	8004858 <OS_StatTask+0x1f8>
            } else if (cycles_total <   4000000u) {                                  /*      400,000 to     4,000,000 */
 8004814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004816:	4a22      	ldr	r2, [pc, #136]	; (80048a0 <OS_StatTask+0x240>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d805      	bhi.n	8004828 <OS_StatTask+0x1c8>
                cycles_mult =  1000u;
 800481c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004820:	633b      	str	r3, [r7, #48]	; 0x30
                cycles_div  =    10u;
 8004822:	230a      	movs	r3, #10
 8004824:	637b      	str	r3, [r7, #52]	; 0x34
 8004826:	e017      	b.n	8004858 <OS_StatTask+0x1f8>
            } else if (cycles_total <  40000000u) {                                  /*    4,000,000 to    40,000,000 */
 8004828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800482a:	4a1e      	ldr	r2, [pc, #120]	; (80048a4 <OS_StatTask+0x244>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d804      	bhi.n	800483a <OS_StatTask+0x1da>
                cycles_mult =   100u;
 8004830:	2364      	movs	r3, #100	; 0x64
 8004832:	633b      	str	r3, [r7, #48]	; 0x30
                cycles_div  =   100u;
 8004834:	2364      	movs	r3, #100	; 0x64
 8004836:	637b      	str	r3, [r7, #52]	; 0x34
 8004838:	e00e      	b.n	8004858 <OS_StatTask+0x1f8>
            } else if (cycles_total < 400000000u) {                                  /*   40,000,000 to   400,000,000 */
 800483a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483c:	4a1a      	ldr	r2, [pc, #104]	; (80048a8 <OS_StatTask+0x248>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d805      	bhi.n	800484e <OS_StatTask+0x1ee>
                cycles_mult =    10u;
 8004842:	230a      	movs	r3, #10
 8004844:	633b      	str	r3, [r7, #48]	; 0x30
                cycles_div  =  1000u;
 8004846:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800484a:	637b      	str	r3, [r7, #52]	; 0x34
 800484c:	e004      	b.n	8004858 <OS_StatTask+0x1f8>
            } else {                                                                 /*  400,000,000 and up           */
                cycles_mult =     1u;
 800484e:	2301      	movs	r3, #1
 8004850:	633b      	str	r3, [r7, #48]	; 0x30
                cycles_div  = 10000u;
 8004852:	f242 7310 	movw	r3, #10000	; 0x2710
 8004856:	637b      	str	r3, [r7, #52]	; 0x34
            }
            cycles_max  = cycles_total / cycles_div;
 8004858:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800485a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800485c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004860:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004862:	e003      	b.n	800486c <OS_StatTask+0x20c>
        } else {
            cycles_mult = 0u;
 8004864:	2300      	movs	r3, #0
 8004866:	633b      	str	r3, [r7, #48]	; 0x30
            cycles_max  = 1u;
 8004868:	2301      	movs	r3, #1
 800486a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif
        CPU_CRITICAL_ENTER();
 800486c:	f7fb fd38 	bl	80002e0 <CPU_SR_Save>
 8004870:	61b8      	str	r0, [r7, #24]
        p_tcb = OSTaskDbgListPtr;
 8004872:	4b10      	ldr	r3, [pc, #64]	; (80048b4 <OS_StatTask+0x254>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	62bb      	str	r3, [r7, #40]	; 0x28
        CPU_CRITICAL_EXIT();
 8004878:	69b8      	ldr	r0, [r7, #24]
 800487a:	f7fb fd35 	bl	80002e8 <CPU_SR_Restore>
        while (p_tcb != (OS_TCB *)0) {
 800487e:	e050      	b.n	8004922 <OS_StatTask+0x2c2>
 8004880:	0800df38 	.word	0x0800df38
 8004884:	20002505 	.word	0x20002505
 8004888:	0800df4c 	.word	0x0800df4c
 800488c:	cccccccd 	.word	0xcccccccd
 8004890:	2000237c 	.word	0x2000237c
 8004894:	200027ec 	.word	0x200027ec
 8004898:	200027d8 	.word	0x200027d8
 800489c:	00061a7f 	.word	0x00061a7f
 80048a0:	003d08ff 	.word	0x003d08ff
 80048a4:	026259ff 	.word	0x026259ff
 80048a8:	17d783ff 	.word	0x17d783ff
 80048ac:	20002600 	.word	0x20002600
 80048b0:	200025e2 	.word	0x200025e2
 80048b4:	200025f0 	.word	0x200025f0
#if OS_CFG_TASK_PROFILE_EN > 0u                             /* Compute execution time of each task                    */
            usage = (OS_CPU_USAGE)(cycles_mult * p_tcb->CyclesTotalPrev / cycles_max);
 80048b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048c0:	fb02 f203 	mul.w	r2, r2, r3
 80048c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ca:	87fb      	strh	r3, [r7, #62]	; 0x3e
            if (usage > 10000u) {
 80048cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80048ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d902      	bls.n	80048dc <OS_StatTask+0x27c>
                usage = 10000u;
 80048d6:	f242 7310 	movw	r3, #10000	; 0x2710
 80048da:	87fb      	strh	r3, [r7, #62]	; 0x3e
            }
            p_tcb->CPUUsage = usage;
 80048dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048de:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80048e0:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
            if (p_tcb->CPUUsageMax < usage) {               /* Detect peak CPU usage                                  */
 80048e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e6:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 80048ea:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d903      	bls.n	80048f8 <OS_StatTask+0x298>
                p_tcb->CPUUsageMax = usage;
 80048f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80048f4:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
            }
#endif

#if OS_CFG_STAT_TASK_STK_CHK_EN > 0u
            OSTaskStkChk( p_tcb,                            /* Compute stack usage of active tasks only               */
 80048f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fa:	f103 01ac 	add.w	r1, r3, #172	; 0xac
 80048fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004900:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 8004904:	f107 030a 	add.w	r3, r7, #10
 8004908:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800490a:	f7fd fda9 	bl	8002460 <OSTaskStkChk>
                         &p_tcb->StkFree,
                         &p_tcb->StkUsed,
                         &err);
#endif

            CPU_CRITICAL_ENTER();
 800490e:	f7fb fce7 	bl	80002e0 <CPU_SR_Save>
 8004912:	61b8      	str	r0, [r7, #24]
            p_tcb = p_tcb->DbgNextPtr;
 8004914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004916:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800491a:	62bb      	str	r3, [r7, #40]	; 0x28
            CPU_CRITICAL_EXIT();
 800491c:	69b8      	ldr	r0, [r7, #24]
 800491e:	f7fb fce3 	bl	80002e8 <CPU_SR_Restore>
        }
#endif
        CPU_CRITICAL_ENTER();
        p_tcb = OSTaskDbgListPtr;
        CPU_CRITICAL_EXIT();
        while (p_tcb != (OS_TCB *)0) {
 8004922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1c7      	bne.n	80048b8 <OS_StatTask+0x258>
            p_tcb = p_tcb->DbgNextPtr;
            CPU_CRITICAL_EXIT();
        }
#endif

        if (OSStatResetFlag == DEF_TRUE) {                  /* Check if need to reset statistics                      */
 8004928:	4b10      	ldr	r3, [pc, #64]	; (800496c <OS_StatTask+0x30c>)
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d107      	bne.n	8004940 <OS_StatTask+0x2e0>
            OSStatResetFlag  = DEF_FALSE;
 8004930:	4b0e      	ldr	r3, [pc, #56]	; (800496c <OS_StatTask+0x30c>)
 8004932:	2200      	movs	r2, #0
 8004934:	701a      	strb	r2, [r3, #0]
            OSStatReset(&err);
 8004936:	f107 030a 	add.w	r3, r7, #10
 800493a:	4618      	mov	r0, r3
 800493c:	f7ff fd7a 	bl	8004434 <OSStatReset>
        }

        ts_end = OS_TS_GET() - ts_start;                    /* Measure execution time of statistic task               */
 8004940:	f002 fb94 	bl	800706c <CPU_TS_TmrRd>
 8004944:	4602      	mov	r2, r0
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	60fb      	str	r3, [r7, #12]
        if (OSStatTaskTimeMax < ts_end) {
 800494c:	4b08      	ldr	r3, [pc, #32]	; (8004970 <OS_StatTask+0x310>)
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	429a      	cmp	r2, r3
 8004954:	d202      	bcs.n	800495c <OS_StatTask+0x2fc>
            OSStatTaskTimeMax = ts_end;
 8004956:	4a06      	ldr	r2, [pc, #24]	; (8004970 <OS_StatTask+0x310>)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6013      	str	r3, [r2, #0]
        }

        OSTimeDly(dly,
 800495c:	f107 030a 	add.w	r3, r7, #10
 8004960:	461a      	mov	r2, r3
 8004962:	2100      	movs	r1, #0
 8004964:	69f8      	ldr	r0, [r7, #28]
 8004966:	f000 f8f9 	bl	8004b5c <OSTimeDly>
                  OS_OPT_TIME_DLY,
                  &err);
    }
 800496a:	e6ab      	b.n	80046c4 <OS_StatTask+0x64>
 800496c:	20002800 	.word	0x20002800
 8004970:	20002378 	.word	0x20002378

08004974 <OS_StatTaskInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_StatTaskInit (OS_ERR  *p_err)
{
 8004974:	b590      	push	{r4, r7, lr}
 8004976:	b08d      	sub	sp, #52	; 0x34
 8004978:	af0a      	add	r7, sp, #40	; 0x28
 800497a:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    OSStatTaskCtr    = (OS_TICK)0;
 800497c:	4b25      	ldr	r3, [pc, #148]	; (8004a14 <OS_StatTaskInit+0xa0>)
 800497e:	2200      	movs	r2, #0
 8004980:	601a      	str	r2, [r3, #0]
    OSStatTaskCtrRun = (OS_TICK)0;
 8004982:	4b25      	ldr	r3, [pc, #148]	; (8004a18 <OS_StatTaskInit+0xa4>)
 8004984:	2200      	movs	r2, #0
 8004986:	601a      	str	r2, [r3, #0]
    OSStatTaskCtrMax = (OS_TICK)0;
 8004988:	4b24      	ldr	r3, [pc, #144]	; (8004a1c <OS_StatTaskInit+0xa8>)
 800498a:	2200      	movs	r2, #0
 800498c:	601a      	str	r2, [r3, #0]
    OSStatTaskRdy    = OS_STATE_NOT_RDY;                    /* Statistic task is not ready                            */
 800498e:	4b24      	ldr	r3, [pc, #144]	; (8004a20 <OS_StatTaskInit+0xac>)
 8004990:	2200      	movs	r2, #0
 8004992:	701a      	strb	r2, [r3, #0]
    OSStatResetFlag  = DEF_FALSE;
 8004994:	4b23      	ldr	r3, [pc, #140]	; (8004a24 <OS_StatTaskInit+0xb0>)
 8004996:	2200      	movs	r2, #0
 8004998:	701a      	strb	r2, [r3, #0]

                                                            /* ---------------- CREATE THE STAT TASK ---------------- */
    if (OSCfg_StatTaskStkBasePtr == (CPU_STK *)0) {
 800499a:	4b23      	ldr	r3, [pc, #140]	; (8004a28 <OS_StatTaskInit+0xb4>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d104      	bne.n	80049ac <OS_StatTaskInit+0x38>
       *p_err = OS_ERR_STAT_STK_INVALID;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f646 622b 	movw	r2, #28203	; 0x6e2b
 80049a8:	801a      	strh	r2, [r3, #0]
        return;
 80049aa:	e02f      	b.n	8004a0c <OS_StatTaskInit+0x98>
    }

    if (OSCfg_StatTaskStkSize < OSCfg_StkSizeMin) {
 80049ac:	4b1f      	ldr	r3, [pc, #124]	; (8004a2c <OS_StatTaskInit+0xb8>)
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	4b1f      	ldr	r3, [pc, #124]	; (8004a30 <OS_StatTaskInit+0xbc>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d204      	bcs.n	80049c2 <OS_StatTaskInit+0x4e>
       *p_err = OS_ERR_STAT_STK_SIZE_INVALID;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f646 622c 	movw	r2, #28204	; 0x6e2c
 80049be:	801a      	strh	r2, [r3, #0]
        return;
 80049c0:	e024      	b.n	8004a0c <OS_StatTaskInit+0x98>
    }

    if (OSCfg_StatTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {
 80049c2:	4b1c      	ldr	r3, [pc, #112]	; (8004a34 <OS_StatTaskInit+0xc0>)
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	2b1e      	cmp	r3, #30
 80049c8:	d904      	bls.n	80049d4 <OS_StatTaskInit+0x60>
       *p_err = OS_ERR_STAT_PRIO_INVALID;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f646 622a 	movw	r2, #28202	; 0x6e2a
 80049d0:	801a      	strh	r2, [r3, #0]
        return;
 80049d2:	e01b      	b.n	8004a0c <OS_StatTaskInit+0x98>
    }

    OSTaskCreate((OS_TCB     *)&OSStatTaskTCB,
 80049d4:	4b17      	ldr	r3, [pc, #92]	; (8004a34 <OS_StatTaskInit+0xc0>)
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	4a13      	ldr	r2, [pc, #76]	; (8004a28 <OS_StatTaskInit+0xb4>)
 80049da:	6812      	ldr	r2, [r2, #0]
 80049dc:	4916      	ldr	r1, [pc, #88]	; (8004a38 <OS_StatTaskInit+0xc4>)
 80049de:	6809      	ldr	r1, [r1, #0]
 80049e0:	4812      	ldr	r0, [pc, #72]	; (8004a2c <OS_StatTaskInit+0xb8>)
 80049e2:	6800      	ldr	r0, [r0, #0]
 80049e4:	687c      	ldr	r4, [r7, #4]
 80049e6:	9408      	str	r4, [sp, #32]
 80049e8:	2403      	movs	r4, #3
 80049ea:	9407      	str	r4, [sp, #28]
 80049ec:	2400      	movs	r4, #0
 80049ee:	9406      	str	r4, [sp, #24]
 80049f0:	2400      	movs	r4, #0
 80049f2:	9405      	str	r4, [sp, #20]
 80049f4:	2400      	movs	r4, #0
 80049f6:	9404      	str	r4, [sp, #16]
 80049f8:	9003      	str	r0, [sp, #12]
 80049fa:	9102      	str	r1, [sp, #8]
 80049fc:	9201      	str	r2, [sp, #4]
 80049fe:	9300      	str	r3, [sp, #0]
 8004a00:	2300      	movs	r3, #0
 8004a02:	4a0e      	ldr	r2, [pc, #56]	; (8004a3c <OS_StatTaskInit+0xc8>)
 8004a04:	490e      	ldr	r1, [pc, #56]	; (8004a40 <OS_StatTaskInit+0xcc>)
 8004a06:	480f      	ldr	r0, [pc, #60]	; (8004a44 <OS_StatTaskInit+0xd0>)
 8004a08:	f7fd fae6 	bl	8001fd8 <OSTaskCreate>
                 (OS_MSG_QTY  )0,
                 (OS_TICK     )0,
                 (void       *)0,
                 (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
                 (OS_ERR     *)p_err);
}
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd90      	pop	{r4, r7, pc}
 8004a12:	bf00      	nop
 8004a14:	2000237c 	.word	0x2000237c
 8004a18:	200027ec 	.word	0x200027ec
 8004a1c:	200027d8 	.word	0x200027d8
 8004a20:	20002505 	.word	0x20002505
 8004a24:	20002800 	.word	0x20002800
 8004a28:	0800df3c 	.word	0x0800df3c
 8004a2c:	0800df44 	.word	0x0800df44
 8004a30:	0800df48 	.word	0x0800df48
 8004a34:	0800df34 	.word	0x0800df34
 8004a38:	0800df40 	.word	0x0800df40
 8004a3c:	08004661 	.word	0x08004661
 8004a40:	0800de70 	.word	0x0800de70
 8004a44:	20002808 	.word	0x20002808

08004a48 <OS_PrioInit>:
* Note       : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_PrioInit (void)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
    CPU_DATA  i;


                                                            /* Clear the bitmap table ... no task is ready            */
    for (i = 0u; i < OS_PRIO_TBL_SIZE; i++) {
 8004a4e:	2300      	movs	r3, #0
 8004a50:	607b      	str	r3, [r7, #4]
 8004a52:	e007      	b.n	8004a64 <OS_PrioInit+0x1c>
         OSPrioTbl[i] = (CPU_DATA)0;
 8004a54:	4a07      	ldr	r2, [pc, #28]	; (8004a74 <OS_PrioInit+0x2c>)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2100      	movs	r1, #0
 8004a5a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
{
    CPU_DATA  i;


                                                            /* Clear the bitmap table ... no task is ready            */
    for (i = 0u; i < OS_PRIO_TBL_SIZE; i++) {
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	3301      	adds	r3, #1
 8004a62:	607b      	str	r3, [r7, #4]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d0f4      	beq.n	8004a54 <OS_PrioInit+0xc>
         OSPrioTbl[i] = (CPU_DATA)0;
    }
}
 8004a6a:	bf00      	nop
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bc80      	pop	{r7}
 8004a72:	4770      	bx	lr
 8004a74:	2000236c 	.word	0x2000236c

08004a78 <OS_PrioGetHighest>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

OS_PRIO  OS_PrioGetHighest (void)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
    CPU_DATA  *p_tbl;
    OS_PRIO    prio;


    prio  = (OS_PRIO)0;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	70fb      	strb	r3, [r7, #3]
    p_tbl = &OSPrioTbl[0];
 8004a82:	4b0e      	ldr	r3, [pc, #56]	; (8004abc <OS_PrioGetHighest+0x44>)
 8004a84:	607b      	str	r3, [r7, #4]
    while (*p_tbl == (CPU_DATA)0) {                         /* Search the bitmap table for the highest priority       */
 8004a86:	e005      	b.n	8004a94 <OS_PrioGetHighest+0x1c>
        prio += DEF_INT_CPU_NBR_BITS;                       /* Compute the step of each CPU_DATA entry                */
 8004a88:	78fb      	ldrb	r3, [r7, #3]
 8004a8a:	3320      	adds	r3, #32
 8004a8c:	70fb      	strb	r3, [r7, #3]
        p_tbl++;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	3304      	adds	r3, #4
 8004a92:	607b      	str	r3, [r7, #4]
    OS_PRIO    prio;


    prio  = (OS_PRIO)0;
    p_tbl = &OSPrioTbl[0];
    while (*p_tbl == (CPU_DATA)0) {                         /* Search the bitmap table for the highest priority       */
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d0f5      	beq.n	8004a88 <OS_PrioGetHighest+0x10>
        prio += DEF_INT_CPU_NBR_BITS;                       /* Compute the step of each CPU_DATA entry                */
        p_tbl++;
    }
    prio += (OS_PRIO)CPU_CntLeadZeros(*p_tbl);              /* Find the position of the first bit set at the entry    */
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7fb fc28 	bl	80002f6 <CPU_CntLeadZeros>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	78fb      	ldrb	r3, [r7, #3]
 8004aac:	4413      	add	r3, r2
 8004aae:	70fb      	strb	r3, [r7, #3]
    return (prio);
 8004ab0:	78fb      	ldrb	r3, [r7, #3]
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	2000236c 	.word	0x2000236c

08004ac0 <OS_PrioInsert>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_PrioInsert (OS_PRIO  prio)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b087      	sub	sp, #28
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	71fb      	strb	r3, [r7, #7]
    CPU_DATA  bit;
    CPU_DATA  bit_nbr;
    OS_PRIO   ix;


    ix             = prio / DEF_INT_CPU_NBR_BITS;
 8004aca:	79fb      	ldrb	r3, [r7, #7]
 8004acc:	095b      	lsrs	r3, r3, #5
 8004ace:	75fb      	strb	r3, [r7, #23]
    bit_nbr        = (CPU_DATA)prio & (DEF_INT_CPU_NBR_BITS - 1u);
 8004ad0:	79fb      	ldrb	r3, [r7, #7]
 8004ad2:	f003 031f 	and.w	r3, r3, #31
 8004ad6:	613b      	str	r3, [r7, #16]
    bit            = 1u;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	60fb      	str	r3, [r7, #12]
    bit          <<= (DEF_INT_CPU_NBR_BITS - 1u) - bit_nbr;
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	f1c3 031f 	rsb	r3, r3, #31
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae8:	60fb      	str	r3, [r7, #12]
    OSPrioTbl[ix] |= bit;
 8004aea:	7dfb      	ldrb	r3, [r7, #23]
 8004aec:	7dfa      	ldrb	r2, [r7, #23]
 8004aee:	4906      	ldr	r1, [pc, #24]	; (8004b08 <OS_PrioInsert+0x48>)
 8004af0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	4903      	ldr	r1, [pc, #12]	; (8004b08 <OS_PrioInsert+0x48>)
 8004afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004afe:	bf00      	nop
 8004b00:	371c      	adds	r7, #28
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bc80      	pop	{r7}
 8004b06:	4770      	bx	lr
 8004b08:	2000236c 	.word	0x2000236c

08004b0c <OS_PrioRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_PrioRemove (OS_PRIO  prio)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b087      	sub	sp, #28
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	4603      	mov	r3, r0
 8004b14:	71fb      	strb	r3, [r7, #7]
    CPU_DATA  bit;
    CPU_DATA  bit_nbr;
    OS_PRIO   ix;


    ix             = prio / DEF_INT_CPU_NBR_BITS;
 8004b16:	79fb      	ldrb	r3, [r7, #7]
 8004b18:	095b      	lsrs	r3, r3, #5
 8004b1a:	75fb      	strb	r3, [r7, #23]
    bit_nbr        = (CPU_DATA)prio & (DEF_INT_CPU_NBR_BITS - 1u);
 8004b1c:	79fb      	ldrb	r3, [r7, #7]
 8004b1e:	f003 031f 	and.w	r3, r3, #31
 8004b22:	613b      	str	r3, [r7, #16]
    bit            = 1u;
 8004b24:	2301      	movs	r3, #1
 8004b26:	60fb      	str	r3, [r7, #12]
    bit          <<= (DEF_INT_CPU_NBR_BITS - 1u) - bit_nbr;
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	f1c3 031f 	rsb	r3, r3, #31
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	fa02 f303 	lsl.w	r3, r2, r3
 8004b34:	60fb      	str	r3, [r7, #12]
    OSPrioTbl[ix] &= ~bit;
 8004b36:	7dfb      	ldrb	r3, [r7, #23]
 8004b38:	7dfa      	ldrb	r2, [r7, #23]
 8004b3a:	4907      	ldr	r1, [pc, #28]	; (8004b58 <OS_PrioRemove+0x4c>)
 8004b3c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	43d2      	mvns	r2, r2
 8004b44:	400a      	ands	r2, r1
 8004b46:	4904      	ldr	r1, [pc, #16]	; (8004b58 <OS_PrioRemove+0x4c>)
 8004b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004b4c:	bf00      	nop
 8004b4e:	371c      	adds	r7, #28
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bc80      	pop	{r7}
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	2000236c 	.word	0x2000236c

08004b5c <OSTimeDly>:
*/

void  OSTimeDly (OS_TICK   dly,
                 OS_OPT    opt,
                 OS_ERR   *p_err)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	460b      	mov	r3, r1
 8004b66:	607a      	str	r2, [r7, #4]
 8004b68:	817b      	strh	r3, [r7, #10]
    CPU_SR_ALLOC();
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0u) {             /* Not allowed to call from an ISR                        */
 8004b6e:	4b2e      	ldr	r3, [pc, #184]	; (8004c28 <OSTimeDly+0xcc>)
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d004      	beq.n	8004b80 <OSTimeDly+0x24>
       *p_err = OS_ERR_TIME_DLY_ISR;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f247 2275 	movw	r2, #29301	; 0x7275
 8004b7c:	801a      	strh	r2, [r3, #0]
        return;
 8004b7e:	e050      	b.n	8004c22 <OSTimeDly+0xc6>
    }
#endif

    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0u) {       /* Can't delay when the scheduler is locked               */
 8004b80:	4b2a      	ldr	r3, [pc, #168]	; (8004c2c <OSTimeDly+0xd0>)
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d004      	beq.n	8004b92 <OSTimeDly+0x36>
       *p_err = OS_ERR_SCHED_LOCKED;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f646 5263 	movw	r2, #28003	; 0x6d63
 8004b8e:	801a      	strh	r2, [r3, #0]
        return;
 8004b90:	e047      	b.n	8004c22 <OSTimeDly+0xc6>
    }

    switch (opt) {
 8004b92:	897b      	ldrh	r3, [r7, #10]
 8004b94:	2b08      	cmp	r3, #8
 8004b96:	d81d      	bhi.n	8004bd4 <OSTimeDly+0x78>
 8004b98:	a201      	add	r2, pc, #4	; (adr r2, 8004ba0 <OSTimeDly+0x44>)
 8004b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9e:	bf00      	nop
 8004ba0:	08004bc5 	.word	0x08004bc5
 8004ba4:	08004bd5 	.word	0x08004bd5
 8004ba8:	08004bc5 	.word	0x08004bc5
 8004bac:	08004bd5 	.word	0x08004bd5
 8004bb0:	08004bdf 	.word	0x08004bdf
 8004bb4:	08004bd5 	.word	0x08004bd5
 8004bb8:	08004bd5 	.word	0x08004bd5
 8004bbc:	08004bd5 	.word	0x08004bd5
 8004bc0:	08004bc5 	.word	0x08004bc5
        case OS_OPT_TIME_DLY:
        case OS_OPT_TIME_TIMEOUT:
        case OS_OPT_TIME_PERIODIC:
             if (dly == (OS_TICK)0u) {                      /* 0 means no delay!                                      */
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10b      	bne.n	8004be2 <OSTimeDly+0x86>
                *p_err = OS_ERR_TIME_ZERO_DLY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f247 227e 	movw	r2, #29310	; 0x727e
 8004bd0:	801a      	strh	r2, [r3, #0]
                 return;
 8004bd2:	e026      	b.n	8004c22 <OSTimeDly+0xc6>

        case OS_OPT_TIME_MATCH:
             break;

        default:
            *p_err = OS_ERR_OPT_INVALID;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f645 6225 	movw	r2, #24101	; 0x5e25
 8004bda:	801a      	strh	r2, [r3, #0]
             return;
 8004bdc:	e021      	b.n	8004c22 <OSTimeDly+0xc6>
                 return;
             }
             break;

        case OS_OPT_TIME_MATCH:
             break;
 8004bde:	bf00      	nop
 8004be0:	e000      	b.n	8004be4 <OSTimeDly+0x88>
        case OS_OPT_TIME_PERIODIC:
             if (dly == (OS_TICK)0u) {                      /* 0 means no delay!                                      */
                *p_err = OS_ERR_TIME_ZERO_DLY;
                 return;
             }
             break;
 8004be2:	bf00      	nop
        default:
            *p_err = OS_ERR_OPT_INVALID;
             return;
    }

    OS_CRITICAL_ENTER();
 8004be4:	f7fb fb7c 	bl	80002e0 <CPU_SR_Save>
 8004be8:	6178      	str	r0, [r7, #20]
    OS_TickListInsertDly(OSTCBCurPtr,
 8004bea:	4b11      	ldr	r3, [pc, #68]	; (8004c30 <OSTimeDly+0xd4>)
 8004bec:	6818      	ldr	r0, [r3, #0]
 8004bee:	897a      	ldrh	r2, [r7, #10]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	68f9      	ldr	r1, [r7, #12]
 8004bf4:	f7ff fa06 	bl	8004004 <OS_TickListInsertDly>
                         dly,
                         opt,
                         p_err);
    if (*p_err != OS_ERR_NONE) {
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	881b      	ldrh	r3, [r3, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d003      	beq.n	8004c08 <OSTimeDly+0xac>
         OS_CRITICAL_EXIT_NO_SCHED();
 8004c00:	6978      	ldr	r0, [r7, #20]
 8004c02:	f7fb fb71 	bl	80002e8 <CPU_SR_Restore>
         return;
 8004c06:	e00c      	b.n	8004c22 <OSTimeDly+0xc6>
    }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_TASK_DLY(dly);                                 /* Record the event.                                      */
#endif
    OS_RdyListRemove(OSTCBCurPtr);                          /* Remove current task from ready list                    */
 8004c08:	4b09      	ldr	r3, [pc, #36]	; (8004c30 <OSTimeDly+0xd4>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7ff f811 	bl	8003c34 <OS_RdyListRemove>
    OS_CRITICAL_EXIT_NO_SCHED();
 8004c12:	6978      	ldr	r0, [r7, #20]
 8004c14:	f7fb fb68 	bl	80002e8 <CPU_SR_Restore>
    OSSched();                                              /* Find next task to run!                                 */
 8004c18:	f7fe fb16 	bl	8003248 <OSSched>
   *p_err = OS_ERR_NONE;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	801a      	strh	r2, [r3, #0]
}
 8004c22:	3718      	adds	r7, #24
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	20002608 	.word	0x20002608
 8004c2c:	20002370 	.word	0x20002370
 8004c30:	200025dc 	.word	0x200025dc

08004c34 <OSTimeDlyHMSM>:
                     CPU_INT16U   minutes,
                     CPU_INT16U   seconds,
                     CPU_INT32U   milli,
                     OS_OPT       opt,
                     OS_ERR      *p_err)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b088      	sub	sp, #32
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	607b      	str	r3, [r7, #4]
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	81fb      	strh	r3, [r7, #14]
 8004c40:	460b      	mov	r3, r1
 8004c42:	81bb      	strh	r3, [r7, #12]
 8004c44:	4613      	mov	r3, r2
 8004c46:	817b      	strh	r3, [r7, #10]
    CPU_BOOLEAN  opt_non_strict;
#endif
    OS_OPT       opt_time;
    OS_RATE_HZ   tick_rate;
    OS_TICK      ticks;
    CPU_SR_ALLOC();
 8004c48:	2300      	movs	r3, #0
 8004c4a:	61fb      	str	r3, [r7, #28]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0u) {             /* Not allowed to call from an ISR                        */
 8004c4c:	4b72      	ldr	r3, [pc, #456]	; (8004e18 <OSTimeDlyHMSM+0x1e4>)
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d004      	beq.n	8004c5e <OSTimeDlyHMSM+0x2a>
       *p_err = OS_ERR_TIME_DLY_ISR;
 8004c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c56:	f247 2275 	movw	r2, #29301	; 0x7275
 8004c5a:	801a      	strh	r2, [r3, #0]
        return;
 8004c5c:	e0d8      	b.n	8004e10 <OSTimeDlyHMSM+0x1dc>
    }
#endif

    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0u) {       /* Can't delay when the scheduler is locked               */
 8004c5e:	4b6f      	ldr	r3, [pc, #444]	; (8004e1c <OSTimeDlyHMSM+0x1e8>)
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d004      	beq.n	8004c70 <OSTimeDlyHMSM+0x3c>
       *p_err = OS_ERR_SCHED_LOCKED;
 8004c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c68:	f646 5263 	movw	r2, #28003	; 0x6d63
 8004c6c:	801a      	strh	r2, [r3, #0]
        return;
 8004c6e:	e0cf      	b.n	8004e10 <OSTimeDlyHMSM+0x1dc>
    }

    opt_time = opt & OS_OPT_TIME_MASK;                      /* Retrieve time options only.                            */
 8004c70:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004c72:	f003 030e 	and.w	r3, r3, #14
 8004c76:	837b      	strh	r3, [r7, #26]
    switch (opt_time) {
 8004c78:	8b7b      	ldrh	r3, [r7, #26]
 8004c7a:	2b08      	cmp	r3, #8
 8004c7c:	d825      	bhi.n	8004cca <OSTimeDlyHMSM+0x96>
 8004c7e:	a201      	add	r2, pc, #4	; (adr r2, 8004c84 <OSTimeDlyHMSM+0x50>)
 8004c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c84:	08004ca9 	.word	0x08004ca9
 8004c88:	08004ccb 	.word	0x08004ccb
 8004c8c:	08004ca9 	.word	0x08004ca9
 8004c90:	08004ccb 	.word	0x08004ccb
 8004c94:	08004cd5 	.word	0x08004cd5
 8004c98:	08004ccb 	.word	0x08004ccb
 8004c9c:	08004ccb 	.word	0x08004ccb
 8004ca0:	08004ccb 	.word	0x08004ccb
 8004ca4:	08004ca9 	.word	0x08004ca9
        case OS_OPT_TIME_DLY:
        case OS_OPT_TIME_TIMEOUT:
        case OS_OPT_TIME_PERIODIC:
             if (milli == (CPU_INT32U)0u) {                 /* Make sure we didn't specify a 0 delay                  */
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d114      	bne.n	8004cd8 <OSTimeDlyHMSM+0xa4>
                 if (seconds == (CPU_INT16U)0u) {
 8004cae:	897b      	ldrh	r3, [r7, #10]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d111      	bne.n	8004cd8 <OSTimeDlyHMSM+0xa4>
                     if (minutes == (CPU_INT16U)0u) {
 8004cb4:	89bb      	ldrh	r3, [r7, #12]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10e      	bne.n	8004cd8 <OSTimeDlyHMSM+0xa4>
                         if (hours == (CPU_INT16U)0u) {
 8004cba:	89fb      	ldrh	r3, [r7, #14]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10b      	bne.n	8004cd8 <OSTimeDlyHMSM+0xa4>
                            *p_err = OS_ERR_TIME_ZERO_DLY;
 8004cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc2:	f247 227e 	movw	r2, #29310	; 0x727e
 8004cc6:	801a      	strh	r2, [r3, #0]
                             return;
 8004cc8:	e0a2      	b.n	8004e10 <OSTimeDlyHMSM+0x1dc>

        case OS_OPT_TIME_MATCH:
             break;

        default:
            *p_err = OS_ERR_OPT_INVALID;
 8004cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ccc:	f645 6225 	movw	r2, #24101	; 0x5e25
 8004cd0:	801a      	strh	r2, [r3, #0]
             return;
 8004cd2:	e09d      	b.n	8004e10 <OSTimeDlyHMSM+0x1dc>
                 }
             }
             break;

        case OS_OPT_TIME_MATCH:
             break;
 8004cd4:	bf00      	nop
 8004cd6:	e000      	b.n	8004cda <OSTimeDlyHMSM+0xa6>
                             return;
                         }
                     }
                 }
             }
             break;
 8004cd8:	bf00      	nop
            *p_err = OS_ERR_OPT_INVALID;
             return;
    }

#if OS_CFG_ARG_CHK_EN > 0u                                  /* Validate arguments to be within range                  */
    opt_invalid = DEF_BIT_IS_SET_ANY(opt, ~OS_OPT_TIME_OPTS_MASK);
 8004cda:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004cdc:	f023 031e 	bic.w	r3, r3, #30
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	bf14      	ite	ne
 8004ce4:	2301      	movne	r3, #1
 8004ce6:	2300      	moveq	r3, #0
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	767b      	strb	r3, [r7, #25]
    if (opt_invalid == DEF_YES) {
 8004cec:	7e7b      	ldrb	r3, [r7, #25]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d104      	bne.n	8004cfc <OSTimeDlyHMSM+0xc8>
       *p_err = OS_ERR_OPT_INVALID;
 8004cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf4:	f645 6225 	movw	r2, #24101	; 0x5e25
 8004cf8:	801a      	strh	r2, [r3, #0]
        return;
 8004cfa:	e089      	b.n	8004e10 <OSTimeDlyHMSM+0x1dc>
    }

    opt_non_strict = DEF_BIT_IS_SET(opt, OS_OPT_TIME_HMSM_NON_STRICT);
 8004cfc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004cfe:	f003 0310 	and.w	r3, r3, #16
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d001      	beq.n	8004d0a <OSTimeDlyHMSM+0xd6>
 8004d06:	2301      	movs	r3, #1
 8004d08:	e000      	b.n	8004d0c <OSTimeDlyHMSM+0xd8>
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	763b      	strb	r3, [r7, #24]
    if (opt_non_strict != DEF_YES) {
 8004d0e:	7e3b      	ldrb	r3, [r7, #24]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d020      	beq.n	8004d56 <OSTimeDlyHMSM+0x122>
         if (milli   > (CPU_INT32U)999u) {
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d1a:	d304      	bcc.n	8004d26 <OSTimeDlyHMSM+0xf2>
            *p_err = OS_ERR_TIME_INVALID_MILLISECONDS;
 8004d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1e:	f247 227b 	movw	r2, #29307	; 0x727b
 8004d22:	801a      	strh	r2, [r3, #0]
             return;
 8004d24:	e074      	b.n	8004e10 <OSTimeDlyHMSM+0x1dc>
         }
         if (seconds > (CPU_INT16U)59u) {
 8004d26:	897b      	ldrh	r3, [r7, #10]
 8004d28:	2b3b      	cmp	r3, #59	; 0x3b
 8004d2a:	d904      	bls.n	8004d36 <OSTimeDlyHMSM+0x102>
            *p_err = OS_ERR_TIME_INVALID_SECONDS;
 8004d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2e:	f247 227a 	movw	r2, #29306	; 0x727a
 8004d32:	801a      	strh	r2, [r3, #0]
             return;
 8004d34:	e06c      	b.n	8004e10 <OSTimeDlyHMSM+0x1dc>
         }
         if (minutes > (CPU_INT16U)59u) {
 8004d36:	89bb      	ldrh	r3, [r7, #12]
 8004d38:	2b3b      	cmp	r3, #59	; 0x3b
 8004d3a:	d904      	bls.n	8004d46 <OSTimeDlyHMSM+0x112>
            *p_err = OS_ERR_TIME_INVALID_MINUTES;
 8004d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3e:	f247 2279 	movw	r2, #29305	; 0x7279
 8004d42:	801a      	strh	r2, [r3, #0]
             return;
 8004d44:	e064      	b.n	8004e10 <OSTimeDlyHMSM+0x1dc>
         }
         if (hours   > (CPU_INT16U)99u) {
 8004d46:	89fb      	ldrh	r3, [r7, #14]
 8004d48:	2b63      	cmp	r3, #99	; 0x63
 8004d4a:	d917      	bls.n	8004d7c <OSTimeDlyHMSM+0x148>
            *p_err = OS_ERR_TIME_INVALID_HOURS;
 8004d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d4e:	f247 2278 	movw	r2, #29304	; 0x7278
 8004d52:	801a      	strh	r2, [r3, #0]
             return;
 8004d54:	e05c      	b.n	8004e10 <OSTimeDlyHMSM+0x1dc>
         }
    } else {
         if (minutes > (CPU_INT16U)9999u) {
 8004d56:	89bb      	ldrh	r3, [r7, #12]
 8004d58:	f242 720f 	movw	r2, #9999	; 0x270f
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d904      	bls.n	8004d6a <OSTimeDlyHMSM+0x136>
            *p_err = OS_ERR_TIME_INVALID_MINUTES;
 8004d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d62:	f247 2279 	movw	r2, #29305	; 0x7279
 8004d66:	801a      	strh	r2, [r3, #0]
             return;
 8004d68:	e052      	b.n	8004e10 <OSTimeDlyHMSM+0x1dc>
         }
         if (hours   > (CPU_INT16U)999u) {
 8004d6a:	89fb      	ldrh	r3, [r7, #14]
 8004d6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d70:	d304      	bcc.n	8004d7c <OSTimeDlyHMSM+0x148>
            *p_err = OS_ERR_TIME_INVALID_HOURS;
 8004d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d74:	f247 2278 	movw	r2, #29304	; 0x7278
 8004d78:	801a      	strh	r2, [r3, #0]
             return;
 8004d7a:	e049      	b.n	8004e10 <OSTimeDlyHMSM+0x1dc>
    }
#endif

                                                            /* Compute the total number of clock ticks required..     */
                                                            /* .. (rounded to the nearest tick)                       */
    tick_rate = OSCfg_TickRate_Hz;
 8004d7c:	4b28      	ldr	r3, [pc, #160]	; (8004e20 <OSTimeDlyHMSM+0x1ec>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	617b      	str	r3, [r7, #20]
    ticks     = ((OS_TICK)hours * (OS_TICK)3600u + (OS_TICK)minutes * (OS_TICK)60u + (OS_TICK)seconds) * tick_rate
 8004d82:	89fb      	ldrh	r3, [r7, #14]
 8004d84:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8004d88:	fb02 f103 	mul.w	r1, r2, r3
 8004d8c:	89ba      	ldrh	r2, [r7, #12]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	011b      	lsls	r3, r3, #4
 8004d92:	1a9b      	subs	r3, r3, r2
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	18ca      	adds	r2, r1, r3
 8004d98:	897b      	ldrh	r3, [r7, #10]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	fb02 f203 	mul.w	r2, r2, r3
              + (tick_rate * ((OS_TICK)milli + (OS_TICK)500u / tick_rate)) / (OS_TICK)1000u;
 8004da2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	fbb1 f1f3 	udiv	r1, r1, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	440b      	add	r3, r1
 8004db0:	6979      	ldr	r1, [r7, #20]
 8004db2:	fb01 f303 	mul.w	r3, r1, r3
 8004db6:	491b      	ldr	r1, [pc, #108]	; (8004e24 <OSTimeDlyHMSM+0x1f0>)
 8004db8:	fba1 1303 	umull	r1, r3, r1, r3
 8004dbc:	099b      	lsrs	r3, r3, #6
#endif

                                                            /* Compute the total number of clock ticks required..     */
                                                            /* .. (rounded to the nearest tick)                       */
    tick_rate = OSCfg_TickRate_Hz;
    ticks     = ((OS_TICK)hours * (OS_TICK)3600u + (OS_TICK)minutes * (OS_TICK)60u + (OS_TICK)seconds) * tick_rate
 8004dbe:	4413      	add	r3, r2
 8004dc0:	613b      	str	r3, [r7, #16]
              + (tick_rate * ((OS_TICK)milli + (OS_TICK)500u / tick_rate)) / (OS_TICK)1000u;

    if (ticks > (OS_TICK)0u) {
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d01f      	beq.n	8004e08 <OSTimeDlyHMSM+0x1d4>
        OS_CRITICAL_ENTER();
 8004dc8:	f7fb fa8a 	bl	80002e0 <CPU_SR_Save>
 8004dcc:	61f8      	str	r0, [r7, #28]
        OS_TickListInsertDly(OSTCBCurPtr,
 8004dce:	4b16      	ldr	r3, [pc, #88]	; (8004e28 <OSTimeDlyHMSM+0x1f4>)
 8004dd0:	6818      	ldr	r0, [r3, #0]
 8004dd2:	8b7a      	ldrh	r2, [r7, #26]
 8004dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd6:	6939      	ldr	r1, [r7, #16]
 8004dd8:	f7ff f914 	bl	8004004 <OS_TickListInsertDly>
                             ticks,
                             opt_time,
                             p_err);
        if (*p_err != OS_ERR_NONE) {
 8004ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dde:	881b      	ldrh	r3, [r3, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d003      	beq.n	8004dec <OSTimeDlyHMSM+0x1b8>
             OS_CRITICAL_EXIT_NO_SCHED();
 8004de4:	69f8      	ldr	r0, [r7, #28]
 8004de6:	f7fb fa7f 	bl	80002e8 <CPU_SR_Restore>
             return;
 8004dea:	e011      	b.n	8004e10 <OSTimeDlyHMSM+0x1dc>
        }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_DLY(ticks);                           /* Record the event.                                      */
#endif
        OS_RdyListRemove(OSTCBCurPtr);                      /* Remove current task from ready list                    */
 8004dec:	4b0e      	ldr	r3, [pc, #56]	; (8004e28 <OSTimeDlyHMSM+0x1f4>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4618      	mov	r0, r3
 8004df2:	f7fe ff1f 	bl	8003c34 <OS_RdyListRemove>
        OS_CRITICAL_EXIT_NO_SCHED();
 8004df6:	69f8      	ldr	r0, [r7, #28]
 8004df8:	f7fb fa76 	bl	80002e8 <CPU_SR_Restore>
        OSSched();                                          /* Find next task to run!                                 */
 8004dfc:	f7fe fa24 	bl	8003248 <OSSched>
       *p_err = OS_ERR_NONE;
 8004e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e02:	2200      	movs	r2, #0
 8004e04:	801a      	strh	r2, [r3, #0]
 8004e06:	e003      	b.n	8004e10 <OSTimeDlyHMSM+0x1dc>
    } else {
       *p_err = OS_ERR_TIME_ZERO_DLY;
 8004e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e0a:	f247 227e 	movw	r2, #29310	; 0x727e
 8004e0e:	801a      	strh	r2, [r3, #0]
    }
}
 8004e10:	3720      	adds	r7, #32
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	20002608 	.word	0x20002608
 8004e1c:	20002370 	.word	0x20002370
 8004e20:	0800df4c 	.word	0x0800df4c
 8004e24:	10624dd3 	.word	0x10624dd3
 8004e28:	200025dc 	.word	0x200025dc

08004e2c <OSTimeTick>:
* Returns    : none
************************************************************************************************************************
*/

void  OSTimeTick (void)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
#if OS_CFG_ISR_POST_DEFERRED_EN > 0u
    CPU_TS  ts;
#endif


    OSTimeTickHook();                                       /* Call user definable hook                               */
 8004e32:	f000 fff7 	bl	8005e24 <OSTimeTickHook>
                (CPU_TS     ) ts,
                (OS_ERR    *)&err);

#else

   (void)OSTaskSemPost((OS_TCB *)&OSTickTaskTCB,            /* Signal tick task                                       */
 8004e36:	1dbb      	adds	r3, r7, #6
 8004e38:	461a      	mov	r2, r3
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	480c      	ldr	r0, [pc, #48]	; (8004e70 <OSTimeTick+0x44>)
 8004e3e:	f7fd faeb 	bl	8002418 <OSTaskSemPost>
#if OS_CFG_SCHED_ROUND_ROBIN_EN > 0u
    OS_SchedRoundRobin(&OSRdyList[OSPrioCur]);
#endif

#if OS_CFG_TMR_EN > 0u
    OSTmrUpdateCtr--;
 8004e42:	4b0c      	ldr	r3, [pc, #48]	; (8004e74 <OSTimeTick+0x48>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	3b01      	subs	r3, #1
 8004e48:	4a0a      	ldr	r2, [pc, #40]	; (8004e74 <OSTimeTick+0x48>)
 8004e4a:	6013      	str	r3, [r2, #0]
    if (OSTmrUpdateCtr == (OS_CTR)0u) {
 8004e4c:	4b09      	ldr	r3, [pc, #36]	; (8004e74 <OSTimeTick+0x48>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d109      	bne.n	8004e68 <OSTimeTick+0x3c>
        OSTmrUpdateCtr = OSTmrUpdateCnt;
 8004e54:	4b08      	ldr	r3, [pc, #32]	; (8004e78 <OSTimeTick+0x4c>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a06      	ldr	r2, [pc, #24]	; (8004e74 <OSTimeTick+0x48>)
 8004e5a:	6013      	str	r3, [r2, #0]
        OSTaskSemPost((OS_TCB *)&OSTmrTaskTCB,              /* Signal timer task                                      */
 8004e5c:	1dbb      	adds	r3, r7, #6
 8004e5e:	461a      	mov	r2, r3
 8004e60:	2100      	movs	r1, #0
 8004e62:	4806      	ldr	r0, [pc, #24]	; (8004e7c <OSTimeTick+0x50>)
 8004e64:	f7fd fad8 	bl	8002418 <OSTaskSemPost>
                      (OS_ERR *)&err);
    }
#endif

#endif
}
 8004e68:	bf00      	nop
 8004e6a:	3708      	adds	r7, #8
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	20002514 	.word	0x20002514
 8004e74:	200028e8 	.word	0x200028e8
 8004e78:	200028d8 	.word	0x200028d8
 8004e7c:	2000260c 	.word	0x2000260c

08004e80 <OSCfg_Init>:
*                  DOES NOT optimize out the 'const' variables above.
************************************************************************************************************************
*/

void  OSCfg_Init (void)
{
 8004e80:	b480      	push	{r7}
 8004e82:	af00      	add	r7, sp, #0
    (void)&OSCfg_TmrTaskStkBasePtr;
    (void)&OSCfg_TmrTaskStkLimit;
    (void)&OSCfg_TmrTaskStkSize;
    (void)&OSCfg_TmrTaskStkSizeRAM;
#endif
}
 8004e84:	bf00      	nop
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bc80      	pop	{r7}
 8004e8a:	4770      	bx	lr

08004e8c <OS_SemInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_SemInit (OS_ERR  *p_err)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSSemDbgListPtr = (OS_SEM *)0;
 8004e94:	4b06      	ldr	r3, [pc, #24]	; (8004eb0 <OS_SemInit+0x24>)
 8004e96:	2200      	movs	r2, #0
 8004e98:	601a      	str	r2, [r3, #0]
#endif

    OSSemQty        = (OS_OBJ_QTY)0;
 8004e9a:	4b06      	ldr	r3, [pc, #24]	; (8004eb4 <OS_SemInit+0x28>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	801a      	strh	r2, [r3, #0]
   *p_err           = OS_ERR_NONE;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	801a      	strh	r2, [r3, #0]
}
 8004ea6:	bf00      	nop
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bc80      	pop	{r7}
 8004eae:	4770      	bx	lr
 8004eb0:	20002508 	.word	0x20002508
 8004eb4:	2000279c 	.word	0x2000279c

08004eb8 <OSMutexCreate>:
*/

void  OSMutexCreate (OS_MUTEX  *p_mutex,
                     CPU_CHAR  *p_name,
                     OS_ERR    *p_err)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
    CPU_SR_ALLOC();
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to be called from an ISR                   */
 8004ec8:	4b1e      	ldr	r3, [pc, #120]	; (8004f44 <OSMutexCreate+0x8c>)
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d004      	beq.n	8004eda <OSMutexCreate+0x22>
       *p_err = OS_ERR_CREATE_ISR;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f642 62e1 	movw	r2, #12001	; 0x2ee1
 8004ed6:	801a      	strh	r2, [r3, #0]
        return;
 8004ed8:	e031      	b.n	8004f3e <OSMutexCreate+0x86>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_mutex == (OS_MUTEX *)0) {                         /* Validate 'p_mutex'                                     */
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d104      	bne.n	8004eea <OSMutexCreate+0x32>
       *p_err = OS_ERR_OBJ_PTR_NULL;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f645 52c3 	movw	r2, #24003	; 0x5dc3
 8004ee6:	801a      	strh	r2, [r3, #0]
        return;
 8004ee8:	e029      	b.n	8004f3e <OSMutexCreate+0x86>
    }
#endif

    OS_CRITICAL_ENTER();
 8004eea:	f7fb f9f9 	bl	80002e0 <CPU_SR_Save>
 8004eee:	6178      	str	r0, [r7, #20]
#if OS_OBJ_TYPE_REQ > 0u
    p_mutex->Type              =  OS_OBJ_TYPE_MUTEX;        /* Mark the data structure as a mutex                     */
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	4a15      	ldr	r2, [pc, #84]	; (8004f48 <OSMutexCreate+0x90>)
 8004ef4:	601a      	str	r2, [r3, #0]
#endif
#if OS_CFG_DBG_EN > 0u
    p_mutex->NamePtr           =  p_name;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	68ba      	ldr	r2, [r7, #8]
 8004efa:	605a      	str	r2, [r3, #4]
#else
    (void)&p_name;
#endif
    p_mutex->MutexGrpNextPtr   = (OS_MUTEX     *)0;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	621a      	str	r2, [r3, #32]
    p_mutex->OwnerTCBPtr       = (OS_TCB       *)0;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	625a      	str	r2, [r3, #36]	; 0x24
    p_mutex->OwnerNestingCtr   = (OS_NESTING_CTR)0;         /* Mutex is available                                     */
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    p_mutex->TS                = (CPU_TS        )0;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2200      	movs	r2, #0
 8004f14:	62da      	str	r2, [r3, #44]	; 0x2c
    OS_PendListInit(&p_mutex->PendList);                    /* Initialize the waiting list                            */
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	3308      	adds	r3, #8
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7fe fc06 	bl	800372c <OS_PendListInit>

#if OS_CFG_DBG_EN > 0u
    OS_MutexDbgListAdd(p_mutex);
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f000 f9f9 	bl	8005318 <OS_MutexDbgListAdd>
#endif

    OSMutexQty++;
 8004f26:	4b09      	ldr	r3, [pc, #36]	; (8004f4c <OSMutexCreate+0x94>)
 8004f28:	881b      	ldrh	r3, [r3, #0]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	4b07      	ldr	r3, [pc, #28]	; (8004f4c <OSMutexCreate+0x94>)
 8004f30:	801a      	strh	r2, [r3, #0]

#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_MUTEX_CREATE(p_mutex, p_name);                 /* Record the event.                                      */
#endif

    OS_CRITICAL_EXIT_NO_SCHED();
 8004f32:	6978      	ldr	r0, [r7, #20]
 8004f34:	f7fb f9d8 	bl	80002e8 <CPU_SR_Restore>
   *p_err = OS_ERR_NONE;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	801a      	strh	r2, [r3, #0]
}
 8004f3e:	3718      	adds	r7, #24
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	20002608 	.word	0x20002608
 8004f48:	5854554d 	.word	0x5854554d
 8004f4c:	20002804 	.word	0x20002804

08004f50 <OSMutexPend>:
void  OSMutexPend (OS_MUTEX  *p_mutex,
                   OS_TICK    timeout,
                   OS_OPT     opt,
                   CPU_TS    *p_ts,
                   OS_ERR    *p_err)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b08e      	sub	sp, #56	; 0x38
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	603b      	str	r3, [r7, #0]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	80fb      	strh	r3, [r7, #6]
    OS_PEND_DATA  pend_data;
    OS_TCB       *p_tcb;
    CPU_SR_ALLOC();
 8004f60:	2300      	movs	r3, #0
 8004f62:	637b      	str	r3, [r7, #52]	; 0x34
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 8004f64:	4b7a      	ldr	r3, [pc, #488]	; (8005150 <OSMutexPend+0x200>)
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d004      	beq.n	8004f76 <OSMutexPend+0x26>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_PEND_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_PEND_ISR;
 8004f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f6e:	f246 12ae 	movw	r2, #25006	; 0x61ae
 8004f72:	801a      	strh	r2, [r3, #0]
        return;
 8004f74:	e0e9      	b.n	800514a <OSMutexPend+0x1fa>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_mutex == (OS_MUTEX *)0) {                         /* Validate arguments                                     */
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d104      	bne.n	8004f86 <OSMutexPend+0x36>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_PEND_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_PTR_NULL;
 8004f7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f7e:	f645 52c3 	movw	r2, #24003	; 0x5dc3
 8004f82:	801a      	strh	r2, [r3, #0]
        return;
 8004f84:	e0e1      	b.n	800514a <OSMutexPend+0x1fa>
    }
    switch (opt) {                                          /* Validate 'opt'                                         */
 8004f86:	88fb      	ldrh	r3, [r7, #6]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d007      	beq.n	8004f9c <OSMutexPend+0x4c>
 8004f8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f90:	d004      	beq.n	8004f9c <OSMutexPend+0x4c>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_MUTEX_PEND_FAILED(p_mutex);           /* Record the event.                                      */
#endif
            *p_err = OS_ERR_OPT_INVALID;
 8004f92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f94:	f645 6225 	movw	r2, #24101	; 0x5e25
 8004f98:	801a      	strh	r2, [r3, #0]
             return;
 8004f9a:	e0d6      	b.n	800514a <OSMutexPend+0x1fa>
        return;
    }
    switch (opt) {                                          /* Validate 'opt'                                         */
        case OS_OPT_PEND_BLOCKING:
        case OS_OPT_PEND_NON_BLOCKING:
             break;
 8004f9c:	bf00      	nop
             return;
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_mutex->Type != OS_OBJ_TYPE_MUTEX) {               /* Make sure mutex was created                            */
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a6c      	ldr	r2, [pc, #432]	; (8005154 <OSMutexPend+0x204>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d004      	beq.n	8004fb2 <OSMutexPend+0x62>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_PEND_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_TYPE;
 8004fa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004faa:	f645 52c4 	movw	r2, #24004	; 0x5dc4
 8004fae:	801a      	strh	r2, [r3, #0]
        return;
 8004fb0:	e0cb      	b.n	800514a <OSMutexPend+0x1fa>
    }
#endif

    if (p_ts != (CPU_TS *)0) {
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d002      	beq.n	8004fbe <OSMutexPend+0x6e>
       *p_ts  = (CPU_TS  )0;                                /* Initialize the returned timestamp                      */
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	601a      	str	r2, [r3, #0]
    }

    CPU_CRITICAL_ENTER();
 8004fbe:	f7fb f98f 	bl	80002e0 <CPU_SR_Save>
 8004fc2:	6378      	str	r0, [r7, #52]	; 0x34
    if (p_mutex->OwnerNestingCtr == (OS_NESTING_CTR)0) {    /* Resource available?                                    */
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d11b      	bne.n	8005006 <OSMutexPend+0xb6>
        p_mutex->OwnerTCBPtr       =  OSTCBCurPtr;          /* Yes, caller may proceed                                */
 8004fce:	4b62      	ldr	r3, [pc, #392]	; (8005158 <OSMutexPend+0x208>)
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	625a      	str	r2, [r3, #36]	; 0x24
        p_mutex->OwnerNestingCtr   = (OS_NESTING_CTR)1;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        if (p_ts != (CPU_TS *)0) {
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d003      	beq.n	8004fec <OSMutexPend+0x9c>
           *p_ts  = p_mutex->TS;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	601a      	str	r2, [r3, #0]
        }
        OS_MutexGrpAdd(OSTCBCurPtr, p_mutex);               /* Add mutex to owner's group                             */
 8004fec:	4b5a      	ldr	r3, [pc, #360]	; (8005158 <OSMutexPend+0x208>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68f9      	ldr	r1, [r7, #12]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f000 f9cc 	bl	8005390 <OS_MutexGrpAdd>
        CPU_CRITICAL_EXIT();
 8004ff8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004ffa:	f7fb f975 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_PEND(p_mutex);                       /* Record the event.                                      */
#endif
       *p_err = OS_ERR_NONE;
 8004ffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005000:	2200      	movs	r2, #0
 8005002:	801a      	strh	r2, [r3, #0]
        return;
 8005004:	e0a1      	b.n	800514a <OSMutexPend+0x1fa>
    }

    if (OSTCBCurPtr == p_mutex->OwnerTCBPtr) {              /* See if current task is already the owner of the mutex  */
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800500a:	4b53      	ldr	r3, [pc, #332]	; (8005158 <OSMutexPend+0x208>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	429a      	cmp	r2, r3
 8005010:	d116      	bne.n	8005040 <OSMutexPend+0xf0>
        p_mutex->OwnerNestingCtr++;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005018:	3301      	adds	r3, #1
 800501a:	b2da      	uxtb	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        if (p_ts != (CPU_TS *)0) {
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d003      	beq.n	8005030 <OSMutexPend+0xe0>
           *p_ts  = p_mutex->TS;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	601a      	str	r2, [r3, #0]
        }
        CPU_CRITICAL_EXIT();
 8005030:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005032:	f7fb f959 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_PEND_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_MUTEX_OWNER;                         /* Indicate that current task already owns the mutex      */
 8005036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005038:	f245 7282 	movw	r2, #22402	; 0x5782
 800503c:	801a      	strh	r2, [r3, #0]
        return;
 800503e:	e084      	b.n	800514a <OSMutexPend+0x1fa>
    }

    if ((opt & OS_OPT_PEND_NON_BLOCKING) != (OS_OPT)0) {    /* Caller wants to block if not available?                */
 8005040:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005044:	2b00      	cmp	r3, #0
 8005046:	da07      	bge.n	8005058 <OSMutexPend+0x108>
        CPU_CRITICAL_EXIT();
 8005048:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800504a:	f7fb f94d 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_PEND_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_PEND_WOULD_BLOCK;                    /* No                                                     */
 800504e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005050:	f246 12b0 	movw	r2, #25008	; 0x61b0
 8005054:	801a      	strh	r2, [r3, #0]
        return;
 8005056:	e078      	b.n	800514a <OSMutexPend+0x1fa>
    } else {
        if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /* Can't pend when the scheduler is locked                */
 8005058:	4b40      	ldr	r3, [pc, #256]	; (800515c <OSMutexPend+0x20c>)
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d007      	beq.n	8005070 <OSMutexPend+0x120>
            CPU_CRITICAL_EXIT();
 8005060:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005062:	f7fb f941 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
            TRACE_OS_MUTEX_PEND_FAILED(p_mutex);            /* Record the event.                                      */
#endif
           *p_err = OS_ERR_SCHED_LOCKED;
 8005066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005068:	f646 5263 	movw	r2, #28003	; 0x6d63
 800506c:	801a      	strh	r2, [r3, #0]
            return;
 800506e:	e06c      	b.n	800514a <OSMutexPend+0x1fa>
        }
    }
                                                            /* Lock the scheduler/re-enable interrupts                */
    OS_CRITICAL_ENTER_CPU_EXIT();
    p_tcb = p_mutex->OwnerTCBPtr;                           /* Point to the TCB of the Mutex owner                    */
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005074:	633b      	str	r3, [r7, #48]	; 0x30
    if (p_tcb->Prio > OSTCBCurPtr->Prio) {                  /* See if mutex owner has a lower priority than current   */
 8005076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005078:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 800507c:	4b36      	ldr	r3, [pc, #216]	; (8005158 <OSMutexPend+0x208>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8005084:	429a      	cmp	r2, r3
 8005086:	d907      	bls.n	8005098 <OSMutexPend+0x148>
        OS_TaskChangePrio(p_tcb, OSTCBCurPtr->Prio);
 8005088:	4b33      	ldr	r3, [pc, #204]	; (8005158 <OSMutexPend+0x208>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8005090:	4619      	mov	r1, r3
 8005092:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005094:	f7fd fd54 	bl	8002b40 <OS_TaskChangePrio>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
                 TRACE_OS_MUTEX_TASK_PRIO_INHERIT(p_tcb, p_tcb->Prio);
#endif
    }

    OS_Pend(&pend_data,                                     /* Block task pending on Mutex                            */
 8005098:	f107 0010 	add.w	r0, r7, #16
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	2204      	movs	r2, #4
 80050a0:	68f9      	ldr	r1, [r7, #12]
 80050a2:	f7fe fa3d 	bl	8003520 <OS_Pend>
            (OS_PEND_OBJ *)((void *)p_mutex),
             OS_TASK_PEND_ON_MUTEX,
             timeout);

    OS_CRITICAL_EXIT_NO_SCHED();
 80050a6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80050a8:	f7fb f91e 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_MUTEX_PEND_BLOCK(p_mutex);                     /* Record the event.                                      */
#endif
    OSSched();                                              /* Find the next highest priority task ready to run       */
 80050ac:	f7fe f8cc 	bl	8003248 <OSSched>

    CPU_CRITICAL_ENTER();
 80050b0:	f7fb f916 	bl	80002e0 <CPU_SR_Save>
 80050b4:	6378      	str	r0, [r7, #52]	; 0x34
    switch (OSTCBCurPtr->PendStatus) {
 80050b6:	4b28      	ldr	r3, [pc, #160]	; (8005158 <OSMutexPend+0x208>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050be:	2b03      	cmp	r3, #3
 80050c0:	d83b      	bhi.n	800513a <OSMutexPend+0x1ea>
 80050c2:	a201      	add	r2, pc, #4	; (adr r2, 80050c8 <OSMutexPend+0x178>)
 80050c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c8:	080050d9 	.word	0x080050d9
 80050cc:	080050f1 	.word	0x080050f1
 80050d0:	08005121 	.word	0x08005121
 80050d4:	0800510b 	.word	0x0800510b
        case OS_STATUS_PEND_OK:                             /* We got the mutex                                       */
             if (p_ts != (CPU_TS *)0) {
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d004      	beq.n	80050e8 <OSMutexPend+0x198>
                *p_ts  = OSTCBCurPtr->TS;
 80050de:	4b1e      	ldr	r3, [pc, #120]	; (8005158 <OSMutexPend+0x208>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_MUTEX_PEND(p_mutex);                  /* Record the event.                                      */
#endif
            *p_err = OS_ERR_NONE;
 80050e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050ea:	2200      	movs	r2, #0
 80050ec:	801a      	strh	r2, [r3, #0]
             break;
 80050ee:	e029      	b.n	8005144 <OSMutexPend+0x1f4>

        case OS_STATUS_PEND_ABORT:                          /* Indicate that we aborted                               */
             if (p_ts != (CPU_TS *)0) {
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d004      	beq.n	8005100 <OSMutexPend+0x1b0>
                *p_ts  = OSTCBCurPtr->TS;
 80050f6:	4b18      	ldr	r3, [pc, #96]	; (8005158 <OSMutexPend+0x208>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_MUTEX_PEND_FAILED(p_mutex);           /* Record the event.                                      */
#endif
            *p_err = OS_ERR_PEND_ABORT;
 8005100:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005102:	f246 12a9 	movw	r2, #25001	; 0x61a9
 8005106:	801a      	strh	r2, [r3, #0]
             break;
 8005108:	e01c      	b.n	8005144 <OSMutexPend+0x1f4>

        case OS_STATUS_PEND_TIMEOUT:                        /* Indicate that we didn't get mutex within timeout       */
             if (p_ts != (CPU_TS *)0) {
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d002      	beq.n	8005116 <OSMutexPend+0x1c6>
                *p_ts  = (CPU_TS  )0;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	2200      	movs	r2, #0
 8005114:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_MUTEX_PEND_FAILED(p_mutex);           /* Record the event.                                      */
#endif
            *p_err = OS_ERR_TIMEOUT;
 8005116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005118:	f247 22d9 	movw	r2, #29401	; 0x72d9
 800511c:	801a      	strh	r2, [r3, #0]
             break;
 800511e:	e011      	b.n	8005144 <OSMutexPend+0x1f4>

        case OS_STATUS_PEND_DEL:                            /* Indicate that object pended on has been deleted        */
             if (p_ts != (CPU_TS *)0) {
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d004      	beq.n	8005130 <OSMutexPend+0x1e0>
                *p_ts  = OSTCBCurPtr->TS;
 8005126:	4b0c      	ldr	r3, [pc, #48]	; (8005158 <OSMutexPend+0x208>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_MUTEX_PEND_FAILED(p_mutex);           /* Record the event.                                      */
#endif
            *p_err = OS_ERR_OBJ_DEL;
 8005130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005132:	f645 52c2 	movw	r2, #24002	; 0x5dc2
 8005136:	801a      	strh	r2, [r3, #0]
             break;
 8005138:	e004      	b.n	8005144 <OSMutexPend+0x1f4>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_MUTEX_PEND_FAILED(p_mutex);           /* Record the event.                                      */
#endif
            *p_err = OS_ERR_STATUS_INVALID;
 800513a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800513c:	f646 622e 	movw	r2, #28206	; 0x6e2e
 8005140:	801a      	strh	r2, [r3, #0]
             break;
 8005142:	bf00      	nop
    }
    CPU_CRITICAL_EXIT();
 8005144:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005146:	f7fb f8cf 	bl	80002e8 <CPU_SR_Restore>
}
 800514a:	3738      	adds	r7, #56	; 0x38
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	20002608 	.word	0x20002608
 8005154:	5854554d 	.word	0x5854554d
 8005158:	200025dc 	.word	0x200025dc
 800515c:	20002370 	.word	0x20002370

08005160 <OSMutexPost>:
*/

void  OSMutexPost (OS_MUTEX  *p_mutex,
                   OS_OPT     opt,
                   OS_ERR    *p_err)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b08c      	sub	sp, #48	; 0x30
 8005164:	af02      	add	r7, sp, #8
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	460b      	mov	r3, r1
 800516a:	607a      	str	r2, [r7, #4]
 800516c:	817b      	strh	r3, [r7, #10]
    OS_PEND_LIST  *p_pend_list;
    OS_TCB        *p_tcb;
    CPU_TS         ts;
    OS_PRIO        prio_new;
    CPU_SR_ALLOC();
 800516e:	2300      	movs	r3, #0
 8005170:	627b      	str	r3, [r7, #36]	; 0x24
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 8005172:	4b65      	ldr	r3, [pc, #404]	; (8005308 <OSMutexPost+0x1a8>)
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d004      	beq.n	8005184 <OSMutexPost+0x24>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_POST_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_POST_ISR;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f246 220e 	movw	r2, #25102	; 0x620e
 8005180:	801a      	strh	r2, [r3, #0]
        return;
 8005182:	e0be      	b.n	8005302 <OSMutexPost+0x1a2>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_mutex == (OS_MUTEX *)0) {                         /* Validate 'p_mutex'                                     */
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d104      	bne.n	8005194 <OSMutexPost+0x34>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_POST_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_PTR_NULL;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f645 52c3 	movw	r2, #24003	; 0x5dc3
 8005190:	801a      	strh	r2, [r3, #0]
        return;
 8005192:	e0b6      	b.n	8005302 <OSMutexPost+0x1a2>
    }
    switch (opt) {                                          /* Validate 'opt'                                         */
 8005194:	897b      	ldrh	r3, [r7, #10]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d007      	beq.n	80051aa <OSMutexPost+0x4a>
 800519a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800519e:	d004      	beq.n	80051aa <OSMutexPost+0x4a>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_MUTEX_POST_FAILED(p_mutex);           /* Record the event.                                      */
#endif
            *p_err =  OS_ERR_OPT_INVALID;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f645 6225 	movw	r2, #24101	; 0x5e25
 80051a6:	801a      	strh	r2, [r3, #0]
             return;
 80051a8:	e0ab      	b.n	8005302 <OSMutexPost+0x1a2>
        return;
    }
    switch (opt) {                                          /* Validate 'opt'                                         */
        case OS_OPT_POST_NONE:
        case OS_OPT_POST_NO_SCHED:
             break;
 80051aa:	bf00      	nop
             return;
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_mutex->Type != OS_OBJ_TYPE_MUTEX) {               /* Make sure mutex was created                            */
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a56      	ldr	r2, [pc, #344]	; (800530c <OSMutexPost+0x1ac>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d004      	beq.n	80051c0 <OSMutexPost+0x60>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_POST_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_TYPE;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f645 52c4 	movw	r2, #24004	; 0x5dc4
 80051bc:	801a      	strh	r2, [r3, #0]
        return;
 80051be:	e0a0      	b.n	8005302 <OSMutexPost+0x1a2>
    }
#endif

    CPU_CRITICAL_ENTER();
 80051c0:	f7fb f88e 	bl	80002e0 <CPU_SR_Save>
 80051c4:	6278      	str	r0, [r7, #36]	; 0x24
    if (OSTCBCurPtr != p_mutex->OwnerTCBPtr) {              /* Make sure the mutex owner is releasing the mutex       */
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051ca:	4b51      	ldr	r3, [pc, #324]	; (8005310 <OSMutexPost+0x1b0>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d007      	beq.n	80051e2 <OSMutexPost+0x82>
        CPU_CRITICAL_EXIT();
 80051d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80051d4:	f7fb f888 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_POST_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_MUTEX_NOT_OWNER;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f245 7281 	movw	r2, #22401	; 0x5781
 80051de:	801a      	strh	r2, [r3, #0]
        return;
 80051e0:	e08f      	b.n	8005302 <OSMutexPost+0x1a2>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_MUTEX_POST(p_mutex);                           /* Record the event.                                      */
#endif

    OS_CRITICAL_ENTER_CPU_EXIT();
    ts          = OS_TS_GET();                              /* Get timestamp                                          */
 80051e2:	f001 ff43 	bl	800706c <CPU_TS_TmrRd>
 80051e6:	6238      	str	r0, [r7, #32]
    p_mutex->TS = ts;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6a3a      	ldr	r2, [r7, #32]
 80051ec:	62da      	str	r2, [r3, #44]	; 0x2c
    p_mutex->OwnerNestingCtr--;                             /* Decrement owner's nesting counter                      */
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051f4:	3b01      	subs	r3, #1
 80051f6:	b2da      	uxtb	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (p_mutex->OwnerNestingCtr > (OS_NESTING_CTR)0) {     /* Are we done with all nestings?                         */
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005204:	2b00      	cmp	r3, #0
 8005206:	d007      	beq.n	8005218 <OSMutexPost+0xb8>
        OS_CRITICAL_EXIT();                                 /* No                                                     */
 8005208:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800520a:	f7fb f86d 	bl	80002e8 <CPU_SR_Restore>
       *p_err = OS_ERR_MUTEX_NESTING;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f245 7283 	movw	r2, #22403	; 0x5783
 8005214:	801a      	strh	r2, [r3, #0]
        return;
 8005216:	e074      	b.n	8005302 <OSMutexPost+0x1a2>
    }

    OS_MutexGrpRemove(OSTCBCurPtr, p_mutex);                /* Remove mutex from owner's group                        */
 8005218:	4b3d      	ldr	r3, [pc, #244]	; (8005310 <OSMutexPost+0x1b0>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68f9      	ldr	r1, [r7, #12]
 800521e:	4618      	mov	r0, r3
 8005220:	f000 f8c8 	bl	80053b4 <OS_MutexGrpRemove>

    p_pend_list = &p_mutex->PendList;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	3308      	adds	r3, #8
 8005228:	61fb      	str	r3, [r7, #28]
    if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0) {         /* Any task waiting on mutex?                             */
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	891b      	ldrh	r3, [r3, #8]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10d      	bne.n	800524e <OSMutexPost+0xee>
        p_mutex->OwnerTCBPtr     = (OS_TCB       *)0;       /* No                                                     */
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	625a      	str	r2, [r3, #36]	; 0x24
        p_mutex->OwnerNestingCtr = (OS_NESTING_CTR)0;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        OS_CRITICAL_EXIT();
 8005240:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005242:	f7fb f851 	bl	80002e8 <CPU_SR_Restore>
       *p_err = OS_ERR_NONE;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	801a      	strh	r2, [r3, #0]
        return;
 800524c:	e059      	b.n	8005302 <OSMutexPost+0x1a2>
    }
                                                            /* Yes                                                    */
    if (OSTCBCurPtr->Prio != OSTCBCurPtr->BasePrio) {       /* Has owner inherited a priority?                        */
 800524e:	4b30      	ldr	r3, [pc, #192]	; (8005310 <OSMutexPost+0x1b0>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8005256:	4b2e      	ldr	r3, [pc, #184]	; (8005310 <OSMutexPost+0x1b0>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800525e:	429a      	cmp	r2, r3
 8005260:	d02c      	beq.n	80052bc <OSMutexPost+0x15c>
        prio_new = OS_MutexGrpPrioFindHighest(OSTCBCurPtr); /* Yes, find highest priority pending                     */
 8005262:	4b2b      	ldr	r3, [pc, #172]	; (8005310 <OSMutexPost+0x1b0>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4618      	mov	r0, r3
 8005268:	f000 f8c0 	bl	80053ec <OS_MutexGrpPrioFindHighest>
 800526c:	4603      	mov	r3, r0
 800526e:	76fb      	strb	r3, [r7, #27]
        prio_new = prio_new > OSTCBCurPtr->BasePrio ? OSTCBCurPtr->BasePrio : prio_new;
 8005270:	4b27      	ldr	r3, [pc, #156]	; (8005310 <OSMutexPost+0x1b0>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8005278:	7efb      	ldrb	r3, [r7, #27]
 800527a:	4293      	cmp	r3, r2
 800527c:	bf28      	it	cs
 800527e:	4613      	movcs	r3, r2
 8005280:	76fb      	strb	r3, [r7, #27]
        if (prio_new > OSTCBCurPtr->Prio) {
 8005282:	4b23      	ldr	r3, [pc, #140]	; (8005310 <OSMutexPost+0x1b0>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800528a:	7efa      	ldrb	r2, [r7, #27]
 800528c:	429a      	cmp	r2, r3
 800528e:	d915      	bls.n	80052bc <OSMutexPost+0x15c>
            OS_RdyListRemove(OSTCBCurPtr);
 8005290:	4b1f      	ldr	r3, [pc, #124]	; (8005310 <OSMutexPost+0x1b0>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4618      	mov	r0, r3
 8005296:	f7fe fccd 	bl	8003c34 <OS_RdyListRemove>
            OSTCBCurPtr->Prio = prio_new;                   /* Lower owner's priority back to its original one        */
 800529a:	4b1d      	ldr	r3, [pc, #116]	; (8005310 <OSMutexPost+0x1b0>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	7efa      	ldrb	r2, [r7, #27]
 80052a0:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
            TRACE_OS_MUTEX_TASK_PRIO_DISINHERIT(OSTCBCurPtr, prio_new);
#endif
            OS_PrioInsert(prio_new);
 80052a4:	7efb      	ldrb	r3, [r7, #27]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7ff fc0a 	bl	8004ac0 <OS_PrioInsert>
            OS_RdyListInsertTail(OSTCBCurPtr);              /* Insert owner in ready list at new priority             */
 80052ac:	4b18      	ldr	r3, [pc, #96]	; (8005310 <OSMutexPost+0x1b0>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7fe fc7f 	bl	8003bb4 <OS_RdyListInsertTail>
            OSPrioCur         = prio_new;
 80052b6:	4a17      	ldr	r2, [pc, #92]	; (8005314 <OSMutexPost+0x1b4>)
 80052b8:	7efb      	ldrb	r3, [r7, #27]
 80052ba:	7013      	strb	r3, [r2, #0]
        }
    }
                                                            /* Get TCB from head of pend list                         */
    p_tcb                      = p_pend_list->HeadPtr->TCBPtr;
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	617b      	str	r3, [r7, #20]
    p_mutex->OwnerTCBPtr       = p_tcb;                     /* Give mutex to new owner                                */
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	625a      	str	r2, [r3, #36]	; 0x24
    p_mutex->OwnerNestingCtr   = (OS_NESTING_CTR)1;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    OS_MutexGrpAdd(p_tcb, p_mutex);
 80052d2:	68f9      	ldr	r1, [r7, #12]
 80052d4:	6978      	ldr	r0, [r7, #20]
 80052d6:	f000 f85b 	bl	8005390 <OS_MutexGrpAdd>
                                                            /* Post to mutex                                          */
    OS_Post((OS_PEND_OBJ *)((void *)p_mutex),
 80052da:	6a3b      	ldr	r3, [r7, #32]
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	2300      	movs	r3, #0
 80052e0:	2200      	movs	r2, #0
 80052e2:	6979      	ldr	r1, [r7, #20]
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f7fe fb1b 	bl	8003920 <OS_Post>
            (OS_TCB      *)p_tcb,
            (void        *)0,
            (OS_MSG_SIZE  )0,
            (CPU_TS       )ts);

    OS_CRITICAL_EXIT_NO_SCHED();
 80052ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052ec:	f7fa fffc 	bl	80002e8 <CPU_SR_Restore>

    if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0) {
 80052f0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	db01      	blt.n	80052fc <OSMutexPost+0x19c>
        OSSched();                                          /* Run the scheduler                                      */
 80052f8:	f7fd ffa6 	bl	8003248 <OSSched>
    }

   *p_err = OS_ERR_NONE;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	801a      	strh	r2, [r3, #0]
}
 8005302:	3728      	adds	r7, #40	; 0x28
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	20002608 	.word	0x20002608
 800530c:	5854554d 	.word	0x5854554d
 8005310:	200025dc 	.word	0x200025dc
 8005314:	20002510 	.word	0x20002510

08005318 <OS_MutexDbgListAdd>:
*/


#if OS_CFG_DBG_EN > 0u
void  OS_MutexDbgListAdd (OS_MUTEX  *p_mutex)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
    p_mutex->DbgNamePtr               = (CPU_CHAR *)((void *)" ");
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a0e      	ldr	r2, [pc, #56]	; (800535c <OS_MutexDbgListAdd+0x44>)
 8005324:	61da      	str	r2, [r3, #28]
    p_mutex->DbgPrevPtr               = (OS_MUTEX *)0;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	615a      	str	r2, [r3, #20]
    if (OSMutexDbgListPtr == (OS_MUTEX *)0) {
 800532c:	4b0c      	ldr	r3, [pc, #48]	; (8005360 <OS_MutexDbgListAdd+0x48>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d103      	bne.n	800533c <OS_MutexDbgListAdd+0x24>
        p_mutex->DbgNextPtr           = (OS_MUTEX *)0;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	619a      	str	r2, [r3, #24]
 800533a:	e007      	b.n	800534c <OS_MutexDbgListAdd+0x34>
    } else {
        p_mutex->DbgNextPtr           =  OSMutexDbgListPtr;
 800533c:	4b08      	ldr	r3, [pc, #32]	; (8005360 <OS_MutexDbgListAdd+0x48>)
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	619a      	str	r2, [r3, #24]
        OSMutexDbgListPtr->DbgPrevPtr =  p_mutex;
 8005344:	4b06      	ldr	r3, [pc, #24]	; (8005360 <OS_MutexDbgListAdd+0x48>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	615a      	str	r2, [r3, #20]
    }
    OSMutexDbgListPtr                 =  p_mutex;
 800534c:	4a04      	ldr	r2, [pc, #16]	; (8005360 <OS_MutexDbgListAdd+0x48>)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6013      	str	r3, [r2, #0]
}
 8005352:	bf00      	nop
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	bc80      	pop	{r7}
 800535a:	4770      	bx	lr
 800535c:	0800de8c 	.word	0x0800de8c
 8005360:	200028dc 	.word	0x200028dc

08005364 <OS_MutexInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MutexInit (OS_ERR  *p_err)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSMutexDbgListPtr = (OS_MUTEX *)0;
 800536c:	4b06      	ldr	r3, [pc, #24]	; (8005388 <OS_MutexInit+0x24>)
 800536e:	2200      	movs	r2, #0
 8005370:	601a      	str	r2, [r3, #0]
#endif

    OSMutexQty        = (OS_OBJ_QTY)0;
 8005372:	4b06      	ldr	r3, [pc, #24]	; (800538c <OS_MutexInit+0x28>)
 8005374:	2200      	movs	r2, #0
 8005376:	801a      	strh	r2, [r3, #0]
   *p_err             =  OS_ERR_NONE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	801a      	strh	r2, [r3, #0]
}
 800537e:	bf00      	nop
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	bc80      	pop	{r7}
 8005386:	4770      	bx	lr
 8005388:	200028dc 	.word	0x200028dc
 800538c:	20002804 	.word	0x20002804

08005390 <OS_MutexGrpAdd>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MutexGrpAdd (OS_TCB  *p_tcb, OS_MUTEX  *p_mutex)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
    p_mutex->MutexGrpNextPtr = p_tcb->MutexGrpHeadPtr;      /* The mutex grp is not sorted add to head of list.       */
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	621a      	str	r2, [r3, #32]
    p_tcb->MutexGrpHeadPtr   = p_mutex;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bc80      	pop	{r7}
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop

080053b4 <OS_MutexGrpRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MutexGrpRemove (OS_TCB  *p_tcb, OS_MUTEX  *p_mutex)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
    OS_MUTEX  **pp_mutex;

    pp_mutex = &p_tcb->MutexGrpHeadPtr;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	333c      	adds	r3, #60	; 0x3c
 80053c2:	60fb      	str	r3, [r7, #12]

    while(*pp_mutex != p_mutex) {
 80053c4:	e003      	b.n	80053ce <OS_MutexGrpRemove+0x1a>
        pp_mutex = &(*pp_mutex)->MutexGrpNextPtr;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	3320      	adds	r3, #32
 80053cc:	60fb      	str	r3, [r7, #12]
{
    OS_MUTEX  **pp_mutex;

    pp_mutex = &p_tcb->MutexGrpHeadPtr;

    while(*pp_mutex != p_mutex) {
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d1f6      	bne.n	80053c6 <OS_MutexGrpRemove+0x12>
        pp_mutex = &(*pp_mutex)->MutexGrpNextPtr;
    }

    *pp_mutex = (*pp_mutex)->MutexGrpNextPtr;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6a1a      	ldr	r2, [r3, #32]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	601a      	str	r2, [r3, #0]
}
 80053e2:	bf00      	nop
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bc80      	pop	{r7}
 80053ea:	4770      	bx	lr

080053ec <OS_MutexGrpPrioFindHighest>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

OS_PRIO  OS_MutexGrpPrioFindHighest (OS_TCB  *p_tcb)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b087      	sub	sp, #28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
    OS_PRIO        highest_prio;
    OS_PRIO        prio;
    OS_PEND_DATA  *p_head;


    highest_prio = OS_CFG_PRIO_MAX - 1u;
 80053f4:	231f      	movs	r3, #31
 80053f6:	74fb      	strb	r3, [r7, #19]
    pp_mutex = &p_tcb->MutexGrpHeadPtr;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	333c      	adds	r3, #60	; 0x3c
 80053fc:	617b      	str	r3, [r7, #20]

    while(*pp_mutex != (OS_MUTEX *)0) {
 80053fe:	e015      	b.n	800542c <OS_MutexGrpPrioFindHighest+0x40>
        p_head = (*pp_mutex)->PendList.HeadPtr;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	60fb      	str	r3, [r7, #12]
        if (p_head!= (OS_PEND_DATA *)0) {
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00a      	beq.n	8005424 <OS_MutexGrpPrioFindHighest+0x38>
            prio = p_head->TCBPtr->Prio;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8005416:	72fb      	strb	r3, [r7, #11]
            if(prio < highest_prio) {
 8005418:	7afa      	ldrb	r2, [r7, #11]
 800541a:	7cfb      	ldrb	r3, [r7, #19]
 800541c:	429a      	cmp	r2, r3
 800541e:	d201      	bcs.n	8005424 <OS_MutexGrpPrioFindHighest+0x38>
                highest_prio = prio;
 8005420:	7afb      	ldrb	r3, [r7, #11]
 8005422:	74fb      	strb	r3, [r7, #19]
            }
        }
        pp_mutex = &(*pp_mutex)->MutexGrpNextPtr;
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	3320      	adds	r3, #32
 800542a:	617b      	str	r3, [r7, #20]


    highest_prio = OS_CFG_PRIO_MAX - 1u;
    pp_mutex = &p_tcb->MutexGrpHeadPtr;

    while(*pp_mutex != (OS_MUTEX *)0) {
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1e5      	bne.n	8005400 <OS_MutexGrpPrioFindHighest+0x14>
            }
        }
        pp_mutex = &(*pp_mutex)->MutexGrpNextPtr;
    }

    return (highest_prio);
 8005434:	7cfb      	ldrb	r3, [r7, #19]
}
 8005436:	4618      	mov	r0, r3
 8005438:	371c      	adds	r7, #28
 800543a:	46bd      	mov	sp, r7
 800543c:	bc80      	pop	{r7}
 800543e:	4770      	bx	lr

08005440 <OS_Dbg_Init>:
*                  DOES NOT optimize out the 'const' variables above.
************************************************************************************************************************
*/

void  OS_Dbg_Init (void)
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
    CPU_INT08U const  *p_temp08;
    CPU_INT16U const  *p_temp16;
    CPU_INT32U const  *p_temp32;


    p_temp08 = (CPU_INT08U const *)&OSDbg_DbgEn;
 8005446:	4b47      	ldr	r3, [pc, #284]	; (8005564 <OS_Dbg_Init+0x124>)
 8005448:	60fb      	str	r3, [r7, #12]

    p_temp32 = (CPU_INT32U const *)&OSDbg_DataSize;
 800544a:	4b47      	ldr	r3, [pc, #284]	; (8005568 <OS_Dbg_Init+0x128>)
 800544c:	60bb      	str	r3, [r7, #8]

    p_temp08 = (CPU_INT08U const *)&OSDbg_ArgChkEn;
 800544e:	4b47      	ldr	r3, [pc, #284]	; (800556c <OS_Dbg_Init+0x12c>)
 8005450:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_AppHooksEn;
 8005452:	4b47      	ldr	r3, [pc, #284]	; (8005570 <OS_Dbg_Init+0x130>)
 8005454:	60fb      	str	r3, [r7, #12]

    p_temp32 = (CPU_INT32U const *)&OSDbg_EndiannessTest;
 8005456:	4b47      	ldr	r3, [pc, #284]	; (8005574 <OS_Dbg_Init+0x134>)
 8005458:	60bb      	str	r3, [r7, #8]

    p_temp08 = (CPU_INT08U const *)&OSDbg_CalledFromISRChkEn;
 800545a:	4b47      	ldr	r3, [pc, #284]	; (8005578 <OS_Dbg_Init+0x138>)
 800545c:	60fb      	str	r3, [r7, #12]

    p_temp16 = (CPU_INT16U const *)&OSDbg_FlagGrp;
 800545e:	4b47      	ldr	r3, [pc, #284]	; (800557c <OS_Dbg_Init+0x13c>)
 8005460:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_FlagEn;
 8005462:	4b47      	ldr	r3, [pc, #284]	; (8005580 <OS_Dbg_Init+0x140>)
 8005464:	60fb      	str	r3, [r7, #12]
#if OS_CFG_FLAG_EN > 0u
    p_temp08 = (CPU_INT08U const *)&OSDbg_FlagDelEn;
 8005466:	4b47      	ldr	r3, [pc, #284]	; (8005584 <OS_Dbg_Init+0x144>)
 8005468:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_FlagModeClrEn;
 800546a:	4b47      	ldr	r3, [pc, #284]	; (8005588 <OS_Dbg_Init+0x148>)
 800546c:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_FlagPendAbortEn;
 800546e:	4b47      	ldr	r3, [pc, #284]	; (800558c <OS_Dbg_Init+0x14c>)
 8005470:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_FlagGrpSize;
 8005472:	4b47      	ldr	r3, [pc, #284]	; (8005590 <OS_Dbg_Init+0x150>)
 8005474:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_FlagWidth;
 8005476:	4b47      	ldr	r3, [pc, #284]	; (8005594 <OS_Dbg_Init+0x154>)
 8005478:	607b      	str	r3, [r7, #4]

#if OS_CFG_ISR_POST_DEFERRED_EN > 0u
    p_temp16 = (CPU_INT16U const *)&OSDbg_IntQ;
#endif

    p_temp08 = (CPU_INT08U const *)&OSDbg_ISRPostDeferredEn;
 800547a:	4b47      	ldr	r3, [pc, #284]	; (8005598 <OS_Dbg_Init+0x158>)
 800547c:	60fb      	str	r3, [r7, #12]

    p_temp16 = (CPU_INT16U const *)&OSDbg_Mem;
 800547e:	4b47      	ldr	r3, [pc, #284]	; (800559c <OS_Dbg_Init+0x15c>)
 8005480:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_MemEn;
 8005482:	4b47      	ldr	r3, [pc, #284]	; (80055a0 <OS_Dbg_Init+0x160>)
 8005484:	60fb      	str	r3, [r7, #12]
#if OS_CFG_MEM_EN > 0u
    p_temp16 = (CPU_INT16U const *)&OSDbg_MemSize;
 8005486:	4b47      	ldr	r3, [pc, #284]	; (80055a4 <OS_Dbg_Init+0x164>)
 8005488:	607b      	str	r3, [r7, #4]
#endif

    p_temp08 = (CPU_INT08U const *)&OSDbg_MsgEn;
 800548a:	4b47      	ldr	r3, [pc, #284]	; (80055a8 <OS_Dbg_Init+0x168>)
 800548c:	60fb      	str	r3, [r7, #12]
#if (OS_MSG_EN) > 0u
    p_temp16 = (CPU_INT16U const *)&OSDbg_MsgSize;
 800548e:	4b47      	ldr	r3, [pc, #284]	; (80055ac <OS_Dbg_Init+0x16c>)
 8005490:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_MsgPoolSize;
 8005492:	4b47      	ldr	r3, [pc, #284]	; (80055b0 <OS_Dbg_Init+0x170>)
 8005494:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_MsgQSize;
 8005496:	4b47      	ldr	r3, [pc, #284]	; (80055b4 <OS_Dbg_Init+0x174>)
 8005498:	607b      	str	r3, [r7, #4]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_Mutex;
 800549a:	4b47      	ldr	r3, [pc, #284]	; (80055b8 <OS_Dbg_Init+0x178>)
 800549c:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_MutexEn;
 800549e:	4b47      	ldr	r3, [pc, #284]	; (80055bc <OS_Dbg_Init+0x17c>)
 80054a0:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_MUTEX_EN) > 0u
    p_temp08 = (CPU_INT08U const *)&OSDbg_MutexDelEn;
 80054a2:	4b47      	ldr	r3, [pc, #284]	; (80055c0 <OS_Dbg_Init+0x180>)
 80054a4:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_MutexPendAbortEn;
 80054a6:	4b47      	ldr	r3, [pc, #284]	; (80055c4 <OS_Dbg_Init+0x184>)
 80054a8:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_MutexSize;
 80054aa:	4b47      	ldr	r3, [pc, #284]	; (80055c8 <OS_Dbg_Init+0x188>)
 80054ac:	607b      	str	r3, [r7, #4]
#endif

    p_temp08 = (CPU_INT08U const *)&OSDbg_ObjTypeChkEn;
 80054ae:	4b47      	ldr	r3, [pc, #284]	; (80055cc <OS_Dbg_Init+0x18c>)
 80054b0:	60fb      	str	r3, [r7, #12]

    p_temp08 = (CPU_INT08U const *)&OSDbg_PendMultiEn;
 80054b2:	4b47      	ldr	r3, [pc, #284]	; (80055d0 <OS_Dbg_Init+0x190>)
 80054b4:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_PendDataSize;
 80054b6:	4b47      	ldr	r3, [pc, #284]	; (80055d4 <OS_Dbg_Init+0x194>)
 80054b8:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_PendListSize;
 80054ba:	4b47      	ldr	r3, [pc, #284]	; (80055d8 <OS_Dbg_Init+0x198>)
 80054bc:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_PendObjSize;
 80054be:	4b47      	ldr	r3, [pc, #284]	; (80055dc <OS_Dbg_Init+0x19c>)
 80054c0:	607b      	str	r3, [r7, #4]

    p_temp16 = (CPU_INT16U const *)&OSDbg_PrioMax;
 80054c2:	4b47      	ldr	r3, [pc, #284]	; (80055e0 <OS_Dbg_Init+0x1a0>)
 80054c4:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_PrioTblSize;
 80054c6:	4b47      	ldr	r3, [pc, #284]	; (80055e4 <OS_Dbg_Init+0x1a4>)
 80054c8:	607b      	str	r3, [r7, #4]

    p_temp16 = (CPU_INT16U const *)&OSDbg_PtrSize;
 80054ca:	4b47      	ldr	r3, [pc, #284]	; (80055e8 <OS_Dbg_Init+0x1a8>)
 80054cc:	607b      	str	r3, [r7, #4]

    p_temp16 = (CPU_INT16U const *)&OSDbg_Q;
 80054ce:	4b47      	ldr	r3, [pc, #284]	; (80055ec <OS_Dbg_Init+0x1ac>)
 80054d0:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_QEn;
 80054d2:	4b47      	ldr	r3, [pc, #284]	; (80055f0 <OS_Dbg_Init+0x1b0>)
 80054d4:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_Q_EN) > 0u
    p_temp08 = (CPU_INT08U const *)&OSDbg_QDelEn;
 80054d6:	4b47      	ldr	r3, [pc, #284]	; (80055f4 <OS_Dbg_Init+0x1b4>)
 80054d8:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_QFlushEn;
 80054da:	4b47      	ldr	r3, [pc, #284]	; (80055f8 <OS_Dbg_Init+0x1b8>)
 80054dc:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_QPendAbortEn;
 80054de:	4b47      	ldr	r3, [pc, #284]	; (80055fc <OS_Dbg_Init+0x1bc>)
 80054e0:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_QSize;
 80054e2:	4b47      	ldr	r3, [pc, #284]	; (8005600 <OS_Dbg_Init+0x1c0>)
 80054e4:	607b      	str	r3, [r7, #4]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_SchedRoundRobinEn;
 80054e6:	4b47      	ldr	r3, [pc, #284]	; (8005604 <OS_Dbg_Init+0x1c4>)
 80054e8:	607b      	str	r3, [r7, #4]

    p_temp16 = (CPU_INT16U const *)&OSDbg_Sem;
 80054ea:	4b47      	ldr	r3, [pc, #284]	; (8005608 <OS_Dbg_Init+0x1c8>)
 80054ec:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_SemEn;
 80054ee:	4b47      	ldr	r3, [pc, #284]	; (800560c <OS_Dbg_Init+0x1cc>)
 80054f0:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_SEM_EN) > 0u
    p_temp08 = (CPU_INT08U const *)&OSDbg_SemDelEn;
 80054f2:	4b47      	ldr	r3, [pc, #284]	; (8005610 <OS_Dbg_Init+0x1d0>)
 80054f4:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_SemPendAbortEn;
 80054f6:	4b47      	ldr	r3, [pc, #284]	; (8005614 <OS_Dbg_Init+0x1d4>)
 80054f8:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_SemSetEn;
 80054fa:	4b47      	ldr	r3, [pc, #284]	; (8005618 <OS_Dbg_Init+0x1d8>)
 80054fc:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_SemSize;
 80054fe:	4b47      	ldr	r3, [pc, #284]	; (800561c <OS_Dbg_Init+0x1dc>)
 8005500:	607b      	str	r3, [r7, #4]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_RdyList;
 8005502:	4b47      	ldr	r3, [pc, #284]	; (8005620 <OS_Dbg_Init+0x1e0>)
 8005504:	607b      	str	r3, [r7, #4]
    p_temp32 = (CPU_INT32U const *)&OSDbg_RdyListSize;
 8005506:	4b47      	ldr	r3, [pc, #284]	; (8005624 <OS_Dbg_Init+0x1e4>)
 8005508:	60bb      	str	r3, [r7, #8]

    p_temp16 = (CPU_INT16U const *)&OSDbg_StkWidth;
 800550a:	4b47      	ldr	r3, [pc, #284]	; (8005628 <OS_Dbg_Init+0x1e8>)
 800550c:	607b      	str	r3, [r7, #4]

    p_temp08 = (CPU_INT08U const *)&OSDbg_StatTaskEn;
 800550e:	4b47      	ldr	r3, [pc, #284]	; (800562c <OS_Dbg_Init+0x1ec>)
 8005510:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_StatTaskStkChkEn;
 8005512:	4b47      	ldr	r3, [pc, #284]	; (8005630 <OS_Dbg_Init+0x1f0>)
 8005514:	60fb      	str	r3, [r7, #12]

    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskChangePrioEn;
 8005516:	4b47      	ldr	r3, [pc, #284]	; (8005634 <OS_Dbg_Init+0x1f4>)
 8005518:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskDelEn;
 800551a:	4b47      	ldr	r3, [pc, #284]	; (8005638 <OS_Dbg_Init+0x1f8>)
 800551c:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskQEn;
 800551e:	4b47      	ldr	r3, [pc, #284]	; (800563c <OS_Dbg_Init+0x1fc>)
 8005520:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskQPendAbortEn;
 8005522:	4b47      	ldr	r3, [pc, #284]	; (8005640 <OS_Dbg_Init+0x200>)
 8005524:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskProfileEn;
 8005526:	4b47      	ldr	r3, [pc, #284]	; (8005644 <OS_Dbg_Init+0x204>)
 8005528:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_TaskRegTblSize;
 800552a:	4b47      	ldr	r3, [pc, #284]	; (8005648 <OS_Dbg_Init+0x208>)
 800552c:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskSemPendAbortEn;
 800552e:	4b47      	ldr	r3, [pc, #284]	; (800564c <OS_Dbg_Init+0x20c>)
 8005530:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskSuspendEn;
 8005532:	4b47      	ldr	r3, [pc, #284]	; (8005650 <OS_Dbg_Init+0x210>)
 8005534:	60fb      	str	r3, [r7, #12]

    p_temp16 = (CPU_INT16U const *)&OSDbg_TCBSize;
 8005536:	4b47      	ldr	r3, [pc, #284]	; (8005654 <OS_Dbg_Init+0x214>)
 8005538:	607b      	str	r3, [r7, #4]

    p_temp16 = (CPU_INT16U const *)&OSDbg_TickListSize;
 800553a:	4b47      	ldr	r3, [pc, #284]	; (8005658 <OS_Dbg_Init+0x218>)
 800553c:	607b      	str	r3, [r7, #4]

    p_temp08 = (CPU_INT08U const *)&OSDbg_TimeDlyHMSMEn;
 800553e:	4b47      	ldr	r3, [pc, #284]	; (800565c <OS_Dbg_Init+0x21c>)
 8005540:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TimeDlyResumeEn;
 8005542:	4b47      	ldr	r3, [pc, #284]	; (8005660 <OS_Dbg_Init+0x220>)
 8005544:	60fb      	str	r3, [r7, #12]


    p_temp16 = (CPU_INT16U const *)&OSDbg_Tmr;
 8005546:	4b47      	ldr	r3, [pc, #284]	; (8005664 <OS_Dbg_Init+0x224>)
 8005548:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TmrEn;
 800554a:	4b47      	ldr	r3, [pc, #284]	; (8005668 <OS_Dbg_Init+0x228>)
 800554c:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_TMR_EN) > 0u
    p_temp08 = (CPU_INT08U const *)&OSDbg_TmrDelEn;
 800554e:	4b47      	ldr	r3, [pc, #284]	; (800566c <OS_Dbg_Init+0x22c>)
 8005550:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_TmrSize;
 8005552:	4b47      	ldr	r3, [pc, #284]	; (8005670 <OS_Dbg_Init+0x230>)
 8005554:	607b      	str	r3, [r7, #4]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_VersionNbr;
 8005556:	4b47      	ldr	r3, [pc, #284]	; (8005674 <OS_Dbg_Init+0x234>)
 8005558:	607b      	str	r3, [r7, #4]

    p_temp08 = p_temp08;                                     /* Prevent compiler warning for not using 'p_temp'        */
    p_temp16 = p_temp16;
    p_temp32 = p_temp32;
}
 800555a:	bf00      	nop
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	bc80      	pop	{r7}
 8005562:	4770      	bx	lr
 8005564:	0800df74 	.word	0x0800df74
 8005568:	0800e0dc 	.word	0x0800e0dc
 800556c:	0800df75 	.word	0x0800df75
 8005570:	0800df76 	.word	0x0800df76
 8005574:	0800df78 	.word	0x0800df78
 8005578:	0800df7c 	.word	0x0800df7c
 800557c:	0800df80 	.word	0x0800df80
 8005580:	0800df7d 	.word	0x0800df7d
 8005584:	0800dfa8 	.word	0x0800dfa8
 8005588:	0800dfa9 	.word	0x0800dfa9
 800558c:	0800dfaa 	.word	0x0800dfaa
 8005590:	0800dfac 	.word	0x0800dfac
 8005594:	0800dfae 	.word	0x0800dfae
 8005598:	0800dfb0 	.word	0x0800dfb0
 800559c:	0800dfb4 	.word	0x0800dfb4
 80055a0:	0800dfd4 	.word	0x0800dfd4
 80055a4:	0800dfd6 	.word	0x0800dfd6
 80055a8:	0800dfd8 	.word	0x0800dfd8
 80055ac:	0800dfda 	.word	0x0800dfda
 80055b0:	0800dfdc 	.word	0x0800dfdc
 80055b4:	0800dfde 	.word	0x0800dfde
 80055b8:	0800dfe0 	.word	0x0800dfe0
 80055bc:	0800e010 	.word	0x0800e010
 80055c0:	0800e011 	.word	0x0800e011
 80055c4:	0800e012 	.word	0x0800e012
 80055c8:	0800e014 	.word	0x0800e014
 80055cc:	0800e016 	.word	0x0800e016
 80055d0:	0800e017 	.word	0x0800e017
 80055d4:	0800e018 	.word	0x0800e018
 80055d8:	0800e01a 	.word	0x0800e01a
 80055dc:	0800e01c 	.word	0x0800e01c
 80055e0:	0800e01e 	.word	0x0800e01e
 80055e4:	0800e020 	.word	0x0800e020
 80055e8:	0800e022 	.word	0x0800e022
 80055ec:	0800e024 	.word	0x0800e024
 80055f0:	0800e054 	.word	0x0800e054
 80055f4:	0800e055 	.word	0x0800e055
 80055f8:	0800e056 	.word	0x0800e056
 80055fc:	0800e057 	.word	0x0800e057
 8005600:	0800e058 	.word	0x0800e058
 8005604:	0800e05a 	.word	0x0800e05a
 8005608:	0800e05c 	.word	0x0800e05c
 800560c:	0800e084 	.word	0x0800e084
 8005610:	0800e085 	.word	0x0800e085
 8005614:	0800e086 	.word	0x0800e086
 8005618:	0800e087 	.word	0x0800e087
 800561c:	0800e088 	.word	0x0800e088
 8005620:	0800e08a 	.word	0x0800e08a
 8005624:	0800e08c 	.word	0x0800e08c
 8005628:	0800e090 	.word	0x0800e090
 800562c:	0800e091 	.word	0x0800e091
 8005630:	0800e092 	.word	0x0800e092
 8005634:	0800e093 	.word	0x0800e093
 8005638:	0800e094 	.word	0x0800e094
 800563c:	0800e095 	.word	0x0800e095
 8005640:	0800e096 	.word	0x0800e096
 8005644:	0800e097 	.word	0x0800e097
 8005648:	0800e098 	.word	0x0800e098
 800564c:	0800e09a 	.word	0x0800e09a
 8005650:	0800e09b 	.word	0x0800e09b
 8005654:	0800e09c 	.word	0x0800e09c
 8005658:	0800e09e 	.word	0x0800e09e
 800565c:	0800e0a0 	.word	0x0800e0a0
 8005660:	0800e0a1 	.word	0x0800e0a1
 8005664:	0800e0a4 	.word	0x0800e0a4
 8005668:	0800e0d4 	.word	0x0800e0d4
 800566c:	0800e0d5 	.word	0x0800e0d5
 8005670:	0800e0d6 	.word	0x0800e0d6
 8005674:	0800e0d8 	.word	0x0800e0d8

08005678 <OSMemCreate>:
                   CPU_CHAR     *p_name,
                   void         *p_addr,
                   OS_MEM_QTY    n_blks,
                   OS_MEM_SIZE   blk_size,
                   OS_ERR       *p_err)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b08a      	sub	sp, #40	; 0x28
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
 8005684:	807b      	strh	r3, [r7, #2]
#endif
    OS_MEM_QTY     i;
    OS_MEM_QTY     loops;
    CPU_INT08U    *p_blk;
    void         **p_link;
    CPU_SR_ALLOC();
 8005686:	2300      	movs	r3, #0
 8005688:	61bb      	str	r3, [r7, #24]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 800568a:	4b40      	ldr	r3, [pc, #256]	; (800578c <OSMemCreate+0x114>)
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d004      	beq.n	800569c <OSMemCreate+0x24>
       *p_err = OS_ERR_MEM_CREATE_ISR;
 8005692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005694:	f245 62b9 	movw	r2, #22201	; 0x56b9
 8005698:	801a      	strh	r2, [r3, #0]
        return;
 800569a:	e074      	b.n	8005786 <OSMemCreate+0x10e>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_addr == (void *)0) {                              /* Must pass a valid address for the memory part.         */
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d104      	bne.n	80056ac <OSMemCreate+0x34>
       *p_err   = OS_ERR_MEM_INVALID_P_ADDR;
 80056a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a4:	f245 62bb 	movw	r2, #22203	; 0x56bb
 80056a8:	801a      	strh	r2, [r3, #0]
        return;
 80056aa:	e06c      	b.n	8005786 <OSMemCreate+0x10e>
    }
    if (n_blks < (OS_MEM_QTY)2) {                           /* Must have at least 2 blocks per partition              */
 80056ac:	887b      	ldrh	r3, [r7, #2]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d804      	bhi.n	80056bc <OSMemCreate+0x44>
       *p_err = OS_ERR_MEM_INVALID_BLKS;
 80056b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b4:	f245 62bc 	movw	r2, #22204	; 0x56bc
 80056b8:	801a      	strh	r2, [r3, #0]
        return;
 80056ba:	e064      	b.n	8005786 <OSMemCreate+0x10e>
    }
    if (blk_size < sizeof(void *)) {                        /* Must contain space for at least a pointer              */
 80056bc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80056be:	2b03      	cmp	r3, #3
 80056c0:	d804      	bhi.n	80056cc <OSMemCreate+0x54>
       *p_err = OS_ERR_MEM_INVALID_SIZE;
 80056c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c4:	f245 62c1 	movw	r2, #22209	; 0x56c1
 80056c8:	801a      	strh	r2, [r3, #0]
        return;
 80056ca:	e05c      	b.n	8005786 <OSMemCreate+0x10e>
    }
    align_msk = sizeof(void *) - 1u;
 80056cc:	2303      	movs	r3, #3
 80056ce:	617b      	str	r3, [r7, #20]
    if (align_msk > 0u) {
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d013      	beq.n	80056fe <OSMemCreate+0x86>
        if (((CPU_ADDR)p_addr & align_msk) != 0u){          /* Must be pointer size aligned                           */
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	4013      	ands	r3, r2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d004      	beq.n	80056ea <OSMemCreate+0x72>
           *p_err = OS_ERR_MEM_INVALID_P_ADDR;
 80056e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056e2:	f245 62bb 	movw	r2, #22203	; 0x56bb
 80056e6:	801a      	strh	r2, [r3, #0]
            return;
 80056e8:	e04d      	b.n	8005786 <OSMemCreate+0x10e>
        }
        if ((blk_size & align_msk) != 0u) {                 /* Block size must be a multiple address size             */
 80056ea:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	4013      	ands	r3, r2
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d004      	beq.n	80056fe <OSMemCreate+0x86>
           *p_err = OS_ERR_MEM_INVALID_SIZE;
 80056f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f6:	f245 62c1 	movw	r2, #22209	; 0x56c1
 80056fa:	801a      	strh	r2, [r3, #0]
            return;
 80056fc:	e043      	b.n	8005786 <OSMemCreate+0x10e>
        }
    }
#endif

    p_link = (void **)p_addr;                               /* Create linked list of free memory blocks               */
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	61fb      	str	r3, [r7, #28]
    p_blk  = (CPU_INT08U *)p_addr;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	623b      	str	r3, [r7, #32]
    loops  = n_blks - 1u;
 8005706:	887b      	ldrh	r3, [r7, #2]
 8005708:	3b01      	subs	r3, #1
 800570a:	827b      	strh	r3, [r7, #18]
    for (i = 0u; i < loops; i++) {
 800570c:	2300      	movs	r3, #0
 800570e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005710:	e00b      	b.n	800572a <OSMemCreate+0xb2>
        p_blk +=  blk_size;
 8005712:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005714:	6a3a      	ldr	r2, [r7, #32]
 8005716:	4413      	add	r3, r2
 8005718:	623b      	str	r3, [r7, #32]
       *p_link = (void  *)p_blk;                            /* Save pointer to NEXT block in CURRENT block            */
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	6a3a      	ldr	r2, [r7, #32]
 800571e:	601a      	str	r2, [r3, #0]
        p_link = (void **)(void *)p_blk;                    /* Position     to NEXT block                             */
 8005720:	6a3b      	ldr	r3, [r7, #32]
 8005722:	61fb      	str	r3, [r7, #28]
#endif

    p_link = (void **)p_addr;                               /* Create linked list of free memory blocks               */
    p_blk  = (CPU_INT08U *)p_addr;
    loops  = n_blks - 1u;
    for (i = 0u; i < loops; i++) {
 8005724:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005726:	3301      	adds	r3, #1
 8005728:	84fb      	strh	r3, [r7, #38]	; 0x26
 800572a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800572c:	8a7b      	ldrh	r3, [r7, #18]
 800572e:	429a      	cmp	r2, r3
 8005730:	d3ef      	bcc.n	8005712 <OSMemCreate+0x9a>
        p_blk +=  blk_size;
       *p_link = (void  *)p_blk;                            /* Save pointer to NEXT block in CURRENT block            */
        p_link = (void **)(void *)p_blk;                    /* Position     to NEXT block                             */
    }
   *p_link             = (void *)0;                         /* Last memory block points to NULL                       */
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	2200      	movs	r2, #0
 8005736:	601a      	str	r2, [r3, #0]

    OS_CRITICAL_ENTER();
 8005738:	f7fa fdd2 	bl	80002e0 <CPU_SR_Save>
 800573c:	61b8      	str	r0, [r7, #24]
#if OS_OBJ_TYPE_REQ > 0u
    p_mem->Type        = OS_OBJ_TYPE_MEM;                   /* Set the type of object                                 */
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	4a13      	ldr	r2, [pc, #76]	; (8005790 <OSMemCreate+0x118>)
 8005742:	601a      	str	r2, [r3, #0]
#endif
#if OS_CFG_DBG_EN > 0u
    p_mem->NamePtr     = p_name;                            /* Save name of memory partition                          */
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	68ba      	ldr	r2, [r7, #8]
 8005748:	609a      	str	r2, [r3, #8]
#else
    (void)&p_name;
#endif
    p_mem->AddrPtr     = p_addr;                            /* Store start address of memory partition                */
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	605a      	str	r2, [r3, #4]
    p_mem->FreeListPtr = p_addr;                            /* Initialize pointer to pool of free blocks              */
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	60da      	str	r2, [r3, #12]
    p_mem->NbrFree     = n_blks;                            /* Store number of free blocks in MCB                     */
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	887a      	ldrh	r2, [r7, #2]
 800575a:	829a      	strh	r2, [r3, #20]
    p_mem->NbrMax      = n_blks;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	887a      	ldrh	r2, [r7, #2]
 8005760:	825a      	strh	r2, [r3, #18]
    p_mem->BlkSize     = blk_size;                          /* Store block size of each memory blocks                 */
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8005766:	821a      	strh	r2, [r3, #16]

#if OS_CFG_DBG_EN > 0u
    OS_MemDbgListAdd(p_mem);
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f000 f88d 	bl	8005888 <OS_MemDbgListAdd>
#endif

    OSMemQty++;
 800576e:	4b09      	ldr	r3, [pc, #36]	; (8005794 <OSMemCreate+0x11c>)
 8005770:	881b      	ldrh	r3, [r3, #0]
 8005772:	3301      	adds	r3, #1
 8005774:	b29a      	uxth	r2, r3
 8005776:	4b07      	ldr	r3, [pc, #28]	; (8005794 <OSMemCreate+0x11c>)
 8005778:	801a      	strh	r2, [r3, #0]

#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_MEM_CREATE(p_mem, p_name);                     /* Record the event.                                      */
#endif

    OS_CRITICAL_EXIT_NO_SCHED();
 800577a:	69b8      	ldr	r0, [r7, #24]
 800577c:	f7fa fdb4 	bl	80002e8 <CPU_SR_Restore>
   *p_err = OS_ERR_NONE;
 8005780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005782:	2200      	movs	r2, #0
 8005784:	801a      	strh	r2, [r3, #0]
}
 8005786:	3728      	adds	r7, #40	; 0x28
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	20002608 	.word	0x20002608
 8005790:	204d454d 	.word	0x204d454d
 8005794:	20002802 	.word	0x20002802

08005798 <OSMemGet>:
************************************************************************************************************************
*/

void  *OSMemGet (OS_MEM  *p_mem,
                 OS_ERR  *p_err)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
    void    *p_blk;
    CPU_SR_ALLOC();
 80057a2:	2300      	movs	r3, #0
 80057a4:	60fb      	str	r3, [r7, #12]
        return ((void *)0);
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_mem == (OS_MEM *)0) {                             /* Must point to a valid memory partition                 */
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d105      	bne.n	80057b8 <OSMemGet+0x20>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MEM_GET_FAILED(p_mem);                     /* Record the event.                                      */
#endif
       *p_err  = OS_ERR_MEM_INVALID_P_MEM;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	f245 62bf 	movw	r2, #22207	; 0x56bf
 80057b2:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 80057b4:	2300      	movs	r3, #0
 80057b6:	e023      	b.n	8005800 <OSMemGet+0x68>
    }
#endif

    CPU_CRITICAL_ENTER();
 80057b8:	f7fa fd92 	bl	80002e0 <CPU_SR_Save>
 80057bc:	60f8      	str	r0, [r7, #12]
    if (p_mem->NbrFree == (OS_MEM_QTY)0) {                  /* See if there are any free memory blocks                */
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	8a9b      	ldrh	r3, [r3, #20]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d108      	bne.n	80057d8 <OSMemGet+0x40>
        CPU_CRITICAL_EXIT();
 80057c6:	68f8      	ldr	r0, [r7, #12]
 80057c8:	f7fa fd8e 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MEM_GET_FAILED(p_mem);                     /* Record the event.                                      */
#endif
       *p_err = OS_ERR_MEM_NO_FREE_BLKS;                    /* No,  Notify caller of empty memory partition           */
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	f245 62c2 	movw	r2, #22210	; 0x56c2
 80057d2:	801a      	strh	r2, [r3, #0]
        return ((void *)0);                                 /*      Return NULL pointer to caller                     */
 80057d4:	2300      	movs	r3, #0
 80057d6:	e013      	b.n	8005800 <OSMemGet+0x68>
    }
    p_blk              = p_mem->FreeListPtr;                /* Yes, point to next free memory block                   */
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	60bb      	str	r3, [r7, #8]
    p_mem->FreeListPtr = *(void **)p_blk;                   /*      Adjust pointer to new free list                   */
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	60da      	str	r2, [r3, #12]
    p_mem->NbrFree--;                                       /*      One less memory block in this partition           */
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	8a9b      	ldrh	r3, [r3, #20]
 80057ea:	3b01      	subs	r3, #1
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	829a      	strh	r2, [r3, #20]
    CPU_CRITICAL_EXIT();
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	f7fa fd78 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_MEM_GET(p_mem);                                /* Record the event.                                      */
#endif
   *p_err = OS_ERR_NONE;                                    /*      No error                                          */
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	2200      	movs	r2, #0
 80057fc:	801a      	strh	r2, [r3, #0]
    return (p_blk);                                         /*      Return memory block to caller                     */
 80057fe:	68bb      	ldr	r3, [r7, #8]
}
 8005800:	4618      	mov	r0, r3
 8005802:	3710      	adds	r7, #16
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <OSMemPut>:
*/

void  OSMemPut (OS_MEM  *p_mem,
                void    *p_blk,
                OS_ERR  *p_err)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b086      	sub	sp, #24
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	607a      	str	r2, [r7, #4]
    CPU_SR_ALLOC();
 8005814:	2300      	movs	r3, #0
 8005816:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_mem == (OS_MEM *)0) {                             /* Must point to a valid memory partition                 */
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d104      	bne.n	8005828 <OSMemPut+0x20>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MEM_PUT_FAILED(p_mem);                     /* Record the event.                                      */
#endif
       *p_err  = OS_ERR_MEM_INVALID_P_MEM;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f245 62bf 	movw	r2, #22207	; 0x56bf
 8005824:	801a      	strh	r2, [r3, #0]
        return;
 8005826:	e02b      	b.n	8005880 <OSMemPut+0x78>
    }
    if (p_blk == (void *)0) {                               /* Must release a valid block                             */
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d104      	bne.n	8005838 <OSMemPut+0x30>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MEM_PUT_FAILED(p_mem);                     /* Record the event.                                      */
#endif
       *p_err  = OS_ERR_MEM_INVALID_P_BLK;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f245 62be 	movw	r2, #22206	; 0x56be
 8005834:	801a      	strh	r2, [r3, #0]
        return;
 8005836:	e023      	b.n	8005880 <OSMemPut+0x78>
    }
#endif

    CPU_CRITICAL_ENTER();
 8005838:	f7fa fd52 	bl	80002e0 <CPU_SR_Save>
 800583c:	6178      	str	r0, [r7, #20]
    if (p_mem->NbrFree >= p_mem->NbrMax) {                  /* Make sure all blocks not already returned              */
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	8a9a      	ldrh	r2, [r3, #20]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	8a5b      	ldrh	r3, [r3, #18]
 8005846:	429a      	cmp	r2, r3
 8005848:	d307      	bcc.n	800585a <OSMemPut+0x52>
        CPU_CRITICAL_EXIT();
 800584a:	6978      	ldr	r0, [r7, #20]
 800584c:	f7fa fd4c 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MEM_PUT_FAILED(p_mem);                     /* Record the event.                                      */
#endif
       *p_err = OS_ERR_MEM_FULL;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f245 62ba 	movw	r2, #22202	; 0x56ba
 8005856:	801a      	strh	r2, [r3, #0]
        return;
 8005858:	e012      	b.n	8005880 <OSMemPut+0x78>
    }
    *(void **)p_blk    = p_mem->FreeListPtr;                /* Insert released block into free block list             */
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	68da      	ldr	r2, [r3, #12]
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	601a      	str	r2, [r3, #0]
    p_mem->FreeListPtr = p_blk;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	60da      	str	r2, [r3, #12]
    p_mem->NbrFree++;                                       /* One more memory block in this partition                */
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8a9b      	ldrh	r3, [r3, #20]
 800586c:	3301      	adds	r3, #1
 800586e:	b29a      	uxth	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	829a      	strh	r2, [r3, #20]
    CPU_CRITICAL_EXIT();
 8005874:	6978      	ldr	r0, [r7, #20]
 8005876:	f7fa fd37 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_MEM_PUT(p_mem);                                /* Record the event.                                      */
#endif
   *p_err              = OS_ERR_NONE;                       /* Notify caller that memory block was released           */
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	801a      	strh	r2, [r3, #0]
}
 8005880:	3718      	adds	r7, #24
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop

08005888 <OS_MemDbgListAdd>:
************************************************************************************************************************
*/

#if OS_CFG_DBG_EN > 0u
void  OS_MemDbgListAdd (OS_MEM  *p_mem)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
    p_mem->DbgPrevPtr               = (OS_MEM *)0;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	619a      	str	r2, [r3, #24]
    if (OSMemDbgListPtr == (OS_MEM *)0) {
 8005896:	4b0c      	ldr	r3, [pc, #48]	; (80058c8 <OS_MemDbgListAdd+0x40>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d103      	bne.n	80058a6 <OS_MemDbgListAdd+0x1e>
        p_mem->DbgNextPtr           = (OS_MEM *)0;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	61da      	str	r2, [r3, #28]
 80058a4:	e007      	b.n	80058b6 <OS_MemDbgListAdd+0x2e>
    } else {
        p_mem->DbgNextPtr           =  OSMemDbgListPtr;
 80058a6:	4b08      	ldr	r3, [pc, #32]	; (80058c8 <OS_MemDbgListAdd+0x40>)
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	61da      	str	r2, [r3, #28]
        OSMemDbgListPtr->DbgPrevPtr =  p_mem;
 80058ae:	4b06      	ldr	r3, [pc, #24]	; (80058c8 <OS_MemDbgListAdd+0x40>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	619a      	str	r2, [r3, #24]
    }
    OSMemDbgListPtr                 =  p_mem;
 80058b6:	4a04      	ldr	r2, [pc, #16]	; (80058c8 <OS_MemDbgListAdd+0x40>)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6013      	str	r3, [r2, #0]
}
 80058bc:	bf00      	nop
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bc80      	pop	{r7}
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	200027a0 	.word	0x200027a0

080058cc <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_MemInit (OS_ERR  *p_err)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSMemDbgListPtr = (OS_MEM   *)0;
 80058d4:	4b06      	ldr	r3, [pc, #24]	; (80058f0 <OS_MemInit+0x24>)
 80058d6:	2200      	movs	r2, #0
 80058d8:	601a      	str	r2, [r3, #0]
#endif

    OSMemQty        = (OS_OBJ_QTY)0;
 80058da:	4b06      	ldr	r3, [pc, #24]	; (80058f4 <OS_MemInit+0x28>)
 80058dc:	2200      	movs	r2, #0
 80058de:	801a      	strh	r2, [r3, #0]
   *p_err           = OS_ERR_NONE;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	801a      	strh	r2, [r3, #0]
}
 80058e6:	bf00      	nop
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bc80      	pop	{r7}
 80058ee:	4770      	bx	lr
 80058f0:	200027a0 	.word	0x200027a0
 80058f4:	20002802 	.word	0x20002802

080058f8 <OS_TmrInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_TmrInit (OS_ERR  *p_err)
{
 80058f8:	b590      	push	{r4, r7, lr}
 80058fa:	b08d      	sub	sp, #52	; 0x34
 80058fc:	af0a      	add	r7, sp, #40	; 0x28
 80058fe:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSTmrDbgListPtr = (OS_TMR *)0;
 8005900:	4b37      	ldr	r3, [pc, #220]	; (80059e0 <OS_TmrInit+0xe8>)
 8005902:	2200      	movs	r2, #0
 8005904:	601a      	str	r2, [r3, #0]
#endif

    OSTmrListPtr        = (OS_TMR *)0;                      /* Create an empty timer list                             */
 8005906:	4b37      	ldr	r3, [pc, #220]	; (80059e4 <OS_TmrInit+0xec>)
 8005908:	2200      	movs	r2, #0
 800590a:	601a      	str	r2, [r3, #0]
    OSTmrListEntries    = 0u;
 800590c:	4b36      	ldr	r3, [pc, #216]	; (80059e8 <OS_TmrInit+0xf0>)
 800590e:	2200      	movs	r2, #0
 8005910:	801a      	strh	r2, [r3, #0]

    if (OSCfg_TmrTaskRate_Hz > (OS_RATE_HZ)0) {
 8005912:	4b36      	ldr	r3, [pc, #216]	; (80059ec <OS_TmrInit+0xf4>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d008      	beq.n	800592c <OS_TmrInit+0x34>
        OSTmrUpdateCnt  = OSCfg_TickRate_Hz / OSCfg_TmrTaskRate_Hz;
 800591a:	4b35      	ldr	r3, [pc, #212]	; (80059f0 <OS_TmrInit+0xf8>)
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	4b33      	ldr	r3, [pc, #204]	; (80059ec <OS_TmrInit+0xf4>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	fbb2 f3f3 	udiv	r3, r2, r3
 8005926:	4a33      	ldr	r2, [pc, #204]	; (80059f4 <OS_TmrInit+0xfc>)
 8005928:	6013      	str	r3, [r2, #0]
 800592a:	e007      	b.n	800593c <OS_TmrInit+0x44>
    } else {
        OSTmrUpdateCnt  = OSCfg_TickRate_Hz / (OS_RATE_HZ)10;
 800592c:	4b30      	ldr	r3, [pc, #192]	; (80059f0 <OS_TmrInit+0xf8>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a31      	ldr	r2, [pc, #196]	; (80059f8 <OS_TmrInit+0x100>)
 8005932:	fba2 2303 	umull	r2, r3, r2, r3
 8005936:	08db      	lsrs	r3, r3, #3
 8005938:	4a2e      	ldr	r2, [pc, #184]	; (80059f4 <OS_TmrInit+0xfc>)
 800593a:	6013      	str	r3, [r2, #0]
    }
    OSTmrUpdateCtr      = OSTmrUpdateCnt;
 800593c:	4b2d      	ldr	r3, [pc, #180]	; (80059f4 <OS_TmrInit+0xfc>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a2e      	ldr	r2, [pc, #184]	; (80059fc <OS_TmrInit+0x104>)
 8005942:	6013      	str	r3, [r2, #0]

    OSTmrTickCtr        = (OS_TICK)0;
 8005944:	4b2e      	ldr	r3, [pc, #184]	; (8005a00 <OS_TmrInit+0x108>)
 8005946:	2200      	movs	r2, #0
 8005948:	601a      	str	r2, [r3, #0]

    OSTmrTaskTimeMax    = (CPU_TS)0;
 800594a:	4b2e      	ldr	r3, [pc, #184]	; (8005a04 <OS_TmrInit+0x10c>)
 800594c:	2200      	movs	r2, #0
 800594e:	601a      	str	r2, [r3, #0]

#if   OS_CFG_MUTEX_EN > 0u
    OSMutexCreate(&OSTmrMutex,                              /* Use a mutex to protect the timers                      */
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	492d      	ldr	r1, [pc, #180]	; (8005a08 <OS_TmrInit+0x110>)
 8005954:	482d      	ldr	r0, [pc, #180]	; (8005a0c <OS_TmrInit+0x114>)
 8005956:	f7ff faaf 	bl	8004eb8 <OSMutexCreate>
                  "OS Tmr Mutex", 
                  p_err);
    if (*p_err != OS_ERR_NONE) {
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	881b      	ldrh	r3, [r3, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d139      	bne.n	80059d6 <OS_TmrInit+0xde>
        return;
    }
#endif

                                                            /* ---------------- CREATE THE TIMER TASK --------------- */
    if (OSCfg_TmrTaskStkBasePtr == (CPU_STK*)0) {
 8005962:	4b2b      	ldr	r3, [pc, #172]	; (8005a10 <OS_TmrInit+0x118>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d104      	bne.n	8005974 <OS_TmrInit+0x7c>
       *p_err = OS_ERR_TMR_STK_INVALID;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f247 3247 	movw	r2, #29511	; 0x7347
 8005970:	801a      	strh	r2, [r3, #0]
        return;
 8005972:	e031      	b.n	80059d8 <OS_TmrInit+0xe0>
    }

    if (OSCfg_TmrTaskStkSize < OSCfg_StkSizeMin) {
 8005974:	4b27      	ldr	r3, [pc, #156]	; (8005a14 <OS_TmrInit+0x11c>)
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	4b27      	ldr	r3, [pc, #156]	; (8005a18 <OS_TmrInit+0x120>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	429a      	cmp	r2, r3
 800597e:	d204      	bcs.n	800598a <OS_TmrInit+0x92>
       *p_err = OS_ERR_TMR_STK_SIZE_INVALID;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f247 3248 	movw	r2, #29512	; 0x7348
 8005986:	801a      	strh	r2, [r3, #0]
        return;
 8005988:	e026      	b.n	80059d8 <OS_TmrInit+0xe0>
    }

    if (OSCfg_TmrTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {
 800598a:	4b24      	ldr	r3, [pc, #144]	; (8005a1c <OS_TmrInit+0x124>)
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	2b1e      	cmp	r3, #30
 8005990:	d904      	bls.n	800599c <OS_TmrInit+0xa4>
       *p_err = OS_ERR_TMR_PRIO_INVALID;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f247 3246 	movw	r2, #29510	; 0x7346
 8005998:	801a      	strh	r2, [r3, #0]
        return;
 800599a:	e01d      	b.n	80059d8 <OS_TmrInit+0xe0>
    }

    OSTaskCreate((OS_TCB     *)&OSTmrTaskTCB,
 800599c:	4b1f      	ldr	r3, [pc, #124]	; (8005a1c <OS_TmrInit+0x124>)
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	4a1b      	ldr	r2, [pc, #108]	; (8005a10 <OS_TmrInit+0x118>)
 80059a2:	6812      	ldr	r2, [r2, #0]
 80059a4:	491e      	ldr	r1, [pc, #120]	; (8005a20 <OS_TmrInit+0x128>)
 80059a6:	6809      	ldr	r1, [r1, #0]
 80059a8:	481a      	ldr	r0, [pc, #104]	; (8005a14 <OS_TmrInit+0x11c>)
 80059aa:	6800      	ldr	r0, [r0, #0]
 80059ac:	687c      	ldr	r4, [r7, #4]
 80059ae:	9408      	str	r4, [sp, #32]
 80059b0:	240b      	movs	r4, #11
 80059b2:	9407      	str	r4, [sp, #28]
 80059b4:	2400      	movs	r4, #0
 80059b6:	9406      	str	r4, [sp, #24]
 80059b8:	2400      	movs	r4, #0
 80059ba:	9405      	str	r4, [sp, #20]
 80059bc:	2400      	movs	r4, #0
 80059be:	9404      	str	r4, [sp, #16]
 80059c0:	9003      	str	r0, [sp, #12]
 80059c2:	9102      	str	r1, [sp, #8]
 80059c4:	9201      	str	r2, [sp, #4]
 80059c6:	9300      	str	r3, [sp, #0]
 80059c8:	2300      	movs	r3, #0
 80059ca:	4a16      	ldr	r2, [pc, #88]	; (8005a24 <OS_TmrInit+0x12c>)
 80059cc:	4916      	ldr	r1, [pc, #88]	; (8005a28 <OS_TmrInit+0x130>)
 80059ce:	4817      	ldr	r0, [pc, #92]	; (8005a2c <OS_TmrInit+0x134>)
 80059d0:	f7fc fb02 	bl	8001fd8 <OSTaskCreate>
 80059d4:	e000      	b.n	80059d8 <OS_TmrInit+0xe0>
#if   OS_CFG_MUTEX_EN > 0u
    OSMutexCreate(&OSTmrMutex,                              /* Use a mutex to protect the timers                      */
                  "OS Tmr Mutex", 
                  p_err);
    if (*p_err != OS_ERR_NONE) {
        return;
 80059d6:	bf00      	nop
                 (OS_MSG_QTY  )0,
                 (OS_TICK     )0,
                 (void       *)0,
                 (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR | OS_OPT_TASK_NO_TLS),
                 (OS_ERR     *)p_err);
}
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd90      	pop	{r4, r7, pc}
 80059de:	bf00      	nop
 80059e0:	200028cc 	.word	0x200028cc
 80059e4:	200028c8 	.word	0x200028c8
 80059e8:	200028d4 	.word	0x200028d4
 80059ec:	0800df64 	.word	0x0800df64
 80059f0:	0800df4c 	.word	0x0800df4c
 80059f4:	200028d8 	.word	0x200028d8
 80059f8:	cccccccd 	.word	0xcccccccd
 80059fc:	200028e8 	.word	0x200028e8
 8005a00:	200025d4 	.word	0x200025d4
 8005a04:	200025f4 	.word	0x200025f4
 8005a08:	0800de98 	.word	0x0800de98
 8005a0c:	200027a4 	.word	0x200027a4
 8005a10:	0800df68 	.word	0x0800df68
 8005a14:	0800df70 	.word	0x0800df70
 8005a18:	0800df48 	.word	0x0800df48
 8005a1c:	0800df60 	.word	0x0800df60
 8005a20:	0800df6c 	.word	0x0800df6c
 8005a24:	08005ab9 	.word	0x08005ab9
 8005a28:	0800dea8 	.word	0x0800dea8
 8005a2c:	2000260c 	.word	0x2000260c

08005a30 <OS_TmrResetPeak>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TmrResetPeak (void)
{
 8005a30:	b480      	push	{r7}
 8005a32:	af00      	add	r7, sp, #0
}
 8005a34:	bf00      	nop
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bc80      	pop	{r7}
 8005a3a:	4770      	bx	lr

08005a3c <OS_TmrUnlink>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_TmrUnlink (OS_TMR  *p_tmr)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
    OS_TMR  *p_tmr1;
    OS_TMR  *p_tmr2;



    if (OSTmrListPtr == p_tmr) {                            /* See if timer to remove is at the beginning of list     */
 8005a44:	4b1a      	ldr	r3, [pc, #104]	; (8005ab0 <OS_TmrUnlink+0x74>)
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d10c      	bne.n	8005a68 <OS_TmrUnlink+0x2c>
        p_tmr1       = (OS_TMR *)p_tmr->NextPtr;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	60fb      	str	r3, [r7, #12]
        OSTmrListPtr = (OS_TMR *)p_tmr1;
 8005a54:	4a16      	ldr	r2, [pc, #88]	; (8005ab0 <OS_TmrUnlink+0x74>)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6013      	str	r3, [r2, #0]
        if (p_tmr1 != (OS_TMR *)0) {
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d012      	beq.n	8005a86 <OS_TmrUnlink+0x4a>
            p_tmr1->PrevPtr = (OS_TMR *)0;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	615a      	str	r2, [r3, #20]
 8005a66:	e00e      	b.n	8005a86 <OS_TmrUnlink+0x4a>
        }
    } else {
        p_tmr1          = (OS_TMR *)p_tmr->PrevPtr;         /* Remove timer from somewhere in the list                */
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	695b      	ldr	r3, [r3, #20]
 8005a6c:	60fb      	str	r3, [r7, #12]
        p_tmr2          = (OS_TMR *)p_tmr->NextPtr;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	60bb      	str	r3, [r7, #8]
        p_tmr1->NextPtr = p_tmr2;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	68ba      	ldr	r2, [r7, #8]
 8005a78:	611a      	str	r2, [r3, #16]
        if (p_tmr2 != (OS_TMR *)0) {
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d002      	beq.n	8005a86 <OS_TmrUnlink+0x4a>
            p_tmr2->PrevPtr = (OS_TMR *)p_tmr1;
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	615a      	str	r2, [r3, #20]
        }
    }
    p_tmr->State   = OS_TMR_STATE_STOPPED;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    p_tmr->NextPtr = (OS_TMR *)0;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	611a      	str	r2, [r3, #16]
    p_tmr->PrevPtr = (OS_TMR *)0;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	615a      	str	r2, [r3, #20]
    OSTmrListEntries--;
 8005a9a:	4b06      	ldr	r3, [pc, #24]	; (8005ab4 <OS_TmrUnlink+0x78>)
 8005a9c:	881b      	ldrh	r3, [r3, #0]
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	4b04      	ldr	r3, [pc, #16]	; (8005ab4 <OS_TmrUnlink+0x78>)
 8005aa4:	801a      	strh	r2, [r3, #0]
}
 8005aa6:	bf00      	nop
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bc80      	pop	{r7}
 8005aae:	4770      	bx	lr
 8005ab0:	200028c8 	.word	0x200028c8
 8005ab4:	200028d4 	.word	0x200028d4

08005ab8 <OS_TmrTask>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_TmrTask (void  *p_arg)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b08a      	sub	sp, #40	; 0x28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]



    (void)&p_arg;                                                /* Not using 'p_arg', prevent compiler warning       */
    while (DEF_ON) {
        (void)OSTaskSemPend((OS_TICK )0,                         /* Wait for signal indicating time to update tmrs    */
 8005ac0:	f107 0312 	add.w	r3, r7, #18
 8005ac4:	f107 020c 	add.w	r2, r7, #12
 8005ac8:	2100      	movs	r1, #0
 8005aca:	2000      	movs	r0, #0
 8005acc:	f7fc fbb4 	bl	8002238 <OSTaskSemPend>
                            (OS_OPT  )OS_OPT_PEND_BLOCKING,
                            (CPU_TS *)&ts,
                            (OS_ERR *)&err);


        OS_TmrLock();
 8005ad0:	f000 f85a 	bl	8005b88 <OS_TmrLock>
        ts_start = OS_TS_GET();
 8005ad4:	f001 faca 	bl	800706c <CPU_TS_TmrRd>
 8005ad8:	6238      	str	r0, [r7, #32]
        OSTmrTickCtr++;                                          /* Increment the current time                        */
 8005ada:	4b28      	ldr	r3, [pc, #160]	; (8005b7c <OS_TmrTask+0xc4>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	3301      	adds	r3, #1
 8005ae0:	4a26      	ldr	r2, [pc, #152]	; (8005b7c <OS_TmrTask+0xc4>)
 8005ae2:	6013      	str	r3, [r2, #0]
        p_tmr    = OSTmrListPtr;
 8005ae4:	4b26      	ldr	r3, [pc, #152]	; (8005b80 <OS_TmrTask+0xc8>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	627b      	str	r3, [r7, #36]	; 0x24
        while (p_tmr != (OS_TMR *)0) {                           /* Update all the timers in the list                 */
 8005aea:	e033      	b.n	8005b54 <OS_TmrTask+0x9c>
            OSSchedLock(&err);
 8005aec:	f107 0312 	add.w	r3, r7, #18
 8005af0:	4618      	mov	r0, r3
 8005af2:	f7fd fbfd 	bl	80032f0 <OSSchedLock>
            (void)&err;
            p_tmr_next = p_tmr->NextPtr;
 8005af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	61bb      	str	r3, [r7, #24]
            p_tmr->Remain--;
 8005afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	1e5a      	subs	r2, r3, #1
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b04:	619a      	str	r2, [r3, #24]
            if (p_tmr->Remain == 0) {
 8005b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d11b      	bne.n	8005b46 <OS_TmrTask+0x8e>
                if (p_tmr->Opt == OS_OPT_TMR_PERIODIC) {
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d104      	bne.n	8005b20 <OS_TmrTask+0x68>
                    p_tmr->Remain = p_tmr->Period;               /* Reload the time remaining                         */
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	6a1a      	ldr	r2, [r3, #32]
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	619a      	str	r2, [r3, #24]
 8005b1e:	e006      	b.n	8005b2e <OS_TmrTask+0x76>
                } else {
                    OS_TmrUnlink(p_tmr);                         /* Remove from list                                  */
 8005b20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b22:	f7ff ff8b 	bl	8005a3c <OS_TmrUnlink>
                    p_tmr->State = OS_TMR_STATE_COMPLETED;       /* Indicate that the timer has completed             */
 8005b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b28:	2203      	movs	r2, #3
 8005b2a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
                }
                p_fnct = p_tmr->CallbackPtr;                     /* Execute callback function if available            */
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	617b      	str	r3, [r7, #20]
                if (p_fnct != (OS_TMR_CALLBACK_PTR)0) {
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d005      	beq.n	8005b46 <OS_TmrTask+0x8e>
                    (*p_fnct)((void *)p_tmr,
 8005b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3c:	68da      	ldr	r2, [r3, #12]
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	4611      	mov	r1, r2
 8005b42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b44:	4798      	blx	r3
                              p_tmr->CallbackPtrArg);
                }
            }
            p_tmr = p_tmr_next;
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	627b      	str	r3, [r7, #36]	; 0x24
            OSSchedUnlock(&err);
 8005b4a:	f107 0312 	add.w	r3, r7, #18
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f7fd fc0a 	bl	8003368 <OSSchedUnlock>

        OS_TmrLock();
        ts_start = OS_TS_GET();
        OSTmrTickCtr++;                                          /* Increment the current time                        */
        p_tmr    = OSTmrListPtr;
        while (p_tmr != (OS_TMR *)0) {                           /* Update all the timers in the list                 */
 8005b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1c8      	bne.n	8005aec <OS_TmrTask+0x34>
            p_tmr = p_tmr_next;
            OSSchedUnlock(&err);
            (void)&err;
        }

        ts_delta = OS_TS_GET() - ts_start;                      /* Measure execution time of timer task              */
 8005b5a:	f001 fa87 	bl	800706c <CPU_TS_TmrRd>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	6a3b      	ldr	r3, [r7, #32]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	61fb      	str	r3, [r7, #28]
        OS_TmrUnlock();
 8005b66:	f000 f821 	bl	8005bac <OS_TmrUnlock>

        if (OSTmrTaskTimeMax < ts_delta) {
 8005b6a:	4b06      	ldr	r3, [pc, #24]	; (8005b84 <OS_TmrTask+0xcc>)
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d2a5      	bcs.n	8005ac0 <OS_TmrTask+0x8>
            OSTmrTaskTimeMax = ts_delta;
 8005b74:	4a03      	ldr	r2, [pc, #12]	; (8005b84 <OS_TmrTask+0xcc>)
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	6013      	str	r3, [r2, #0]
        }
    }
 8005b7a:	e7a1      	b.n	8005ac0 <OS_TmrTask+0x8>
 8005b7c:	200025d4 	.word	0x200025d4
 8005b80:	200028c8 	.word	0x200028c8
 8005b84:	200025f4 	.word	0x200025f4

08005b88 <OS_TmrLock>:
* Note(s)    : 1) These function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

static  void  OS_TmrLock (void)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af02      	add	r7, sp, #8
    OS_ERR  err;
#if OS_CFG_MUTEX_EN > 0u
    CPU_TS  ts;


    OSMutexPend(&OSTmrMutex,                                /* Use a mutex to protect the timers                      */
 8005b8e:	463a      	mov	r2, r7
 8005b90:	1dbb      	adds	r3, r7, #6
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	4613      	mov	r3, r2
 8005b96:	2200      	movs	r2, #0
 8005b98:	2100      	movs	r1, #0
 8005b9a:	4803      	ldr	r0, [pc, #12]	; (8005ba8 <OS_TmrLock+0x20>)
 8005b9c:	f7ff f9d8 	bl	8004f50 <OSMutexPend>
                &err);
#else
    OSSchedLock(&err);                                      /* Lock the scheduler to protect the timers               */
#endif
    (void)&err;
}
 8005ba0:	bf00      	nop
 8005ba2:	3708      	adds	r7, #8
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	200027a4 	.word	0x200027a4

08005bac <OS_TmrUnlock>:




static  void  OS_TmrUnlock (void)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
    OS_ERR  err;


#if OS_CFG_MUTEX_EN > 0u
    OSMutexPost(&OSTmrMutex,                                /* Use a mutex to protect the timers                      */
 8005bb2:	1dbb      	adds	r3, r7, #6
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	2100      	movs	r1, #0
 8005bb8:	4803      	ldr	r0, [pc, #12]	; (8005bc8 <OS_TmrUnlock+0x1c>)
 8005bba:	f7ff fad1 	bl	8005160 <OSMutexPost>
                &err);
#else
    OSSchedUnlock(&err);                                    /* Lock the scheduler to protect the timers               */
#endif
    (void)&err;
}
 8005bbe:	bf00      	nop
 8005bc0:	3708      	adds	r7, #8
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	200027a4 	.word	0x200027a4

08005bcc <OSIdleTaskHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSIdleTaskHook (void)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	af00      	add	r7, sp, #0
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppIdleTaskHookPtr != (OS_APP_HOOK_VOID)0) {
 8005bd0:	4b04      	ldr	r3, [pc, #16]	; (8005be4 <OSIdleTaskHook+0x18>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d002      	beq.n	8005bde <OSIdleTaskHook+0x12>
        (*OS_AppIdleTaskHookPtr)();
 8005bd8:	4b02      	ldr	r3, [pc, #8]	; (8005be4 <OSIdleTaskHook+0x18>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4798      	blx	r3
    }
#endif
}
 8005bde:	bf00      	nop
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	200027d4 	.word	0x200027d4

08005be8 <OSInitHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSInitHook (void)
{
 8005be8:	b480      	push	{r7}
 8005bea:	af00      	add	r7, sp, #0
                                                                    /* 8-byte align the ISR stack.                            */    
    OS_CPU_ExceptStkBase = (CPU_STK *)(OSCfg_ISRStkBasePtr + OSCfg_ISRStkSize);
 8005bec:	4b09      	ldr	r3, [pc, #36]	; (8005c14 <OSInitHook+0x2c>)
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	4b09      	ldr	r3, [pc, #36]	; (8005c18 <OSInitHook+0x30>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	4413      	add	r3, r2
 8005bf8:	4a08      	ldr	r2, [pc, #32]	; (8005c1c <OSInitHook+0x34>)
 8005bfa:	6013      	str	r3, [r2, #0]
    OS_CPU_ExceptStkBase = (CPU_STK *)((CPU_STK)(OS_CPU_ExceptStkBase) & 0xFFFFFFF8);
 8005bfc:	4b07      	ldr	r3, [pc, #28]	; (8005c1c <OSInitHook+0x34>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f023 0307 	bic.w	r3, r3, #7
 8005c04:	461a      	mov	r2, r3
 8005c06:	4b05      	ldr	r3, [pc, #20]	; (8005c1c <OSInitHook+0x34>)
 8005c08:	601a      	str	r2, [r3, #0]
}
 8005c0a:	bf00      	nop
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bc80      	pop	{r7}
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	0800df24 	.word	0x0800df24
 8005c18:	0800df28 	.word	0x0800df28
 8005c1c:	20003774 	.word	0x20003774

08005c20 <OSStatTaskHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSStatTaskHook (void)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	af00      	add	r7, sp, #0
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppStatTaskHookPtr != (OS_APP_HOOK_VOID)0) {
 8005c24:	4b04      	ldr	r3, [pc, #16]	; (8005c38 <OSStatTaskHook+0x18>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d002      	beq.n	8005c32 <OSStatTaskHook+0x12>
        (*OS_AppStatTaskHookPtr)();
 8005c2c:	4b02      	ldr	r3, [pc, #8]	; (8005c38 <OSStatTaskHook+0x18>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4798      	blx	r3
    }
#endif
}
 8005c32:	bf00      	nop
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	200027f0 	.word	0x200027f0

08005c3c <OSTaskCreateHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSTaskCreateHook (OS_TCB  *p_tcb)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskCreateHookPtr != (OS_APP_HOOK_TCB)0) {
 8005c44:	4b05      	ldr	r3, [pc, #20]	; (8005c5c <OSTaskCreateHook+0x20>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d003      	beq.n	8005c54 <OSTaskCreateHook+0x18>
        (*OS_AppTaskCreateHookPtr)(p_tcb);
 8005c4c:	4b03      	ldr	r3, [pc, #12]	; (8005c5c <OSTaskCreateHook+0x20>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	4798      	blx	r3
    }
#else
    (void)p_tcb;                                            /* Prevent compiler warning                               */
#endif
}
 8005c54:	bf00      	nop
 8005c56:	3708      	adds	r7, #8
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	2000250c 	.word	0x2000250c

08005c60 <OSTaskReturnHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSTaskReturnHook (OS_TCB  *p_tcb)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskReturnHookPtr != (OS_APP_HOOK_TCB)0) {
 8005c68:	4b05      	ldr	r3, [pc, #20]	; (8005c80 <OSTaskReturnHook+0x20>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d003      	beq.n	8005c78 <OSTaskReturnHook+0x18>
        (*OS_AppTaskReturnHookPtr)(p_tcb);
 8005c70:	4b03      	ldr	r3, [pc, #12]	; (8005c80 <OSTaskReturnHook+0x20>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	4798      	blx	r3
    }
#else
    (void)p_tcb;                                            /* Prevent compiler warning                               */
#endif
}
 8005c78:	bf00      	nop
 8005c7a:	3708      	adds	r7, #8
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	20002374 	.word	0x20002374

08005c84 <OSTaskStkInit>:
                         void          *p_arg,
                         CPU_STK       *p_stk_base,
                         CPU_STK       *p_stk_limit,
                         CPU_STK_SIZE   stk_size,
                         OS_OPT         opt)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b087      	sub	sp, #28
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	607a      	str	r2, [r7, #4]
 8005c90:	603b      	str	r3, [r7, #0]
    CPU_STK    *p_stk;

    
    (void)opt;                                                  /* Prevent compiler warning                               */

    p_stk = &p_stk_base[stk_size];                              /* Load stack pointer                                     */
 8005c92:	6a3b      	ldr	r3, [r7, #32]
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	4413      	add	r3, r2
 8005c9a:	617b      	str	r3, [r7, #20]
                                                                /* Align the stack to 8-bytes.                            */
    p_stk = (CPU_STK *)((CPU_STK)(p_stk) & 0xFFFFFFF8);
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	f023 0307 	bic.w	r3, r3, #7
 8005ca2:	617b      	str	r3, [r7, #20]
                                                                /* Registers stacked as if auto-saved on exception        */
    *--p_stk = (CPU_STK)0x01000000u;                            /* xPSR                                                   */
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	3b04      	subs	r3, #4
 8005ca8:	617b      	str	r3, [r7, #20]
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005cb0:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)p_task;                                 /* Entry Point                                            */
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	3b04      	subs	r3, #4
 8005cb6:	617b      	str	r3, [r7, #20]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)OS_TaskReturn;                          /* R14 (LR)                                               */
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	3b04      	subs	r3, #4
 8005cc2:	617b      	str	r3, [r7, #20]
 8005cc4:	4a30      	ldr	r2, [pc, #192]	; (8005d88 <OSTaskStkInit+0x104>)
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x12121212u;                            /* R12                                                    */
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	3b04      	subs	r3, #4
 8005cce:	617b      	str	r3, [r7, #20]
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 8005cd6:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x03030303u;                            /* R3                                                     */
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	3b04      	subs	r3, #4
 8005cdc:	617b      	str	r3, [r7, #20]
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 8005ce4:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x02020202u;                            /* R2                                                     */
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	3b04      	subs	r3, #4
 8005cea:	617b      	str	r3, [r7, #20]
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 8005cf2:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)p_stk_limit;                            /* R1                                                     */
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	3b04      	subs	r3, #4
 8005cf8:	617b      	str	r3, [r7, #20]
 8005cfa:	683a      	ldr	r2, [r7, #0]
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)p_arg;                                  /* R0 : argument                                          */
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	3b04      	subs	r3, #4
 8005d04:	617b      	str	r3, [r7, #20]
 8005d06:	68ba      	ldr	r2, [r7, #8]
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	601a      	str	r2, [r3, #0]
                                                                /* Remaining registers saved on process stack             */
    *--p_stk = (CPU_STK)0x11111111u;                            /* R11                                                    */
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	3b04      	subs	r3, #4
 8005d10:	617b      	str	r3, [r7, #20]
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8005d18:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x10101010u;                            /* R10                                                    */
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	3b04      	subs	r3, #4
 8005d1e:	617b      	str	r3, [r7, #20]
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 8005d26:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x09090909u;                            /* R9                                                     */
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	3b04      	subs	r3, #4
 8005d2c:	617b      	str	r3, [r7, #20]
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 8005d34:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x08080808u;                            /* R8                                                     */
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	3b04      	subs	r3, #4
 8005d3a:	617b      	str	r3, [r7, #20]
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 8005d42:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x07070707u;                            /* R7                                                     */
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	3b04      	subs	r3, #4
 8005d48:	617b      	str	r3, [r7, #20]
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 8005d50:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x06060606u;                            /* R6                                                     */
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	3b04      	subs	r3, #4
 8005d56:	617b      	str	r3, [r7, #20]
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 8005d5e:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x05050505u;                            /* R5                                                     */
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	3b04      	subs	r3, #4
 8005d64:	617b      	str	r3, [r7, #20]
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 8005d6c:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x04040404u;                            /* R4                                                     */
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	3b04      	subs	r3, #4
 8005d72:	617b      	str	r3, [r7, #20]
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 8005d7a:	601a      	str	r2, [r3, #0]
        *--p_stk = (CPU_STK)0x3F800000u;                        /* S1                                                     */
        *--p_stk = (CPU_STK)0x00000000u;                        /* S0                                                     */
    }
#endif    

    return (p_stk);
 8005d7c:	697b      	ldr	r3, [r7, #20]
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	371c      	adds	r7, #28
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bc80      	pop	{r7}
 8005d86:	4770      	bx	lr
 8005d88:	080028d9 	.word	0x080028d9

08005d8c <OSTaskSwHook>:
*                 to the task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/

void  OSTaskSwHook (void)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
        OS_CPU_FP_Reg_Pop(OSTCBHighRdyPtr->StkPtr);
    }
#endif    

#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskSwHookPtr != (OS_APP_HOOK_VOID)0) {
 8005d92:	4b20      	ldr	r3, [pc, #128]	; (8005e14 <OSTaskSwHook+0x88>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d002      	beq.n	8005da0 <OSTaskSwHook+0x14>
        (*OS_AppTaskSwHookPtr)();
 8005d9a:	4b1e      	ldr	r3, [pc, #120]	; (8005e14 <OSTaskSwHook+0x88>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4798      	blx	r3
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_TASK_SWITCHED_IN(OSTCBHighRdyPtr);             /* Record the event.                                      */
#endif

#if OS_CFG_TASK_PROFILE_EN > 0u
    ts = OS_TS_GET();
 8005da0:	f001 f964 	bl	800706c <CPU_TS_TmrRd>
 8005da4:	6078      	str	r0, [r7, #4]
    if (OSTCBCurPtr != OSTCBHighRdyPtr) {
 8005da6:	4b1c      	ldr	r3, [pc, #112]	; (8005e18 <OSTaskSwHook+0x8c>)
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	4b1c      	ldr	r3, [pc, #112]	; (8005e1c <OSTaskSwHook+0x90>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d016      	beq.n	8005de0 <OSTaskSwHook+0x54>
        OSTCBCurPtr->CyclesDelta  = ts - OSTCBCurPtr->CyclesStart;
 8005db2:	4b19      	ldr	r3, [pc, #100]	; (8005e18 <OSTaskSwHook+0x8c>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a18      	ldr	r2, [pc, #96]	; (8005e18 <OSTaskSwHook+0x8c>)
 8005db8:	6812      	ldr	r2, [r2, #0]
 8005dba:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8005dbe:	6879      	ldr	r1, [r7, #4]
 8005dc0:	1a8a      	subs	r2, r1, r2
 8005dc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        OSTCBCurPtr->CyclesTotal += (OS_CYCLES)OSTCBCurPtr->CyclesDelta;
 8005dc6:	4b14      	ldr	r3, [pc, #80]	; (8005e18 <OSTaskSwHook+0x8c>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a13      	ldr	r2, [pc, #76]	; (8005e18 <OSTaskSwHook+0x8c>)
 8005dcc:	6812      	ldr	r2, [r2, #0]
 8005dce:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
 8005dd2:	4a11      	ldr	r2, [pc, #68]	; (8005e18 <OSTaskSwHook+0x8c>)
 8005dd4:	6812      	ldr	r2, [r2, #0]
 8005dd6:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8005dda:	440a      	add	r2, r1
 8005ddc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }

    OSTCBHighRdyPtr->CyclesStart = ts;
 8005de0:	4b0e      	ldr	r3, [pc, #56]	; (8005e1c <OSTaskSwHook+0x90>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }
#endif

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
                                                            /* Keep track of per-task scheduler lock time             */
    if (OSTCBCurPtr->SchedLockTimeMax < OSSchedLockTimeMaxCur) {
 8005dea:	4b0b      	ldr	r3, [pc, #44]	; (8005e18 <OSTaskSwHook+0x8c>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005df2:	4b0b      	ldr	r3, [pc, #44]	; (8005e20 <OSTaskSwHook+0x94>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d205      	bcs.n	8005e06 <OSTaskSwHook+0x7a>
        OSTCBCurPtr->SchedLockTimeMax = OSSchedLockTimeMaxCur;
 8005dfa:	4b07      	ldr	r3, [pc, #28]	; (8005e18 <OSTaskSwHook+0x8c>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a08      	ldr	r2, [pc, #32]	; (8005e20 <OSTaskSwHook+0x94>)
 8005e00:	6812      	ldr	r2, [r2, #0]
 8005e02:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }
    OSSchedLockTimeMaxCur = (CPU_TS)0;                      /* Reset the per-task value                               */
 8005e06:	4b06      	ldr	r3, [pc, #24]	; (8005e20 <OSTaskSwHook+0x94>)
 8005e08:	2200      	movs	r2, #0
 8005e0a:	601a      	str	r2, [r3, #0]
#endif
}
 8005e0c:	bf00      	nop
 8005e0e:	3708      	adds	r7, #8
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	200027e0 	.word	0x200027e0
 8005e18:	200025dc 	.word	0x200025dc
 8005e1c:	200025e8 	.word	0x200025e8
 8005e20:	200025ec 	.word	0x200025ec

08005e24 <OSTimeTickHook>:
* Note(s)    : 1) This function is assumed to be called from the Tick ISR.
*********************************************************************************************************
*/

void  OSTimeTickHook (void)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	af00      	add	r7, sp, #0
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTimeTickHookPtr != (OS_APP_HOOK_VOID)0) {
 8005e28:	4b04      	ldr	r3, [pc, #16]	; (8005e3c <OSTimeTickHook+0x18>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d002      	beq.n	8005e36 <OSTimeTickHook+0x12>
        (*OS_AppTimeTickHookPtr)();
 8005e30:	4b02      	ldr	r3, [pc, #8]	; (8005e3c <OSTimeTickHook+0x18>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4798      	blx	r3
    }
#endif
}
 8005e36:	bf00      	nop
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	200025fc 	.word	0x200025fc

08005e40 <OS_CPU_SysTickHandler>:
* Note(s)    : 1) This function MUST be placed on entry 15 of the Cortex-M4 vector table.
*********************************************************************************************************
*/

void  OS_CPU_SysTickHandler (void)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
 8005e46:	2300      	movs	r3, #0
 8005e48:	607b      	str	r3, [r7, #4]


    CPU_CRITICAL_ENTER();
 8005e4a:	f7fa fa49 	bl	80002e0 <CPU_SR_Save>
 8005e4e:	6078      	str	r0, [r7, #4]
    OSIntNestingCtr++;                                      /* Tell uC/OS-III that we are starting an ISR             */
 8005e50:	4b08      	ldr	r3, [pc, #32]	; (8005e74 <OS_CPU_SysTickHandler+0x34>)
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	3301      	adds	r3, #1
 8005e56:	b2da      	uxtb	r2, r3
 8005e58:	4b06      	ldr	r3, [pc, #24]	; (8005e74 <OS_CPU_SysTickHandler+0x34>)
 8005e5a:	701a      	strb	r2, [r3, #0]
    CPU_CRITICAL_EXIT();
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f7fa fa43 	bl	80002e8 <CPU_SR_Restore>

    OSTimeTick();                                           /* Call uC/OS-III's OSTimeTick()                          */
 8005e62:	f7fe ffe3 	bl	8004e2c <OSTimeTick>

    OSIntExit();                                            /* Tell uC/OS-III that we are leaving the ISR             */
 8005e66:	f7fd f983 	bl	8003170 <OSIntExit>
}
 8005e6a:	bf00      	nop
 8005e6c:	3708      	adds	r7, #8
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	20002608 	.word	0x20002608

08005e78 <OS_CPU_SysTickInit>:
* Note(s)    : 1) This function MUST be called after OSStart() & after processor initialization.
*********************************************************************************************************
*/

void  OS_CPU_SysTickInit (CPU_INT32U  cnts)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
    CPU_INT32U  prio;


    CPU_REG_NVIC_ST_RELOAD = cnts - 1u;
 8005e80:	4a0f      	ldr	r2, [pc, #60]	; (8005ec0 <OS_CPU_SysTickInit+0x48>)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	3b01      	subs	r3, #1
 8005e86:	6013      	str	r3, [r2, #0]

                                                            /* Set SysTick handler prio.                              */
    prio                   = CPU_REG_NVIC_SHPRI3;
 8005e88:	4b0e      	ldr	r3, [pc, #56]	; (8005ec4 <OS_CPU_SysTickInit+0x4c>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	60fb      	str	r3, [r7, #12]
    prio                  &= DEF_BIT_FIELD(24, 0);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005e94:	60fb      	str	r3, [r7, #12]
    prio                  |= DEF_BIT_MASK(OS_CPU_CFG_SYSTICK_PRIO, 24);

    CPU_REG_NVIC_SHPRI3    = prio;
 8005e96:	4a0b      	ldr	r2, [pc, #44]	; (8005ec4 <OS_CPU_SysTickInit+0x4c>)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6013      	str	r3, [r2, #0]

                                                            /* Enable timer.                                          */
    CPU_REG_NVIC_ST_CTRL  |= CPU_REG_NVIC_ST_CTRL_CLKSOURCE |
 8005e9c:	4a0a      	ldr	r2, [pc, #40]	; (8005ec8 <OS_CPU_SysTickInit+0x50>)
 8005e9e:	4b0a      	ldr	r3, [pc, #40]	; (8005ec8 <OS_CPU_SysTickInit+0x50>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f043 0305 	orr.w	r3, r3, #5
 8005ea6:	6013      	str	r3, [r2, #0]
                             CPU_REG_NVIC_ST_CTRL_ENABLE;
                                                            /* Enable timer interrupt.                                */
    CPU_REG_NVIC_ST_CTRL  |= CPU_REG_NVIC_ST_CTRL_TICKINT;
 8005ea8:	4a07      	ldr	r2, [pc, #28]	; (8005ec8 <OS_CPU_SysTickInit+0x50>)
 8005eaa:	4b07      	ldr	r3, [pc, #28]	; (8005ec8 <OS_CPU_SysTickInit+0x50>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f043 0302 	orr.w	r3, r3, #2
 8005eb2:	6013      	str	r3, [r2, #0]
}
 8005eb4:	bf00      	nop
 8005eb6:	3714      	adds	r7, #20
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bc80      	pop	{r7}
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop
 8005ec0:	e000e014 	.word	0xe000e014
 8005ec4:	e000ed20 	.word	0xe000ed20
 8005ec8:	e000e010 	.word	0xe000e010

08005ecc <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8005ed6:	4908      	ldr	r1, [pc, #32]	; (8005ef8 <NVIC_EnableIRQ+0x2c>)
 8005ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005edc:	095b      	lsrs	r3, r3, #5
 8005ede:	79fa      	ldrb	r2, [r7, #7]
 8005ee0:	f002 021f 	and.w	r2, r2, #31
 8005ee4:	2001      	movs	r0, #1
 8005ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8005eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005eee:	bf00      	nop
 8005ef0:	370c      	adds	r7, #12
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bc80      	pop	{r7}
 8005ef6:	4770      	bx	lr
 8005ef8:	e000e100 	.word	0xe000e100

08005efc <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	4603      	mov	r3, r0
 8005f04:	6039      	str	r1, [r7, #0]
 8005f06:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8005f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	da0b      	bge.n	8005f28 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8005f10:	490d      	ldr	r1, [pc, #52]	; (8005f48 <NVIC_SetPriority+0x4c>)
 8005f12:	79fb      	ldrb	r3, [r7, #7]
 8005f14:	f003 030f 	and.w	r3, r3, #15
 8005f18:	3b04      	subs	r3, #4
 8005f1a:	683a      	ldr	r2, [r7, #0]
 8005f1c:	b2d2      	uxtb	r2, r2
 8005f1e:	0092      	lsls	r2, r2, #2
 8005f20:	b2d2      	uxtb	r2, r2
 8005f22:	440b      	add	r3, r1
 8005f24:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8005f26:	e009      	b.n	8005f3c <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8005f28:	4908      	ldr	r1, [pc, #32]	; (8005f4c <NVIC_SetPriority+0x50>)
 8005f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f2e:	683a      	ldr	r2, [r7, #0]
 8005f30:	b2d2      	uxtb	r2, r2
 8005f32:	0092      	lsls	r2, r2, #2
 8005f34:	b2d2      	uxtb	r2, r2
 8005f36:	440b      	add	r3, r1
 8005f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bc80      	pop	{r7}
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	e000ed00 	.word	0xe000ed00
 8005f4c:	e000e100 	.word	0xe000e100

08005f50 <XMC_SCU_SetCcuTriggerHigh>:
 * the timer using this API.<BR>
 * \par<b>Related APIs:</b><BR>
 * XMC_CCU4_SLICE_StartConfig(), XMC_CCU4_SLICE_SetInput(), XMC_SCU_SetCcuTriggerLow()\n\n\n
 */
__STATIC_INLINE void XMC_SCU_SetCcuTriggerHigh(const uint32_t trigger)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  SCU_GENERAL->CCUCON |= (uint32_t)trigger;
 8005f58:	4905      	ldr	r1, [pc, #20]	; (8005f70 <XMC_SCU_SetCcuTriggerHigh+0x20>)
 8005f5a:	4b05      	ldr	r3, [pc, #20]	; (8005f70 <XMC_SCU_SetCcuTriggerHigh+0x20>)
 8005f5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bc80      	pop	{r7}
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	50004000 	.word	0x50004000

08005f74 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_CHECK_MODULE_PTR(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	60da      	str	r2, [r3, #12]
}
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bc80      	pop	{r7}
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop

08005f94 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_CHECK_MODULE_PTR(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	68da      	ldr	r2, [r3, #12]
 8005fa4:	78fb      	ldrb	r3, [r7, #3]
 8005fa6:	2101      	movs	r1, #1
 8005fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8005fac:	431a      	orrs	r2, r3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	60da      	str	r2, [r3, #12]
}
 8005fb2:	bf00      	nop
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bc80      	pop	{r7}
 8005fba:	4770      	bx	lr

08005fbc <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  slice->PRS = (uint32_t) period_val;
 8005fc8:	887a      	ldrh	r2, [r7, #2]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005fce:	bf00      	nop
 8005fd0:	370c      	adds	r7, #12
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bc80      	pop	{r7}
 8005fd6:	4770      	bx	lr

08005fd8 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  slice->CRS = (uint32_t) compare_val;
 8005fe4:	887a      	ldrh	r2, [r7, #2]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005fea:	bf00      	nop
 8005fec:	370c      	adds	r7, #12
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bc80      	pop	{r7}
 8005ff2:	4770      	bx	lr

08005ff4 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8006006:	78fb      	ldrb	r3, [r7, #3]
 8006008:	2101      	movs	r1, #1
 800600a:	fa01 f303 	lsl.w	r3, r1, r3
 800600e:	431a      	orrs	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8006016:	bf00      	nop
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	bc80      	pop	{r7}
 800601e:	4770      	bx	lr

08006020 <BSP_CCU4_Init>:
 */
#include <bsp_ccu4.h>
#include <bsp_gpio.h>

_Bool BSP_CCU4_Init (void)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
	XMC_CCU4_SLICE_COMPARE_CONFIG_t g_timer_object =
 8006026:	f107 0308 	add.w	r3, r7, #8
 800602a:	2200      	movs	r2, #0
 800602c:	601a      	str	r2, [r3, #0]
 800602e:	605a      	str	r2, [r3, #4]
 8006030:	7a3b      	ldrb	r3, [r7, #8]
 8006032:	f043 0302 	orr.w	r3, r3, #2
 8006036:	723b      	strb	r3, [r7, #8]
	  .timer_concatenation = false
	};*/

	  /* Local variable which holds configuration of Event-1 */
	XMC_CCU4_SLICE_EVENT_CONFIG_t config;
	config.duration = XMC_CCU4_SLICE_EVENT_FILTER_5_CYCLES;
 8006038:	2302      	movs	r3, #2
 800603a:	71fb      	strb	r3, [r7, #7]
	config.edge     = XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_RISING_EDGE;
 800603c:	2301      	movs	r3, #1
 800603e:	717b      	strb	r3, [r7, #5]
	config.level    = XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH; /* Not needed */
 8006040:	2300      	movs	r3, #0
 8006042:	71bb      	strb	r3, [r7, #6]
	config.mapped_input = XMC_CCU4_SLICE_INPUT_I;
 8006044:	2308      	movs	r3, #8
 8006046:	713b      	strb	r3, [r7, #4]

	/* Ensure fCCU reaches CCU42 */
	XMC_CCU4_SetModuleClock(MODULE_PTR, XMC_CCU4_CLOCK_SCU);
 8006048:	2100      	movs	r1, #0
 800604a:	482a      	ldr	r0, [pc, #168]	; (80060f4 <BSP_CCU4_Init+0xd4>)
 800604c:	f001 fae0 	bl	8007610 <XMC_CCU4_SetModuleClock>
	XMC_CCU4_Init(MODULE_PTR, XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR);
 8006050:	2100      	movs	r1, #0
 8006052:	4828      	ldr	r0, [pc, #160]	; (80060f4 <BSP_CCU4_Init+0xd4>)
 8006054:	f001 fac0 	bl	80075d8 <XMC_CCU4_Init>

	/* Get the slice out of idle mode */
	XMC_CCU4_EnableClock(MODULE_PTR, SLICE_NUMBER);
 8006058:	2101      	movs	r1, #1
 800605a:	4826      	ldr	r0, [pc, #152]	; (80060f4 <BSP_CCU4_Init+0xd4>)
 800605c:	f7ff ff9a 	bl	8005f94 <XMC_CCU4_EnableClock>
/* Start the prescaler and restore clocks to slices */
	XMC_CCU4_StartPrescaler(MODULE_PTR);
 8006060:	4824      	ldr	r0, [pc, #144]	; (80060f4 <BSP_CCU4_Init+0xd4>)
 8006062:	f7ff ff87 	bl	8005f74 <XMC_CCU4_StartPrescaler>

/* Initialize the Slice */
	XMC_CCU4_SLICE_CompareInit(SLICE_PTR, &g_timer_object);
 8006066:	f107 0308 	add.w	r3, r7, #8
 800606a:	4619      	mov	r1, r3
 800606c:	4822      	ldr	r0, [pc, #136]	; (80060f8 <BSP_CCU4_Init+0xd8>)
 800606e:	f001 fae9 	bl	8007644 <XMC_CCU4_SLICE_CompareInit>
/* Enable compare match and period match events */
	XMC_CCU4_SLICE_EnableEvent(SLICE_PTR, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8006072:	2100      	movs	r1, #0
 8006074:	4820      	ldr	r0, [pc, #128]	; (80060f8 <BSP_CCU4_Init+0xd8>)
 8006076:	f7ff ffbd 	bl	8005ff4 <XMC_CCU4_SLICE_EnableEvent>
	XMC_CCU4_SLICE_EnableEvent(SLICE_PTR, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
 800607a:	2102      	movs	r1, #2
 800607c:	481e      	ldr	r0, [pc, #120]	; (80060f8 <BSP_CCU4_Init+0xd8>)
 800607e:	f7ff ffb9 	bl	8005ff4 <XMC_CCU4_SLICE_EnableEvent>
/* Connect period match event to SR0 */
	XMC_CCU4_SLICE_SetInterruptNode(SLICE_PTR, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH, XMC_CCU4_SLICE_SR_ID_0);
 8006082:	2200      	movs	r2, #0
 8006084:	2100      	movs	r1, #0
 8006086:	481c      	ldr	r0, [pc, #112]	; (80060f8 <BSP_CCU4_Init+0xd8>)
 8006088:	f001 fbba 	bl	8007800 <XMC_CCU4_SLICE_SetInterruptNode>

/* Connect compare match event to SR1 */
	XMC_CCU4_SLICE_SetInterruptNode(SLICE_PTR, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP, XMC_CCU4_SLICE_SR_ID_1);
 800608c:	2201      	movs	r2, #1
 800608e:	2102      	movs	r1, #2
 8006090:	4819      	ldr	r0, [pc, #100]	; (80060f8 <BSP_CCU4_Init+0xd8>)
 8006092:	f001 fbb5 	bl	8007800 <XMC_CCU4_SLICE_SetInterruptNode>

/* Configure NVIC */
	/* Set priority */
	NVIC_SetPriority(CCU40_0_IRQn, 10U);
 8006096:	210a      	movs	r1, #10
 8006098:	202c      	movs	r0, #44	; 0x2c
 800609a:	f7ff ff2f 	bl	8005efc <NVIC_SetPriority>
	NVIC_SetPriority(CCU40_1_IRQn, 10U);
 800609e:	210a      	movs	r1, #10
 80060a0:	202d      	movs	r0, #45	; 0x2d
 80060a2:	f7ff ff2b 	bl	8005efc <NVIC_SetPriority>
	//NVIC_SetPriority(CCU40_3_IRQn, 10U);
	/* Enable IRQ */
	NVIC_EnableIRQ(CCU40_0_IRQn);
 80060a6:	202c      	movs	r0, #44	; 0x2c
 80060a8:	f7ff ff10 	bl	8005ecc <NVIC_EnableIRQ>
	NVIC_EnableIRQ(CCU40_1_IRQn);
 80060ac:	202d      	movs	r0, #45	; 0x2d
 80060ae:	f7ff ff0d 	bl	8005ecc <NVIC_EnableIRQ>
	/* Program a very large value into PR and CR */
	XMC_CCU4_SLICE_SetTimerPeriodMatch(SLICE_PTR, PERIODE); //65500U
 80060b2:	f44f 5162 	mov.w	r1, #14464	; 0x3880
 80060b6:	4810      	ldr	r0, [pc, #64]	; (80060f8 <BSP_CCU4_Init+0xd8>)
 80060b8:	f7ff ff80 	bl	8005fbc <XMC_CCU4_SLICE_SetTimerPeriodMatch>
	XMC_CCU4_SLICE_SetTimerCompareMatch(SLICE_PTR, CAPTURE1);//32000U
 80060bc:	f241 3188 	movw	r1, #5000	; 0x1388
 80060c0:	480d      	ldr	r0, [pc, #52]	; (80060f8 <BSP_CCU4_Init+0xd8>)
 80060c2:	f7ff ff89 	bl	8005fd8 <XMC_CCU4_SLICE_SetTimerCompareMatch>

	/* Enable shadow transfer */
	XMC_CCU4_EnableShadowTransfer(MODULE_PTR,(uint32_t)(XMC_CCU4_SHADOW_TRANSFER_SLICE_1));
 80060c6:	2110      	movs	r1, #16
 80060c8:	480a      	ldr	r0, [pc, #40]	; (80060f4 <BSP_CCU4_Init+0xd4>)
 80060ca:	f001 fb89 	bl	80077e0 <XMC_CCU4_EnableShadowTransfer>

	/* Configure Event-1 and map it to Input-I */
	XMC_CCU4_SLICE_ConfigureEvent(SLICE_PTR, XMC_CCU4_SLICE_EVENT_1, &config);
 80060ce:	1d3b      	adds	r3, r7, #4
 80060d0:	461a      	mov	r2, r3
 80060d2:	2102      	movs	r1, #2
 80060d4:	4808      	ldr	r0, [pc, #32]	; (80060f8 <BSP_CCU4_Init+0xd8>)
 80060d6:	f001 fb19 	bl	800770c <XMC_CCU4_SLICE_ConfigureEvent>
	/* Map Event-1 to Start function */
	XMC_CCU4_SLICE_StartConfig(SLICE_PTR, XMC_CCU4_SLICE_EVENT_1, XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR);
 80060da:	2201      	movs	r2, #1
 80060dc:	2102      	movs	r1, #2
 80060de:	4806      	ldr	r0, [pc, #24]	; (80060f8 <BSP_CCU4_Init+0xd8>)
 80060e0:	f001 fae6 	bl	80076b0 <XMC_CCU4_SLICE_StartConfig>

	/* Generate an external start trigger */
	XMC_SCU_SetCcuTriggerHigh(CAPCOM_MASK);
 80060e4:	2001      	movs	r0, #1
 80060e6:	f7ff ff33 	bl	8005f50 <XMC_SCU_SetCcuTriggerHigh>

	return true;
 80060ea:	2301      	movs	r3, #1
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3710      	adds	r7, #16
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	4000c000 	.word	0x4000c000
 80060f8:	4000c200 	.word	0x4000c200

080060fc <XMC_SCU_SetCcuTriggerHigh>:
 * the timer using this API.<BR>
 * \par<b>Related APIs:</b><BR>
 * XMC_CCU4_SLICE_StartConfig(), XMC_CCU4_SLICE_SetInput(), XMC_SCU_SetCcuTriggerLow()\n\n\n
 */
__STATIC_INLINE void XMC_SCU_SetCcuTriggerHigh(const uint32_t trigger)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  SCU_GENERAL->CCUCON |= (uint32_t)trigger;
 8006104:	4905      	ldr	r1, [pc, #20]	; (800611c <XMC_SCU_SetCcuTriggerHigh+0x20>)
 8006106:	4b05      	ldr	r3, [pc, #20]	; (800611c <XMC_SCU_SetCcuTriggerHigh+0x20>)
 8006108:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4313      	orrs	r3, r2
 800610e:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	bc80      	pop	{r7}
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	50004000 	.word	0x50004000

08006120 <XMC_SCU_SetCcuTriggerLow>:
 * the timer using this API.<BR>
 * \par<b>Related APIs:</b><BR>
 * XMC_CCU4_SLICE_StartConfig(), XMC_CCU4_SLICE_SetInput(), XMC_SCU_SetCcuTriggerHigh()\n\n\n
 */
__STATIC_INLINE void XMC_SCU_SetCcuTriggerLow(const uint32_t trigger)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  SCU_GENERAL->CCUCON &= (uint32_t)~trigger;
 8006128:	4905      	ldr	r1, [pc, #20]	; (8006140 <XMC_SCU_SetCcuTriggerLow+0x20>)
 800612a:	4b05      	ldr	r3, [pc, #20]	; (8006140 <XMC_SCU_SetCcuTriggerLow+0x20>)
 800612c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	43db      	mvns	r3, r3
 8006132:	4013      	ands	r3, r2
 8006134:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 8006136:	bf00      	nop
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	bc80      	pop	{r7}
 800613e:	4770      	bx	lr
 8006140:	50004000 	.word	0x50004000

08006144 <XMC_CCU4_SLICE_ClearEvent>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_EnableEvent()<BR> XMC_CCU4_SLICE_SetEvent()<BR> XMC_CCU4_SLICE_GetEvent().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearEvent(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	460b      	mov	r3, r1
 800614e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->SWR |= ((uint32_t) 1) << ((uint32_t) event);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006156:	78fb      	ldrb	r3, [r7, #3]
 8006158:	2101      	movs	r1, #1
 800615a:	fa01 f303 	lsl.w	r3, r1, r3
 800615e:	431a      	orrs	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8006166:	bf00      	nop
 8006168:	370c      	adds	r7, #12
 800616a:	46bd      	mov	sp, r7
 800616c:	bc80      	pop	{r7}
 800616e:	4770      	bx	lr

08006170 <BSP_IntDisAll>:
 * \params   none
 * \returns  none
 * \brief    disable all interrupts
 */
void  BSP_IntDisAll (void)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	af00      	add	r7, sp, #0
	CPU_IntDis();
 8006174:	f7fa f8b0 	bl	80002d8 <CPU_IntDis>
}
 8006178:	bf00      	nop
 800617a:	bd80      	pop	{r7, pc}

0800617c <BSP_IntEn>:
 * \params   int_id ... interrupt to enable
 * \returns  none
 * \brief    enable interrupt
 */
void  BSP_IntEn (CPU_DATA  int_id)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b082      	sub	sp, #8
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
	if (int_id < BSP_INT_ID_MAX) {
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2b6f      	cmp	r3, #111	; 0x6f
 8006188:	d806      	bhi.n	8006198 <BSP_IntEn+0x1c>
		CPU_IntSrcEn (int_id + 16);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	b2db      	uxtb	r3, r3
 800618e:	3310      	adds	r3, #16
 8006190:	b2db      	uxtb	r3, r3
 8006192:	4618      	mov	r0, r3
 8006194:	f7fb fb46 	bl	8001824 <CPU_IntSrcEn>
	}
}
 8006198:	bf00      	nop
 800619a:	3708      	adds	r7, #8
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <BSP_IntVectSet>:
 *           isr ...... handler to assign
 * \returns  none
 * \brief    assign ISR handler
 */
void  BSP_IntVectSet (CPU_DATA int_id, CPU_FNCT_VOID  isr)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
	CPU_SR_ALLOC();
 80061aa:	2300      	movs	r3, #0
 80061ac:	60fb      	str	r3, [r7, #12]

	if (int_id < BSP_INT_ID_MAX) {
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2b6f      	cmp	r3, #111	; 0x6f
 80061b2:	d80a      	bhi.n	80061ca <BSP_IntVectSet+0x2a>
		CPU_CRITICAL_ENTER();
 80061b4:	f7fa f894 	bl	80002e0 <CPU_SR_Save>
 80061b8:	60f8      	str	r0, [r7, #12]
		BSP_IntVectTbl[int_id] = isr;
 80061ba:	4906      	ldr	r1, [pc, #24]	; (80061d4 <BSP_IntVectSet+0x34>)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	683a      	ldr	r2, [r7, #0]
 80061c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		CPU_CRITICAL_EXIT();
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f7fa f88f 	bl	80002e8 <CPU_SR_Restore>
	}
}
 80061ca:	bf00      	nop
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	20001cc8 	.word	0x20001cc8

080061d8 <BSP_IntInit>:
 * \params   none
 * \returns  none
 * \brief    initialize interrupts
 */
void  BSP_IntInit (void)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	af00      	add	r7, sp, #0
	BSP_IntVectSet (USIC1_1_IRQn, BSP_IntHandler_Uart_Recive); //**
 80061dc:	4908      	ldr	r1, [pc, #32]	; (8006200 <BSP_IntInit+0x28>)
 80061de:	205b      	movs	r0, #91	; 0x5b
 80061e0:	f7ff ffde 	bl	80061a0 <BSP_IntVectSet>
	BSP_IntVectSet (USIC1_0_IRQn, BSP_IntHandler_Uart_Recive); //**
 80061e4:	4906      	ldr	r1, [pc, #24]	; (8006200 <BSP_IntInit+0x28>)
 80061e6:	205a      	movs	r0, #90	; 0x5a
 80061e8:	f7ff ffda 	bl	80061a0 <BSP_IntVectSet>
	BSP_IntVectSet (CCU40_0_IRQn, CCU40_0_IRQHandler);
 80061ec:	4905      	ldr	r1, [pc, #20]	; (8006204 <BSP_IntInit+0x2c>)
 80061ee:	202c      	movs	r0, #44	; 0x2c
 80061f0:	f7ff ffd6 	bl	80061a0 <BSP_IntVectSet>
	BSP_IntVectSet (CCU40_1_IRQn, CCU40_1_IRQHandler);
 80061f4:	4904      	ldr	r1, [pc, #16]	; (8006208 <BSP_IntInit+0x30>)
 80061f6:	202d      	movs	r0, #45	; 0x2d
 80061f8:	f7ff ffd2 	bl	80061a0 <BSP_IntVectSet>
}
 80061fc:	bf00      	nop
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	08006249 	.word	0x08006249
 8006204:	0800620d 	.word	0x0800620d
 8006208:	08006231 	.word	0x08006231

0800620c <CCU40_0_IRQHandler>:

static void CCU40_0_IRQHandler(void)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	af00      	add	r7, sp, #0
  XMC_CCU4_SLICE_ClearEvent(SLICE_PTR, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8006210:	2100      	movs	r1, #0
 8006212:	4806      	ldr	r0, [pc, #24]	; (800622c <CCU40_0_IRQHandler+0x20>)
 8006214:	f7ff ff96 	bl	8006144 <XMC_CCU4_SLICE_ClearEvent>
  //APP_TRACE_INFO ("sH ...\n");
  BSP_SERVO_HIGH();
 8006218:	f000 fc2e 	bl	8006a78 <BSP_SERVO_HIGH>
  XMC_SCU_SetCcuTriggerLow(CAPCOM_MASK);
 800621c:	2001      	movs	r0, #1
 800621e:	f7ff ff7f 	bl	8006120 <XMC_SCU_SetCcuTriggerLow>
  XMC_SCU_SetCcuTriggerHigh(CAPCOM_MASK);
 8006222:	2001      	movs	r0, #1
 8006224:	f7ff ff6a 	bl	80060fc <XMC_SCU_SetCcuTriggerHigh>
}
 8006228:	bf00      	nop
 800622a:	bd80      	pop	{r7, pc}
 800622c:	4000c200 	.word	0x4000c200

08006230 <CCU40_1_IRQHandler>:

static void CCU40_1_IRQHandler(void){
 8006230:	b580      	push	{r7, lr}
 8006232:	af00      	add	r7, sp, #0

	XMC_CCU4_SLICE_ClearEvent(SLICE_PTR,  XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
 8006234:	2102      	movs	r1, #2
 8006236:	4803      	ldr	r0, [pc, #12]	; (8006244 <CCU40_1_IRQHandler+0x14>)
 8006238:	f7ff ff84 	bl	8006144 <XMC_CCU4_SLICE_ClearEvent>
		//APP_TRACE_INFO ("sL ...\n");
		BSP_SERVO_LOW();
 800623c:	f000 fc28 	bl	8006a90 <BSP_SERVO_LOW>
}
 8006240:	bf00      	nop
 8006242:	bd80      	pop	{r7, pc}
 8006244:	4000c200 	.word	0x4000c200

08006248 <BSP_IntHandler_Uart_Recive>:
 * \returns  none
 * \brief    UART interrupt handler
 *           https://doc.micrium.com/display/osiiidoc/Keeping+the+Data+in+Scope
 */
static  void  BSP_IntHandler_Uart_Recive (void)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af02      	add	r7, sp, #8
	static CPU_CHAR    *RxDataPtr  = NULL ;
	static CPU_INT32U  RxDataCtr = 0;
	static CPU_CHAR    msg_receiving = 0;

	// receive byte
	RxData = XMC_UART_CH_GetReceivedData (XMC_UART1_CH1);                   // <1>
 800624e:	4838      	ldr	r0, [pc, #224]	; (8006330 <BSP_IntHandler_Uart_Recive+0xe8>)
 8006250:	f001 f97e 	bl	8007550 <XMC_UART_CH_GetReceivedData>
 8006254:	4603      	mov	r3, r0
 8006256:	71fb      	strb	r3, [r7, #7]

	// is the character a "start of packet" character?                      // <2>
	if ( ( (int) RxData == Start_of_Packet) && msg_receiving == 0) {
 8006258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800625c:	4a35      	ldr	r2, [pc, #212]	; (8006334 <BSP_IntHandler_Uart_Recive+0xec>)
 800625e:	7812      	ldrb	r2, [r2, #0]
 8006260:	4293      	cmp	r3, r2
 8006262:	d116      	bne.n	8006292 <BSP_IntHandler_Uart_Recive+0x4a>
 8006264:	4b34      	ldr	r3, [pc, #208]	; (8006338 <BSP_IntHandler_Uart_Recive+0xf0>)
 8006266:	f993 3000 	ldrsb.w	r3, [r3]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d111      	bne.n	8006292 <BSP_IntHandler_Uart_Recive+0x4a>
		// allocate a memory block
		RxDataPtr = (CPU_CHAR *) OSMemGet (&Mem_Partition, &err);
 800626e:	1d3b      	adds	r3, r7, #4
 8006270:	4619      	mov	r1, r3
 8006272:	4832      	ldr	r0, [pc, #200]	; (800633c <BSP_IntHandler_Uart_Recive+0xf4>)
 8006274:	f7ff fa90 	bl	8005798 <OSMemGet>
 8006278:	4602      	mov	r2, r0
 800627a:	4b31      	ldr	r3, [pc, #196]	; (8006340 <BSP_IntHandler_Uart_Recive+0xf8>)
 800627c:	601a      	str	r2, [r3, #0]
		if (err != OS_ERR_NONE)
 800627e:	88bb      	ldrh	r3, [r7, #4]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d003      	beq.n	800628c <BSP_IntHandler_Uart_Recive+0x44>
			APP_TRACE_DBG ("Error OSMemGet: BSP_IntHandler_Uart_Recive\n");
 8006284:	482f      	ldr	r0, [pc, #188]	; (8006344 <BSP_IntHandler_Uart_Recive+0xfc>)
 8006286:	f001 fd27 	bl	8007cd8 <puts>
 800628a:	e002      	b.n	8006292 <BSP_IntHandler_Uart_Recive+0x4a>
		else
			msg_receiving = 1;
 800628c:	4b2a      	ldr	r3, [pc, #168]	; (8006338 <BSP_IntHandler_Uart_Recive+0xf0>)
 800628e:	2201      	movs	r2, #1
 8006290:	701a      	strb	r2, [r3, #0]

	// receive characters and put them into the memory partition            // <3>
	// until we detect and "end of packet character"
	// NOTE: the message itself may also contain a "start of packet character"
	//       but no "end of packet character"
	if ( ( (int) RxData != Start_of_Packet) && ( (int) RxData != End_of_Packet)
 8006292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006296:	4a27      	ldr	r2, [pc, #156]	; (8006334 <BSP_IntHandler_Uart_Recive+0xec>)
 8006298:	7812      	ldrb	r2, [r2, #0]
 800629a:	4293      	cmp	r3, r2
 800629c:	d018      	beq.n	80062d0 <BSP_IntHandler_Uart_Recive+0x88>
 800629e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062a2:	4a29      	ldr	r2, [pc, #164]	; (8006348 <BSP_IntHandler_Uart_Recive+0x100>)
 80062a4:	7812      	ldrb	r2, [r2, #0]
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d012      	beq.n	80062d0 <BSP_IntHandler_Uart_Recive+0x88>
	     && msg_receiving == 1) {
 80062aa:	4b23      	ldr	r3, [pc, #140]	; (8006338 <BSP_IntHandler_Uart_Recive+0xf0>)
 80062ac:	f993 3000 	ldrsb.w	r3, [r3]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d10d      	bne.n	80062d0 <BSP_IntHandler_Uart_Recive+0x88>
		// put byte into the memory partition at the respective address
		*RxDataPtr = RxData;
 80062b4:	4b22      	ldr	r3, [pc, #136]	; (8006340 <BSP_IntHandler_Uart_Recive+0xf8>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	79fa      	ldrb	r2, [r7, #7]
 80062ba:	701a      	strb	r2, [r3, #0]
		// increment the address to point to the next location
		RxDataPtr++;
 80062bc:	4b20      	ldr	r3, [pc, #128]	; (8006340 <BSP_IntHandler_Uart_Recive+0xf8>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	3301      	adds	r3, #1
 80062c2:	4a1f      	ldr	r2, [pc, #124]	; (8006340 <BSP_IntHandler_Uart_Recive+0xf8>)
 80062c4:	6013      	str	r3, [r2, #0]
		// increment the receive counter
		RxDataCtr++;
 80062c6:	4b21      	ldr	r3, [pc, #132]	; (800634c <BSP_IntHandler_Uart_Recive+0x104>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	3301      	adds	r3, #1
 80062cc:	4a1f      	ldr	r2, [pc, #124]	; (800634c <BSP_IntHandler_Uart_Recive+0x104>)
 80062ce:	6013      	str	r3, [r2, #0]
	}

	// is the character a "end of packet" character?                        // <4>
	if ( ( (int) RxData == End_of_Packet) && msg_receiving == 1) {
 80062d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062d4:	4a1c      	ldr	r2, [pc, #112]	; (8006348 <BSP_IntHandler_Uart_Recive+0x100>)
 80062d6:	7812      	ldrb	r2, [r2, #0]
 80062d8:	4293      	cmp	r3, r2
 80062da:	d124      	bne.n	8006326 <BSP_IntHandler_Uart_Recive+0xde>
 80062dc:	4b16      	ldr	r3, [pc, #88]	; (8006338 <BSP_IntHandler_Uart_Recive+0xf0>)
 80062de:	f993 3000 	ldrsb.w	r3, [r3]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d11f      	bne.n	8006326 <BSP_IntHandler_Uart_Recive+0xde>
		// send the message to the application task - to that end put a pointer to
		// the memory block into the queue to the application task
		OSQPost ( (OS_Q      *) &UART_ISR,
 80062e6:	4b16      	ldr	r3, [pc, #88]	; (8006340 <BSP_IntHandler_Uart_Recive+0xf8>)
 80062e8:	681a      	ldr	r2, [r3, #0]
			  (void      *) (RxDataPtr - RxDataCtr),
 80062ea:	4b18      	ldr	r3, [pc, #96]	; (800634c <BSP_IntHandler_Uart_Recive+0x104>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	425b      	negs	r3, r3
 80062f0:	18d1      	adds	r1, r2, r3
			  (OS_MSG_SIZE) RxDataCtr + 1,
 80062f2:	4b16      	ldr	r3, [pc, #88]	; (800634c <BSP_IntHandler_Uart_Recive+0x104>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	b29b      	uxth	r3, r3

	// is the character a "end of packet" character?                        // <4>
	if ( ( (int) RxData == End_of_Packet) && msg_receiving == 1) {
		// send the message to the application task - to that end put a pointer to
		// the memory block into the queue to the application task
		OSQPost ( (OS_Q      *) &UART_ISR,
 80062f8:	3301      	adds	r3, #1
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	1d3b      	adds	r3, r7, #4
 80062fe:	9300      	str	r3, [sp, #0]
 8006300:	2300      	movs	r3, #0
 8006302:	4813      	ldr	r0, [pc, #76]	; (8006350 <BSP_IntHandler_Uart_Recive+0x108>)
 8006304:	f7fb fd6c 	bl	8001de0 <OSQPost>
			  (void      *) (RxDataPtr - RxDataCtr),
			  (OS_MSG_SIZE) RxDataCtr + 1,
			  (OS_OPT)      OS_OPT_POST_FIFO,
			  (OS_ERR    *) &err);
		if (err != OS_ERR_NONE)
 8006308:	88bb      	ldrh	r3, [r7, #4]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d002      	beq.n	8006314 <BSP_IntHandler_Uart_Recive+0xcc>
			APP_TRACE_DBG ("Error OSQPost: BSP_IntHandler_Uart_Recive\n");
 800630e:	4811      	ldr	r0, [pc, #68]	; (8006354 <BSP_IntHandler_Uart_Recive+0x10c>)
 8006310:	f001 fce2 	bl	8007cd8 <puts>

		// clear the receive pointer and counter                              // <5>
		RxDataPtr = NULL;
 8006314:	4b0a      	ldr	r3, [pc, #40]	; (8006340 <BSP_IntHandler_Uart_Recive+0xf8>)
 8006316:	2200      	movs	r2, #0
 8006318:	601a      	str	r2, [r3, #0]
		RxDataCtr = 0;
 800631a:	4b0c      	ldr	r3, [pc, #48]	; (800634c <BSP_IntHandler_Uart_Recive+0x104>)
 800631c:	2200      	movs	r2, #0
 800631e:	601a      	str	r2, [r3, #0]
		// ready for a next message
		msg_receiving = 0;
 8006320:	4b05      	ldr	r3, [pc, #20]	; (8006338 <BSP_IntHandler_Uart_Recive+0xf0>)
 8006322:	2200      	movs	r2, #0
 8006324:	701a      	strb	r2, [r3, #0]
	}
}
 8006326:	bf00      	nop
 8006328:	3708      	adds	r7, #8
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	48020200 	.word	0x48020200
 8006334:	20000000 	.word	0x20000000
 8006338:	20001e88 	.word	0x20001e88
 800633c:	20001f1c 	.word	0x20001f1c
 8006340:	20001e8c 	.word	0x20001e8c
 8006344:	0800dec0 	.word	0x0800dec0
 8006348:	20000001 	.word	0x20000001
 800634c:	20001e90 	.word	0x20001e90
 8006350:	20001eec 	.word	0x20001eec
 8006354:	0800deec 	.word	0x0800deec

08006358 <BSP_IntHandlerSCU>:
 * \params   none
 * \returns  none
 * \brief    handle an interrupt
 */
void BSP_IntHandlerSCU (void)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_SCU);
 800635c:	2000      	movs	r0, #0
 800635e:	f000 fb23 	bl	80069a8 <BSP_IntHandler>
}
 8006362:	bf00      	nop
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop

08006368 <BSP_IntHandlerERU0_00>:
void BSP_IntHandlerERU0_00 (void)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU0_00);
 800636c:	2001      	movs	r0, #1
 800636e:	f000 fb1b 	bl	80069a8 <BSP_IntHandler>
}
 8006372:	bf00      	nop
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop

08006378 <BSP_IntHandlerERU0_01>:
void BSP_IntHandlerERU0_01 (void)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU0_01);
 800637c:	2002      	movs	r0, #2
 800637e:	f000 fb13 	bl	80069a8 <BSP_IntHandler>
}
 8006382:	bf00      	nop
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop

08006388 <BSP_IntHandlerERU0_02>:
void BSP_IntHandlerERU0_02 (void)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU0_02);
 800638c:	2003      	movs	r0, #3
 800638e:	f000 fb0b 	bl	80069a8 <BSP_IntHandler>
}
 8006392:	bf00      	nop
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop

08006398 <BSP_IntHandlerERU0_03>:
void BSP_IntHandlerERU0_03 (void)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU0_03);
 800639c:	2004      	movs	r0, #4
 800639e:	f000 fb03 	bl	80069a8 <BSP_IntHandler>
}
 80063a2:	bf00      	nop
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop

080063a8 <BSP_IntHandlerERU1_00>:
void BSP_IntHandlerERU1_00 (void)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU1_00);
 80063ac:	2005      	movs	r0, #5
 80063ae:	f000 fafb 	bl	80069a8 <BSP_IntHandler>
}
 80063b2:	bf00      	nop
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop

080063b8 <BSP_IntHandlerERU1_01>:
void BSP_IntHandlerERU1_01 (void)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU1_01);
 80063bc:	2006      	movs	r0, #6
 80063be:	f000 faf3 	bl	80069a8 <BSP_IntHandler>
}
 80063c2:	bf00      	nop
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop

080063c8 <BSP_IntHandlerERU1_02>:
void BSP_IntHandlerERU1_02 (void)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU1_02);
 80063cc:	2007      	movs	r0, #7
 80063ce:	f000 faeb 	bl	80069a8 <BSP_IntHandler>
}
 80063d2:	bf00      	nop
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop

080063d8 <BSP_IntHandlerERU1_03>:
void BSP_IntHandlerERU1_03 (void)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU1_03);
 80063dc:	2008      	movs	r0, #8
 80063de:	f000 fae3 	bl	80069a8 <BSP_IntHandler>
}
 80063e2:	bf00      	nop
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop

080063e8 <BSP_IntHandlerPMU0_00>:
void BSP_IntHandlerPMU0_00 (void)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_PMU0_00);
 80063ec:	200c      	movs	r0, #12
 80063ee:	f000 fadb 	bl	80069a8 <BSP_IntHandler>
}
 80063f2:	bf00      	nop
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop

080063f8 <BSP_IntHandlerVADC0_C0_00>:
void BSP_IntHandlerVADC0_C0_00 (void)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_C0_00);
 80063fc:	200e      	movs	r0, #14
 80063fe:	f000 fad3 	bl	80069a8 <BSP_IntHandler>
}
 8006402:	bf00      	nop
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop

08006408 <BSP_IntHandlerVADC0_C0_01>:
void BSP_IntHandlerVADC0_C0_01 (void)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_C0_01);
 800640c:	200f      	movs	r0, #15
 800640e:	f000 facb 	bl	80069a8 <BSP_IntHandler>
}
 8006412:	bf00      	nop
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop

08006418 <BSP_IntHandlerVADC0_C0_02>:
void BSP_IntHandlerVADC0_C0_02 (void)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_C0_02);
 800641c:	2010      	movs	r0, #16
 800641e:	f000 fac3 	bl	80069a8 <BSP_IntHandler>
}
 8006422:	bf00      	nop
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop

08006428 <BSP_IntHandlerVADC0_C0_03>:
void BSP_IntHandlerVADC0_C0_03 (void)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_C0_03);
 800642c:	2011      	movs	r0, #17
 800642e:	f000 fabb 	bl	80069a8 <BSP_IntHandler>
}
 8006432:	bf00      	nop
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop

08006438 <BSP_IntHandlerVADC0_G0_00>:
void BSP_IntHandlerVADC0_G0_00 (void)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G0_00);
 800643c:	2012      	movs	r0, #18
 800643e:	f000 fab3 	bl	80069a8 <BSP_IntHandler>
}
 8006442:	bf00      	nop
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop

08006448 <BSP_IntHandlerVADC0_G0_01>:
void BSP_IntHandlerVADC0_G0_01 (void)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G0_01);
 800644c:	2013      	movs	r0, #19
 800644e:	f000 faab 	bl	80069a8 <BSP_IntHandler>
}
 8006452:	bf00      	nop
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop

08006458 <BSP_IntHandlerVADC0_G0_02>:
void BSP_IntHandlerVADC0_G0_02 (void)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G0_02);
 800645c:	2014      	movs	r0, #20
 800645e:	f000 faa3 	bl	80069a8 <BSP_IntHandler>
}
 8006462:	bf00      	nop
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop

08006468 <BSP_IntHandlerVADC0_G0_03>:
void BSP_IntHandlerVADC0_G0_03 (void)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G0_03);
 800646c:	2015      	movs	r0, #21
 800646e:	f000 fa9b 	bl	80069a8 <BSP_IntHandler>
}
 8006472:	bf00      	nop
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop

08006478 <BSP_IntHandlerVADC0_G1_00>:
void BSP_IntHandlerVADC0_G1_00 (void)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G1_00);
 800647c:	2016      	movs	r0, #22
 800647e:	f000 fa93 	bl	80069a8 <BSP_IntHandler>
}
 8006482:	bf00      	nop
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop

08006488 <BSP_IntHandlerVADC0_G1_01>:
void BSP_IntHandlerVADC0_G1_01 (void)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G1_01);
 800648c:	2017      	movs	r0, #23
 800648e:	f000 fa8b 	bl	80069a8 <BSP_IntHandler>
}
 8006492:	bf00      	nop
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop

08006498 <BSP_IntHandlerVADC0_G1_02>:
void BSP_IntHandlerVADC0_G1_02 (void)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G1_02);
 800649c:	2018      	movs	r0, #24
 800649e:	f000 fa83 	bl	80069a8 <BSP_IntHandler>
}
 80064a2:	bf00      	nop
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop

080064a8 <BSP_IntHandlerVADC0_G1_03>:
void BSP_IntHandlerVADC0_G1_03 (void)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G1_03);
 80064ac:	2019      	movs	r0, #25
 80064ae:	f000 fa7b 	bl	80069a8 <BSP_IntHandler>
}
 80064b2:	bf00      	nop
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop

080064b8 <BSP_IntHandlerVADC0_G2_00>:
void BSP_IntHandlerVADC0_G2_00 (void)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G2_00);
 80064bc:	201a      	movs	r0, #26
 80064be:	f000 fa73 	bl	80069a8 <BSP_IntHandler>
}
 80064c2:	bf00      	nop
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop

080064c8 <BSP_IntHandlerVADC0_G2_01>:
void BSP_IntHandlerVADC0_G2_01 (void)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G2_01);
 80064cc:	201b      	movs	r0, #27
 80064ce:	f000 fa6b 	bl	80069a8 <BSP_IntHandler>
}
 80064d2:	bf00      	nop
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop

080064d8 <BSP_IntHandlerVADC0_G2_02>:
void BSP_IntHandlerVADC0_G2_02 (void)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G2_02);
 80064dc:	201c      	movs	r0, #28
 80064de:	f000 fa63 	bl	80069a8 <BSP_IntHandler>
}
 80064e2:	bf00      	nop
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop

080064e8 <BSP_IntHandlerVADC0_G2_03>:
void BSP_IntHandlerVADC0_G2_03 (void)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G2_03);
 80064ec:	201d      	movs	r0, #29
 80064ee:	f000 fa5b 	bl	80069a8 <BSP_IntHandler>
}
 80064f2:	bf00      	nop
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop

080064f8 <BSP_IntHandlerVADC0_G3_00>:
void BSP_IntHandlerVADC0_G3_00 (void)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G3_00);
 80064fc:	201e      	movs	r0, #30
 80064fe:	f000 fa53 	bl	80069a8 <BSP_IntHandler>
}
 8006502:	bf00      	nop
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop

08006508 <BSP_IntHandlerVADC0_G3_01>:
void BSP_IntHandlerVADC0_G3_01 (void)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G3_01);
 800650c:	201f      	movs	r0, #31
 800650e:	f000 fa4b 	bl	80069a8 <BSP_IntHandler>
}
 8006512:	bf00      	nop
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop

08006518 <BSP_IntHandlerVADC0_G3_02>:
void BSP_IntHandlerVADC0_G3_02 (void)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G3_02);
 800651c:	2020      	movs	r0, #32
 800651e:	f000 fa43 	bl	80069a8 <BSP_IntHandler>
}
 8006522:	bf00      	nop
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop

08006528 <BSP_IntHandlerVADC0_G3_03>:
void BSP_IntHandlerVADC0_G3_03 (void)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G3_03);
 800652c:	2021      	movs	r0, #33	; 0x21
 800652e:	f000 fa3b 	bl	80069a8 <BSP_IntHandler>
}
 8006532:	bf00      	nop
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop

08006538 <BSP_IntHandlerDSD0_00>:
void BSP_IntHandlerDSD0_00 (void)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_00);
 800653c:	2022      	movs	r0, #34	; 0x22
 800653e:	f000 fa33 	bl	80069a8 <BSP_IntHandler>
}
 8006542:	bf00      	nop
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop

08006548 <BSP_IntHandlerDSD0_01>:
void BSP_IntHandlerDSD0_01 (void)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_01);
 800654c:	2023      	movs	r0, #35	; 0x23
 800654e:	f000 fa2b 	bl	80069a8 <BSP_IntHandler>
}
 8006552:	bf00      	nop
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop

08006558 <BSP_IntHandlerDSD0_02>:
void BSP_IntHandlerDSD0_02 (void)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_02);
 800655c:	2024      	movs	r0, #36	; 0x24
 800655e:	f000 fa23 	bl	80069a8 <BSP_IntHandler>
}
 8006562:	bf00      	nop
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop

08006568 <BSP_IntHandlerDSD0_03>:
void BSP_IntHandlerDSD0_03 (void)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_03);
 800656c:	2025      	movs	r0, #37	; 0x25
 800656e:	f000 fa1b 	bl	80069a8 <BSP_IntHandler>
}
 8006572:	bf00      	nop
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop

08006578 <BSP_IntHandlerDSD0_04>:
void BSP_IntHandlerDSD0_04 (void)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_04);
 800657c:	2026      	movs	r0, #38	; 0x26
 800657e:	f000 fa13 	bl	80069a8 <BSP_IntHandler>
}
 8006582:	bf00      	nop
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop

08006588 <BSP_IntHandlerDSD0_05>:
void BSP_IntHandlerDSD0_05 (void)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_05);
 800658c:	2027      	movs	r0, #39	; 0x27
 800658e:	f000 fa0b 	bl	80069a8 <BSP_IntHandler>
}
 8006592:	bf00      	nop
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop

08006598 <BSP_IntHandlerDSD0_06>:
void BSP_IntHandlerDSD0_06 (void)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_06);
 800659c:	2028      	movs	r0, #40	; 0x28
 800659e:	f000 fa03 	bl	80069a8 <BSP_IntHandler>
}
 80065a2:	bf00      	nop
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop

080065a8 <BSP_IntHandlerDSD0_07>:
void BSP_IntHandlerDSD0_07 (void)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_07);
 80065ac:	2029      	movs	r0, #41	; 0x29
 80065ae:	f000 f9fb 	bl	80069a8 <BSP_IntHandler>
}
 80065b2:	bf00      	nop
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop

080065b8 <BSP_IntHandlerDAC0_00>:
void BSP_IntHandlerDAC0_00 (void)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DAC0_00);
 80065bc:	202a      	movs	r0, #42	; 0x2a
 80065be:	f000 f9f3 	bl	80069a8 <BSP_IntHandler>
}
 80065c2:	bf00      	nop
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop

080065c8 <BSP_IntHandlerDAC0_01>:
void BSP_IntHandlerDAC0_01 (void)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DAC0_01);
 80065cc:	202b      	movs	r0, #43	; 0x2b
 80065ce:	f000 f9eb 	bl	80069a8 <BSP_IntHandler>
}
 80065d2:	bf00      	nop
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop

080065d8 <BSP_IntHandlerCCU40_00>:
void BSP_IntHandlerCCU40_00 (void)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU40_00);
 80065dc:	202c      	movs	r0, #44	; 0x2c
 80065de:	f000 f9e3 	bl	80069a8 <BSP_IntHandler>
}
 80065e2:	bf00      	nop
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop

080065e8 <BSP_IntHandlerCCU40_01>:
void BSP_IntHandlerCCU40_01 (void)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU40_01);
 80065ec:	202d      	movs	r0, #45	; 0x2d
 80065ee:	f000 f9db 	bl	80069a8 <BSP_IntHandler>
}
 80065f2:	bf00      	nop
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop

080065f8 <BSP_IntHandlerCCU40_02>:
void BSP_IntHandlerCCU40_02 (void)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU40_02);
 80065fc:	202e      	movs	r0, #46	; 0x2e
 80065fe:	f000 f9d3 	bl	80069a8 <BSP_IntHandler>
}
 8006602:	bf00      	nop
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop

08006608 <BSP_IntHandlerCCU40_03>:
void BSP_IntHandlerCCU40_03 (void)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU40_03);
 800660c:	202f      	movs	r0, #47	; 0x2f
 800660e:	f000 f9cb 	bl	80069a8 <BSP_IntHandler>
}
 8006612:	bf00      	nop
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop

08006618 <BSP_IntHandlerCCU41_00>:
void BSP_IntHandlerCCU41_00 (void)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU41_00);
 800661c:	2030      	movs	r0, #48	; 0x30
 800661e:	f000 f9c3 	bl	80069a8 <BSP_IntHandler>
}
 8006622:	bf00      	nop
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop

08006628 <BSP_IntHandlerCCU41_01>:
void BSP_IntHandlerCCU41_01 (void)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU41_01);
 800662c:	2031      	movs	r0, #49	; 0x31
 800662e:	f000 f9bb 	bl	80069a8 <BSP_IntHandler>
}
 8006632:	bf00      	nop
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop

08006638 <BSP_IntHandlerCCU41_02>:
void BSP_IntHandlerCCU41_02 (void)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU41_02);
 800663c:	2032      	movs	r0, #50	; 0x32
 800663e:	f000 f9b3 	bl	80069a8 <BSP_IntHandler>
}
 8006642:	bf00      	nop
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop

08006648 <BSP_IntHandlerCCU41_03>:
void BSP_IntHandlerCCU41_03 (void)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU41_03);
 800664c:	2033      	movs	r0, #51	; 0x33
 800664e:	f000 f9ab 	bl	80069a8 <BSP_IntHandler>
}
 8006652:	bf00      	nop
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop

08006658 <BSP_IntHandlerCCU42_00>:
void BSP_IntHandlerCCU42_00 (void)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU42_00);
 800665c:	2034      	movs	r0, #52	; 0x34
 800665e:	f000 f9a3 	bl	80069a8 <BSP_IntHandler>
}
 8006662:	bf00      	nop
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop

08006668 <BSP_IntHandlerCCU42_01>:
void BSP_IntHandlerCCU42_01 (void)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU42_01);
 800666c:	2035      	movs	r0, #53	; 0x35
 800666e:	f000 f99b 	bl	80069a8 <BSP_IntHandler>
}
 8006672:	bf00      	nop
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop

08006678 <BSP_IntHandlerCCU42_02>:
void BSP_IntHandlerCCU42_02 (void)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU42_02);
 800667c:	2036      	movs	r0, #54	; 0x36
 800667e:	f000 f993 	bl	80069a8 <BSP_IntHandler>
}
 8006682:	bf00      	nop
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop

08006688 <BSP_IntHandlerCCU42_03>:
void BSP_IntHandlerCCU42_03 (void)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU42_03);
 800668c:	2037      	movs	r0, #55	; 0x37
 800668e:	f000 f98b 	bl	80069a8 <BSP_IntHandler>
}
 8006692:	bf00      	nop
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop

08006698 <BSP_IntHandlerCCU43_00>:
void BSP_IntHandlerCCU43_00 (void)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU43_00);
 800669c:	2038      	movs	r0, #56	; 0x38
 800669e:	f000 f983 	bl	80069a8 <BSP_IntHandler>
}
 80066a2:	bf00      	nop
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop

080066a8 <BSP_IntHandlerCCU43_01>:
void BSP_IntHandlerCCU43_01 (void)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU43_01);
 80066ac:	2039      	movs	r0, #57	; 0x39
 80066ae:	f000 f97b 	bl	80069a8 <BSP_IntHandler>
}
 80066b2:	bf00      	nop
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop

080066b8 <BSP_IntHandlerCCU43_02>:
void BSP_IntHandlerCCU43_02 (void)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU43_02);
 80066bc:	203a      	movs	r0, #58	; 0x3a
 80066be:	f000 f973 	bl	80069a8 <BSP_IntHandler>
}
 80066c2:	bf00      	nop
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop

080066c8 <BSP_IntHandlerCCU43_03>:
void BSP_IntHandlerCCU43_03 (void)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU43_03);
 80066cc:	203b      	movs	r0, #59	; 0x3b
 80066ce:	f000 f96b 	bl	80069a8 <BSP_IntHandler>
}
 80066d2:	bf00      	nop
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop

080066d8 <BSP_IntHandlerCCU80_00>:
void BSP_IntHandlerCCU80_00 (void)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU80_00);
 80066dc:	203c      	movs	r0, #60	; 0x3c
 80066de:	f000 f963 	bl	80069a8 <BSP_IntHandler>
}
 80066e2:	bf00      	nop
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop

080066e8 <BSP_IntHandlerCCU80_01>:
void BSP_IntHandlerCCU80_01 (void)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU80_01);
 80066ec:	203d      	movs	r0, #61	; 0x3d
 80066ee:	f000 f95b 	bl	80069a8 <BSP_IntHandler>
}
 80066f2:	bf00      	nop
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop

080066f8 <BSP_IntHandlerCCU80_02>:
void BSP_IntHandlerCCU80_02 (void)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU80_02);
 80066fc:	203e      	movs	r0, #62	; 0x3e
 80066fe:	f000 f953 	bl	80069a8 <BSP_IntHandler>
}
 8006702:	bf00      	nop
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop

08006708 <BSP_IntHandlerCCU80_03>:
void BSP_IntHandlerCCU80_03 (void)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU80_03);
 800670c:	203f      	movs	r0, #63	; 0x3f
 800670e:	f000 f94b 	bl	80069a8 <BSP_IntHandler>
}
 8006712:	bf00      	nop
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop

08006718 <BSP_IntHandlerCCU81_00>:
void BSP_IntHandlerCCU81_00 (void)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU81_00);
 800671c:	2040      	movs	r0, #64	; 0x40
 800671e:	f000 f943 	bl	80069a8 <BSP_IntHandler>
}
 8006722:	bf00      	nop
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop

08006728 <BSP_IntHandlerCCU81_01>:
void BSP_IntHandlerCCU81_01 (void)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU81_01);
 800672c:	2041      	movs	r0, #65	; 0x41
 800672e:	f000 f93b 	bl	80069a8 <BSP_IntHandler>
}
 8006732:	bf00      	nop
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop

08006738 <BSP_IntHandlerCCU81_02>:
void BSP_IntHandlerCCU81_02 (void)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU81_02);
 800673c:	2042      	movs	r0, #66	; 0x42
 800673e:	f000 f933 	bl	80069a8 <BSP_IntHandler>
}
 8006742:	bf00      	nop
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop

08006748 <BSP_IntHandlerCCU81_03>:
void BSP_IntHandlerCCU81_03 (void)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU81_03);
 800674c:	2043      	movs	r0, #67	; 0x43
 800674e:	f000 f92b 	bl	80069a8 <BSP_IntHandler>
}
 8006752:	bf00      	nop
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop

08006758 <BSP_IntHandlerPOSIF0_00>:
void BSP_IntHandlerPOSIF0_00 (void)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_POSIF0_00);
 800675c:	2044      	movs	r0, #68	; 0x44
 800675e:	f000 f923 	bl	80069a8 <BSP_IntHandler>
}
 8006762:	bf00      	nop
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop

08006768 <BSP_IntHandlerPOSIF0_01>:
void BSP_IntHandlerPOSIF0_01 (void)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_POSIF0_01);
 800676c:	2045      	movs	r0, #69	; 0x45
 800676e:	f000 f91b 	bl	80069a8 <BSP_IntHandler>
}
 8006772:	bf00      	nop
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop

08006778 <BSP_IntHandlerPOSIF1_00>:
void BSP_IntHandlerPOSIF1_00 (void)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_POSIF1_00);
 800677c:	2046      	movs	r0, #70	; 0x46
 800677e:	f000 f913 	bl	80069a8 <BSP_IntHandler>
}
 8006782:	bf00      	nop
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop

08006788 <BSP_IntHandlerPOSIF1_01>:
void BSP_IntHandlerPOSIF1_01 (void)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_POSIF1_01);
 800678c:	2047      	movs	r0, #71	; 0x47
 800678e:	f000 f90b 	bl	80069a8 <BSP_IntHandler>
}
 8006792:	bf00      	nop
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop

08006798 <BSP_IntHandlerCAN0_00>:
void BSP_IntHandlerCAN0_00 (void)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_00);
 800679c:	204c      	movs	r0, #76	; 0x4c
 800679e:	f000 f903 	bl	80069a8 <BSP_IntHandler>
}
 80067a2:	bf00      	nop
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop

080067a8 <BSP_IntHandlerCAN0_01>:
void BSP_IntHandlerCAN0_01 (void)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_01);
 80067ac:	204d      	movs	r0, #77	; 0x4d
 80067ae:	f000 f8fb 	bl	80069a8 <BSP_IntHandler>
}
 80067b2:	bf00      	nop
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop

080067b8 <BSP_IntHandlerCAN0_02>:
void BSP_IntHandlerCAN0_02 (void)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_02);
 80067bc:	204e      	movs	r0, #78	; 0x4e
 80067be:	f000 f8f3 	bl	80069a8 <BSP_IntHandler>
}
 80067c2:	bf00      	nop
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop

080067c8 <BSP_IntHandlerCAN0_03>:
void BSP_IntHandlerCAN0_03 (void)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_03);
 80067cc:	204f      	movs	r0, #79	; 0x4f
 80067ce:	f000 f8eb 	bl	80069a8 <BSP_IntHandler>
}
 80067d2:	bf00      	nop
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop

080067d8 <BSP_IntHandlerCAN0_04>:
void BSP_IntHandlerCAN0_04 (void)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_04);
 80067dc:	2050      	movs	r0, #80	; 0x50
 80067de:	f000 f8e3 	bl	80069a8 <BSP_IntHandler>
}
 80067e2:	bf00      	nop
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop

080067e8 <BSP_IntHandlerCAN0_05>:
void BSP_IntHandlerCAN0_05 (void)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_05);
 80067ec:	2051      	movs	r0, #81	; 0x51
 80067ee:	f000 f8db 	bl	80069a8 <BSP_IntHandler>
}
 80067f2:	bf00      	nop
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop

080067f8 <BSP_IntHandlerCAN0_06>:
void BSP_IntHandlerCAN0_06 (void)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_06);
 80067fc:	2052      	movs	r0, #82	; 0x52
 80067fe:	f000 f8d3 	bl	80069a8 <BSP_IntHandler>
}
 8006802:	bf00      	nop
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop

08006808 <BSP_IntHandlerCAN0_07>:
void BSP_IntHandlerCAN0_07 (void)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_07);
 800680c:	2053      	movs	r0, #83	; 0x53
 800680e:	f000 f8cb 	bl	80069a8 <BSP_IntHandler>
}
 8006812:	bf00      	nop
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop

08006818 <BSP_IntHandlerUSIC0_00>:
void BSP_IntHandlerUSIC0_00 (void)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC0_00);
 800681c:	2054      	movs	r0, #84	; 0x54
 800681e:	f000 f8c3 	bl	80069a8 <BSP_IntHandler>
}
 8006822:	bf00      	nop
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop

08006828 <BSP_IntHandlerUSIC0_01>:
void BSP_IntHandlerUSIC0_01 (void)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC0_01);
 800682c:	2055      	movs	r0, #85	; 0x55
 800682e:	f000 f8bb 	bl	80069a8 <BSP_IntHandler>
}
 8006832:	bf00      	nop
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop

08006838 <BSP_IntHandlerUSIC0_02>:
void BSP_IntHandlerUSIC0_02 (void)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC0_02);
 800683c:	2056      	movs	r0, #86	; 0x56
 800683e:	f000 f8b3 	bl	80069a8 <BSP_IntHandler>
}
 8006842:	bf00      	nop
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop

08006848 <BSP_IntHandlerUSIC0_03>:
void BSP_IntHandlerUSIC0_03 (void)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC0_03);
 800684c:	2057      	movs	r0, #87	; 0x57
 800684e:	f000 f8ab 	bl	80069a8 <BSP_IntHandler>
}
 8006852:	bf00      	nop
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop

08006858 <BSP_IntHandlerUSIC0_04>:
void BSP_IntHandlerUSIC0_04 (void)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC0_04);
 800685c:	2058      	movs	r0, #88	; 0x58
 800685e:	f000 f8a3 	bl	80069a8 <BSP_IntHandler>
}
 8006862:	bf00      	nop
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop

08006868 <BSP_IntHandlerUSIC0_05>:
void BSP_IntHandlerUSIC0_05 (void)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC0_05);
 800686c:	2059      	movs	r0, #89	; 0x59
 800686e:	f000 f89b 	bl	80069a8 <BSP_IntHandler>
}
 8006872:	bf00      	nop
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop

08006878 <BSP_IntHandlerUSIC1_00>:
void BSP_IntHandlerUSIC1_00 (void)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC1_00);
 800687c:	205a      	movs	r0, #90	; 0x5a
 800687e:	f000 f893 	bl	80069a8 <BSP_IntHandler>
}
 8006882:	bf00      	nop
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop

08006888 <BSP_IntHandlerUSIC1_01>:
void BSP_IntHandlerUSIC1_01 (void)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC1_01);
 800688c:	205b      	movs	r0, #91	; 0x5b
 800688e:	f000 f88b 	bl	80069a8 <BSP_IntHandler>
}
 8006892:	bf00      	nop
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop

08006898 <BSP_IntHandlerUSIC1_02>:
void BSP_IntHandlerUSIC1_02 (void)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC1_02);
 800689c:	205c      	movs	r0, #92	; 0x5c
 800689e:	f000 f883 	bl	80069a8 <BSP_IntHandler>
}
 80068a2:	bf00      	nop
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop

080068a8 <BSP_IntHandlerUSIC1_03>:
void BSP_IntHandlerUSIC1_03 (void)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC1_03);
 80068ac:	205d      	movs	r0, #93	; 0x5d
 80068ae:	f000 f87b 	bl	80069a8 <BSP_IntHandler>
}
 80068b2:	bf00      	nop
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop

080068b8 <BSP_IntHandlerUSIC1_04>:
void BSP_IntHandlerUSIC1_04 (void)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC1_04);
 80068bc:	205e      	movs	r0, #94	; 0x5e
 80068be:	f000 f873 	bl	80069a8 <BSP_IntHandler>
}
 80068c2:	bf00      	nop
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop

080068c8 <BSP_IntHandlerUSIC1_05>:
void BSP_IntHandlerUSIC1_05 (void)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC1_05);
 80068cc:	205f      	movs	r0, #95	; 0x5f
 80068ce:	f000 f86b 	bl	80069a8 <BSP_IntHandler>
}
 80068d2:	bf00      	nop
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop

080068d8 <BSP_IntHandlerUSIC2_00>:
void BSP_IntHandlerUSIC2_00 (void)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC2_00);
 80068dc:	2060      	movs	r0, #96	; 0x60
 80068de:	f000 f863 	bl	80069a8 <BSP_IntHandler>
}
 80068e2:	bf00      	nop
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop

080068e8 <BSP_IntHandlerUSIC2_01>:
void BSP_IntHandlerUSIC2_01 (void)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC2_01);
 80068ec:	2061      	movs	r0, #97	; 0x61
 80068ee:	f000 f85b 	bl	80069a8 <BSP_IntHandler>
}
 80068f2:	bf00      	nop
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop

080068f8 <BSP_IntHandlerUSIC2_02>:
void BSP_IntHandlerUSIC2_02 (void)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC2_02);
 80068fc:	2062      	movs	r0, #98	; 0x62
 80068fe:	f000 f853 	bl	80069a8 <BSP_IntHandler>
}
 8006902:	bf00      	nop
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop

08006908 <BSP_IntHandlerUSIC2_03>:
void BSP_IntHandlerUSIC2_03 (void)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC2_03);
 800690c:	2063      	movs	r0, #99	; 0x63
 800690e:	f000 f84b 	bl	80069a8 <BSP_IntHandler>
}
 8006912:	bf00      	nop
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop

08006918 <BSP_IntHandlerUSIC2_04>:
void BSP_IntHandlerUSIC2_04 (void)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC2_04);
 800691c:	2064      	movs	r0, #100	; 0x64
 800691e:	f000 f843 	bl	80069a8 <BSP_IntHandler>
}
 8006922:	bf00      	nop
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop

08006928 <BSP_IntHandlerUSIC2_05>:
void BSP_IntHandlerUSIC2_05 (void)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC2_05);
 800692c:	2065      	movs	r0, #101	; 0x65
 800692e:	f000 f83b 	bl	80069a8 <BSP_IntHandler>
}
 8006932:	bf00      	nop
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop

08006938 <BSP_IntHandlerLEDTS0_00>:
void BSP_IntHandlerLEDTS0_00 (void)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_LEDTS0_00);
 800693c:	2066      	movs	r0, #102	; 0x66
 800693e:	f000 f833 	bl	80069a8 <BSP_IntHandler>
}
 8006942:	bf00      	nop
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop

08006948 <BSP_IntHandlerFCE0_00>:
void BSP_IntHandlerFCE0_00 (void)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_FCE0_00);
 800694c:	2068      	movs	r0, #104	; 0x68
 800694e:	f000 f82b 	bl	80069a8 <BSP_IntHandler>
}
 8006952:	bf00      	nop
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop

08006958 <BSP_IntHandlerGPDMA0_00>:
void BSP_IntHandlerGPDMA0_00 (void)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_GPDMA0_00);
 800695c:	2069      	movs	r0, #105	; 0x69
 800695e:	f000 f823 	bl	80069a8 <BSP_IntHandler>
}
 8006962:	bf00      	nop
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop

08006968 <BSP_IntHandlerSDMMC0_00>:
void BSP_IntHandlerSDMMC0_00 (void)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_SDMMC0_00);
 800696c:	206a      	movs	r0, #106	; 0x6a
 800696e:	f000 f81b 	bl	80069a8 <BSP_IntHandler>
}
 8006972:	bf00      	nop
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop

08006978 <BSP_IntHandlerUSB0_00>:
void BSP_IntHandlerUSB0_00 (void)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USB0_00);
 800697c:	206b      	movs	r0, #107	; 0x6b
 800697e:	f000 f813 	bl	80069a8 <BSP_IntHandler>
}
 8006982:	bf00      	nop
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop

08006988 <BSP_IntHandlerETH0_00>:
void BSP_IntHandlerETH0_00 (void)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ETH0_00);
 800698c:	206c      	movs	r0, #108	; 0x6c
 800698e:	f000 f80b 	bl	80069a8 <BSP_IntHandler>
}
 8006992:	bf00      	nop
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop

08006998 <BSP_IntHandlerGPDMA1_00>:
void BSP_IntHandlerGPDMA1_00 (void)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_GPDMA1_00);
 800699c:	206e      	movs	r0, #110	; 0x6e
 800699e:	f000 f803 	bl	80069a8 <BSP_IntHandler>
}
 80069a2:	bf00      	nop
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop

080069a8 <BSP_IntHandler>:
 * \params   int_id interrupt that will be handled
 * \returns  none
 * \brief    central interrupt handler
 */
static  void  BSP_IntHandler (CPU_DATA  int_id)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
	CPU_FNCT_VOID  isr;
	CPU_SR_ALLOC();
 80069b0:	2300      	movs	r3, #0
 80069b2:	60fb      	str	r3, [r7, #12]

	/* tell the OS that we are starting an ISR */
	CPU_CRITICAL_ENTER();
 80069b4:	f7f9 fc94 	bl	80002e0 <CPU_SR_Save>
 80069b8:	60f8      	str	r0, [r7, #12]
	OSIntEnter();
 80069ba:	f7fc fbbd 	bl	8003138 <OSIntEnter>
	CPU_CRITICAL_EXIT();
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f7f9 fc92 	bl	80002e8 <CPU_SR_Restore>

	if (int_id < BSP_INT_ID_MAX) {
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2b6f      	cmp	r3, #111	; 0x6f
 80069c8:	d809      	bhi.n	80069de <BSP_IntHandler+0x36>
		isr = BSP_IntVectTbl[int_id];
 80069ca:	4a08      	ldr	r2, [pc, #32]	; (80069ec <BSP_IntHandler+0x44>)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069d2:	60bb      	str	r3, [r7, #8]
		if (isr != (CPU_FNCT_VOID) 0) {
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d001      	beq.n	80069de <BSP_IntHandler+0x36>
			isr();
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	4798      	blx	r3
		}
	}
	/* tell the OS that we are leaving an ISR */
	OSIntExit();
 80069de:	f7fc fbc7 	bl	8003170 <OSIntExit>
}
 80069e2:	bf00      	nop
 80069e4:	3710      	adds	r7, #16
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	20001cc8 	.word	0x20001cc8

080069f0 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	460b      	mov	r3, r1
 80069fa:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 80069fc:	78fb      	ldrb	r3, [r7, #3]
 80069fe:	2201      	movs	r2, #1
 8006a00:	409a      	lsls	r2, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	605a      	str	r2, [r3, #4]
}
 8006a06:	bf00      	nop
 8006a08:	370c      	adds	r7, #12
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bc80      	pop	{r7}
 8006a0e:	4770      	bx	lr

08006a10 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	460b      	mov	r3, r1
 8006a1a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8006a1c:	78fb      	ldrb	r3, [r7, #3]
 8006a1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006a22:	409a      	lsls	r2, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	605a      	str	r2, [r3, #4]
}
 8006a28:	bf00      	nop
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bc80      	pop	{r7}
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop

08006a34 <BSP_GPIO_Init>:
/**
 * @brief  Initialize UART1 CH1 - Tx=P0.1, Rx=P0.0, 9600-8N1
 * @return true on success, false otherwise
 */
_Bool BSP_GPIO_Init (void)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	af00      	add	r7, sp, #0

	XMC_GPIO_Init(SERVO_CCU4, &led_config);
 8006a38:	4a0d      	ldr	r2, [pc, #52]	; (8006a70 <BSP_GPIO_Init+0x3c>)
 8006a3a:	2103      	movs	r1, #3
 8006a3c:	480d      	ldr	r0, [pc, #52]	; (8006a74 <BSP_GPIO_Init+0x40>)
 8006a3e:	f000 ffa3 	bl	8007988 <XMC_GPIO_Init>

	XMC_GPIO_SetMode(ENDSTOP1,XMC_GPIO_MODE_INPUT_PULL_DOWN);
 8006a42:	2208      	movs	r2, #8
 8006a44:	210f      	movs	r1, #15
 8006a46:	480b      	ldr	r0, [pc, #44]	; (8006a74 <BSP_GPIO_Init+0x40>)
 8006a48:	f000 ff5e 	bl	8007908 <XMC_GPIO_SetMode>
	XMC_GPIO_SetMode(ENDSTOP2,XMC_GPIO_MODE_INPUT_PULL_DOWN);
 8006a4c:	2208      	movs	r2, #8
 8006a4e:	210d      	movs	r1, #13
 8006a50:	4808      	ldr	r0, [pc, #32]	; (8006a74 <BSP_GPIO_Init+0x40>)
 8006a52:	f000 ff59 	bl	8007908 <XMC_GPIO_SetMode>
	XMC_GPIO_SetMode(ENDSTOP3,XMC_GPIO_MODE_INPUT_PULL_DOWN);
 8006a56:	2208      	movs	r2, #8
 8006a58:	210e      	movs	r1, #14
 8006a5a:	4806      	ldr	r0, [pc, #24]	; (8006a74 <BSP_GPIO_Init+0x40>)
 8006a5c:	f000 ff54 	bl	8007908 <XMC_GPIO_SetMode>
	XMC_GPIO_SetMode(ENDSTOP4,XMC_GPIO_MODE_INPUT_PULL_DOWN);
 8006a60:	2208      	movs	r2, #8
 8006a62:	210c      	movs	r1, #12
 8006a64:	4803      	ldr	r0, [pc, #12]	; (8006a74 <BSP_GPIO_Init+0x40>)
 8006a66:	f000 ff4f 	bl	8007908 <XMC_GPIO_SetMode>


	return true;
 8006a6a:	2301      	movs	r3, #1
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	20000004 	.word	0x20000004
 8006a74:	48028100 	.word	0x48028100

08006a78 <BSP_SERVO_HIGH>:


_Bool BSP_SERVO_HIGH (void)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	af00      	add	r7, sp, #0
	XMC_GPIO_SetOutputHigh(SERVO_CCU4);
 8006a7c:	2103      	movs	r1, #3
 8006a7e:	4803      	ldr	r0, [pc, #12]	; (8006a8c <BSP_SERVO_HIGH+0x14>)
 8006a80:	f7ff ffb6 	bl	80069f0 <XMC_GPIO_SetOutputHigh>
	return 0;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	48028100 	.word	0x48028100

08006a90 <BSP_SERVO_LOW>:

_Bool BSP_SERVO_LOW (void)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	af00      	add	r7, sp, #0
	XMC_GPIO_SetOutputLow(SERVO_CCU4);
 8006a94:	2103      	movs	r1, #3
 8006a96:	4803      	ldr	r0, [pc, #12]	; (8006aa4 <BSP_SERVO_LOW+0x14>)
 8006a98:	f7ff ffba 	bl	8006a10 <XMC_GPIO_SetOutputLow>
	return 0;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	48028100 	.word	0x48028100

08006aa8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	4603      	mov	r3, r0
 8006ab0:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8006ab2:	4908      	ldr	r1, [pc, #32]	; (8006ad4 <NVIC_EnableIRQ+0x2c>)
 8006ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ab8:	095b      	lsrs	r3, r3, #5
 8006aba:	79fa      	ldrb	r2, [r7, #7]
 8006abc:	f002 021f 	and.w	r2, r2, #31
 8006ac0:	2001      	movs	r0, #1
 8006ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8006ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006aca:	bf00      	nop
 8006acc:	370c      	adds	r7, #12
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bc80      	pop	{r7}
 8006ad2:	4770      	bx	lr
 8006ad4:	e000e100 	.word	0xe000e100

08006ad8 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	70fb      	strb	r3, [r7, #3]
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8006ae8:	78f8      	ldrb	r0, [r7, #3]
 8006aea:	78fb      	ldrb	r3, [r7, #3]
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	3306      	adds	r3, #6
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4413      	add	r3, r2
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8006afa:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8006afc:	431a      	orrs	r2, r3
 8006afe:	6879      	ldr	r1, [r7, #4]
 8006b00:	1d83      	adds	r3, r0, #6
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	440b      	add	r3, r1
 8006b06:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8006b08:	bf00      	nop
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bc80      	pop	{r7}
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop

08006b14 <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b20:	f023 030f 	bic.w	r3, r3, #15
 8006b24:	f043 0202 	orr.w	r2, r3, #2
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8006b2c:	bf00      	nop
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bc80      	pop	{r7}
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop

08006b38 <XMC_UART_CH_SetInterruptNodePointer>:
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                         const uint8_t service_request)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	460b      	mov	r3, r1
 8006b42:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetInterruptNodePointer(channel, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL, 
 8006b44:	78fb      	ldrb	r3, [r7, #3]
 8006b46:	461a      	mov	r2, r3
 8006b48:	2110      	movs	r1, #16
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 fbd8 	bl	8007300 <XMC_USIC_CH_SetInterruptNodePointer>
                                              (uint32_t)service_request);
}
 8006b50:	bf00      	nop
 8006b52:	3708      	adds	r7, #8
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <XMC_UART_CH_SetInputSource>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_EnableInputInversion() \n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_UART_CH_INPUT_t input, const uint8_t source)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	460b      	mov	r3, r1
 8006b62:	70fb      	strb	r3, [r7, #3]
 8006b64:	4613      	mov	r3, r2
 8006b66:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = 0U;
 8006b68:	78fb      	ldrb	r3, [r7, #3]
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	3306      	adds	r3, #6
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	4413      	add	r3, r2
 8006b72:	2200      	movs	r2, #0
 8006b74:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 8006b76:	78ba      	ldrb	r2, [r7, #2]
 8006b78:	78fb      	ldrb	r3, [r7, #3]
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f7ff ffab 	bl	8006ad8 <XMC_USIC_CH_SetInputSource>
}
 8006b82:	bf00      	nop
 8006b84:	3708      	adds	r7, #8
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop

08006b8c <BSP_UART_Init>:
/**
 * @brief  Initialize UART1 CH1 - Tx=P0.1, Rx=P0.0, 9600-8N1
 * @return true on success, false otherwise
 */
_Bool BSP_UART_Init (void)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	af00      	add	r7, sp, #0

	XMC_UART_CH_Init (XMC_UART1_CH1, &uart_config);
 8006b90:	4917      	ldr	r1, [pc, #92]	; (8006bf0 <BSP_UART_Init+0x64>)
 8006b92:	4818      	ldr	r0, [pc, #96]	; (8006bf4 <BSP_UART_Init+0x68>)
 8006b94:	f000 fc60 	bl	8007458 <XMC_UART_CH_Init>
	XMC_UART_CH_Init (XMC_UART1_CH0, &uart_config);
 8006b98:	4915      	ldr	r1, [pc, #84]	; (8006bf0 <BSP_UART_Init+0x64>)
 8006b9a:	4817      	ldr	r0, [pc, #92]	; (8006bf8 <BSP_UART_Init+0x6c>)
 8006b9c:	f000 fc5c 	bl	8007458 <XMC_UART_CH_Init>
	XMC_UART_CH_SetInputSource (XMC_UART1_CH1, XMC_UART_CH_INPUT_RXD, 
 8006ba0:	2203      	movs	r2, #3
 8006ba2:	2100      	movs	r1, #0
 8006ba4:	4813      	ldr	r0, [pc, #76]	; (8006bf4 <BSP_UART_Init+0x68>)
 8006ba6:	f7ff ffd7 	bl	8006b58 <XMC_UART_CH_SetInputSource>
	                            USIC1_C1_DX0_P0_0);

	XMC_UART_CH_SetInterruptNodePointer	(XMC_UART1_CH1, 0) ;
 8006baa:	2100      	movs	r1, #0
 8006bac:	4811      	ldr	r0, [pc, #68]	; (8006bf4 <BSP_UART_Init+0x68>)
 8006bae:	f7ff ffc3 	bl	8006b38 <XMC_UART_CH_SetInterruptNodePointer>
	XMC_UART_CH_EnableEvent (XMC_UART1_CH1, XMC_UART_CH_EVENT_STANDARD_RECEIVE);
 8006bb2:	4912      	ldr	r1, [pc, #72]	; (8006bfc <BSP_UART_Init+0x70>)
 8006bb4:	480f      	ldr	r0, [pc, #60]	; (8006bf4 <BSP_UART_Init+0x68>)
 8006bb6:	f000 fce5 	bl	8007584 <XMC_UART_CH_EnableEvent>
	XMC_UART_CH_EnableEvent (XMC_UART1_CH1, 
 8006bba:	f04f 2180 	mov.w	r1, #2147516416	; 0x80008000
 8006bbe:	480d      	ldr	r0, [pc, #52]	; (8006bf4 <BSP_UART_Init+0x68>)
 8006bc0:	f000 fce0 	bl	8007584 <XMC_UART_CH_EnableEvent>
	                         XMC_UART_CH_EVENT_ALTERNATIVE_RECEIVE);
	NVIC_EnableIRQ (USIC1_0_IRQn);
 8006bc4:	205a      	movs	r0, #90	; 0x5a
 8006bc6:	f7ff ff6f 	bl	8006aa8 <NVIC_EnableIRQ>

	XMC_UART_CH_Start (XMC_UART1_CH1);
 8006bca:	480a      	ldr	r0, [pc, #40]	; (8006bf4 <BSP_UART_Init+0x68>)
 8006bcc:	f7ff ffa2 	bl	8006b14 <XMC_UART_CH_Start>
	XMC_UART_CH_Start (XMC_UART1_CH0);
 8006bd0:	4809      	ldr	r0, [pc, #36]	; (8006bf8 <BSP_UART_Init+0x6c>)
 8006bd2:	f7ff ff9f 	bl	8006b14 <XMC_UART_CH_Start>

	XMC_GPIO_SetMode (UART_TX, XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT2);
 8006bd6:	2290      	movs	r2, #144	; 0x90
 8006bd8:	2101      	movs	r1, #1
 8006bda:	4809      	ldr	r0, [pc, #36]	; (8006c00 <BSP_UART_Init+0x74>)
 8006bdc:	f000 fe94 	bl	8007908 <XMC_GPIO_SetMode>
	XMC_GPIO_SetMode (UART_RX, XMC_GPIO_MODE_INPUT_TRISTATE);
 8006be0:	2200      	movs	r2, #0
 8006be2:	2100      	movs	r1, #0
 8006be4:	4806      	ldr	r0, [pc, #24]	; (8006c00 <BSP_UART_Init+0x74>)
 8006be6:	f000 fe8f 	bl	8007908 <XMC_GPIO_SetMode>

	return true;
 8006bea:	2301      	movs	r3, #1
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	bd80      	pop	{r7, pc}
 8006bf0:	20000010 	.word	0x20000010
 8006bf4:	48020200 	.word	0x48020200
 8006bf8:	48020000 	.word	0x48020000
 8006bfc:	80004000 	.word	0x80004000
 8006c00:	48028000 	.word	0x48028000

08006c04 <BSP_LowLevelInit>:
 * @note Problems with Branch prediction if accessing the flash via the cached
 *       memory interface. In this silicon(step A11), branch prediction has to
 *       be switched off by setting PCON.PBS = 1.
 */
void  BSP_LowLevelInit (void)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
	CPU_INT32U  reg_val;

	/* Disable Watchdog timer */
	DEF_BIT_CLR (BSP_REG_WDT_CTR, BSP_BIT_WDT_CTR_ENB);
 8006c0a:	4a0d      	ldr	r2, [pc, #52]	; (8006c40 <BSP_LowLevelInit+0x3c>)
 8006c0c:	4b0c      	ldr	r3, [pc, #48]	; (8006c40 <BSP_LowLevelInit+0x3c>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f023 0301 	bic.w	r3, r3, #1
 8006c14:	6013      	str	r3, [r2, #0]
	DEF_BIT_SET (BSP_REG_PREF_PCON, BSP_BIT_PREF_PCON_PBS);
 8006c16:	4a0b      	ldr	r2, [pc, #44]	; (8006c44 <BSP_LowLevelInit+0x40>)
 8006c18:	4b0a      	ldr	r3, [pc, #40]	; (8006c44 <BSP_LowLevelInit+0x40>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c20:	6013      	str	r3, [r2, #0]

	reg_val = BSP_REG_FLASH0_FCON;
 8006c22:	4b09      	ldr	r3, [pc, #36]	; (8006c48 <BSP_LowLevelInit+0x44>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	607b      	str	r3, [r7, #4]
	reg_val = 0x3;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	607b      	str	r3, [r7, #4]
	BSP_REG_FLASH0_FCON = reg_val;
 8006c2c:	4a06      	ldr	r2, [pc, #24]	; (8006c48 <BSP_LowLevelInit+0x44>)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6013      	str	r3, [r2, #0]

	BSP_SysInit();
 8006c32:	f000 f80b 	bl	8006c4c <BSP_SysInit>
}
 8006c36:	bf00      	nop
 8006c38:	3708      	adds	r7, #8
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	50008004 	.word	0x50008004
 8006c44:	58004000 	.word	0x58004000
 8006c48:	58002014 	.word	0x58002014

08006c4c <BSP_SysInit>:
 *       result in multiple changes of the K2-Divider to avoid big frequency
 *       changes. Between the update of two K2-divider values 6 cycles of fpll
 *       should be waited.
 */
void  BSP_SysInit (void)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
	CPU_INT32U  reg_to;
	CPU_INT32U  reg;

	/* Set VCO and PLL power saving mode to normal behavior */
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON0, (BSP_BIT_PLLCON0_VCOPWD |
 8006c52:	4a74      	ldr	r2, [pc, #464]	; (8006e24 <BSP_SysInit+0x1d8>)
 8006c54:	4b73      	ldr	r3, [pc, #460]	; (8006e24 <BSP_SysInit+0x1d8>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c5c:	f023 0302 	bic.w	r3, r3, #2
 8006c60:	6013      	str	r3, [r2, #0]
					   BSP_BIT_PLLCON0_PLLPWD));

	reg = BSP_REG_SCU_OSCHPCTRL;
 8006c62:	4b71      	ldr	r3, [pc, #452]	; (8006e28 <BSP_SysInit+0x1dc>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	603b      	str	r3, [r7, #0]
	/* Set Ext. Crystal mod; osc power saving isn't entered */
	DEF_BIT_CLR (reg, (BSP_BIT_OSCHPCTRL_MODE_MASK  |
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006c6e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006c72:	603b      	str	r3, [r7, #0]
			   BSP_BIT_OSCHPCTRL_OSCVAL_MASK));
	/* Cfg. foscref = fosc / (OSCVAL + 1) */
	DEF_BIT_SET (reg, BSP_BIT_OSCHPCTRL_OSCVAL);
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c7a:	603b      	str	r3, [r7, #0]
	BSP_REG_SCU_OSCHPCTRL = reg;
 8006c7c:	4a6a      	ldr	r2, [pc, #424]	; (8006e28 <BSP_SysInit+0x1dc>)
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	6013      	str	r3, [r2, #0]

	/* Set ext. osc as PLL input */
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON2, BSP_BIT_PLLCON2_PINSEL);
 8006c82:	4a6a      	ldr	r2, [pc, #424]	; (8006e2c <BSP_SysInit+0x1e0>)
 8006c84:	4b69      	ldr	r3, [pc, #420]	; (8006e2c <BSP_SysInit+0x1e0>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f023 0301 	bic.w	r3, r3, #1
 8006c8c:	6013      	str	r3, [r2, #0]
	/* Restart osc watchdog of the PLL */
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_OSCRES);
 8006c8e:	4a65      	ldr	r2, [pc, #404]	; (8006e24 <BSP_SysInit+0x1d8>)
 8006c90:	4b64      	ldr	r3, [pc, #400]	; (8006e24 <BSP_SysInit+0x1d8>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006c98:	6013      	str	r3, [r2, #0]
	/* Wait for stable OSC frequency */
	reg_to = BSP_REG_VAL_TO;
 8006c9a:	4b65      	ldr	r3, [pc, #404]	; (8006e30 <BSP_SysInit+0x1e4>)
 8006c9c:	607b      	str	r3, [r7, #4]
	while ( (DEF_BIT_IS_CLR (BSP_REG_SCU_PLLSTAT, (BSP_BIT_PLLSTAT_PLLLV |
 8006c9e:	e002      	b.n	8006ca6 <BSP_SysInit+0x5a>
						       BSP_BIT_PLLSTAT_PLLHV |
						       BSP_BIT_PLLSTAT_PLLSP))) &
		(reg_to > 0u)) {
		reg_to--;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	607b      	str	r3, [r7, #4]
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON2, BSP_BIT_PLLCON2_PINSEL);
	/* Restart osc watchdog of the PLL */
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_OSCRES);
	/* Wait for stable OSC frequency */
	reg_to = BSP_REG_VAL_TO;
	while ( (DEF_BIT_IS_CLR (BSP_REG_SCU_PLLSTAT, (BSP_BIT_PLLSTAT_PLLLV |
 8006ca6:	4b63      	ldr	r3, [pc, #396]	; (8006e34 <BSP_SysInit+0x1e8>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d101      	bne.n	8006cb6 <BSP_SysInit+0x6a>
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e000      	b.n	8006cb8 <BSP_SysInit+0x6c>
 8006cb6:	2300      	movs	r3, #0
						       BSP_BIT_PLLSTAT_PLLHV |
						       BSP_BIT_PLLSTAT_PLLSP))) &
		(reg_to > 0u)) {
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	2a00      	cmp	r2, #0
 8006cbc:	bf14      	ite	ne
 8006cbe:	2201      	movne	r2, #1
 8006cc0:	2200      	moveq	r2, #0
 8006cc2:	b2d2      	uxtb	r2, r2
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_OSCRES);
	/* Wait for stable OSC frequency */
	reg_to = BSP_REG_VAL_TO;
	while ( (DEF_BIT_IS_CLR (BSP_REG_SCU_PLLSTAT, (BSP_BIT_PLLSTAT_PLLLV |
						       BSP_BIT_PLLSTAT_PLLHV |
						       BSP_BIT_PLLSTAT_PLLSP))) &
 8006cc4:	4013      	ands	r3, r2
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON2, BSP_BIT_PLLCON2_PINSEL);
	/* Restart osc watchdog of the PLL */
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_OSCRES);
	/* Wait for stable OSC frequency */
	reg_to = BSP_REG_VAL_TO;
	while ( (DEF_BIT_IS_CLR (BSP_REG_SCU_PLLSTAT, (BSP_BIT_PLLSTAT_PLLLV |
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d1ea      	bne.n	8006ca0 <BSP_SysInit+0x54>
						       BSP_BIT_PLLSTAT_PLLHV |
						       BSP_BIT_PLLSTAT_PLLSP))) &
		(reg_to > 0u)) {
		reg_to--;
	}
	if (reg_to == 0u) {
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d100      	bne.n	8006cd2 <BSP_SysInit+0x86>
		while (DEF_TRUE);
 8006cd0:	e7fe      	b.n	8006cd0 <BSP_SysInit+0x84>
	}
	/* ---------------- PLL CONFIGURATION ----------------- */
	/* Select OSC_FI as system clk */
	BSP_REG_SCU_SYSCLKCR = BSP_BIT_SYSCLKCR_OSC_FI;
 8006cd2:	4b59      	ldr	r3, [pc, #356]	; (8006e38 <BSP_SysInit+0x1ec>)
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	601a      	str	r2, [r3, #0]
	/* PLL is bypassed */
	DEF_BIT_SET (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_VCOBYP);
 8006cd8:	4a52      	ldr	r2, [pc, #328]	; (8006e24 <BSP_SysInit+0x1d8>)
 8006cda:	4b52      	ldr	r3, [pc, #328]	; (8006e24 <BSP_SysInit+0x1d8>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f043 0301 	orr.w	r3, r3, #1
 8006ce2:	6013      	str	r3, [r2, #0]
	/* Disconnect OSC_HP from PLL */
	DEF_BIT_SET (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_FINDIS);
 8006ce4:	4a4f      	ldr	r2, [pc, #316]	; (8006e24 <BSP_SysInit+0x1d8>)
 8006ce6:	4b4f      	ldr	r3, [pc, #316]	; (8006e24 <BSP_SysInit+0x1d8>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f043 0310 	orr.w	r3, r3, #16
 8006cee:	6013      	str	r3, [r2, #0]

	/* fpll = (NDIV  * fosc) / (PDIV * K2DIV))              */
	/*      = (40 * 12MHz) / (1 * 20)) = 24MHz              */
	BSP_REG_SCU_PLLCON1 = ( ( (BSP_PLLCON1_K1DIV       - 1u) <<  0u)
 8006cf0:	4b52      	ldr	r3, [pc, #328]	; (8006e3c <BSP_SysInit+0x1f0>)
 8006cf2:	4a53      	ldr	r2, [pc, #332]	; (8006e40 <BSP_SysInit+0x1f4>)
 8006cf4:	601a      	str	r2, [r3, #0]
				| ( (BSP_PLLCON1_NDIV        - 1u) <<  8u)
				| ( (BSP_PLLCON1_K2DIV_STEP1 - 1u) << 16u)
				| ( (BSP_PLLCON1_PDIV        - 1u) << 24u));

	/* Keeps OSC clk conn. to VCO in case of Loss-of-lock */
	BSP_REG_SCU_PLLCON0 |= BSP_BIT_PLLCON0_OSCDISCDIS;
 8006cf6:	4a4b      	ldr	r2, [pc, #300]	; (8006e24 <BSP_SysInit+0x1d8>)
 8006cf8:	4b4a      	ldr	r3, [pc, #296]	; (8006e24 <BSP_SysInit+0x1d8>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d00:	6013      	str	r3, [r2, #0]
	/* Connect OSC_HP to PLL */
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_FINDIS);
 8006d02:	4a48      	ldr	r2, [pc, #288]	; (8006e24 <BSP_SysInit+0x1d8>)
 8006d04:	4b47      	ldr	r3, [pc, #284]	; (8006e24 <BSP_SysInit+0x1d8>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f023 0310 	bic.w	r3, r3, #16
 8006d0c:	6013      	str	r3, [r2, #0]
	/* Restart PLL lock detection */
	DEF_BIT_SET (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_RESLD);
 8006d0e:	4a45      	ldr	r2, [pc, #276]	; (8006e24 <BSP_SysInit+0x1d8>)
 8006d10:	4b44      	ldr	r3, [pc, #272]	; (8006e24 <BSP_SysInit+0x1d8>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d18:	6013      	str	r3, [r2, #0]

	/* Wait for PLL Lock */
	reg_to = BSP_REG_VAL_TO;
 8006d1a:	4b45      	ldr	r3, [pc, #276]	; (8006e30 <BSP_SysInit+0x1e4>)
 8006d1c:	607b      	str	r3, [r7, #4]
	while ( (DEF_BIT_IS_CLR (BSP_REG_SCU_PLLSTAT, BSP_BIT_PLLSTAT_VCOLOCK)) &
 8006d1e:	e002      	b.n	8006d26 <BSP_SysInit+0xda>
		(reg_to > 0u)) {
		reg_to--;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	3b01      	subs	r3, #1
 8006d24:	607b      	str	r3, [r7, #4]
	/* Restart PLL lock detection */
	DEF_BIT_SET (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_RESLD);

	/* Wait for PLL Lock */
	reg_to = BSP_REG_VAL_TO;
	while ( (DEF_BIT_IS_CLR (BSP_REG_SCU_PLLSTAT, BSP_BIT_PLLSTAT_VCOLOCK)) &
 8006d26:	4b43      	ldr	r3, [pc, #268]	; (8006e34 <BSP_SysInit+0x1e8>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0304 	and.w	r3, r3, #4
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d101      	bne.n	8006d36 <BSP_SysInit+0xea>
 8006d32:	2301      	movs	r3, #1
 8006d34:	e000      	b.n	8006d38 <BSP_SysInit+0xec>
 8006d36:	2300      	movs	r3, #0
		(reg_to > 0u)) {
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	2a00      	cmp	r2, #0
 8006d3c:	bf14      	ite	ne
 8006d3e:	2201      	movne	r2, #1
 8006d40:	2200      	moveq	r2, #0
 8006d42:	b2d2      	uxtb	r2, r2
	/* Restart PLL lock detection */
	DEF_BIT_SET (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_RESLD);

	/* Wait for PLL Lock */
	reg_to = BSP_REG_VAL_TO;
	while ( (DEF_BIT_IS_CLR (BSP_REG_SCU_PLLSTAT, BSP_BIT_PLLSTAT_VCOLOCK)) &
 8006d44:	4013      	ands	r3, r2
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d1ea      	bne.n	8006d20 <BSP_SysInit+0xd4>
		(reg_to > 0u)) {
		reg_to--;
	}
	if (reg_to == 0u) {
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d100      	bne.n	8006d52 <BSP_SysInit+0x106>
		while (DEF_TRUE);
 8006d50:	e7fe      	b.n	8006d50 <BSP_SysInit+0x104>
	}

	/* Normal opertaion, PLL is not bypassed */
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_VCOBYP);
 8006d52:	4a34      	ldr	r2, [pc, #208]	; (8006e24 <BSP_SysInit+0x1d8>)
 8006d54:	4b33      	ldr	r3, [pc, #204]	; (8006e24 <BSP_SysInit+0x1d8>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f023 0301 	bic.w	r3, r3, #1
 8006d5c:	6013      	str	r3, [r2, #0]
	/* Enable MMC clock */
	DEF_BIT_SET (BSP_REG_SCU_CLKSET, BSP_BIT_CLKSET_MMCEN);
 8006d5e:	4a39      	ldr	r2, [pc, #228]	; (8006e44 <BSP_SysInit+0x1f8>)
 8006d60:	4b38      	ldr	r3, [pc, #224]	; (8006e44 <BSP_SysInit+0x1f8>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f043 0302 	orr.w	r3, r3, #2
 8006d68:	6013      	str	r3, [r2, #0]
	/* fcpu = fsys */
	DEF_BIT_CLR (BSP_REG_SCU_CPUCLKCR, BSP_BIT_CPUCLKCR_CPUDIV);
 8006d6a:	4a37      	ldr	r2, [pc, #220]	; (8006e48 <BSP_SysInit+0x1fc>)
 8006d6c:	4b36      	ldr	r3, [pc, #216]	; (8006e48 <BSP_SysInit+0x1fc>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f023 0301 	bic.w	r3, r3, #1
 8006d74:	6013      	str	r3, [r2, #0]
	/* fpb  = fsys */
	DEF_BIT_CLR (BSP_REG_SCU_PBCLKCR,  BSP_BIT_PBCLKCR_PBDIV);
 8006d76:	4a35      	ldr	r2, [pc, #212]	; (8006e4c <BSP_SysInit+0x200>)
 8006d78:	4b34      	ldr	r3, [pc, #208]	; (8006e4c <BSP_SysInit+0x200>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f023 0301 	bic.w	r3, r3, #1
 8006d80:	6013      	str	r3, [r2, #0]
	/* fccu = fsys */
	DEF_BIT_CLR (BSP_REG_SCU_CCUCLKCR, BSP_BIT_CCUCLKCR_CCUDIV);
 8006d82:	4a33      	ldr	r2, [pc, #204]	; (8006e50 <BSP_SysInit+0x204>)
 8006d84:	4b32      	ldr	r3, [pc, #200]	; (8006e50 <BSP_SysInit+0x204>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f023 0301 	bic.w	r3, r3, #1
 8006d8c:	6013      	str	r3, [r2, #0]
	/* Select PLL clock as system clk */
	BSP_REG_SCU_SYSCLKCR |= BSP_BIT_SYSCLKCR_PLL_CLK;
 8006d8e:	4a2a      	ldr	r2, [pc, #168]	; (8006e38 <BSP_SysInit+0x1ec>)
 8006d90:	4b29      	ldr	r3, [pc, #164]	; (8006e38 <BSP_SysInit+0x1ec>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d98:	6013      	str	r3, [r2, #0]
	/* Wait between K2 divider updates */
	reg_to = BSP_REG_VAL_TO;
 8006d9a:	4b25      	ldr	r3, [pc, #148]	; (8006e30 <BSP_SysInit+0x1e4>)
 8006d9c:	607b      	str	r3, [r7, #4]
	while (reg_to > 0u) {
 8006d9e:	e002      	b.n	8006da6 <BSP_SysInit+0x15a>
		reg_to--;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	3b01      	subs	r3, #1
 8006da4:	607b      	str	r3, [r7, #4]
	DEF_BIT_CLR (BSP_REG_SCU_CCUCLKCR, BSP_BIT_CCUCLKCR_CCUDIV);
	/* Select PLL clock as system clk */
	BSP_REG_SCU_SYSCLKCR |= BSP_BIT_SYSCLKCR_PLL_CLK;
	/* Wait between K2 divider updates */
	reg_to = BSP_REG_VAL_TO;
	while (reg_to > 0u) {
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d1f9      	bne.n	8006da0 <BSP_SysInit+0x154>
		reg_to--;
	}
	/* fpll = (NDIV  * fosc) / (PDIV * K2DIV)) */
	/*      = (40 * 12MHz) / (1 * 8)) = 60MHz  */
	reg  = (BSP_REG_SCU_PLLCON1 & ~BSP_PLLCON1_K2DIV_MASK);
 8006dac:	4b23      	ldr	r3, [pc, #140]	; (8006e3c <BSP_SysInit+0x1f0>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8006db4:	603b      	str	r3, [r7, #0]
	reg |= ( (BSP_PLLCON1_K2DIV_STEP2 - 1u) << 16);
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8006dbc:	603b      	str	r3, [r7, #0]
	BSP_REG_SCU_PLLCON1 = reg;
 8006dbe:	4a1f      	ldr	r2, [pc, #124]	; (8006e3c <BSP_SysInit+0x1f0>)
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	6013      	str	r3, [r2, #0]
	/* Wait between K2 divider updates */
	reg_to = BSP_REG_VAL_TO;
 8006dc4:	4b1a      	ldr	r3, [pc, #104]	; (8006e30 <BSP_SysInit+0x1e4>)
 8006dc6:	607b      	str	r3, [r7, #4]
	while (reg_to > 0u) {
 8006dc8:	e002      	b.n	8006dd0 <BSP_SysInit+0x184>
		reg_to--;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	3b01      	subs	r3, #1
 8006dce:	607b      	str	r3, [r7, #4]
	reg  = (BSP_REG_SCU_PLLCON1 & ~BSP_PLLCON1_K2DIV_MASK);
	reg |= ( (BSP_PLLCON1_K2DIV_STEP2 - 1u) << 16);
	BSP_REG_SCU_PLLCON1 = reg;
	/* Wait between K2 divider updates */
	reg_to = BSP_REG_VAL_TO;
	while (reg_to > 0u) {
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1f9      	bne.n	8006dca <BSP_SysInit+0x17e>
		reg_to--;
	}

	/* fpll = (NDIV  * fosc) / (PDIV * K2DIV)) */
	/*      = (40 * 12MHz) / (1 * 5)) = 96MHz  */
	reg                 = (BSP_REG_SCU_PLLCON1 & ~BSP_PLLCON1_K2DIV_MASK);
 8006dd6:	4b19      	ldr	r3, [pc, #100]	; (8006e3c <BSP_SysInit+0x1f0>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8006dde:	603b      	str	r3, [r7, #0]
	reg                |= ( (BSP_PLLCON1_K2DIV_STEP3 - 1u) << 16);
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006de6:	603b      	str	r3, [r7, #0]
	BSP_REG_SCU_PLLCON1 = reg;
 8006de8:	4a14      	ldr	r2, [pc, #80]	; (8006e3c <BSP_SysInit+0x1f0>)
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	6013      	str	r3, [r2, #0]
	/* Wait between K2 divider updates */
	reg_to = BSP_REG_VAL_TO;
 8006dee:	4b10      	ldr	r3, [pc, #64]	; (8006e30 <BSP_SysInit+0x1e4>)
 8006df0:	607b      	str	r3, [r7, #4]
	while (reg_to > 0u) {
 8006df2:	e002      	b.n	8006dfa <BSP_SysInit+0x1ae>
		reg_to--;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	3b01      	subs	r3, #1
 8006df8:	607b      	str	r3, [r7, #4]
	reg                 = (BSP_REG_SCU_PLLCON1 & ~BSP_PLLCON1_K2DIV_MASK);
	reg                |= ( (BSP_PLLCON1_K2DIV_STEP3 - 1u) << 16);
	BSP_REG_SCU_PLLCON1 = reg;
	/* Wait between K2 divider updates */
	reg_to = BSP_REG_VAL_TO;
	while (reg_to > 0u) {
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1f9      	bne.n	8006df4 <BSP_SysInit+0x1a8>
		reg_to--;
	}
	/* fpll = (NDIV  * fosc) / (PDIV * K2DIV)) */
	/*      = (40 * 12MHz) / (1 * 4)) = 120MHz */
	reg                 = (BSP_REG_SCU_PLLCON1 & ~BSP_PLLCON1_K2DIV_MASK);
 8006e00:	4b0e      	ldr	r3, [pc, #56]	; (8006e3c <BSP_SysInit+0x1f0>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8006e08:	603b      	str	r3, [r7, #0]
	reg                |= ( (BSP_PLLCON1_K2DIV_FINAL - 1u) << 16);
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8006e10:	603b      	str	r3, [r7, #0]
	BSP_REG_SCU_PLLCON1 = reg;
 8006e12:	4a0a      	ldr	r2, [pc, #40]	; (8006e3c <BSP_SysInit+0x1f0>)
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	6013      	str	r3, [r2, #0]
}
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bc80      	pop	{r7}
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	50004714 	.word	0x50004714
 8006e28:	50004704 	.word	0x50004704
 8006e2c:	5000471c 	.word	0x5000471c
 8006e30:	0007ffff 	.word	0x0007ffff
 8006e34:	50004710 	.word	0x50004710
 8006e38:	5000460c 	.word	0x5000460c
 8006e3c:	50004718 	.word	0x50004718
 8006e40:	00132700 	.word	0x00132700
 8006e44:	50004604 	.word	0x50004604
 8006e48:	50004610 	.word	0x50004610
 8006e4c:	50004614 	.word	0x50004614
 8006e50:	50004620 	.word	0x50004620

08006e54 <BSP_SysClkFreqGet>:
 *
 * @brief This function is used to retrieve system or CPU clock frequency
 *
 */
CPU_INT32U BSP_SysClkFreqGet (void)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
	CPU_INT08U  pll_p;
	CPU_INT08U  pll_k2;
	CPU_INT32U  cpu_freq;


	sysclk_src = (BSP_REG_SCU_SYSCLKCR & DEF_BIT_FIELD (2u, 16u)) >> 16u;
 8006e5a:	4b26      	ldr	r3, [pc, #152]	; (8006ef4 <BSP_SysClkFreqGet+0xa0>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006e62:	0c1b      	lsrs	r3, r3, #16
 8006e64:	72fb      	strb	r3, [r7, #11]
	sysclk_div = (BSP_REG_SCU_SYSCLKCR & DEF_BIT_FIELD (8u, 0u)) + 1u;
 8006e66:	4b23      	ldr	r3, [pc, #140]	; (8006ef4 <BSP_SysClkFreqGet+0xa0>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	3301      	adds	r3, #1
 8006e72:	813b      	strh	r3, [r7, #8]

	switch (sysclk_src) {
 8006e74:	7afb      	ldrb	r3, [r7, #11]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d002      	beq.n	8006e80 <BSP_SysClkFreqGet+0x2c>
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d003      	beq.n	8006e86 <BSP_SysClkFreqGet+0x32>
 8006e7e:	e022      	b.n	8006ec6 <BSP_SysClkFreqGet+0x72>
	case 0:
		/* Fast Internal Oscillator selected as system clk */
		cpu_freq = BSP_CFG_SYS_INT_OSC_FI_FREQ_HZ;
 8006e80:	4b1d      	ldr	r3, [pc, #116]	; (8006ef8 <BSP_SysClkFreqGet+0xa4>)
 8006e82:	60fb      	str	r3, [r7, #12]
		break;
 8006e84:	e021      	b.n	8006eca <BSP_SysClkFreqGet+0x76>

	case 1:
		/* PLL clock is selected as system clk */
		cpu_freq = BSP_CFG_SYS_XTAL_OSC_FREQ_HZ;
 8006e86:	4b1d      	ldr	r3, [pc, #116]	; (8006efc <BSP_SysClkFreqGet+0xa8>)
 8006e88:	60fb      	str	r3, [r7, #12]
		pll_n    = (BSP_REG_SCU_PLLCON1 >>  8u) + 1u;
 8006e8a:	4b1d      	ldr	r3, [pc, #116]	; (8006f00 <BSP_SysClkFreqGet+0xac>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	0a1b      	lsrs	r3, r3, #8
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	3301      	adds	r3, #1
 8006e94:	71fb      	strb	r3, [r7, #7]
		pll_p    = (BSP_REG_SCU_PLLCON1 >> 24u) + 1u;
 8006e96:	4b1a      	ldr	r3, [pc, #104]	; (8006f00 <BSP_SysClkFreqGet+0xac>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	0e1b      	lsrs	r3, r3, #24
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	71bb      	strb	r3, [r7, #6]
		pll_k2   = (BSP_REG_SCU_PLLCON1 >> 16u) + 1u;
 8006ea2:	4b17      	ldr	r3, [pc, #92]	; (8006f00 <BSP_SysClkFreqGet+0xac>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	0c1b      	lsrs	r3, r3, #16
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	3301      	adds	r3, #1
 8006eac:	717b      	strb	r3, [r7, #5]
		cpu_freq = ( (cpu_freq / pll_p) * pll_n) / pll_k2;
 8006eae:	79bb      	ldrb	r3, [r7, #6]
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eb6:	79fa      	ldrb	r2, [r7, #7]
 8006eb8:	fb02 f203 	mul.w	r2, r2, r3
 8006ebc:	797b      	ldrb	r3, [r7, #5]
 8006ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ec2:	60fb      	str	r3, [r7, #12]
		break;
 8006ec4:	e001      	b.n	8006eca <BSP_SysClkFreqGet+0x76>

	case 2:
	case 3:
	default:
		return ( (CPU_INT32U) 0u);
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	e00e      	b.n	8006ee8 <BSP_SysClkFreqGet+0x94>
	}
	cpu_freq /= sysclk_div;
 8006eca:	893b      	ldrh	r3, [r7, #8]
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ed2:	60fb      	str	r3, [r7, #12]
	if (DEF_BIT_IS_SET (BSP_REG_SCU_CPUCLKCR, BSP_BIT_CPUCLKCR_CPUDIV)) {
 8006ed4:	4b0b      	ldr	r3, [pc, #44]	; (8006f04 <BSP_SysClkFreqGet+0xb0>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 0301 	and.w	r3, r3, #1
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d002      	beq.n	8006ee6 <BSP_SysClkFreqGet+0x92>
		cpu_freq /= 2u;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	085b      	lsrs	r3, r3, #1
 8006ee4:	60fb      	str	r3, [r7, #12]
	}
	return (cpu_freq);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3714      	adds	r7, #20
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bc80      	pop	{r7}
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	5000460c 	.word	0x5000460c
 8006ef8:	016e3600 	.word	0x016e3600
 8006efc:	00b71b00 	.word	0x00b71b00
 8006f00:	50004718 	.word	0x50004718
 8006f04:	50004610 	.word	0x50004610

08006f08 <BSP_Init>:
 * @params none
 * @returns none
 * @brief Initialization of the board support.
 */
void  BSP_Init (void)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	af00      	add	r7, sp, #0
	BSP_IntInit();
 8006f0c:	f7ff f964 	bl	80061d8 <BSP_IntInit>
	BSP_UART_Init();
 8006f10:	f7ff fe3c 	bl	8006b8c <BSP_UART_Init>
	BSP_GPIO_Init();
 8006f14:	f7ff fd8e 	bl	8006a34 <BSP_GPIO_Init>
	BSP_CCU4_Init();
 8006f18:	f7ff f882 	bl	8006020 <BSP_CCU4_Init>
}
 8006f1c:	bf00      	nop
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <ITM_SendChar>:
    \param [in]     ch  Character to transmit.

    \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  if ((ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8006f28:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006f2c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8006f30:	f003 0301 	and.w	r3, r3, #1
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d012      	beq.n	8006f5e <ITM_SendChar+0x3e>
      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
 8006f38:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006f3c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8006f40:	f003 0301 	and.w	r3, r3, #1

    \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if ((ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d00a      	beq.n	8006f5e <ITM_SendChar+0x3e>
      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0].u32 == 0);
 8006f48:	bf00      	nop
 8006f4a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d0fa      	beq.n	8006f4a <ITM_SendChar+0x2a>
    ITM->PORT[0].u8 = (uint8_t) ch;
 8006f54:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	b2d2      	uxtb	r2, r2
 8006f5c:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8006f5e:	687b      	ldr	r3, [r7, #4]
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bc80      	pop	{r7}
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop

08006f6c <initRetargetSwo>:
 *            CMSIS-Core > Reference > Debug Access
 *        (2) ARM Cortex-M4 Processor Technical Reference Manual
 *        (3) ARMv7-M Architecture Reference Manual
 */
void initRetargetSwo (void)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	af00      	add	r7, sp, #0
	// P2.1: After a system reset, this pin selects HWO0 (DB.TDO/DB.TRACESWO)
	// PORT2->HWSEL ... clear bits [3:2]
	PORT2->HWSEL &= ~PORT2_HWSEL_HW1_Msk;
 8006f70:	4a1c      	ldr	r2, [pc, #112]	; (8006fe4 <initRetargetSwo+0x78>)
 8006f72:	4b1c      	ldr	r3, [pc, #112]	; (8006fe4 <initRetargetSwo+0x78>)
 8006f74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f76:	f023 030c 	bic.w	r3, r3, #12
 8006f7a:	6753      	str	r3, [r2, #116]	; 0x74
	// PORT2->HWSEL ... set bit [2] -> HWO0
	PORT2->HWSEL |= 0x01UL << PORT2_HWSEL_HW1_Pos;
 8006f7c:	4a19      	ldr	r2, [pc, #100]	; (8006fe4 <initRetargetSwo+0x78>)
 8006f7e:	4b19      	ldr	r3, [pc, #100]	; (8006fe4 <initRetargetSwo+0x78>)
 8006f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f82:	f043 0304 	orr.w	r3, r3, #4
 8006f86:	6753      	str	r3, [r2, #116]	; 0x74

	// Enable trace systems
	// Source: ARMv7-M Architecture Reference Manual
	// DEMCR = Debug Exception and Monitor Control Register
	//         TRCENA ... global enable for DWT and ITM blocks
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8006f88:	4a17      	ldr	r2, [pc, #92]	; (8006fe8 <initRetargetSwo+0x7c>)
 8006f8a:	4b17      	ldr	r3, [pc, #92]	; (8006fe8 <initRetargetSwo+0x7c>)
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f92:	60d3      	str	r3, [r2, #12]
	// SWO baud rate prescaler value
	// ACPR = Asynchronous Clock Prescaler Register
	//        fSWO = fCPU / (SWOSCALAR + 1)
	//        fSWO = 1MHz (maximum speed JLINK Lite CortexM)
	//        fCPU = 120MHz
	TPI->ACPR = 119UL;
 8006f94:	4b15      	ldr	r3, [pc, #84]	; (8006fec <initRetargetSwo+0x80>)
 8006f96:	2277      	movs	r2, #119	; 0x77
 8006f98:	611a      	str	r2, [r3, #16]
	// Source: ARMv7-M Architecture Reference Manual
	// SPPR = Selected Pin Control Register
	//        0x0 ... Synchronous Trace Port Mode
	//        0x1 ... Asynchronous Serial Wire Output (Manchester)
	//        0x2 ... Asynchronous Serial Wire Output (NRZ)
	TPI->SPPR = 0x2UL;
 8006f9a:	4b14      	ldr	r3, [pc, #80]	; (8006fec <initRetargetSwo+0x80>)
 8006f9c:	2202      	movs	r2, #2
 8006f9e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	// Source: ARM Cortex-M4 Processor Technical Reference Manual
	// Source: infineonforums -> 358-ITM-printf-style-debugging-not-working
	// FFCR = Formatter and Flash Control Register
	//        0x0 ... continuous formatting disabled
	//        0x1 ... continuous formatting enabled
	TPI->FFCR &= ~TPI_FFCR_EnFCont_Msk;
 8006fa2:	4a12      	ldr	r2, [pc, #72]	; (8006fec <initRetargetSwo+0x80>)
 8006fa4:	4b11      	ldr	r3, [pc, #68]	; (8006fec <initRetargetSwo+0x80>)
 8006fa6:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 8006faa:	f023 0302 	bic.w	r3, r3, #2
 8006fae:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

	// Unlock ITM
	// Source: infineonforums -> 358-ITM-printf-style-debugging-not-working
	ITM->LAR = 0xC5ACCE55;
 8006fb2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006fb6:	4a0e      	ldr	r2, [pc, #56]	; (8006ff0 <initRetargetSwo+0x84>)
 8006fb8:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
	// Source: ARMv7-M Architecture Reference Manual, Sec. C1-7
	// TCR = Trace Control Register
	//       ITMENA ... enable ITM
	ITM->TCR |= ITM_TCR_ITMENA_Msk;
 8006fbc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006fc0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006fc4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8006fc8:	f043 0301 	orr.w	r3, r3, #1
 8006fcc:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
	// Source: ARMv7-M Architecture Reference Manual, Sec. C1-7
	// TER = Trace Enable Register
	//       STIMENA ... Stimulus Port #N is enabled when bit STIMENA[N]
	ITM->TER = 0xFFFFFFFF;
 8006fd0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8006fd8:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
}
 8006fdc:	bf00      	nop
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bc80      	pop	{r7}
 8006fe2:	4770      	bx	lr
 8006fe4:	48028200 	.word	0x48028200
 8006fe8:	e000edf0 	.word	0xe000edf0
 8006fec:	e0040000 	.word	0xe0040000
 8006ff0:	c5acce55 	.word	0xc5acce55

08006ff4 <_write>:
 * @brief Retarget the printf() function to output via the ITM Debug module.
 *        This function relies on ITM_SendChar() defined in core_cm4.h of the
 *        CMSIS library.
 */
int _write (int file, char *buf, int nbytes)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b086      	sub	sp, #24
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	607a      	str	r2, [r7, #4]
	int i;

	for (i = 0; i < nbytes; i++) {
 8007000:	2300      	movs	r3, #0
 8007002:	617b      	str	r3, [r7, #20]
 8007004:	e00a      	b.n	800701c <_write+0x28>
		ITM_SendChar ( (*buf++));
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	1c5a      	adds	r2, r3, #1
 800700a:	60ba      	str	r2, [r7, #8]
 800700c:	f993 3000 	ldrsb.w	r3, [r3]
 8007010:	4618      	mov	r0, r3
 8007012:	f7ff ff85 	bl	8006f20 <ITM_SendChar>
 */
int _write (int file, char *buf, int nbytes)
{
	int i;

	for (i = 0; i < nbytes; i++) {
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	3301      	adds	r3, #1
 800701a:	617b      	str	r3, [r7, #20]
 800701c:	697a      	ldr	r2, [r7, #20]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	429a      	cmp	r2, r3
 8007022:	dbf0      	blt.n	8007006 <_write+0x12>
		ITM_SendChar ( (*buf++));
	}
	return nbytes;
 8007024:	687b      	ldr	r3, [r7, #4]
}
 8007026:	4618      	mov	r0, r3
 8007028:	3718      	adds	r7, #24
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop

08007030 <CPU_TS_TmrInit>:
 *
 *              See also CPU_TS_TmrRd()
 */
#if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
void  CPU_TS_TmrInit (void)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b082      	sub	sp, #8
 8007034:	af00      	add	r7, sp, #0
	CPU_INT32U  fclk_freq;

	fclk_freq = BSP_SysClkFreqGet();
 8007036:	f7ff ff0d 	bl	8006e54 <BSP_SysClkFreqGet>
 800703a:	6078      	str	r0, [r7, #4]

	CPU_BSP_REG_DEMCR  |= DEF_BIT_24;
 800703c:	4a09      	ldr	r2, [pc, #36]	; (8007064 <CPU_TS_TmrInit+0x34>)
 800703e:	4b09      	ldr	r3, [pc, #36]	; (8007064 <CPU_TS_TmrInit+0x34>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007046:	6013      	str	r3, [r2, #0]
	CPU_BSP_REG_DWT_CR |= DEF_BIT_00;
 8007048:	4a07      	ldr	r2, [pc, #28]	; (8007068 <CPU_TS_TmrInit+0x38>)
 800704a:	4b07      	ldr	r3, [pc, #28]	; (8007068 <CPU_TS_TmrInit+0x38>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f043 0301 	orr.w	r3, r3, #1
 8007052:	6013      	str	r3, [r2, #0]

	CPU_TS_TmrFreqSet ( (CPU_TS_TMR_FREQ) fclk_freq);
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f7fa fbc5 	bl	80017e4 <CPU_TS_TmrFreqSet>
}
 800705a:	bf00      	nop
 800705c:	3708      	adds	r7, #8
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	e000edfc 	.word	0xe000edfc
 8007068:	e0001000 	.word	0xe0001000

0800706c <CPU_TS_TmrRd>:
 *             resolution inadequate to measure desired times.
 *
 */
#if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
CPU_TS_TMR  CPU_TS_TmrRd (void)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
	CPU_TS_TMR  ts_tmr_cnts;


	ts_tmr_cnts = (CPU_TS_TMR) CPU_BSP_REG_DWT_CYCCNT;
 8007072:	4b04      	ldr	r3, [pc, #16]	; (8007084 <CPU_TS_TmrRd+0x18>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	607b      	str	r3, [r7, #4]

	return (ts_tmr_cnts);
 8007078:	687b      	ldr	r3, [r7, #4]
}
 800707a:	4618      	mov	r0, r3
 800707c:	370c      	adds	r7, #12
 800707e:	46bd      	mov	sp, r7
 8007080:	bc80      	pop	{r7}
 8007082:	4770      	bx	lr
 8007084:	e0001004 	.word	0xe0001004

08007088 <_lseek>:

/*
 * File position seek
 */
__attribute__((weak)) int _lseek(int file, int offset, int whence)
{
 8007088:	b480      	push	{r7}
 800708a:	b085      	sub	sp, #20
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
 file = file;
 offset = offset;
 whence = whence;
 return -1;
 8007094:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007098:	4618      	mov	r0, r3
 800709a:	3714      	adds	r7, #20
 800709c:	46bd      	mov	sp, r7
 800709e:	bc80      	pop	{r7}
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop

080070a4 <_read>:

/*
 * File read
 */
__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	607a      	str	r2, [r7, #4]
 file = file;
 len  = len;
 return 0;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3714      	adds	r7, #20
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bc80      	pop	{r7}
 80070ba:	4770      	bx	lr

080070bc <_close>:

/*
 * File close
 */
__attribute__((weak)) int _close(void)
{
 80070bc:	b480      	push	{r7}
 80070be:	af00      	add	r7, sp, #0
 return -1;
 80070c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bc80      	pop	{r7}
 80070ca:	4770      	bx	lr

080070cc <_fstat>:

/*
 * File status
 */
__attribute__((weak)) int _fstat(int file, struct stat *st)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
 file = file;
 if(st)
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d002      	beq.n	80070e2 <_fstat+0x16>
  return -1;
 80070dc:	f04f 33ff 	mov.w	r3, #4294967295
 80070e0:	e001      	b.n	80070e6 <_fstat+0x1a>
 else
  return -2;
 80070e2:	f06f 0301 	mvn.w	r3, #1
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	370c      	adds	r7, #12
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bc80      	pop	{r7}
 80070ee:	4770      	bx	lr

080070f0 <_sbrk>:
/* ========================================================================= */
/*
 * Heap break (position)
 */
__attribute__((weak)) void *_sbrk(int RequestedSize)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b087      	sub	sp, #28
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 unsigned int  HeapSize;
 static unsigned char *HeapBound;
 static unsigned char * heap= (unsigned char *)NULL;


 HeapSize   = (unsigned int)(&Heap_Bank1_Size);
 80070f8:	4b15      	ldr	r3, [pc, #84]	; (8007150 <_sbrk+0x60>)
 80070fa:	617b      	str	r3, [r7, #20]

 /*
  * If this is the first time malloc() was invoked, we start with the
  * begining of the heap.
  */
 if(heap == (unsigned char *)NULL)
 80070fc:	4b15      	ldr	r3, [pc, #84]	; (8007154 <_sbrk+0x64>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d108      	bne.n	8007116 <_sbrk+0x26>
  {
   heap = (unsigned char *)&Heap_Bank1_Start;
 8007104:	4b13      	ldr	r3, [pc, #76]	; (8007154 <_sbrk+0x64>)
 8007106:	4a14      	ldr	r2, [pc, #80]	; (8007158 <_sbrk+0x68>)
 8007108:	601a      	str	r2, [r3, #0]
   HeapBound  = (unsigned char *) (heap + HeapSize);
 800710a:	4b12      	ldr	r3, [pc, #72]	; (8007154 <_sbrk+0x64>)
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	4413      	add	r3, r2
 8007112:	4a12      	ldr	r2, [pc, #72]	; (800715c <_sbrk+0x6c>)
 8007114:	6013      	str	r3, [r2, #0]
  }

 /* Super duper algo to find out if we have memory for the latest request */
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;
 8007116:	4b0f      	ldr	r3, [pc, #60]	; (8007154 <_sbrk+0x64>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	613b      	str	r3, [r7, #16]

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
 800711c:	4b0d      	ldr	r3, [pc, #52]	; (8007154 <_sbrk+0x64>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	461a      	mov	r2, r3
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4413      	add	r3, r2
 8007126:	3307      	adds	r3, #7
                                          & 0xFFFFFFF8);
 8007128:	f023 0307 	bic.w	r3, r3, #7
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
 800712c:	60fb      	str	r3, [r7, #12]
                                          & 0xFFFFFFF8);

 /* Return no memory condition if we sense we are crossing the limit */
 if (NextBreak >=  HeapBound )
 800712e:	4b0b      	ldr	r3, [pc, #44]	; (800715c <_sbrk+0x6c>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	68fa      	ldr	r2, [r7, #12]
 8007134:	429a      	cmp	r2, r3
 8007136:	d301      	bcc.n	800713c <_sbrk+0x4c>
  return ((unsigned char *)NULL);
 8007138:	2300      	movs	r3, #0
 800713a:	e003      	b.n	8007144 <_sbrk+0x54>
 else
 {
  heap = NextBreak;
 800713c:	4a05      	ldr	r2, [pc, #20]	; (8007154 <_sbrk+0x64>)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6013      	str	r3, [r2, #0]
  return CurrBreak;
 8007142:	693b      	ldr	r3, [r7, #16]
 }
}
 8007144:	4618      	mov	r0, r3
 8007146:	371c      	adds	r7, #28
 8007148:	46bd      	mov	sp, r7
 800714a:	bc80      	pop	{r7}
 800714c:	4770      	bx	lr
 800714e:	bf00      	nop
 8007150:	0000c680 	.word	0x0000c680
 8007154:	20001e94 	.word	0x20001e94
 8007158:	20003980 	.word	0x20003980
 800715c:	20001e98 	.word	0x20001e98

08007160 <_init>:
 while(1){}
}

/* Init */
__attribute__((weak)) void _init(void)
{}
 8007160:	b480      	push	{r7}
 8007162:	af00      	add	r7, sp, #0
 8007164:	bf00      	nop
 8007166:	46bd      	mov	sp, r7
 8007168:	bc80      	pop	{r7}
 800716a:	4770      	bx	lr

0800716c <_isatty>:

/*
 * Terminal type evaluation
 */
__attribute__((weak)) int _isatty(int file)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 file = file;
 return -1;
 8007174:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007178:	4618      	mov	r0, r3
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	bc80      	pop	{r7}
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop

08007184 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_CHECK_CH(channel));
  
  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a1b      	ldr	r2, [pc, #108]	; (80071fc <XMC_USIC_CH_Enable+0x78>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d003      	beq.n	800719c <XMC_USIC_CH_Enable+0x18>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a1a      	ldr	r2, [pc, #104]	; (8007200 <XMC_USIC_CH_Enable+0x7c>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d103      	bne.n	80071a4 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 800719c:	4819      	ldr	r0, [pc, #100]	; (8007204 <XMC_USIC_CH_Enable+0x80>)
 800719e:	f000 f8cb 	bl	8007338 <XMC_USIC_Enable>
 80071a2:	e016      	b.n	80071d2 <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a18      	ldr	r2, [pc, #96]	; (8007208 <XMC_USIC_CH_Enable+0x84>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d003      	beq.n	80071b4 <XMC_USIC_CH_Enable+0x30>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a17      	ldr	r2, [pc, #92]	; (800720c <XMC_USIC_CH_Enable+0x88>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d103      	bne.n	80071bc <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 80071b4:	4816      	ldr	r0, [pc, #88]	; (8007210 <XMC_USIC_CH_Enable+0x8c>)
 80071b6:	f000 f8bf 	bl	8007338 <XMC_USIC_Enable>
 80071ba:	e00a      	b.n	80071d2 <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a15      	ldr	r2, [pc, #84]	; (8007214 <XMC_USIC_CH_Enable+0x90>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d003      	beq.n	80071cc <XMC_USIC_CH_Enable+0x48>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a14      	ldr	r2, [pc, #80]	; (8007218 <XMC_USIC_CH_Enable+0x94>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d102      	bne.n	80071d2 <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 80071cc:	4813      	ldr	r0, [pc, #76]	; (800721c <XMC_USIC_CH_Enable+0x98>)
 80071ce:	f000 f8b3 	bl	8007338 <XMC_USIC_Enable>
  else
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }
  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2203      	movs	r2, #3
 80071d6:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 80071d8:	bf00      	nop
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	f003 0301 	and.w	r3, r3, #1
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d0f9      	beq.n	80071da <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ea:	f023 020f 	bic.w	r2, r3, #15
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80071f2:	bf00      	nop
 80071f4:	3708      	adds	r7, #8
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	40030000 	.word	0x40030000
 8007200:	40030200 	.word	0x40030200
 8007204:	40030008 	.word	0x40030008
 8007208:	48020000 	.word	0x48020000
 800720c:	48020200 	.word	0x48020200
 8007210:	48020008 	.word	0x48020008
 8007214:	48024000 	.word	0x48024000
 8007218:	48024200 	.word	0x48024200
 800721c:	48024008 	.word	0x48024008

08007220 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b08e      	sub	sp, #56	; 0x38
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	2b63      	cmp	r3, #99	; 0x63
 8007230:	d958      	bls.n	80072e4 <XMC_USIC_CH_SetBaudrate+0xc4>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d055      	beq.n	80072e4 <XMC_USIC_CH_SetBaudrate+0xc4>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8007238:	f000 f8d0 	bl	80073dc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 800723c:	4602      	mov	r2, r0
 800723e:	4b2e      	ldr	r3, [pc, #184]	; (80072f8 <XMC_USIC_CH_SetBaudrate+0xd8>)
 8007240:	fba3 2302 	umull	r2, r3, r3, r2
 8007244:	095b      	lsrs	r3, r3, #5
 8007246:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	4a2b      	ldr	r2, [pc, #172]	; (80072f8 <XMC_USIC_CH_SetBaudrate+0xd8>)
 800724c:	fba2 2303 	umull	r2, r3, r2, r3
 8007250:	095b      	lsrs	r3, r3, #5
 8007252:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
 8007254:	2301      	movs	r3, #1
 8007256:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 8007258:	2301      	movs	r3, #1
 800725a:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 800725c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8007260:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8007262:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8007266:	633b      	str	r3, [r7, #48]	; 0x30
 8007268:	e022      	b.n	80072b0 <XMC_USIC_CH_SetBaudrate+0x90>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 800726a:	6a3b      	ldr	r3, [r7, #32]
 800726c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800726e:	fb02 f203 	mul.w	r2, r2, r3
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	6879      	ldr	r1, [r7, #4]
 8007276:	fb01 f303 	mul.w	r3, r1, r3
 800727a:	fbb2 f3f3 	udiv	r3, r2, r3
 800727e:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	0a9b      	lsrs	r3, r3, #10
 8007284:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800728c:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007294:	d209      	bcs.n	80072aa <XMC_USIC_CH_SetBaudrate+0x8a>
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729a:	429a      	cmp	r2, r3
 800729c:	d205      	bcs.n	80072aa <XMC_USIC_CH_SetBaudrate+0x8a>
      {
        pdiv_frac_min = pdiv_frac;
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 80072a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a8:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 80072aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ac:	3b01      	subs	r3, #1
 80072ae:	633b      	str	r3, [r7, #48]	; 0x30
 80072b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d1d9      	bne.n	800726a <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 80072b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b8:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	695a      	ldr	r2, [r3, #20]
 80072c4:	4b0d      	ldr	r3, [pc, #52]	; (80072fc <XMC_USIC_CH_SetBaudrate+0xdc>)
 80072c6:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	3a01      	subs	r2, #1
 80072cc:	0292      	lsls	r2, r2, #10
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 80072ce:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 80072d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d2:	3b01      	subs	r3, #1
 80072d4:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 80072d6:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 80072dc:	2300      	movs	r3, #0
 80072de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80072e2:	e002      	b.n	80072ea <XMC_USIC_CH_SetBaudrate+0xca>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  return status;
 80072ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3738      	adds	r7, #56	; 0x38
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	51eb851f 	.word	0x51eb851f
 80072fc:	fc0080ef 	.word	0xfc0080ef

08007300 <XMC_USIC_CH_SetInterruptNodePointer>:


void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
 8007300:	b480      	push	{r7}
 8007302:	b085      	sub	sp, #20
 8007304:	af00      	add	r7, sp, #0
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	460b      	mov	r3, r1
 800730a:	607a      	str	r2, [r7, #4]
 800730c:	72fb      	strb	r3, [r7, #11]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	699a      	ldr	r2, [r3, #24]
 8007312:	7afb      	ldrb	r3, [r7, #11]
 8007314:	2107      	movs	r1, #7
 8007316:	fa01 f303 	lsl.w	r3, r1, r3
 800731a:	43db      	mvns	r3, r3
 800731c:	401a      	ands	r2, r3
                  (service_request << (uint32_t)interrupt_node));
 800731e:	7afb      	ldrb	r3, [r7, #11]
 8007320:	6879      	ldr	r1, [r7, #4]
 8007322:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8007326:	431a      	orrs	r2, r3
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	619a      	str	r2, [r3, #24]
                  (service_request << (uint32_t)interrupt_node));
}
 800732c:	bf00      	nop
 800732e:	3714      	adds	r7, #20
 8007330:	46bd      	mov	sp, r7
 8007332:	bc80      	pop	{r7}
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop

08007338 <XMC_USIC_Enable>:
 * @brief API to enable the USIC driver
 * @retval void
 *
 */
void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a0d      	ldr	r2, [pc, #52]	; (8007378 <XMC_USIC_Enable+0x40>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d104      	bne.n	8007352 <XMC_USIC_Enable+0x1a>
  {
#if(UC_SERIES != XMC45)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8007348:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800734c:	f000 f828 	bl	80073a0 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8007350:	e00e      	b.n	8007370 <XMC_USIC_Enable+0x38>
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
  }
#if defined(USIC1)  
  else if (usic == USIC1)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4a09      	ldr	r2, [pc, #36]	; (800737c <XMC_USIC_Enable+0x44>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d103      	bne.n	8007362 <XMC_USIC_Enable+0x2a>
  {
#if(UC_SERIES != XMC45)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
#endif	
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 800735a:	4809      	ldr	r0, [pc, #36]	; (8007380 <XMC_USIC_Enable+0x48>)
 800735c:	f000 f820 	bl	80073a0 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8007360:	e006      	b.n	8007370 <XMC_USIC_Enable+0x38>
#endif	
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
  }
#endif  
#if defined(USIC2)  
  else if (usic == USIC2)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a07      	ldr	r2, [pc, #28]	; (8007384 <XMC_USIC_Enable+0x4c>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d102      	bne.n	8007370 <XMC_USIC_Enable+0x38>
  {
#if(UC_SERIES != XMC45)  
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_CLOCK_USIC2);
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 800736a:	4807      	ldr	r0, [pc, #28]	; (8007388 <XMC_USIC_Enable+0x50>)
 800736c:	f000 f818 	bl	80073a0 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8007370:	bf00      	nop
 8007372:	3708      	adds	r7, #8
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}
 8007378:	40030008 	.word	0x40030008
 800737c:	48020008 	.word	0x48020008
 8007380:	10000080 	.word	0x10000080
 8007384:	48024008 	.word	0x48024008
 8007388:	10000100 	.word	0x10000100

0800738c <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 800738c:	b480      	push	{r7}
 800738e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007390:	4b02      	ldr	r3, [pc, #8]	; (800739c <XMC_SCU_CLOCK_GetCpuClockFrequency+0x10>)
 8007392:	681b      	ldr	r3, [r3, #0]
}
 8007394:	4618      	mov	r0, r3
 8007396:	46bd      	mov	sp, r7
 8007398:	bc80      	pop	{r7}
 800739a:	4770      	bx	lr
 800739c:	2000001c 	.word	0x2000001c

080073a0 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *set_peripheral_reset[index] |= (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	0f1b      	lsrs	r3, r3, #28
 80073ac:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80073b4:	60bb      	str	r3, [r7, #8]
  static __O uint32_t *const clear_peripheral_reset[] = {&(SCU_RESET->PRCLR0),
                                                         &(SCU_RESET->PRCLR1),
                                                         &(SCU_RESET->PRCLR2)};
#endif

  *clear_peripheral_reset[index] |= (uint32_t)mask;
 80073b6:	4a08      	ldr	r2, [pc, #32]	; (80073d8 <XMC_SCU_RESET_DeassertPeripheralReset+0x38>)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073be:	4906      	ldr	r1, [pc, #24]	; (80073d8 <XMC_SCU_RESET_DeassertPeripheralReset+0x38>)
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80073c6:	6811      	ldr	r1, [r2, #0]
 80073c8:	68ba      	ldr	r2, [r7, #8]
 80073ca:	430a      	orrs	r2, r1
 80073cc:	601a      	str	r2, [r3, #0]
}
 80073ce:	bf00      	nop
 80073d0:	3714      	adds	r7, #20
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bc80      	pop	{r7}
 80073d6:	4770      	bx	lr
 80073d8:	0800e0e0 	.word	0x0800e0e0

080073dc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80073e0:	f7ff ffd4 	bl	800738c <XMC_SCU_CLOCK_GetCpuClockFrequency>
 80073e4:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 80073e6:	4b04      	ldr	r3, [pc, #16]	; (80073f8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 80073e8:	695b      	ldr	r3, [r3, #20]
 80073ea:	f003 0301 	and.w	r3, r3, #1
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80073ee:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	50004600 	.word	0x50004600

080073fc <XMC_SCU_CLOCK_EnableClock>:
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EXTCLKCR_ECKDIV_Pos);
}

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	4603      	mov	r3, r0
 8007404:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 8007406:	4a04      	ldr	r2, [pc, #16]	; (8007418 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8007408:	79fb      	ldrb	r3, [r7, #7]
 800740a:	6053      	str	r3, [r2, #4]
}
 800740c:	bf00      	nop
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	bc80      	pop	{r7}
 8007414:	4770      	bx	lr
 8007416:	bf00      	nop
 8007418:	50004600 	.word	0x50004600

0800741c <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007428:	b2db      	uxtb	r3, r3
 800742a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800742e:	b2db      	uxtb	r3, r3
}
 8007430:	4618      	mov	r0, r3
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	bc80      	pop	{r7}
 8007438:	4770      	bx	lr
 800743a:	bf00      	nop

0800743c <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	683a      	ldr	r2, [r7, #0]
 800744a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800744c:	bf00      	nop
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	bc80      	pop	{r7}
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop

08007458 <XMC_UART_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 8007462:	2310      	movs	r3, #16
 8007464:	60fb      	str	r3, [r7, #12]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f7ff fe8c 	bl	8007184 <XMC_USIC_CH_Enable>
  
  if(config->oversampling != 0U)
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	79db      	ldrb	r3, [r3, #7]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d002      	beq.n	800747a <XMC_UART_CH_Init+0x22>
  {
    oversampling = (uint32_t)config->oversampling;
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	79db      	ldrb	r3, [r3, #7]
 8007478:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure baud rate */
  (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	68fa      	ldr	r2, [r7, #12]
 8007480:	4619      	mov	r1, r3
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f7ff fecc 	bl	8007220 <XMC_USIC_CH_SetBaudrate>
   * Configure the number of stop bits
   * Pulse length is set to 0 to have standard UART signaling, 
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	799b      	ldrb	r3, [r3, #6]
 800748c:	3b01      	subs	r3, #1
 800748e:	005a      	lsls	r2, r3, #1
			             (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	085b      	lsrs	r3, r3, #1
 8007494:	3301      	adds	r3, #1
 8007496:	021b      	lsls	r3, r3, #8
   * Configure the number of stop bits
   * Pulse length is set to 0 to have standard UART signaling, 
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8007498:	4313      	orrs	r3, r2
 800749a:	f043 0201 	orr.w	r2, r3, #1
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	791b      	ldrb	r3, [r3, #4]
 80074a6:	3b01      	subs	r3, #1
 80074a8:	061b      	lsls	r3, r3, #24
 80074aa:	f443 7281 	orr.w	r2, r3, #258	; 0x102
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	635a      	str	r2, [r3, #52]	; 0x34
		              ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	795b      	ldrb	r3, [r3, #5]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d009      	beq.n	80074ce <XMC_UART_CH_Init+0x76>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	795b      	ldrb	r3, [r3, #5]
 80074c2:	3b01      	subs	r3, #1
 80074c4:	041b      	lsls	r3, r3, #16
 80074c6:	431a      	orrs	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	635a      	str	r2, [r3, #52]	; 0x34
 80074cc:	e008      	b.n	80074e0 <XMC_UART_CH_Init+0x88>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	791b      	ldrb	r3, [r3, #4]
 80074d6:	3b01      	subs	r3, #1
 80074d8:	041b      	lsls	r3, r3, #16
 80074da:	431a      	orrs	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80074e6:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f04f 32ff 	mov.w	r2, #4294967295
 80074ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	891b      	ldrh	r3, [r3, #8]
 80074f4:	461a      	mov	r2, r3
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80074fa:	bf00      	nop
 80074fc:	3710      	adds	r7, #16
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop

08007504 <XMC_UART_CH_Transmit>:
  } 
  return status;
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	460b      	mov	r3, r1
 800750e:	807b      	strh	r3, [r7, #2]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007516:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800751a:	2b00      	cmp	r3, #0
 800751c:	d110      	bne.n	8007540 <XMC_UART_CH_Transmit+0x3c>
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 800751e:	bf00      	nop
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f7ff ff7b 	bl	800741c <XMC_USIC_CH_GetTransmitBufferStatus>
 8007526:	4603      	mov	r3, r0
 8007528:	2b80      	cmp	r3, #128	; 0x80
 800752a:	d0f9      	beq.n	8007520 <XMC_UART_CH_Transmit+0x1c>
    {
    }
  
    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 800752c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f7ff ff83 	bl	800743c <XMC_UART_CH_ClearStatusFlag>
  
    /*Transmit data */
    channel->TBUF[0U] = data;
 8007536:	887a      	ldrh	r2, [r7, #2]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = data;
  }
}
 800753e:	e003      	b.n	8007548 <XMC_UART_CH_Transmit+0x44>
    /*Transmit data */
    channel->TBUF[0U] = data;
  }
  else
  {
    channel->IN[0U] = data;
 8007540:	887a      	ldrh	r2, [r7, #2]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8007548:	bf00      	nop
 800754a:	3708      	adds	r7, #8
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <XMC_UART_CH_GetReceivedData>:

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8007550:	b480      	push	{r7}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800755e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007562:	2b00      	cmp	r3, #0
 8007564:	d103      	bne.n	800756e <XMC_UART_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800756a:	81fb      	strh	r3, [r7, #14]
 800756c:	e003      	b.n	8007576 <XMC_UART_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8007574:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 8007576:	89fb      	ldrh	r3, [r7, #14]
}
 8007578:	4618      	mov	r0, r3
 800757a:	3714      	adds	r7, #20
 800757c:	46bd      	mov	sp, r7
 800757e:	bc80      	pop	{r7}
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop

08007584 <XMC_UART_CH_EnableEvent>:
  }
  return status;
}

void XMC_UART_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
  if ((event & 0x80000000U) != 0U)
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	da08      	bge.n	80075a6 <XMC_UART_CH_EnableEvent+0x22>
  {
    /* USIC module event */
    channel->CCR |= event & 0x7fffffffU;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800759e:	431a      	orrs	r2, r3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	641a      	str	r2, [r3, #64]	; 0x40
  else
  {
    /* Protocol event */
    channel->PCR_ASCMode |= event;
  }
}
 80075a4:	e005      	b.n	80075b2 <XMC_UART_CH_EnableEvent+0x2e>
    channel->CCR |= event & 0x7fffffffU;
  }
  else
  {
    /* Protocol event */
    channel->PCR_ASCMode |= event;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	431a      	orrs	r2, r3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
}
 80075b2:	bf00      	nop
 80075b4:	370c      	adds	r7, #12
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bc80      	pop	{r7}
 80075ba:	4770      	bx	lr

080075bc <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b082      	sub	sp, #8
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_CHECK_MODULE_PTR(module));

# if (UC_FAMILY == XMC4)
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 80075c4:	2010      	movs	r0, #16
 80075c6:	f7ff ff19 	bl	80073fc <XMC_SCU_CLOCK_EnableClock>

  /* De-assert CCU4 module */
  XMC_CCU4_lDeassertReset(module);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 f970 	bl	80078b0 <XMC_CCU4_lDeassertReset>
# if ((UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41) || (UC_FAMILY == XMC1))
  /* Disable CCU4 clock gating */
  XMC_CCU4_lUngateClock(module);
# endif

}
 80075d0:	bf00      	nop
 80075d2:	3708      	adds	r7, #8
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <XMC_CCU4_Init>:

}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	460b      	mov	r3, r1
 80075e2:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_CHECK_MODULE_PTR(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f7ff ffe9 	bl	80075bc <XMC_CCU4_EnableModule>

  gctrl = module->GCTRL;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80075f6:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 80075f8:	78fb      	ldrb	r3, [r7, #3]
 80075fa:	039b      	lsls	r3, r3, #14
 80075fc:	68fa      	ldr	r2, [r7, #12]
 80075fe:	4313      	orrs	r3, r2
 8007600:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	601a      	str	r2, [r3, #0]
}
 8007608:	bf00      	nop
 800760a:	3710      	adds	r7, #16
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <XMC_CCU4_SetModuleClock>:

/* API to select CCU4 module clock */
void XMC_CCU4_SetModuleClock(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_CLOCK_t clock)
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	460b      	mov	r3, r1
 800761a:	70fb      	strb	r3, [r7, #3]
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Pointer", XMC_CCU4_CHECK_MODULE_PTR(module));
  XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Clock", XMC_CCU4_SLICE_CHECK_CLOCK(clock));

  gctrl = module->GCTRL;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_PCIS_Msk);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007628:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) clock) << CCU4_GCTRL_PCIS_Pos;
 800762a:	78fb      	ldrb	r3, [r7, #3]
 800762c:	011b      	lsls	r3, r3, #4
 800762e:	68fa      	ldr	r2, [r7, #12]
 8007630:	4313      	orrs	r3, r2
 8007632:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	601a      	str	r2, [r3, #0]
}
 800763a:	bf00      	nop
 800763c:	3714      	adds	r7, #20
 800763e:	46bd      	mov	sp, r7
 8007640:	bc80      	pop	{r7}
 8007642:	4770      	bx	lr

08007644 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
		                            const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	795b      	ldrb	r3, [r3, #5]
 800765a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800765e:	b2db      	uxtb	r3, r3
 8007660:	051a      	lsls	r2, r3, #20
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	791b      	ldrb	r3, [r3, #4]
 800766a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800766e:	b2db      	uxtb	r3, r3
 8007670:	461a      	mov	r2, r3
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	795b      	ldrb	r3, [r3, #5]
 800767a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800767e:	b2db      	uxtb	r3, r3
 8007680:	461a      	mov	r2, r3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	795b      	ldrb	r3, [r3, #5]
 800768a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800768e:	b2db      	uxtb	r3, r3
 8007690:	461a      	mov	r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	791b      	ldrb	r3, [r3, #4]
 800769a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	461a      	mov	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80076a6:	bf00      	nop
 80076a8:	370c      	adds	r7, #12
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bc80      	pop	{r7}
 80076ae:	4770      	bx	lr

080076b0 <XMC_CCU4_SLICE_StartConfig>:

/* API to configure the Start trigger function of a slice */
void XMC_CCU4_SLICE_StartConfig(XMC_CCU4_SLICE_t *const slice,
		                        const XMC_CCU4_SLICE_EVENT_t event,
                                const XMC_CCU4_SLICE_START_MODE_t start_mode)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	460b      	mov	r3, r1
 80076ba:	70fb      	strb	r3, [r7, #3]
 80076bc:	4613      	mov	r3, r2
 80076be:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Start Mode", 
             ((start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR) ||\
		          (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START)));
  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	60bb      	str	r3, [r7, #8]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_STRTS_Msk);
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	f023 0303 	bic.w	r3, r3, #3
 80076cc:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_STRTS_Pos;
 80076ce:	78fb      	ldrb	r3, [r7, #3]
 80076d0:	68ba      	ldr	r2, [r7, #8]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	68ba      	ldr	r2, [r7, #8]
 80076da:	605a      	str	r2, [r3, #4]
  
  tc  = slice->TC;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	695b      	ldr	r3, [r3, #20]
 80076e0:	60fb      	str	r3, [r7, #12]
  /* Next, Configure the start mode */
  if (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR)
 80076e2:	78bb      	ldrb	r3, [r7, #2]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d104      	bne.n	80076f2 <XMC_CCU4_SLICE_StartConfig+0x42>
  {
    tc |= (uint32_t)CCU4_CC4_TC_STRM_Msk;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80076ee:	60fb      	str	r3, [r7, #12]
 80076f0:	e003      	b.n	80076fa <XMC_CCU4_SLICE_StartConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t)CCU4_CC4_TC_STRM_Msk);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076f8:	60fb      	str	r3, [r7, #12]
  }
  
  slice->TC = tc;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	615a      	str	r2, [r3, #20]
}
 8007700:	bf00      	nop
 8007702:	3714      	adds	r7, #20
 8007704:	46bd      	mov	sp, r7
 8007706:	bc80      	pop	{r7}
 8007708:	4770      	bx	lr
 800770a:	bf00      	nop

0800770c <XMC_CCU4_SLICE_ConfigureEvent>:

/* API to configure a slice trigger event */
void XMC_CCU4_SLICE_ConfigureEvent(XMC_CCU4_SLICE_t *const slice,
		                               const XMC_CCU4_SLICE_EVENT_t event,
                                   const XMC_CCU4_SLICE_EVENT_CONFIG_t *const config)
{
 800770c:	b480      	push	{r7}
 800770e:	b087      	sub	sp, #28
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	460b      	mov	r3, r1
 8007716:	607a      	str	r2, [r7, #4]
 8007718:	72fb      	strb	r3, [r7, #11]
             ((config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
              (config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Debounce Period", 
             XMC_CCU4_SLICE_CHECK_EVENT_FILTER(config->duration));
  
  ins = slice->INS;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	617b      	str	r3, [r7, #20]
  
  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
 8007720:	7afb      	ldrb	r3, [r7, #11]
 8007722:	3b01      	subs	r3, #1
 8007724:	74fb      	strb	r3, [r7, #19]

  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU4_CC4_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
 8007726:	7cfb      	ldrb	r3, [r7, #19]
 8007728:	005b      	lsls	r3, r3, #1
 800772a:	b2db      	uxtb	r3, r3
 800772c:	3310      	adds	r3, #16
 800772e:	74bb      	strb	r3, [r7, #18]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 8007730:	7cbb      	ldrb	r3, [r7, #18]
 8007732:	2203      	movs	r2, #3
 8007734:	fa02 f303 	lsl.w	r3, r2, r3
 8007738:	43db      	mvns	r3, r3
 800773a:	697a      	ldr	r2, [r7, #20]
 800773c:	4013      	ands	r3, r2
 800773e:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) config->edge) << pos;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	785b      	ldrb	r3, [r3, #1]
 8007744:	461a      	mov	r2, r3
 8007746:	7cbb      	ldrb	r3, [r7, #18]
 8007748:	fa02 f303 	lsl.w	r3, r2, r3
 800774c:	697a      	ldr	r2, [r7, #20]
 800774e:	4313      	orrs	r3, r2
 8007750:	617b      	str	r3, [r7, #20]
  
  /* Next, the level */
  pos = ((uint8_t) CCU4_CC4_INS_EV0LM_Pos) + offset;
 8007752:	7cfb      	ldrb	r3, [r7, #19]
 8007754:	3316      	adds	r3, #22
 8007756:	74bb      	strb	r3, [r7, #18]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 8007758:	7cbb      	ldrb	r3, [r7, #18]
 800775a:	2201      	movs	r2, #1
 800775c:	fa02 f303 	lsl.w	r3, r2, r3
 8007760:	43db      	mvns	r3, r3
 8007762:	697a      	ldr	r2, [r7, #20]
 8007764:	4013      	ands	r3, r2
 8007766:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) config->level) << pos;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	789b      	ldrb	r3, [r3, #2]
 800776c:	461a      	mov	r2, r3
 800776e:	7cbb      	ldrb	r3, [r7, #18]
 8007770:	fa02 f303 	lsl.w	r3, r2, r3
 8007774:	697a      	ldr	r2, [r7, #20]
 8007776:	4313      	orrs	r3, r2
 8007778:	617b      	str	r3, [r7, #20]
  
  /* Next, the debounce filter */
  pos = ((uint8_t) CCU4_CC4_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
 800777a:	7cfb      	ldrb	r3, [r7, #19]
 800777c:	005b      	lsls	r3, r3, #1
 800777e:	b2db      	uxtb	r3, r3
 8007780:	3319      	adds	r3, #25
 8007782:	74bb      	strb	r3, [r7, #18]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 8007784:	7cbb      	ldrb	r3, [r7, #18]
 8007786:	2203      	movs	r2, #3
 8007788:	fa02 f303 	lsl.w	r3, r2, r3
 800778c:	43db      	mvns	r3, r3
 800778e:	697a      	ldr	r2, [r7, #20]
 8007790:	4013      	ands	r3, r2
 8007792:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) config->duration) << pos;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	78db      	ldrb	r3, [r3, #3]
 8007798:	461a      	mov	r2, r3
 800779a:	7cbb      	ldrb	r3, [r7, #18]
 800779c:	fa02 f303 	lsl.w	r3, r2, r3
 80077a0:	697a      	ldr	r2, [r7, #20]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	617b      	str	r3, [r7, #20]

  /* Finally the input */
  pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
 80077a6:	7cfb      	ldrb	r3, [r7, #19]
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	74bb      	strb	r3, [r7, #18]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 80077ac:	7cbb      	ldrb	r3, [r7, #18]
 80077ae:	220f      	movs	r2, #15
 80077b0:	fa02 f303 	lsl.w	r3, r2, r3
 80077b4:	43db      	mvns	r3, r3
 80077b6:	697a      	ldr	r2, [r7, #20]
 80077b8:	4013      	ands	r3, r2
 80077ba:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) config->mapped_input) << pos;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	461a      	mov	r2, r3
 80077c2:	7cbb      	ldrb	r3, [r7, #18]
 80077c4:	fa02 f303 	lsl.w	r3, r2, r3
 80077c8:	697a      	ldr	r2, [r7, #20]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	617b      	str	r3, [r7, #20]

  slice->INS = ins;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	697a      	ldr	r2, [r7, #20]
 80077d2:	601a      	str	r2, [r3, #0]
}
 80077d4:	bf00      	nop
 80077d6:	371c      	adds	r7, #28
 80077d8:	46bd      	mov	sp, r7
 80077da:	bc80      	pop	{r7}
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop

080077e0 <XMC_CCU4_EnableShadowTransfer>:
  slice->PSC = (uint32_t) div_val;
}

/* Transfers value from shadow timer registers to actual timer registers */
void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_CHECK_MODULE_PTR(module));
  module->GCSS |= (uint32_t)shadow_transfer_msk;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	691a      	ldr	r2, [r3, #16]
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	431a      	orrs	r2, r3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	611a      	str	r2, [r3, #16]
}
 80077f6:	bf00      	nop
 80077f8:	370c      	adds	r7, #12
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bc80      	pop	{r7}
 80077fe:	4770      	bx	lr

08007800 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8007800:	b480      	push	{r7}
 8007802:	b087      	sub	sp, #28
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	460b      	mov	r3, r1
 800780a:	70fb      	strb	r3, [r7, #3]
 800780c:	4613      	mov	r3, r2
 800780e:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007816:	60fb      	str	r3, [r7, #12]
  
  switch(event)
 8007818:	78fb      	ldrb	r3, [r7, #3]
 800781a:	2b09      	cmp	r3, #9
 800781c:	d82c      	bhi.n	8007878 <XMC_CCU4_SLICE_SetInterruptNode+0x78>
 800781e:	a201      	add	r2, pc, #4	; (adr r2, 8007824 <XMC_CCU4_SLICE_SetInterruptNode+0x24>)
 8007820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007824:	0800784d 	.word	0x0800784d
 8007828:	0800784d 	.word	0x0800784d
 800782c:	08007857 	.word	0x08007857
 8007830:	08007857 	.word	0x08007857
 8007834:	08007879 	.word	0x08007879
 8007838:	08007879 	.word	0x08007879
 800783c:	08007879 	.word	0x08007879
 8007840:	08007879 	.word	0x08007879
 8007844:	08007861 	.word	0x08007861
 8007848:	0800786d 	.word	0x0800786d
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 800784c:	2303      	movs	r3, #3
 800784e:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 8007850:	2300      	movs	r3, #0
 8007852:	617b      	str	r3, [r7, #20]
      break;
 8007854:	e016      	b.n	8007884 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 8007856:	230c      	movs	r3, #12
 8007858:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 800785a:	2302      	movs	r3, #2
 800785c:	617b      	str	r3, [r7, #20]
      break;
 800785e:	e011      	b.n	8007884 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 8007860:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007864:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 8007866:	2308      	movs	r3, #8
 8007868:	617b      	str	r3, [r7, #20]
      break;
 800786a:	e00b      	b.n	8007884 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 800786c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007870:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 8007872:	230a      	movs	r3, #10
 8007874:	617b      	str	r3, [r7, #20]
      break;
 8007876:	e005      	b.n	8007884 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 8007878:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800787c:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 800787e:	230c      	movs	r3, #12
 8007880:	617b      	str	r3, [r7, #20]
      break;
 8007882:	bf00      	nop
  }
  
  srs &= ~mask; 
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	43db      	mvns	r3, r3
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	4013      	ands	r3, r2
 800788c:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 800788e:	78ba      	ldrb	r2, [r7, #2]
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	fa02 f303 	lsl.w	r3, r2, r3
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	4313      	orrs	r3, r2
 800789a:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 80078a4:	bf00      	nop
 80078a6:	371c      	adds	r7, #28
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bc80      	pop	{r7}
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop

080078b0 <XMC_CCU4_lDeassertReset>:
}

#if (UC_FAMILY == XMC4)
/* De-asserts CCU4 module from reset state */
void XMC_CCU4_lDeassertReset(XMC_CCU4_MODULE_t *const module)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  /* Enable the module */
  # if ((UC_SERIES == XMC45) || (UC_SERIES == XMC44))
	if (CCU40 == module)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a0f      	ldr	r2, [pc, #60]	; (80078f8 <XMC_CCU4_lDeassertReset+0x48>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d103      	bne.n	80078c8 <XMC_CCU4_lDeassertReset+0x18>
	{
	  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 80078c0:	2004      	movs	r0, #4
 80078c2:	f7ff fd6d 	bl	80073a0 <XMC_SCU_RESET_DeassertPeripheralReset>
	else
	{
	  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
	}
  # endif
}
 80078c6:	e012      	b.n	80078ee <XMC_CCU4_lDeassertReset+0x3e>
  # if ((UC_SERIES == XMC45) || (UC_SERIES == XMC44))
	if (CCU40 == module)
	{
	  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
	}
	else if (CCU41 == module)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4a0c      	ldr	r2, [pc, #48]	; (80078fc <XMC_CCU4_lDeassertReset+0x4c>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d103      	bne.n	80078d8 <XMC_CCU4_lDeassertReset+0x28>
	{
	  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 80078d0:	2008      	movs	r0, #8
 80078d2:	f7ff fd65 	bl	80073a0 <XMC_SCU_RESET_DeassertPeripheralReset>
	else
	{
	  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
	}
  # endif
}
 80078d6:	e00a      	b.n	80078ee <XMC_CCU4_lDeassertReset+0x3e>
	}
	else if (CCU41 == module)
	{
	  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
	}
	else if (CCU42 == module)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4a09      	ldr	r2, [pc, #36]	; (8007900 <XMC_CCU4_lDeassertReset+0x50>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d103      	bne.n	80078e8 <XMC_CCU4_lDeassertReset+0x38>
	{
	  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 80078e0:	2010      	movs	r0, #16
 80078e2:	f7ff fd5d 	bl	80073a0 <XMC_SCU_RESET_DeassertPeripheralReset>
	else
	{
	  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
	}
  # endif
}
 80078e6:	e002      	b.n	80078ee <XMC_CCU4_lDeassertReset+0x3e>
	{
	  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
	}
	else
	{
	  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 80078e8:	4806      	ldr	r0, [pc, #24]	; (8007904 <XMC_CCU4_lDeassertReset+0x54>)
 80078ea:	f7ff fd59 	bl	80073a0 <XMC_SCU_RESET_DeassertPeripheralReset>
	else
	{
	  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
	}
  # endif
}
 80078ee:	bf00      	nop
 80078f0:	3708      	adds	r7, #8
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	4000c000 	.word	0x4000c000
 80078fc:	40010000 	.word	0x40010000
 8007900:	40014000 	.word	0x40014000
 8007904:	10000001 	.word	0x10000001

08007908 <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	460b      	mov	r3, r1
 8007912:	70fb      	strb	r3, [r7, #3]
 8007914:	4613      	mov	r3, r2
 8007916:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_CHECK_MODE(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 8007918:	78fb      	ldrb	r3, [r7, #3]
 800791a:	089b      	lsrs	r3, r3, #2
 800791c:	b2db      	uxtb	r3, r3
 800791e:	4618      	mov	r0, r3
 8007920:	78fb      	ldrb	r3, [r7, #3]
 8007922:	089b      	lsrs	r3, r3, #2
 8007924:	b2db      	uxtb	r3, r3
 8007926:	461a      	mov	r2, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	3204      	adds	r2, #4
 800792c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007930:	78fb      	ldrb	r3, [r7, #3]
 8007932:	f003 0303 	and.w	r3, r3, #3
 8007936:	00db      	lsls	r3, r3, #3
 8007938:	21f8      	movs	r1, #248	; 0xf8
 800793a:	fa01 f303 	lsl.w	r3, r1, r3
 800793e:	43db      	mvns	r3, r3
 8007940:	ea02 0103 	and.w	r1, r2, r3
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	1d02      	adds	r2, r0, #4
 8007948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 800794c:	78fb      	ldrb	r3, [r7, #3]
 800794e:	089b      	lsrs	r3, r3, #2
 8007950:	b2db      	uxtb	r3, r3
 8007952:	4618      	mov	r0, r3
 8007954:	78fb      	ldrb	r3, [r7, #3]
 8007956:	089b      	lsrs	r3, r3, #2
 8007958:	b2db      	uxtb	r3, r3
 800795a:	461a      	mov	r2, r3
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	3204      	adds	r2, #4
 8007960:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007964:	78b9      	ldrb	r1, [r7, #2]
 8007966:	78fb      	ldrb	r3, [r7, #3]
 8007968:	f003 0303 	and.w	r3, r3, #3
 800796c:	00db      	lsls	r3, r3, #3
 800796e:	fa01 f303 	lsl.w	r3, r1, r3
 8007972:	ea42 0103 	orr.w	r1, r2, r3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	1d02      	adds	r2, r0, #4
 800797a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800797e:	bf00      	nop
 8007980:	370c      	adds	r7, #12
 8007982:	46bd      	mov	sp, r7
 8007984:	bc80      	pop	{r7}
 8007986:	4770      	bx	lr

08007988 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8007988:	b480      	push	{r7}
 800798a:	b085      	sub	sp, #20
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	460b      	mov	r3, r1
 8007992:	607a      	str	r2, [r7, #4]
 8007994:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_CHECK_MODE(config->mode));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 8007996:	7afb      	ldrb	r3, [r7, #11]
 8007998:	089b      	lsrs	r3, r3, #2
 800799a:	b2db      	uxtb	r3, r3
 800799c:	4618      	mov	r0, r3
 800799e:	7afb      	ldrb	r3, [r7, #11]
 80079a0:	089b      	lsrs	r3, r3, #2
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	461a      	mov	r2, r3
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	3204      	adds	r2, #4
 80079aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80079ae:	7afb      	ldrb	r3, [r7, #11]
 80079b0:	f003 0303 	and.w	r3, r3, #3
 80079b4:	00db      	lsls	r3, r3, #3
 80079b6:	21f8      	movs	r1, #248	; 0xf8
 80079b8:	fa01 f303 	lsl.w	r3, r1, r3
 80079bc:	43db      	mvns	r3, r3
 80079be:	ea02 0103 	and.w	r1, r2, r3
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	1d02      	adds	r2, r0, #4
 80079c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80079ce:	7afb      	ldrb	r3, [r7, #11]
 80079d0:	005b      	lsls	r3, r3, #1
 80079d2:	2103      	movs	r1, #3
 80079d4:	fa01 f303 	lsl.w	r3, r1, r3
 80079d8:	43db      	mvns	r3, r3
 80079da:	401a      	ands	r2, r3
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	4a37      	ldr	r2, [pc, #220]	; (8007ac0 <XMC_GPIO_Init+0x138>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d003      	beq.n	80079f0 <XMC_GPIO_Init+0x68>
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	4a36      	ldr	r2, [pc, #216]	; (8007ac4 <XMC_GPIO_Init+0x13c>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d10a      	bne.n	8007a06 <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80079f4:	7afb      	ldrb	r3, [r7, #11]
 80079f6:	2101      	movs	r1, #1
 80079f8:	fa01 f303 	lsl.w	r3, r1, r3
 80079fc:	43db      	mvns	r3, r3
 80079fe:	401a      	ands	r2, r3
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	661a      	str	r2, [r3, #96]	; 0x60
 8007a04:	e03c      	b.n	8007a80 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	685a      	ldr	r2, [r3, #4]
 8007a0a:	7afb      	ldrb	r3, [r7, #11]
 8007a0c:	409a      	lsls	r2, r3
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8007a12:	7afb      	ldrb	r3, [r7, #11]
 8007a14:	08db      	lsrs	r3, r3, #3
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	4618      	mov	r0, r3
 8007a1a:	7afb      	ldrb	r3, [r7, #11]
 8007a1c:	08db      	lsrs	r3, r3, #3
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	461a      	mov	r2, r3
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	3210      	adds	r2, #16
 8007a26:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007a2a:	7afb      	ldrb	r3, [r7, #11]
 8007a2c:	f003 0307 	and.w	r3, r3, #7
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	2107      	movs	r1, #7
 8007a34:	fa01 f303 	lsl.w	r3, r1, r3
 8007a38:	43db      	mvns	r3, r3
 8007a3a:	ea02 0103 	and.w	r1, r2, r3
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f100 0210 	add.w	r2, r0, #16
 8007a44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8007a48:	7afb      	ldrb	r3, [r7, #11]
 8007a4a:	08db      	lsrs	r3, r3, #3
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	4618      	mov	r0, r3
 8007a50:	7afb      	ldrb	r3, [r7, #11]
 8007a52:	08db      	lsrs	r3, r3, #3
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	461a      	mov	r2, r3
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	3210      	adds	r2, #16
 8007a5c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	7a1b      	ldrb	r3, [r3, #8]
 8007a64:	4619      	mov	r1, r3
 8007a66:	7afb      	ldrb	r3, [r7, #11]
 8007a68:	f003 0307 	and.w	r3, r3, #7
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8007a72:	ea42 0103 	orr.w	r1, r2, r3
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f100 0210 	add.w	r2, r0, #16
 8007a7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8007a80:	7afb      	ldrb	r3, [r7, #11]
 8007a82:	089b      	lsrs	r3, r3, #2
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	4618      	mov	r0, r3
 8007a88:	7afb      	ldrb	r3, [r7, #11]
 8007a8a:	089b      	lsrs	r3, r3, #2
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	461a      	mov	r2, r3
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	3204      	adds	r2, #4
 8007a94:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	7afb      	ldrb	r3, [r7, #11]
 8007aa0:	f003 0303 	and.w	r3, r3, #3
 8007aa4:	00db      	lsls	r3, r3, #3
 8007aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8007aaa:	ea42 0103 	orr.w	r1, r2, r3
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	1d02      	adds	r2, r0, #4
 8007ab2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8007ab6:	bf00      	nop
 8007ab8:	3714      	adds	r7, #20
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bc80      	pop	{r7}
 8007abe:	4770      	bx	lr
 8007ac0:	48028e00 	.word	0x48028e00
 8007ac4:	48028f00 	.word	0x48028f00

08007ac8 <Reset_Handler>:
    .section  .text.Reset_Handler
    .weak  Reset_Handler
    .type  Reset_Handler, %function
Reset_Handler:
                                            @ Disable Branch prediction.
    ldr r0,=PREF_PCON
 8007ac8:	4817      	ldr	r0, [pc, #92]	; (8007b28 <LoopForever+0x2>)
    ldr r1,[r0]
 8007aca:	6801      	ldr	r1, [r0, #0]
    orr r1,r1,#0x00010000
 8007acc:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
    str r1,[r0]
 8007ad0:	6001      	str	r1, [r0, #0]

                                            @ Clear existing parity errors if any.
    ldr r0,=SCU_GCU_PEFLAG
 8007ad2:	4816      	ldr	r0, [pc, #88]	; (8007b2c <LoopForever+0x6>)
    ldr r1,=0xFFFFFFFF
 8007ad4:	f04f 31ff 	mov.w	r1, #4294967295
    str r1,[r0]
 8007ad8:	6001      	str	r1, [r0, #0]

                                            @ Disable parity.
    ldr r0,=SCU_GCU_PEEN
 8007ada:	4815      	ldr	r0, [pc, #84]	; (8007b30 <LoopForever+0xa>)
    mov r1,#0
 8007adc:	f04f 0100 	mov.w	r1, #0
    str r1,[R0]
 8007ae0:	6001      	str	r1, [r0, #0]
    AND     R1,  R1, #(0x3FFFFFFF)          @ Clear the LSPEN and ASPEN bits
    STR     R1, [R0]
    ISB                                     @ Reset pipeline now the FPU is enabled
#endif

    LDR     R1, =0xE000ED14                 @ Load address to CCR register
 8007ae2:	4914      	ldr	r1, [pc, #80]	; (8007b34 <LoopForever+0xe>)
    LDR.W   R0, [R1, #0x0]
 8007ae4:	f8d1 0000 	ldr.w	r0, [r1]
    BIC     R0,  R0, #0x8                   @ Enable unaligned memory access
 8007ae8:	f020 0008 	bic.w	r0, r0, #8
    STR.W   R0, [R1, #0x0]
 8007aec:	f8c1 0000 	str.w	r0, [r1]

    ldr sp, =_estack                        @ set stack pointer.
 8007af0:	f8df d044 	ldr.w	sp, [pc, #68]	; 8007b38 <LoopForever+0x12>

                                            @ a) copy .data section (Copy from ROM to RAM).
    movs r1, #0
 8007af4:	2100      	movs	r1, #0
    b LoopCopyDataInit
 8007af6:	e003      	b.n	8007b00 <LoopCopyDataInit>

08007af8 <CopyDataInit>:

CopyDataInit:
    ldr r3, =_sidata
 8007af8:	4b10      	ldr	r3, [pc, #64]	; (8007b3c <LoopForever+0x16>)
    ldr r3, [r3, r1]
 8007afa:	585b      	ldr	r3, [r3, r1]
    str r3, [r0, r1]
 8007afc:	5043      	str	r3, [r0, r1]
    adds r1, r1, #4
 8007afe:	3104      	adds	r1, #4

08007b00 <LoopCopyDataInit>:

LoopCopyDataInit:
    ldr r0, =_sdata
 8007b00:	480f      	ldr	r0, [pc, #60]	; (8007b40 <LoopForever+0x1a>)
    ldr r3, =_edata
 8007b02:	4b10      	ldr	r3, [pc, #64]	; (8007b44 <LoopForever+0x1e>)
    adds r2, r0, r1
 8007b04:	1842      	adds	r2, r0, r1
    cmp r2, r3
 8007b06:	429a      	cmp	r2, r3
    bcc CopyDataInit
 8007b08:	d3f6      	bcc.n	8007af8 <CopyDataInit>
    ldr r2, =_sbss
 8007b0a:	4a0f      	ldr	r2, [pc, #60]	; (8007b48 <LoopForever+0x22>)
    b LoopFillZerobss
 8007b0c:	e002      	b.n	8007b14 <LoopFillZerobss>

08007b0e <FillZerobss>:

                                            @ b) Clear .bss section (Zero init).
FillZerobss:
    movs r3, #0
 8007b0e:	2300      	movs	r3, #0
    str r3, [r2], #4
 8007b10:	f842 3b04 	str.w	r3, [r2], #4

08007b14 <LoopFillZerobss>:

LoopFillZerobss:
    ldr r3, = _ebss
 8007b14:	4b0d      	ldr	r3, [pc, #52]	; (8007b4c <LoopForever+0x26>)
    cmp r2, r3
 8007b16:	429a      	cmp	r2, r3
    bcc FillZerobss
 8007b18:	d3f9      	bcc.n	8007b0e <FillZerobss>

    bl BSP_LowLevelInit                     @ c) Call system initialzation routine.
 8007b1a:	f7ff f873 	bl	8006c04 <BSP_LowLevelInit>

    bl __libc_init_array                    @ d) Run static constructors.
 8007b1e:	f000 f81d 	bl	8007b5c <__libc_init_array>

    bl main                                 @ e) Enter main.
 8007b22:	f7f9 fb7d 	bl	8001220 <main>

08007b26 <LoopForever>:

                                            @ f) Loop forever if returning from main.
LoopForever:
    b LoopForever
 8007b26:	e7fe      	b.n	8007b26 <LoopForever>
    .section  .text.Reset_Handler
    .weak  Reset_Handler
    .type  Reset_Handler, %function
Reset_Handler:
                                            @ Disable Branch prediction.
    ldr r0,=PREF_PCON
 8007b28:	58004000 	.word	0x58004000
    ldr r1,[r0]
    orr r1,r1,#0x00010000
    str r1,[r0]

                                            @ Clear existing parity errors if any.
    ldr r0,=SCU_GCU_PEFLAG
 8007b2c:	50004150 	.word	0x50004150
    ldr r1,=0xFFFFFFFF
    str r1,[r0]

                                            @ Disable parity.
    ldr r0,=SCU_GCU_PEEN
 8007b30:	5000413c 	.word	0x5000413c
    AND     R1,  R1, #(0x3FFFFFFF)          @ Clear the LSPEN and ASPEN bits
    STR     R1, [R0]
    ISB                                     @ Reset pipeline now the FPU is enabled
#endif

    LDR     R1, =0xE000ED14                 @ Load address to CCR register
 8007b34:	e000ed14 	.word	0xe000ed14
    LDR.W   R0, [R1, #0x0]
    BIC     R0,  R0, #0x8                   @ Enable unaligned memory access
    STR.W   R0, [R1, #0x0]

    ldr sp, =_estack                        @ set stack pointer.
 8007b38:	20010000 	.word	0x20010000
                                            @ a) copy .data section (Copy from ROM to RAM).
    movs r1, #0
    b LoopCopyDataInit

CopyDataInit:
    ldr r3, =_sidata
 8007b3c:	0800e3a4 	.word	0x0800e3a4
    ldr r3, [r3, r1]
    str r3, [r0, r1]
    adds r1, r1, #4

LoopCopyDataInit:
    ldr r0, =_sdata
 8007b40:	20000000 	.word	0x20000000
    ldr r3, =_edata
 8007b44:	200009c8 	.word	0x200009c8
    adds r2, r0, r1
    cmp r2, r3
    bcc CopyDataInit
    ldr r2, =_sbss
 8007b48:	200009c8 	.word	0x200009c8
FillZerobss:
    movs r3, #0
    str r3, [r2], #4

LoopFillZerobss:
    ldr r3, = _ebss
 8007b4c:	2000377c 	.word	0x2000377c

08007b50 <App_NMI_ISR>:

@ Dummy Exception Handlers (infinite loops which can be modified)

    .section	.text.App_NMI_ISR
App_NMI_ISR:
	b	App_NMI_ISR
 8007b50:	e7fe      	b.n	8007b50 <App_NMI_ISR>

08007b52 <App_Fault_ISR>:
	.size	App_NMI_ISR, .-App_NMI_ISR


    .section	.text.App_Fault_ISR
App_Fault_ISR:
	b	App_Fault_ISR
 8007b52:	e7fe      	b.n	8007b52 <App_Fault_ISR>

08007b54 <App_MemFault_ISR>:
	.size	App_Fault_ISR, .-App_Fault_ISR


    .section	.text.App_MemFault_ISR
App_MemFault_ISR:
	b	App_MemFault_ISR
 8007b54:	e7fe      	b.n	8007b54 <App_MemFault_ISR>

08007b56 <App_BusFault_ISR>:
	.size	App_MemFault_ISR, .-App_MemFault_ISR


    .section	.text.App_BusFault_ISR
App_BusFault_ISR:
	b	App_BusFault_ISR
 8007b56:	e7fe      	b.n	8007b56 <App_BusFault_ISR>

08007b58 <App_UsageFault_ISR>:
	.size	App_BusFault_ISR, .-App_BusFault_ISR


    .section	.text.App_UsageFault_ISR
App_UsageFault_ISR:
	b	App_UsageFault_ISR
 8007b58:	e7fe      	b.n	8007b58 <App_UsageFault_ISR>

08007b5a <App_Spurious_ISR>:
	.size	App_UsageFault_ISR, .-App_UsageFault_ISR

    .section	.text.App_Spurious_ISR
App_Spurious_ISR:
	b	App_Spurious_ISR
 8007b5a:	e7fe      	b.n	8007b5a <App_Spurious_ISR>

08007b5c <__libc_init_array>:
 8007b5c:	b570      	push	{r4, r5, r6, lr}
 8007b5e:	4e0f      	ldr	r6, [pc, #60]	; (8007b9c <__libc_init_array+0x40>)
 8007b60:	4d0f      	ldr	r5, [pc, #60]	; (8007ba0 <__libc_init_array+0x44>)
 8007b62:	1b76      	subs	r6, r6, r5
 8007b64:	10b6      	asrs	r6, r6, #2
 8007b66:	bf18      	it	ne
 8007b68:	2400      	movne	r4, #0
 8007b6a:	d005      	beq.n	8007b78 <__libc_init_array+0x1c>
 8007b6c:	3401      	adds	r4, #1
 8007b6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b72:	4798      	blx	r3
 8007b74:	42a6      	cmp	r6, r4
 8007b76:	d1f9      	bne.n	8007b6c <__libc_init_array+0x10>
 8007b78:	4e0a      	ldr	r6, [pc, #40]	; (8007ba4 <__libc_init_array+0x48>)
 8007b7a:	4d0b      	ldr	r5, [pc, #44]	; (8007ba8 <__libc_init_array+0x4c>)
 8007b7c:	1b76      	subs	r6, r6, r5
 8007b7e:	f7ff faef 	bl	8007160 <_init>
 8007b82:	10b6      	asrs	r6, r6, #2
 8007b84:	bf18      	it	ne
 8007b86:	2400      	movne	r4, #0
 8007b88:	d006      	beq.n	8007b98 <__libc_init_array+0x3c>
 8007b8a:	3401      	adds	r4, #1
 8007b8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b90:	4798      	blx	r3
 8007b92:	42a6      	cmp	r6, r4
 8007b94:	d1f9      	bne.n	8007b8a <__libc_init_array+0x2e>
 8007b96:	bd70      	pop	{r4, r5, r6, pc}
 8007b98:	bd70      	pop	{r4, r5, r6, pc}
 8007b9a:	bf00      	nop
 8007b9c:	0800e3a4 	.word	0x0800e3a4
 8007ba0:	0800e3a4 	.word	0x0800e3a4
 8007ba4:	0800e3a4 	.word	0x0800e3a4
 8007ba8:	0800e3a4 	.word	0x0800e3a4

08007bac <memset>:
 8007bac:	b470      	push	{r4, r5, r6}
 8007bae:	0784      	lsls	r4, r0, #30
 8007bb0:	d046      	beq.n	8007c40 <memset+0x94>
 8007bb2:	1e54      	subs	r4, r2, #1
 8007bb4:	2a00      	cmp	r2, #0
 8007bb6:	d041      	beq.n	8007c3c <memset+0x90>
 8007bb8:	b2cd      	uxtb	r5, r1
 8007bba:	4603      	mov	r3, r0
 8007bbc:	e002      	b.n	8007bc4 <memset+0x18>
 8007bbe:	1e62      	subs	r2, r4, #1
 8007bc0:	b3e4      	cbz	r4, 8007c3c <memset+0x90>
 8007bc2:	4614      	mov	r4, r2
 8007bc4:	f803 5b01 	strb.w	r5, [r3], #1
 8007bc8:	079a      	lsls	r2, r3, #30
 8007bca:	d1f8      	bne.n	8007bbe <memset+0x12>
 8007bcc:	2c03      	cmp	r4, #3
 8007bce:	d92e      	bls.n	8007c2e <memset+0x82>
 8007bd0:	b2cd      	uxtb	r5, r1
 8007bd2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8007bd6:	2c0f      	cmp	r4, #15
 8007bd8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8007bdc:	d919      	bls.n	8007c12 <memset+0x66>
 8007bde:	f103 0210 	add.w	r2, r3, #16
 8007be2:	4626      	mov	r6, r4
 8007be4:	3e10      	subs	r6, #16
 8007be6:	2e0f      	cmp	r6, #15
 8007be8:	f842 5c10 	str.w	r5, [r2, #-16]
 8007bec:	f842 5c0c 	str.w	r5, [r2, #-12]
 8007bf0:	f842 5c08 	str.w	r5, [r2, #-8]
 8007bf4:	f842 5c04 	str.w	r5, [r2, #-4]
 8007bf8:	f102 0210 	add.w	r2, r2, #16
 8007bfc:	d8f2      	bhi.n	8007be4 <memset+0x38>
 8007bfe:	f1a4 0210 	sub.w	r2, r4, #16
 8007c02:	f022 020f 	bic.w	r2, r2, #15
 8007c06:	f004 040f 	and.w	r4, r4, #15
 8007c0a:	3210      	adds	r2, #16
 8007c0c:	2c03      	cmp	r4, #3
 8007c0e:	4413      	add	r3, r2
 8007c10:	d90d      	bls.n	8007c2e <memset+0x82>
 8007c12:	461e      	mov	r6, r3
 8007c14:	4622      	mov	r2, r4
 8007c16:	3a04      	subs	r2, #4
 8007c18:	2a03      	cmp	r2, #3
 8007c1a:	f846 5b04 	str.w	r5, [r6], #4
 8007c1e:	d8fa      	bhi.n	8007c16 <memset+0x6a>
 8007c20:	1f22      	subs	r2, r4, #4
 8007c22:	f022 0203 	bic.w	r2, r2, #3
 8007c26:	3204      	adds	r2, #4
 8007c28:	4413      	add	r3, r2
 8007c2a:	f004 0403 	and.w	r4, r4, #3
 8007c2e:	b12c      	cbz	r4, 8007c3c <memset+0x90>
 8007c30:	b2c9      	uxtb	r1, r1
 8007c32:	441c      	add	r4, r3
 8007c34:	f803 1b01 	strb.w	r1, [r3], #1
 8007c38:	42a3      	cmp	r3, r4
 8007c3a:	d1fb      	bne.n	8007c34 <memset+0x88>
 8007c3c:	bc70      	pop	{r4, r5, r6}
 8007c3e:	4770      	bx	lr
 8007c40:	4614      	mov	r4, r2
 8007c42:	4603      	mov	r3, r0
 8007c44:	e7c2      	b.n	8007bcc <memset+0x20>
 8007c46:	bf00      	nop

08007c48 <printf>:
 8007c48:	b40f      	push	{r0, r1, r2, r3}
 8007c4a:	b500      	push	{lr}
 8007c4c:	4907      	ldr	r1, [pc, #28]	; (8007c6c <printf+0x24>)
 8007c4e:	b083      	sub	sp, #12
 8007c50:	ab04      	add	r3, sp, #16
 8007c52:	6808      	ldr	r0, [r1, #0]
 8007c54:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c58:	6881      	ldr	r1, [r0, #8]
 8007c5a:	9301      	str	r3, [sp, #4]
 8007c5c:	f001 fbc2 	bl	80093e4 <_vfprintf_r>
 8007c60:	b003      	add	sp, #12
 8007c62:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c66:	b004      	add	sp, #16
 8007c68:	4770      	bx	lr
 8007c6a:	bf00      	nop
 8007c6c:	20000448 	.word	0x20000448

08007c70 <_puts_r>:
 8007c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c72:	4605      	mov	r5, r0
 8007c74:	b089      	sub	sp, #36	; 0x24
 8007c76:	4608      	mov	r0, r1
 8007c78:	460c      	mov	r4, r1
 8007c7a:	f7f8 fd81 	bl	8000780 <strlen>
 8007c7e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007c80:	4f14      	ldr	r7, [pc, #80]	; (8007cd4 <_puts_r+0x64>)
 8007c82:	9404      	str	r4, [sp, #16]
 8007c84:	2601      	movs	r6, #1
 8007c86:	1c44      	adds	r4, r0, #1
 8007c88:	a904      	add	r1, sp, #16
 8007c8a:	2202      	movs	r2, #2
 8007c8c:	9403      	str	r4, [sp, #12]
 8007c8e:	9005      	str	r0, [sp, #20]
 8007c90:	68ac      	ldr	r4, [r5, #8]
 8007c92:	9706      	str	r7, [sp, #24]
 8007c94:	9607      	str	r6, [sp, #28]
 8007c96:	9101      	str	r1, [sp, #4]
 8007c98:	9202      	str	r2, [sp, #8]
 8007c9a:	b1b3      	cbz	r3, 8007cca <_puts_r+0x5a>
 8007c9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ca0:	049a      	lsls	r2, r3, #18
 8007ca2:	d406      	bmi.n	8007cb2 <_puts_r+0x42>
 8007ca4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ca6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007caa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007cae:	81a3      	strh	r3, [r4, #12]
 8007cb0:	6662      	str	r2, [r4, #100]	; 0x64
 8007cb2:	4621      	mov	r1, r4
 8007cb4:	4628      	mov	r0, r5
 8007cb6:	aa01      	add	r2, sp, #4
 8007cb8:	f004 f9e6 	bl	800c088 <__sfvwrite_r>
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	bf14      	ite	ne
 8007cc0:	f04f 30ff 	movne.w	r0, #4294967295
 8007cc4:	200a      	moveq	r0, #10
 8007cc6:	b009      	add	sp, #36	; 0x24
 8007cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cca:	4628      	mov	r0, r5
 8007ccc:	f004 f89c 	bl	800be08 <__sinit>
 8007cd0:	e7e4      	b.n	8007c9c <_puts_r+0x2c>
 8007cd2:	bf00      	nop
 8007cd4:	0800e0f0 	.word	0x0800e0f0

08007cd8 <puts>:
 8007cd8:	4b02      	ldr	r3, [pc, #8]	; (8007ce4 <puts+0xc>)
 8007cda:	4601      	mov	r1, r0
 8007cdc:	6818      	ldr	r0, [r3, #0]
 8007cde:	f7ff bfc7 	b.w	8007c70 <_puts_r>
 8007ce2:	bf00      	nop
 8007ce4:	20000448 	.word	0x20000448

08007ce8 <sprintf>:
 8007ce8:	b40e      	push	{r1, r2, r3}
 8007cea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cec:	b09c      	sub	sp, #112	; 0x70
 8007cee:	ab21      	add	r3, sp, #132	; 0x84
 8007cf0:	490f      	ldr	r1, [pc, #60]	; (8007d30 <sprintf+0x48>)
 8007cf2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cf6:	9301      	str	r3, [sp, #4]
 8007cf8:	4605      	mov	r5, r0
 8007cfa:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8007cfe:	6808      	ldr	r0, [r1, #0]
 8007d00:	9502      	str	r5, [sp, #8]
 8007d02:	f44f 7702 	mov.w	r7, #520	; 0x208
 8007d06:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8007d0a:	a902      	add	r1, sp, #8
 8007d0c:	9506      	str	r5, [sp, #24]
 8007d0e:	f8ad 7014 	strh.w	r7, [sp, #20]
 8007d12:	9404      	str	r4, [sp, #16]
 8007d14:	9407      	str	r4, [sp, #28]
 8007d16:	f8ad 6016 	strh.w	r6, [sp, #22]
 8007d1a:	f000 f80b 	bl	8007d34 <_svfprintf_r>
 8007d1e:	9b02      	ldr	r3, [sp, #8]
 8007d20:	2200      	movs	r2, #0
 8007d22:	701a      	strb	r2, [r3, #0]
 8007d24:	b01c      	add	sp, #112	; 0x70
 8007d26:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007d2a:	b003      	add	sp, #12
 8007d2c:	4770      	bx	lr
 8007d2e:	bf00      	nop
 8007d30:	20000448 	.word	0x20000448

08007d34 <_svfprintf_r>:
 8007d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d38:	b0c1      	sub	sp, #260	; 0x104
 8007d3a:	460c      	mov	r4, r1
 8007d3c:	9109      	str	r1, [sp, #36]	; 0x24
 8007d3e:	4615      	mov	r5, r2
 8007d40:	930e      	str	r3, [sp, #56]	; 0x38
 8007d42:	900a      	str	r0, [sp, #40]	; 0x28
 8007d44:	f004 fb4c 	bl	800c3e0 <_localeconv_r>
 8007d48:	6803      	ldr	r3, [r0, #0]
 8007d4a:	9317      	str	r3, [sp, #92]	; 0x5c
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7f8 fd17 	bl	8000780 <strlen>
 8007d52:	89a3      	ldrh	r3, [r4, #12]
 8007d54:	9016      	str	r0, [sp, #88]	; 0x58
 8007d56:	061e      	lsls	r6, r3, #24
 8007d58:	d503      	bpl.n	8007d62 <_svfprintf_r+0x2e>
 8007d5a:	6923      	ldr	r3, [r4, #16]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	f001 811a 	beq.w	8008f96 <_svfprintf_r+0x1262>
 8007d62:	2300      	movs	r3, #0
 8007d64:	461a      	mov	r2, r3
 8007d66:	9312      	str	r3, [sp, #72]	; 0x48
 8007d68:	9325      	str	r3, [sp, #148]	; 0x94
 8007d6a:	9324      	str	r3, [sp, #144]	; 0x90
 8007d6c:	9319      	str	r3, [sp, #100]	; 0x64
 8007d6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d70:	f8df a464 	ldr.w	sl, [pc, #1124]	; 80081d8 <_svfprintf_r+0x4a4>
 8007d74:	9214      	str	r2, [sp, #80]	; 0x50
 8007d76:	ab30      	add	r3, sp, #192	; 0xc0
 8007d78:	9323      	str	r3, [sp, #140]	; 0x8c
 8007d7a:	4699      	mov	r9, r3
 8007d7c:	9215      	str	r2, [sp, #84]	; 0x54
 8007d7e:	46a8      	mov	r8, r5
 8007d80:	f898 3000 	ldrb.w	r3, [r8]
 8007d84:	4644      	mov	r4, r8
 8007d86:	b1eb      	cbz	r3, 8007dc4 <_svfprintf_r+0x90>
 8007d88:	2b25      	cmp	r3, #37	; 0x25
 8007d8a:	d102      	bne.n	8007d92 <_svfprintf_r+0x5e>
 8007d8c:	e01a      	b.n	8007dc4 <_svfprintf_r+0x90>
 8007d8e:	2b25      	cmp	r3, #37	; 0x25
 8007d90:	d003      	beq.n	8007d9a <_svfprintf_r+0x66>
 8007d92:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1f9      	bne.n	8007d8e <_svfprintf_r+0x5a>
 8007d9a:	ebc8 0504 	rsb	r5, r8, r4
 8007d9e:	b18d      	cbz	r5, 8007dc4 <_svfprintf_r+0x90>
 8007da0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007da2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8007da4:	f8c9 8000 	str.w	r8, [r9]
 8007da8:	3301      	adds	r3, #1
 8007daa:	442a      	add	r2, r5
 8007dac:	2b07      	cmp	r3, #7
 8007dae:	f8c9 5004 	str.w	r5, [r9, #4]
 8007db2:	9225      	str	r2, [sp, #148]	; 0x94
 8007db4:	9324      	str	r3, [sp, #144]	; 0x90
 8007db6:	f300 80a6 	bgt.w	8007f06 <_svfprintf_r+0x1d2>
 8007dba:	f109 0908 	add.w	r9, r9, #8
 8007dbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dc0:	442b      	add	r3, r5
 8007dc2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007dc4:	7823      	ldrb	r3, [r4, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	f000 80a6 	beq.w	8007f18 <_svfprintf_r+0x1e4>
 8007dcc:	2300      	movs	r3, #0
 8007dce:	461a      	mov	r2, r3
 8007dd0:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	930c      	str	r3, [sp, #48]	; 0x30
 8007dd8:	9307      	str	r3, [sp, #28]
 8007dda:	f04f 3bff 	mov.w	fp, #4294967295
 8007dde:	7863      	ldrb	r3, [r4, #1]
 8007de0:	f104 0801 	add.w	r8, r4, #1
 8007de4:	465d      	mov	r5, fp
 8007de6:	f108 0801 	add.w	r8, r8, #1
 8007dea:	f1a3 0020 	sub.w	r0, r3, #32
 8007dee:	2858      	cmp	r0, #88	; 0x58
 8007df0:	f200 8425 	bhi.w	800863e <_svfprintf_r+0x90a>
 8007df4:	e8df f010 	tbh	[pc, r0, lsl #1]
 8007df8:	04230388 	.word	0x04230388
 8007dfc:	03900423 	.word	0x03900423
 8007e00:	04230423 	.word	0x04230423
 8007e04:	04230423 	.word	0x04230423
 8007e08:	04230423 	.word	0x04230423
 8007e0c:	03a50397 	.word	0x03a50397
 8007e10:	005d0423 	.word	0x005d0423
 8007e14:	042300e2 	.word	0x042300e2
 8007e18:	010500fe 	.word	0x010500fe
 8007e1c:	01050105 	.word	0x01050105
 8007e20:	01050105 	.word	0x01050105
 8007e24:	01050105 	.word	0x01050105
 8007e28:	01050105 	.word	0x01050105
 8007e2c:	04230423 	.word	0x04230423
 8007e30:	04230423 	.word	0x04230423
 8007e34:	04230423 	.word	0x04230423
 8007e38:	04230423 	.word	0x04230423
 8007e3c:	04230423 	.word	0x04230423
 8007e40:	02810115 	.word	0x02810115
 8007e44:	02810423 	.word	0x02810423
 8007e48:	04230423 	.word	0x04230423
 8007e4c:	04230423 	.word	0x04230423
 8007e50:	042302c6 	.word	0x042302c6
 8007e54:	02cd0423 	.word	0x02cd0423
 8007e58:	04230423 	.word	0x04230423
 8007e5c:	04230423 	.word	0x04230423
 8007e60:	02f70423 	.word	0x02f70423
 8007e64:	04230423 	.word	0x04230423
 8007e68:	04230325 	.word	0x04230325
 8007e6c:	04230423 	.word	0x04230423
 8007e70:	04230423 	.word	0x04230423
 8007e74:	04230423 	.word	0x04230423
 8007e78:	04230423 	.word	0x04230423
 8007e7c:	03660423 	.word	0x03660423
 8007e80:	02810379 	.word	0x02810379
 8007e84:	02810281 	.word	0x02810281
 8007e88:	03790381 	.word	0x03790381
 8007e8c:	04230423 	.word	0x04230423
 8007e90:	042303d1 	.word	0x042303d1
 8007e94:	00a303db 	.word	0x00a303db
 8007e98:	03ee0064 	.word	0x03ee0064
 8007e9c:	03f50423 	.word	0x03f50423
 8007ea0:	03aa0423 	.word	0x03aa0423
 8007ea4:	04230423 	.word	0x04230423
 8007ea8:	03bc      	.short	0x03bc
 8007eaa:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007eac:	930e      	str	r3, [sp, #56]	; 0x38
 8007eae:	4240      	negs	r0, r0
 8007eb0:	900c      	str	r0, [sp, #48]	; 0x30
 8007eb2:	9b07      	ldr	r3, [sp, #28]
 8007eb4:	f043 0304 	orr.w	r3, r3, #4
 8007eb8:	9307      	str	r3, [sp, #28]
 8007eba:	f898 3000 	ldrb.w	r3, [r8]
 8007ebe:	e792      	b.n	8007de6 <_svfprintf_r+0xb2>
 8007ec0:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007ec2:	46ab      	mov	fp, r5
 8007ec4:	2100      	movs	r1, #0
 8007ec6:	6804      	ldr	r4, [r0, #0]
 8007ec8:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8007ecc:	1d07      	adds	r7, r0, #4
 8007ece:	9807      	ldr	r0, [sp, #28]
 8007ed0:	2330      	movs	r3, #48	; 0x30
 8007ed2:	2278      	movs	r2, #120	; 0x78
 8007ed4:	458b      	cmp	fp, r1
 8007ed6:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8007eda:	f04f 0500 	mov.w	r5, #0
 8007ede:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
 8007ee2:	f040 0302 	orr.w	r3, r0, #2
 8007ee6:	f2c0 83c7 	blt.w	8008678 <_svfprintf_r+0x944>
 8007eea:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 8007eee:	f043 0302 	orr.w	r3, r3, #2
 8007ef2:	9307      	str	r3, [sp, #28]
 8007ef4:	ea54 0305 	orrs.w	r3, r4, r5
 8007ef8:	970e      	str	r7, [sp, #56]	; 0x38
 8007efa:	f000 8393 	beq.w	8008624 <_svfprintf_r+0x8f0>
 8007efe:	460f      	mov	r7, r1
 8007f00:	9211      	str	r2, [sp, #68]	; 0x44
 8007f02:	48b3      	ldr	r0, [pc, #716]	; (80081d0 <_svfprintf_r+0x49c>)
 8007f04:	e2ce      	b.n	80084a4 <_svfprintf_r+0x770>
 8007f06:	aa23      	add	r2, sp, #140	; 0x8c
 8007f08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f0a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007f0c:	f005 fb5e 	bl	800d5cc <__ssprint_r>
 8007f10:	b948      	cbnz	r0, 8007f26 <_svfprintf_r+0x1f2>
 8007f12:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8007f16:	e752      	b.n	8007dbe <_svfprintf_r+0x8a>
 8007f18:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8007f1a:	b123      	cbz	r3, 8007f26 <_svfprintf_r+0x1f2>
 8007f1c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007f1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f20:	aa23      	add	r2, sp, #140	; 0x8c
 8007f22:	f005 fb53 	bl	800d5cc <__ssprint_r>
 8007f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f28:	899b      	ldrh	r3, [r3, #12]
 8007f2a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007f2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f30:	bf18      	it	ne
 8007f32:	f04f 33ff 	movne.w	r3, #4294967295
 8007f36:	4618      	mov	r0, r3
 8007f38:	b041      	add	sp, #260	; 0x104
 8007f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f3e:	9311      	str	r3, [sp, #68]	; 0x44
 8007f40:	46ab      	mov	fp, r5
 8007f42:	2a00      	cmp	r2, #0
 8007f44:	f041 8233 	bne.w	80093ae <_svfprintf_r+0x167a>
 8007f48:	9a07      	ldr	r2, [sp, #28]
 8007f4a:	f012 0320 	ands.w	r3, r2, #32
 8007f4e:	f000 822e 	beq.w	80083ae <_svfprintf_r+0x67a>
 8007f52:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8007f54:	3707      	adds	r7, #7
 8007f56:	f027 0307 	bic.w	r3, r7, #7
 8007f5a:	2700      	movs	r7, #0
 8007f5c:	f103 0108 	add.w	r1, r3, #8
 8007f60:	45bb      	cmp	fp, r7
 8007f62:	910e      	str	r1, [sp, #56]	; 0x38
 8007f64:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007f68:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 8007f6c:	f2c0 8779 	blt.w	8008e62 <_svfprintf_r+0x112e>
 8007f70:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8007f74:	9307      	str	r3, [sp, #28]
 8007f76:	ea54 0305 	orrs.w	r3, r4, r5
 8007f7a:	f000 8375 	beq.w	8008668 <_svfprintf_r+0x934>
 8007f7e:	ae30      	add	r6, sp, #192	; 0xc0
 8007f80:	08e2      	lsrs	r2, r4, #3
 8007f82:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 8007f86:	08e9      	lsrs	r1, r5, #3
 8007f88:	f004 0307 	and.w	r3, r4, #7
 8007f8c:	460d      	mov	r5, r1
 8007f8e:	4614      	mov	r4, r2
 8007f90:	3330      	adds	r3, #48	; 0x30
 8007f92:	ea54 0205 	orrs.w	r2, r4, r5
 8007f96:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8007f9a:	d1f1      	bne.n	8007f80 <_svfprintf_r+0x24c>
 8007f9c:	9a07      	ldr	r2, [sp, #28]
 8007f9e:	07d1      	lsls	r1, r2, #31
 8007fa0:	f140 8084 	bpl.w	80080ac <_svfprintf_r+0x378>
 8007fa4:	2b30      	cmp	r3, #48	; 0x30
 8007fa6:	f000 8081 	beq.w	80080ac <_svfprintf_r+0x378>
 8007faa:	2230      	movs	r2, #48	; 0x30
 8007fac:	1e73      	subs	r3, r6, #1
 8007fae:	f806 2c01 	strb.w	r2, [r6, #-1]
 8007fb2:	aa30      	add	r2, sp, #192	; 0xc0
 8007fb4:	1ad2      	subs	r2, r2, r3
 8007fb6:	920d      	str	r2, [sp, #52]	; 0x34
 8007fb8:	461e      	mov	r6, r3
 8007fba:	e07a      	b.n	80080b2 <_svfprintf_r+0x37e>
 8007fbc:	f898 3000 	ldrb.w	r3, [r8]
 8007fc0:	2b2a      	cmp	r3, #42	; 0x2a
 8007fc2:	f108 0401 	add.w	r4, r8, #1
 8007fc6:	f001 81b9 	beq.w	800933c <_svfprintf_r+0x1608>
 8007fca:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8007fce:	2809      	cmp	r0, #9
 8007fd0:	bf98      	it	ls
 8007fd2:	2500      	movls	r5, #0
 8007fd4:	f201 816c 	bhi.w	80092b0 <_svfprintf_r+0x157c>
 8007fd8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007fdc:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8007fe0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8007fe4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8007fe8:	2809      	cmp	r0, #9
 8007fea:	d9f5      	bls.n	8007fd8 <_svfprintf_r+0x2a4>
 8007fec:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8007ff0:	46a0      	mov	r8, r4
 8007ff2:	e6fa      	b.n	8007dea <_svfprintf_r+0xb6>
 8007ff4:	9b07      	ldr	r3, [sp, #28]
 8007ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ffa:	9307      	str	r3, [sp, #28]
 8007ffc:	f898 3000 	ldrb.w	r3, [r8]
 8008000:	e6f1      	b.n	8007de6 <_svfprintf_r+0xb2>
 8008002:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8008006:	2300      	movs	r3, #0
 8008008:	461c      	mov	r4, r3
 800800a:	f818 3b01 	ldrb.w	r3, [r8], #1
 800800e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8008012:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8008016:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800801a:	2809      	cmp	r0, #9
 800801c:	d9f5      	bls.n	800800a <_svfprintf_r+0x2d6>
 800801e:	940c      	str	r4, [sp, #48]	; 0x30
 8008020:	e6e3      	b.n	8007dea <_svfprintf_r+0xb6>
 8008022:	9311      	str	r3, [sp, #68]	; 0x44
 8008024:	46ab      	mov	fp, r5
 8008026:	2a00      	cmp	r2, #0
 8008028:	f041 81ab 	bne.w	8009382 <_svfprintf_r+0x164e>
 800802c:	9b07      	ldr	r3, [sp, #28]
 800802e:	f043 0310 	orr.w	r3, r3, #16
 8008032:	9307      	str	r3, [sp, #28]
 8008034:	9b07      	ldr	r3, [sp, #28]
 8008036:	0698      	lsls	r0, r3, #26
 8008038:	f140 8530 	bpl.w	8008a9c <_svfprintf_r+0xd68>
 800803c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800803e:	3707      	adds	r7, #7
 8008040:	f027 0707 	bic.w	r7, r7, #7
 8008044:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008048:	f107 0108 	add.w	r1, r7, #8
 800804c:	910e      	str	r1, [sp, #56]	; 0x38
 800804e:	4614      	mov	r4, r2
 8008050:	461d      	mov	r5, r3
 8008052:	2a00      	cmp	r2, #0
 8008054:	f173 0300 	sbcs.w	r3, r3, #0
 8008058:	f2c0 855b 	blt.w	8008b12 <_svfprintf_r+0xdde>
 800805c:	f1bb 0f00 	cmp.w	fp, #0
 8008060:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 8008064:	f2c0 8538 	blt.w	8008ad8 <_svfprintf_r+0xda4>
 8008068:	9b07      	ldr	r3, [sp, #28]
 800806a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800806e:	9307      	str	r3, [sp, #28]
 8008070:	ea54 0305 	orrs.w	r3, r4, r5
 8008074:	f000 81db 	beq.w	800842e <_svfprintf_r+0x6fa>
 8008078:	2d00      	cmp	r5, #0
 800807a:	bf08      	it	eq
 800807c:	2c0a      	cmpeq	r4, #10
 800807e:	f0c0 81db 	bcc.w	8008438 <_svfprintf_r+0x704>
 8008082:	ae30      	add	r6, sp, #192	; 0xc0
 8008084:	4620      	mov	r0, r4
 8008086:	4629      	mov	r1, r5
 8008088:	220a      	movs	r2, #10
 800808a:	2300      	movs	r3, #0
 800808c:	f7f8 f93e 	bl	800030c <__aeabi_uldivmod>
 8008090:	3230      	adds	r2, #48	; 0x30
 8008092:	f806 2d01 	strb.w	r2, [r6, #-1]!
 8008096:	4620      	mov	r0, r4
 8008098:	4629      	mov	r1, r5
 800809a:	2300      	movs	r3, #0
 800809c:	220a      	movs	r2, #10
 800809e:	f7f8 f935 	bl	800030c <__aeabi_uldivmod>
 80080a2:	4604      	mov	r4, r0
 80080a4:	460d      	mov	r5, r1
 80080a6:	ea54 0305 	orrs.w	r3, r4, r5
 80080aa:	d1eb      	bne.n	8008084 <_svfprintf_r+0x350>
 80080ac:	ab30      	add	r3, sp, #192	; 0xc0
 80080ae:	1b9b      	subs	r3, r3, r6
 80080b0:	930d      	str	r3, [sp, #52]	; 0x34
 80080b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080b4:	455b      	cmp	r3, fp
 80080b6:	bfb8      	it	lt
 80080b8:	465b      	movlt	r3, fp
 80080ba:	9308      	str	r3, [sp, #32]
 80080bc:	2300      	movs	r3, #0
 80080be:	9313      	str	r3, [sp, #76]	; 0x4c
 80080c0:	b117      	cbz	r7, 80080c8 <_svfprintf_r+0x394>
 80080c2:	9b08      	ldr	r3, [sp, #32]
 80080c4:	3301      	adds	r3, #1
 80080c6:	9308      	str	r3, [sp, #32]
 80080c8:	9b07      	ldr	r3, [sp, #28]
 80080ca:	f013 0302 	ands.w	r3, r3, #2
 80080ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80080d0:	d002      	beq.n	80080d8 <_svfprintf_r+0x3a4>
 80080d2:	9b08      	ldr	r3, [sp, #32]
 80080d4:	3302      	adds	r3, #2
 80080d6:	9308      	str	r3, [sp, #32]
 80080d8:	9b07      	ldr	r3, [sp, #28]
 80080da:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 80080de:	9310      	str	r3, [sp, #64]	; 0x40
 80080e0:	f040 82d7 	bne.w	8008692 <_svfprintf_r+0x95e>
 80080e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080e6:	9a08      	ldr	r2, [sp, #32]
 80080e8:	1a9d      	subs	r5, r3, r2
 80080ea:	2d00      	cmp	r5, #0
 80080ec:	f340 82d1 	ble.w	8008692 <_svfprintf_r+0x95e>
 80080f0:	2d10      	cmp	r5, #16
 80080f2:	9925      	ldr	r1, [sp, #148]	; 0x94
 80080f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80080f6:	4f37      	ldr	r7, [pc, #220]	; (80081d4 <_svfprintf_r+0x4a0>)
 80080f8:	dd27      	ble.n	800814a <_svfprintf_r+0x416>
 80080fa:	9618      	str	r6, [sp, #96]	; 0x60
 80080fc:	4648      	mov	r0, r9
 80080fe:	2410      	movs	r4, #16
 8008100:	46b9      	mov	r9, r7
 8008102:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008104:	462f      	mov	r7, r5
 8008106:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008108:	e004      	b.n	8008114 <_svfprintf_r+0x3e0>
 800810a:	3f10      	subs	r7, #16
 800810c:	2f10      	cmp	r7, #16
 800810e:	f100 0008 	add.w	r0, r0, #8
 8008112:	dd16      	ble.n	8008142 <_svfprintf_r+0x40e>
 8008114:	3201      	adds	r2, #1
 8008116:	4b2f      	ldr	r3, [pc, #188]	; (80081d4 <_svfprintf_r+0x4a0>)
 8008118:	9224      	str	r2, [sp, #144]	; 0x90
 800811a:	3110      	adds	r1, #16
 800811c:	2a07      	cmp	r2, #7
 800811e:	9125      	str	r1, [sp, #148]	; 0x94
 8008120:	e880 0018 	stmia.w	r0, {r3, r4}
 8008124:	ddf1      	ble.n	800810a <_svfprintf_r+0x3d6>
 8008126:	aa23      	add	r2, sp, #140	; 0x8c
 8008128:	4631      	mov	r1, r6
 800812a:	4628      	mov	r0, r5
 800812c:	f005 fa4e 	bl	800d5cc <__ssprint_r>
 8008130:	2800      	cmp	r0, #0
 8008132:	f47f aef8 	bne.w	8007f26 <_svfprintf_r+0x1f2>
 8008136:	3f10      	subs	r7, #16
 8008138:	2f10      	cmp	r7, #16
 800813a:	9925      	ldr	r1, [sp, #148]	; 0x94
 800813c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800813e:	a830      	add	r0, sp, #192	; 0xc0
 8008140:	dce8      	bgt.n	8008114 <_svfprintf_r+0x3e0>
 8008142:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8008144:	463d      	mov	r5, r7
 8008146:	464f      	mov	r7, r9
 8008148:	4681      	mov	r9, r0
 800814a:	3201      	adds	r2, #1
 800814c:	186c      	adds	r4, r5, r1
 800814e:	2a07      	cmp	r2, #7
 8008150:	9425      	str	r4, [sp, #148]	; 0x94
 8008152:	9224      	str	r2, [sp, #144]	; 0x90
 8008154:	f8c9 7000 	str.w	r7, [r9]
 8008158:	f8c9 5004 	str.w	r5, [r9, #4]
 800815c:	f300 8428 	bgt.w	80089b0 <_svfprintf_r+0xc7c>
 8008160:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 8008164:	f109 0908 	add.w	r9, r9, #8
 8008168:	b177      	cbz	r7, 8008188 <_svfprintf_r+0x454>
 800816a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800816c:	3301      	adds	r3, #1
 800816e:	3401      	adds	r4, #1
 8008170:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
 8008174:	2201      	movs	r2, #1
 8008176:	2b07      	cmp	r3, #7
 8008178:	9425      	str	r4, [sp, #148]	; 0x94
 800817a:	9324      	str	r3, [sp, #144]	; 0x90
 800817c:	e889 0006 	stmia.w	r9, {r1, r2}
 8008180:	f300 83a0 	bgt.w	80088c4 <_svfprintf_r+0xb90>
 8008184:	f109 0908 	add.w	r9, r9, #8
 8008188:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800818a:	b16b      	cbz	r3, 80081a8 <_svfprintf_r+0x474>
 800818c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800818e:	3301      	adds	r3, #1
 8008190:	3402      	adds	r4, #2
 8008192:	a91c      	add	r1, sp, #112	; 0x70
 8008194:	2202      	movs	r2, #2
 8008196:	2b07      	cmp	r3, #7
 8008198:	9425      	str	r4, [sp, #148]	; 0x94
 800819a:	9324      	str	r3, [sp, #144]	; 0x90
 800819c:	e889 0006 	stmia.w	r9, {r1, r2}
 80081a0:	f300 839c 	bgt.w	80088dc <_svfprintf_r+0xba8>
 80081a4:	f109 0908 	add.w	r9, r9, #8
 80081a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80081aa:	2b80      	cmp	r3, #128	; 0x80
 80081ac:	f000 82d5 	beq.w	800875a <_svfprintf_r+0xa26>
 80081b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081b2:	ebc3 070b 	rsb	r7, r3, fp
 80081b6:	2f00      	cmp	r7, #0
 80081b8:	dd39      	ble.n	800822e <_svfprintf_r+0x4fa>
 80081ba:	4a07      	ldr	r2, [pc, #28]	; (80081d8 <_svfprintf_r+0x4a4>)
 80081bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80081be:	920f      	str	r2, [sp, #60]	; 0x3c
 80081c0:	2f10      	cmp	r7, #16
 80081c2:	dd28      	ble.n	8008216 <_svfprintf_r+0x4e2>
 80081c4:	4622      	mov	r2, r4
 80081c6:	f04f 0b10 	mov.w	fp, #16
 80081ca:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80081cc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80081ce:	e00a      	b.n	80081e6 <_svfprintf_r+0x4b2>
 80081d0:	0800e128 	.word	0x0800e128
 80081d4:	0800e148 	.word	0x0800e148
 80081d8:	0800e0f4 	.word	0x0800e0f4
 80081dc:	3f10      	subs	r7, #16
 80081de:	2f10      	cmp	r7, #16
 80081e0:	f109 0908 	add.w	r9, r9, #8
 80081e4:	dd16      	ble.n	8008214 <_svfprintf_r+0x4e0>
 80081e6:	3301      	adds	r3, #1
 80081e8:	3210      	adds	r2, #16
 80081ea:	2b07      	cmp	r3, #7
 80081ec:	9225      	str	r2, [sp, #148]	; 0x94
 80081ee:	9324      	str	r3, [sp, #144]	; 0x90
 80081f0:	e889 0c00 	stmia.w	r9, {sl, fp}
 80081f4:	ddf2      	ble.n	80081dc <_svfprintf_r+0x4a8>
 80081f6:	aa23      	add	r2, sp, #140	; 0x8c
 80081f8:	4621      	mov	r1, r4
 80081fa:	4628      	mov	r0, r5
 80081fc:	f005 f9e6 	bl	800d5cc <__ssprint_r>
 8008200:	2800      	cmp	r0, #0
 8008202:	f47f ae90 	bne.w	8007f26 <_svfprintf_r+0x1f2>
 8008206:	3f10      	subs	r7, #16
 8008208:	2f10      	cmp	r7, #16
 800820a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800820c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800820e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8008212:	dce8      	bgt.n	80081e6 <_svfprintf_r+0x4b2>
 8008214:	4614      	mov	r4, r2
 8008216:	3301      	adds	r3, #1
 8008218:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800821a:	9324      	str	r3, [sp, #144]	; 0x90
 800821c:	443c      	add	r4, r7
 800821e:	2b07      	cmp	r3, #7
 8008220:	9425      	str	r4, [sp, #148]	; 0x94
 8008222:	e889 0084 	stmia.w	r9, {r2, r7}
 8008226:	f300 8341 	bgt.w	80088ac <_svfprintf_r+0xb78>
 800822a:	f109 0908 	add.w	r9, r9, #8
 800822e:	9b07      	ldr	r3, [sp, #28]
 8008230:	05da      	lsls	r2, r3, #23
 8008232:	f100 8230 	bmi.w	8008696 <_svfprintf_r+0x962>
 8008236:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008238:	990d      	ldr	r1, [sp, #52]	; 0x34
 800823a:	f8c9 6000 	str.w	r6, [r9]
 800823e:	3301      	adds	r3, #1
 8008240:	440c      	add	r4, r1
 8008242:	2b07      	cmp	r3, #7
 8008244:	9425      	str	r4, [sp, #148]	; 0x94
 8008246:	f8c9 1004 	str.w	r1, [r9, #4]
 800824a:	9324      	str	r3, [sp, #144]	; 0x90
 800824c:	f300 8318 	bgt.w	8008880 <_svfprintf_r+0xb4c>
 8008250:	f109 0908 	add.w	r9, r9, #8
 8008254:	9b07      	ldr	r3, [sp, #28]
 8008256:	0759      	lsls	r1, r3, #29
 8008258:	d53f      	bpl.n	80082da <_svfprintf_r+0x5a6>
 800825a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800825c:	9a08      	ldr	r2, [sp, #32]
 800825e:	1a9d      	subs	r5, r3, r2
 8008260:	2d00      	cmp	r5, #0
 8008262:	dd3a      	ble.n	80082da <_svfprintf_r+0x5a6>
 8008264:	2d10      	cmp	r5, #16
 8008266:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008268:	4fbc      	ldr	r7, [pc, #752]	; (800855c <_svfprintf_r+0x828>)
 800826a:	dd23      	ble.n	80082b4 <_svfprintf_r+0x580>
 800826c:	4622      	mov	r2, r4
 800826e:	2610      	movs	r6, #16
 8008270:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8008274:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008276:	e004      	b.n	8008282 <_svfprintf_r+0x54e>
 8008278:	3d10      	subs	r5, #16
 800827a:	2d10      	cmp	r5, #16
 800827c:	f109 0908 	add.w	r9, r9, #8
 8008280:	dd17      	ble.n	80082b2 <_svfprintf_r+0x57e>
 8008282:	3301      	adds	r3, #1
 8008284:	49b5      	ldr	r1, [pc, #724]	; (800855c <_svfprintf_r+0x828>)
 8008286:	9324      	str	r3, [sp, #144]	; 0x90
 8008288:	3210      	adds	r2, #16
 800828a:	2b07      	cmp	r3, #7
 800828c:	9225      	str	r2, [sp, #148]	; 0x94
 800828e:	e889 0042 	stmia.w	r9, {r1, r6}
 8008292:	ddf1      	ble.n	8008278 <_svfprintf_r+0x544>
 8008294:	aa23      	add	r2, sp, #140	; 0x8c
 8008296:	4621      	mov	r1, r4
 8008298:	4658      	mov	r0, fp
 800829a:	f005 f997 	bl	800d5cc <__ssprint_r>
 800829e:	2800      	cmp	r0, #0
 80082a0:	f47f ae41 	bne.w	8007f26 <_svfprintf_r+0x1f2>
 80082a4:	3d10      	subs	r5, #16
 80082a6:	2d10      	cmp	r5, #16
 80082a8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80082aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80082ac:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 80082b0:	dce7      	bgt.n	8008282 <_svfprintf_r+0x54e>
 80082b2:	4614      	mov	r4, r2
 80082b4:	3301      	adds	r3, #1
 80082b6:	442c      	add	r4, r5
 80082b8:	2b07      	cmp	r3, #7
 80082ba:	9425      	str	r4, [sp, #148]	; 0x94
 80082bc:	9324      	str	r3, [sp, #144]	; 0x90
 80082be:	f8c9 7000 	str.w	r7, [r9]
 80082c2:	f8c9 5004 	str.w	r5, [r9, #4]
 80082c6:	dd08      	ble.n	80082da <_svfprintf_r+0x5a6>
 80082c8:	aa23      	add	r2, sp, #140	; 0x8c
 80082ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082cc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80082ce:	f005 f97d 	bl	800d5cc <__ssprint_r>
 80082d2:	2800      	cmp	r0, #0
 80082d4:	f47f ae27 	bne.w	8007f26 <_svfprintf_r+0x1f2>
 80082d8:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80082da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082de:	9908      	ldr	r1, [sp, #32]
 80082e0:	428a      	cmp	r2, r1
 80082e2:	bfac      	ite	ge
 80082e4:	189b      	addge	r3, r3, r2
 80082e6:	185b      	addlt	r3, r3, r1
 80082e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80082ea:	2c00      	cmp	r4, #0
 80082ec:	f040 82d4 	bne.w	8008898 <_svfprintf_r+0xb64>
 80082f0:	2300      	movs	r3, #0
 80082f2:	9324      	str	r3, [sp, #144]	; 0x90
 80082f4:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 80082f8:	e542      	b.n	8007d80 <_svfprintf_r+0x4c>
 80082fa:	9311      	str	r3, [sp, #68]	; 0x44
 80082fc:	46ab      	mov	fp, r5
 80082fe:	2a00      	cmp	r2, #0
 8008300:	f041 8051 	bne.w	80093a6 <_svfprintf_r+0x1672>
 8008304:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8008306:	3707      	adds	r7, #7
 8008308:	f027 0307 	bic.w	r3, r7, #7
 800830c:	f103 0208 	add.w	r2, r3, #8
 8008310:	920e      	str	r2, [sp, #56]	; 0x38
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	9214      	str	r2, [sp, #80]	; 0x50
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	9315      	str	r3, [sp, #84]	; 0x54
 800831a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800831c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800831e:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8008322:	4628      	mov	r0, r5
 8008324:	4621      	mov	r1, r4
 8008326:	f04f 32ff 	mov.w	r2, #4294967295
 800832a:	4b8d      	ldr	r3, [pc, #564]	; (8008560 <_svfprintf_r+0x82c>)
 800832c:	f7f8 ff3a 	bl	80011a4 <__aeabi_dcmpun>
 8008330:	2800      	cmp	r0, #0
 8008332:	f040 84c2 	bne.w	8008cba <_svfprintf_r+0xf86>
 8008336:	4628      	mov	r0, r5
 8008338:	4621      	mov	r1, r4
 800833a:	f04f 32ff 	mov.w	r2, #4294967295
 800833e:	4b88      	ldr	r3, [pc, #544]	; (8008560 <_svfprintf_r+0x82c>)
 8008340:	f7f8 ff12 	bl	8001168 <__aeabi_dcmple>
 8008344:	2800      	cmp	r0, #0
 8008346:	f040 84b8 	bne.w	8008cba <_svfprintf_r+0xf86>
 800834a:	9814      	ldr	r0, [sp, #80]	; 0x50
 800834c:	9915      	ldr	r1, [sp, #84]	; 0x54
 800834e:	2200      	movs	r2, #0
 8008350:	2300      	movs	r3, #0
 8008352:	f7f8 feff 	bl	8001154 <__aeabi_dcmplt>
 8008356:	2800      	cmp	r0, #0
 8008358:	f040 874f 	bne.w	80091fa <_svfprintf_r+0x14c6>
 800835c:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 8008360:	4e80      	ldr	r6, [pc, #512]	; (8008564 <_svfprintf_r+0x830>)
 8008362:	4b81      	ldr	r3, [pc, #516]	; (8008568 <_svfprintf_r+0x834>)
 8008364:	9907      	ldr	r1, [sp, #28]
 8008366:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800836a:	9107      	str	r1, [sp, #28]
 800836c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800836e:	2203      	movs	r2, #3
 8008370:	f04f 0b00 	mov.w	fp, #0
 8008374:	9208      	str	r2, [sp, #32]
 8008376:	2947      	cmp	r1, #71	; 0x47
 8008378:	bfd8      	it	le
 800837a:	461e      	movle	r6, r3
 800837c:	920d      	str	r2, [sp, #52]	; 0x34
 800837e:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8008382:	e69d      	b.n	80080c0 <_svfprintf_r+0x38c>
 8008384:	9b07      	ldr	r3, [sp, #28]
 8008386:	f043 0308 	orr.w	r3, r3, #8
 800838a:	9307      	str	r3, [sp, #28]
 800838c:	f898 3000 	ldrb.w	r3, [r8]
 8008390:	e529      	b.n	8007de6 <_svfprintf_r+0xb2>
 8008392:	9311      	str	r3, [sp, #68]	; 0x44
 8008394:	46ab      	mov	fp, r5
 8008396:	2a00      	cmp	r2, #0
 8008398:	f041 8011 	bne.w	80093be <_svfprintf_r+0x168a>
 800839c:	9b07      	ldr	r3, [sp, #28]
 800839e:	f043 0310 	orr.w	r3, r3, #16
 80083a2:	9307      	str	r3, [sp, #28]
 80083a4:	9a07      	ldr	r2, [sp, #28]
 80083a6:	f012 0320 	ands.w	r3, r2, #32
 80083aa:	f47f add2 	bne.w	8007f52 <_svfprintf_r+0x21e>
 80083ae:	9907      	ldr	r1, [sp, #28]
 80083b0:	f011 0210 	ands.w	r2, r1, #16
 80083b4:	f000 852c 	beq.w	8008e10 <_svfprintf_r+0x10dc>
 80083b8:	980e      	ldr	r0, [sp, #56]	; 0x38
 80083ba:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 80083be:	f1bb 0f00 	cmp.w	fp, #0
 80083c2:	6804      	ldr	r4, [r0, #0]
 80083c4:	f100 0704 	add.w	r7, r0, #4
 80083c8:	f04f 0500 	mov.w	r5, #0
 80083cc:	f2c0 8548 	blt.w	8008e60 <_svfprintf_r+0x112c>
 80083d0:	460a      	mov	r2, r1
 80083d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80083d6:	9207      	str	r2, [sp, #28]
 80083d8:	ea54 0205 	orrs.w	r2, r4, r5
 80083dc:	970e      	str	r7, [sp, #56]	; 0x38
 80083de:	f000 8143 	beq.w	8008668 <_svfprintf_r+0x934>
 80083e2:	461f      	mov	r7, r3
 80083e4:	e5cb      	b.n	8007f7e <_svfprintf_r+0x24a>
 80083e6:	9311      	str	r3, [sp, #68]	; 0x44
 80083e8:	46ab      	mov	fp, r5
 80083ea:	2a00      	cmp	r2, #0
 80083ec:	f040 87e3 	bne.w	80093b6 <_svfprintf_r+0x1682>
 80083f0:	9b07      	ldr	r3, [sp, #28]
 80083f2:	f043 0310 	orr.w	r3, r3, #16
 80083f6:	9307      	str	r3, [sp, #28]
 80083f8:	9a07      	ldr	r2, [sp, #28]
 80083fa:	f012 0320 	ands.w	r3, r2, #32
 80083fe:	f000 8332 	beq.w	8008a66 <_svfprintf_r+0xd32>
 8008402:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8008404:	3707      	adds	r7, #7
 8008406:	f027 0307 	bic.w	r3, r7, #7
 800840a:	2700      	movs	r7, #0
 800840c:	f103 0108 	add.w	r1, r3, #8
 8008410:	45bb      	cmp	fp, r7
 8008412:	910e      	str	r1, [sp, #56]	; 0x38
 8008414:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008418:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800841c:	f2c0 835c 	blt.w	8008ad8 <_svfprintf_r+0xda4>
 8008420:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8008424:	9307      	str	r3, [sp, #28]
 8008426:	ea54 0305 	orrs.w	r3, r4, r5
 800842a:	f47f ae25 	bne.w	8008078 <_svfprintf_r+0x344>
 800842e:	f1bb 0f00 	cmp.w	fp, #0
 8008432:	f000 80fe 	beq.w	8008632 <_svfprintf_r+0x8fe>
 8008436:	2400      	movs	r4, #0
 8008438:	ae40      	add	r6, sp, #256	; 0x100
 800843a:	3430      	adds	r4, #48	; 0x30
 800843c:	f806 4d41 	strb.w	r4, [r6, #-65]!
 8008440:	e634      	b.n	80080ac <_svfprintf_r+0x378>
 8008442:	9311      	str	r3, [sp, #68]	; 0x44
 8008444:	46ab      	mov	fp, r5
 8008446:	2a00      	cmp	r2, #0
 8008448:	f040 8797 	bne.w	800937a <_svfprintf_r+0x1646>
 800844c:	9b07      	ldr	r3, [sp, #28]
 800844e:	4847      	ldr	r0, [pc, #284]	; (800856c <_svfprintf_r+0x838>)
 8008450:	069d      	lsls	r5, r3, #26
 8008452:	f140 8097 	bpl.w	8008584 <_svfprintf_r+0x850>
 8008456:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8008458:	3707      	adds	r7, #7
 800845a:	f027 0307 	bic.w	r3, r7, #7
 800845e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008462:	f103 0208 	add.w	r2, r3, #8
 8008466:	920e      	str	r2, [sp, #56]	; 0x38
 8008468:	9a07      	ldr	r2, [sp, #28]
 800846a:	f012 0701 	ands.w	r7, r2, #1
 800846e:	f000 8241 	beq.w	80088f4 <_svfprintf_r+0xbc0>
 8008472:	ea54 0305 	orrs.w	r3, r4, r5
 8008476:	f000 8505 	beq.w	8008e84 <_svfprintf_r+0x1150>
 800847a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800847e:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
 8008482:	2700      	movs	r7, #0
 8008484:	9a07      	ldr	r2, [sp, #28]
 8008486:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800848a:	2330      	movs	r3, #48	; 0x30
 800848c:	45bb      	cmp	fp, r7
 800848e:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8008492:	f042 0302 	orr.w	r3, r2, #2
 8008496:	f2c0 86b5 	blt.w	8009204 <_svfprintf_r+0x14d0>
 800849a:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 800849e:	f043 0302 	orr.w	r3, r3, #2
 80084a2:	9307      	str	r3, [sp, #28]
 80084a4:	ae30      	add	r6, sp, #192	; 0xc0
 80084a6:	0923      	lsrs	r3, r4, #4
 80084a8:	f004 010f 	and.w	r1, r4, #15
 80084ac:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 80084b0:	092a      	lsrs	r2, r5, #4
 80084b2:	461c      	mov	r4, r3
 80084b4:	4615      	mov	r5, r2
 80084b6:	5c43      	ldrb	r3, [r0, r1]
 80084b8:	f806 3d01 	strb.w	r3, [r6, #-1]!
 80084bc:	ea54 0305 	orrs.w	r3, r4, r5
 80084c0:	d1f1      	bne.n	80084a6 <_svfprintf_r+0x772>
 80084c2:	e5f3      	b.n	80080ac <_svfprintf_r+0x378>
 80084c4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80084c6:	9311      	str	r3, [sp, #68]	; 0x44
 80084c8:	680a      	ldr	r2, [r1, #0]
 80084ca:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 80084ce:	2300      	movs	r3, #0
 80084d0:	460a      	mov	r2, r1
 80084d2:	461f      	mov	r7, r3
 80084d4:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 80084d8:	3204      	adds	r2, #4
 80084da:	2301      	movs	r3, #1
 80084dc:	9308      	str	r3, [sp, #32]
 80084de:	46bb      	mov	fp, r7
 80084e0:	9713      	str	r7, [sp, #76]	; 0x4c
 80084e2:	920e      	str	r2, [sp, #56]	; 0x38
 80084e4:	930d      	str	r3, [sp, #52]	; 0x34
 80084e6:	ae26      	add	r6, sp, #152	; 0x98
 80084e8:	e5ee      	b.n	80080c8 <_svfprintf_r+0x394>
 80084ea:	9311      	str	r3, [sp, #68]	; 0x44
 80084ec:	46ab      	mov	fp, r5
 80084ee:	2a00      	cmp	r2, #0
 80084f0:	f43f ada0 	beq.w	8008034 <_svfprintf_r+0x300>
 80084f4:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 80084f8:	e59c      	b.n	8008034 <_svfprintf_r+0x300>
 80084fa:	9b07      	ldr	r3, [sp, #28]
 80084fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008500:	9307      	str	r3, [sp, #28]
 8008502:	f898 3000 	ldrb.w	r3, [r8]
 8008506:	e46e      	b.n	8007de6 <_svfprintf_r+0xb2>
 8008508:	f898 3000 	ldrb.w	r3, [r8]
 800850c:	2900      	cmp	r1, #0
 800850e:	f47f ac6a 	bne.w	8007de6 <_svfprintf_r+0xb2>
 8008512:	2201      	movs	r2, #1
 8008514:	2120      	movs	r1, #32
 8008516:	e466      	b.n	8007de6 <_svfprintf_r+0xb2>
 8008518:	9b07      	ldr	r3, [sp, #28]
 800851a:	f043 0301 	orr.w	r3, r3, #1
 800851e:	9307      	str	r3, [sp, #28]
 8008520:	f898 3000 	ldrb.w	r3, [r8]
 8008524:	e45f      	b.n	8007de6 <_svfprintf_r+0xb2>
 8008526:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8008528:	6823      	ldr	r3, [r4, #0]
 800852a:	930c      	str	r3, [sp, #48]	; 0x30
 800852c:	4618      	mov	r0, r3
 800852e:	2800      	cmp	r0, #0
 8008530:	4623      	mov	r3, r4
 8008532:	f103 0304 	add.w	r3, r3, #4
 8008536:	f6ff acb8 	blt.w	8007eaa <_svfprintf_r+0x176>
 800853a:	930e      	str	r3, [sp, #56]	; 0x38
 800853c:	f898 3000 	ldrb.w	r3, [r8]
 8008540:	e451      	b.n	8007de6 <_svfprintf_r+0xb2>
 8008542:	f898 3000 	ldrb.w	r3, [r8]
 8008546:	2201      	movs	r2, #1
 8008548:	212b      	movs	r1, #43	; 0x2b
 800854a:	e44c      	b.n	8007de6 <_svfprintf_r+0xb2>
 800854c:	9311      	str	r3, [sp, #68]	; 0x44
 800854e:	46ab      	mov	fp, r5
 8008550:	2a00      	cmp	r2, #0
 8008552:	f43f af51 	beq.w	80083f8 <_svfprintf_r+0x6c4>
 8008556:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800855a:	e74d      	b.n	80083f8 <_svfprintf_r+0x6c4>
 800855c:	0800e148 	.word	0x0800e148
 8008560:	7fefffff 	.word	0x7fefffff
 8008564:	0800e108 	.word	0x0800e108
 8008568:	0800e104 	.word	0x0800e104
 800856c:	0800e114 	.word	0x0800e114
 8008570:	9311      	str	r3, [sp, #68]	; 0x44
 8008572:	46ab      	mov	fp, r5
 8008574:	2a00      	cmp	r2, #0
 8008576:	f040 872a 	bne.w	80093ce <_svfprintf_r+0x169a>
 800857a:	9b07      	ldr	r3, [sp, #28]
 800857c:	4899      	ldr	r0, [pc, #612]	; (80087e4 <_svfprintf_r+0xab0>)
 800857e:	069d      	lsls	r5, r3, #26
 8008580:	f53f af69 	bmi.w	8008456 <_svfprintf_r+0x722>
 8008584:	9b07      	ldr	r3, [sp, #28]
 8008586:	06dc      	lsls	r4, r3, #27
 8008588:	f140 8435 	bpl.w	8008df6 <_svfprintf_r+0x10c2>
 800858c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800858e:	4613      	mov	r3, r2
 8008590:	3304      	adds	r3, #4
 8008592:	6814      	ldr	r4, [r2, #0]
 8008594:	930e      	str	r3, [sp, #56]	; 0x38
 8008596:	2500      	movs	r5, #0
 8008598:	e766      	b.n	8008468 <_svfprintf_r+0x734>
 800859a:	f898 3000 	ldrb.w	r3, [r8]
 800859e:	2b6c      	cmp	r3, #108	; 0x6c
 80085a0:	f000 84e2 	beq.w	8008f68 <_svfprintf_r+0x1234>
 80085a4:	9807      	ldr	r0, [sp, #28]
 80085a6:	f040 0010 	orr.w	r0, r0, #16
 80085aa:	9007      	str	r0, [sp, #28]
 80085ac:	e41b      	b.n	8007de6 <_svfprintf_r+0xb2>
 80085ae:	2a00      	cmp	r2, #0
 80085b0:	f040 8709 	bne.w	80093c6 <_svfprintf_r+0x1692>
 80085b4:	9b07      	ldr	r3, [sp, #28]
 80085b6:	069b      	lsls	r3, r3, #26
 80085b8:	f140 8406 	bpl.w	8008dc8 <_svfprintf_r+0x1094>
 80085bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80085be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80085c0:	6813      	ldr	r3, [r2, #0]
 80085c2:	17cd      	asrs	r5, r1, #31
 80085c4:	4608      	mov	r0, r1
 80085c6:	3204      	adds	r2, #4
 80085c8:	4629      	mov	r1, r5
 80085ca:	920e      	str	r2, [sp, #56]	; 0x38
 80085cc:	e9c3 0100 	strd	r0, r1, [r3]
 80085d0:	f7ff bbd6 	b.w	8007d80 <_svfprintf_r+0x4c>
 80085d4:	9b07      	ldr	r3, [sp, #28]
 80085d6:	f043 0320 	orr.w	r3, r3, #32
 80085da:	9307      	str	r3, [sp, #28]
 80085dc:	f898 3000 	ldrb.w	r3, [r8]
 80085e0:	e401      	b.n	8007de6 <_svfprintf_r+0xb2>
 80085e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80085e4:	9311      	str	r3, [sp, #68]	; 0x44
 80085e6:	6816      	ldr	r6, [r2, #0]
 80085e8:	2400      	movs	r4, #0
 80085ea:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
 80085ee:	1d17      	adds	r7, r2, #4
 80085f0:	2e00      	cmp	r6, #0
 80085f2:	f000 85cd 	beq.w	8009190 <_svfprintf_r+0x145c>
 80085f6:	2d00      	cmp	r5, #0
 80085f8:	f2c0 8518 	blt.w	800902c <_svfprintf_r+0x12f8>
 80085fc:	462a      	mov	r2, r5
 80085fe:	4621      	mov	r1, r4
 8008600:	4630      	mov	r0, r6
 8008602:	f7f8 f92d 	bl	8000860 <memchr>
 8008606:	2800      	cmp	r0, #0
 8008608:	f000 862a 	beq.w	8009260 <_svfprintf_r+0x152c>
 800860c:	1b83      	subs	r3, r0, r6
 800860e:	930d      	str	r3, [sp, #52]	; 0x34
 8008610:	46a3      	mov	fp, r4
 8008612:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008616:	970e      	str	r7, [sp, #56]	; 0x38
 8008618:	9308      	str	r3, [sp, #32]
 800861a:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 800861e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 8008622:	e54d      	b.n	80080c0 <_svfprintf_r+0x38c>
 8008624:	486f      	ldr	r0, [pc, #444]	; (80087e4 <_svfprintf_r+0xab0>)
 8008626:	9211      	str	r2, [sp, #68]	; 0x44
 8008628:	f1bb 0f00 	cmp.w	fp, #0
 800862c:	f040 8173 	bne.w	8008916 <_svfprintf_r+0xbe2>
 8008630:	465f      	mov	r7, fp
 8008632:	f04f 0b00 	mov.w	fp, #0
 8008636:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 800863a:	ae30      	add	r6, sp, #192	; 0xc0
 800863c:	e539      	b.n	80080b2 <_svfprintf_r+0x37e>
 800863e:	9311      	str	r3, [sp, #68]	; 0x44
 8008640:	2a00      	cmp	r2, #0
 8008642:	f040 86ac 	bne.w	800939e <_svfprintf_r+0x166a>
 8008646:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008648:	2a00      	cmp	r2, #0
 800864a:	f43f ac65 	beq.w	8007f18 <_svfprintf_r+0x1e4>
 800864e:	2300      	movs	r3, #0
 8008650:	2101      	movs	r1, #1
 8008652:	461f      	mov	r7, r3
 8008654:	9108      	str	r1, [sp, #32]
 8008656:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 800865a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800865e:	469b      	mov	fp, r3
 8008660:	9313      	str	r3, [sp, #76]	; 0x4c
 8008662:	910d      	str	r1, [sp, #52]	; 0x34
 8008664:	ae26      	add	r6, sp, #152	; 0x98
 8008666:	e52f      	b.n	80080c8 <_svfprintf_r+0x394>
 8008668:	f1bb 0f00 	cmp.w	fp, #0
 800866c:	f000 8603 	beq.w	8009276 <_svfprintf_r+0x1542>
 8008670:	2700      	movs	r7, #0
 8008672:	2400      	movs	r4, #0
 8008674:	2500      	movs	r5, #0
 8008676:	e482      	b.n	8007f7e <_svfprintf_r+0x24a>
 8008678:	485a      	ldr	r0, [pc, #360]	; (80087e4 <_svfprintf_r+0xab0>)
 800867a:	9307      	str	r3, [sp, #28]
 800867c:	9211      	str	r2, [sp, #68]	; 0x44
 800867e:	ea54 0305 	orrs.w	r3, r4, r5
 8008682:	970e      	str	r7, [sp, #56]	; 0x38
 8008684:	f04f 0700 	mov.w	r7, #0
 8008688:	f47f af0c 	bne.w	80084a4 <_svfprintf_r+0x770>
 800868c:	2400      	movs	r4, #0
 800868e:	2500      	movs	r5, #0
 8008690:	e708      	b.n	80084a4 <_svfprintf_r+0x770>
 8008692:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8008694:	e568      	b.n	8008168 <_svfprintf_r+0x434>
 8008696:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008698:	2b65      	cmp	r3, #101	; 0x65
 800869a:	f340 80a9 	ble.w	80087f0 <_svfprintf_r+0xabc>
 800869e:	9814      	ldr	r0, [sp, #80]	; 0x50
 80086a0:	9915      	ldr	r1, [sp, #84]	; 0x54
 80086a2:	2200      	movs	r2, #0
 80086a4:	2300      	movs	r3, #0
 80086a6:	f7f8 fd4b 	bl	8001140 <__aeabi_dcmpeq>
 80086aa:	2800      	cmp	r0, #0
 80086ac:	f000 8135 	beq.w	800891a <_svfprintf_r+0xbe6>
 80086b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80086b2:	4a4d      	ldr	r2, [pc, #308]	; (80087e8 <_svfprintf_r+0xab4>)
 80086b4:	f8c9 2000 	str.w	r2, [r9]
 80086b8:	3301      	adds	r3, #1
 80086ba:	3401      	adds	r4, #1
 80086bc:	2201      	movs	r2, #1
 80086be:	2b07      	cmp	r3, #7
 80086c0:	9425      	str	r4, [sp, #148]	; 0x94
 80086c2:	9324      	str	r3, [sp, #144]	; 0x90
 80086c4:	f8c9 2004 	str.w	r2, [r9, #4]
 80086c8:	f300 83e8 	bgt.w	8008e9c <_svfprintf_r+0x1168>
 80086cc:	f109 0908 	add.w	r9, r9, #8
 80086d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80086d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80086d4:	4293      	cmp	r3, r2
 80086d6:	db03      	blt.n	80086e0 <_svfprintf_r+0x9ac>
 80086d8:	9b07      	ldr	r3, [sp, #28]
 80086da:	07db      	lsls	r3, r3, #31
 80086dc:	f57f adba 	bpl.w	8008254 <_svfprintf_r+0x520>
 80086e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80086e2:	9916      	ldr	r1, [sp, #88]	; 0x58
 80086e4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80086e6:	f8c9 2000 	str.w	r2, [r9]
 80086ea:	3301      	adds	r3, #1
 80086ec:	440c      	add	r4, r1
 80086ee:	2b07      	cmp	r3, #7
 80086f0:	9425      	str	r4, [sp, #148]	; 0x94
 80086f2:	f8c9 1004 	str.w	r1, [r9, #4]
 80086f6:	9324      	str	r3, [sp, #144]	; 0x90
 80086f8:	f300 8440 	bgt.w	8008f7c <_svfprintf_r+0x1248>
 80086fc:	f109 0908 	add.w	r9, r9, #8
 8008700:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008702:	1e5d      	subs	r5, r3, #1
 8008704:	2d00      	cmp	r5, #0
 8008706:	f77f ada5 	ble.w	8008254 <_svfprintf_r+0x520>
 800870a:	4a38      	ldr	r2, [pc, #224]	; (80087ec <_svfprintf_r+0xab8>)
 800870c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800870e:	920f      	str	r2, [sp, #60]	; 0x3c
 8008710:	2d10      	cmp	r5, #16
 8008712:	f340 81e6 	ble.w	8008ae2 <_svfprintf_r+0xdae>
 8008716:	2610      	movs	r6, #16
 8008718:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800871a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800871e:	e005      	b.n	800872c <_svfprintf_r+0x9f8>
 8008720:	f109 0908 	add.w	r9, r9, #8
 8008724:	3d10      	subs	r5, #16
 8008726:	2d10      	cmp	r5, #16
 8008728:	f340 81db 	ble.w	8008ae2 <_svfprintf_r+0xdae>
 800872c:	3301      	adds	r3, #1
 800872e:	3410      	adds	r4, #16
 8008730:	2b07      	cmp	r3, #7
 8008732:	9425      	str	r4, [sp, #148]	; 0x94
 8008734:	9324      	str	r3, [sp, #144]	; 0x90
 8008736:	f8c9 a000 	str.w	sl, [r9]
 800873a:	f8c9 6004 	str.w	r6, [r9, #4]
 800873e:	ddef      	ble.n	8008720 <_svfprintf_r+0x9ec>
 8008740:	aa23      	add	r2, sp, #140	; 0x8c
 8008742:	4659      	mov	r1, fp
 8008744:	4638      	mov	r0, r7
 8008746:	f004 ff41 	bl	800d5cc <__ssprint_r>
 800874a:	2800      	cmp	r0, #0
 800874c:	f47f abeb 	bne.w	8007f26 <_svfprintf_r+0x1f2>
 8008750:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8008752:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008754:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8008758:	e7e4      	b.n	8008724 <_svfprintf_r+0x9f0>
 800875a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800875c:	9a08      	ldr	r2, [sp, #32]
 800875e:	1a9f      	subs	r7, r3, r2
 8008760:	2f00      	cmp	r7, #0
 8008762:	f77f ad25 	ble.w	80081b0 <_svfprintf_r+0x47c>
 8008766:	4a21      	ldr	r2, [pc, #132]	; (80087ec <_svfprintf_r+0xab8>)
 8008768:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800876a:	920f      	str	r2, [sp, #60]	; 0x3c
 800876c:	2f10      	cmp	r7, #16
 800876e:	dd2b      	ble.n	80087c8 <_svfprintf_r+0xa94>
 8008770:	464a      	mov	r2, r9
 8008772:	4621      	mov	r1, r4
 8008774:	46b9      	mov	r9, r7
 8008776:	2510      	movs	r5, #16
 8008778:	4637      	mov	r7, r6
 800877a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800877c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800877e:	e006      	b.n	800878e <_svfprintf_r+0xa5a>
 8008780:	f1a9 0910 	sub.w	r9, r9, #16
 8008784:	f1b9 0f10 	cmp.w	r9, #16
 8008788:	f102 0208 	add.w	r2, r2, #8
 800878c:	dd18      	ble.n	80087c0 <_svfprintf_r+0xa8c>
 800878e:	3301      	adds	r3, #1
 8008790:	3110      	adds	r1, #16
 8008792:	2b07      	cmp	r3, #7
 8008794:	9125      	str	r1, [sp, #148]	; 0x94
 8008796:	9324      	str	r3, [sp, #144]	; 0x90
 8008798:	f8c2 a000 	str.w	sl, [r2]
 800879c:	6055      	str	r5, [r2, #4]
 800879e:	ddef      	ble.n	8008780 <_svfprintf_r+0xa4c>
 80087a0:	aa23      	add	r2, sp, #140	; 0x8c
 80087a2:	4631      	mov	r1, r6
 80087a4:	4620      	mov	r0, r4
 80087a6:	f004 ff11 	bl	800d5cc <__ssprint_r>
 80087aa:	2800      	cmp	r0, #0
 80087ac:	f47f abbb 	bne.w	8007f26 <_svfprintf_r+0x1f2>
 80087b0:	f1a9 0910 	sub.w	r9, r9, #16
 80087b4:	f1b9 0f10 	cmp.w	r9, #16
 80087b8:	9925      	ldr	r1, [sp, #148]	; 0x94
 80087ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80087bc:	aa30      	add	r2, sp, #192	; 0xc0
 80087be:	dce6      	bgt.n	800878e <_svfprintf_r+0xa5a>
 80087c0:	463e      	mov	r6, r7
 80087c2:	460c      	mov	r4, r1
 80087c4:	464f      	mov	r7, r9
 80087c6:	4691      	mov	r9, r2
 80087c8:	3301      	adds	r3, #1
 80087ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80087cc:	9324      	str	r3, [sp, #144]	; 0x90
 80087ce:	443c      	add	r4, r7
 80087d0:	2b07      	cmp	r3, #7
 80087d2:	9425      	str	r4, [sp, #148]	; 0x94
 80087d4:	e889 0084 	stmia.w	r9, {r2, r7}
 80087d8:	f300 8245 	bgt.w	8008c66 <_svfprintf_r+0xf32>
 80087dc:	f109 0908 	add.w	r9, r9, #8
 80087e0:	e4e6      	b.n	80081b0 <_svfprintf_r+0x47c>
 80087e2:	bf00      	nop
 80087e4:	0800e128 	.word	0x0800e128
 80087e8:	0800e144 	.word	0x0800e144
 80087ec:	0800e0f4 	.word	0x0800e0f4
 80087f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80087f2:	9d24      	ldr	r5, [sp, #144]	; 0x90
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	f340 8208 	ble.w	8008c0a <_svfprintf_r+0xed6>
 80087fa:	3501      	adds	r5, #1
 80087fc:	3401      	adds	r4, #1
 80087fe:	2301      	movs	r3, #1
 8008800:	2d07      	cmp	r5, #7
 8008802:	9425      	str	r4, [sp, #148]	; 0x94
 8008804:	9524      	str	r5, [sp, #144]	; 0x90
 8008806:	f8c9 6000 	str.w	r6, [r9]
 800880a:	f8c9 3004 	str.w	r3, [r9, #4]
 800880e:	f300 820d 	bgt.w	8008c2c <_svfprintf_r+0xef8>
 8008812:	f109 0908 	add.w	r9, r9, #8
 8008816:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008818:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800881a:	f8c9 3000 	str.w	r3, [r9]
 800881e:	3501      	adds	r5, #1
 8008820:	4414      	add	r4, r2
 8008822:	2d07      	cmp	r5, #7
 8008824:	9425      	str	r4, [sp, #148]	; 0x94
 8008826:	9524      	str	r5, [sp, #144]	; 0x90
 8008828:	f8c9 2004 	str.w	r2, [r9, #4]
 800882c:	f300 820e 	bgt.w	8008c4c <_svfprintf_r+0xf18>
 8008830:	f109 0908 	add.w	r9, r9, #8
 8008834:	2300      	movs	r3, #0
 8008836:	9814      	ldr	r0, [sp, #80]	; 0x50
 8008838:	9915      	ldr	r1, [sp, #84]	; 0x54
 800883a:	2200      	movs	r2, #0
 800883c:	f7f8 fc80 	bl	8001140 <__aeabi_dcmpeq>
 8008840:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008842:	2800      	cmp	r0, #0
 8008844:	f040 80c3 	bne.w	80089ce <_svfprintf_r+0xc9a>
 8008848:	3b01      	subs	r3, #1
 800884a:	3501      	adds	r5, #1
 800884c:	3601      	adds	r6, #1
 800884e:	441c      	add	r4, r3
 8008850:	2d07      	cmp	r5, #7
 8008852:	9524      	str	r5, [sp, #144]	; 0x90
 8008854:	9425      	str	r4, [sp, #148]	; 0x94
 8008856:	f8c9 6000 	str.w	r6, [r9]
 800885a:	f8c9 3004 	str.w	r3, [r9, #4]
 800885e:	f300 80f5 	bgt.w	8008a4c <_svfprintf_r+0xd18>
 8008862:	f109 0908 	add.w	r9, r9, #8
 8008866:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008868:	f8c9 2004 	str.w	r2, [r9, #4]
 800886c:	3501      	adds	r5, #1
 800886e:	4414      	add	r4, r2
 8008870:	ab1f      	add	r3, sp, #124	; 0x7c
 8008872:	2d07      	cmp	r5, #7
 8008874:	9425      	str	r4, [sp, #148]	; 0x94
 8008876:	9524      	str	r5, [sp, #144]	; 0x90
 8008878:	f8c9 3000 	str.w	r3, [r9]
 800887c:	f77f ace8 	ble.w	8008250 <_svfprintf_r+0x51c>
 8008880:	aa23      	add	r2, sp, #140	; 0x8c
 8008882:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008884:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008886:	f004 fea1 	bl	800d5cc <__ssprint_r>
 800888a:	2800      	cmp	r0, #0
 800888c:	f47f ab4b 	bne.w	8007f26 <_svfprintf_r+0x1f2>
 8008890:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8008892:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8008896:	e4dd      	b.n	8008254 <_svfprintf_r+0x520>
 8008898:	aa23      	add	r2, sp, #140	; 0x8c
 800889a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800889c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800889e:	f004 fe95 	bl	800d5cc <__ssprint_r>
 80088a2:	2800      	cmp	r0, #0
 80088a4:	f43f ad24 	beq.w	80082f0 <_svfprintf_r+0x5bc>
 80088a8:	f7ff bb3d 	b.w	8007f26 <_svfprintf_r+0x1f2>
 80088ac:	aa23      	add	r2, sp, #140	; 0x8c
 80088ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80088b2:	f004 fe8b 	bl	800d5cc <__ssprint_r>
 80088b6:	2800      	cmp	r0, #0
 80088b8:	f47f ab35 	bne.w	8007f26 <_svfprintf_r+0x1f2>
 80088bc:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80088be:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 80088c2:	e4b4      	b.n	800822e <_svfprintf_r+0x4fa>
 80088c4:	aa23      	add	r2, sp, #140	; 0x8c
 80088c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80088ca:	f004 fe7f 	bl	800d5cc <__ssprint_r>
 80088ce:	2800      	cmp	r0, #0
 80088d0:	f47f ab29 	bne.w	8007f26 <_svfprintf_r+0x1f2>
 80088d4:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80088d6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 80088da:	e455      	b.n	8008188 <_svfprintf_r+0x454>
 80088dc:	aa23      	add	r2, sp, #140	; 0x8c
 80088de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088e0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80088e2:	f004 fe73 	bl	800d5cc <__ssprint_r>
 80088e6:	2800      	cmp	r0, #0
 80088e8:	f47f ab1d 	bne.w	8007f26 <_svfprintf_r+0x1f2>
 80088ec:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80088ee:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 80088f2:	e459      	b.n	80081a8 <_svfprintf_r+0x474>
 80088f4:	f1bb 0f00 	cmp.w	fp, #0
 80088f8:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 80088fc:	f2c0 82da 	blt.w	8008eb4 <_svfprintf_r+0x1180>
 8008900:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8008904:	9307      	str	r3, [sp, #28]
 8008906:	ea54 0305 	orrs.w	r3, r4, r5
 800890a:	f47f adcb 	bne.w	80084a4 <_svfprintf_r+0x770>
 800890e:	f1bb 0f00 	cmp.w	fp, #0
 8008912:	f43f ae8d 	beq.w	8008630 <_svfprintf_r+0x8fc>
 8008916:	2700      	movs	r7, #0
 8008918:	e6b8      	b.n	800868c <_svfprintf_r+0x958>
 800891a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800891c:	2d00      	cmp	r5, #0
 800891e:	f340 82cc 	ble.w	8008eba <_svfprintf_r+0x1186>
 8008922:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008924:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008926:	4293      	cmp	r3, r2
 8008928:	bfa8      	it	ge
 800892a:	4613      	movge	r3, r2
 800892c:	2b00      	cmp	r3, #0
 800892e:	461d      	mov	r5, r3
 8008930:	dd0d      	ble.n	800894e <_svfprintf_r+0xc1a>
 8008932:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008934:	f8c9 6000 	str.w	r6, [r9]
 8008938:	3301      	adds	r3, #1
 800893a:	442c      	add	r4, r5
 800893c:	2b07      	cmp	r3, #7
 800893e:	9425      	str	r4, [sp, #148]	; 0x94
 8008940:	f8c9 5004 	str.w	r5, [r9, #4]
 8008944:	9324      	str	r3, [sp, #144]	; 0x90
 8008946:	f300 83a3 	bgt.w	8009090 <_svfprintf_r+0x135c>
 800894a:	f109 0908 	add.w	r9, r9, #8
 800894e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008950:	2d00      	cmp	r5, #0
 8008952:	bfa8      	it	ge
 8008954:	1b5b      	subge	r3, r3, r5
 8008956:	2b00      	cmp	r3, #0
 8008958:	461d      	mov	r5, r3
 800895a:	f340 80f6 	ble.w	8008b4a <_svfprintf_r+0xe16>
 800895e:	4aba      	ldr	r2, [pc, #744]	; (8008c48 <_svfprintf_r+0xf14>)
 8008960:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008962:	920f      	str	r2, [sp, #60]	; 0x3c
 8008964:	2d10      	cmp	r5, #16
 8008966:	f340 8280 	ble.w	8008e6a <_svfprintf_r+0x1136>
 800896a:	4622      	mov	r2, r4
 800896c:	2710      	movs	r7, #16
 800896e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8008972:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008974:	e005      	b.n	8008982 <_svfprintf_r+0xc4e>
 8008976:	f109 0908 	add.w	r9, r9, #8
 800897a:	3d10      	subs	r5, #16
 800897c:	2d10      	cmp	r5, #16
 800897e:	f340 8273 	ble.w	8008e68 <_svfprintf_r+0x1134>
 8008982:	3301      	adds	r3, #1
 8008984:	3210      	adds	r2, #16
 8008986:	2b07      	cmp	r3, #7
 8008988:	9225      	str	r2, [sp, #148]	; 0x94
 800898a:	9324      	str	r3, [sp, #144]	; 0x90
 800898c:	f8c9 a000 	str.w	sl, [r9]
 8008990:	f8c9 7004 	str.w	r7, [r9, #4]
 8008994:	ddef      	ble.n	8008976 <_svfprintf_r+0xc42>
 8008996:	aa23      	add	r2, sp, #140	; 0x8c
 8008998:	4621      	mov	r1, r4
 800899a:	4658      	mov	r0, fp
 800899c:	f004 fe16 	bl	800d5cc <__ssprint_r>
 80089a0:	2800      	cmp	r0, #0
 80089a2:	f47f aac0 	bne.w	8007f26 <_svfprintf_r+0x1f2>
 80089a6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80089a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80089aa:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 80089ae:	e7e4      	b.n	800897a <_svfprintf_r+0xc46>
 80089b0:	aa23      	add	r2, sp, #140	; 0x8c
 80089b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80089b6:	f004 fe09 	bl	800d5cc <__ssprint_r>
 80089ba:	2800      	cmp	r0, #0
 80089bc:	f47f aab3 	bne.w	8007f26 <_svfprintf_r+0x1f2>
 80089c0:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 80089c4:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80089c6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 80089ca:	f7ff bbcd 	b.w	8008168 <_svfprintf_r+0x434>
 80089ce:	1e5e      	subs	r6, r3, #1
 80089d0:	2e00      	cmp	r6, #0
 80089d2:	f77f af48 	ble.w	8008866 <_svfprintf_r+0xb32>
 80089d6:	4b9c      	ldr	r3, [pc, #624]	; (8008c48 <_svfprintf_r+0xf14>)
 80089d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80089da:	2e10      	cmp	r6, #16
 80089dc:	dd2c      	ble.n	8008a38 <_svfprintf_r+0xd04>
 80089de:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 80089e2:	2710      	movs	r7, #16
 80089e4:	46b0      	mov	r8, r6
 80089e6:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80089ea:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80089ec:	e006      	b.n	80089fc <_svfprintf_r+0xcc8>
 80089ee:	f1a8 0810 	sub.w	r8, r8, #16
 80089f2:	f1b8 0f10 	cmp.w	r8, #16
 80089f6:	f109 0908 	add.w	r9, r9, #8
 80089fa:	dd1a      	ble.n	8008a32 <_svfprintf_r+0xcfe>
 80089fc:	3501      	adds	r5, #1
 80089fe:	3410      	adds	r4, #16
 8008a00:	2d07      	cmp	r5, #7
 8008a02:	9425      	str	r4, [sp, #148]	; 0x94
 8008a04:	9524      	str	r5, [sp, #144]	; 0x90
 8008a06:	f8c9 a000 	str.w	sl, [r9]
 8008a0a:	f8c9 7004 	str.w	r7, [r9, #4]
 8008a0e:	ddee      	ble.n	80089ee <_svfprintf_r+0xcba>
 8008a10:	aa23      	add	r2, sp, #140	; 0x8c
 8008a12:	4631      	mov	r1, r6
 8008a14:	4658      	mov	r0, fp
 8008a16:	f004 fdd9 	bl	800d5cc <__ssprint_r>
 8008a1a:	2800      	cmp	r0, #0
 8008a1c:	f47f aa83 	bne.w	8007f26 <_svfprintf_r+0x1f2>
 8008a20:	f1a8 0810 	sub.w	r8, r8, #16
 8008a24:	f1b8 0f10 	cmp.w	r8, #16
 8008a28:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8008a2a:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8008a2c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8008a30:	dce4      	bgt.n	80089fc <_svfprintf_r+0xcc8>
 8008a32:	4646      	mov	r6, r8
 8008a34:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8008a38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a3a:	3501      	adds	r5, #1
 8008a3c:	4434      	add	r4, r6
 8008a3e:	2d07      	cmp	r5, #7
 8008a40:	9425      	str	r4, [sp, #148]	; 0x94
 8008a42:	9524      	str	r5, [sp, #144]	; 0x90
 8008a44:	e889 0048 	stmia.w	r9, {r3, r6}
 8008a48:	f77f af0b 	ble.w	8008862 <_svfprintf_r+0xb2e>
 8008a4c:	aa23      	add	r2, sp, #140	; 0x8c
 8008a4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a50:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008a52:	f004 fdbb 	bl	800d5cc <__ssprint_r>
 8008a56:	2800      	cmp	r0, #0
 8008a58:	f47f aa65 	bne.w	8007f26 <_svfprintf_r+0x1f2>
 8008a5c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8008a5e:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8008a60:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8008a64:	e6ff      	b.n	8008866 <_svfprintf_r+0xb32>
 8008a66:	9907      	ldr	r1, [sp, #28]
 8008a68:	f011 0210 	ands.w	r2, r1, #16
 8008a6c:	f000 8108 	beq.w	8008c80 <_svfprintf_r+0xf4c>
 8008a70:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008a72:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8008a76:	f1bb 0f00 	cmp.w	fp, #0
 8008a7a:	6804      	ldr	r4, [r0, #0]
 8008a7c:	f100 0704 	add.w	r7, r0, #4
 8008a80:	f04f 0500 	mov.w	r5, #0
 8008a84:	db26      	blt.n	8008ad4 <_svfprintf_r+0xda0>
 8008a86:	460a      	mov	r2, r1
 8008a88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a8c:	9207      	str	r2, [sp, #28]
 8008a8e:	ea54 0205 	orrs.w	r2, r4, r5
 8008a92:	970e      	str	r7, [sp, #56]	; 0x38
 8008a94:	461f      	mov	r7, r3
 8008a96:	f47f aaef 	bne.w	8008078 <_svfprintf_r+0x344>
 8008a9a:	e4c8      	b.n	800842e <_svfprintf_r+0x6fa>
 8008a9c:	9b07      	ldr	r3, [sp, #28]
 8008a9e:	06d9      	lsls	r1, r3, #27
 8008aa0:	d42a      	bmi.n	8008af8 <_svfprintf_r+0xdc4>
 8008aa2:	9b07      	ldr	r3, [sp, #28]
 8008aa4:	065a      	lsls	r2, r3, #25
 8008aa6:	d527      	bpl.n	8008af8 <_svfprintf_r+0xdc4>
 8008aa8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008aaa:	f9b1 4000 	ldrsh.w	r4, [r1]
 8008aae:	3104      	adds	r1, #4
 8008ab0:	17e5      	asrs	r5, r4, #31
 8008ab2:	4622      	mov	r2, r4
 8008ab4:	462b      	mov	r3, r5
 8008ab6:	910e      	str	r1, [sp, #56]	; 0x38
 8008ab8:	f7ff bacb 	b.w	8008052 <_svfprintf_r+0x31e>
 8008abc:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008abe:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8008ac2:	f1bb 0f00 	cmp.w	fp, #0
 8008ac6:	680c      	ldr	r4, [r1, #0]
 8008ac8:	f101 0704 	add.w	r7, r1, #4
 8008acc:	f04f 0500 	mov.w	r5, #0
 8008ad0:	f280 8245 	bge.w	8008f5e <_svfprintf_r+0x122a>
 8008ad4:	970e      	str	r7, [sp, #56]	; 0x38
 8008ad6:	461f      	mov	r7, r3
 8008ad8:	ea54 0305 	orrs.w	r3, r4, r5
 8008adc:	f47f aacc 	bne.w	8008078 <_svfprintf_r+0x344>
 8008ae0:	e4aa      	b.n	8008438 <_svfprintf_r+0x704>
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008ae6:	9324      	str	r3, [sp, #144]	; 0x90
 8008ae8:	442c      	add	r4, r5
 8008aea:	2b07      	cmp	r3, #7
 8008aec:	9425      	str	r4, [sp, #148]	; 0x94
 8008aee:	e889 0024 	stmia.w	r9, {r2, r5}
 8008af2:	f77f abad 	ble.w	8008250 <_svfprintf_r+0x51c>
 8008af6:	e6c3      	b.n	8008880 <_svfprintf_r+0xb4c>
 8008af8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008afa:	6814      	ldr	r4, [r2, #0]
 8008afc:	4613      	mov	r3, r2
 8008afe:	3304      	adds	r3, #4
 8008b00:	17e5      	asrs	r5, r4, #31
 8008b02:	4622      	mov	r2, r4
 8008b04:	930e      	str	r3, [sp, #56]	; 0x38
 8008b06:	2a00      	cmp	r2, #0
 8008b08:	462b      	mov	r3, r5
 8008b0a:	f173 0300 	sbcs.w	r3, r3, #0
 8008b0e:	f6bf aaa5 	bge.w	800805c <_svfprintf_r+0x328>
 8008b12:	4264      	negs	r4, r4
 8008b14:	f04f 072d 	mov.w	r7, #45	; 0x2d
 8008b18:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8008b1c:	f1bb 0f00 	cmp.w	fp, #0
 8008b20:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 8008b24:	f6ff aaa8 	blt.w	8008078 <_svfprintf_r+0x344>
 8008b28:	9b07      	ldr	r3, [sp, #28]
 8008b2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b2e:	9307      	str	r3, [sp, #28]
 8008b30:	f7ff baa2 	b.w	8008078 <_svfprintf_r+0x344>
 8008b34:	aa23      	add	r2, sp, #140	; 0x8c
 8008b36:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b38:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008b3a:	f004 fd47 	bl	800d5cc <__ssprint_r>
 8008b3e:	2800      	cmp	r0, #0
 8008b40:	f47f a9f1 	bne.w	8007f26 <_svfprintf_r+0x1f2>
 8008b44:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8008b46:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8008b4a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008b4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008b4e:	4432      	add	r2, r6
 8008b50:	4617      	mov	r7, r2
 8008b52:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008b54:	4293      	cmp	r3, r2
 8008b56:	db47      	blt.n	8008be8 <_svfprintf_r+0xeb4>
 8008b58:	9a07      	ldr	r2, [sp, #28]
 8008b5a:	07d5      	lsls	r5, r2, #31
 8008b5c:	d444      	bmi.n	8008be8 <_svfprintf_r+0xeb4>
 8008b5e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008b60:	440e      	add	r6, r1
 8008b62:	1bf5      	subs	r5, r6, r7
 8008b64:	1acb      	subs	r3, r1, r3
 8008b66:	429d      	cmp	r5, r3
 8008b68:	bfa8      	it	ge
 8008b6a:	461d      	movge	r5, r3
 8008b6c:	2d00      	cmp	r5, #0
 8008b6e:	462e      	mov	r6, r5
 8008b70:	dd0d      	ble.n	8008b8e <_svfprintf_r+0xe5a>
 8008b72:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008b74:	f8c9 7000 	str.w	r7, [r9]
 8008b78:	3201      	adds	r2, #1
 8008b7a:	442c      	add	r4, r5
 8008b7c:	2a07      	cmp	r2, #7
 8008b7e:	9425      	str	r4, [sp, #148]	; 0x94
 8008b80:	f8c9 5004 	str.w	r5, [r9, #4]
 8008b84:	9224      	str	r2, [sp, #144]	; 0x90
 8008b86:	f300 8312 	bgt.w	80091ae <_svfprintf_r+0x147a>
 8008b8a:	f109 0908 	add.w	r9, r9, #8
 8008b8e:	2e00      	cmp	r6, #0
 8008b90:	bfac      	ite	ge
 8008b92:	1b9d      	subge	r5, r3, r6
 8008b94:	461d      	movlt	r5, r3
 8008b96:	2d00      	cmp	r5, #0
 8008b98:	f77f ab5c 	ble.w	8008254 <_svfprintf_r+0x520>
 8008b9c:	4a2a      	ldr	r2, [pc, #168]	; (8008c48 <_svfprintf_r+0xf14>)
 8008b9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008ba0:	920f      	str	r2, [sp, #60]	; 0x3c
 8008ba2:	2d10      	cmp	r5, #16
 8008ba4:	dd9d      	ble.n	8008ae2 <_svfprintf_r+0xdae>
 8008ba6:	2610      	movs	r6, #16
 8008ba8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008baa:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8008bae:	e004      	b.n	8008bba <_svfprintf_r+0xe86>
 8008bb0:	f109 0908 	add.w	r9, r9, #8
 8008bb4:	3d10      	subs	r5, #16
 8008bb6:	2d10      	cmp	r5, #16
 8008bb8:	dd93      	ble.n	8008ae2 <_svfprintf_r+0xdae>
 8008bba:	3301      	adds	r3, #1
 8008bbc:	3410      	adds	r4, #16
 8008bbe:	2b07      	cmp	r3, #7
 8008bc0:	9425      	str	r4, [sp, #148]	; 0x94
 8008bc2:	9324      	str	r3, [sp, #144]	; 0x90
 8008bc4:	f8c9 a000 	str.w	sl, [r9]
 8008bc8:	f8c9 6004 	str.w	r6, [r9, #4]
 8008bcc:	ddf0      	ble.n	8008bb0 <_svfprintf_r+0xe7c>
 8008bce:	aa23      	add	r2, sp, #140	; 0x8c
 8008bd0:	4659      	mov	r1, fp
 8008bd2:	4638      	mov	r0, r7
 8008bd4:	f004 fcfa 	bl	800d5cc <__ssprint_r>
 8008bd8:	2800      	cmp	r0, #0
 8008bda:	f47f a9a4 	bne.w	8007f26 <_svfprintf_r+0x1f2>
 8008bde:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8008be0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008be2:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8008be6:	e7e5      	b.n	8008bb4 <_svfprintf_r+0xe80>
 8008be8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008bea:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008bec:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8008bee:	f8c9 1000 	str.w	r1, [r9]
 8008bf2:	3201      	adds	r2, #1
 8008bf4:	4404      	add	r4, r0
 8008bf6:	2a07      	cmp	r2, #7
 8008bf8:	9425      	str	r4, [sp, #148]	; 0x94
 8008bfa:	f8c9 0004 	str.w	r0, [r9, #4]
 8008bfe:	9224      	str	r2, [sp, #144]	; 0x90
 8008c00:	f300 82a5 	bgt.w	800914e <_svfprintf_r+0x141a>
 8008c04:	f109 0908 	add.w	r9, r9, #8
 8008c08:	e7a9      	b.n	8008b5e <_svfprintf_r+0xe2a>
 8008c0a:	9b07      	ldr	r3, [sp, #28]
 8008c0c:	07d8      	lsls	r0, r3, #31
 8008c0e:	f53f adf4 	bmi.w	80087fa <_svfprintf_r+0xac6>
 8008c12:	3501      	adds	r5, #1
 8008c14:	3401      	adds	r4, #1
 8008c16:	2301      	movs	r3, #1
 8008c18:	2d07      	cmp	r5, #7
 8008c1a:	9425      	str	r4, [sp, #148]	; 0x94
 8008c1c:	9524      	str	r5, [sp, #144]	; 0x90
 8008c1e:	f8c9 6000 	str.w	r6, [r9]
 8008c22:	f8c9 3004 	str.w	r3, [r9, #4]
 8008c26:	f77f ae1c 	ble.w	8008862 <_svfprintf_r+0xb2e>
 8008c2a:	e70f      	b.n	8008a4c <_svfprintf_r+0xd18>
 8008c2c:	aa23      	add	r2, sp, #140	; 0x8c
 8008c2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c30:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008c32:	f004 fccb 	bl	800d5cc <__ssprint_r>
 8008c36:	2800      	cmp	r0, #0
 8008c38:	f47f a975 	bne.w	8007f26 <_svfprintf_r+0x1f2>
 8008c3c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8008c3e:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8008c40:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8008c44:	e5e7      	b.n	8008816 <_svfprintf_r+0xae2>
 8008c46:	bf00      	nop
 8008c48:	0800e0f4 	.word	0x0800e0f4
 8008c4c:	aa23      	add	r2, sp, #140	; 0x8c
 8008c4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c50:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008c52:	f004 fcbb 	bl	800d5cc <__ssprint_r>
 8008c56:	2800      	cmp	r0, #0
 8008c58:	f47f a965 	bne.w	8007f26 <_svfprintf_r+0x1f2>
 8008c5c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8008c5e:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8008c60:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8008c64:	e5e6      	b.n	8008834 <_svfprintf_r+0xb00>
 8008c66:	aa23      	add	r2, sp, #140	; 0x8c
 8008c68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c6a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008c6c:	f004 fcae 	bl	800d5cc <__ssprint_r>
 8008c70:	2800      	cmp	r0, #0
 8008c72:	f47f a958 	bne.w	8007f26 <_svfprintf_r+0x1f2>
 8008c76:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8008c78:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8008c7c:	f7ff ba98 	b.w	80081b0 <_svfprintf_r+0x47c>
 8008c80:	9907      	ldr	r1, [sp, #28]
 8008c82:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 8008c86:	f43f af19 	beq.w	8008abc <_svfprintf_r+0xd88>
 8008c8a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008c8c:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
 8008c90:	4603      	mov	r3, r0
 8008c92:	f1bb 0f00 	cmp.w	fp, #0
 8008c96:	f103 0304 	add.w	r3, r3, #4
 8008c9a:	8804      	ldrh	r4, [r0, #0]
 8008c9c:	f04f 0500 	mov.w	r5, #0
 8008ca0:	f2c0 81b9 	blt.w	8009016 <_svfprintf_r+0x12e2>
 8008ca4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008ca8:	9107      	str	r1, [sp, #28]
 8008caa:	ea54 0105 	orrs.w	r1, r4, r5
 8008cae:	930e      	str	r3, [sp, #56]	; 0x38
 8008cb0:	4617      	mov	r7, r2
 8008cb2:	f47f a9e1 	bne.w	8008078 <_svfprintf_r+0x344>
 8008cb6:	f7ff bbba 	b.w	800842e <_svfprintf_r+0x6fa>
 8008cba:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8008cbc:	4622      	mov	r2, r4
 8008cbe:	4620      	mov	r0, r4
 8008cc0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8008cc2:	4623      	mov	r3, r4
 8008cc4:	4621      	mov	r1, r4
 8008cc6:	f7f8 fa6d 	bl	80011a4 <__aeabi_dcmpun>
 8008cca:	2800      	cmp	r0, #0
 8008ccc:	f040 8315 	bne.w	80092fa <_svfprintf_r+0x15c6>
 8008cd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008cd2:	f1bb 3fff 	cmp.w	fp, #4294967295
 8008cd6:	f023 0320 	bic.w	r3, r3, #32
 8008cda:	930d      	str	r3, [sp, #52]	; 0x34
 8008cdc:	f000 8276 	beq.w	80091cc <_svfprintf_r+0x1498>
 8008ce0:	2b47      	cmp	r3, #71	; 0x47
 8008ce2:	f000 8192 	beq.w	800900a <_svfprintf_r+0x12d6>
 8008ce6:	9b07      	ldr	r3, [sp, #28]
 8008ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cec:	9310      	str	r3, [sp, #64]	; 0x40
 8008cee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008cf0:	1e1f      	subs	r7, r3, #0
 8008cf2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008cf4:	9308      	str	r3, [sp, #32]
 8008cf6:	bfbb      	ittet	lt
 8008cf8:	463b      	movlt	r3, r7
 8008cfa:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
 8008cfe:	2300      	movge	r3, #0
 8008d00:	232d      	movlt	r3, #45	; 0x2d
 8008d02:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d04:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d06:	2b66      	cmp	r3, #102	; 0x66
 8008d08:	f000 8263 	beq.w	80091d2 <_svfprintf_r+0x149e>
 8008d0c:	2b46      	cmp	r3, #70	; 0x46
 8008d0e:	f000 815e 	beq.w	8008fce <_svfprintf_r+0x129a>
 8008d12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d14:	9a08      	ldr	r2, [sp, #32]
 8008d16:	2b45      	cmp	r3, #69	; 0x45
 8008d18:	a821      	add	r0, sp, #132	; 0x84
 8008d1a:	a91e      	add	r1, sp, #120	; 0x78
 8008d1c:	bf0c      	ite	eq
 8008d1e:	f10b 0501 	addeq.w	r5, fp, #1
 8008d22:	465d      	movne	r5, fp
 8008d24:	9004      	str	r0, [sp, #16]
 8008d26:	9103      	str	r1, [sp, #12]
 8008d28:	a81d      	add	r0, sp, #116	; 0x74
 8008d2a:	2102      	movs	r1, #2
 8008d2c:	463b      	mov	r3, r7
 8008d2e:	9002      	str	r0, [sp, #8]
 8008d30:	9501      	str	r5, [sp, #4]
 8008d32:	9100      	str	r1, [sp, #0]
 8008d34:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008d36:	f002 f803 	bl	800ad40 <_dtoa_r>
 8008d3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d3c:	2b67      	cmp	r3, #103	; 0x67
 8008d3e:	4606      	mov	r6, r0
 8008d40:	f040 827d 	bne.w	800923e <_svfprintf_r+0x150a>
 8008d44:	9b07      	ldr	r3, [sp, #28]
 8008d46:	07da      	lsls	r2, r3, #31
 8008d48:	f140 82bf 	bpl.w	80092ca <_svfprintf_r+0x1596>
 8008d4c:	1974      	adds	r4, r6, r5
 8008d4e:	9808      	ldr	r0, [sp, #32]
 8008d50:	4639      	mov	r1, r7
 8008d52:	2200      	movs	r2, #0
 8008d54:	2300      	movs	r3, #0
 8008d56:	f7f8 f9f3 	bl	8001140 <__aeabi_dcmpeq>
 8008d5a:	2800      	cmp	r0, #0
 8008d5c:	f040 81a4 	bne.w	80090a8 <_svfprintf_r+0x1374>
 8008d60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d62:	429c      	cmp	r4, r3
 8008d64:	d906      	bls.n	8008d74 <_svfprintf_r+0x1040>
 8008d66:	2130      	movs	r1, #48	; 0x30
 8008d68:	1c5a      	adds	r2, r3, #1
 8008d6a:	9221      	str	r2, [sp, #132]	; 0x84
 8008d6c:	7019      	strb	r1, [r3, #0]
 8008d6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d70:	429c      	cmp	r4, r3
 8008d72:	d8f9      	bhi.n	8008d68 <_svfprintf_r+0x1034>
 8008d74:	1b9b      	subs	r3, r3, r6
 8008d76:	9312      	str	r3, [sp, #72]	; 0x48
 8008d78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d7a:	2b47      	cmp	r3, #71	; 0x47
 8008d7c:	f000 8181 	beq.w	8009082 <_svfprintf_r+0x134e>
 8008d80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d82:	2b65      	cmp	r3, #101	; 0x65
 8008d84:	f340 826a 	ble.w	800925c <_svfprintf_r+0x1528>
 8008d88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d8a:	2b66      	cmp	r3, #102	; 0x66
 8008d8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008d8e:	9313      	str	r3, [sp, #76]	; 0x4c
 8008d90:	f000 8247 	beq.w	8009222 <_svfprintf_r+0x14ee>
 8008d94:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008d96:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008d98:	428a      	cmp	r2, r1
 8008d9a:	f2c0 8236 	blt.w	800920a <_svfprintf_r+0x14d6>
 8008d9e:	9b07      	ldr	r3, [sp, #28]
 8008da0:	07d9      	lsls	r1, r3, #31
 8008da2:	f100 8289 	bmi.w	80092b8 <_svfprintf_r+0x1584>
 8008da6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008daa:	920d      	str	r2, [sp, #52]	; 0x34
 8008dac:	2267      	movs	r2, #103	; 0x67
 8008dae:	9211      	str	r2, [sp, #68]	; 0x44
 8008db0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008db2:	2a00      	cmp	r2, #0
 8008db4:	f040 815b 	bne.w	800906e <_svfprintf_r+0x133a>
 8008db8:	9308      	str	r3, [sp, #32]
 8008dba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008dbc:	9307      	str	r3, [sp, #28]
 8008dbe:	4693      	mov	fp, r2
 8008dc0:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 8008dc4:	f7ff b97c 	b.w	80080c0 <_svfprintf_r+0x38c>
 8008dc8:	9b07      	ldr	r3, [sp, #28]
 8008dca:	06df      	lsls	r7, r3, #27
 8008dcc:	d40b      	bmi.n	8008de6 <_svfprintf_r+0x10b2>
 8008dce:	9b07      	ldr	r3, [sp, #28]
 8008dd0:	065e      	lsls	r6, r3, #25
 8008dd2:	d508      	bpl.n	8008de6 <_svfprintf_r+0x10b2>
 8008dd4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008dd6:	6813      	ldr	r3, [r2, #0]
 8008dd8:	3204      	adds	r2, #4
 8008dda:	920e      	str	r2, [sp, #56]	; 0x38
 8008ddc:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8008de0:	801a      	strh	r2, [r3, #0]
 8008de2:	f7fe bfcd 	b.w	8007d80 <_svfprintf_r+0x4c>
 8008de6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008de8:	6813      	ldr	r3, [r2, #0]
 8008dea:	3204      	adds	r2, #4
 8008dec:	920e      	str	r2, [sp, #56]	; 0x38
 8008dee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008df0:	601a      	str	r2, [r3, #0]
 8008df2:	f7fe bfc5 	b.w	8007d80 <_svfprintf_r+0x4c>
 8008df6:	9b07      	ldr	r3, [sp, #28]
 8008df8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008dfa:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008dfe:	4613      	mov	r3, r2
 8008e00:	f000 810e 	beq.w	8009020 <_svfprintf_r+0x12ec>
 8008e04:	3304      	adds	r3, #4
 8008e06:	8814      	ldrh	r4, [r2, #0]
 8008e08:	930e      	str	r3, [sp, #56]	; 0x38
 8008e0a:	2500      	movs	r5, #0
 8008e0c:	f7ff bb2c 	b.w	8008468 <_svfprintf_r+0x734>
 8008e10:	9907      	ldr	r1, [sp, #28]
 8008e12:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 8008e16:	d017      	beq.n	8008e48 <_svfprintf_r+0x1114>
 8008e18:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008e1a:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
 8008e1e:	4603      	mov	r3, r0
 8008e20:	f1bb 0f00 	cmp.w	fp, #0
 8008e24:	f103 0304 	add.w	r3, r3, #4
 8008e28:	8804      	ldrh	r4, [r0, #0]
 8008e2a:	f04f 0500 	mov.w	r5, #0
 8008e2e:	f2c0 80f5 	blt.w	800901c <_svfprintf_r+0x12e8>
 8008e32:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008e36:	9107      	str	r1, [sp, #28]
 8008e38:	ea54 0105 	orrs.w	r1, r4, r5
 8008e3c:	930e      	str	r3, [sp, #56]	; 0x38
 8008e3e:	f43f ac13 	beq.w	8008668 <_svfprintf_r+0x934>
 8008e42:	4617      	mov	r7, r2
 8008e44:	f7ff b89b 	b.w	8007f7e <_svfprintf_r+0x24a>
 8008e48:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008e4a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8008e4e:	f1bb 0f00 	cmp.w	fp, #0
 8008e52:	680c      	ldr	r4, [r1, #0]
 8008e54:	f101 0704 	add.w	r7, r1, #4
 8008e58:	f04f 0500 	mov.w	r5, #0
 8008e5c:	f280 8081 	bge.w	8008f62 <_svfprintf_r+0x122e>
 8008e60:	970e      	str	r7, [sp, #56]	; 0x38
 8008e62:	2700      	movs	r7, #0
 8008e64:	f7ff b88b 	b.w	8007f7e <_svfprintf_r+0x24a>
 8008e68:	4614      	mov	r4, r2
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008e6e:	9324      	str	r3, [sp, #144]	; 0x90
 8008e70:	442c      	add	r4, r5
 8008e72:	2b07      	cmp	r3, #7
 8008e74:	9425      	str	r4, [sp, #148]	; 0x94
 8008e76:	e889 0024 	stmia.w	r9, {r2, r5}
 8008e7a:	f73f ae5b 	bgt.w	8008b34 <_svfprintf_r+0xe00>
 8008e7e:	f109 0908 	add.w	r9, r9, #8
 8008e82:	e662      	b.n	8008b4a <_svfprintf_r+0xe16>
 8008e84:	2700      	movs	r7, #0
 8008e86:	45bb      	cmp	fp, r7
 8008e88:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 8008e8c:	f6ff abfe 	blt.w	800868c <_svfprintf_r+0x958>
 8008e90:	9b07      	ldr	r3, [sp, #28]
 8008e92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e96:	9307      	str	r3, [sp, #28]
 8008e98:	f7ff bbc6 	b.w	8008628 <_svfprintf_r+0x8f4>
 8008e9c:	aa23      	add	r2, sp, #140	; 0x8c
 8008e9e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ea0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008ea2:	f004 fb93 	bl	800d5cc <__ssprint_r>
 8008ea6:	2800      	cmp	r0, #0
 8008ea8:	f47f a83d 	bne.w	8007f26 <_svfprintf_r+0x1f2>
 8008eac:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8008eae:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8008eb2:	e40d      	b.n	80086d0 <_svfprintf_r+0x99c>
 8008eb4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8008eb6:	f7ff bbe2 	b.w	800867e <_svfprintf_r+0x94a>
 8008eba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008ebc:	4ab1      	ldr	r2, [pc, #708]	; (8009184 <_svfprintf_r+0x1450>)
 8008ebe:	f8c9 2000 	str.w	r2, [r9]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	3401      	adds	r4, #1
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	2b07      	cmp	r3, #7
 8008eca:	9425      	str	r4, [sp, #148]	; 0x94
 8008ecc:	9324      	str	r3, [sp, #144]	; 0x90
 8008ece:	f8c9 2004 	str.w	r2, [r9, #4]
 8008ed2:	dc6f      	bgt.n	8008fb4 <_svfprintf_r+0x1280>
 8008ed4:	f109 0908 	add.w	r9, r9, #8
 8008ed8:	b92d      	cbnz	r5, 8008ee6 <_svfprintf_r+0x11b2>
 8008eda:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008edc:	b91b      	cbnz	r3, 8008ee6 <_svfprintf_r+0x11b2>
 8008ede:	9b07      	ldr	r3, [sp, #28]
 8008ee0:	07df      	lsls	r7, r3, #31
 8008ee2:	f57f a9b7 	bpl.w	8008254 <_svfprintf_r+0x520>
 8008ee6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008ee8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008eea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008eec:	f8c9 2000 	str.w	r2, [r9]
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	440c      	add	r4, r1
 8008ef4:	2b07      	cmp	r3, #7
 8008ef6:	9425      	str	r4, [sp, #148]	; 0x94
 8008ef8:	f8c9 1004 	str.w	r1, [r9, #4]
 8008efc:	9324      	str	r3, [sp, #144]	; 0x90
 8008efe:	f300 81c9 	bgt.w	8009294 <_svfprintf_r+0x1560>
 8008f02:	f109 0908 	add.w	r9, r9, #8
 8008f06:	426d      	negs	r5, r5
 8008f08:	2d00      	cmp	r5, #0
 8008f0a:	f340 80a3 	ble.w	8009054 <_svfprintf_r+0x1320>
 8008f0e:	4a9e      	ldr	r2, [pc, #632]	; (8009188 <_svfprintf_r+0x1454>)
 8008f10:	920f      	str	r2, [sp, #60]	; 0x3c
 8008f12:	2d10      	cmp	r5, #16
 8008f14:	f340 8129 	ble.w	800916a <_svfprintf_r+0x1436>
 8008f18:	4622      	mov	r2, r4
 8008f1a:	2710      	movs	r7, #16
 8008f1c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8008f20:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008f22:	e005      	b.n	8008f30 <_svfprintf_r+0x11fc>
 8008f24:	f109 0908 	add.w	r9, r9, #8
 8008f28:	3d10      	subs	r5, #16
 8008f2a:	2d10      	cmp	r5, #16
 8008f2c:	f340 811c 	ble.w	8009168 <_svfprintf_r+0x1434>
 8008f30:	3301      	adds	r3, #1
 8008f32:	3210      	adds	r2, #16
 8008f34:	2b07      	cmp	r3, #7
 8008f36:	9225      	str	r2, [sp, #148]	; 0x94
 8008f38:	9324      	str	r3, [sp, #144]	; 0x90
 8008f3a:	f8c9 a000 	str.w	sl, [r9]
 8008f3e:	f8c9 7004 	str.w	r7, [r9, #4]
 8008f42:	ddef      	ble.n	8008f24 <_svfprintf_r+0x11f0>
 8008f44:	aa23      	add	r2, sp, #140	; 0x8c
 8008f46:	4621      	mov	r1, r4
 8008f48:	4658      	mov	r0, fp
 8008f4a:	f004 fb3f 	bl	800d5cc <__ssprint_r>
 8008f4e:	2800      	cmp	r0, #0
 8008f50:	f47e afe9 	bne.w	8007f26 <_svfprintf_r+0x1f2>
 8008f54:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8008f56:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008f58:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8008f5c:	e7e4      	b.n	8008f28 <_svfprintf_r+0x11f4>
 8008f5e:	9a07      	ldr	r2, [sp, #28]
 8008f60:	e592      	b.n	8008a88 <_svfprintf_r+0xd54>
 8008f62:	9a07      	ldr	r2, [sp, #28]
 8008f64:	f7ff ba35 	b.w	80083d2 <_svfprintf_r+0x69e>
 8008f68:	9b07      	ldr	r3, [sp, #28]
 8008f6a:	f043 0320 	orr.w	r3, r3, #32
 8008f6e:	9307      	str	r3, [sp, #28]
 8008f70:	f108 0801 	add.w	r8, r8, #1
 8008f74:	f898 3000 	ldrb.w	r3, [r8]
 8008f78:	f7fe bf35 	b.w	8007de6 <_svfprintf_r+0xb2>
 8008f7c:	aa23      	add	r2, sp, #140	; 0x8c
 8008f7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f80:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008f82:	f004 fb23 	bl	800d5cc <__ssprint_r>
 8008f86:	2800      	cmp	r0, #0
 8008f88:	f47e afcd 	bne.w	8007f26 <_svfprintf_r+0x1f2>
 8008f8c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8008f8e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8008f92:	f7ff bbb5 	b.w	8008700 <_svfprintf_r+0x9cc>
 8008f96:	2140      	movs	r1, #64	; 0x40
 8008f98:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008f9a:	f003 faa3 	bl	800c4e4 <_malloc_r>
 8008f9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fa0:	6010      	str	r0, [r2, #0]
 8008fa2:	6110      	str	r0, [r2, #16]
 8008fa4:	2800      	cmp	r0, #0
 8008fa6:	f000 81f3 	beq.w	8009390 <_svfprintf_r+0x165c>
 8008faa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fac:	2340      	movs	r3, #64	; 0x40
 8008fae:	6153      	str	r3, [r2, #20]
 8008fb0:	f7fe bed7 	b.w	8007d62 <_svfprintf_r+0x2e>
 8008fb4:	aa23      	add	r2, sp, #140	; 0x8c
 8008fb6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fb8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008fba:	f004 fb07 	bl	800d5cc <__ssprint_r>
 8008fbe:	2800      	cmp	r0, #0
 8008fc0:	f47e afb1 	bne.w	8007f26 <_svfprintf_r+0x1f2>
 8008fc4:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8008fc6:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8008fc8:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8008fcc:	e784      	b.n	8008ed8 <_svfprintf_r+0x11a4>
 8008fce:	a821      	add	r0, sp, #132	; 0x84
 8008fd0:	a91e      	add	r1, sp, #120	; 0x78
 8008fd2:	9004      	str	r0, [sp, #16]
 8008fd4:	9103      	str	r1, [sp, #12]
 8008fd6:	a81d      	add	r0, sp, #116	; 0x74
 8008fd8:	2103      	movs	r1, #3
 8008fda:	9002      	str	r0, [sp, #8]
 8008fdc:	9a08      	ldr	r2, [sp, #32]
 8008fde:	f8cd b004 	str.w	fp, [sp, #4]
 8008fe2:	463b      	mov	r3, r7
 8008fe4:	9100      	str	r1, [sp, #0]
 8008fe6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008fe8:	f001 feaa 	bl	800ad40 <_dtoa_r>
 8008fec:	465d      	mov	r5, fp
 8008fee:	4606      	mov	r6, r0
 8008ff0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ff2:	2b46      	cmp	r3, #70	; 0x46
 8008ff4:	eb06 0405 	add.w	r4, r6, r5
 8008ff8:	f47f aea9 	bne.w	8008d4e <_svfprintf_r+0x101a>
 8008ffc:	7833      	ldrb	r3, [r6, #0]
 8008ffe:	2b30      	cmp	r3, #48	; 0x30
 8009000:	f000 816d 	beq.w	80092de <_svfprintf_r+0x15aa>
 8009004:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8009006:	442c      	add	r4, r5
 8009008:	e6a1      	b.n	8008d4e <_svfprintf_r+0x101a>
 800900a:	f1bb 0f00 	cmp.w	fp, #0
 800900e:	bf08      	it	eq
 8009010:	f04f 0b01 	moveq.w	fp, #1
 8009014:	e667      	b.n	8008ce6 <_svfprintf_r+0xfb2>
 8009016:	930e      	str	r3, [sp, #56]	; 0x38
 8009018:	4617      	mov	r7, r2
 800901a:	e55d      	b.n	8008ad8 <_svfprintf_r+0xda4>
 800901c:	930e      	str	r3, [sp, #56]	; 0x38
 800901e:	e720      	b.n	8008e62 <_svfprintf_r+0x112e>
 8009020:	3304      	adds	r3, #4
 8009022:	6814      	ldr	r4, [r2, #0]
 8009024:	930e      	str	r3, [sp, #56]	; 0x38
 8009026:	2500      	movs	r5, #0
 8009028:	f7ff ba1e 	b.w	8008468 <_svfprintf_r+0x734>
 800902c:	4630      	mov	r0, r6
 800902e:	f7f7 fba7 	bl	8000780 <strlen>
 8009032:	46a3      	mov	fp, r4
 8009034:	4603      	mov	r3, r0
 8009036:	900d      	str	r0, [sp, #52]	; 0x34
 8009038:	f7ff baeb 	b.w	8008612 <_svfprintf_r+0x8de>
 800903c:	aa23      	add	r2, sp, #140	; 0x8c
 800903e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009040:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009042:	f004 fac3 	bl	800d5cc <__ssprint_r>
 8009046:	2800      	cmp	r0, #0
 8009048:	f47e af6d 	bne.w	8007f26 <_svfprintf_r+0x1f2>
 800904c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800904e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009050:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8009054:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009056:	f8c9 6000 	str.w	r6, [r9]
 800905a:	3301      	adds	r3, #1
 800905c:	440c      	add	r4, r1
 800905e:	2b07      	cmp	r3, #7
 8009060:	9425      	str	r4, [sp, #148]	; 0x94
 8009062:	9324      	str	r3, [sp, #144]	; 0x90
 8009064:	f8c9 1004 	str.w	r1, [r9, #4]
 8009068:	f77f a8f2 	ble.w	8008250 <_svfprintf_r+0x51c>
 800906c:	e408      	b.n	8008880 <_svfprintf_r+0xb4c>
 800906e:	272d      	movs	r7, #45	; 0x2d
 8009070:	9308      	str	r3, [sp, #32]
 8009072:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009074:	9307      	str	r3, [sp, #28]
 8009076:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800907a:	f04f 0b00 	mov.w	fp, #0
 800907e:	f7ff b820 	b.w	80080c2 <_svfprintf_r+0x38e>
 8009082:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009084:	1cdd      	adds	r5, r3, #3
 8009086:	db11      	blt.n	80090ac <_svfprintf_r+0x1378>
 8009088:	459b      	cmp	fp, r3
 800908a:	db0f      	blt.n	80090ac <_svfprintf_r+0x1378>
 800908c:	9313      	str	r3, [sp, #76]	; 0x4c
 800908e:	e681      	b.n	8008d94 <_svfprintf_r+0x1060>
 8009090:	aa23      	add	r2, sp, #140	; 0x8c
 8009092:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009094:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009096:	f004 fa99 	bl	800d5cc <__ssprint_r>
 800909a:	2800      	cmp	r0, #0
 800909c:	f47e af43 	bne.w	8007f26 <_svfprintf_r+0x1f2>
 80090a0:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80090a2:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 80090a6:	e452      	b.n	800894e <_svfprintf_r+0xc1a>
 80090a8:	4623      	mov	r3, r4
 80090aa:	e663      	b.n	8008d74 <_svfprintf_r+0x1040>
 80090ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80090ae:	3a02      	subs	r2, #2
 80090b0:	9211      	str	r2, [sp, #68]	; 0x44
 80090b2:	3b01      	subs	r3, #1
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80090ba:	931d      	str	r3, [sp, #116]	; 0x74
 80090bc:	bfb8      	it	lt
 80090be:	425b      	neglt	r3, r3
 80090c0:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
 80090c4:	bfb4      	ite	lt
 80090c6:	222d      	movlt	r2, #45	; 0x2d
 80090c8:	222b      	movge	r2, #43	; 0x2b
 80090ca:	2b09      	cmp	r3, #9
 80090cc:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
 80090d0:	f340 80fd 	ble.w	80092ce <_svfprintf_r+0x159a>
 80090d4:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
 80090d8:	4604      	mov	r4, r0
 80090da:	4a2c      	ldr	r2, [pc, #176]	; (800918c <_svfprintf_r+0x1458>)
 80090dc:	fb82 2103 	smull	r2, r1, r2, r3
 80090e0:	17da      	asrs	r2, r3, #31
 80090e2:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 80090e6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80090ea:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 80090ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80090f2:	2a09      	cmp	r2, #9
 80090f4:	4613      	mov	r3, r2
 80090f6:	f804 1d01 	strb.w	r1, [r4, #-1]!
 80090fa:	dcee      	bgt.n	80090da <_svfprintf_r+0x13a6>
 80090fc:	4621      	mov	r1, r4
 80090fe:	3330      	adds	r3, #48	; 0x30
 8009100:	b2da      	uxtb	r2, r3
 8009102:	f801 2d01 	strb.w	r2, [r1, #-1]!
 8009106:	4288      	cmp	r0, r1
 8009108:	f240 813f 	bls.w	800938a <_svfprintf_r+0x1656>
 800910c:	f10d 017e 	add.w	r1, sp, #126	; 0x7e
 8009110:	4623      	mov	r3, r4
 8009112:	e001      	b.n	8009118 <_svfprintf_r+0x13e4>
 8009114:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009118:	f801 2b01 	strb.w	r2, [r1], #1
 800911c:	4298      	cmp	r0, r3
 800911e:	d1f9      	bne.n	8009114 <_svfprintf_r+0x13e0>
 8009120:	1c43      	adds	r3, r0, #1
 8009122:	1b1b      	subs	r3, r3, r4
 8009124:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
 8009128:	4413      	add	r3, r2
 800912a:	aa1f      	add	r2, sp, #124	; 0x7c
 800912c:	1a9b      	subs	r3, r3, r2
 800912e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009130:	9319      	str	r3, [sp, #100]	; 0x64
 8009132:	2a01      	cmp	r2, #1
 8009134:	4413      	add	r3, r2
 8009136:	930d      	str	r3, [sp, #52]	; 0x34
 8009138:	f340 80f6 	ble.w	8009328 <_svfprintf_r+0x15f4>
 800913c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800913e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009140:	4413      	add	r3, r2
 8009142:	2200      	movs	r2, #0
 8009144:	930d      	str	r3, [sp, #52]	; 0x34
 8009146:	9213      	str	r2, [sp, #76]	; 0x4c
 8009148:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800914c:	e630      	b.n	8008db0 <_svfprintf_r+0x107c>
 800914e:	aa23      	add	r2, sp, #140	; 0x8c
 8009150:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009152:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009154:	f004 fa3a 	bl	800d5cc <__ssprint_r>
 8009158:	2800      	cmp	r0, #0
 800915a:	f47e aee4 	bne.w	8007f26 <_svfprintf_r+0x1f2>
 800915e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009160:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8009162:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8009166:	e4fa      	b.n	8008b5e <_svfprintf_r+0xe2a>
 8009168:	4614      	mov	r4, r2
 800916a:	3301      	adds	r3, #1
 800916c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800916e:	9324      	str	r3, [sp, #144]	; 0x90
 8009170:	442c      	add	r4, r5
 8009172:	2b07      	cmp	r3, #7
 8009174:	9425      	str	r4, [sp, #148]	; 0x94
 8009176:	e889 0024 	stmia.w	r9, {r2, r5}
 800917a:	f73f af5f 	bgt.w	800903c <_svfprintf_r+0x1308>
 800917e:	f109 0908 	add.w	r9, r9, #8
 8009182:	e767      	b.n	8009054 <_svfprintf_r+0x1320>
 8009184:	0800e144 	.word	0x0800e144
 8009188:	0800e0f4 	.word	0x0800e0f4
 800918c:	66666667 	.word	0x66666667
 8009190:	2d06      	cmp	r5, #6
 8009192:	462b      	mov	r3, r5
 8009194:	bf28      	it	cs
 8009196:	2306      	movcs	r3, #6
 8009198:	930d      	str	r3, [sp, #52]	; 0x34
 800919a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800919e:	46b3      	mov	fp, r6
 80091a0:	970e      	str	r7, [sp, #56]	; 0x38
 80091a2:	9613      	str	r6, [sp, #76]	; 0x4c
 80091a4:	4637      	mov	r7, r6
 80091a6:	9308      	str	r3, [sp, #32]
 80091a8:	4e8b      	ldr	r6, [pc, #556]	; (80093d8 <_svfprintf_r+0x16a4>)
 80091aa:	f7fe bf89 	b.w	80080c0 <_svfprintf_r+0x38c>
 80091ae:	aa23      	add	r2, sp, #140	; 0x8c
 80091b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80091b2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80091b4:	f004 fa0a 	bl	800d5cc <__ssprint_r>
 80091b8:	2800      	cmp	r0, #0
 80091ba:	f47e aeb4 	bne.w	8007f26 <_svfprintf_r+0x1f2>
 80091be:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80091c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80091c2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80091c4:	1ad3      	subs	r3, r2, r3
 80091c6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 80091ca:	e4e0      	b.n	8008b8e <_svfprintf_r+0xe5a>
 80091cc:	f04f 0b06 	mov.w	fp, #6
 80091d0:	e589      	b.n	8008ce6 <_svfprintf_r+0xfb2>
 80091d2:	a821      	add	r0, sp, #132	; 0x84
 80091d4:	a91e      	add	r1, sp, #120	; 0x78
 80091d6:	9004      	str	r0, [sp, #16]
 80091d8:	9103      	str	r1, [sp, #12]
 80091da:	a81d      	add	r0, sp, #116	; 0x74
 80091dc:	2103      	movs	r1, #3
 80091de:	9002      	str	r0, [sp, #8]
 80091e0:	9a08      	ldr	r2, [sp, #32]
 80091e2:	f8cd b004 	str.w	fp, [sp, #4]
 80091e6:	463b      	mov	r3, r7
 80091e8:	9100      	str	r1, [sp, #0]
 80091ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 80091ec:	f001 fda8 	bl	800ad40 <_dtoa_r>
 80091f0:	465d      	mov	r5, fp
 80091f2:	4606      	mov	r6, r0
 80091f4:	eb00 040b 	add.w	r4, r0, fp
 80091f8:	e700      	b.n	8008ffc <_svfprintf_r+0x12c8>
 80091fa:	272d      	movs	r7, #45	; 0x2d
 80091fc:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 8009200:	f7ff b8ae 	b.w	8008360 <_svfprintf_r+0x62c>
 8009204:	9307      	str	r3, [sp, #28]
 8009206:	f7ff b94d 	b.w	80084a4 <_svfprintf_r+0x770>
 800920a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800920c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800920e:	4413      	add	r3, r2
 8009210:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009212:	930d      	str	r3, [sp, #52]	; 0x34
 8009214:	2a00      	cmp	r2, #0
 8009216:	dd7f      	ble.n	8009318 <_svfprintf_r+0x15e4>
 8009218:	2267      	movs	r2, #103	; 0x67
 800921a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800921e:	9211      	str	r2, [sp, #68]	; 0x44
 8009220:	e5c6      	b.n	8008db0 <_svfprintf_r+0x107c>
 8009222:	2b00      	cmp	r3, #0
 8009224:	f340 8098 	ble.w	8009358 <_svfprintf_r+0x1624>
 8009228:	f1bb 0f00 	cmp.w	fp, #0
 800922c:	d16b      	bne.n	8009306 <_svfprintf_r+0x15d2>
 800922e:	9a07      	ldr	r2, [sp, #28]
 8009230:	07d4      	lsls	r4, r2, #31
 8009232:	d468      	bmi.n	8009306 <_svfprintf_r+0x15d2>
 8009234:	461a      	mov	r2, r3
 8009236:	920d      	str	r2, [sp, #52]	; 0x34
 8009238:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800923c:	e5b8      	b.n	8008db0 <_svfprintf_r+0x107c>
 800923e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009240:	2b47      	cmp	r3, #71	; 0x47
 8009242:	f47f ad83 	bne.w	8008d4c <_svfprintf_r+0x1018>
 8009246:	9b07      	ldr	r3, [sp, #28]
 8009248:	07db      	lsls	r3, r3, #31
 800924a:	f53f aed1 	bmi.w	8008ff0 <_svfprintf_r+0x12bc>
 800924e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009250:	1b9b      	subs	r3, r3, r6
 8009252:	9312      	str	r3, [sp, #72]	; 0x48
 8009254:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009256:	2b47      	cmp	r3, #71	; 0x47
 8009258:	f43f af13 	beq.w	8009082 <_svfprintf_r+0x134e>
 800925c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800925e:	e728      	b.n	80090b2 <_svfprintf_r+0x137e>
 8009260:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8009264:	970e      	str	r7, [sp, #56]	; 0x38
 8009266:	9308      	str	r3, [sp, #32]
 8009268:	950d      	str	r5, [sp, #52]	; 0x34
 800926a:	4683      	mov	fp, r0
 800926c:	9013      	str	r0, [sp, #76]	; 0x4c
 800926e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 8009272:	f7fe bf25 	b.w	80080c0 <_svfprintf_r+0x38c>
 8009276:	9b07      	ldr	r3, [sp, #28]
 8009278:	07db      	lsls	r3, r3, #31
 800927a:	465f      	mov	r7, fp
 800927c:	d505      	bpl.n	800928a <_svfprintf_r+0x1556>
 800927e:	ae40      	add	r6, sp, #256	; 0x100
 8009280:	2330      	movs	r3, #48	; 0x30
 8009282:	f806 3d41 	strb.w	r3, [r6, #-65]!
 8009286:	f7fe bf11 	b.w	80080ac <_svfprintf_r+0x378>
 800928a:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 800928e:	ae30      	add	r6, sp, #192	; 0xc0
 8009290:	f7fe bf0f 	b.w	80080b2 <_svfprintf_r+0x37e>
 8009294:	aa23      	add	r2, sp, #140	; 0x8c
 8009296:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009298:	980a      	ldr	r0, [sp, #40]	; 0x28
 800929a:	f004 f997 	bl	800d5cc <__ssprint_r>
 800929e:	2800      	cmp	r0, #0
 80092a0:	f47e ae41 	bne.w	8007f26 <_svfprintf_r+0x1f2>
 80092a4:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80092a6:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80092a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80092aa:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 80092ae:	e62a      	b.n	8008f06 <_svfprintf_r+0x11d2>
 80092b0:	46a0      	mov	r8, r4
 80092b2:	2500      	movs	r5, #0
 80092b4:	f7fe bd99 	b.w	8007dea <_svfprintf_r+0xb6>
 80092b8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80092ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80092bc:	4413      	add	r3, r2
 80092be:	2267      	movs	r2, #103	; 0x67
 80092c0:	930d      	str	r3, [sp, #52]	; 0x34
 80092c2:	9211      	str	r2, [sp, #68]	; 0x44
 80092c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80092c8:	e572      	b.n	8008db0 <_svfprintf_r+0x107c>
 80092ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092cc:	e552      	b.n	8008d74 <_svfprintf_r+0x1040>
 80092ce:	3330      	adds	r3, #48	; 0x30
 80092d0:	2230      	movs	r2, #48	; 0x30
 80092d2:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 80092d6:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
 80092da:	ab20      	add	r3, sp, #128	; 0x80
 80092dc:	e725      	b.n	800912a <_svfprintf_r+0x13f6>
 80092de:	9808      	ldr	r0, [sp, #32]
 80092e0:	4639      	mov	r1, r7
 80092e2:	2200      	movs	r2, #0
 80092e4:	2300      	movs	r3, #0
 80092e6:	f7f7 ff2b 	bl	8001140 <__aeabi_dcmpeq>
 80092ea:	2800      	cmp	r0, #0
 80092ec:	f47f ae8a 	bne.w	8009004 <_svfprintf_r+0x12d0>
 80092f0:	f1c5 0501 	rsb	r5, r5, #1
 80092f4:	951d      	str	r5, [sp, #116]	; 0x74
 80092f6:	442c      	add	r4, r5
 80092f8:	e529      	b.n	8008d4e <_svfprintf_r+0x101a>
 80092fa:	4e38      	ldr	r6, [pc, #224]	; (80093dc <_svfprintf_r+0x16a8>)
 80092fc:	4b38      	ldr	r3, [pc, #224]	; (80093e0 <_svfprintf_r+0x16ac>)
 80092fe:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 8009302:	f7ff b82f 	b.w	8008364 <_svfprintf_r+0x630>
 8009306:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009308:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800930a:	189d      	adds	r5, r3, r2
 800930c:	eb05 030b 	add.w	r3, r5, fp
 8009310:	930d      	str	r3, [sp, #52]	; 0x34
 8009312:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009316:	e54b      	b.n	8008db0 <_svfprintf_r+0x107c>
 8009318:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800931a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800931c:	f1c3 0301 	rsb	r3, r3, #1
 8009320:	441a      	add	r2, r3
 8009322:	4613      	mov	r3, r2
 8009324:	920d      	str	r2, [sp, #52]	; 0x34
 8009326:	e777      	b.n	8009218 <_svfprintf_r+0x14e4>
 8009328:	9b07      	ldr	r3, [sp, #28]
 800932a:	f013 0301 	ands.w	r3, r3, #1
 800932e:	f47f af05 	bne.w	800913c <_svfprintf_r+0x1408>
 8009332:	9313      	str	r3, [sp, #76]	; 0x4c
 8009334:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009336:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800933a:	e539      	b.n	8008db0 <_svfprintf_r+0x107c>
 800933c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800933e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009342:	6805      	ldr	r5, [r0, #0]
 8009344:	3004      	adds	r0, #4
 8009346:	2d00      	cmp	r5, #0
 8009348:	900e      	str	r0, [sp, #56]	; 0x38
 800934a:	46a0      	mov	r8, r4
 800934c:	f6be ad4b 	bge.w	8007de6 <_svfprintf_r+0xb2>
 8009350:	f04f 35ff 	mov.w	r5, #4294967295
 8009354:	f7fe bd47 	b.w	8007de6 <_svfprintf_r+0xb2>
 8009358:	f1bb 0f00 	cmp.w	fp, #0
 800935c:	d102      	bne.n	8009364 <_svfprintf_r+0x1630>
 800935e:	9b07      	ldr	r3, [sp, #28]
 8009360:	07d8      	lsls	r0, r3, #31
 8009362:	d507      	bpl.n	8009374 <_svfprintf_r+0x1640>
 8009364:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009366:	1c5d      	adds	r5, r3, #1
 8009368:	eb05 030b 	add.w	r3, r5, fp
 800936c:	930d      	str	r3, [sp, #52]	; 0x34
 800936e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009372:	e51d      	b.n	8008db0 <_svfprintf_r+0x107c>
 8009374:	2301      	movs	r3, #1
 8009376:	930d      	str	r3, [sp, #52]	; 0x34
 8009378:	e51a      	b.n	8008db0 <_svfprintf_r+0x107c>
 800937a:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800937e:	f7ff b865 	b.w	800844c <_svfprintf_r+0x718>
 8009382:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8009386:	f7fe be51 	b.w	800802c <_svfprintf_r+0x2f8>
 800938a:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
 800938e:	e6cc      	b.n	800912a <_svfprintf_r+0x13f6>
 8009390:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009392:	230c      	movs	r3, #12
 8009394:	6013      	str	r3, [r2, #0]
 8009396:	f04f 30ff 	mov.w	r0, #4294967295
 800939a:	f7fe bdcd 	b.w	8007f38 <_svfprintf_r+0x204>
 800939e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 80093a2:	f7ff b950 	b.w	8008646 <_svfprintf_r+0x912>
 80093a6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 80093aa:	f7fe bfab 	b.w	8008304 <_svfprintf_r+0x5d0>
 80093ae:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 80093b2:	f7fe bdc9 	b.w	8007f48 <_svfprintf_r+0x214>
 80093b6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 80093ba:	f7ff b819 	b.w	80083f0 <_svfprintf_r+0x6bc>
 80093be:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 80093c2:	f7fe bfeb 	b.w	800839c <_svfprintf_r+0x668>
 80093c6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 80093ca:	f7ff b8f3 	b.w	80085b4 <_svfprintf_r+0x880>
 80093ce:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 80093d2:	f7ff b8d2 	b.w	800857a <_svfprintf_r+0x846>
 80093d6:	bf00      	nop
 80093d8:	0800e13c 	.word	0x0800e13c
 80093dc:	0800e110 	.word	0x0800e110
 80093e0:	0800e10c 	.word	0x0800e10c

080093e4 <_vfprintf_r>:
 80093e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093e8:	b0c1      	sub	sp, #260	; 0x104
 80093ea:	461c      	mov	r4, r3
 80093ec:	9108      	str	r1, [sp, #32]
 80093ee:	4616      	mov	r6, r2
 80093f0:	4605      	mov	r5, r0
 80093f2:	900a      	str	r0, [sp, #40]	; 0x28
 80093f4:	f002 fff4 	bl	800c3e0 <_localeconv_r>
 80093f8:	6803      	ldr	r3, [r0, #0]
 80093fa:	9317      	str	r3, [sp, #92]	; 0x5c
 80093fc:	4618      	mov	r0, r3
 80093fe:	f7f7 f9bf 	bl	8000780 <strlen>
 8009402:	940e      	str	r4, [sp, #56]	; 0x38
 8009404:	9016      	str	r0, [sp, #88]	; 0x58
 8009406:	b11d      	cbz	r5, 8009410 <_vfprintf_r+0x2c>
 8009408:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800940a:	2b00      	cmp	r3, #0
 800940c:	f000 8122 	beq.w	8009654 <_vfprintf_r+0x270>
 8009410:	9808      	ldr	r0, [sp, #32]
 8009412:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
 8009416:	b293      	uxth	r3, r2
 8009418:	0499      	lsls	r1, r3, #18
 800941a:	d407      	bmi.n	800942c <_vfprintf_r+0x48>
 800941c:	6e41      	ldr	r1, [r0, #100]	; 0x64
 800941e:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 8009422:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8009426:	8183      	strh	r3, [r0, #12]
 8009428:	6641      	str	r1, [r0, #100]	; 0x64
 800942a:	b29b      	uxth	r3, r3
 800942c:	071a      	lsls	r2, r3, #28
 800942e:	f140 80dc 	bpl.w	80095ea <_vfprintf_r+0x206>
 8009432:	9a08      	ldr	r2, [sp, #32]
 8009434:	6912      	ldr	r2, [r2, #16]
 8009436:	2a00      	cmp	r2, #0
 8009438:	f000 80d7 	beq.w	80095ea <_vfprintf_r+0x206>
 800943c:	f003 031a 	and.w	r3, r3, #26
 8009440:	2b0a      	cmp	r3, #10
 8009442:	f000 80e0 	beq.w	8009606 <_vfprintf_r+0x222>
 8009446:	2300      	movs	r3, #0
 8009448:	461a      	mov	r2, r3
 800944a:	9312      	str	r3, [sp, #72]	; 0x48
 800944c:	9325      	str	r3, [sp, #148]	; 0x94
 800944e:	9324      	str	r3, [sp, #144]	; 0x90
 8009450:	9319      	str	r3, [sp, #100]	; 0x64
 8009452:	930b      	str	r3, [sp, #44]	; 0x2c
 8009454:	f8df a3fc 	ldr.w	sl, [pc, #1020]	; 8009854 <_vfprintf_r+0x470>
 8009458:	9214      	str	r2, [sp, #80]	; 0x50
 800945a:	ab30      	add	r3, sp, #192	; 0xc0
 800945c:	9323      	str	r3, [sp, #140]	; 0x8c
 800945e:	4699      	mov	r9, r3
 8009460:	9215      	str	r2, [sp, #84]	; 0x54
 8009462:	46b0      	mov	r8, r6
 8009464:	f898 3000 	ldrb.w	r3, [r8]
 8009468:	4644      	mov	r4, r8
 800946a:	b1eb      	cbz	r3, 80094a8 <_vfprintf_r+0xc4>
 800946c:	2b25      	cmp	r3, #37	; 0x25
 800946e:	d102      	bne.n	8009476 <_vfprintf_r+0x92>
 8009470:	e01a      	b.n	80094a8 <_vfprintf_r+0xc4>
 8009472:	2b25      	cmp	r3, #37	; 0x25
 8009474:	d003      	beq.n	800947e <_vfprintf_r+0x9a>
 8009476:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800947a:	2b00      	cmp	r3, #0
 800947c:	d1f9      	bne.n	8009472 <_vfprintf_r+0x8e>
 800947e:	ebc8 0504 	rsb	r5, r8, r4
 8009482:	b18d      	cbz	r5, 80094a8 <_vfprintf_r+0xc4>
 8009484:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009486:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8009488:	f8c9 8000 	str.w	r8, [r9]
 800948c:	3301      	adds	r3, #1
 800948e:	442a      	add	r2, r5
 8009490:	2b07      	cmp	r3, #7
 8009492:	f8c9 5004 	str.w	r5, [r9, #4]
 8009496:	9225      	str	r2, [sp, #148]	; 0x94
 8009498:	9324      	str	r3, [sp, #144]	; 0x90
 800949a:	f300 80c2 	bgt.w	8009622 <_vfprintf_r+0x23e>
 800949e:	f109 0908 	add.w	r9, r9, #8
 80094a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094a4:	442b      	add	r3, r5
 80094a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80094a8:	7823      	ldrb	r3, [r4, #0]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	f000 80c2 	beq.w	8009634 <_vfprintf_r+0x250>
 80094b0:	2300      	movs	r3, #0
 80094b2:	461a      	mov	r2, r3
 80094b4:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 80094b8:	4619      	mov	r1, r3
 80094ba:	930c      	str	r3, [sp, #48]	; 0x30
 80094bc:	9307      	str	r3, [sp, #28]
 80094be:	f04f 3bff 	mov.w	fp, #4294967295
 80094c2:	7863      	ldrb	r3, [r4, #1]
 80094c4:	f104 0801 	add.w	r8, r4, #1
 80094c8:	465d      	mov	r5, fp
 80094ca:	f108 0801 	add.w	r8, r8, #1
 80094ce:	f1a3 0020 	sub.w	r0, r3, #32
 80094d2:	2858      	cmp	r0, #88	; 0x58
 80094d4:	f200 844b 	bhi.w	8009d6e <_vfprintf_r+0x98a>
 80094d8:	e8df f010 	tbh	[pc, r0, lsl #1]
 80094dc:	04490401 	.word	0x04490401
 80094e0:	040a0449 	.word	0x040a0449
 80094e4:	04490449 	.word	0x04490449
 80094e8:	04490449 	.word	0x04490449
 80094ec:	04490449 	.word	0x04490449
 80094f0:	043b035d 	.word	0x043b035d
 80094f4:	005d0449 	.word	0x005d0449
 80094f8:	044900fe 	.word	0x044900fe
 80094fc:	036b011a 	.word	0x036b011a
 8009500:	036b036b 	.word	0x036b036b
 8009504:	036b036b 	.word	0x036b036b
 8009508:	036b036b 	.word	0x036b036b
 800950c:	036b036b 	.word	0x036b036b
 8009510:	04490449 	.word	0x04490449
 8009514:	04490449 	.word	0x04490449
 8009518:	04490449 	.word	0x04490449
 800951c:	04490449 	.word	0x04490449
 8009520:	04490449 	.word	0x04490449
 8009524:	0398037b 	.word	0x0398037b
 8009528:	03980449 	.word	0x03980449
 800952c:	04490449 	.word	0x04490449
 8009530:	04490449 	.word	0x04490449
 8009534:	044903dd 	.word	0x044903dd
 8009538:	01210449 	.word	0x01210449
 800953c:	04490449 	.word	0x04490449
 8009540:	04490449 	.word	0x04490449
 8009544:	014a0449 	.word	0x014a0449
 8009548:	04490449 	.word	0x04490449
 800954c:	044902b0 	.word	0x044902b0
 8009550:	04490449 	.word	0x04490449
 8009554:	04490449 	.word	0x04490449
 8009558:	04490449 	.word	0x04490449
 800955c:	04490449 	.word	0x04490449
 8009560:	02f10449 	.word	0x02f10449
 8009564:	03980304 	.word	0x03980304
 8009568:	03980398 	.word	0x03980398
 800956c:	0304033a 	.word	0x0304033a
 8009570:	04490449 	.word	0x04490449
 8009574:	04490341 	.word	0x04490341
 8009578:	00c0034b 	.word	0x00c0034b
 800957c:	04120064 	.word	0x04120064
 8009580:	041a0449 	.word	0x041a0449
 8009584:	03e40449 	.word	0x03e40449
 8009588:	04490449 	.word	0x04490449
 800958c:	03ec      	.short	0x03ec
 800958e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009590:	930e      	str	r3, [sp, #56]	; 0x38
 8009592:	4240      	negs	r0, r0
 8009594:	900c      	str	r0, [sp, #48]	; 0x30
 8009596:	9b07      	ldr	r3, [sp, #28]
 8009598:	f043 0304 	orr.w	r3, r3, #4
 800959c:	9307      	str	r3, [sp, #28]
 800959e:	f898 3000 	ldrb.w	r3, [r8]
 80095a2:	e792      	b.n	80094ca <_vfprintf_r+0xe6>
 80095a4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80095a6:	46ab      	mov	fp, r5
 80095a8:	2100      	movs	r1, #0
 80095aa:	6804      	ldr	r4, [r0, #0]
 80095ac:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 80095b0:	1d07      	adds	r7, r0, #4
 80095b2:	9807      	ldr	r0, [sp, #28]
 80095b4:	2330      	movs	r3, #48	; 0x30
 80095b6:	2278      	movs	r2, #120	; 0x78
 80095b8:	458b      	cmp	fp, r1
 80095ba:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 80095be:	f04f 0500 	mov.w	r5, #0
 80095c2:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
 80095c6:	f040 0302 	orr.w	r3, r0, #2
 80095ca:	f2c0 83ed 	blt.w	8009da8 <_vfprintf_r+0x9c4>
 80095ce:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 80095d2:	f043 0302 	orr.w	r3, r3, #2
 80095d6:	9307      	str	r3, [sp, #28]
 80095d8:	ea54 0305 	orrs.w	r3, r4, r5
 80095dc:	970e      	str	r7, [sp, #56]	; 0x38
 80095de:	f000 83be 	beq.w	8009d5e <_vfprintf_r+0x97a>
 80095e2:	460f      	mov	r7, r1
 80095e4:	9211      	str	r2, [sp, #68]	; 0x44
 80095e6:	4899      	ldr	r0, [pc, #612]	; (800984c <_vfprintf_r+0x468>)
 80095e8:	e259      	b.n	8009a9e <_vfprintf_r+0x6ba>
 80095ea:	9908      	ldr	r1, [sp, #32]
 80095ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 80095ee:	f001 faaf 	bl	800ab50 <__swsetup_r>
 80095f2:	2800      	cmp	r0, #0
 80095f4:	f041 8015 	bne.w	800a622 <_vfprintf_r+0x123e>
 80095f8:	9b08      	ldr	r3, [sp, #32]
 80095fa:	899b      	ldrh	r3, [r3, #12]
 80095fc:	f003 031a 	and.w	r3, r3, #26
 8009600:	2b0a      	cmp	r3, #10
 8009602:	f47f af20 	bne.w	8009446 <_vfprintf_r+0x62>
 8009606:	9908      	ldr	r1, [sp, #32]
 8009608:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
 800960c:	2b00      	cmp	r3, #0
 800960e:	f6ff af1a 	blt.w	8009446 <_vfprintf_r+0x62>
 8009612:	4623      	mov	r3, r4
 8009614:	4632      	mov	r2, r6
 8009616:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009618:	f001 fa64 	bl	800aae4 <__sbprintf>
 800961c:	b041      	add	sp, #260	; 0x104
 800961e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009622:	aa23      	add	r2, sp, #140	; 0x8c
 8009624:	9908      	ldr	r1, [sp, #32]
 8009626:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009628:	f004 f88c 	bl	800d744 <__sprint_r>
 800962c:	b948      	cbnz	r0, 8009642 <_vfprintf_r+0x25e>
 800962e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8009632:	e736      	b.n	80094a2 <_vfprintf_r+0xbe>
 8009634:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8009636:	b123      	cbz	r3, 8009642 <_vfprintf_r+0x25e>
 8009638:	980a      	ldr	r0, [sp, #40]	; 0x28
 800963a:	9908      	ldr	r1, [sp, #32]
 800963c:	aa23      	add	r2, sp, #140	; 0x8c
 800963e:	f004 f881 	bl	800d744 <__sprint_r>
 8009642:	9b08      	ldr	r3, [sp, #32]
 8009644:	899b      	ldrh	r3, [r3, #12]
 8009646:	0659      	lsls	r1, r3, #25
 8009648:	f100 87eb 	bmi.w	800a622 <_vfprintf_r+0x123e>
 800964c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800964e:	b041      	add	sp, #260	; 0x104
 8009650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009654:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009656:	f002 fbd7 	bl	800be08 <__sinit>
 800965a:	e6d9      	b.n	8009410 <_vfprintf_r+0x2c>
 800965c:	9311      	str	r3, [sp, #68]	; 0x44
 800965e:	46ab      	mov	fp, r5
 8009660:	2a00      	cmp	r2, #0
 8009662:	f041 8221 	bne.w	800aaa8 <_vfprintf_r+0x16c4>
 8009666:	9a07      	ldr	r2, [sp, #28]
 8009668:	f012 0320 	ands.w	r3, r2, #32
 800966c:	d064      	beq.n	8009738 <_vfprintf_r+0x354>
 800966e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8009670:	3707      	adds	r7, #7
 8009672:	f027 0307 	bic.w	r3, r7, #7
 8009676:	2700      	movs	r7, #0
 8009678:	f103 0108 	add.w	r1, r3, #8
 800967c:	45bb      	cmp	fp, r7
 800967e:	910e      	str	r1, [sp, #56]	; 0x38
 8009680:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009684:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 8009688:	f2c0 873c 	blt.w	800a504 <_vfprintf_r+0x1120>
 800968c:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8009690:	9307      	str	r3, [sp, #28]
 8009692:	ea54 0305 	orrs.w	r3, r4, r5
 8009696:	f000 837f 	beq.w	8009d98 <_vfprintf_r+0x9b4>
 800969a:	ae30      	add	r6, sp, #192	; 0xc0
 800969c:	08e2      	lsrs	r2, r4, #3
 800969e:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 80096a2:	08e9      	lsrs	r1, r5, #3
 80096a4:	f004 0307 	and.w	r3, r4, #7
 80096a8:	460d      	mov	r5, r1
 80096aa:	4614      	mov	r4, r2
 80096ac:	3330      	adds	r3, #48	; 0x30
 80096ae:	ea54 0205 	orrs.w	r2, r4, r5
 80096b2:	f806 3d01 	strb.w	r3, [r6, #-1]!
 80096b6:	d1f1      	bne.n	800969c <_vfprintf_r+0x2b8>
 80096b8:	9a07      	ldr	r2, [sp, #28]
 80096ba:	07d2      	lsls	r2, r2, #31
 80096bc:	f140 8096 	bpl.w	80097ec <_vfprintf_r+0x408>
 80096c0:	2b30      	cmp	r3, #48	; 0x30
 80096c2:	f000 8093 	beq.w	80097ec <_vfprintf_r+0x408>
 80096c6:	2230      	movs	r2, #48	; 0x30
 80096c8:	1e73      	subs	r3, r6, #1
 80096ca:	f806 2c01 	strb.w	r2, [r6, #-1]
 80096ce:	aa30      	add	r2, sp, #192	; 0xc0
 80096d0:	1ad2      	subs	r2, r2, r3
 80096d2:	920d      	str	r2, [sp, #52]	; 0x34
 80096d4:	461e      	mov	r6, r3
 80096d6:	e08c      	b.n	80097f2 <_vfprintf_r+0x40e>
 80096d8:	f898 3000 	ldrb.w	r3, [r8]
 80096dc:	2b2a      	cmp	r3, #42	; 0x2a
 80096de:	f108 0401 	add.w	r4, r8, #1
 80096e2:	f001 81bf 	beq.w	800aa64 <_vfprintf_r+0x1680>
 80096e6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80096ea:	2809      	cmp	r0, #9
 80096ec:	bf98      	it	ls
 80096ee:	2500      	movls	r5, #0
 80096f0:	f201 814e 	bhi.w	800a990 <_vfprintf_r+0x15ac>
 80096f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80096f8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80096fc:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8009700:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8009704:	2809      	cmp	r0, #9
 8009706:	d9f5      	bls.n	80096f4 <_vfprintf_r+0x310>
 8009708:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 800970c:	46a0      	mov	r8, r4
 800970e:	e6de      	b.n	80094ce <_vfprintf_r+0xea>
 8009710:	9b07      	ldr	r3, [sp, #28]
 8009712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009716:	9307      	str	r3, [sp, #28]
 8009718:	f898 3000 	ldrb.w	r3, [r8]
 800971c:	e6d5      	b.n	80094ca <_vfprintf_r+0xe6>
 800971e:	9311      	str	r3, [sp, #68]	; 0x44
 8009720:	46ab      	mov	fp, r5
 8009722:	2a00      	cmp	r2, #0
 8009724:	f041 81c4 	bne.w	800aab0 <_vfprintf_r+0x16cc>
 8009728:	9b07      	ldr	r3, [sp, #28]
 800972a:	f043 0310 	orr.w	r3, r3, #16
 800972e:	9307      	str	r3, [sp, #28]
 8009730:	9a07      	ldr	r2, [sp, #28]
 8009732:	f012 0320 	ands.w	r3, r2, #32
 8009736:	d19a      	bne.n	800966e <_vfprintf_r+0x28a>
 8009738:	9907      	ldr	r1, [sp, #28]
 800973a:	f011 0210 	ands.w	r2, r1, #16
 800973e:	f000 86d0 	beq.w	800a4e2 <_vfprintf_r+0x10fe>
 8009742:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009744:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8009748:	f1bb 0f00 	cmp.w	fp, #0
 800974c:	6804      	ldr	r4, [r0, #0]
 800974e:	f100 0704 	add.w	r7, r0, #4
 8009752:	f04f 0500 	mov.w	r5, #0
 8009756:	f2c0 86d4 	blt.w	800a502 <_vfprintf_r+0x111e>
 800975a:	460a      	mov	r2, r1
 800975c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009760:	9207      	str	r2, [sp, #28]
 8009762:	ea54 0205 	orrs.w	r2, r4, r5
 8009766:	970e      	str	r7, [sp, #56]	; 0x38
 8009768:	f000 8316 	beq.w	8009d98 <_vfprintf_r+0x9b4>
 800976c:	461f      	mov	r7, r3
 800976e:	e794      	b.n	800969a <_vfprintf_r+0x2b6>
 8009770:	9311      	str	r3, [sp, #68]	; 0x44
 8009772:	46ab      	mov	fp, r5
 8009774:	2a00      	cmp	r2, #0
 8009776:	f041 818f 	bne.w	800aa98 <_vfprintf_r+0x16b4>
 800977a:	9b07      	ldr	r3, [sp, #28]
 800977c:	f043 0310 	orr.w	r3, r3, #16
 8009780:	9307      	str	r3, [sp, #28]
 8009782:	9a07      	ldr	r2, [sp, #28]
 8009784:	f012 0320 	ands.w	r3, r2, #32
 8009788:	f000 84f8 	beq.w	800a17c <_vfprintf_r+0xd98>
 800978c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800978e:	3707      	adds	r7, #7
 8009790:	f027 0307 	bic.w	r3, r7, #7
 8009794:	2700      	movs	r7, #0
 8009796:	f103 0108 	add.w	r1, r3, #8
 800979a:	45bb      	cmp	fp, r7
 800979c:	910e      	str	r1, [sp, #56]	; 0x38
 800979e:	e9d3 4500 	ldrd	r4, r5, [r3]
 80097a2:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 80097a6:	f2c0 8516 	blt.w	800a1d6 <_vfprintf_r+0xdf2>
 80097aa:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 80097ae:	9307      	str	r3, [sp, #28]
 80097b0:	ea54 0305 	orrs.w	r3, r4, r5
 80097b4:	f000 81bc 	beq.w	8009b30 <_vfprintf_r+0x74c>
 80097b8:	2d00      	cmp	r5, #0
 80097ba:	bf08      	it	eq
 80097bc:	2c0a      	cmpeq	r4, #10
 80097be:	f0c0 850e 	bcc.w	800a1de <_vfprintf_r+0xdfa>
 80097c2:	ae30      	add	r6, sp, #192	; 0xc0
 80097c4:	4620      	mov	r0, r4
 80097c6:	4629      	mov	r1, r5
 80097c8:	220a      	movs	r2, #10
 80097ca:	2300      	movs	r3, #0
 80097cc:	f7f6 fd9e 	bl	800030c <__aeabi_uldivmod>
 80097d0:	3230      	adds	r2, #48	; 0x30
 80097d2:	f806 2d01 	strb.w	r2, [r6, #-1]!
 80097d6:	4620      	mov	r0, r4
 80097d8:	4629      	mov	r1, r5
 80097da:	2300      	movs	r3, #0
 80097dc:	220a      	movs	r2, #10
 80097de:	f7f6 fd95 	bl	800030c <__aeabi_uldivmod>
 80097e2:	4604      	mov	r4, r0
 80097e4:	460d      	mov	r5, r1
 80097e6:	ea54 0305 	orrs.w	r3, r4, r5
 80097ea:	d1eb      	bne.n	80097c4 <_vfprintf_r+0x3e0>
 80097ec:	ab30      	add	r3, sp, #192	; 0xc0
 80097ee:	1b9b      	subs	r3, r3, r6
 80097f0:	930d      	str	r3, [sp, #52]	; 0x34
 80097f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097f4:	455b      	cmp	r3, fp
 80097f6:	bfb8      	it	lt
 80097f8:	465b      	movlt	r3, fp
 80097fa:	9309      	str	r3, [sp, #36]	; 0x24
 80097fc:	2300      	movs	r3, #0
 80097fe:	9313      	str	r3, [sp, #76]	; 0x4c
 8009800:	b117      	cbz	r7, 8009808 <_vfprintf_r+0x424>
 8009802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009804:	3301      	adds	r3, #1
 8009806:	9309      	str	r3, [sp, #36]	; 0x24
 8009808:	9b07      	ldr	r3, [sp, #28]
 800980a:	f013 0302 	ands.w	r3, r3, #2
 800980e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009810:	d002      	beq.n	8009818 <_vfprintf_r+0x434>
 8009812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009814:	3302      	adds	r3, #2
 8009816:	9309      	str	r3, [sp, #36]	; 0x24
 8009818:	9b07      	ldr	r3, [sp, #28]
 800981a:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 800981e:	9310      	str	r3, [sp, #64]	; 0x40
 8009820:	f040 82cf 	bne.w	8009dc2 <_vfprintf_r+0x9de>
 8009824:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009826:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009828:	1a9d      	subs	r5, r3, r2
 800982a:	2d00      	cmp	r5, #0
 800982c:	f340 82c9 	ble.w	8009dc2 <_vfprintf_r+0x9de>
 8009830:	2d10      	cmp	r5, #16
 8009832:	9925      	ldr	r1, [sp, #148]	; 0x94
 8009834:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009836:	4f06      	ldr	r7, [pc, #24]	; (8009850 <_vfprintf_r+0x46c>)
 8009838:	dd2e      	ble.n	8009898 <_vfprintf_r+0x4b4>
 800983a:	9618      	str	r6, [sp, #96]	; 0x60
 800983c:	4648      	mov	r0, r9
 800983e:	2410      	movs	r4, #16
 8009840:	46b9      	mov	r9, r7
 8009842:	9e08      	ldr	r6, [sp, #32]
 8009844:	462f      	mov	r7, r5
 8009846:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009848:	e00b      	b.n	8009862 <_vfprintf_r+0x47e>
 800984a:	bf00      	nop
 800984c:	0800e128 	.word	0x0800e128
 8009850:	0800e168 	.word	0x0800e168
 8009854:	0800e158 	.word	0x0800e158
 8009858:	3f10      	subs	r7, #16
 800985a:	2f10      	cmp	r7, #16
 800985c:	f100 0008 	add.w	r0, r0, #8
 8009860:	dd16      	ble.n	8009890 <_vfprintf_r+0x4ac>
 8009862:	3201      	adds	r2, #1
 8009864:	4bb7      	ldr	r3, [pc, #732]	; (8009b44 <_vfprintf_r+0x760>)
 8009866:	9224      	str	r2, [sp, #144]	; 0x90
 8009868:	3110      	adds	r1, #16
 800986a:	2a07      	cmp	r2, #7
 800986c:	9125      	str	r1, [sp, #148]	; 0x94
 800986e:	e880 0018 	stmia.w	r0, {r3, r4}
 8009872:	ddf1      	ble.n	8009858 <_vfprintf_r+0x474>
 8009874:	aa23      	add	r2, sp, #140	; 0x8c
 8009876:	4631      	mov	r1, r6
 8009878:	4628      	mov	r0, r5
 800987a:	f003 ff63 	bl	800d744 <__sprint_r>
 800987e:	2800      	cmp	r0, #0
 8009880:	f47f aedf 	bne.w	8009642 <_vfprintf_r+0x25e>
 8009884:	3f10      	subs	r7, #16
 8009886:	2f10      	cmp	r7, #16
 8009888:	9925      	ldr	r1, [sp, #148]	; 0x94
 800988a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800988c:	a830      	add	r0, sp, #192	; 0xc0
 800988e:	dce8      	bgt.n	8009862 <_vfprintf_r+0x47e>
 8009890:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8009892:	463d      	mov	r5, r7
 8009894:	464f      	mov	r7, r9
 8009896:	4681      	mov	r9, r0
 8009898:	3201      	adds	r2, #1
 800989a:	186c      	adds	r4, r5, r1
 800989c:	2a07      	cmp	r2, #7
 800989e:	9425      	str	r4, [sp, #148]	; 0x94
 80098a0:	9224      	str	r2, [sp, #144]	; 0x90
 80098a2:	f8c9 7000 	str.w	r7, [r9]
 80098a6:	f8c9 5004 	str.w	r5, [r9, #4]
 80098aa:	f300 841f 	bgt.w	800a0ec <_vfprintf_r+0xd08>
 80098ae:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 80098b2:	f109 0908 	add.w	r9, r9, #8
 80098b6:	b177      	cbz	r7, 80098d6 <_vfprintf_r+0x4f2>
 80098b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80098ba:	3301      	adds	r3, #1
 80098bc:	3401      	adds	r4, #1
 80098be:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
 80098c2:	2201      	movs	r2, #1
 80098c4:	2b07      	cmp	r3, #7
 80098c6:	9425      	str	r4, [sp, #148]	; 0x94
 80098c8:	9324      	str	r3, [sp, #144]	; 0x90
 80098ca:	e889 0006 	stmia.w	r9, {r1, r2}
 80098ce:	f300 8397 	bgt.w	800a000 <_vfprintf_r+0xc1c>
 80098d2:	f109 0908 	add.w	r9, r9, #8
 80098d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098d8:	b16b      	cbz	r3, 80098f6 <_vfprintf_r+0x512>
 80098da:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80098dc:	3301      	adds	r3, #1
 80098de:	3402      	adds	r4, #2
 80098e0:	a91c      	add	r1, sp, #112	; 0x70
 80098e2:	2202      	movs	r2, #2
 80098e4:	2b07      	cmp	r3, #7
 80098e6:	9425      	str	r4, [sp, #148]	; 0x94
 80098e8:	9324      	str	r3, [sp, #144]	; 0x90
 80098ea:	e889 0006 	stmia.w	r9, {r1, r2}
 80098ee:	f300 8393 	bgt.w	800a018 <_vfprintf_r+0xc34>
 80098f2:	f109 0908 	add.w	r9, r9, #8
 80098f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80098f8:	2b80      	cmp	r3, #128	; 0x80
 80098fa:	f000 82c6 	beq.w	8009e8a <_vfprintf_r+0xaa6>
 80098fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009900:	ebc3 070b 	rsb	r7, r3, fp
 8009904:	2f00      	cmp	r7, #0
 8009906:	dd33      	ble.n	8009970 <_vfprintf_r+0x58c>
 8009908:	4a8f      	ldr	r2, [pc, #572]	; (8009b48 <_vfprintf_r+0x764>)
 800990a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800990c:	920f      	str	r2, [sp, #60]	; 0x3c
 800990e:	2f10      	cmp	r7, #16
 8009910:	dd22      	ble.n	8009958 <_vfprintf_r+0x574>
 8009912:	4622      	mov	r2, r4
 8009914:	f04f 0b10 	mov.w	fp, #16
 8009918:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800991a:	9c08      	ldr	r4, [sp, #32]
 800991c:	e004      	b.n	8009928 <_vfprintf_r+0x544>
 800991e:	3f10      	subs	r7, #16
 8009920:	2f10      	cmp	r7, #16
 8009922:	f109 0908 	add.w	r9, r9, #8
 8009926:	dd16      	ble.n	8009956 <_vfprintf_r+0x572>
 8009928:	3301      	adds	r3, #1
 800992a:	3210      	adds	r2, #16
 800992c:	2b07      	cmp	r3, #7
 800992e:	9225      	str	r2, [sp, #148]	; 0x94
 8009930:	9324      	str	r3, [sp, #144]	; 0x90
 8009932:	e889 0c00 	stmia.w	r9, {sl, fp}
 8009936:	ddf2      	ble.n	800991e <_vfprintf_r+0x53a>
 8009938:	aa23      	add	r2, sp, #140	; 0x8c
 800993a:	4621      	mov	r1, r4
 800993c:	4628      	mov	r0, r5
 800993e:	f003 ff01 	bl	800d744 <__sprint_r>
 8009942:	2800      	cmp	r0, #0
 8009944:	f47f ae7d 	bne.w	8009642 <_vfprintf_r+0x25e>
 8009948:	3f10      	subs	r7, #16
 800994a:	2f10      	cmp	r7, #16
 800994c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800994e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009950:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8009954:	dce8      	bgt.n	8009928 <_vfprintf_r+0x544>
 8009956:	4614      	mov	r4, r2
 8009958:	3301      	adds	r3, #1
 800995a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800995c:	9324      	str	r3, [sp, #144]	; 0x90
 800995e:	443c      	add	r4, r7
 8009960:	2b07      	cmp	r3, #7
 8009962:	9425      	str	r4, [sp, #148]	; 0x94
 8009964:	e889 0084 	stmia.w	r9, {r2, r7}
 8009968:	f300 833e 	bgt.w	8009fe8 <_vfprintf_r+0xc04>
 800996c:	f109 0908 	add.w	r9, r9, #8
 8009970:	9b07      	ldr	r3, [sp, #28]
 8009972:	05dd      	lsls	r5, r3, #23
 8009974:	f100 8227 	bmi.w	8009dc6 <_vfprintf_r+0x9e2>
 8009978:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800997a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800997c:	f8c9 6000 	str.w	r6, [r9]
 8009980:	3301      	adds	r3, #1
 8009982:	440c      	add	r4, r1
 8009984:	2b07      	cmp	r3, #7
 8009986:	9425      	str	r4, [sp, #148]	; 0x94
 8009988:	f8c9 1004 	str.w	r1, [r9, #4]
 800998c:	9324      	str	r3, [sp, #144]	; 0x90
 800998e:	f300 8315 	bgt.w	8009fbc <_vfprintf_r+0xbd8>
 8009992:	f109 0908 	add.w	r9, r9, #8
 8009996:	9b07      	ldr	r3, [sp, #28]
 8009998:	0758      	lsls	r0, r3, #29
 800999a:	d53f      	bpl.n	8009a1c <_vfprintf_r+0x638>
 800999c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800999e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099a0:	1a9d      	subs	r5, r3, r2
 80099a2:	2d00      	cmp	r5, #0
 80099a4:	dd3a      	ble.n	8009a1c <_vfprintf_r+0x638>
 80099a6:	2d10      	cmp	r5, #16
 80099a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80099aa:	4f66      	ldr	r7, [pc, #408]	; (8009b44 <_vfprintf_r+0x760>)
 80099ac:	dd23      	ble.n	80099f6 <_vfprintf_r+0x612>
 80099ae:	4622      	mov	r2, r4
 80099b0:	2610      	movs	r6, #16
 80099b2:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80099b6:	9c08      	ldr	r4, [sp, #32]
 80099b8:	e004      	b.n	80099c4 <_vfprintf_r+0x5e0>
 80099ba:	3d10      	subs	r5, #16
 80099bc:	2d10      	cmp	r5, #16
 80099be:	f109 0908 	add.w	r9, r9, #8
 80099c2:	dd17      	ble.n	80099f4 <_vfprintf_r+0x610>
 80099c4:	3301      	adds	r3, #1
 80099c6:	495f      	ldr	r1, [pc, #380]	; (8009b44 <_vfprintf_r+0x760>)
 80099c8:	9324      	str	r3, [sp, #144]	; 0x90
 80099ca:	3210      	adds	r2, #16
 80099cc:	2b07      	cmp	r3, #7
 80099ce:	9225      	str	r2, [sp, #148]	; 0x94
 80099d0:	e889 0042 	stmia.w	r9, {r1, r6}
 80099d4:	ddf1      	ble.n	80099ba <_vfprintf_r+0x5d6>
 80099d6:	aa23      	add	r2, sp, #140	; 0x8c
 80099d8:	4621      	mov	r1, r4
 80099da:	4658      	mov	r0, fp
 80099dc:	f003 feb2 	bl	800d744 <__sprint_r>
 80099e0:	2800      	cmp	r0, #0
 80099e2:	f47f ae2e 	bne.w	8009642 <_vfprintf_r+0x25e>
 80099e6:	3d10      	subs	r5, #16
 80099e8:	2d10      	cmp	r5, #16
 80099ea:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80099ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80099ee:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 80099f2:	dce7      	bgt.n	80099c4 <_vfprintf_r+0x5e0>
 80099f4:	4614      	mov	r4, r2
 80099f6:	3301      	adds	r3, #1
 80099f8:	442c      	add	r4, r5
 80099fa:	2b07      	cmp	r3, #7
 80099fc:	9425      	str	r4, [sp, #148]	; 0x94
 80099fe:	9324      	str	r3, [sp, #144]	; 0x90
 8009a00:	f8c9 7000 	str.w	r7, [r9]
 8009a04:	f8c9 5004 	str.w	r5, [r9, #4]
 8009a08:	dd08      	ble.n	8009a1c <_vfprintf_r+0x638>
 8009a0a:	aa23      	add	r2, sp, #140	; 0x8c
 8009a0c:	9908      	ldr	r1, [sp, #32]
 8009a0e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009a10:	f003 fe98 	bl	800d744 <__sprint_r>
 8009a14:	2800      	cmp	r0, #0
 8009a16:	f47f ae14 	bne.w	8009642 <_vfprintf_r+0x25e>
 8009a1a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8009a1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a22:	428a      	cmp	r2, r1
 8009a24:	bfac      	ite	ge
 8009a26:	189b      	addge	r3, r3, r2
 8009a28:	185b      	addlt	r3, r3, r1
 8009a2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a2c:	2c00      	cmp	r4, #0
 8009a2e:	f040 82d1 	bne.w	8009fd4 <_vfprintf_r+0xbf0>
 8009a32:	2300      	movs	r3, #0
 8009a34:	9324      	str	r3, [sp, #144]	; 0x90
 8009a36:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8009a3a:	e513      	b.n	8009464 <_vfprintf_r+0x80>
 8009a3c:	9311      	str	r3, [sp, #68]	; 0x44
 8009a3e:	46ab      	mov	fp, r5
 8009a40:	2a00      	cmp	r2, #0
 8009a42:	f041 8025 	bne.w	800aa90 <_vfprintf_r+0x16ac>
 8009a46:	9b07      	ldr	r3, [sp, #28]
 8009a48:	4840      	ldr	r0, [pc, #256]	; (8009b4c <_vfprintf_r+0x768>)
 8009a4a:	069c      	lsls	r4, r3, #26
 8009a4c:	f140 813c 	bpl.w	8009cc8 <_vfprintf_r+0x8e4>
 8009a50:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8009a52:	3707      	adds	r7, #7
 8009a54:	f027 0307 	bic.w	r3, r7, #7
 8009a58:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009a5c:	f103 0208 	add.w	r2, r3, #8
 8009a60:	920e      	str	r2, [sp, #56]	; 0x38
 8009a62:	9a07      	ldr	r2, [sp, #28]
 8009a64:	f012 0701 	ands.w	r7, r2, #1
 8009a68:	f000 82e2 	beq.w	800a030 <_vfprintf_r+0xc4c>
 8009a6c:	ea54 0305 	orrs.w	r3, r4, r5
 8009a70:	f000 856b 	beq.w	800a54a <_vfprintf_r+0x1166>
 8009a74:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8009a78:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
 8009a7c:	2700      	movs	r7, #0
 8009a7e:	9a07      	ldr	r2, [sp, #28]
 8009a80:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 8009a84:	2330      	movs	r3, #48	; 0x30
 8009a86:	45bb      	cmp	fp, r7
 8009a88:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8009a8c:	f042 0302 	orr.w	r3, r2, #2
 8009a90:	f2c0 872d 	blt.w	800a8ee <_vfprintf_r+0x150a>
 8009a94:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8009a98:	f043 0302 	orr.w	r3, r3, #2
 8009a9c:	9307      	str	r3, [sp, #28]
 8009a9e:	ae30      	add	r6, sp, #192	; 0xc0
 8009aa0:	0923      	lsrs	r3, r4, #4
 8009aa2:	f004 010f 	and.w	r1, r4, #15
 8009aa6:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8009aaa:	092a      	lsrs	r2, r5, #4
 8009aac:	461c      	mov	r4, r3
 8009aae:	4615      	mov	r5, r2
 8009ab0:	5c43      	ldrb	r3, [r0, r1]
 8009ab2:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8009ab6:	ea54 0305 	orrs.w	r3, r4, r5
 8009aba:	d1f1      	bne.n	8009aa0 <_vfprintf_r+0x6bc>
 8009abc:	e696      	b.n	80097ec <_vfprintf_r+0x408>
 8009abe:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009ac0:	9311      	str	r3, [sp, #68]	; 0x44
 8009ac2:	680a      	ldr	r2, [r1, #0]
 8009ac4:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 8009ac8:	2300      	movs	r3, #0
 8009aca:	460a      	mov	r2, r1
 8009acc:	461f      	mov	r7, r3
 8009ace:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8009ad2:	3204      	adds	r2, #4
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	9309      	str	r3, [sp, #36]	; 0x24
 8009ad8:	46bb      	mov	fp, r7
 8009ada:	9713      	str	r7, [sp, #76]	; 0x4c
 8009adc:	920e      	str	r2, [sp, #56]	; 0x38
 8009ade:	930d      	str	r3, [sp, #52]	; 0x34
 8009ae0:	ae26      	add	r6, sp, #152	; 0x98
 8009ae2:	e691      	b.n	8009808 <_vfprintf_r+0x424>
 8009ae4:	9311      	str	r3, [sp, #68]	; 0x44
 8009ae6:	46ab      	mov	fp, r5
 8009ae8:	2a00      	cmp	r2, #0
 8009aea:	f040 87cd 	bne.w	800aa88 <_vfprintf_r+0x16a4>
 8009aee:	9b07      	ldr	r3, [sp, #28]
 8009af0:	069f      	lsls	r7, r3, #26
 8009af2:	d57a      	bpl.n	8009bea <_vfprintf_r+0x806>
 8009af4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8009af6:	3707      	adds	r7, #7
 8009af8:	f027 0707 	bic.w	r7, r7, #7
 8009afc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b00:	f107 0108 	add.w	r1, r7, #8
 8009b04:	910e      	str	r1, [sp, #56]	; 0x38
 8009b06:	4614      	mov	r4, r2
 8009b08:	461d      	mov	r5, r3
 8009b0a:	2a00      	cmp	r2, #0
 8009b0c:	f173 0300 	sbcs.w	r3, r3, #0
 8009b10:	f2c0 8438 	blt.w	800a384 <_vfprintf_r+0xfa0>
 8009b14:	f1bb 0f00 	cmp.w	fp, #0
 8009b18:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 8009b1c:	f2c0 835b 	blt.w	800a1d6 <_vfprintf_r+0xdf2>
 8009b20:	9b07      	ldr	r3, [sp, #28]
 8009b22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b26:	9307      	str	r3, [sp, #28]
 8009b28:	ea54 0305 	orrs.w	r3, r4, r5
 8009b2c:	f47f ae44 	bne.w	80097b8 <_vfprintf_r+0x3d4>
 8009b30:	f1bb 0f00 	cmp.w	fp, #0
 8009b34:	f040 8414 	bne.w	800a360 <_vfprintf_r+0xf7c>
 8009b38:	f04f 0b00 	mov.w	fp, #0
 8009b3c:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8009b40:	ae30      	add	r6, sp, #192	; 0xc0
 8009b42:	e656      	b.n	80097f2 <_vfprintf_r+0x40e>
 8009b44:	0800e168 	.word	0x0800e168
 8009b48:	0800e158 	.word	0x0800e158
 8009b4c:	0800e114 	.word	0x0800e114
 8009b50:	9b07      	ldr	r3, [sp, #28]
 8009b52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b56:	9307      	str	r3, [sp, #28]
 8009b58:	f898 3000 	ldrb.w	r3, [r8]
 8009b5c:	e4b5      	b.n	80094ca <_vfprintf_r+0xe6>
 8009b5e:	f898 3000 	ldrb.w	r3, [r8]
 8009b62:	2b6c      	cmp	r3, #108	; 0x6c
 8009b64:	f000 85c8 	beq.w	800a6f8 <_vfprintf_r+0x1314>
 8009b68:	9807      	ldr	r0, [sp, #28]
 8009b6a:	f040 0010 	orr.w	r0, r0, #16
 8009b6e:	9007      	str	r0, [sp, #28]
 8009b70:	e4ab      	b.n	80094ca <_vfprintf_r+0xe6>
 8009b72:	2a00      	cmp	r2, #0
 8009b74:	f040 8784 	bne.w	800aa80 <_vfprintf_r+0x169c>
 8009b78:	9b07      	ldr	r3, [sp, #28]
 8009b7a:	069f      	lsls	r7, r3, #26
 8009b7c:	f140 8413 	bpl.w	800a3a6 <_vfprintf_r+0xfc2>
 8009b80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009b84:	6813      	ldr	r3, [r2, #0]
 8009b86:	17cd      	asrs	r5, r1, #31
 8009b88:	4608      	mov	r0, r1
 8009b8a:	3204      	adds	r2, #4
 8009b8c:	4629      	mov	r1, r5
 8009b8e:	920e      	str	r2, [sp, #56]	; 0x38
 8009b90:	e9c3 0100 	strd	r0, r1, [r3]
 8009b94:	e466      	b.n	8009464 <_vfprintf_r+0x80>
 8009b96:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8009b98:	6823      	ldr	r3, [r4, #0]
 8009b9a:	930c      	str	r3, [sp, #48]	; 0x30
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	2800      	cmp	r0, #0
 8009ba0:	4623      	mov	r3, r4
 8009ba2:	f103 0304 	add.w	r3, r3, #4
 8009ba6:	f6ff acf2 	blt.w	800958e <_vfprintf_r+0x1aa>
 8009baa:	930e      	str	r3, [sp, #56]	; 0x38
 8009bac:	f898 3000 	ldrb.w	r3, [r8]
 8009bb0:	e48b      	b.n	80094ca <_vfprintf_r+0xe6>
 8009bb2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	461c      	mov	r4, r3
 8009bba:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009bbe:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8009bc2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8009bc6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8009bca:	2809      	cmp	r0, #9
 8009bcc:	d9f5      	bls.n	8009bba <_vfprintf_r+0x7d6>
 8009bce:	940c      	str	r4, [sp, #48]	; 0x30
 8009bd0:	e47d      	b.n	80094ce <_vfprintf_r+0xea>
 8009bd2:	9311      	str	r3, [sp, #68]	; 0x44
 8009bd4:	46ab      	mov	fp, r5
 8009bd6:	2a00      	cmp	r2, #0
 8009bd8:	f040 8771 	bne.w	800aabe <_vfprintf_r+0x16da>
 8009bdc:	9b07      	ldr	r3, [sp, #28]
 8009bde:	f043 0310 	orr.w	r3, r3, #16
 8009be2:	9307      	str	r3, [sp, #28]
 8009be4:	9b07      	ldr	r3, [sp, #28]
 8009be6:	069f      	lsls	r7, r3, #26
 8009be8:	d484      	bmi.n	8009af4 <_vfprintf_r+0x710>
 8009bea:	9b07      	ldr	r3, [sp, #28]
 8009bec:	06de      	lsls	r6, r3, #27
 8009bee:	f100 82bc 	bmi.w	800a16a <_vfprintf_r+0xd86>
 8009bf2:	9b07      	ldr	r3, [sp, #28]
 8009bf4:	065d      	lsls	r5, r3, #25
 8009bf6:	f140 82b8 	bpl.w	800a16a <_vfprintf_r+0xd86>
 8009bfa:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009bfc:	f9b1 4000 	ldrsh.w	r4, [r1]
 8009c00:	3104      	adds	r1, #4
 8009c02:	17e5      	asrs	r5, r4, #31
 8009c04:	4622      	mov	r2, r4
 8009c06:	462b      	mov	r3, r5
 8009c08:	910e      	str	r1, [sp, #56]	; 0x38
 8009c0a:	e77e      	b.n	8009b0a <_vfprintf_r+0x726>
 8009c0c:	9311      	str	r3, [sp, #68]	; 0x44
 8009c0e:	46ab      	mov	fp, r5
 8009c10:	2a00      	cmp	r2, #0
 8009c12:	f040 8758 	bne.w	800aac6 <_vfprintf_r+0x16e2>
 8009c16:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8009c18:	3707      	adds	r7, #7
 8009c1a:	f027 0307 	bic.w	r3, r7, #7
 8009c1e:	f103 0208 	add.w	r2, r3, #8
 8009c22:	920e      	str	r2, [sp, #56]	; 0x38
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	9214      	str	r2, [sp, #80]	; 0x50
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	9315      	str	r3, [sp, #84]	; 0x54
 8009c2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c2e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8009c30:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8009c34:	4628      	mov	r0, r5
 8009c36:	4621      	mov	r1, r4
 8009c38:	f04f 32ff 	mov.w	r2, #4294967295
 8009c3c:	4bb5      	ldr	r3, [pc, #724]	; (8009f14 <_vfprintf_r+0xb30>)
 8009c3e:	f7f7 fab1 	bl	80011a4 <__aeabi_dcmpun>
 8009c42:	2800      	cmp	r0, #0
 8009c44:	f040 83c6 	bne.w	800a3d4 <_vfprintf_r+0xff0>
 8009c48:	4628      	mov	r0, r5
 8009c4a:	4621      	mov	r1, r4
 8009c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c50:	4bb0      	ldr	r3, [pc, #704]	; (8009f14 <_vfprintf_r+0xb30>)
 8009c52:	f7f7 fa89 	bl	8001168 <__aeabi_dcmple>
 8009c56:	2800      	cmp	r0, #0
 8009c58:	f040 83bc 	bne.w	800a3d4 <_vfprintf_r+0xff0>
 8009c5c:	9814      	ldr	r0, [sp, #80]	; 0x50
 8009c5e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009c60:	2200      	movs	r2, #0
 8009c62:	2300      	movs	r3, #0
 8009c64:	f7f7 fa76 	bl	8001154 <__aeabi_dcmplt>
 8009c68:	2800      	cmp	r0, #0
 8009c6a:	f040 8646 	bne.w	800a8fa <_vfprintf_r+0x1516>
 8009c6e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 8009c72:	4ea9      	ldr	r6, [pc, #676]	; (8009f18 <_vfprintf_r+0xb34>)
 8009c74:	4ba9      	ldr	r3, [pc, #676]	; (8009f1c <_vfprintf_r+0xb38>)
 8009c76:	9907      	ldr	r1, [sp, #28]
 8009c78:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009c7c:	9107      	str	r1, [sp, #28]
 8009c7e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009c80:	2203      	movs	r2, #3
 8009c82:	f04f 0b00 	mov.w	fp, #0
 8009c86:	9209      	str	r2, [sp, #36]	; 0x24
 8009c88:	2947      	cmp	r1, #71	; 0x47
 8009c8a:	bfd8      	it	le
 8009c8c:	461e      	movle	r6, r3
 8009c8e:	920d      	str	r2, [sp, #52]	; 0x34
 8009c90:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8009c94:	e5b4      	b.n	8009800 <_vfprintf_r+0x41c>
 8009c96:	9b07      	ldr	r3, [sp, #28]
 8009c98:	f043 0308 	orr.w	r3, r3, #8
 8009c9c:	9307      	str	r3, [sp, #28]
 8009c9e:	f898 3000 	ldrb.w	r3, [r8]
 8009ca2:	e412      	b.n	80094ca <_vfprintf_r+0xe6>
 8009ca4:	9311      	str	r3, [sp, #68]	; 0x44
 8009ca6:	46ab      	mov	fp, r5
 8009ca8:	2a00      	cmp	r2, #0
 8009caa:	f43f ad6a 	beq.w	8009782 <_vfprintf_r+0x39e>
 8009cae:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8009cb2:	e566      	b.n	8009782 <_vfprintf_r+0x39e>
 8009cb4:	9311      	str	r3, [sp, #68]	; 0x44
 8009cb6:	46ab      	mov	fp, r5
 8009cb8:	2a00      	cmp	r2, #0
 8009cba:	f040 8708 	bne.w	800aace <_vfprintf_r+0x16ea>
 8009cbe:	9b07      	ldr	r3, [sp, #28]
 8009cc0:	4897      	ldr	r0, [pc, #604]	; (8009f20 <_vfprintf_r+0xb3c>)
 8009cc2:	069c      	lsls	r4, r3, #26
 8009cc4:	f53f aec4 	bmi.w	8009a50 <_vfprintf_r+0x66c>
 8009cc8:	9b07      	ldr	r3, [sp, #28]
 8009cca:	06d9      	lsls	r1, r3, #27
 8009ccc:	f140 841f 	bpl.w	800a50e <_vfprintf_r+0x112a>
 8009cd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009cd2:	4613      	mov	r3, r2
 8009cd4:	3304      	adds	r3, #4
 8009cd6:	6814      	ldr	r4, [r2, #0]
 8009cd8:	930e      	str	r3, [sp, #56]	; 0x38
 8009cda:	2500      	movs	r5, #0
 8009cdc:	e6c1      	b.n	8009a62 <_vfprintf_r+0x67e>
 8009cde:	f898 3000 	ldrb.w	r3, [r8]
 8009ce2:	2900      	cmp	r1, #0
 8009ce4:	f47f abf1 	bne.w	80094ca <_vfprintf_r+0xe6>
 8009ce8:	2201      	movs	r2, #1
 8009cea:	2120      	movs	r1, #32
 8009cec:	f7ff bbed 	b.w	80094ca <_vfprintf_r+0xe6>
 8009cf0:	9b07      	ldr	r3, [sp, #28]
 8009cf2:	f043 0301 	orr.w	r3, r3, #1
 8009cf6:	9307      	str	r3, [sp, #28]
 8009cf8:	f898 3000 	ldrb.w	r3, [r8]
 8009cfc:	f7ff bbe5 	b.w	80094ca <_vfprintf_r+0xe6>
 8009d00:	9b07      	ldr	r3, [sp, #28]
 8009d02:	f043 0320 	orr.w	r3, r3, #32
 8009d06:	9307      	str	r3, [sp, #28]
 8009d08:	f898 3000 	ldrb.w	r3, [r8]
 8009d0c:	f7ff bbdd 	b.w	80094ca <_vfprintf_r+0xe6>
 8009d10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d12:	9311      	str	r3, [sp, #68]	; 0x44
 8009d14:	6816      	ldr	r6, [r2, #0]
 8009d16:	2400      	movs	r4, #0
 8009d18:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
 8009d1c:	1d17      	adds	r7, r2, #4
 8009d1e:	2e00      	cmp	r6, #0
 8009d20:	f000 85c2 	beq.w	800a8a8 <_vfprintf_r+0x14c4>
 8009d24:	2d00      	cmp	r5, #0
 8009d26:	f2c0 84fe 	blt.w	800a726 <_vfprintf_r+0x1342>
 8009d2a:	462a      	mov	r2, r5
 8009d2c:	4621      	mov	r1, r4
 8009d2e:	4630      	mov	r0, r6
 8009d30:	f7f6 fd96 	bl	8000860 <memchr>
 8009d34:	2800      	cmp	r0, #0
 8009d36:	f000 8600 	beq.w	800a93a <_vfprintf_r+0x1556>
 8009d3a:	1b83      	subs	r3, r0, r6
 8009d3c:	930d      	str	r3, [sp, #52]	; 0x34
 8009d3e:	46a3      	mov	fp, r4
 8009d40:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009d44:	970e      	str	r7, [sp, #56]	; 0x38
 8009d46:	9309      	str	r3, [sp, #36]	; 0x24
 8009d48:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8009d4c:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 8009d50:	e556      	b.n	8009800 <_vfprintf_r+0x41c>
 8009d52:	f898 3000 	ldrb.w	r3, [r8]
 8009d56:	2201      	movs	r2, #1
 8009d58:	212b      	movs	r1, #43	; 0x2b
 8009d5a:	f7ff bbb6 	b.w	80094ca <_vfprintf_r+0xe6>
 8009d5e:	4870      	ldr	r0, [pc, #448]	; (8009f20 <_vfprintf_r+0xb3c>)
 8009d60:	9211      	str	r2, [sp, #68]	; 0x44
 8009d62:	f1bb 0f00 	cmp.w	fp, #0
 8009d66:	f040 8174 	bne.w	800a052 <_vfprintf_r+0xc6e>
 8009d6a:	465f      	mov	r7, fp
 8009d6c:	e6e4      	b.n	8009b38 <_vfprintf_r+0x754>
 8009d6e:	9311      	str	r3, [sp, #68]	; 0x44
 8009d70:	2a00      	cmp	r2, #0
 8009d72:	f040 8695 	bne.w	800aaa0 <_vfprintf_r+0x16bc>
 8009d76:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009d78:	2a00      	cmp	r2, #0
 8009d7a:	f43f ac5b 	beq.w	8009634 <_vfprintf_r+0x250>
 8009d7e:	2300      	movs	r3, #0
 8009d80:	2101      	movs	r1, #1
 8009d82:	461f      	mov	r7, r3
 8009d84:	9109      	str	r1, [sp, #36]	; 0x24
 8009d86:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 8009d8a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8009d8e:	469b      	mov	fp, r3
 8009d90:	9313      	str	r3, [sp, #76]	; 0x4c
 8009d92:	910d      	str	r1, [sp, #52]	; 0x34
 8009d94:	ae26      	add	r6, sp, #152	; 0x98
 8009d96:	e537      	b.n	8009808 <_vfprintf_r+0x424>
 8009d98:	f1bb 0f00 	cmp.w	fp, #0
 8009d9c:	f000 85d8 	beq.w	800a950 <_vfprintf_r+0x156c>
 8009da0:	2700      	movs	r7, #0
 8009da2:	2400      	movs	r4, #0
 8009da4:	2500      	movs	r5, #0
 8009da6:	e478      	b.n	800969a <_vfprintf_r+0x2b6>
 8009da8:	485d      	ldr	r0, [pc, #372]	; (8009f20 <_vfprintf_r+0xb3c>)
 8009daa:	9307      	str	r3, [sp, #28]
 8009dac:	9211      	str	r2, [sp, #68]	; 0x44
 8009dae:	ea54 0305 	orrs.w	r3, r4, r5
 8009db2:	970e      	str	r7, [sp, #56]	; 0x38
 8009db4:	f04f 0700 	mov.w	r7, #0
 8009db8:	f47f ae71 	bne.w	8009a9e <_vfprintf_r+0x6ba>
 8009dbc:	2400      	movs	r4, #0
 8009dbe:	2500      	movs	r5, #0
 8009dc0:	e66d      	b.n	8009a9e <_vfprintf_r+0x6ba>
 8009dc2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8009dc4:	e577      	b.n	80098b6 <_vfprintf_r+0x4d2>
 8009dc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009dc8:	2b65      	cmp	r3, #101	; 0x65
 8009dca:	f340 80af 	ble.w	8009f2c <_vfprintf_r+0xb48>
 8009dce:	9814      	ldr	r0, [sp, #80]	; 0x50
 8009dd0:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	f7f7 f9b3 	bl	8001140 <__aeabi_dcmpeq>
 8009dda:	2800      	cmp	r0, #0
 8009ddc:	f000 813b 	beq.w	800a056 <_vfprintf_r+0xc72>
 8009de0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009de2:	4a50      	ldr	r2, [pc, #320]	; (8009f24 <_vfprintf_r+0xb40>)
 8009de4:	f8c9 2000 	str.w	r2, [r9]
 8009de8:	3301      	adds	r3, #1
 8009dea:	3401      	adds	r4, #1
 8009dec:	2201      	movs	r2, #1
 8009dee:	2b07      	cmp	r3, #7
 8009df0:	9425      	str	r4, [sp, #148]	; 0x94
 8009df2:	9324      	str	r3, [sp, #144]	; 0x90
 8009df4:	f8c9 2004 	str.w	r2, [r9, #4]
 8009df8:	f300 83b2 	bgt.w	800a560 <_vfprintf_r+0x117c>
 8009dfc:	f109 0908 	add.w	r9, r9, #8
 8009e00:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009e02:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009e04:	4293      	cmp	r3, r2
 8009e06:	db03      	blt.n	8009e10 <_vfprintf_r+0xa2c>
 8009e08:	9b07      	ldr	r3, [sp, #28]
 8009e0a:	07d8      	lsls	r0, r3, #31
 8009e0c:	f57f adc3 	bpl.w	8009996 <_vfprintf_r+0x5b2>
 8009e10:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009e12:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009e14:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009e16:	f8c9 2000 	str.w	r2, [r9]
 8009e1a:	3301      	adds	r3, #1
 8009e1c:	440c      	add	r4, r1
 8009e1e:	2b07      	cmp	r3, #7
 8009e20:	9425      	str	r4, [sp, #148]	; 0x94
 8009e22:	f8c9 1004 	str.w	r1, [r9, #4]
 8009e26:	9324      	str	r3, [sp, #144]	; 0x90
 8009e28:	f300 8470 	bgt.w	800a70c <_vfprintf_r+0x1328>
 8009e2c:	f109 0908 	add.w	r9, r9, #8
 8009e30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e32:	1e5d      	subs	r5, r3, #1
 8009e34:	2d00      	cmp	r5, #0
 8009e36:	f77f adae 	ble.w	8009996 <_vfprintf_r+0x5b2>
 8009e3a:	4a3b      	ldr	r2, [pc, #236]	; (8009f28 <_vfprintf_r+0xb44>)
 8009e3c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009e3e:	920f      	str	r2, [sp, #60]	; 0x3c
 8009e40:	2d10      	cmp	r5, #16
 8009e42:	f340 81d2 	ble.w	800a1ea <_vfprintf_r+0xe06>
 8009e46:	2610      	movs	r6, #16
 8009e48:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8009e4a:	f8dd b020 	ldr.w	fp, [sp, #32]
 8009e4e:	e005      	b.n	8009e5c <_vfprintf_r+0xa78>
 8009e50:	f109 0908 	add.w	r9, r9, #8
 8009e54:	3d10      	subs	r5, #16
 8009e56:	2d10      	cmp	r5, #16
 8009e58:	f340 81c7 	ble.w	800a1ea <_vfprintf_r+0xe06>
 8009e5c:	3301      	adds	r3, #1
 8009e5e:	3410      	adds	r4, #16
 8009e60:	2b07      	cmp	r3, #7
 8009e62:	9425      	str	r4, [sp, #148]	; 0x94
 8009e64:	9324      	str	r3, [sp, #144]	; 0x90
 8009e66:	f8c9 a000 	str.w	sl, [r9]
 8009e6a:	f8c9 6004 	str.w	r6, [r9, #4]
 8009e6e:	ddef      	ble.n	8009e50 <_vfprintf_r+0xa6c>
 8009e70:	aa23      	add	r2, sp, #140	; 0x8c
 8009e72:	4659      	mov	r1, fp
 8009e74:	4638      	mov	r0, r7
 8009e76:	f003 fc65 	bl	800d744 <__sprint_r>
 8009e7a:	2800      	cmp	r0, #0
 8009e7c:	f47f abe1 	bne.w	8009642 <_vfprintf_r+0x25e>
 8009e80:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8009e82:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009e84:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8009e88:	e7e4      	b.n	8009e54 <_vfprintf_r+0xa70>
 8009e8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e8e:	1a9f      	subs	r7, r3, r2
 8009e90:	2f00      	cmp	r7, #0
 8009e92:	f77f ad34 	ble.w	80098fe <_vfprintf_r+0x51a>
 8009e96:	4a24      	ldr	r2, [pc, #144]	; (8009f28 <_vfprintf_r+0xb44>)
 8009e98:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009e9a:	920f      	str	r2, [sp, #60]	; 0x3c
 8009e9c:	2f10      	cmp	r7, #16
 8009e9e:	dd2b      	ble.n	8009ef8 <_vfprintf_r+0xb14>
 8009ea0:	464a      	mov	r2, r9
 8009ea2:	4621      	mov	r1, r4
 8009ea4:	46b9      	mov	r9, r7
 8009ea6:	2510      	movs	r5, #16
 8009ea8:	4637      	mov	r7, r6
 8009eaa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009eac:	9e08      	ldr	r6, [sp, #32]
 8009eae:	e006      	b.n	8009ebe <_vfprintf_r+0xada>
 8009eb0:	f1a9 0910 	sub.w	r9, r9, #16
 8009eb4:	f1b9 0f10 	cmp.w	r9, #16
 8009eb8:	f102 0208 	add.w	r2, r2, #8
 8009ebc:	dd18      	ble.n	8009ef0 <_vfprintf_r+0xb0c>
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	3110      	adds	r1, #16
 8009ec2:	2b07      	cmp	r3, #7
 8009ec4:	9125      	str	r1, [sp, #148]	; 0x94
 8009ec6:	9324      	str	r3, [sp, #144]	; 0x90
 8009ec8:	f8c2 a000 	str.w	sl, [r2]
 8009ecc:	6055      	str	r5, [r2, #4]
 8009ece:	ddef      	ble.n	8009eb0 <_vfprintf_r+0xacc>
 8009ed0:	aa23      	add	r2, sp, #140	; 0x8c
 8009ed2:	4631      	mov	r1, r6
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	f003 fc35 	bl	800d744 <__sprint_r>
 8009eda:	2800      	cmp	r0, #0
 8009edc:	f47f abb1 	bne.w	8009642 <_vfprintf_r+0x25e>
 8009ee0:	f1a9 0910 	sub.w	r9, r9, #16
 8009ee4:	f1b9 0f10 	cmp.w	r9, #16
 8009ee8:	9925      	ldr	r1, [sp, #148]	; 0x94
 8009eea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009eec:	aa30      	add	r2, sp, #192	; 0xc0
 8009eee:	dce6      	bgt.n	8009ebe <_vfprintf_r+0xada>
 8009ef0:	463e      	mov	r6, r7
 8009ef2:	460c      	mov	r4, r1
 8009ef4:	464f      	mov	r7, r9
 8009ef6:	4691      	mov	r9, r2
 8009ef8:	3301      	adds	r3, #1
 8009efa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009efc:	9324      	str	r3, [sp, #144]	; 0x90
 8009efe:	443c      	add	r4, r7
 8009f00:	2b07      	cmp	r3, #7
 8009f02:	9425      	str	r4, [sp, #148]	; 0x94
 8009f04:	e889 0084 	stmia.w	r9, {r2, r7}
 8009f08:	f300 822c 	bgt.w	800a364 <_vfprintf_r+0xf80>
 8009f0c:	f109 0908 	add.w	r9, r9, #8
 8009f10:	e4f5      	b.n	80098fe <_vfprintf_r+0x51a>
 8009f12:	bf00      	nop
 8009f14:	7fefffff 	.word	0x7fefffff
 8009f18:	0800e108 	.word	0x0800e108
 8009f1c:	0800e104 	.word	0x0800e104
 8009f20:	0800e128 	.word	0x0800e128
 8009f24:	0800e144 	.word	0x0800e144
 8009f28:	0800e158 	.word	0x0800e158
 8009f2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009f2e:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	f340 81d0 	ble.w	800a2d6 <_vfprintf_r+0xef2>
 8009f36:	3501      	adds	r5, #1
 8009f38:	3401      	adds	r4, #1
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	2d07      	cmp	r5, #7
 8009f3e:	9425      	str	r4, [sp, #148]	; 0x94
 8009f40:	9524      	str	r5, [sp, #144]	; 0x90
 8009f42:	f8c9 6000 	str.w	r6, [r9]
 8009f46:	f8c9 3004 	str.w	r3, [r9, #4]
 8009f4a:	f300 81e1 	bgt.w	800a310 <_vfprintf_r+0xf2c>
 8009f4e:	f109 0908 	add.w	r9, r9, #8
 8009f52:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009f54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009f56:	f8c9 3000 	str.w	r3, [r9]
 8009f5a:	3501      	adds	r5, #1
 8009f5c:	4414      	add	r4, r2
 8009f5e:	2d07      	cmp	r5, #7
 8009f60:	9425      	str	r4, [sp, #148]	; 0x94
 8009f62:	9524      	str	r5, [sp, #144]	; 0x90
 8009f64:	f8c9 2004 	str.w	r2, [r9, #4]
 8009f68:	f300 81ed 	bgt.w	800a346 <_vfprintf_r+0xf62>
 8009f6c:	f109 0908 	add.w	r9, r9, #8
 8009f70:	2300      	movs	r3, #0
 8009f72:	9814      	ldr	r0, [sp, #80]	; 0x50
 8009f74:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009f76:	2200      	movs	r2, #0
 8009f78:	f7f7 f8e2 	bl	8001140 <__aeabi_dcmpeq>
 8009f7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009f7e:	2800      	cmp	r0, #0
 8009f80:	f040 80c3 	bne.w	800a10a <_vfprintf_r+0xd26>
 8009f84:	3b01      	subs	r3, #1
 8009f86:	3501      	adds	r5, #1
 8009f88:	3601      	adds	r6, #1
 8009f8a:	441c      	add	r4, r3
 8009f8c:	2d07      	cmp	r5, #7
 8009f8e:	9524      	str	r5, [sp, #144]	; 0x90
 8009f90:	9425      	str	r4, [sp, #148]	; 0x94
 8009f92:	f8c9 6000 	str.w	r6, [r9]
 8009f96:	f8c9 3004 	str.w	r3, [r9, #4]
 8009f9a:	f300 81ac 	bgt.w	800a2f6 <_vfprintf_r+0xf12>
 8009f9e:	f109 0908 	add.w	r9, r9, #8
 8009fa2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009fa4:	f8c9 2004 	str.w	r2, [r9, #4]
 8009fa8:	3501      	adds	r5, #1
 8009faa:	4414      	add	r4, r2
 8009fac:	ab1f      	add	r3, sp, #124	; 0x7c
 8009fae:	2d07      	cmp	r5, #7
 8009fb0:	9425      	str	r4, [sp, #148]	; 0x94
 8009fb2:	9524      	str	r5, [sp, #144]	; 0x90
 8009fb4:	f8c9 3000 	str.w	r3, [r9]
 8009fb8:	f77f aceb 	ble.w	8009992 <_vfprintf_r+0x5ae>
 8009fbc:	aa23      	add	r2, sp, #140	; 0x8c
 8009fbe:	9908      	ldr	r1, [sp, #32]
 8009fc0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009fc2:	f003 fbbf 	bl	800d744 <__sprint_r>
 8009fc6:	2800      	cmp	r0, #0
 8009fc8:	f47f ab3b 	bne.w	8009642 <_vfprintf_r+0x25e>
 8009fcc:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8009fce:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8009fd2:	e4e0      	b.n	8009996 <_vfprintf_r+0x5b2>
 8009fd4:	aa23      	add	r2, sp, #140	; 0x8c
 8009fd6:	9908      	ldr	r1, [sp, #32]
 8009fd8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009fda:	f003 fbb3 	bl	800d744 <__sprint_r>
 8009fde:	2800      	cmp	r0, #0
 8009fe0:	f43f ad27 	beq.w	8009a32 <_vfprintf_r+0x64e>
 8009fe4:	f7ff bb2d 	b.w	8009642 <_vfprintf_r+0x25e>
 8009fe8:	aa23      	add	r2, sp, #140	; 0x8c
 8009fea:	9908      	ldr	r1, [sp, #32]
 8009fec:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009fee:	f003 fba9 	bl	800d744 <__sprint_r>
 8009ff2:	2800      	cmp	r0, #0
 8009ff4:	f47f ab25 	bne.w	8009642 <_vfprintf_r+0x25e>
 8009ff8:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8009ffa:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8009ffe:	e4b7      	b.n	8009970 <_vfprintf_r+0x58c>
 800a000:	aa23      	add	r2, sp, #140	; 0x8c
 800a002:	9908      	ldr	r1, [sp, #32]
 800a004:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a006:	f003 fb9d 	bl	800d744 <__sprint_r>
 800a00a:	2800      	cmp	r0, #0
 800a00c:	f47f ab19 	bne.w	8009642 <_vfprintf_r+0x25e>
 800a010:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800a012:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a016:	e45e      	b.n	80098d6 <_vfprintf_r+0x4f2>
 800a018:	aa23      	add	r2, sp, #140	; 0x8c
 800a01a:	9908      	ldr	r1, [sp, #32]
 800a01c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a01e:	f003 fb91 	bl	800d744 <__sprint_r>
 800a022:	2800      	cmp	r0, #0
 800a024:	f47f ab0d 	bne.w	8009642 <_vfprintf_r+0x25e>
 800a028:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800a02a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a02e:	e462      	b.n	80098f6 <_vfprintf_r+0x512>
 800a030:	f1bb 0f00 	cmp.w	fp, #0
 800a034:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800a038:	f2c0 829e 	blt.w	800a578 <_vfprintf_r+0x1194>
 800a03c:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 800a040:	9307      	str	r3, [sp, #28]
 800a042:	ea54 0305 	orrs.w	r3, r4, r5
 800a046:	f47f ad2a 	bne.w	8009a9e <_vfprintf_r+0x6ba>
 800a04a:	f1bb 0f00 	cmp.w	fp, #0
 800a04e:	f43f ae8c 	beq.w	8009d6a <_vfprintf_r+0x986>
 800a052:	2700      	movs	r7, #0
 800a054:	e6b2      	b.n	8009dbc <_vfprintf_r+0x9d8>
 800a056:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800a058:	2d00      	cmp	r5, #0
 800a05a:	f340 828f 	ble.w	800a57c <_vfprintf_r+0x1198>
 800a05e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a060:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a062:	4293      	cmp	r3, r2
 800a064:	bfa8      	it	ge
 800a066:	4613      	movge	r3, r2
 800a068:	2b00      	cmp	r3, #0
 800a06a:	461d      	mov	r5, r3
 800a06c:	dd0d      	ble.n	800a08a <_vfprintf_r+0xca6>
 800a06e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a070:	f8c9 6000 	str.w	r6, [r9]
 800a074:	3301      	adds	r3, #1
 800a076:	442c      	add	r4, r5
 800a078:	2b07      	cmp	r3, #7
 800a07a:	9425      	str	r4, [sp, #148]	; 0x94
 800a07c:	f8c9 5004 	str.w	r5, [r9, #4]
 800a080:	9324      	str	r3, [sp, #144]	; 0x90
 800a082:	f300 8384 	bgt.w	800a78e <_vfprintf_r+0x13aa>
 800a086:	f109 0908 	add.w	r9, r9, #8
 800a08a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a08c:	2d00      	cmp	r5, #0
 800a08e:	bfa8      	it	ge
 800a090:	1b5b      	subge	r3, r3, r5
 800a092:	2b00      	cmp	r3, #0
 800a094:	461d      	mov	r5, r3
 800a096:	f340 80be 	ble.w	800a216 <_vfprintf_r+0xe32>
 800a09a:	4ab9      	ldr	r2, [pc, #740]	; (800a380 <_vfprintf_r+0xf9c>)
 800a09c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a09e:	920f      	str	r2, [sp, #60]	; 0x3c
 800a0a0:	2d10      	cmp	r5, #16
 800a0a2:	f340 8245 	ble.w	800a530 <_vfprintf_r+0x114c>
 800a0a6:	4622      	mov	r2, r4
 800a0a8:	2710      	movs	r7, #16
 800a0aa:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800a0ae:	9c08      	ldr	r4, [sp, #32]
 800a0b0:	e005      	b.n	800a0be <_vfprintf_r+0xcda>
 800a0b2:	f109 0908 	add.w	r9, r9, #8
 800a0b6:	3d10      	subs	r5, #16
 800a0b8:	2d10      	cmp	r5, #16
 800a0ba:	f340 8238 	ble.w	800a52e <_vfprintf_r+0x114a>
 800a0be:	3301      	adds	r3, #1
 800a0c0:	3210      	adds	r2, #16
 800a0c2:	2b07      	cmp	r3, #7
 800a0c4:	9225      	str	r2, [sp, #148]	; 0x94
 800a0c6:	9324      	str	r3, [sp, #144]	; 0x90
 800a0c8:	f8c9 a000 	str.w	sl, [r9]
 800a0cc:	f8c9 7004 	str.w	r7, [r9, #4]
 800a0d0:	ddef      	ble.n	800a0b2 <_vfprintf_r+0xcce>
 800a0d2:	aa23      	add	r2, sp, #140	; 0x8c
 800a0d4:	4621      	mov	r1, r4
 800a0d6:	4658      	mov	r0, fp
 800a0d8:	f003 fb34 	bl	800d744 <__sprint_r>
 800a0dc:	2800      	cmp	r0, #0
 800a0de:	f47f aab0 	bne.w	8009642 <_vfprintf_r+0x25e>
 800a0e2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800a0e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a0e6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a0ea:	e7e4      	b.n	800a0b6 <_vfprintf_r+0xcd2>
 800a0ec:	aa23      	add	r2, sp, #140	; 0x8c
 800a0ee:	9908      	ldr	r1, [sp, #32]
 800a0f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a0f2:	f003 fb27 	bl	800d744 <__sprint_r>
 800a0f6:	2800      	cmp	r0, #0
 800a0f8:	f47f aaa3 	bne.w	8009642 <_vfprintf_r+0x25e>
 800a0fc:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800a100:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800a102:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a106:	f7ff bbd6 	b.w	80098b6 <_vfprintf_r+0x4d2>
 800a10a:	1e5e      	subs	r6, r3, #1
 800a10c:	2e00      	cmp	r6, #0
 800a10e:	f77f af48 	ble.w	8009fa2 <_vfprintf_r+0xbbe>
 800a112:	4b9b      	ldr	r3, [pc, #620]	; (800a380 <_vfprintf_r+0xf9c>)
 800a114:	930f      	str	r3, [sp, #60]	; 0x3c
 800a116:	2e10      	cmp	r6, #16
 800a118:	f340 810a 	ble.w	800a330 <_vfprintf_r+0xf4c>
 800a11c:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 800a120:	2710      	movs	r7, #16
 800a122:	46b0      	mov	r8, r6
 800a124:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800a128:	9e08      	ldr	r6, [sp, #32]
 800a12a:	e007      	b.n	800a13c <_vfprintf_r+0xd58>
 800a12c:	f109 0908 	add.w	r9, r9, #8
 800a130:	f1a8 0810 	sub.w	r8, r8, #16
 800a134:	f1b8 0f10 	cmp.w	r8, #16
 800a138:	f340 80f7 	ble.w	800a32a <_vfprintf_r+0xf46>
 800a13c:	3501      	adds	r5, #1
 800a13e:	3410      	adds	r4, #16
 800a140:	2d07      	cmp	r5, #7
 800a142:	9425      	str	r4, [sp, #148]	; 0x94
 800a144:	9524      	str	r5, [sp, #144]	; 0x90
 800a146:	f8c9 a000 	str.w	sl, [r9]
 800a14a:	f8c9 7004 	str.w	r7, [r9, #4]
 800a14e:	dded      	ble.n	800a12c <_vfprintf_r+0xd48>
 800a150:	aa23      	add	r2, sp, #140	; 0x8c
 800a152:	4631      	mov	r1, r6
 800a154:	4658      	mov	r0, fp
 800a156:	f003 faf5 	bl	800d744 <__sprint_r>
 800a15a:	2800      	cmp	r0, #0
 800a15c:	f47f aa71 	bne.w	8009642 <_vfprintf_r+0x25e>
 800a160:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800a162:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800a164:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a168:	e7e2      	b.n	800a130 <_vfprintf_r+0xd4c>
 800a16a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a16c:	6814      	ldr	r4, [r2, #0]
 800a16e:	4613      	mov	r3, r2
 800a170:	3304      	adds	r3, #4
 800a172:	17e5      	asrs	r5, r4, #31
 800a174:	930e      	str	r3, [sp, #56]	; 0x38
 800a176:	4622      	mov	r2, r4
 800a178:	462b      	mov	r3, r5
 800a17a:	e4c6      	b.n	8009b0a <_vfprintf_r+0x726>
 800a17c:	9907      	ldr	r1, [sp, #28]
 800a17e:	f011 0210 	ands.w	r2, r1, #16
 800a182:	d015      	beq.n	800a1b0 <_vfprintf_r+0xdcc>
 800a184:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a186:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800a18a:	f1bb 0f00 	cmp.w	fp, #0
 800a18e:	6804      	ldr	r4, [r0, #0]
 800a190:	f100 0704 	add.w	r7, r0, #4
 800a194:	f04f 0500 	mov.w	r5, #0
 800a198:	db1b      	blt.n	800a1d2 <_vfprintf_r+0xdee>
 800a19a:	460a      	mov	r2, r1
 800a19c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a1a0:	9207      	str	r2, [sp, #28]
 800a1a2:	ea54 0205 	orrs.w	r2, r4, r5
 800a1a6:	970e      	str	r7, [sp, #56]	; 0x38
 800a1a8:	461f      	mov	r7, r3
 800a1aa:	f47f ab05 	bne.w	80097b8 <_vfprintf_r+0x3d4>
 800a1ae:	e4bf      	b.n	8009b30 <_vfprintf_r+0x74c>
 800a1b0:	9907      	ldr	r1, [sp, #28]
 800a1b2:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 800a1b6:	f040 8256 	bne.w	800a666 <_vfprintf_r+0x1282>
 800a1ba:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a1bc:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800a1c0:	f1bb 0f00 	cmp.w	fp, #0
 800a1c4:	680c      	ldr	r4, [r1, #0]
 800a1c6:	f101 0704 	add.w	r7, r1, #4
 800a1ca:	f04f 0500 	mov.w	r5, #0
 800a1ce:	f280 819c 	bge.w	800a50a <_vfprintf_r+0x1126>
 800a1d2:	970e      	str	r7, [sp, #56]	; 0x38
 800a1d4:	461f      	mov	r7, r3
 800a1d6:	ea54 0305 	orrs.w	r3, r4, r5
 800a1da:	f47f aaed 	bne.w	80097b8 <_vfprintf_r+0x3d4>
 800a1de:	ae40      	add	r6, sp, #256	; 0x100
 800a1e0:	3430      	adds	r4, #48	; 0x30
 800a1e2:	f806 4d41 	strb.w	r4, [r6, #-65]!
 800a1e6:	f7ff bb01 	b.w	80097ec <_vfprintf_r+0x408>
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a1ee:	9324      	str	r3, [sp, #144]	; 0x90
 800a1f0:	442c      	add	r4, r5
 800a1f2:	2b07      	cmp	r3, #7
 800a1f4:	9425      	str	r4, [sp, #148]	; 0x94
 800a1f6:	e889 0024 	stmia.w	r9, {r2, r5}
 800a1fa:	f77f abca 	ble.w	8009992 <_vfprintf_r+0x5ae>
 800a1fe:	e6dd      	b.n	8009fbc <_vfprintf_r+0xbd8>
 800a200:	aa23      	add	r2, sp, #140	; 0x8c
 800a202:	9908      	ldr	r1, [sp, #32]
 800a204:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a206:	f003 fa9d 	bl	800d744 <__sprint_r>
 800a20a:	2800      	cmp	r0, #0
 800a20c:	f47f aa19 	bne.w	8009642 <_vfprintf_r+0x25e>
 800a210:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800a212:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a216:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a218:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a21a:	4432      	add	r2, r6
 800a21c:	4617      	mov	r7, r2
 800a21e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a220:	4293      	cmp	r3, r2
 800a222:	db47      	blt.n	800a2b4 <_vfprintf_r+0xed0>
 800a224:	9a07      	ldr	r2, [sp, #28]
 800a226:	07d2      	lsls	r2, r2, #31
 800a228:	d444      	bmi.n	800a2b4 <_vfprintf_r+0xed0>
 800a22a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a22c:	440e      	add	r6, r1
 800a22e:	1bf5      	subs	r5, r6, r7
 800a230:	1acb      	subs	r3, r1, r3
 800a232:	429d      	cmp	r5, r3
 800a234:	bfa8      	it	ge
 800a236:	461d      	movge	r5, r3
 800a238:	2d00      	cmp	r5, #0
 800a23a:	462e      	mov	r6, r5
 800a23c:	dd0d      	ble.n	800a25a <_vfprintf_r+0xe76>
 800a23e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a240:	f8c9 7000 	str.w	r7, [r9]
 800a244:	3201      	adds	r2, #1
 800a246:	442c      	add	r4, r5
 800a248:	2a07      	cmp	r2, #7
 800a24a:	9425      	str	r4, [sp, #148]	; 0x94
 800a24c:	f8c9 5004 	str.w	r5, [r9, #4]
 800a250:	9224      	str	r2, [sp, #144]	; 0x90
 800a252:	f300 831a 	bgt.w	800a88a <_vfprintf_r+0x14a6>
 800a256:	f109 0908 	add.w	r9, r9, #8
 800a25a:	2e00      	cmp	r6, #0
 800a25c:	bfac      	ite	ge
 800a25e:	1b9d      	subge	r5, r3, r6
 800a260:	461d      	movlt	r5, r3
 800a262:	2d00      	cmp	r5, #0
 800a264:	f77f ab97 	ble.w	8009996 <_vfprintf_r+0x5b2>
 800a268:	4a45      	ldr	r2, [pc, #276]	; (800a380 <_vfprintf_r+0xf9c>)
 800a26a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a26c:	920f      	str	r2, [sp, #60]	; 0x3c
 800a26e:	2d10      	cmp	r5, #16
 800a270:	ddbb      	ble.n	800a1ea <_vfprintf_r+0xe06>
 800a272:	2610      	movs	r6, #16
 800a274:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800a276:	f8dd b020 	ldr.w	fp, [sp, #32]
 800a27a:	e004      	b.n	800a286 <_vfprintf_r+0xea2>
 800a27c:	f109 0908 	add.w	r9, r9, #8
 800a280:	3d10      	subs	r5, #16
 800a282:	2d10      	cmp	r5, #16
 800a284:	ddb1      	ble.n	800a1ea <_vfprintf_r+0xe06>
 800a286:	3301      	adds	r3, #1
 800a288:	3410      	adds	r4, #16
 800a28a:	2b07      	cmp	r3, #7
 800a28c:	9425      	str	r4, [sp, #148]	; 0x94
 800a28e:	9324      	str	r3, [sp, #144]	; 0x90
 800a290:	f8c9 a000 	str.w	sl, [r9]
 800a294:	f8c9 6004 	str.w	r6, [r9, #4]
 800a298:	ddf0      	ble.n	800a27c <_vfprintf_r+0xe98>
 800a29a:	aa23      	add	r2, sp, #140	; 0x8c
 800a29c:	4659      	mov	r1, fp
 800a29e:	4638      	mov	r0, r7
 800a2a0:	f003 fa50 	bl	800d744 <__sprint_r>
 800a2a4:	2800      	cmp	r0, #0
 800a2a6:	f47f a9cc 	bne.w	8009642 <_vfprintf_r+0x25e>
 800a2aa:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800a2ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a2ae:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a2b2:	e7e5      	b.n	800a280 <_vfprintf_r+0xe9c>
 800a2b4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a2b6:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a2b8:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800a2ba:	f8c9 1000 	str.w	r1, [r9]
 800a2be:	3201      	adds	r2, #1
 800a2c0:	4404      	add	r4, r0
 800a2c2:	2a07      	cmp	r2, #7
 800a2c4:	9425      	str	r4, [sp, #148]	; 0x94
 800a2c6:	f8c9 0004 	str.w	r0, [r9, #4]
 800a2ca:	9224      	str	r2, [sp, #144]	; 0x90
 800a2cc:	f300 8278 	bgt.w	800a7c0 <_vfprintf_r+0x13dc>
 800a2d0:	f109 0908 	add.w	r9, r9, #8
 800a2d4:	e7a9      	b.n	800a22a <_vfprintf_r+0xe46>
 800a2d6:	9b07      	ldr	r3, [sp, #28]
 800a2d8:	07df      	lsls	r7, r3, #31
 800a2da:	f53f ae2c 	bmi.w	8009f36 <_vfprintf_r+0xb52>
 800a2de:	3501      	adds	r5, #1
 800a2e0:	3401      	adds	r4, #1
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	2d07      	cmp	r5, #7
 800a2e6:	9425      	str	r4, [sp, #148]	; 0x94
 800a2e8:	9524      	str	r5, [sp, #144]	; 0x90
 800a2ea:	f8c9 6000 	str.w	r6, [r9]
 800a2ee:	f8c9 3004 	str.w	r3, [r9, #4]
 800a2f2:	f77f ae54 	ble.w	8009f9e <_vfprintf_r+0xbba>
 800a2f6:	aa23      	add	r2, sp, #140	; 0x8c
 800a2f8:	9908      	ldr	r1, [sp, #32]
 800a2fa:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a2fc:	f003 fa22 	bl	800d744 <__sprint_r>
 800a300:	2800      	cmp	r0, #0
 800a302:	f47f a99e 	bne.w	8009642 <_vfprintf_r+0x25e>
 800a306:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800a308:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800a30a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a30e:	e648      	b.n	8009fa2 <_vfprintf_r+0xbbe>
 800a310:	aa23      	add	r2, sp, #140	; 0x8c
 800a312:	9908      	ldr	r1, [sp, #32]
 800a314:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a316:	f003 fa15 	bl	800d744 <__sprint_r>
 800a31a:	2800      	cmp	r0, #0
 800a31c:	f47f a991 	bne.w	8009642 <_vfprintf_r+0x25e>
 800a320:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800a322:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800a324:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a328:	e613      	b.n	8009f52 <_vfprintf_r+0xb6e>
 800a32a:	4646      	mov	r6, r8
 800a32c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800a330:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a332:	3501      	adds	r5, #1
 800a334:	4434      	add	r4, r6
 800a336:	2d07      	cmp	r5, #7
 800a338:	9425      	str	r4, [sp, #148]	; 0x94
 800a33a:	9524      	str	r5, [sp, #144]	; 0x90
 800a33c:	e889 0048 	stmia.w	r9, {r3, r6}
 800a340:	f77f ae2d 	ble.w	8009f9e <_vfprintf_r+0xbba>
 800a344:	e7d7      	b.n	800a2f6 <_vfprintf_r+0xf12>
 800a346:	aa23      	add	r2, sp, #140	; 0x8c
 800a348:	9908      	ldr	r1, [sp, #32]
 800a34a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a34c:	f003 f9fa 	bl	800d744 <__sprint_r>
 800a350:	2800      	cmp	r0, #0
 800a352:	f47f a976 	bne.w	8009642 <_vfprintf_r+0x25e>
 800a356:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800a358:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800a35a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a35e:	e607      	b.n	8009f70 <_vfprintf_r+0xb8c>
 800a360:	2400      	movs	r4, #0
 800a362:	e73c      	b.n	800a1de <_vfprintf_r+0xdfa>
 800a364:	aa23      	add	r2, sp, #140	; 0x8c
 800a366:	9908      	ldr	r1, [sp, #32]
 800a368:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a36a:	f003 f9eb 	bl	800d744 <__sprint_r>
 800a36e:	2800      	cmp	r0, #0
 800a370:	f47f a967 	bne.w	8009642 <_vfprintf_r+0x25e>
 800a374:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800a376:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a37a:	f7ff bac0 	b.w	80098fe <_vfprintf_r+0x51a>
 800a37e:	bf00      	nop
 800a380:	0800e158 	.word	0x0800e158
 800a384:	4264      	negs	r4, r4
 800a386:	f04f 072d 	mov.w	r7, #45	; 0x2d
 800a38a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800a38e:	f1bb 0f00 	cmp.w	fp, #0
 800a392:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800a396:	f6ff aa0f 	blt.w	80097b8 <_vfprintf_r+0x3d4>
 800a39a:	9b07      	ldr	r3, [sp, #28]
 800a39c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3a0:	9307      	str	r3, [sp, #28]
 800a3a2:	f7ff ba09 	b.w	80097b8 <_vfprintf_r+0x3d4>
 800a3a6:	9b07      	ldr	r3, [sp, #28]
 800a3a8:	06de      	lsls	r6, r3, #27
 800a3aa:	d40b      	bmi.n	800a3c4 <_vfprintf_r+0xfe0>
 800a3ac:	9b07      	ldr	r3, [sp, #28]
 800a3ae:	065d      	lsls	r5, r3, #25
 800a3b0:	d508      	bpl.n	800a3c4 <_vfprintf_r+0xfe0>
 800a3b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a3b4:	6813      	ldr	r3, [r2, #0]
 800a3b6:	3204      	adds	r2, #4
 800a3b8:	920e      	str	r2, [sp, #56]	; 0x38
 800a3ba:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800a3be:	801a      	strh	r2, [r3, #0]
 800a3c0:	f7ff b850 	b.w	8009464 <_vfprintf_r+0x80>
 800a3c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a3c6:	6813      	ldr	r3, [r2, #0]
 800a3c8:	3204      	adds	r2, #4
 800a3ca:	920e      	str	r2, [sp, #56]	; 0x38
 800a3cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a3ce:	601a      	str	r2, [r3, #0]
 800a3d0:	f7ff b848 	b.w	8009464 <_vfprintf_r+0x80>
 800a3d4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800a3d6:	4622      	mov	r2, r4
 800a3d8:	4620      	mov	r0, r4
 800a3da:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800a3dc:	4623      	mov	r3, r4
 800a3de:	4621      	mov	r1, r4
 800a3e0:	f7f6 fee0 	bl	80011a4 <__aeabi_dcmpun>
 800a3e4:	2800      	cmp	r0, #0
 800a3e6:	f040 8306 	bne.w	800a9f6 <_vfprintf_r+0x1612>
 800a3ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a3ec:	f1bb 3fff 	cmp.w	fp, #4294967295
 800a3f0:	f023 0320 	bic.w	r3, r3, #32
 800a3f4:	930d      	str	r3, [sp, #52]	; 0x34
 800a3f6:	f000 827d 	beq.w	800a8f4 <_vfprintf_r+0x1510>
 800a3fa:	2b47      	cmp	r3, #71	; 0x47
 800a3fc:	f000 8176 	beq.w	800a6ec <_vfprintf_r+0x1308>
 800a400:	9b07      	ldr	r3, [sp, #28]
 800a402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a406:	9310      	str	r3, [sp, #64]	; 0x40
 800a408:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a40a:	1e1f      	subs	r7, r3, #0
 800a40c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a40e:	9309      	str	r3, [sp, #36]	; 0x24
 800a410:	bfbb      	ittet	lt
 800a412:	463b      	movlt	r3, r7
 800a414:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
 800a418:	2300      	movge	r3, #0
 800a41a:	232d      	movlt	r3, #45	; 0x2d
 800a41c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a41e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a420:	2b66      	cmp	r3, #102	; 0x66
 800a422:	f000 8250 	beq.w	800a8c6 <_vfprintf_r+0x14e2>
 800a426:	2b46      	cmp	r3, #70	; 0x46
 800a428:	f000 8135 	beq.w	800a696 <_vfprintf_r+0x12b2>
 800a42c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a42e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a430:	2b45      	cmp	r3, #69	; 0x45
 800a432:	a821      	add	r0, sp, #132	; 0x84
 800a434:	a91e      	add	r1, sp, #120	; 0x78
 800a436:	bf0c      	ite	eq
 800a438:	f10b 0501 	addeq.w	r5, fp, #1
 800a43c:	465d      	movne	r5, fp
 800a43e:	9004      	str	r0, [sp, #16]
 800a440:	9103      	str	r1, [sp, #12]
 800a442:	a81d      	add	r0, sp, #116	; 0x74
 800a444:	2102      	movs	r1, #2
 800a446:	463b      	mov	r3, r7
 800a448:	9002      	str	r0, [sp, #8]
 800a44a:	9501      	str	r5, [sp, #4]
 800a44c:	9100      	str	r1, [sp, #0]
 800a44e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a450:	f000 fc76 	bl	800ad40 <_dtoa_r>
 800a454:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a456:	2b67      	cmp	r3, #103	; 0x67
 800a458:	4606      	mov	r6, r0
 800a45a:	f040 8288 	bne.w	800a96e <_vfprintf_r+0x158a>
 800a45e:	9b07      	ldr	r3, [sp, #28]
 800a460:	07da      	lsls	r2, r3, #31
 800a462:	f140 82bd 	bpl.w	800a9e0 <_vfprintf_r+0x15fc>
 800a466:	1974      	adds	r4, r6, r5
 800a468:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a46a:	4639      	mov	r1, r7
 800a46c:	2200      	movs	r2, #0
 800a46e:	2300      	movs	r3, #0
 800a470:	f7f6 fe66 	bl	8001140 <__aeabi_dcmpeq>
 800a474:	2800      	cmp	r0, #0
 800a476:	f040 8188 	bne.w	800a78a <_vfprintf_r+0x13a6>
 800a47a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a47c:	429c      	cmp	r4, r3
 800a47e:	d906      	bls.n	800a48e <_vfprintf_r+0x10aa>
 800a480:	2130      	movs	r1, #48	; 0x30
 800a482:	1c5a      	adds	r2, r3, #1
 800a484:	9221      	str	r2, [sp, #132]	; 0x84
 800a486:	7019      	strb	r1, [r3, #0]
 800a488:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a48a:	429c      	cmp	r4, r3
 800a48c:	d8f9      	bhi.n	800a482 <_vfprintf_r+0x109e>
 800a48e:	1b9b      	subs	r3, r3, r6
 800a490:	9312      	str	r3, [sp, #72]	; 0x48
 800a492:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a494:	2b47      	cmp	r3, #71	; 0x47
 800a496:	f000 8171 	beq.w	800a77c <_vfprintf_r+0x1398>
 800a49a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a49c:	2b65      	cmp	r3, #101	; 0x65
 800a49e:	f340 8275 	ble.w	800a98c <_vfprintf_r+0x15a8>
 800a4a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a4a4:	2b66      	cmp	r3, #102	; 0x66
 800a4a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a4a8:	9313      	str	r3, [sp, #76]	; 0x4c
 800a4aa:	f000 8238 	beq.w	800a91e <_vfprintf_r+0x153a>
 800a4ae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a4b0:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a4b2:	428a      	cmp	r2, r1
 800a4b4:	f2c0 8226 	blt.w	800a904 <_vfprintf_r+0x1520>
 800a4b8:	9b07      	ldr	r3, [sp, #28]
 800a4ba:	07db      	lsls	r3, r3, #31
 800a4bc:	f100 827d 	bmi.w	800a9ba <_vfprintf_r+0x15d6>
 800a4c0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a4c4:	920d      	str	r2, [sp, #52]	; 0x34
 800a4c6:	2267      	movs	r2, #103	; 0x67
 800a4c8:	9211      	str	r2, [sp, #68]	; 0x44
 800a4ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a4cc:	2a00      	cmp	r2, #0
 800a4ce:	f040 814b 	bne.w	800a768 <_vfprintf_r+0x1384>
 800a4d2:	9309      	str	r3, [sp, #36]	; 0x24
 800a4d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a4d6:	9307      	str	r3, [sp, #28]
 800a4d8:	4693      	mov	fp, r2
 800a4da:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800a4de:	f7ff b98f 	b.w	8009800 <_vfprintf_r+0x41c>
 800a4e2:	9907      	ldr	r1, [sp, #28]
 800a4e4:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 800a4e8:	f040 809f 	bne.w	800a62a <_vfprintf_r+0x1246>
 800a4ec:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a4ee:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800a4f2:	f1bb 0f00 	cmp.w	fp, #0
 800a4f6:	680c      	ldr	r4, [r1, #0]
 800a4f8:	f101 0704 	add.w	r7, r1, #4
 800a4fc:	f04f 0500 	mov.w	r5, #0
 800a500:	da12      	bge.n	800a528 <_vfprintf_r+0x1144>
 800a502:	970e      	str	r7, [sp, #56]	; 0x38
 800a504:	2700      	movs	r7, #0
 800a506:	f7ff b8c8 	b.w	800969a <_vfprintf_r+0x2b6>
 800a50a:	9a07      	ldr	r2, [sp, #28]
 800a50c:	e646      	b.n	800a19c <_vfprintf_r+0xdb8>
 800a50e:	9b07      	ldr	r3, [sp, #28]
 800a510:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a512:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a516:	4613      	mov	r3, r2
 800a518:	f000 809f 	beq.w	800a65a <_vfprintf_r+0x1276>
 800a51c:	3304      	adds	r3, #4
 800a51e:	8814      	ldrh	r4, [r2, #0]
 800a520:	930e      	str	r3, [sp, #56]	; 0x38
 800a522:	2500      	movs	r5, #0
 800a524:	f7ff ba9d 	b.w	8009a62 <_vfprintf_r+0x67e>
 800a528:	9a07      	ldr	r2, [sp, #28]
 800a52a:	f7ff b917 	b.w	800975c <_vfprintf_r+0x378>
 800a52e:	4614      	mov	r4, r2
 800a530:	3301      	adds	r3, #1
 800a532:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a534:	9324      	str	r3, [sp, #144]	; 0x90
 800a536:	442c      	add	r4, r5
 800a538:	2b07      	cmp	r3, #7
 800a53a:	9425      	str	r4, [sp, #148]	; 0x94
 800a53c:	e889 0024 	stmia.w	r9, {r2, r5}
 800a540:	f73f ae5e 	bgt.w	800a200 <_vfprintf_r+0xe1c>
 800a544:	f109 0908 	add.w	r9, r9, #8
 800a548:	e665      	b.n	800a216 <_vfprintf_r+0xe32>
 800a54a:	2700      	movs	r7, #0
 800a54c:	45bb      	cmp	fp, r7
 800a54e:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800a552:	f6ff ac33 	blt.w	8009dbc <_vfprintf_r+0x9d8>
 800a556:	9b07      	ldr	r3, [sp, #28]
 800a558:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a55c:	9307      	str	r3, [sp, #28]
 800a55e:	e400      	b.n	8009d62 <_vfprintf_r+0x97e>
 800a560:	aa23      	add	r2, sp, #140	; 0x8c
 800a562:	9908      	ldr	r1, [sp, #32]
 800a564:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a566:	f003 f8ed 	bl	800d744 <__sprint_r>
 800a56a:	2800      	cmp	r0, #0
 800a56c:	f47f a869 	bne.w	8009642 <_vfprintf_r+0x25e>
 800a570:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800a572:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a576:	e443      	b.n	8009e00 <_vfprintf_r+0xa1c>
 800a578:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800a57a:	e418      	b.n	8009dae <_vfprintf_r+0x9ca>
 800a57c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a57e:	4ab1      	ldr	r2, [pc, #708]	; (800a844 <_vfprintf_r+0x1460>)
 800a580:	f8c9 2000 	str.w	r2, [r9]
 800a584:	3301      	adds	r3, #1
 800a586:	3401      	adds	r4, #1
 800a588:	2201      	movs	r2, #1
 800a58a:	2b07      	cmp	r3, #7
 800a58c:	9425      	str	r4, [sp, #148]	; 0x94
 800a58e:	9324      	str	r3, [sp, #144]	; 0x90
 800a590:	f8c9 2004 	str.w	r2, [r9, #4]
 800a594:	f300 809d 	bgt.w	800a6d2 <_vfprintf_r+0x12ee>
 800a598:	f109 0908 	add.w	r9, r9, #8
 800a59c:	b92d      	cbnz	r5, 800a5aa <_vfprintf_r+0x11c6>
 800a59e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a5a0:	b91b      	cbnz	r3, 800a5aa <_vfprintf_r+0x11c6>
 800a5a2:	9b07      	ldr	r3, [sp, #28]
 800a5a4:	07d9      	lsls	r1, r3, #31
 800a5a6:	f57f a9f6 	bpl.w	8009996 <_vfprintf_r+0x5b2>
 800a5aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a5ac:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a5ae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a5b0:	f8c9 2000 	str.w	r2, [r9]
 800a5b4:	3301      	adds	r3, #1
 800a5b6:	440c      	add	r4, r1
 800a5b8:	2b07      	cmp	r3, #7
 800a5ba:	9425      	str	r4, [sp, #148]	; 0x94
 800a5bc:	f8c9 1004 	str.w	r1, [r9, #4]
 800a5c0:	9324      	str	r3, [sp, #144]	; 0x90
 800a5c2:	f300 81e9 	bgt.w	800a998 <_vfprintf_r+0x15b4>
 800a5c6:	f109 0908 	add.w	r9, r9, #8
 800a5ca:	426d      	negs	r5, r5
 800a5cc:	2d00      	cmp	r5, #0
 800a5ce:	f340 80be 	ble.w	800a74e <_vfprintf_r+0x136a>
 800a5d2:	4a9d      	ldr	r2, [pc, #628]	; (800a848 <_vfprintf_r+0x1464>)
 800a5d4:	920f      	str	r2, [sp, #60]	; 0x3c
 800a5d6:	2d10      	cmp	r5, #16
 800a5d8:	f340 80e6 	ble.w	800a7a8 <_vfprintf_r+0x13c4>
 800a5dc:	4622      	mov	r2, r4
 800a5de:	2710      	movs	r7, #16
 800a5e0:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800a5e4:	9c08      	ldr	r4, [sp, #32]
 800a5e6:	e005      	b.n	800a5f4 <_vfprintf_r+0x1210>
 800a5e8:	f109 0908 	add.w	r9, r9, #8
 800a5ec:	3d10      	subs	r5, #16
 800a5ee:	2d10      	cmp	r5, #16
 800a5f0:	f340 80d9 	ble.w	800a7a6 <_vfprintf_r+0x13c2>
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	3210      	adds	r2, #16
 800a5f8:	2b07      	cmp	r3, #7
 800a5fa:	9225      	str	r2, [sp, #148]	; 0x94
 800a5fc:	9324      	str	r3, [sp, #144]	; 0x90
 800a5fe:	f8c9 a000 	str.w	sl, [r9]
 800a602:	f8c9 7004 	str.w	r7, [r9, #4]
 800a606:	ddef      	ble.n	800a5e8 <_vfprintf_r+0x1204>
 800a608:	aa23      	add	r2, sp, #140	; 0x8c
 800a60a:	4621      	mov	r1, r4
 800a60c:	4658      	mov	r0, fp
 800a60e:	f003 f899 	bl	800d744 <__sprint_r>
 800a612:	2800      	cmp	r0, #0
 800a614:	f47f a815 	bne.w	8009642 <_vfprintf_r+0x25e>
 800a618:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800a61a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a61c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a620:	e7e4      	b.n	800a5ec <_vfprintf_r+0x1208>
 800a622:	f04f 30ff 	mov.w	r0, #4294967295
 800a626:	f7ff b812 	b.w	800964e <_vfprintf_r+0x26a>
 800a62a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a62c:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
 800a630:	4603      	mov	r3, r0
 800a632:	f1bb 0f00 	cmp.w	fp, #0
 800a636:	f103 0304 	add.w	r3, r3, #4
 800a63a:	8804      	ldrh	r4, [r0, #0]
 800a63c:	f04f 0500 	mov.w	r5, #0
 800a640:	f2c0 81c4 	blt.w	800a9cc <_vfprintf_r+0x15e8>
 800a644:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a648:	9107      	str	r1, [sp, #28]
 800a64a:	ea54 0105 	orrs.w	r1, r4, r5
 800a64e:	930e      	str	r3, [sp, #56]	; 0x38
 800a650:	f43f aba2 	beq.w	8009d98 <_vfprintf_r+0x9b4>
 800a654:	4617      	mov	r7, r2
 800a656:	f7ff b820 	b.w	800969a <_vfprintf_r+0x2b6>
 800a65a:	3304      	adds	r3, #4
 800a65c:	6814      	ldr	r4, [r2, #0]
 800a65e:	930e      	str	r3, [sp, #56]	; 0x38
 800a660:	2500      	movs	r5, #0
 800a662:	f7ff b9fe 	b.w	8009a62 <_vfprintf_r+0x67e>
 800a666:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a668:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
 800a66c:	4603      	mov	r3, r0
 800a66e:	f1bb 0f00 	cmp.w	fp, #0
 800a672:	f103 0304 	add.w	r3, r3, #4
 800a676:	8804      	ldrh	r4, [r0, #0]
 800a678:	f04f 0500 	mov.w	r5, #0
 800a67c:	f2c0 819a 	blt.w	800a9b4 <_vfprintf_r+0x15d0>
 800a680:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a684:	9107      	str	r1, [sp, #28]
 800a686:	ea54 0105 	orrs.w	r1, r4, r5
 800a68a:	930e      	str	r3, [sp, #56]	; 0x38
 800a68c:	4617      	mov	r7, r2
 800a68e:	f47f a893 	bne.w	80097b8 <_vfprintf_r+0x3d4>
 800a692:	f7ff ba4d 	b.w	8009b30 <_vfprintf_r+0x74c>
 800a696:	a821      	add	r0, sp, #132	; 0x84
 800a698:	a91e      	add	r1, sp, #120	; 0x78
 800a69a:	9004      	str	r0, [sp, #16]
 800a69c:	9103      	str	r1, [sp, #12]
 800a69e:	a81d      	add	r0, sp, #116	; 0x74
 800a6a0:	2103      	movs	r1, #3
 800a6a2:	9002      	str	r0, [sp, #8]
 800a6a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6a6:	f8cd b004 	str.w	fp, [sp, #4]
 800a6aa:	463b      	mov	r3, r7
 800a6ac:	9100      	str	r1, [sp, #0]
 800a6ae:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a6b0:	f000 fb46 	bl	800ad40 <_dtoa_r>
 800a6b4:	465d      	mov	r5, fp
 800a6b6:	4606      	mov	r6, r0
 800a6b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a6ba:	2b46      	cmp	r3, #70	; 0x46
 800a6bc:	eb06 0405 	add.w	r4, r6, r5
 800a6c0:	f47f aed2 	bne.w	800a468 <_vfprintf_r+0x1084>
 800a6c4:	7833      	ldrb	r3, [r6, #0]
 800a6c6:	2b30      	cmp	r3, #48	; 0x30
 800a6c8:	f000 819b 	beq.w	800aa02 <_vfprintf_r+0x161e>
 800a6cc:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800a6ce:	442c      	add	r4, r5
 800a6d0:	e6ca      	b.n	800a468 <_vfprintf_r+0x1084>
 800a6d2:	aa23      	add	r2, sp, #140	; 0x8c
 800a6d4:	9908      	ldr	r1, [sp, #32]
 800a6d6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a6d8:	f003 f834 	bl	800d744 <__sprint_r>
 800a6dc:	2800      	cmp	r0, #0
 800a6de:	f47e afb0 	bne.w	8009642 <_vfprintf_r+0x25e>
 800a6e2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800a6e4:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800a6e6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a6ea:	e757      	b.n	800a59c <_vfprintf_r+0x11b8>
 800a6ec:	f1bb 0f00 	cmp.w	fp, #0
 800a6f0:	bf08      	it	eq
 800a6f2:	f04f 0b01 	moveq.w	fp, #1
 800a6f6:	e683      	b.n	800a400 <_vfprintf_r+0x101c>
 800a6f8:	9b07      	ldr	r3, [sp, #28]
 800a6fa:	f043 0320 	orr.w	r3, r3, #32
 800a6fe:	9307      	str	r3, [sp, #28]
 800a700:	f108 0801 	add.w	r8, r8, #1
 800a704:	f898 3000 	ldrb.w	r3, [r8]
 800a708:	f7fe bedf 	b.w	80094ca <_vfprintf_r+0xe6>
 800a70c:	aa23      	add	r2, sp, #140	; 0x8c
 800a70e:	9908      	ldr	r1, [sp, #32]
 800a710:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a712:	f003 f817 	bl	800d744 <__sprint_r>
 800a716:	2800      	cmp	r0, #0
 800a718:	f47e af93 	bne.w	8009642 <_vfprintf_r+0x25e>
 800a71c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800a71e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a722:	f7ff bb85 	b.w	8009e30 <_vfprintf_r+0xa4c>
 800a726:	4630      	mov	r0, r6
 800a728:	f7f6 f82a 	bl	8000780 <strlen>
 800a72c:	46a3      	mov	fp, r4
 800a72e:	4603      	mov	r3, r0
 800a730:	900d      	str	r0, [sp, #52]	; 0x34
 800a732:	f7ff bb05 	b.w	8009d40 <_vfprintf_r+0x95c>
 800a736:	aa23      	add	r2, sp, #140	; 0x8c
 800a738:	9908      	ldr	r1, [sp, #32]
 800a73a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a73c:	f003 f802 	bl	800d744 <__sprint_r>
 800a740:	2800      	cmp	r0, #0
 800a742:	f47e af7e 	bne.w	8009642 <_vfprintf_r+0x25e>
 800a746:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800a748:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a74a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a74e:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a750:	f8c9 6000 	str.w	r6, [r9]
 800a754:	3301      	adds	r3, #1
 800a756:	440c      	add	r4, r1
 800a758:	2b07      	cmp	r3, #7
 800a75a:	9425      	str	r4, [sp, #148]	; 0x94
 800a75c:	9324      	str	r3, [sp, #144]	; 0x90
 800a75e:	f8c9 1004 	str.w	r1, [r9, #4]
 800a762:	f77f a916 	ble.w	8009992 <_vfprintf_r+0x5ae>
 800a766:	e429      	b.n	8009fbc <_vfprintf_r+0xbd8>
 800a768:	272d      	movs	r7, #45	; 0x2d
 800a76a:	9309      	str	r3, [sp, #36]	; 0x24
 800a76c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a76e:	9307      	str	r3, [sp, #28]
 800a770:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800a774:	f04f 0b00 	mov.w	fp, #0
 800a778:	f7ff b843 	b.w	8009802 <_vfprintf_r+0x41e>
 800a77c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a77e:	1cd8      	adds	r0, r3, #3
 800a780:	db2b      	blt.n	800a7da <_vfprintf_r+0x13f6>
 800a782:	459b      	cmp	fp, r3
 800a784:	db29      	blt.n	800a7da <_vfprintf_r+0x13f6>
 800a786:	9313      	str	r3, [sp, #76]	; 0x4c
 800a788:	e691      	b.n	800a4ae <_vfprintf_r+0x10ca>
 800a78a:	4623      	mov	r3, r4
 800a78c:	e67f      	b.n	800a48e <_vfprintf_r+0x10aa>
 800a78e:	aa23      	add	r2, sp, #140	; 0x8c
 800a790:	9908      	ldr	r1, [sp, #32]
 800a792:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a794:	f002 ffd6 	bl	800d744 <__sprint_r>
 800a798:	2800      	cmp	r0, #0
 800a79a:	f47e af52 	bne.w	8009642 <_vfprintf_r+0x25e>
 800a79e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800a7a0:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a7a4:	e471      	b.n	800a08a <_vfprintf_r+0xca6>
 800a7a6:	4614      	mov	r4, r2
 800a7a8:	3301      	adds	r3, #1
 800a7aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a7ac:	9324      	str	r3, [sp, #144]	; 0x90
 800a7ae:	442c      	add	r4, r5
 800a7b0:	2b07      	cmp	r3, #7
 800a7b2:	9425      	str	r4, [sp, #148]	; 0x94
 800a7b4:	e889 0024 	stmia.w	r9, {r2, r5}
 800a7b8:	dcbd      	bgt.n	800a736 <_vfprintf_r+0x1352>
 800a7ba:	f109 0908 	add.w	r9, r9, #8
 800a7be:	e7c6      	b.n	800a74e <_vfprintf_r+0x136a>
 800a7c0:	aa23      	add	r2, sp, #140	; 0x8c
 800a7c2:	9908      	ldr	r1, [sp, #32]
 800a7c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a7c6:	f002 ffbd 	bl	800d744 <__sprint_r>
 800a7ca:	2800      	cmp	r0, #0
 800a7cc:	f47e af39 	bne.w	8009642 <_vfprintf_r+0x25e>
 800a7d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a7d2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800a7d4:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a7d8:	e527      	b.n	800a22a <_vfprintf_r+0xe46>
 800a7da:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a7dc:	3a02      	subs	r2, #2
 800a7de:	9211      	str	r2, [sp, #68]	; 0x44
 800a7e0:	3b01      	subs	r3, #1
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800a7e8:	931d      	str	r3, [sp, #116]	; 0x74
 800a7ea:	bfb8      	it	lt
 800a7ec:	425b      	neglt	r3, r3
 800a7ee:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
 800a7f2:	bfb4      	ite	lt
 800a7f4:	222d      	movlt	r2, #45	; 0x2d
 800a7f6:	222b      	movge	r2, #43	; 0x2b
 800a7f8:	2b09      	cmp	r3, #9
 800a7fa:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
 800a7fe:	f340 80e7 	ble.w	800a9d0 <_vfprintf_r+0x15ec>
 800a802:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
 800a806:	4604      	mov	r4, r0
 800a808:	4a10      	ldr	r2, [pc, #64]	; (800a84c <_vfprintf_r+0x1468>)
 800a80a:	fb82 2103 	smull	r2, r1, r2, r3
 800a80e:	17da      	asrs	r2, r3, #31
 800a810:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 800a814:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800a818:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 800a81c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a820:	2a09      	cmp	r2, #9
 800a822:	4613      	mov	r3, r2
 800a824:	f804 1d01 	strb.w	r1, [r4, #-1]!
 800a828:	dcee      	bgt.n	800a808 <_vfprintf_r+0x1424>
 800a82a:	4621      	mov	r1, r4
 800a82c:	3330      	adds	r3, #48	; 0x30
 800a82e:	b2da      	uxtb	r2, r3
 800a830:	f801 2d01 	strb.w	r2, [r1, #-1]!
 800a834:	4288      	cmp	r0, r1
 800a836:	f240 813f 	bls.w	800aab8 <_vfprintf_r+0x16d4>
 800a83a:	f10d 017e 	add.w	r1, sp, #126	; 0x7e
 800a83e:	4623      	mov	r3, r4
 800a840:	e008      	b.n	800a854 <_vfprintf_r+0x1470>
 800a842:	bf00      	nop
 800a844:	0800e144 	.word	0x0800e144
 800a848:	0800e158 	.word	0x0800e158
 800a84c:	66666667 	.word	0x66666667
 800a850:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a854:	f801 2b01 	strb.w	r2, [r1], #1
 800a858:	4298      	cmp	r0, r3
 800a85a:	d1f9      	bne.n	800a850 <_vfprintf_r+0x146c>
 800a85c:	1c43      	adds	r3, r0, #1
 800a85e:	1b1b      	subs	r3, r3, r4
 800a860:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
 800a864:	4413      	add	r3, r2
 800a866:	aa1f      	add	r2, sp, #124	; 0x7c
 800a868:	1a9b      	subs	r3, r3, r2
 800a86a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a86c:	9319      	str	r3, [sp, #100]	; 0x64
 800a86e:	2a01      	cmp	r2, #1
 800a870:	4413      	add	r3, r2
 800a872:	930d      	str	r3, [sp, #52]	; 0x34
 800a874:	f340 80db 	ble.w	800aa2e <_vfprintf_r+0x164a>
 800a878:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a87a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a87c:	4413      	add	r3, r2
 800a87e:	2200      	movs	r2, #0
 800a880:	930d      	str	r3, [sp, #52]	; 0x34
 800a882:	9213      	str	r2, [sp, #76]	; 0x4c
 800a884:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a888:	e61f      	b.n	800a4ca <_vfprintf_r+0x10e6>
 800a88a:	aa23      	add	r2, sp, #140	; 0x8c
 800a88c:	9908      	ldr	r1, [sp, #32]
 800a88e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a890:	f002 ff58 	bl	800d744 <__sprint_r>
 800a894:	2800      	cmp	r0, #0
 800a896:	f47e aed4 	bne.w	8009642 <_vfprintf_r+0x25e>
 800a89a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a89c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a89e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800a8a0:	1ad3      	subs	r3, r2, r3
 800a8a2:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a8a6:	e4d8      	b.n	800a25a <_vfprintf_r+0xe76>
 800a8a8:	2d06      	cmp	r5, #6
 800a8aa:	462b      	mov	r3, r5
 800a8ac:	bf28      	it	cs
 800a8ae:	2306      	movcs	r3, #6
 800a8b0:	930d      	str	r3, [sp, #52]	; 0x34
 800a8b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a8b6:	46b3      	mov	fp, r6
 800a8b8:	970e      	str	r7, [sp, #56]	; 0x38
 800a8ba:	9613      	str	r6, [sp, #76]	; 0x4c
 800a8bc:	4637      	mov	r7, r6
 800a8be:	9309      	str	r3, [sp, #36]	; 0x24
 800a8c0:	4e85      	ldr	r6, [pc, #532]	; (800aad8 <_vfprintf_r+0x16f4>)
 800a8c2:	f7fe bf9d 	b.w	8009800 <_vfprintf_r+0x41c>
 800a8c6:	a821      	add	r0, sp, #132	; 0x84
 800a8c8:	a91e      	add	r1, sp, #120	; 0x78
 800a8ca:	9004      	str	r0, [sp, #16]
 800a8cc:	9103      	str	r1, [sp, #12]
 800a8ce:	a81d      	add	r0, sp, #116	; 0x74
 800a8d0:	2103      	movs	r1, #3
 800a8d2:	9002      	str	r0, [sp, #8]
 800a8d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8d6:	f8cd b004 	str.w	fp, [sp, #4]
 800a8da:	463b      	mov	r3, r7
 800a8dc:	9100      	str	r1, [sp, #0]
 800a8de:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a8e0:	f000 fa2e 	bl	800ad40 <_dtoa_r>
 800a8e4:	465d      	mov	r5, fp
 800a8e6:	4606      	mov	r6, r0
 800a8e8:	eb00 040b 	add.w	r4, r0, fp
 800a8ec:	e6ea      	b.n	800a6c4 <_vfprintf_r+0x12e0>
 800a8ee:	9307      	str	r3, [sp, #28]
 800a8f0:	f7ff b8d5 	b.w	8009a9e <_vfprintf_r+0x6ba>
 800a8f4:	f04f 0b06 	mov.w	fp, #6
 800a8f8:	e582      	b.n	800a400 <_vfprintf_r+0x101c>
 800a8fa:	272d      	movs	r7, #45	; 0x2d
 800a8fc:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800a900:	f7ff b9b7 	b.w	8009c72 <_vfprintf_r+0x88e>
 800a904:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a906:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a908:	4413      	add	r3, r2
 800a90a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a90c:	930d      	str	r3, [sp, #52]	; 0x34
 800a90e:	2a00      	cmp	r2, #0
 800a910:	f340 8085 	ble.w	800aa1e <_vfprintf_r+0x163a>
 800a914:	2267      	movs	r2, #103	; 0x67
 800a916:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a91a:	9211      	str	r2, [sp, #68]	; 0x44
 800a91c:	e5d5      	b.n	800a4ca <_vfprintf_r+0x10e6>
 800a91e:	2b00      	cmp	r3, #0
 800a920:	f340 808f 	ble.w	800aa42 <_vfprintf_r+0x165e>
 800a924:	f1bb 0f00 	cmp.w	fp, #0
 800a928:	d15c      	bne.n	800a9e4 <_vfprintf_r+0x1600>
 800a92a:	9a07      	ldr	r2, [sp, #28]
 800a92c:	07d1      	lsls	r1, r2, #31
 800a92e:	d459      	bmi.n	800a9e4 <_vfprintf_r+0x1600>
 800a930:	461a      	mov	r2, r3
 800a932:	920d      	str	r2, [sp, #52]	; 0x34
 800a934:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a938:	e5c7      	b.n	800a4ca <_vfprintf_r+0x10e6>
 800a93a:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 800a93e:	970e      	str	r7, [sp, #56]	; 0x38
 800a940:	9309      	str	r3, [sp, #36]	; 0x24
 800a942:	950d      	str	r5, [sp, #52]	; 0x34
 800a944:	4683      	mov	fp, r0
 800a946:	9013      	str	r0, [sp, #76]	; 0x4c
 800a948:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800a94c:	f7fe bf58 	b.w	8009800 <_vfprintf_r+0x41c>
 800a950:	9b07      	ldr	r3, [sp, #28]
 800a952:	07db      	lsls	r3, r3, #31
 800a954:	465f      	mov	r7, fp
 800a956:	d505      	bpl.n	800a964 <_vfprintf_r+0x1580>
 800a958:	ae40      	add	r6, sp, #256	; 0x100
 800a95a:	2330      	movs	r3, #48	; 0x30
 800a95c:	f806 3d41 	strb.w	r3, [r6, #-65]!
 800a960:	f7fe bf44 	b.w	80097ec <_vfprintf_r+0x408>
 800a964:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 800a968:	ae30      	add	r6, sp, #192	; 0xc0
 800a96a:	f7fe bf42 	b.w	80097f2 <_vfprintf_r+0x40e>
 800a96e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a970:	2b47      	cmp	r3, #71	; 0x47
 800a972:	f47f ad78 	bne.w	800a466 <_vfprintf_r+0x1082>
 800a976:	9b07      	ldr	r3, [sp, #28]
 800a978:	07dc      	lsls	r4, r3, #31
 800a97a:	f53f ae9d 	bmi.w	800a6b8 <_vfprintf_r+0x12d4>
 800a97e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a980:	1b9b      	subs	r3, r3, r6
 800a982:	9312      	str	r3, [sp, #72]	; 0x48
 800a984:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a986:	2b47      	cmp	r3, #71	; 0x47
 800a988:	f43f aef8 	beq.w	800a77c <_vfprintf_r+0x1398>
 800a98c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a98e:	e727      	b.n	800a7e0 <_vfprintf_r+0x13fc>
 800a990:	46a0      	mov	r8, r4
 800a992:	2500      	movs	r5, #0
 800a994:	f7fe bd9b 	b.w	80094ce <_vfprintf_r+0xea>
 800a998:	aa23      	add	r2, sp, #140	; 0x8c
 800a99a:	9908      	ldr	r1, [sp, #32]
 800a99c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a99e:	f002 fed1 	bl	800d744 <__sprint_r>
 800a9a2:	2800      	cmp	r0, #0
 800a9a4:	f47e ae4d 	bne.w	8009642 <_vfprintf_r+0x25e>
 800a9a8:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800a9aa:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800a9ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a9ae:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a9b2:	e60a      	b.n	800a5ca <_vfprintf_r+0x11e6>
 800a9b4:	930e      	str	r3, [sp, #56]	; 0x38
 800a9b6:	4617      	mov	r7, r2
 800a9b8:	e40d      	b.n	800a1d6 <_vfprintf_r+0xdf2>
 800a9ba:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a9bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a9be:	4413      	add	r3, r2
 800a9c0:	2267      	movs	r2, #103	; 0x67
 800a9c2:	930d      	str	r3, [sp, #52]	; 0x34
 800a9c4:	9211      	str	r2, [sp, #68]	; 0x44
 800a9c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a9ca:	e57e      	b.n	800a4ca <_vfprintf_r+0x10e6>
 800a9cc:	930e      	str	r3, [sp, #56]	; 0x38
 800a9ce:	e599      	b.n	800a504 <_vfprintf_r+0x1120>
 800a9d0:	3330      	adds	r3, #48	; 0x30
 800a9d2:	2230      	movs	r2, #48	; 0x30
 800a9d4:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 800a9d8:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
 800a9dc:	ab20      	add	r3, sp, #128	; 0x80
 800a9de:	e742      	b.n	800a866 <_vfprintf_r+0x1482>
 800a9e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a9e2:	e554      	b.n	800a48e <_vfprintf_r+0x10aa>
 800a9e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a9e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a9e8:	189d      	adds	r5, r3, r2
 800a9ea:	eb05 030b 	add.w	r3, r5, fp
 800a9ee:	930d      	str	r3, [sp, #52]	; 0x34
 800a9f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a9f4:	e569      	b.n	800a4ca <_vfprintf_r+0x10e6>
 800a9f6:	4e39      	ldr	r6, [pc, #228]	; (800aadc <_vfprintf_r+0x16f8>)
 800a9f8:	4b39      	ldr	r3, [pc, #228]	; (800aae0 <_vfprintf_r+0x16fc>)
 800a9fa:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800a9fe:	f7ff b93a 	b.w	8009c76 <_vfprintf_r+0x892>
 800aa02:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa04:	4639      	mov	r1, r7
 800aa06:	2200      	movs	r2, #0
 800aa08:	2300      	movs	r3, #0
 800aa0a:	f7f6 fb99 	bl	8001140 <__aeabi_dcmpeq>
 800aa0e:	2800      	cmp	r0, #0
 800aa10:	f47f ae5c 	bne.w	800a6cc <_vfprintf_r+0x12e8>
 800aa14:	f1c5 0501 	rsb	r5, r5, #1
 800aa18:	951d      	str	r5, [sp, #116]	; 0x74
 800aa1a:	442c      	add	r4, r5
 800aa1c:	e524      	b.n	800a468 <_vfprintf_r+0x1084>
 800aa1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aa20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aa22:	f1c3 0301 	rsb	r3, r3, #1
 800aa26:	441a      	add	r2, r3
 800aa28:	4613      	mov	r3, r2
 800aa2a:	920d      	str	r2, [sp, #52]	; 0x34
 800aa2c:	e772      	b.n	800a914 <_vfprintf_r+0x1530>
 800aa2e:	9b07      	ldr	r3, [sp, #28]
 800aa30:	f013 0301 	ands.w	r3, r3, #1
 800aa34:	f47f af20 	bne.w	800a878 <_vfprintf_r+0x1494>
 800aa38:	9313      	str	r3, [sp, #76]	; 0x4c
 800aa3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa3c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800aa40:	e543      	b.n	800a4ca <_vfprintf_r+0x10e6>
 800aa42:	f1bb 0f00 	cmp.w	fp, #0
 800aa46:	d102      	bne.n	800aa4e <_vfprintf_r+0x166a>
 800aa48:	9b07      	ldr	r3, [sp, #28]
 800aa4a:	07da      	lsls	r2, r3, #31
 800aa4c:	d507      	bpl.n	800aa5e <_vfprintf_r+0x167a>
 800aa4e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800aa50:	1c5d      	adds	r5, r3, #1
 800aa52:	eb05 030b 	add.w	r3, r5, fp
 800aa56:	930d      	str	r3, [sp, #52]	; 0x34
 800aa58:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800aa5c:	e535      	b.n	800a4ca <_vfprintf_r+0x10e6>
 800aa5e:	2301      	movs	r3, #1
 800aa60:	930d      	str	r3, [sp, #52]	; 0x34
 800aa62:	e532      	b.n	800a4ca <_vfprintf_r+0x10e6>
 800aa64:	980e      	ldr	r0, [sp, #56]	; 0x38
 800aa66:	f898 3001 	ldrb.w	r3, [r8, #1]
 800aa6a:	6805      	ldr	r5, [r0, #0]
 800aa6c:	3004      	adds	r0, #4
 800aa6e:	2d00      	cmp	r5, #0
 800aa70:	900e      	str	r0, [sp, #56]	; 0x38
 800aa72:	46a0      	mov	r8, r4
 800aa74:	f6be ad29 	bge.w	80094ca <_vfprintf_r+0xe6>
 800aa78:	f04f 35ff 	mov.w	r5, #4294967295
 800aa7c:	f7fe bd25 	b.w	80094ca <_vfprintf_r+0xe6>
 800aa80:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800aa84:	f7ff b878 	b.w	8009b78 <_vfprintf_r+0x794>
 800aa88:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800aa8c:	f7ff b82f 	b.w	8009aee <_vfprintf_r+0x70a>
 800aa90:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800aa94:	f7fe bfd7 	b.w	8009a46 <_vfprintf_r+0x662>
 800aa98:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800aa9c:	f7fe be6d 	b.w	800977a <_vfprintf_r+0x396>
 800aaa0:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800aaa4:	f7ff b967 	b.w	8009d76 <_vfprintf_r+0x992>
 800aaa8:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800aaac:	f7fe bddb 	b.w	8009666 <_vfprintf_r+0x282>
 800aab0:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800aab4:	f7fe be38 	b.w	8009728 <_vfprintf_r+0x344>
 800aab8:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
 800aabc:	e6d3      	b.n	800a866 <_vfprintf_r+0x1482>
 800aabe:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800aac2:	f7ff b88b 	b.w	8009bdc <_vfprintf_r+0x7f8>
 800aac6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800aaca:	f7ff b8a4 	b.w	8009c16 <_vfprintf_r+0x832>
 800aace:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800aad2:	f7ff b8f4 	b.w	8009cbe <_vfprintf_r+0x8da>
 800aad6:	bf00      	nop
 800aad8:	0800e13c 	.word	0x0800e13c
 800aadc:	0800e110 	.word	0x0800e110
 800aae0:	0800e10c 	.word	0x0800e10c

0800aae4 <__sbprintf>:
 800aae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aae6:	460c      	mov	r4, r1
 800aae8:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 800aaec:	8989      	ldrh	r1, [r1, #12]
 800aaee:	6e66      	ldr	r6, [r4, #100]	; 0x64
 800aaf0:	89e5      	ldrh	r5, [r4, #14]
 800aaf2:	9619      	str	r6, [sp, #100]	; 0x64
 800aaf4:	f021 0102 	bic.w	r1, r1, #2
 800aaf8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800aafa:	f8ad 500e 	strh.w	r5, [sp, #14]
 800aafe:	2500      	movs	r5, #0
 800ab00:	69e7      	ldr	r7, [r4, #28]
 800ab02:	f8ad 100c 	strh.w	r1, [sp, #12]
 800ab06:	9609      	str	r6, [sp, #36]	; 0x24
 800ab08:	9506      	str	r5, [sp, #24]
 800ab0a:	ae1a      	add	r6, sp, #104	; 0x68
 800ab0c:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800ab10:	4669      	mov	r1, sp
 800ab12:	9600      	str	r6, [sp, #0]
 800ab14:	9604      	str	r6, [sp, #16]
 800ab16:	9502      	str	r5, [sp, #8]
 800ab18:	9505      	str	r5, [sp, #20]
 800ab1a:	9707      	str	r7, [sp, #28]
 800ab1c:	4606      	mov	r6, r0
 800ab1e:	f7fe fc61 	bl	80093e4 <_vfprintf_r>
 800ab22:	1e05      	subs	r5, r0, #0
 800ab24:	db07      	blt.n	800ab36 <__sbprintf+0x52>
 800ab26:	4630      	mov	r0, r6
 800ab28:	4669      	mov	r1, sp
 800ab2a:	f001 f8d9 	bl	800bce0 <_fflush_r>
 800ab2e:	2800      	cmp	r0, #0
 800ab30:	bf18      	it	ne
 800ab32:	f04f 35ff 	movne.w	r5, #4294967295
 800ab36:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800ab3a:	065b      	lsls	r3, r3, #25
 800ab3c:	d503      	bpl.n	800ab46 <__sbprintf+0x62>
 800ab3e:	89a3      	ldrh	r3, [r4, #12]
 800ab40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab44:	81a3      	strh	r3, [r4, #12]
 800ab46:	4628      	mov	r0, r5
 800ab48:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 800ab4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab4e:	bf00      	nop

0800ab50 <__swsetup_r>:
 800ab50:	b538      	push	{r3, r4, r5, lr}
 800ab52:	4b30      	ldr	r3, [pc, #192]	; (800ac14 <__swsetup_r+0xc4>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	4605      	mov	r5, r0
 800ab58:	460c      	mov	r4, r1
 800ab5a:	b113      	cbz	r3, 800ab62 <__swsetup_r+0x12>
 800ab5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab5e:	2a00      	cmp	r2, #0
 800ab60:	d038      	beq.n	800abd4 <__swsetup_r+0x84>
 800ab62:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab66:	b293      	uxth	r3, r2
 800ab68:	0718      	lsls	r0, r3, #28
 800ab6a:	d50c      	bpl.n	800ab86 <__swsetup_r+0x36>
 800ab6c:	6920      	ldr	r0, [r4, #16]
 800ab6e:	b1a8      	cbz	r0, 800ab9c <__swsetup_r+0x4c>
 800ab70:	f013 0201 	ands.w	r2, r3, #1
 800ab74:	d01e      	beq.n	800abb4 <__swsetup_r+0x64>
 800ab76:	6963      	ldr	r3, [r4, #20]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	425b      	negs	r3, r3
 800ab7c:	61a3      	str	r3, [r4, #24]
 800ab7e:	60a2      	str	r2, [r4, #8]
 800ab80:	b1f0      	cbz	r0, 800abc0 <__swsetup_r+0x70>
 800ab82:	2000      	movs	r0, #0
 800ab84:	bd38      	pop	{r3, r4, r5, pc}
 800ab86:	06d9      	lsls	r1, r3, #27
 800ab88:	d53c      	bpl.n	800ac04 <__swsetup_r+0xb4>
 800ab8a:	0758      	lsls	r0, r3, #29
 800ab8c:	d426      	bmi.n	800abdc <__swsetup_r+0x8c>
 800ab8e:	6920      	ldr	r0, [r4, #16]
 800ab90:	f042 0308 	orr.w	r3, r2, #8
 800ab94:	81a3      	strh	r3, [r4, #12]
 800ab96:	b29b      	uxth	r3, r3
 800ab98:	2800      	cmp	r0, #0
 800ab9a:	d1e9      	bne.n	800ab70 <__swsetup_r+0x20>
 800ab9c:	f403 7220 	and.w	r2, r3, #640	; 0x280
 800aba0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800aba4:	d0e4      	beq.n	800ab70 <__swsetup_r+0x20>
 800aba6:	4628      	mov	r0, r5
 800aba8:	4621      	mov	r1, r4
 800abaa:	f001 fc57 	bl	800c45c <__smakebuf_r>
 800abae:	89a3      	ldrh	r3, [r4, #12]
 800abb0:	6920      	ldr	r0, [r4, #16]
 800abb2:	e7dd      	b.n	800ab70 <__swsetup_r+0x20>
 800abb4:	0799      	lsls	r1, r3, #30
 800abb6:	bf58      	it	pl
 800abb8:	6962      	ldrpl	r2, [r4, #20]
 800abba:	60a2      	str	r2, [r4, #8]
 800abbc:	2800      	cmp	r0, #0
 800abbe:	d1e0      	bne.n	800ab82 <__swsetup_r+0x32>
 800abc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abc4:	061a      	lsls	r2, r3, #24
 800abc6:	d5dd      	bpl.n	800ab84 <__swsetup_r+0x34>
 800abc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abcc:	81a3      	strh	r3, [r4, #12]
 800abce:	f04f 30ff 	mov.w	r0, #4294967295
 800abd2:	bd38      	pop	{r3, r4, r5, pc}
 800abd4:	4618      	mov	r0, r3
 800abd6:	f001 f917 	bl	800be08 <__sinit>
 800abda:	e7c2      	b.n	800ab62 <__swsetup_r+0x12>
 800abdc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800abde:	b151      	cbz	r1, 800abf6 <__swsetup_r+0xa6>
 800abe0:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800abe4:	4299      	cmp	r1, r3
 800abe6:	d004      	beq.n	800abf2 <__swsetup_r+0xa2>
 800abe8:	4628      	mov	r0, r5
 800abea:	f001 f965 	bl	800beb8 <_free_r>
 800abee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800abf2:	2300      	movs	r3, #0
 800abf4:	6323      	str	r3, [r4, #48]	; 0x30
 800abf6:	2300      	movs	r3, #0
 800abf8:	6920      	ldr	r0, [r4, #16]
 800abfa:	6063      	str	r3, [r4, #4]
 800abfc:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 800ac00:	6020      	str	r0, [r4, #0]
 800ac02:	e7c5      	b.n	800ab90 <__swsetup_r+0x40>
 800ac04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac08:	2309      	movs	r3, #9
 800ac0a:	602b      	str	r3, [r5, #0]
 800ac0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac10:	81a2      	strh	r2, [r4, #12]
 800ac12:	bd38      	pop	{r3, r4, r5, pc}
 800ac14:	20000448 	.word	0x20000448

0800ac18 <quorem>:
 800ac18:	6902      	ldr	r2, [r0, #16]
 800ac1a:	690b      	ldr	r3, [r1, #16]
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	f300 808d 	bgt.w	800ad3c <quorem+0x124>
 800ac22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac26:	f103 38ff 	add.w	r8, r3, #4294967295
 800ac2a:	f101 0714 	add.w	r7, r1, #20
 800ac2e:	f100 0b14 	add.w	fp, r0, #20
 800ac32:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 800ac36:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 800ac3a:	ea4f 0488 	mov.w	r4, r8, lsl #2
 800ac3e:	b083      	sub	sp, #12
 800ac40:	3201      	adds	r2, #1
 800ac42:	fbb3 f9f2 	udiv	r9, r3, r2
 800ac46:	eb0b 0304 	add.w	r3, fp, r4
 800ac4a:	9400      	str	r4, [sp, #0]
 800ac4c:	eb07 0a04 	add.w	sl, r7, r4
 800ac50:	9301      	str	r3, [sp, #4]
 800ac52:	f1b9 0f00 	cmp.w	r9, #0
 800ac56:	d039      	beq.n	800accc <quorem+0xb4>
 800ac58:	2500      	movs	r5, #0
 800ac5a:	46bc      	mov	ip, r7
 800ac5c:	46de      	mov	lr, fp
 800ac5e:	462b      	mov	r3, r5
 800ac60:	f85c 6b04 	ldr.w	r6, [ip], #4
 800ac64:	f8de 2000 	ldr.w	r2, [lr]
 800ac68:	b2b4      	uxth	r4, r6
 800ac6a:	fb09 5504 	mla	r5, r9, r4, r5
 800ac6e:	0c36      	lsrs	r6, r6, #16
 800ac70:	0c2c      	lsrs	r4, r5, #16
 800ac72:	fb09 4406 	mla	r4, r9, r6, r4
 800ac76:	b2ad      	uxth	r5, r5
 800ac78:	1b5b      	subs	r3, r3, r5
 800ac7a:	b2a6      	uxth	r6, r4
 800ac7c:	fa13 f382 	uxtah	r3, r3, r2
 800ac80:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
 800ac84:	eb06 4623 	add.w	r6, r6, r3, asr #16
 800ac88:	b29b      	uxth	r3, r3
 800ac8a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800ac8e:	45e2      	cmp	sl, ip
 800ac90:	f84e 3b04 	str.w	r3, [lr], #4
 800ac94:	ea4f 4514 	mov.w	r5, r4, lsr #16
 800ac98:	ea4f 4326 	mov.w	r3, r6, asr #16
 800ac9c:	d2e0      	bcs.n	800ac60 <quorem+0x48>
 800ac9e:	9b00      	ldr	r3, [sp, #0]
 800aca0:	f85b 3003 	ldr.w	r3, [fp, r3]
 800aca4:	b993      	cbnz	r3, 800accc <quorem+0xb4>
 800aca6:	9c01      	ldr	r4, [sp, #4]
 800aca8:	1f23      	subs	r3, r4, #4
 800acaa:	459b      	cmp	fp, r3
 800acac:	d20c      	bcs.n	800acc8 <quorem+0xb0>
 800acae:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800acb2:	b94b      	cbnz	r3, 800acc8 <quorem+0xb0>
 800acb4:	f1a4 0308 	sub.w	r3, r4, #8
 800acb8:	e002      	b.n	800acc0 <quorem+0xa8>
 800acba:	681a      	ldr	r2, [r3, #0]
 800acbc:	3b04      	subs	r3, #4
 800acbe:	b91a      	cbnz	r2, 800acc8 <quorem+0xb0>
 800acc0:	459b      	cmp	fp, r3
 800acc2:	f108 38ff 	add.w	r8, r8, #4294967295
 800acc6:	d3f8      	bcc.n	800acba <quorem+0xa2>
 800acc8:	f8c0 8010 	str.w	r8, [r0, #16]
 800accc:	4604      	mov	r4, r0
 800acce:	f002 f931 	bl	800cf34 <__mcmp>
 800acd2:	2800      	cmp	r0, #0
 800acd4:	db2e      	blt.n	800ad34 <quorem+0x11c>
 800acd6:	f109 0901 	add.w	r9, r9, #1
 800acda:	465d      	mov	r5, fp
 800acdc:	2300      	movs	r3, #0
 800acde:	f857 1b04 	ldr.w	r1, [r7], #4
 800ace2:	6828      	ldr	r0, [r5, #0]
 800ace4:	b28a      	uxth	r2, r1
 800ace6:	1a9a      	subs	r2, r3, r2
 800ace8:	0c09      	lsrs	r1, r1, #16
 800acea:	fa12 f280 	uxtah	r2, r2, r0
 800acee:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 800acf2:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800acf6:	b291      	uxth	r1, r2
 800acf8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800acfc:	45ba      	cmp	sl, r7
 800acfe:	f845 1b04 	str.w	r1, [r5], #4
 800ad02:	ea4f 4323 	mov.w	r3, r3, asr #16
 800ad06:	d2ea      	bcs.n	800acde <quorem+0xc6>
 800ad08:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 800ad0c:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 800ad10:	b982      	cbnz	r2, 800ad34 <quorem+0x11c>
 800ad12:	1f1a      	subs	r2, r3, #4
 800ad14:	4593      	cmp	fp, r2
 800ad16:	d20b      	bcs.n	800ad30 <quorem+0x118>
 800ad18:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800ad1c:	b942      	cbnz	r2, 800ad30 <quorem+0x118>
 800ad1e:	3b08      	subs	r3, #8
 800ad20:	e002      	b.n	800ad28 <quorem+0x110>
 800ad22:	681a      	ldr	r2, [r3, #0]
 800ad24:	3b04      	subs	r3, #4
 800ad26:	b91a      	cbnz	r2, 800ad30 <quorem+0x118>
 800ad28:	459b      	cmp	fp, r3
 800ad2a:	f108 38ff 	add.w	r8, r8, #4294967295
 800ad2e:	d3f8      	bcc.n	800ad22 <quorem+0x10a>
 800ad30:	f8c4 8010 	str.w	r8, [r4, #16]
 800ad34:	4648      	mov	r0, r9
 800ad36:	b003      	add	sp, #12
 800ad38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad3c:	2000      	movs	r0, #0
 800ad3e:	4770      	bx	lr

0800ad40 <_dtoa_r>:
 800ad40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad44:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800ad46:	b097      	sub	sp, #92	; 0x5c
 800ad48:	4681      	mov	r9, r0
 800ad4a:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800ad4c:	4692      	mov	sl, r2
 800ad4e:	469b      	mov	fp, r3
 800ad50:	b149      	cbz	r1, 800ad66 <_dtoa_r+0x26>
 800ad52:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ad54:	604a      	str	r2, [r1, #4]
 800ad56:	2301      	movs	r3, #1
 800ad58:	4093      	lsls	r3, r2
 800ad5a:	608b      	str	r3, [r1, #8]
 800ad5c:	f001 ff08 	bl	800cb70 <_Bfree>
 800ad60:	2300      	movs	r3, #0
 800ad62:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 800ad66:	f1bb 0f00 	cmp.w	fp, #0
 800ad6a:	46d8      	mov	r8, fp
 800ad6c:	db33      	blt.n	800add6 <_dtoa_r+0x96>
 800ad6e:	2300      	movs	r3, #0
 800ad70:	6023      	str	r3, [r4, #0]
 800ad72:	4ba5      	ldr	r3, [pc, #660]	; (800b008 <_dtoa_r+0x2c8>)
 800ad74:	461a      	mov	r2, r3
 800ad76:	ea08 0303 	and.w	r3, r8, r3
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d014      	beq.n	800ada8 <_dtoa_r+0x68>
 800ad7e:	4650      	mov	r0, sl
 800ad80:	4659      	mov	r1, fp
 800ad82:	2200      	movs	r2, #0
 800ad84:	2300      	movs	r3, #0
 800ad86:	f7f6 f9db 	bl	8001140 <__aeabi_dcmpeq>
 800ad8a:	4605      	mov	r5, r0
 800ad8c:	b348      	cbz	r0, 800ade2 <_dtoa_r+0xa2>
 800ad8e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ad90:	2301      	movs	r3, #1
 800ad92:	6013      	str	r3, [r2, #0]
 800ad94:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	f000 80c5 	beq.w	800af26 <_dtoa_r+0x1e6>
 800ad9c:	489b      	ldr	r0, [pc, #620]	; (800b00c <_dtoa_r+0x2cc>)
 800ad9e:	6018      	str	r0, [r3, #0]
 800ada0:	3801      	subs	r0, #1
 800ada2:	b017      	add	sp, #92	; 0x5c
 800ada4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ada8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800adaa:	f242 730f 	movw	r3, #9999	; 0x270f
 800adae:	6013      	str	r3, [r2, #0]
 800adb0:	f1ba 0f00 	cmp.w	sl, #0
 800adb4:	f000 80a2 	beq.w	800aefc <_dtoa_r+0x1bc>
 800adb8:	4895      	ldr	r0, [pc, #596]	; (800b010 <_dtoa_r+0x2d0>)
 800adba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d0f0      	beq.n	800ada2 <_dtoa_r+0x62>
 800adc0:	78c3      	ldrb	r3, [r0, #3]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	f000 80b1 	beq.w	800af2a <_dtoa_r+0x1ea>
 800adc8:	f100 0308 	add.w	r3, r0, #8
 800adcc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800adce:	6013      	str	r3, [r2, #0]
 800add0:	b017      	add	sp, #92	; 0x5c
 800add2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800add6:	2301      	movs	r3, #1
 800add8:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
 800addc:	6023      	str	r3, [r4, #0]
 800adde:	46c3      	mov	fp, r8
 800ade0:	e7c7      	b.n	800ad72 <_dtoa_r+0x32>
 800ade2:	aa14      	add	r2, sp, #80	; 0x50
 800ade4:	ab15      	add	r3, sp, #84	; 0x54
 800ade6:	9201      	str	r2, [sp, #4]
 800ade8:	9300      	str	r3, [sp, #0]
 800adea:	4652      	mov	r2, sl
 800adec:	465b      	mov	r3, fp
 800adee:	4648      	mov	r0, r9
 800adf0:	f002 f94a 	bl	800d088 <__d2b>
 800adf4:	ea5f 5418 	movs.w	r4, r8, lsr #20
 800adf8:	9008      	str	r0, [sp, #32]
 800adfa:	f040 8088 	bne.w	800af0e <_dtoa_r+0x1ce>
 800adfe:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800ae00:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800ae02:	442c      	add	r4, r5
 800ae04:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800ae08:	2b20      	cmp	r3, #32
 800ae0a:	f340 8291 	ble.w	800b330 <_dtoa_r+0x5f0>
 800ae0e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800ae12:	f204 4012 	addw	r0, r4, #1042	; 0x412
 800ae16:	fa08 f803 	lsl.w	r8, r8, r3
 800ae1a:	fa2a f000 	lsr.w	r0, sl, r0
 800ae1e:	ea40 0008 	orr.w	r0, r0, r8
 800ae22:	f7f5 feaf 	bl	8000b84 <__aeabi_ui2d>
 800ae26:	2301      	movs	r3, #1
 800ae28:	3c01      	subs	r4, #1
 800ae2a:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800ae2e:	9310      	str	r3, [sp, #64]	; 0x40
 800ae30:	2200      	movs	r2, #0
 800ae32:	4b78      	ldr	r3, [pc, #480]	; (800b014 <_dtoa_r+0x2d4>)
 800ae34:	f7f5 fd68 	bl	8000908 <__aeabi_dsub>
 800ae38:	a36d      	add	r3, pc, #436	; (adr r3, 800aff0 <_dtoa_r+0x2b0>)
 800ae3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae3e:	f7f5 ff17 	bl	8000c70 <__aeabi_dmul>
 800ae42:	a36d      	add	r3, pc, #436	; (adr r3, 800aff8 <_dtoa_r+0x2b8>)
 800ae44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae48:	f7f5 fd60 	bl	800090c <__adddf3>
 800ae4c:	4606      	mov	r6, r0
 800ae4e:	4620      	mov	r0, r4
 800ae50:	460f      	mov	r7, r1
 800ae52:	f7f5 fea7 	bl	8000ba4 <__aeabi_i2d>
 800ae56:	a36a      	add	r3, pc, #424	; (adr r3, 800b000 <_dtoa_r+0x2c0>)
 800ae58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae5c:	f7f5 ff08 	bl	8000c70 <__aeabi_dmul>
 800ae60:	4602      	mov	r2, r0
 800ae62:	460b      	mov	r3, r1
 800ae64:	4630      	mov	r0, r6
 800ae66:	4639      	mov	r1, r7
 800ae68:	f7f5 fd50 	bl	800090c <__adddf3>
 800ae6c:	4606      	mov	r6, r0
 800ae6e:	460f      	mov	r7, r1
 800ae70:	f7f6 f9ae 	bl	80011d0 <__aeabi_d2iz>
 800ae74:	2200      	movs	r2, #0
 800ae76:	9004      	str	r0, [sp, #16]
 800ae78:	2300      	movs	r3, #0
 800ae7a:	4630      	mov	r0, r6
 800ae7c:	4639      	mov	r1, r7
 800ae7e:	f7f6 f969 	bl	8001154 <__aeabi_dcmplt>
 800ae82:	2800      	cmp	r0, #0
 800ae84:	f040 8230 	bne.w	800b2e8 <_dtoa_r+0x5a8>
 800ae88:	9e04      	ldr	r6, [sp, #16]
 800ae8a:	2e16      	cmp	r6, #22
 800ae8c:	f200 8229 	bhi.w	800b2e2 <_dtoa_r+0x5a2>
 800ae90:	4b61      	ldr	r3, [pc, #388]	; (800b018 <_dtoa_r+0x2d8>)
 800ae92:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ae96:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ae9a:	4652      	mov	r2, sl
 800ae9c:	465b      	mov	r3, fp
 800ae9e:	f7f6 f977 	bl	8001190 <__aeabi_dcmpgt>
 800aea2:	2800      	cmp	r0, #0
 800aea4:	f000 8249 	beq.w	800b33a <_dtoa_r+0x5fa>
 800aea8:	1e73      	subs	r3, r6, #1
 800aeaa:	9304      	str	r3, [sp, #16]
 800aeac:	2300      	movs	r3, #0
 800aeae:	930c      	str	r3, [sp, #48]	; 0x30
 800aeb0:	1b2c      	subs	r4, r5, r4
 800aeb2:	1e63      	subs	r3, r4, #1
 800aeb4:	9302      	str	r3, [sp, #8]
 800aeb6:	f100 8232 	bmi.w	800b31e <_dtoa_r+0x5de>
 800aeba:	2300      	movs	r3, #0
 800aebc:	9305      	str	r3, [sp, #20]
 800aebe:	9b04      	ldr	r3, [sp, #16]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	f2c0 8223 	blt.w	800b30c <_dtoa_r+0x5cc>
 800aec6:	9a02      	ldr	r2, [sp, #8]
 800aec8:	930b      	str	r3, [sp, #44]	; 0x2c
 800aeca:	4611      	mov	r1, r2
 800aecc:	4419      	add	r1, r3
 800aece:	2300      	movs	r3, #0
 800aed0:	9102      	str	r1, [sp, #8]
 800aed2:	930a      	str	r3, [sp, #40]	; 0x28
 800aed4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800aed6:	2b09      	cmp	r3, #9
 800aed8:	d829      	bhi.n	800af2e <_dtoa_r+0x1ee>
 800aeda:	2b05      	cmp	r3, #5
 800aedc:	f340 8658 	ble.w	800bb90 <_dtoa_r+0xe50>
 800aee0:	3b04      	subs	r3, #4
 800aee2:	9320      	str	r3, [sp, #128]	; 0x80
 800aee4:	2500      	movs	r5, #0
 800aee6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800aee8:	3b02      	subs	r3, #2
 800aeea:	2b03      	cmp	r3, #3
 800aeec:	f200 8635 	bhi.w	800bb5a <_dtoa_r+0xe1a>
 800aef0:	e8df f013 	tbh	[pc, r3, lsl #1]
 800aef4:	0228032c 	.word	0x0228032c
 800aef8:	04590337 	.word	0x04590337
 800aefc:	4b44      	ldr	r3, [pc, #272]	; (800b010 <_dtoa_r+0x2d0>)
 800aefe:	4a47      	ldr	r2, [pc, #284]	; (800b01c <_dtoa_r+0x2dc>)
 800af00:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800af04:	2800      	cmp	r0, #0
 800af06:	bf14      	ite	ne
 800af08:	4618      	movne	r0, r3
 800af0a:	4610      	moveq	r0, r2
 800af0c:	e755      	b.n	800adba <_dtoa_r+0x7a>
 800af0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800af12:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800af16:	9510      	str	r5, [sp, #64]	; 0x40
 800af18:	4650      	mov	r0, sl
 800af1a:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800af1e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800af22:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800af24:	e784      	b.n	800ae30 <_dtoa_r+0xf0>
 800af26:	483e      	ldr	r0, [pc, #248]	; (800b020 <_dtoa_r+0x2e0>)
 800af28:	e73b      	b.n	800ada2 <_dtoa_r+0x62>
 800af2a:	1cc3      	adds	r3, r0, #3
 800af2c:	e74e      	b.n	800adcc <_dtoa_r+0x8c>
 800af2e:	2100      	movs	r1, #0
 800af30:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800af34:	4648      	mov	r0, r9
 800af36:	9120      	str	r1, [sp, #128]	; 0x80
 800af38:	f001 fdf4 	bl	800cb24 <_Balloc>
 800af3c:	f04f 33ff 	mov.w	r3, #4294967295
 800af40:	9306      	str	r3, [sp, #24]
 800af42:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800af44:	930d      	str	r3, [sp, #52]	; 0x34
 800af46:	2301      	movs	r3, #1
 800af48:	9007      	str	r0, [sp, #28]
 800af4a:	9221      	str	r2, [sp, #132]	; 0x84
 800af4c:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800af50:	9309      	str	r3, [sp, #36]	; 0x24
 800af52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af54:	2b00      	cmp	r3, #0
 800af56:	f2c0 80d1 	blt.w	800b0fc <_dtoa_r+0x3bc>
 800af5a:	9a04      	ldr	r2, [sp, #16]
 800af5c:	2a0e      	cmp	r2, #14
 800af5e:	f300 80cd 	bgt.w	800b0fc <_dtoa_r+0x3bc>
 800af62:	4b2d      	ldr	r3, [pc, #180]	; (800b018 <_dtoa_r+0x2d8>)
 800af64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af68:	e9d3 3400 	ldrd	r3, r4, [r3]
 800af6c:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800af70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af72:	2b00      	cmp	r3, #0
 800af74:	f2c0 8300 	blt.w	800b578 <_dtoa_r+0x838>
 800af78:	4656      	mov	r6, sl
 800af7a:	465f      	mov	r7, fp
 800af7c:	4650      	mov	r0, sl
 800af7e:	4659      	mov	r1, fp
 800af80:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 800af84:	4652      	mov	r2, sl
 800af86:	465b      	mov	r3, fp
 800af88:	f7f5 ff9c 	bl	8000ec4 <__aeabi_ddiv>
 800af8c:	f7f6 f920 	bl	80011d0 <__aeabi_d2iz>
 800af90:	4604      	mov	r4, r0
 800af92:	f7f5 fe07 	bl	8000ba4 <__aeabi_i2d>
 800af96:	4652      	mov	r2, sl
 800af98:	465b      	mov	r3, fp
 800af9a:	f7f5 fe69 	bl	8000c70 <__aeabi_dmul>
 800af9e:	460b      	mov	r3, r1
 800afa0:	4602      	mov	r2, r0
 800afa2:	4639      	mov	r1, r7
 800afa4:	4630      	mov	r0, r6
 800afa6:	f7f5 fcaf 	bl	8000908 <__aeabi_dsub>
 800afaa:	9d07      	ldr	r5, [sp, #28]
 800afac:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800afb0:	702b      	strb	r3, [r5, #0]
 800afb2:	9b06      	ldr	r3, [sp, #24]
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	4606      	mov	r6, r0
 800afb8:	460f      	mov	r7, r1
 800afba:	f105 0501 	add.w	r5, r5, #1
 800afbe:	d062      	beq.n	800b086 <_dtoa_r+0x346>
 800afc0:	2200      	movs	r2, #0
 800afc2:	4b18      	ldr	r3, [pc, #96]	; (800b024 <_dtoa_r+0x2e4>)
 800afc4:	f7f5 fe54 	bl	8000c70 <__aeabi_dmul>
 800afc8:	2200      	movs	r2, #0
 800afca:	2300      	movs	r3, #0
 800afcc:	4606      	mov	r6, r0
 800afce:	460f      	mov	r7, r1
 800afd0:	f7f6 f8b6 	bl	8001140 <__aeabi_dcmpeq>
 800afd4:	2800      	cmp	r0, #0
 800afd6:	d17e      	bne.n	800b0d6 <_dtoa_r+0x396>
 800afd8:	f8cd 9014 	str.w	r9, [sp, #20]
 800afdc:	f8dd a018 	ldr.w	sl, [sp, #24]
 800afe0:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800afe4:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800afe8:	e029      	b.n	800b03e <_dtoa_r+0x2fe>
 800afea:	bf00      	nop
 800afec:	f3af 8000 	nop.w
 800aff0:	636f4361 	.word	0x636f4361
 800aff4:	3fd287a7 	.word	0x3fd287a7
 800aff8:	8b60c8b3 	.word	0x8b60c8b3
 800affc:	3fc68a28 	.word	0x3fc68a28
 800b000:	509f79fb 	.word	0x509f79fb
 800b004:	3fd34413 	.word	0x3fd34413
 800b008:	7ff00000 	.word	0x7ff00000
 800b00c:	0800e145 	.word	0x0800e145
 800b010:	0800e184 	.word	0x0800e184
 800b014:	3ff80000 	.word	0x3ff80000
 800b018:	0800e188 	.word	0x0800e188
 800b01c:	0800e178 	.word	0x0800e178
 800b020:	0800e144 	.word	0x0800e144
 800b024:	40240000 	.word	0x40240000
 800b028:	f7f5 fe22 	bl	8000c70 <__aeabi_dmul>
 800b02c:	2200      	movs	r2, #0
 800b02e:	2300      	movs	r3, #0
 800b030:	4606      	mov	r6, r0
 800b032:	460f      	mov	r7, r1
 800b034:	f7f6 f884 	bl	8001140 <__aeabi_dcmpeq>
 800b038:	2800      	cmp	r0, #0
 800b03a:	f040 83b7 	bne.w	800b7ac <_dtoa_r+0xa6c>
 800b03e:	4642      	mov	r2, r8
 800b040:	464b      	mov	r3, r9
 800b042:	4630      	mov	r0, r6
 800b044:	4639      	mov	r1, r7
 800b046:	f7f5 ff3d 	bl	8000ec4 <__aeabi_ddiv>
 800b04a:	f7f6 f8c1 	bl	80011d0 <__aeabi_d2iz>
 800b04e:	4604      	mov	r4, r0
 800b050:	f7f5 fda8 	bl	8000ba4 <__aeabi_i2d>
 800b054:	4642      	mov	r2, r8
 800b056:	464b      	mov	r3, r9
 800b058:	f7f5 fe0a 	bl	8000c70 <__aeabi_dmul>
 800b05c:	4602      	mov	r2, r0
 800b05e:	460b      	mov	r3, r1
 800b060:	4630      	mov	r0, r6
 800b062:	4639      	mov	r1, r7
 800b064:	f7f5 fc50 	bl	8000908 <__aeabi_dsub>
 800b068:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800b06c:	f805 eb01 	strb.w	lr, [r5], #1
 800b070:	ebcb 0e05 	rsb	lr, fp, r5
 800b074:	45d6      	cmp	lr, sl
 800b076:	4606      	mov	r6, r0
 800b078:	460f      	mov	r7, r1
 800b07a:	f04f 0200 	mov.w	r2, #0
 800b07e:	4bb0      	ldr	r3, [pc, #704]	; (800b340 <_dtoa_r+0x600>)
 800b080:	d1d2      	bne.n	800b028 <_dtoa_r+0x2e8>
 800b082:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800b086:	4632      	mov	r2, r6
 800b088:	463b      	mov	r3, r7
 800b08a:	4630      	mov	r0, r6
 800b08c:	4639      	mov	r1, r7
 800b08e:	f7f5 fc3d 	bl	800090c <__adddf3>
 800b092:	4606      	mov	r6, r0
 800b094:	460f      	mov	r7, r1
 800b096:	4602      	mov	r2, r0
 800b098:	460b      	mov	r3, r1
 800b09a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b09e:	f7f6 f859 	bl	8001154 <__aeabi_dcmplt>
 800b0a2:	b940      	cbnz	r0, 800b0b6 <_dtoa_r+0x376>
 800b0a4:	4632      	mov	r2, r6
 800b0a6:	463b      	mov	r3, r7
 800b0a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0ac:	f7f6 f848 	bl	8001140 <__aeabi_dcmpeq>
 800b0b0:	b188      	cbz	r0, 800b0d6 <_dtoa_r+0x396>
 800b0b2:	07e3      	lsls	r3, r4, #31
 800b0b4:	d50f      	bpl.n	800b0d6 <_dtoa_r+0x396>
 800b0b6:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 800b0ba:	9a07      	ldr	r2, [sp, #28]
 800b0bc:	1e6b      	subs	r3, r5, #1
 800b0be:	e004      	b.n	800b0ca <_dtoa_r+0x38a>
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	f000 842c 	beq.w	800b91e <_dtoa_r+0xbde>
 800b0c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b0ca:	2c39      	cmp	r4, #57	; 0x39
 800b0cc:	f103 0501 	add.w	r5, r3, #1
 800b0d0:	d0f6      	beq.n	800b0c0 <_dtoa_r+0x380>
 800b0d2:	3401      	adds	r4, #1
 800b0d4:	701c      	strb	r4, [r3, #0]
 800b0d6:	9908      	ldr	r1, [sp, #32]
 800b0d8:	4648      	mov	r0, r9
 800b0da:	f001 fd49 	bl	800cb70 <_Bfree>
 800b0de:	2200      	movs	r2, #0
 800b0e0:	9b04      	ldr	r3, [sp, #16]
 800b0e2:	702a      	strb	r2, [r5, #0]
 800b0e4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b0e6:	3301      	adds	r3, #1
 800b0e8:	6013      	str	r3, [r2, #0]
 800b0ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	f000 83a7 	beq.w	800b840 <_dtoa_r+0xb00>
 800b0f2:	9807      	ldr	r0, [sp, #28]
 800b0f4:	601d      	str	r5, [r3, #0]
 800b0f6:	b017      	add	sp, #92	; 0x5c
 800b0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0fe:	2a00      	cmp	r2, #0
 800b100:	f000 8112 	beq.w	800b328 <_dtoa_r+0x5e8>
 800b104:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b106:	2a01      	cmp	r2, #1
 800b108:	f340 8258 	ble.w	800b5bc <_dtoa_r+0x87c>
 800b10c:	9b06      	ldr	r3, [sp, #24]
 800b10e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b110:	1e5f      	subs	r7, r3, #1
 800b112:	42ba      	cmp	r2, r7
 800b114:	f2c0 8397 	blt.w	800b846 <_dtoa_r+0xb06>
 800b118:	1bd7      	subs	r7, r2, r7
 800b11a:	9b06      	ldr	r3, [sp, #24]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	f2c0 848a 	blt.w	800ba36 <_dtoa_r+0xcf6>
 800b122:	9d05      	ldr	r5, [sp, #20]
 800b124:	9b06      	ldr	r3, [sp, #24]
 800b126:	9a05      	ldr	r2, [sp, #20]
 800b128:	441a      	add	r2, r3
 800b12a:	9205      	str	r2, [sp, #20]
 800b12c:	9a02      	ldr	r2, [sp, #8]
 800b12e:	2101      	movs	r1, #1
 800b130:	441a      	add	r2, r3
 800b132:	4648      	mov	r0, r9
 800b134:	9202      	str	r2, [sp, #8]
 800b136:	f001 fdb3 	bl	800cca0 <__i2b>
 800b13a:	4606      	mov	r6, r0
 800b13c:	b165      	cbz	r5, 800b158 <_dtoa_r+0x418>
 800b13e:	9902      	ldr	r1, [sp, #8]
 800b140:	2900      	cmp	r1, #0
 800b142:	460b      	mov	r3, r1
 800b144:	dd08      	ble.n	800b158 <_dtoa_r+0x418>
 800b146:	42a9      	cmp	r1, r5
 800b148:	9a05      	ldr	r2, [sp, #20]
 800b14a:	bfa8      	it	ge
 800b14c:	462b      	movge	r3, r5
 800b14e:	1ad2      	subs	r2, r2, r3
 800b150:	1aed      	subs	r5, r5, r3
 800b152:	1acb      	subs	r3, r1, r3
 800b154:	9205      	str	r2, [sp, #20]
 800b156:	9302      	str	r3, [sp, #8]
 800b158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	f340 82fc 	ble.w	800b758 <_dtoa_r+0xa18>
 800b160:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b162:	2a00      	cmp	r2, #0
 800b164:	f000 8201 	beq.w	800b56a <_dtoa_r+0x82a>
 800b168:	2f00      	cmp	r7, #0
 800b16a:	f000 81fe 	beq.w	800b56a <_dtoa_r+0x82a>
 800b16e:	4631      	mov	r1, r6
 800b170:	463a      	mov	r2, r7
 800b172:	4648      	mov	r0, r9
 800b174:	f001 fe36 	bl	800cde4 <__pow5mult>
 800b178:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b17c:	4601      	mov	r1, r0
 800b17e:	4642      	mov	r2, r8
 800b180:	4606      	mov	r6, r0
 800b182:	4648      	mov	r0, r9
 800b184:	f001 fd96 	bl	800ccb4 <__multiply>
 800b188:	4641      	mov	r1, r8
 800b18a:	4604      	mov	r4, r0
 800b18c:	4648      	mov	r0, r9
 800b18e:	f001 fcef 	bl	800cb70 <_Bfree>
 800b192:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b194:	1bdb      	subs	r3, r3, r7
 800b196:	930a      	str	r3, [sp, #40]	; 0x28
 800b198:	f040 81e6 	bne.w	800b568 <_dtoa_r+0x828>
 800b19c:	2101      	movs	r1, #1
 800b19e:	4648      	mov	r0, r9
 800b1a0:	f001 fd7e 	bl	800cca0 <__i2b>
 800b1a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1a6:	4680      	mov	r8, r0
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	f000 8219 	beq.w	800b5e0 <_dtoa_r+0x8a0>
 800b1ae:	4601      	mov	r1, r0
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	4648      	mov	r0, r9
 800b1b4:	f001 fe16 	bl	800cde4 <__pow5mult>
 800b1b8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	4680      	mov	r8, r0
 800b1be:	f340 82f8 	ble.w	800b7b2 <_dtoa_r+0xa72>
 800b1c2:	2700      	movs	r7, #0
 800b1c4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b1c8:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800b1cc:	6918      	ldr	r0, [r3, #16]
 800b1ce:	f001 fd19 	bl	800cc04 <__hi0bits>
 800b1d2:	f1c0 0020 	rsb	r0, r0, #32
 800b1d6:	9a02      	ldr	r2, [sp, #8]
 800b1d8:	4410      	add	r0, r2
 800b1da:	f010 001f 	ands.w	r0, r0, #31
 800b1de:	f000 81f6 	beq.w	800b5ce <_dtoa_r+0x88e>
 800b1e2:	f1c0 0320 	rsb	r3, r0, #32
 800b1e6:	2b04      	cmp	r3, #4
 800b1e8:	f340 84ca 	ble.w	800bb80 <_dtoa_r+0xe40>
 800b1ec:	9b05      	ldr	r3, [sp, #20]
 800b1ee:	f1c0 001c 	rsb	r0, r0, #28
 800b1f2:	4403      	add	r3, r0
 800b1f4:	9305      	str	r3, [sp, #20]
 800b1f6:	4613      	mov	r3, r2
 800b1f8:	4403      	add	r3, r0
 800b1fa:	4405      	add	r5, r0
 800b1fc:	9302      	str	r3, [sp, #8]
 800b1fe:	9b05      	ldr	r3, [sp, #20]
 800b200:	2b00      	cmp	r3, #0
 800b202:	dd05      	ble.n	800b210 <_dtoa_r+0x4d0>
 800b204:	4621      	mov	r1, r4
 800b206:	461a      	mov	r2, r3
 800b208:	4648      	mov	r0, r9
 800b20a:	f001 fe3b 	bl	800ce84 <__lshift>
 800b20e:	4604      	mov	r4, r0
 800b210:	9b02      	ldr	r3, [sp, #8]
 800b212:	2b00      	cmp	r3, #0
 800b214:	dd05      	ble.n	800b222 <_dtoa_r+0x4e2>
 800b216:	4641      	mov	r1, r8
 800b218:	461a      	mov	r2, r3
 800b21a:	4648      	mov	r0, r9
 800b21c:	f001 fe32 	bl	800ce84 <__lshift>
 800b220:	4680      	mov	r8, r0
 800b222:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b224:	2b00      	cmp	r3, #0
 800b226:	f040 827c 	bne.w	800b722 <_dtoa_r+0x9e2>
 800b22a:	9b06      	ldr	r3, [sp, #24]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	f340 8295 	ble.w	800b75c <_dtoa_r+0xa1c>
 800b232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b234:	2b00      	cmp	r3, #0
 800b236:	f040 81f5 	bne.w	800b624 <_dtoa_r+0x8e4>
 800b23a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800b23e:	9f06      	ldr	r7, [sp, #24]
 800b240:	465d      	mov	r5, fp
 800b242:	e002      	b.n	800b24a <_dtoa_r+0x50a>
 800b244:	f001 fc9e 	bl	800cb84 <__multadd>
 800b248:	4604      	mov	r4, r0
 800b24a:	4641      	mov	r1, r8
 800b24c:	4620      	mov	r0, r4
 800b24e:	f7ff fce3 	bl	800ac18 <quorem>
 800b252:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b256:	f805 ab01 	strb.w	sl, [r5], #1
 800b25a:	ebcb 0305 	rsb	r3, fp, r5
 800b25e:	42bb      	cmp	r3, r7
 800b260:	f04f 020a 	mov.w	r2, #10
 800b264:	f04f 0300 	mov.w	r3, #0
 800b268:	4621      	mov	r1, r4
 800b26a:	4648      	mov	r0, r9
 800b26c:	dbea      	blt.n	800b244 <_dtoa_r+0x504>
 800b26e:	9b07      	ldr	r3, [sp, #28]
 800b270:	9a06      	ldr	r2, [sp, #24]
 800b272:	2a01      	cmp	r2, #1
 800b274:	bfac      	ite	ge
 800b276:	189b      	addge	r3, r3, r2
 800b278:	3301      	addlt	r3, #1
 800b27a:	461d      	mov	r5, r3
 800b27c:	f04f 0b00 	mov.w	fp, #0
 800b280:	4621      	mov	r1, r4
 800b282:	2201      	movs	r2, #1
 800b284:	4648      	mov	r0, r9
 800b286:	f001 fdfd 	bl	800ce84 <__lshift>
 800b28a:	4641      	mov	r1, r8
 800b28c:	9008      	str	r0, [sp, #32]
 800b28e:	f001 fe51 	bl	800cf34 <__mcmp>
 800b292:	2800      	cmp	r0, #0
 800b294:	f340 830d 	ble.w	800b8b2 <_dtoa_r+0xb72>
 800b298:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b29c:	9907      	ldr	r1, [sp, #28]
 800b29e:	1e6b      	subs	r3, r5, #1
 800b2a0:	e004      	b.n	800b2ac <_dtoa_r+0x56c>
 800b2a2:	428b      	cmp	r3, r1
 800b2a4:	f000 8278 	beq.w	800b798 <_dtoa_r+0xa58>
 800b2a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b2ac:	2a39      	cmp	r2, #57	; 0x39
 800b2ae:	f103 0501 	add.w	r5, r3, #1
 800b2b2:	d0f6      	beq.n	800b2a2 <_dtoa_r+0x562>
 800b2b4:	3201      	adds	r2, #1
 800b2b6:	701a      	strb	r2, [r3, #0]
 800b2b8:	4641      	mov	r1, r8
 800b2ba:	4648      	mov	r0, r9
 800b2bc:	f001 fc58 	bl	800cb70 <_Bfree>
 800b2c0:	2e00      	cmp	r6, #0
 800b2c2:	f43f af08 	beq.w	800b0d6 <_dtoa_r+0x396>
 800b2c6:	f1bb 0f00 	cmp.w	fp, #0
 800b2ca:	d005      	beq.n	800b2d8 <_dtoa_r+0x598>
 800b2cc:	45b3      	cmp	fp, r6
 800b2ce:	d003      	beq.n	800b2d8 <_dtoa_r+0x598>
 800b2d0:	4659      	mov	r1, fp
 800b2d2:	4648      	mov	r0, r9
 800b2d4:	f001 fc4c 	bl	800cb70 <_Bfree>
 800b2d8:	4631      	mov	r1, r6
 800b2da:	4648      	mov	r0, r9
 800b2dc:	f001 fc48 	bl	800cb70 <_Bfree>
 800b2e0:	e6f9      	b.n	800b0d6 <_dtoa_r+0x396>
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	930c      	str	r3, [sp, #48]	; 0x30
 800b2e6:	e5e3      	b.n	800aeb0 <_dtoa_r+0x170>
 800b2e8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b2ec:	4640      	mov	r0, r8
 800b2ee:	f7f5 fc59 	bl	8000ba4 <__aeabi_i2d>
 800b2f2:	4602      	mov	r2, r0
 800b2f4:	460b      	mov	r3, r1
 800b2f6:	4630      	mov	r0, r6
 800b2f8:	4639      	mov	r1, r7
 800b2fa:	f7f5 ff21 	bl	8001140 <__aeabi_dcmpeq>
 800b2fe:	2800      	cmp	r0, #0
 800b300:	f47f adc2 	bne.w	800ae88 <_dtoa_r+0x148>
 800b304:	f108 33ff 	add.w	r3, r8, #4294967295
 800b308:	9304      	str	r3, [sp, #16]
 800b30a:	e5bd      	b.n	800ae88 <_dtoa_r+0x148>
 800b30c:	9a05      	ldr	r2, [sp, #20]
 800b30e:	9b04      	ldr	r3, [sp, #16]
 800b310:	1ad2      	subs	r2, r2, r3
 800b312:	425b      	negs	r3, r3
 800b314:	930a      	str	r3, [sp, #40]	; 0x28
 800b316:	2300      	movs	r3, #0
 800b318:	9205      	str	r2, [sp, #20]
 800b31a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b31c:	e5da      	b.n	800aed4 <_dtoa_r+0x194>
 800b31e:	425b      	negs	r3, r3
 800b320:	9305      	str	r3, [sp, #20]
 800b322:	2300      	movs	r3, #0
 800b324:	9302      	str	r3, [sp, #8]
 800b326:	e5ca      	b.n	800aebe <_dtoa_r+0x17e>
 800b328:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800b32a:	9d05      	ldr	r5, [sp, #20]
 800b32c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b32e:	e705      	b.n	800b13c <_dtoa_r+0x3fc>
 800b330:	f1c3 0820 	rsb	r8, r3, #32
 800b334:	fa0a f008 	lsl.w	r0, sl, r8
 800b338:	e573      	b.n	800ae22 <_dtoa_r+0xe2>
 800b33a:	900c      	str	r0, [sp, #48]	; 0x30
 800b33c:	e5b8      	b.n	800aeb0 <_dtoa_r+0x170>
 800b33e:	bf00      	nop
 800b340:	40240000 	.word	0x40240000
 800b344:	2300      	movs	r3, #0
 800b346:	9309      	str	r3, [sp, #36]	; 0x24
 800b348:	9b04      	ldr	r3, [sp, #16]
 800b34a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b34c:	4413      	add	r3, r2
 800b34e:	930d      	str	r3, [sp, #52]	; 0x34
 800b350:	3301      	adds	r3, #1
 800b352:	2b00      	cmp	r3, #0
 800b354:	9306      	str	r3, [sp, #24]
 800b356:	f340 8283 	ble.w	800b860 <_dtoa_r+0xb20>
 800b35a:	9c06      	ldr	r4, [sp, #24]
 800b35c:	4626      	mov	r6, r4
 800b35e:	2100      	movs	r1, #0
 800b360:	2e17      	cmp	r6, #23
 800b362:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800b366:	d90b      	bls.n	800b380 <_dtoa_r+0x640>
 800b368:	2201      	movs	r2, #1
 800b36a:	2304      	movs	r3, #4
 800b36c:	005b      	lsls	r3, r3, #1
 800b36e:	f103 0014 	add.w	r0, r3, #20
 800b372:	42b0      	cmp	r0, r6
 800b374:	4611      	mov	r1, r2
 800b376:	f102 0201 	add.w	r2, r2, #1
 800b37a:	d9f7      	bls.n	800b36c <_dtoa_r+0x62c>
 800b37c:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800b380:	4648      	mov	r0, r9
 800b382:	f001 fbcf 	bl	800cb24 <_Balloc>
 800b386:	2c0e      	cmp	r4, #14
 800b388:	9007      	str	r0, [sp, #28]
 800b38a:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800b38e:	f63f ade0 	bhi.w	800af52 <_dtoa_r+0x212>
 800b392:	2d00      	cmp	r5, #0
 800b394:	f43f addd 	beq.w	800af52 <_dtoa_r+0x212>
 800b398:	9904      	ldr	r1, [sp, #16]
 800b39a:	4657      	mov	r7, sl
 800b39c:	46d8      	mov	r8, fp
 800b39e:	2900      	cmp	r1, #0
 800b3a0:	e9cd 780e 	strd	r7, r8, [sp, #56]	; 0x38
 800b3a4:	f340 8292 	ble.w	800b8cc <_dtoa_r+0xb8c>
 800b3a8:	4b91      	ldr	r3, [pc, #580]	; (800b5f0 <_dtoa_r+0x8b0>)
 800b3aa:	f001 020f 	and.w	r2, r1, #15
 800b3ae:	110e      	asrs	r6, r1, #4
 800b3b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3b4:	06f0      	lsls	r0, r6, #27
 800b3b6:	e9d3 4500 	ldrd	r4, r5, [r3]
 800b3ba:	f140 824c 	bpl.w	800b856 <_dtoa_r+0xb16>
 800b3be:	4b8d      	ldr	r3, [pc, #564]	; (800b5f4 <_dtoa_r+0x8b4>)
 800b3c0:	4650      	mov	r0, sl
 800b3c2:	4659      	mov	r1, fp
 800b3c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b3c8:	f7f5 fd7c 	bl	8000ec4 <__aeabi_ddiv>
 800b3cc:	f006 060f 	and.w	r6, r6, #15
 800b3d0:	4682      	mov	sl, r0
 800b3d2:	468b      	mov	fp, r1
 800b3d4:	f04f 0803 	mov.w	r8, #3
 800b3d8:	b186      	cbz	r6, 800b3fc <_dtoa_r+0x6bc>
 800b3da:	4f86      	ldr	r7, [pc, #536]	; (800b5f4 <_dtoa_r+0x8b4>)
 800b3dc:	07f1      	lsls	r1, r6, #31
 800b3de:	d509      	bpl.n	800b3f4 <_dtoa_r+0x6b4>
 800b3e0:	4620      	mov	r0, r4
 800b3e2:	4629      	mov	r1, r5
 800b3e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3e8:	f7f5 fc42 	bl	8000c70 <__aeabi_dmul>
 800b3ec:	f108 0801 	add.w	r8, r8, #1
 800b3f0:	4604      	mov	r4, r0
 800b3f2:	460d      	mov	r5, r1
 800b3f4:	1076      	asrs	r6, r6, #1
 800b3f6:	f107 0708 	add.w	r7, r7, #8
 800b3fa:	d1ef      	bne.n	800b3dc <_dtoa_r+0x69c>
 800b3fc:	4622      	mov	r2, r4
 800b3fe:	462b      	mov	r3, r5
 800b400:	4650      	mov	r0, sl
 800b402:	4659      	mov	r1, fp
 800b404:	f7f5 fd5e 	bl	8000ec4 <__aeabi_ddiv>
 800b408:	4606      	mov	r6, r0
 800b40a:	460f      	mov	r7, r1
 800b40c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b40e:	b143      	cbz	r3, 800b422 <_dtoa_r+0x6e2>
 800b410:	2200      	movs	r2, #0
 800b412:	4b79      	ldr	r3, [pc, #484]	; (800b5f8 <_dtoa_r+0x8b8>)
 800b414:	4630      	mov	r0, r6
 800b416:	4639      	mov	r1, r7
 800b418:	f7f5 fe9c 	bl	8001154 <__aeabi_dcmplt>
 800b41c:	2800      	cmp	r0, #0
 800b41e:	f040 8320 	bne.w	800ba62 <_dtoa_r+0xd22>
 800b422:	4640      	mov	r0, r8
 800b424:	f7f5 fbbe 	bl	8000ba4 <__aeabi_i2d>
 800b428:	4632      	mov	r2, r6
 800b42a:	463b      	mov	r3, r7
 800b42c:	f7f5 fc20 	bl	8000c70 <__aeabi_dmul>
 800b430:	4b72      	ldr	r3, [pc, #456]	; (800b5fc <_dtoa_r+0x8bc>)
 800b432:	2200      	movs	r2, #0
 800b434:	f7f5 fa6a 	bl	800090c <__adddf3>
 800b438:	9b06      	ldr	r3, [sp, #24]
 800b43a:	4604      	mov	r4, r0
 800b43c:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800b440:	2b00      	cmp	r3, #0
 800b442:	f000 81df 	beq.w	800b804 <_dtoa_r+0xac4>
 800b446:	9b04      	ldr	r3, [sp, #16]
 800b448:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800b44c:	9311      	str	r3, [sp, #68]	; 0x44
 800b44e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b450:	2b00      	cmp	r3, #0
 800b452:	f000 8297 	beq.w	800b984 <_dtoa_r+0xc44>
 800b456:	4b66      	ldr	r3, [pc, #408]	; (800b5f0 <_dtoa_r+0x8b0>)
 800b458:	4969      	ldr	r1, [pc, #420]	; (800b600 <_dtoa_r+0x8c0>)
 800b45a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b45e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b462:	2000      	movs	r0, #0
 800b464:	f7f5 fd2e 	bl	8000ec4 <__aeabi_ddiv>
 800b468:	4622      	mov	r2, r4
 800b46a:	462b      	mov	r3, r5
 800b46c:	f7f5 fa4c 	bl	8000908 <__aeabi_dsub>
 800b470:	4682      	mov	sl, r0
 800b472:	468b      	mov	fp, r1
 800b474:	4630      	mov	r0, r6
 800b476:	4639      	mov	r1, r7
 800b478:	f7f5 feaa 	bl	80011d0 <__aeabi_d2iz>
 800b47c:	4604      	mov	r4, r0
 800b47e:	f7f5 fb91 	bl	8000ba4 <__aeabi_i2d>
 800b482:	4602      	mov	r2, r0
 800b484:	460b      	mov	r3, r1
 800b486:	4630      	mov	r0, r6
 800b488:	4639      	mov	r1, r7
 800b48a:	f7f5 fa3d 	bl	8000908 <__aeabi_dsub>
 800b48e:	3430      	adds	r4, #48	; 0x30
 800b490:	9d07      	ldr	r5, [sp, #28]
 800b492:	b2e4      	uxtb	r4, r4
 800b494:	4606      	mov	r6, r0
 800b496:	460f      	mov	r7, r1
 800b498:	702c      	strb	r4, [r5, #0]
 800b49a:	4602      	mov	r2, r0
 800b49c:	460b      	mov	r3, r1
 800b49e:	4650      	mov	r0, sl
 800b4a0:	4659      	mov	r1, fp
 800b4a2:	3501      	adds	r5, #1
 800b4a4:	f7f5 fe74 	bl	8001190 <__aeabi_dcmpgt>
 800b4a8:	2800      	cmp	r0, #0
 800b4aa:	d14c      	bne.n	800b546 <_dtoa_r+0x806>
 800b4ac:	4632      	mov	r2, r6
 800b4ae:	463b      	mov	r3, r7
 800b4b0:	2000      	movs	r0, #0
 800b4b2:	4951      	ldr	r1, [pc, #324]	; (800b5f8 <_dtoa_r+0x8b8>)
 800b4b4:	f7f5 fa28 	bl	8000908 <__aeabi_dsub>
 800b4b8:	4602      	mov	r2, r0
 800b4ba:	460b      	mov	r3, r1
 800b4bc:	4650      	mov	r0, sl
 800b4be:	4659      	mov	r1, fp
 800b4c0:	f7f5 fe66 	bl	8001190 <__aeabi_dcmpgt>
 800b4c4:	2800      	cmp	r0, #0
 800b4c6:	f040 830d 	bne.w	800bae4 <_dtoa_r+0xda4>
 800b4ca:	f1b8 0f01 	cmp.w	r8, #1
 800b4ce:	f340 81b3 	ble.w	800b838 <_dtoa_r+0xaf8>
 800b4d2:	9b07      	ldr	r3, [sp, #28]
 800b4d4:	4498      	add	r8, r3
 800b4d6:	e00d      	b.n	800b4f4 <_dtoa_r+0x7b4>
 800b4d8:	2000      	movs	r0, #0
 800b4da:	4947      	ldr	r1, [pc, #284]	; (800b5f8 <_dtoa_r+0x8b8>)
 800b4dc:	f7f5 fa14 	bl	8000908 <__aeabi_dsub>
 800b4e0:	4652      	mov	r2, sl
 800b4e2:	465b      	mov	r3, fp
 800b4e4:	f7f5 fe36 	bl	8001154 <__aeabi_dcmplt>
 800b4e8:	2800      	cmp	r0, #0
 800b4ea:	f040 82fb 	bne.w	800bae4 <_dtoa_r+0xda4>
 800b4ee:	4545      	cmp	r5, r8
 800b4f0:	f000 81a2 	beq.w	800b838 <_dtoa_r+0xaf8>
 800b4f4:	4650      	mov	r0, sl
 800b4f6:	4659      	mov	r1, fp
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	4b42      	ldr	r3, [pc, #264]	; (800b604 <_dtoa_r+0x8c4>)
 800b4fc:	f7f5 fbb8 	bl	8000c70 <__aeabi_dmul>
 800b500:	2200      	movs	r2, #0
 800b502:	4b40      	ldr	r3, [pc, #256]	; (800b604 <_dtoa_r+0x8c4>)
 800b504:	4682      	mov	sl, r0
 800b506:	468b      	mov	fp, r1
 800b508:	4630      	mov	r0, r6
 800b50a:	4639      	mov	r1, r7
 800b50c:	f7f5 fbb0 	bl	8000c70 <__aeabi_dmul>
 800b510:	460f      	mov	r7, r1
 800b512:	4606      	mov	r6, r0
 800b514:	f7f5 fe5c 	bl	80011d0 <__aeabi_d2iz>
 800b518:	4604      	mov	r4, r0
 800b51a:	f7f5 fb43 	bl	8000ba4 <__aeabi_i2d>
 800b51e:	4602      	mov	r2, r0
 800b520:	460b      	mov	r3, r1
 800b522:	4630      	mov	r0, r6
 800b524:	4639      	mov	r1, r7
 800b526:	f7f5 f9ef 	bl	8000908 <__aeabi_dsub>
 800b52a:	3430      	adds	r4, #48	; 0x30
 800b52c:	b2e4      	uxtb	r4, r4
 800b52e:	4652      	mov	r2, sl
 800b530:	465b      	mov	r3, fp
 800b532:	f805 4b01 	strb.w	r4, [r5], #1
 800b536:	4606      	mov	r6, r0
 800b538:	460f      	mov	r7, r1
 800b53a:	f7f5 fe0b 	bl	8001154 <__aeabi_dcmplt>
 800b53e:	4632      	mov	r2, r6
 800b540:	463b      	mov	r3, r7
 800b542:	2800      	cmp	r0, #0
 800b544:	d0c8      	beq.n	800b4d8 <_dtoa_r+0x798>
 800b546:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b548:	9304      	str	r3, [sp, #16]
 800b54a:	e5c4      	b.n	800b0d6 <_dtoa_r+0x396>
 800b54c:	2300      	movs	r3, #0
 800b54e:	9309      	str	r3, [sp, #36]	; 0x24
 800b550:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b552:	2b00      	cmp	r3, #0
 800b554:	f340 8189 	ble.w	800b86a <_dtoa_r+0xb2a>
 800b558:	461e      	mov	r6, r3
 800b55a:	461c      	mov	r4, r3
 800b55c:	930d      	str	r3, [sp, #52]	; 0x34
 800b55e:	9306      	str	r3, [sp, #24]
 800b560:	e6fd      	b.n	800b35e <_dtoa_r+0x61e>
 800b562:	2301      	movs	r3, #1
 800b564:	9309      	str	r3, [sp, #36]	; 0x24
 800b566:	e7f3      	b.n	800b550 <_dtoa_r+0x810>
 800b568:	9408      	str	r4, [sp, #32]
 800b56a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b56c:	9908      	ldr	r1, [sp, #32]
 800b56e:	4648      	mov	r0, r9
 800b570:	f001 fc38 	bl	800cde4 <__pow5mult>
 800b574:	4604      	mov	r4, r0
 800b576:	e611      	b.n	800b19c <_dtoa_r+0x45c>
 800b578:	9b06      	ldr	r3, [sp, #24]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	f73f acfc 	bgt.w	800af78 <_dtoa_r+0x238>
 800b580:	f040 82da 	bne.w	800bb38 <_dtoa_r+0xdf8>
 800b584:	2200      	movs	r2, #0
 800b586:	4b20      	ldr	r3, [pc, #128]	; (800b608 <_dtoa_r+0x8c8>)
 800b588:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b58c:	f7f5 fb70 	bl	8000c70 <__aeabi_dmul>
 800b590:	4652      	mov	r2, sl
 800b592:	465b      	mov	r3, fp
 800b594:	f7f5 fdf2 	bl	800117c <__aeabi_dcmpge>
 800b598:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800b59c:	4646      	mov	r6, r8
 800b59e:	2800      	cmp	r0, #0
 800b5a0:	f000 80f2 	beq.w	800b788 <_dtoa_r+0xa48>
 800b5a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b5a6:	9d07      	ldr	r5, [sp, #28]
 800b5a8:	43db      	mvns	r3, r3
 800b5aa:	9304      	str	r3, [sp, #16]
 800b5ac:	4641      	mov	r1, r8
 800b5ae:	4648      	mov	r0, r9
 800b5b0:	f001 fade 	bl	800cb70 <_Bfree>
 800b5b4:	2e00      	cmp	r6, #0
 800b5b6:	f43f ad8e 	beq.w	800b0d6 <_dtoa_r+0x396>
 800b5ba:	e68d      	b.n	800b2d8 <_dtoa_r+0x598>
 800b5bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b5be:	2a00      	cmp	r2, #0
 800b5c0:	f000 8241 	beq.w	800ba46 <_dtoa_r+0xd06>
 800b5c4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b5c8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800b5ca:	9d05      	ldr	r5, [sp, #20]
 800b5cc:	e5ab      	b.n	800b126 <_dtoa_r+0x3e6>
 800b5ce:	201c      	movs	r0, #28
 800b5d0:	9b05      	ldr	r3, [sp, #20]
 800b5d2:	4403      	add	r3, r0
 800b5d4:	9305      	str	r3, [sp, #20]
 800b5d6:	9b02      	ldr	r3, [sp, #8]
 800b5d8:	4403      	add	r3, r0
 800b5da:	4405      	add	r5, r0
 800b5dc:	9302      	str	r3, [sp, #8]
 800b5de:	e60e      	b.n	800b1fe <_dtoa_r+0x4be>
 800b5e0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b5e2:	2b01      	cmp	r3, #1
 800b5e4:	f340 8282 	ble.w	800baec <_dtoa_r+0xdac>
 800b5e8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800b5ea:	2001      	movs	r0, #1
 800b5ec:	e5f3      	b.n	800b1d6 <_dtoa_r+0x496>
 800b5ee:	bf00      	nop
 800b5f0:	0800e188 	.word	0x0800e188
 800b5f4:	0800e260 	.word	0x0800e260
 800b5f8:	3ff00000 	.word	0x3ff00000
 800b5fc:	401c0000 	.word	0x401c0000
 800b600:	3fe00000 	.word	0x3fe00000
 800b604:	40240000 	.word	0x40240000
 800b608:	40140000 	.word	0x40140000
 800b60c:	4631      	mov	r1, r6
 800b60e:	2300      	movs	r3, #0
 800b610:	220a      	movs	r2, #10
 800b612:	4648      	mov	r0, r9
 800b614:	f001 fab6 	bl	800cb84 <__multadd>
 800b618:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	4606      	mov	r6, r0
 800b61e:	f340 8297 	ble.w	800bb50 <_dtoa_r+0xe10>
 800b622:	9306      	str	r3, [sp, #24]
 800b624:	2d00      	cmp	r5, #0
 800b626:	dd05      	ble.n	800b634 <_dtoa_r+0x8f4>
 800b628:	4631      	mov	r1, r6
 800b62a:	462a      	mov	r2, r5
 800b62c:	4648      	mov	r0, r9
 800b62e:	f001 fc29 	bl	800ce84 <__lshift>
 800b632:	4606      	mov	r6, r0
 800b634:	2f00      	cmp	r7, #0
 800b636:	f040 817c 	bne.w	800b932 <_dtoa_r+0xbf2>
 800b63a:	9605      	str	r6, [sp, #20]
 800b63c:	9b06      	ldr	r3, [sp, #24]
 800b63e:	9a07      	ldr	r2, [sp, #28]
 800b640:	f8dd b014 	ldr.w	fp, [sp, #20]
 800b644:	3b01      	subs	r3, #1
 800b646:	18d3      	adds	r3, r2, r3
 800b648:	9308      	str	r3, [sp, #32]
 800b64a:	f00a 0301 	and.w	r3, sl, #1
 800b64e:	9309      	str	r3, [sp, #36]	; 0x24
 800b650:	4617      	mov	r7, r2
 800b652:	46c2      	mov	sl, r8
 800b654:	4651      	mov	r1, sl
 800b656:	4620      	mov	r0, r4
 800b658:	f7ff fade 	bl	800ac18 <quorem>
 800b65c:	4631      	mov	r1, r6
 800b65e:	4605      	mov	r5, r0
 800b660:	4620      	mov	r0, r4
 800b662:	f001 fc67 	bl	800cf34 <__mcmp>
 800b666:	465a      	mov	r2, fp
 800b668:	9002      	str	r0, [sp, #8]
 800b66a:	4651      	mov	r1, sl
 800b66c:	4648      	mov	r0, r9
 800b66e:	f001 fc81 	bl	800cf74 <__mdiff>
 800b672:	68c2      	ldr	r2, [r0, #12]
 800b674:	4680      	mov	r8, r0
 800b676:	f105 0330 	add.w	r3, r5, #48	; 0x30
 800b67a:	2a00      	cmp	r2, #0
 800b67c:	d149      	bne.n	800b712 <_dtoa_r+0x9d2>
 800b67e:	4601      	mov	r1, r0
 800b680:	4620      	mov	r0, r4
 800b682:	9306      	str	r3, [sp, #24]
 800b684:	f001 fc56 	bl	800cf34 <__mcmp>
 800b688:	4641      	mov	r1, r8
 800b68a:	9005      	str	r0, [sp, #20]
 800b68c:	4648      	mov	r0, r9
 800b68e:	f001 fa6f 	bl	800cb70 <_Bfree>
 800b692:	9a05      	ldr	r2, [sp, #20]
 800b694:	9b06      	ldr	r3, [sp, #24]
 800b696:	b92a      	cbnz	r2, 800b6a4 <_dtoa_r+0x964>
 800b698:	9920      	ldr	r1, [sp, #128]	; 0x80
 800b69a:	b919      	cbnz	r1, 800b6a4 <_dtoa_r+0x964>
 800b69c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b69e:	2900      	cmp	r1, #0
 800b6a0:	f000 8236 	beq.w	800bb10 <_dtoa_r+0xdd0>
 800b6a4:	9902      	ldr	r1, [sp, #8]
 800b6a6:	2900      	cmp	r1, #0
 800b6a8:	f2c0 80e4 	blt.w	800b874 <_dtoa_r+0xb34>
 800b6ac:	d105      	bne.n	800b6ba <_dtoa_r+0x97a>
 800b6ae:	9920      	ldr	r1, [sp, #128]	; 0x80
 800b6b0:	b919      	cbnz	r1, 800b6ba <_dtoa_r+0x97a>
 800b6b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b6b4:	2900      	cmp	r1, #0
 800b6b6:	f000 80dd 	beq.w	800b874 <_dtoa_r+0xb34>
 800b6ba:	2a00      	cmp	r2, #0
 800b6bc:	f300 814d 	bgt.w	800b95a <_dtoa_r+0xc1a>
 800b6c0:	9a08      	ldr	r2, [sp, #32]
 800b6c2:	703b      	strb	r3, [r7, #0]
 800b6c4:	f107 0801 	add.w	r8, r7, #1
 800b6c8:	4297      	cmp	r7, r2
 800b6ca:	4645      	mov	r5, r8
 800b6cc:	f000 8154 	beq.w	800b978 <_dtoa_r+0xc38>
 800b6d0:	4621      	mov	r1, r4
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	220a      	movs	r2, #10
 800b6d6:	4648      	mov	r0, r9
 800b6d8:	f001 fa54 	bl	800cb84 <__multadd>
 800b6dc:	455e      	cmp	r6, fp
 800b6de:	4604      	mov	r4, r0
 800b6e0:	4631      	mov	r1, r6
 800b6e2:	f04f 0300 	mov.w	r3, #0
 800b6e6:	f04f 020a 	mov.w	r2, #10
 800b6ea:	4648      	mov	r0, r9
 800b6ec:	d00b      	beq.n	800b706 <_dtoa_r+0x9c6>
 800b6ee:	f001 fa49 	bl	800cb84 <__multadd>
 800b6f2:	4659      	mov	r1, fp
 800b6f4:	4606      	mov	r6, r0
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	220a      	movs	r2, #10
 800b6fa:	4648      	mov	r0, r9
 800b6fc:	f001 fa42 	bl	800cb84 <__multadd>
 800b700:	4647      	mov	r7, r8
 800b702:	4683      	mov	fp, r0
 800b704:	e7a6      	b.n	800b654 <_dtoa_r+0x914>
 800b706:	f001 fa3d 	bl	800cb84 <__multadd>
 800b70a:	4647      	mov	r7, r8
 800b70c:	4606      	mov	r6, r0
 800b70e:	4683      	mov	fp, r0
 800b710:	e7a0      	b.n	800b654 <_dtoa_r+0x914>
 800b712:	4601      	mov	r1, r0
 800b714:	4648      	mov	r0, r9
 800b716:	9305      	str	r3, [sp, #20]
 800b718:	f001 fa2a 	bl	800cb70 <_Bfree>
 800b71c:	2201      	movs	r2, #1
 800b71e:	9b05      	ldr	r3, [sp, #20]
 800b720:	e7c0      	b.n	800b6a4 <_dtoa_r+0x964>
 800b722:	4641      	mov	r1, r8
 800b724:	4620      	mov	r0, r4
 800b726:	f001 fc05 	bl	800cf34 <__mcmp>
 800b72a:	2800      	cmp	r0, #0
 800b72c:	f6bf ad7d 	bge.w	800b22a <_dtoa_r+0x4ea>
 800b730:	4621      	mov	r1, r4
 800b732:	9c04      	ldr	r4, [sp, #16]
 800b734:	2300      	movs	r3, #0
 800b736:	3c01      	subs	r4, #1
 800b738:	220a      	movs	r2, #10
 800b73a:	4648      	mov	r0, r9
 800b73c:	9404      	str	r4, [sp, #16]
 800b73e:	f001 fa21 	bl	800cb84 <__multadd>
 800b742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b744:	4604      	mov	r4, r0
 800b746:	2b00      	cmp	r3, #0
 800b748:	f47f af60 	bne.w	800b60c <_dtoa_r+0x8cc>
 800b74c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b74e:	2b00      	cmp	r3, #0
 800b750:	f340 81f6 	ble.w	800bb40 <_dtoa_r+0xe00>
 800b754:	9306      	str	r3, [sp, #24]
 800b756:	e570      	b.n	800b23a <_dtoa_r+0x4fa>
 800b758:	9c08      	ldr	r4, [sp, #32]
 800b75a:	e51f      	b.n	800b19c <_dtoa_r+0x45c>
 800b75c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b75e:	2b02      	cmp	r3, #2
 800b760:	f77f ad67 	ble.w	800b232 <_dtoa_r+0x4f2>
 800b764:	9b06      	ldr	r3, [sp, #24]
 800b766:	2b00      	cmp	r3, #0
 800b768:	f040 8179 	bne.w	800ba5e <_dtoa_r+0xd1e>
 800b76c:	4641      	mov	r1, r8
 800b76e:	2205      	movs	r2, #5
 800b770:	4648      	mov	r0, r9
 800b772:	f001 fa07 	bl	800cb84 <__multadd>
 800b776:	4601      	mov	r1, r0
 800b778:	4680      	mov	r8, r0
 800b77a:	4620      	mov	r0, r4
 800b77c:	f001 fbda 	bl	800cf34 <__mcmp>
 800b780:	2800      	cmp	r0, #0
 800b782:	9408      	str	r4, [sp, #32]
 800b784:	f77f af0e 	ble.w	800b5a4 <_dtoa_r+0x864>
 800b788:	9a04      	ldr	r2, [sp, #16]
 800b78a:	9907      	ldr	r1, [sp, #28]
 800b78c:	2331      	movs	r3, #49	; 0x31
 800b78e:	3201      	adds	r2, #1
 800b790:	9204      	str	r2, [sp, #16]
 800b792:	700b      	strb	r3, [r1, #0]
 800b794:	1c4d      	adds	r5, r1, #1
 800b796:	e709      	b.n	800b5ac <_dtoa_r+0x86c>
 800b798:	9a04      	ldr	r2, [sp, #16]
 800b79a:	3201      	adds	r2, #1
 800b79c:	9204      	str	r2, [sp, #16]
 800b79e:	9a07      	ldr	r2, [sp, #28]
 800b7a0:	2331      	movs	r3, #49	; 0x31
 800b7a2:	7013      	strb	r3, [r2, #0]
 800b7a4:	e588      	b.n	800b2b8 <_dtoa_r+0x578>
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	9309      	str	r3, [sp, #36]	; 0x24
 800b7aa:	e5cd      	b.n	800b348 <_dtoa_r+0x608>
 800b7ac:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800b7b0:	e491      	b.n	800b0d6 <_dtoa_r+0x396>
 800b7b2:	f1ba 0f00 	cmp.w	sl, #0
 800b7b6:	f47f ad04 	bne.w	800b1c2 <_dtoa_r+0x482>
 800b7ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	f040 813f 	bne.w	800ba42 <_dtoa_r+0xd02>
 800b7c4:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800b7c8:	0d3f      	lsrs	r7, r7, #20
 800b7ca:	053f      	lsls	r7, r7, #20
 800b7cc:	b137      	cbz	r7, 800b7dc <_dtoa_r+0xa9c>
 800b7ce:	9b05      	ldr	r3, [sp, #20]
 800b7d0:	3301      	adds	r3, #1
 800b7d2:	9305      	str	r3, [sp, #20]
 800b7d4:	9b02      	ldr	r3, [sp, #8]
 800b7d6:	3301      	adds	r3, #1
 800b7d8:	9302      	str	r3, [sp, #8]
 800b7da:	2701      	movs	r7, #1
 800b7dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7de:	2001      	movs	r0, #1
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	f43f acf8 	beq.w	800b1d6 <_dtoa_r+0x496>
 800b7e6:	e4ed      	b.n	800b1c4 <_dtoa_r+0x484>
 800b7e8:	4640      	mov	r0, r8
 800b7ea:	f7f5 f9db 	bl	8000ba4 <__aeabi_i2d>
 800b7ee:	4632      	mov	r2, r6
 800b7f0:	463b      	mov	r3, r7
 800b7f2:	f7f5 fa3d 	bl	8000c70 <__aeabi_dmul>
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	4bbf      	ldr	r3, [pc, #764]	; (800baf8 <_dtoa_r+0xdb8>)
 800b7fa:	f7f5 f887 	bl	800090c <__adddf3>
 800b7fe:	4604      	mov	r4, r0
 800b800:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800b804:	4630      	mov	r0, r6
 800b806:	4639      	mov	r1, r7
 800b808:	2200      	movs	r2, #0
 800b80a:	4bbc      	ldr	r3, [pc, #752]	; (800bafc <_dtoa_r+0xdbc>)
 800b80c:	f7f5 f87c 	bl	8000908 <__aeabi_dsub>
 800b810:	4622      	mov	r2, r4
 800b812:	462b      	mov	r3, r5
 800b814:	4606      	mov	r6, r0
 800b816:	460f      	mov	r7, r1
 800b818:	f7f5 fcba 	bl	8001190 <__aeabi_dcmpgt>
 800b81c:	4680      	mov	r8, r0
 800b81e:	2800      	cmp	r0, #0
 800b820:	f040 8105 	bne.w	800ba2e <_dtoa_r+0xcee>
 800b824:	4622      	mov	r2, r4
 800b826:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800b82a:	4630      	mov	r0, r6
 800b82c:	4639      	mov	r1, r7
 800b82e:	f7f5 fc91 	bl	8001154 <__aeabi_dcmplt>
 800b832:	b108      	cbz	r0, 800b838 <_dtoa_r+0xaf8>
 800b834:	4646      	mov	r6, r8
 800b836:	e6b5      	b.n	800b5a4 <_dtoa_r+0x864>
 800b838:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
 800b83c:	f7ff bb89 	b.w	800af52 <_dtoa_r+0x212>
 800b840:	9807      	ldr	r0, [sp, #28]
 800b842:	f7ff baae 	b.w	800ada2 <_dtoa_r+0x62>
 800b846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b848:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b84a:	970a      	str	r7, [sp, #40]	; 0x28
 800b84c:	1afb      	subs	r3, r7, r3
 800b84e:	441a      	add	r2, r3
 800b850:	920b      	str	r2, [sp, #44]	; 0x2c
 800b852:	2700      	movs	r7, #0
 800b854:	e461      	b.n	800b11a <_dtoa_r+0x3da>
 800b856:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
 800b85a:	f04f 0802 	mov.w	r8, #2
 800b85e:	e5bb      	b.n	800b3d8 <_dtoa_r+0x698>
 800b860:	461c      	mov	r4, r3
 800b862:	2100      	movs	r1, #0
 800b864:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800b868:	e58a      	b.n	800b380 <_dtoa_r+0x640>
 800b86a:	2401      	movs	r4, #1
 800b86c:	9421      	str	r4, [sp, #132]	; 0x84
 800b86e:	940d      	str	r4, [sp, #52]	; 0x34
 800b870:	9406      	str	r4, [sp, #24]
 800b872:	e7f6      	b.n	800b862 <_dtoa_r+0xb22>
 800b874:	2a00      	cmp	r2, #0
 800b876:	46d0      	mov	r8, sl
 800b878:	f8cd b014 	str.w	fp, [sp, #20]
 800b87c:	469a      	mov	sl, r3
 800b87e:	dd11      	ble.n	800b8a4 <_dtoa_r+0xb64>
 800b880:	4621      	mov	r1, r4
 800b882:	2201      	movs	r2, #1
 800b884:	4648      	mov	r0, r9
 800b886:	f001 fafd 	bl	800ce84 <__lshift>
 800b88a:	4641      	mov	r1, r8
 800b88c:	4604      	mov	r4, r0
 800b88e:	f001 fb51 	bl	800cf34 <__mcmp>
 800b892:	2800      	cmp	r0, #0
 800b894:	f340 8149 	ble.w	800bb2a <_dtoa_r+0xdea>
 800b898:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b89c:	f000 8106 	beq.w	800baac <_dtoa_r+0xd6c>
 800b8a0:	f105 0a31 	add.w	sl, r5, #49	; 0x31
 800b8a4:	46b3      	mov	fp, r6
 800b8a6:	f887 a000 	strb.w	sl, [r7]
 800b8aa:	1c7d      	adds	r5, r7, #1
 800b8ac:	9e05      	ldr	r6, [sp, #20]
 800b8ae:	9408      	str	r4, [sp, #32]
 800b8b0:	e502      	b.n	800b2b8 <_dtoa_r+0x578>
 800b8b2:	d104      	bne.n	800b8be <_dtoa_r+0xb7e>
 800b8b4:	f01a 0f01 	tst.w	sl, #1
 800b8b8:	d001      	beq.n	800b8be <_dtoa_r+0xb7e>
 800b8ba:	e4ed      	b.n	800b298 <_dtoa_r+0x558>
 800b8bc:	4615      	mov	r5, r2
 800b8be:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b8c2:	2b30      	cmp	r3, #48	; 0x30
 800b8c4:	f105 32ff 	add.w	r2, r5, #4294967295
 800b8c8:	d0f8      	beq.n	800b8bc <_dtoa_r+0xb7c>
 800b8ca:	e4f5      	b.n	800b2b8 <_dtoa_r+0x578>
 800b8cc:	9b04      	ldr	r3, [sp, #16]
 800b8ce:	425c      	negs	r4, r3
 800b8d0:	2c00      	cmp	r4, #0
 800b8d2:	f000 80bf 	beq.w	800ba54 <_dtoa_r+0xd14>
 800b8d6:	4b8a      	ldr	r3, [pc, #552]	; (800bb00 <_dtoa_r+0xdc0>)
 800b8d8:	f004 020f 	and.w	r2, r4, #15
 800b8dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b8e8:	f7f5 f9c2 	bl	8000c70 <__aeabi_dmul>
 800b8ec:	1124      	asrs	r4, r4, #4
 800b8ee:	4606      	mov	r6, r0
 800b8f0:	460f      	mov	r7, r1
 800b8f2:	f000 812a 	beq.w	800bb4a <_dtoa_r+0xe0a>
 800b8f6:	4d83      	ldr	r5, [pc, #524]	; (800bb04 <_dtoa_r+0xdc4>)
 800b8f8:	f04f 0802 	mov.w	r8, #2
 800b8fc:	07e2      	lsls	r2, r4, #31
 800b8fe:	d509      	bpl.n	800b914 <_dtoa_r+0xbd4>
 800b900:	4630      	mov	r0, r6
 800b902:	4639      	mov	r1, r7
 800b904:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b908:	f7f5 f9b2 	bl	8000c70 <__aeabi_dmul>
 800b90c:	f108 0801 	add.w	r8, r8, #1
 800b910:	4606      	mov	r6, r0
 800b912:	460f      	mov	r7, r1
 800b914:	1064      	asrs	r4, r4, #1
 800b916:	f105 0508 	add.w	r5, r5, #8
 800b91a:	d1ef      	bne.n	800b8fc <_dtoa_r+0xbbc>
 800b91c:	e576      	b.n	800b40c <_dtoa_r+0x6cc>
 800b91e:	9907      	ldr	r1, [sp, #28]
 800b920:	2230      	movs	r2, #48	; 0x30
 800b922:	700a      	strb	r2, [r1, #0]
 800b924:	9a04      	ldr	r2, [sp, #16]
 800b926:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 800b92a:	3201      	adds	r2, #1
 800b92c:	9204      	str	r2, [sp, #16]
 800b92e:	f7ff bbd0 	b.w	800b0d2 <_dtoa_r+0x392>
 800b932:	6871      	ldr	r1, [r6, #4]
 800b934:	4648      	mov	r0, r9
 800b936:	f001 f8f5 	bl	800cb24 <_Balloc>
 800b93a:	6933      	ldr	r3, [r6, #16]
 800b93c:	1c9a      	adds	r2, r3, #2
 800b93e:	4605      	mov	r5, r0
 800b940:	0092      	lsls	r2, r2, #2
 800b942:	f106 010c 	add.w	r1, r6, #12
 800b946:	300c      	adds	r0, #12
 800b948:	f7f4 fe6c 	bl	8000624 <memcpy>
 800b94c:	4629      	mov	r1, r5
 800b94e:	2201      	movs	r2, #1
 800b950:	4648      	mov	r0, r9
 800b952:	f001 fa97 	bl	800ce84 <__lshift>
 800b956:	9005      	str	r0, [sp, #20]
 800b958:	e670      	b.n	800b63c <_dtoa_r+0x8fc>
 800b95a:	2b39      	cmp	r3, #57	; 0x39
 800b95c:	f8cd b014 	str.w	fp, [sp, #20]
 800b960:	46d0      	mov	r8, sl
 800b962:	f000 80a3 	beq.w	800baac <_dtoa_r+0xd6c>
 800b966:	f103 0a01 	add.w	sl, r3, #1
 800b96a:	46b3      	mov	fp, r6
 800b96c:	f887 a000 	strb.w	sl, [r7]
 800b970:	1c7d      	adds	r5, r7, #1
 800b972:	9e05      	ldr	r6, [sp, #20]
 800b974:	9408      	str	r4, [sp, #32]
 800b976:	e49f      	b.n	800b2b8 <_dtoa_r+0x578>
 800b978:	465a      	mov	r2, fp
 800b97a:	46d0      	mov	r8, sl
 800b97c:	46b3      	mov	fp, r6
 800b97e:	469a      	mov	sl, r3
 800b980:	4616      	mov	r6, r2
 800b982:	e47d      	b.n	800b280 <_dtoa_r+0x540>
 800b984:	495e      	ldr	r1, [pc, #376]	; (800bb00 <_dtoa_r+0xdc0>)
 800b986:	f108 3aff 	add.w	sl, r8, #4294967295
 800b98a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b98e:	4622      	mov	r2, r4
 800b990:	462b      	mov	r3, r5
 800b992:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b996:	f7f5 f96b 	bl	8000c70 <__aeabi_dmul>
 800b99a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800b99e:	4639      	mov	r1, r7
 800b9a0:	4630      	mov	r0, r6
 800b9a2:	f7f5 fc15 	bl	80011d0 <__aeabi_d2iz>
 800b9a6:	4604      	mov	r4, r0
 800b9a8:	f7f5 f8fc 	bl	8000ba4 <__aeabi_i2d>
 800b9ac:	4602      	mov	r2, r0
 800b9ae:	460b      	mov	r3, r1
 800b9b0:	4630      	mov	r0, r6
 800b9b2:	4639      	mov	r1, r7
 800b9b4:	f7f4 ffa8 	bl	8000908 <__aeabi_dsub>
 800b9b8:	9a07      	ldr	r2, [sp, #28]
 800b9ba:	3430      	adds	r4, #48	; 0x30
 800b9bc:	f1b8 0f01 	cmp.w	r8, #1
 800b9c0:	4606      	mov	r6, r0
 800b9c2:	460f      	mov	r7, r1
 800b9c4:	7014      	strb	r4, [r2, #0]
 800b9c6:	f102 0501 	add.w	r5, r2, #1
 800b9ca:	d01e      	beq.n	800ba0a <_dtoa_r+0xcca>
 800b9cc:	9b07      	ldr	r3, [sp, #28]
 800b9ce:	eb03 0b08 	add.w	fp, r3, r8
 800b9d2:	46a8      	mov	r8, r5
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	4b4c      	ldr	r3, [pc, #304]	; (800bb08 <_dtoa_r+0xdc8>)
 800b9d8:	4630      	mov	r0, r6
 800b9da:	4639      	mov	r1, r7
 800b9dc:	f7f5 f948 	bl	8000c70 <__aeabi_dmul>
 800b9e0:	460f      	mov	r7, r1
 800b9e2:	4606      	mov	r6, r0
 800b9e4:	f7f5 fbf4 	bl	80011d0 <__aeabi_d2iz>
 800b9e8:	4604      	mov	r4, r0
 800b9ea:	f7f5 f8db 	bl	8000ba4 <__aeabi_i2d>
 800b9ee:	3430      	adds	r4, #48	; 0x30
 800b9f0:	4602      	mov	r2, r0
 800b9f2:	460b      	mov	r3, r1
 800b9f4:	4630      	mov	r0, r6
 800b9f6:	4639      	mov	r1, r7
 800b9f8:	f7f4 ff86 	bl	8000908 <__aeabi_dsub>
 800b9fc:	f808 4b01 	strb.w	r4, [r8], #1
 800ba00:	45c3      	cmp	fp, r8
 800ba02:	4606      	mov	r6, r0
 800ba04:	460f      	mov	r7, r1
 800ba06:	d1e5      	bne.n	800b9d4 <_dtoa_r+0xc94>
 800ba08:	4455      	add	r5, sl
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	4b3f      	ldr	r3, [pc, #252]	; (800bb0c <_dtoa_r+0xdcc>)
 800ba0e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800ba12:	f7f4 ff7b 	bl	800090c <__adddf3>
 800ba16:	4632      	mov	r2, r6
 800ba18:	463b      	mov	r3, r7
 800ba1a:	f7f5 fb9b 	bl	8001154 <__aeabi_dcmplt>
 800ba1e:	2800      	cmp	r0, #0
 800ba20:	d04c      	beq.n	800babc <_dtoa_r+0xd7c>
 800ba22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ba24:	9304      	str	r3, [sp, #16]
 800ba26:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 800ba2a:	f7ff bb46 	b.w	800b0ba <_dtoa_r+0x37a>
 800ba2e:	f04f 0800 	mov.w	r8, #0
 800ba32:	4646      	mov	r6, r8
 800ba34:	e6a8      	b.n	800b788 <_dtoa_r+0xa48>
 800ba36:	9b05      	ldr	r3, [sp, #20]
 800ba38:	9a06      	ldr	r2, [sp, #24]
 800ba3a:	1a9d      	subs	r5, r3, r2
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	f7ff bb72 	b.w	800b126 <_dtoa_r+0x3e6>
 800ba42:	2700      	movs	r7, #0
 800ba44:	e6ca      	b.n	800b7dc <_dtoa_r+0xa9c>
 800ba46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ba48:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800ba4a:	9d05      	ldr	r5, [sp, #20]
 800ba4c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ba50:	f7ff bb69 	b.w	800b126 <_dtoa_r+0x3e6>
 800ba54:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 800ba58:	f04f 0802 	mov.w	r8, #2
 800ba5c:	e4d6      	b.n	800b40c <_dtoa_r+0x6cc>
 800ba5e:	9408      	str	r4, [sp, #32]
 800ba60:	e5a0      	b.n	800b5a4 <_dtoa_r+0x864>
 800ba62:	9b06      	ldr	r3, [sp, #24]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	f43f aebf 	beq.w	800b7e8 <_dtoa_r+0xaa8>
 800ba6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	f77f aee3 	ble.w	800b838 <_dtoa_r+0xaf8>
 800ba72:	2200      	movs	r2, #0
 800ba74:	4b24      	ldr	r3, [pc, #144]	; (800bb08 <_dtoa_r+0xdc8>)
 800ba76:	4630      	mov	r0, r6
 800ba78:	4639      	mov	r1, r7
 800ba7a:	f7f5 f8f9 	bl	8000c70 <__aeabi_dmul>
 800ba7e:	4606      	mov	r6, r0
 800ba80:	460f      	mov	r7, r1
 800ba82:	f108 0001 	add.w	r0, r8, #1
 800ba86:	f7f5 f88d 	bl	8000ba4 <__aeabi_i2d>
 800ba8a:	4632      	mov	r2, r6
 800ba8c:	463b      	mov	r3, r7
 800ba8e:	f7f5 f8ef 	bl	8000c70 <__aeabi_dmul>
 800ba92:	2200      	movs	r2, #0
 800ba94:	4b18      	ldr	r3, [pc, #96]	; (800baf8 <_dtoa_r+0xdb8>)
 800ba96:	f7f4 ff39 	bl	800090c <__adddf3>
 800ba9a:	9a04      	ldr	r2, [sp, #16]
 800ba9c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800baa0:	3a01      	subs	r2, #1
 800baa2:	4604      	mov	r4, r0
 800baa4:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800baa8:	9211      	str	r2, [sp, #68]	; 0x44
 800baaa:	e4d0      	b.n	800b44e <_dtoa_r+0x70e>
 800baac:	2239      	movs	r2, #57	; 0x39
 800baae:	46b3      	mov	fp, r6
 800bab0:	9408      	str	r4, [sp, #32]
 800bab2:	9e05      	ldr	r6, [sp, #20]
 800bab4:	703a      	strb	r2, [r7, #0]
 800bab6:	1c7d      	adds	r5, r7, #1
 800bab8:	f7ff bbf0 	b.w	800b29c <_dtoa_r+0x55c>
 800babc:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800bac0:	2000      	movs	r0, #0
 800bac2:	4912      	ldr	r1, [pc, #72]	; (800bb0c <_dtoa_r+0xdcc>)
 800bac4:	f7f4 ff20 	bl	8000908 <__aeabi_dsub>
 800bac8:	4632      	mov	r2, r6
 800baca:	463b      	mov	r3, r7
 800bacc:	f7f5 fb60 	bl	8001190 <__aeabi_dcmpgt>
 800bad0:	b908      	cbnz	r0, 800bad6 <_dtoa_r+0xd96>
 800bad2:	e6b1      	b.n	800b838 <_dtoa_r+0xaf8>
 800bad4:	4615      	mov	r5, r2
 800bad6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bada:	2b30      	cmp	r3, #48	; 0x30
 800badc:	f105 32ff 	add.w	r2, r5, #4294967295
 800bae0:	d0f8      	beq.n	800bad4 <_dtoa_r+0xd94>
 800bae2:	e530      	b.n	800b546 <_dtoa_r+0x806>
 800bae4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bae6:	9304      	str	r3, [sp, #16]
 800bae8:	f7ff bae7 	b.w	800b0ba <_dtoa_r+0x37a>
 800baec:	f1ba 0f00 	cmp.w	sl, #0
 800baf0:	f47f ad7a 	bne.w	800b5e8 <_dtoa_r+0x8a8>
 800baf4:	e661      	b.n	800b7ba <_dtoa_r+0xa7a>
 800baf6:	bf00      	nop
 800baf8:	401c0000 	.word	0x401c0000
 800bafc:	40140000 	.word	0x40140000
 800bb00:	0800e188 	.word	0x0800e188
 800bb04:	0800e260 	.word	0x0800e260
 800bb08:	40240000 	.word	0x40240000
 800bb0c:	3fe00000 	.word	0x3fe00000
 800bb10:	2b39      	cmp	r3, #57	; 0x39
 800bb12:	f8cd b014 	str.w	fp, [sp, #20]
 800bb16:	46d0      	mov	r8, sl
 800bb18:	f8dd b008 	ldr.w	fp, [sp, #8]
 800bb1c:	469a      	mov	sl, r3
 800bb1e:	d0c5      	beq.n	800baac <_dtoa_r+0xd6c>
 800bb20:	f1bb 0f00 	cmp.w	fp, #0
 800bb24:	f73f aebc 	bgt.w	800b8a0 <_dtoa_r+0xb60>
 800bb28:	e6bc      	b.n	800b8a4 <_dtoa_r+0xb64>
 800bb2a:	f47f aebb 	bne.w	800b8a4 <_dtoa_r+0xb64>
 800bb2e:	f01a 0f01 	tst.w	sl, #1
 800bb32:	f43f aeb7 	beq.w	800b8a4 <_dtoa_r+0xb64>
 800bb36:	e6af      	b.n	800b898 <_dtoa_r+0xb58>
 800bb38:	f04f 0800 	mov.w	r8, #0
 800bb3c:	4646      	mov	r6, r8
 800bb3e:	e531      	b.n	800b5a4 <_dtoa_r+0x864>
 800bb40:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800bb42:	2b02      	cmp	r3, #2
 800bb44:	dc21      	bgt.n	800bb8a <_dtoa_r+0xe4a>
 800bb46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb48:	e604      	b.n	800b754 <_dtoa_r+0xa14>
 800bb4a:	f04f 0802 	mov.w	r8, #2
 800bb4e:	e45d      	b.n	800b40c <_dtoa_r+0x6cc>
 800bb50:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800bb52:	2b02      	cmp	r3, #2
 800bb54:	dc19      	bgt.n	800bb8a <_dtoa_r+0xe4a>
 800bb56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb58:	e563      	b.n	800b622 <_dtoa_r+0x8e2>
 800bb5a:	2400      	movs	r4, #0
 800bb5c:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 800bb60:	4621      	mov	r1, r4
 800bb62:	4648      	mov	r0, r9
 800bb64:	f000 ffde 	bl	800cb24 <_Balloc>
 800bb68:	f04f 33ff 	mov.w	r3, #4294967295
 800bb6c:	9306      	str	r3, [sp, #24]
 800bb6e:	930d      	str	r3, [sp, #52]	; 0x34
 800bb70:	2301      	movs	r3, #1
 800bb72:	9007      	str	r0, [sp, #28]
 800bb74:	9421      	str	r4, [sp, #132]	; 0x84
 800bb76:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800bb7a:	9309      	str	r3, [sp, #36]	; 0x24
 800bb7c:	f7ff b9e9 	b.w	800af52 <_dtoa_r+0x212>
 800bb80:	f43f ab3d 	beq.w	800b1fe <_dtoa_r+0x4be>
 800bb84:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 800bb88:	e522      	b.n	800b5d0 <_dtoa_r+0x890>
 800bb8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb8c:	9306      	str	r3, [sp, #24]
 800bb8e:	e5e9      	b.n	800b764 <_dtoa_r+0xa24>
 800bb90:	2501      	movs	r5, #1
 800bb92:	f7ff b9a8 	b.w	800aee6 <_dtoa_r+0x1a6>
 800bb96:	bf00      	nop

0800bb98 <__sflush_r>:
 800bb98:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 800bb9c:	b29a      	uxth	r2, r3
 800bb9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bba2:	460d      	mov	r5, r1
 800bba4:	0711      	lsls	r1, r2, #28
 800bba6:	4680      	mov	r8, r0
 800bba8:	d43c      	bmi.n	800bc24 <__sflush_r+0x8c>
 800bbaa:	686a      	ldr	r2, [r5, #4]
 800bbac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bbb0:	2a00      	cmp	r2, #0
 800bbb2:	81ab      	strh	r3, [r5, #12]
 800bbb4:	dd73      	ble.n	800bc9e <__sflush_r+0x106>
 800bbb6:	6aac      	ldr	r4, [r5, #40]	; 0x28
 800bbb8:	2c00      	cmp	r4, #0
 800bbba:	d04b      	beq.n	800bc54 <__sflush_r+0xbc>
 800bbbc:	b29b      	uxth	r3, r3
 800bbbe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800bbc2:	2100      	movs	r1, #0
 800bbc4:	b292      	uxth	r2, r2
 800bbc6:	f8d8 6000 	ldr.w	r6, [r8]
 800bbca:	f8c8 1000 	str.w	r1, [r8]
 800bbce:	2a00      	cmp	r2, #0
 800bbd0:	d069      	beq.n	800bca6 <__sflush_r+0x10e>
 800bbd2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800bbd4:	075f      	lsls	r7, r3, #29
 800bbd6:	d505      	bpl.n	800bbe4 <__sflush_r+0x4c>
 800bbd8:	6869      	ldr	r1, [r5, #4]
 800bbda:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800bbdc:	1a52      	subs	r2, r2, r1
 800bbde:	b10b      	cbz	r3, 800bbe4 <__sflush_r+0x4c>
 800bbe0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800bbe2:	1ad2      	subs	r2, r2, r3
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	69e9      	ldr	r1, [r5, #28]
 800bbe8:	4640      	mov	r0, r8
 800bbea:	47a0      	blx	r4
 800bbec:	1c44      	adds	r4, r0, #1
 800bbee:	d03c      	beq.n	800bc6a <__sflush_r+0xd2>
 800bbf0:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 800bbf4:	692a      	ldr	r2, [r5, #16]
 800bbf6:	602a      	str	r2, [r5, #0]
 800bbf8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	81ab      	strh	r3, [r5, #12]
 800bc00:	04db      	lsls	r3, r3, #19
 800bc02:	606a      	str	r2, [r5, #4]
 800bc04:	d449      	bmi.n	800bc9a <__sflush_r+0x102>
 800bc06:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800bc08:	f8c8 6000 	str.w	r6, [r8]
 800bc0c:	b311      	cbz	r1, 800bc54 <__sflush_r+0xbc>
 800bc0e:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800bc12:	4299      	cmp	r1, r3
 800bc14:	d002      	beq.n	800bc1c <__sflush_r+0x84>
 800bc16:	4640      	mov	r0, r8
 800bc18:	f000 f94e 	bl	800beb8 <_free_r>
 800bc1c:	2000      	movs	r0, #0
 800bc1e:	6328      	str	r0, [r5, #48]	; 0x30
 800bc20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc24:	692e      	ldr	r6, [r5, #16]
 800bc26:	b1ae      	cbz	r6, 800bc54 <__sflush_r+0xbc>
 800bc28:	682c      	ldr	r4, [r5, #0]
 800bc2a:	602e      	str	r6, [r5, #0]
 800bc2c:	0790      	lsls	r0, r2, #30
 800bc2e:	bf0c      	ite	eq
 800bc30:	696b      	ldreq	r3, [r5, #20]
 800bc32:	2300      	movne	r3, #0
 800bc34:	1ba4      	subs	r4, r4, r6
 800bc36:	60ab      	str	r3, [r5, #8]
 800bc38:	e00a      	b.n	800bc50 <__sflush_r+0xb8>
 800bc3a:	4623      	mov	r3, r4
 800bc3c:	4632      	mov	r2, r6
 800bc3e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800bc40:	69e9      	ldr	r1, [r5, #28]
 800bc42:	4640      	mov	r0, r8
 800bc44:	47b8      	blx	r7
 800bc46:	2800      	cmp	r0, #0
 800bc48:	eba4 0400 	sub.w	r4, r4, r0
 800bc4c:	4406      	add	r6, r0
 800bc4e:	dd04      	ble.n	800bc5a <__sflush_r+0xc2>
 800bc50:	2c00      	cmp	r4, #0
 800bc52:	dcf2      	bgt.n	800bc3a <__sflush_r+0xa2>
 800bc54:	2000      	movs	r0, #0
 800bc56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc5a:	89ab      	ldrh	r3, [r5, #12]
 800bc5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc60:	81ab      	strh	r3, [r5, #12]
 800bc62:	f04f 30ff 	mov.w	r0, #4294967295
 800bc66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc6a:	f8d8 2000 	ldr.w	r2, [r8]
 800bc6e:	2a1d      	cmp	r2, #29
 800bc70:	d8f3      	bhi.n	800bc5a <__sflush_r+0xc2>
 800bc72:	4b1a      	ldr	r3, [pc, #104]	; (800bcdc <__sflush_r+0x144>)
 800bc74:	40d3      	lsrs	r3, r2
 800bc76:	f003 0301 	and.w	r3, r3, #1
 800bc7a:	f083 0401 	eor.w	r4, r3, #1
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d0eb      	beq.n	800bc5a <__sflush_r+0xc2>
 800bc82:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 800bc86:	6929      	ldr	r1, [r5, #16]
 800bc88:	6029      	str	r1, [r5, #0]
 800bc8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bc8e:	04d9      	lsls	r1, r3, #19
 800bc90:	606c      	str	r4, [r5, #4]
 800bc92:	81ab      	strh	r3, [r5, #12]
 800bc94:	d5b7      	bpl.n	800bc06 <__sflush_r+0x6e>
 800bc96:	2a00      	cmp	r2, #0
 800bc98:	d1b5      	bne.n	800bc06 <__sflush_r+0x6e>
 800bc9a:	6528      	str	r0, [r5, #80]	; 0x50
 800bc9c:	e7b3      	b.n	800bc06 <__sflush_r+0x6e>
 800bc9e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800bca0:	2a00      	cmp	r2, #0
 800bca2:	dc88      	bgt.n	800bbb6 <__sflush_r+0x1e>
 800bca4:	e7d6      	b.n	800bc54 <__sflush_r+0xbc>
 800bca6:	2301      	movs	r3, #1
 800bca8:	69e9      	ldr	r1, [r5, #28]
 800bcaa:	4640      	mov	r0, r8
 800bcac:	47a0      	blx	r4
 800bcae:	1c43      	adds	r3, r0, #1
 800bcb0:	4602      	mov	r2, r0
 800bcb2:	d002      	beq.n	800bcba <__sflush_r+0x122>
 800bcb4:	89ab      	ldrh	r3, [r5, #12]
 800bcb6:	6aac      	ldr	r4, [r5, #40]	; 0x28
 800bcb8:	e78c      	b.n	800bbd4 <__sflush_r+0x3c>
 800bcba:	f8d8 3000 	ldr.w	r3, [r8]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d0f8      	beq.n	800bcb4 <__sflush_r+0x11c>
 800bcc2:	2b1d      	cmp	r3, #29
 800bcc4:	d001      	beq.n	800bcca <__sflush_r+0x132>
 800bcc6:	2b16      	cmp	r3, #22
 800bcc8:	d102      	bne.n	800bcd0 <__sflush_r+0x138>
 800bcca:	f8c8 6000 	str.w	r6, [r8]
 800bcce:	e7c1      	b.n	800bc54 <__sflush_r+0xbc>
 800bcd0:	89ab      	ldrh	r3, [r5, #12]
 800bcd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcd6:	81ab      	strh	r3, [r5, #12]
 800bcd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcdc:	20400001 	.word	0x20400001

0800bce0 <_fflush_r>:
 800bce0:	b510      	push	{r4, lr}
 800bce2:	4604      	mov	r4, r0
 800bce4:	b082      	sub	sp, #8
 800bce6:	b108      	cbz	r0, 800bcec <_fflush_r+0xc>
 800bce8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800bcea:	b153      	cbz	r3, 800bd02 <_fflush_r+0x22>
 800bcec:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 800bcf0:	b908      	cbnz	r0, 800bcf6 <_fflush_r+0x16>
 800bcf2:	b002      	add	sp, #8
 800bcf4:	bd10      	pop	{r4, pc}
 800bcf6:	4620      	mov	r0, r4
 800bcf8:	b002      	add	sp, #8
 800bcfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcfe:	f7ff bf4b 	b.w	800bb98 <__sflush_r>
 800bd02:	9101      	str	r1, [sp, #4]
 800bd04:	f000 f880 	bl	800be08 <__sinit>
 800bd08:	9901      	ldr	r1, [sp, #4]
 800bd0a:	e7ef      	b.n	800bcec <_fflush_r+0xc>

0800bd0c <_cleanup_r>:
 800bd0c:	4901      	ldr	r1, [pc, #4]	; (800bd14 <_cleanup_r+0x8>)
 800bd0e:	f000 bb3d 	b.w	800c38c <_fwalk_reent>
 800bd12:	bf00      	nop
 800bd14:	0800d809 	.word	0x0800d809

0800bd18 <__sinit.part.1>:
 800bd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd1c:	4b35      	ldr	r3, [pc, #212]	; (800bdf4 <__sinit.part.1+0xdc>)
 800bd1e:	6845      	ldr	r5, [r0, #4]
 800bd20:	63c3      	str	r3, [r0, #60]	; 0x3c
 800bd22:	2400      	movs	r4, #0
 800bd24:	4607      	mov	r7, r0
 800bd26:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 800bd2a:	2304      	movs	r3, #4
 800bd2c:	2103      	movs	r1, #3
 800bd2e:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
 800bd32:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 800bd36:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 800bd3a:	b083      	sub	sp, #12
 800bd3c:	602c      	str	r4, [r5, #0]
 800bd3e:	606c      	str	r4, [r5, #4]
 800bd40:	60ac      	str	r4, [r5, #8]
 800bd42:	666c      	str	r4, [r5, #100]	; 0x64
 800bd44:	81ec      	strh	r4, [r5, #14]
 800bd46:	612c      	str	r4, [r5, #16]
 800bd48:	616c      	str	r4, [r5, #20]
 800bd4a:	61ac      	str	r4, [r5, #24]
 800bd4c:	81ab      	strh	r3, [r5, #12]
 800bd4e:	4621      	mov	r1, r4
 800bd50:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 800bd54:	2208      	movs	r2, #8
 800bd56:	f7fb ff29 	bl	8007bac <memset>
 800bd5a:	68be      	ldr	r6, [r7, #8]
 800bd5c:	f8df b098 	ldr.w	fp, [pc, #152]	; 800bdf8 <__sinit.part.1+0xe0>
 800bd60:	f8df a098 	ldr.w	sl, [pc, #152]	; 800bdfc <__sinit.part.1+0xe4>
 800bd64:	f8df 9098 	ldr.w	r9, [pc, #152]	; 800be00 <__sinit.part.1+0xe8>
 800bd68:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800be04 <__sinit.part.1+0xec>
 800bd6c:	f8c5 b020 	str.w	fp, [r5, #32]
 800bd70:	2301      	movs	r3, #1
 800bd72:	2209      	movs	r2, #9
 800bd74:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 800bd78:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 800bd7c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 800bd80:	61ed      	str	r5, [r5, #28]
 800bd82:	4621      	mov	r1, r4
 800bd84:	81f3      	strh	r3, [r6, #14]
 800bd86:	81b2      	strh	r2, [r6, #12]
 800bd88:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 800bd8c:	6034      	str	r4, [r6, #0]
 800bd8e:	6074      	str	r4, [r6, #4]
 800bd90:	60b4      	str	r4, [r6, #8]
 800bd92:	6674      	str	r4, [r6, #100]	; 0x64
 800bd94:	6134      	str	r4, [r6, #16]
 800bd96:	6174      	str	r4, [r6, #20]
 800bd98:	61b4      	str	r4, [r6, #24]
 800bd9a:	2208      	movs	r2, #8
 800bd9c:	9301      	str	r3, [sp, #4]
 800bd9e:	f7fb ff05 	bl	8007bac <memset>
 800bda2:	68fd      	ldr	r5, [r7, #12]
 800bda4:	61f6      	str	r6, [r6, #28]
 800bda6:	2012      	movs	r0, #18
 800bda8:	2202      	movs	r2, #2
 800bdaa:	f8c6 b020 	str.w	fp, [r6, #32]
 800bdae:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 800bdb2:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 800bdb6:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 800bdba:	4621      	mov	r1, r4
 800bdbc:	81a8      	strh	r0, [r5, #12]
 800bdbe:	81ea      	strh	r2, [r5, #14]
 800bdc0:	602c      	str	r4, [r5, #0]
 800bdc2:	606c      	str	r4, [r5, #4]
 800bdc4:	60ac      	str	r4, [r5, #8]
 800bdc6:	666c      	str	r4, [r5, #100]	; 0x64
 800bdc8:	612c      	str	r4, [r5, #16]
 800bdca:	616c      	str	r4, [r5, #20]
 800bdcc:	61ac      	str	r4, [r5, #24]
 800bdce:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 800bdd2:	2208      	movs	r2, #8
 800bdd4:	f7fb feea 	bl	8007bac <memset>
 800bdd8:	9b01      	ldr	r3, [sp, #4]
 800bdda:	61ed      	str	r5, [r5, #28]
 800bddc:	f8c5 b020 	str.w	fp, [r5, #32]
 800bde0:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 800bde4:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 800bde8:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 800bdec:	63bb      	str	r3, [r7, #56]	; 0x38
 800bdee:	b003      	add	sp, #12
 800bdf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdf4:	0800bd0d 	.word	0x0800bd0d
 800bdf8:	0800d545 	.word	0x0800d545
 800bdfc:	0800d569 	.word	0x0800d569
 800be00:	0800d5a5 	.word	0x0800d5a5
 800be04:	0800d5c5 	.word	0x0800d5c5

0800be08 <__sinit>:
 800be08:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800be0a:	b103      	cbz	r3, 800be0e <__sinit+0x6>
 800be0c:	4770      	bx	lr
 800be0e:	f7ff bf83 	b.w	800bd18 <__sinit.part.1>
 800be12:	bf00      	nop

0800be14 <__sfp_lock_acquire>:
 800be14:	4770      	bx	lr
 800be16:	bf00      	nop

0800be18 <__sfp_lock_release>:
 800be18:	4770      	bx	lr
 800be1a:	bf00      	nop

0800be1c <_malloc_trim_r>:
 800be1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be1e:	4f23      	ldr	r7, [pc, #140]	; (800beac <_malloc_trim_r+0x90>)
 800be20:	460c      	mov	r4, r1
 800be22:	4606      	mov	r6, r0
 800be24:	f000 fe7a 	bl	800cb1c <__malloc_lock>
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	685d      	ldr	r5, [r3, #4]
 800be2c:	f025 0503 	bic.w	r5, r5, #3
 800be30:	1b29      	subs	r1, r5, r4
 800be32:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 800be36:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 800be3a:	f021 010f 	bic.w	r1, r1, #15
 800be3e:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 800be42:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800be46:	db07      	blt.n	800be58 <_malloc_trim_r+0x3c>
 800be48:	2100      	movs	r1, #0
 800be4a:	4630      	mov	r0, r6
 800be4c:	f001 fb68 	bl	800d520 <_sbrk_r>
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	442b      	add	r3, r5
 800be54:	4298      	cmp	r0, r3
 800be56:	d004      	beq.n	800be62 <_malloc_trim_r+0x46>
 800be58:	4630      	mov	r0, r6
 800be5a:	f000 fe61 	bl	800cb20 <__malloc_unlock>
 800be5e:	2000      	movs	r0, #0
 800be60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be62:	4261      	negs	r1, r4
 800be64:	4630      	mov	r0, r6
 800be66:	f001 fb5b 	bl	800d520 <_sbrk_r>
 800be6a:	3001      	adds	r0, #1
 800be6c:	d00d      	beq.n	800be8a <_malloc_trim_r+0x6e>
 800be6e:	4b10      	ldr	r3, [pc, #64]	; (800beb0 <_malloc_trim_r+0x94>)
 800be70:	68ba      	ldr	r2, [r7, #8]
 800be72:	6819      	ldr	r1, [r3, #0]
 800be74:	1b2d      	subs	r5, r5, r4
 800be76:	f045 0501 	orr.w	r5, r5, #1
 800be7a:	4630      	mov	r0, r6
 800be7c:	1b09      	subs	r1, r1, r4
 800be7e:	6055      	str	r5, [r2, #4]
 800be80:	6019      	str	r1, [r3, #0]
 800be82:	f000 fe4d 	bl	800cb20 <__malloc_unlock>
 800be86:	2001      	movs	r0, #1
 800be88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be8a:	2100      	movs	r1, #0
 800be8c:	4630      	mov	r0, r6
 800be8e:	f001 fb47 	bl	800d520 <_sbrk_r>
 800be92:	68ba      	ldr	r2, [r7, #8]
 800be94:	1a83      	subs	r3, r0, r2
 800be96:	2b0f      	cmp	r3, #15
 800be98:	ddde      	ble.n	800be58 <_malloc_trim_r+0x3c>
 800be9a:	4c06      	ldr	r4, [pc, #24]	; (800beb4 <_malloc_trim_r+0x98>)
 800be9c:	4904      	ldr	r1, [pc, #16]	; (800beb0 <_malloc_trim_r+0x94>)
 800be9e:	6824      	ldr	r4, [r4, #0]
 800bea0:	f043 0301 	orr.w	r3, r3, #1
 800bea4:	1b00      	subs	r0, r0, r4
 800bea6:	6053      	str	r3, [r2, #4]
 800bea8:	6008      	str	r0, [r1, #0]
 800beaa:	e7d5      	b.n	800be58 <_malloc_trim_r+0x3c>
 800beac:	2000044c 	.word	0x2000044c
 800beb0:	20001ea8 	.word	0x20001ea8
 800beb4:	20000858 	.word	0x20000858

0800beb8 <_free_r>:
 800beb8:	2900      	cmp	r1, #0
 800beba:	d045      	beq.n	800bf48 <_free_r+0x90>
 800bebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bec0:	460d      	mov	r5, r1
 800bec2:	4680      	mov	r8, r0
 800bec4:	f000 fe2a 	bl	800cb1c <__malloc_lock>
 800bec8:	f855 7c04 	ldr.w	r7, [r5, #-4]
 800becc:	496a      	ldr	r1, [pc, #424]	; (800c078 <_free_r+0x1c0>)
 800bece:	f027 0301 	bic.w	r3, r7, #1
 800bed2:	f1a5 0408 	sub.w	r4, r5, #8
 800bed6:	18e2      	adds	r2, r4, r3
 800bed8:	688e      	ldr	r6, [r1, #8]
 800beda:	6850      	ldr	r0, [r2, #4]
 800bedc:	42b2      	cmp	r2, r6
 800bede:	f020 0003 	bic.w	r0, r0, #3
 800bee2:	d062      	beq.n	800bfaa <_free_r+0xf2>
 800bee4:	07fe      	lsls	r6, r7, #31
 800bee6:	6050      	str	r0, [r2, #4]
 800bee8:	d40b      	bmi.n	800bf02 <_free_r+0x4a>
 800beea:	f855 7c08 	ldr.w	r7, [r5, #-8]
 800beee:	1be4      	subs	r4, r4, r7
 800bef0:	f101 0e08 	add.w	lr, r1, #8
 800bef4:	68a5      	ldr	r5, [r4, #8]
 800bef6:	4575      	cmp	r5, lr
 800bef8:	443b      	add	r3, r7
 800befa:	d06f      	beq.n	800bfdc <_free_r+0x124>
 800befc:	68e7      	ldr	r7, [r4, #12]
 800befe:	60ef      	str	r7, [r5, #12]
 800bf00:	60bd      	str	r5, [r7, #8]
 800bf02:	1815      	adds	r5, r2, r0
 800bf04:	686d      	ldr	r5, [r5, #4]
 800bf06:	07ed      	lsls	r5, r5, #31
 800bf08:	d542      	bpl.n	800bf90 <_free_r+0xd8>
 800bf0a:	f043 0201 	orr.w	r2, r3, #1
 800bf0e:	6062      	str	r2, [r4, #4]
 800bf10:	50e3      	str	r3, [r4, r3]
 800bf12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf16:	d218      	bcs.n	800bf4a <_free_r+0x92>
 800bf18:	08db      	lsrs	r3, r3, #3
 800bf1a:	1c5a      	adds	r2, r3, #1
 800bf1c:	684d      	ldr	r5, [r1, #4]
 800bf1e:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
 800bf22:	60a7      	str	r7, [r4, #8]
 800bf24:	2001      	movs	r0, #1
 800bf26:	109b      	asrs	r3, r3, #2
 800bf28:	fa00 f303 	lsl.w	r3, r0, r3
 800bf2c:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
 800bf30:	431d      	orrs	r5, r3
 800bf32:	3808      	subs	r0, #8
 800bf34:	60e0      	str	r0, [r4, #12]
 800bf36:	604d      	str	r5, [r1, #4]
 800bf38:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
 800bf3c:	60fc      	str	r4, [r7, #12]
 800bf3e:	4640      	mov	r0, r8
 800bf40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf44:	f000 bdec 	b.w	800cb20 <__malloc_unlock>
 800bf48:	4770      	bx	lr
 800bf4a:	0a5a      	lsrs	r2, r3, #9
 800bf4c:	2a04      	cmp	r2, #4
 800bf4e:	d853      	bhi.n	800bff8 <_free_r+0x140>
 800bf50:	099a      	lsrs	r2, r3, #6
 800bf52:	f102 0739 	add.w	r7, r2, #57	; 0x39
 800bf56:	007f      	lsls	r7, r7, #1
 800bf58:	f102 0538 	add.w	r5, r2, #56	; 0x38
 800bf5c:	eb01 0087 	add.w	r0, r1, r7, lsl #2
 800bf60:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
 800bf64:	4944      	ldr	r1, [pc, #272]	; (800c078 <_free_r+0x1c0>)
 800bf66:	3808      	subs	r0, #8
 800bf68:	4290      	cmp	r0, r2
 800bf6a:	d04d      	beq.n	800c008 <_free_r+0x150>
 800bf6c:	6851      	ldr	r1, [r2, #4]
 800bf6e:	f021 0103 	bic.w	r1, r1, #3
 800bf72:	428b      	cmp	r3, r1
 800bf74:	d202      	bcs.n	800bf7c <_free_r+0xc4>
 800bf76:	6892      	ldr	r2, [r2, #8]
 800bf78:	4290      	cmp	r0, r2
 800bf7a:	d1f7      	bne.n	800bf6c <_free_r+0xb4>
 800bf7c:	68d0      	ldr	r0, [r2, #12]
 800bf7e:	60e0      	str	r0, [r4, #12]
 800bf80:	60a2      	str	r2, [r4, #8]
 800bf82:	6084      	str	r4, [r0, #8]
 800bf84:	60d4      	str	r4, [r2, #12]
 800bf86:	4640      	mov	r0, r8
 800bf88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf8c:	f000 bdc8 	b.w	800cb20 <__malloc_unlock>
 800bf90:	6895      	ldr	r5, [r2, #8]
 800bf92:	4f3a      	ldr	r7, [pc, #232]	; (800c07c <_free_r+0x1c4>)
 800bf94:	42bd      	cmp	r5, r7
 800bf96:	4403      	add	r3, r0
 800bf98:	d03f      	beq.n	800c01a <_free_r+0x162>
 800bf9a:	68d0      	ldr	r0, [r2, #12]
 800bf9c:	60e8      	str	r0, [r5, #12]
 800bf9e:	f043 0201 	orr.w	r2, r3, #1
 800bfa2:	6085      	str	r5, [r0, #8]
 800bfa4:	6062      	str	r2, [r4, #4]
 800bfa6:	50e3      	str	r3, [r4, r3]
 800bfa8:	e7b3      	b.n	800bf12 <_free_r+0x5a>
 800bfaa:	07ff      	lsls	r7, r7, #31
 800bfac:	4403      	add	r3, r0
 800bfae:	d407      	bmi.n	800bfc0 <_free_r+0x108>
 800bfb0:	f855 2c08 	ldr.w	r2, [r5, #-8]
 800bfb4:	1aa4      	subs	r4, r4, r2
 800bfb6:	4413      	add	r3, r2
 800bfb8:	68a0      	ldr	r0, [r4, #8]
 800bfba:	68e2      	ldr	r2, [r4, #12]
 800bfbc:	60c2      	str	r2, [r0, #12]
 800bfbe:	6090      	str	r0, [r2, #8]
 800bfc0:	4a2f      	ldr	r2, [pc, #188]	; (800c080 <_free_r+0x1c8>)
 800bfc2:	6812      	ldr	r2, [r2, #0]
 800bfc4:	f043 0001 	orr.w	r0, r3, #1
 800bfc8:	4293      	cmp	r3, r2
 800bfca:	6060      	str	r0, [r4, #4]
 800bfcc:	608c      	str	r4, [r1, #8]
 800bfce:	d3b6      	bcc.n	800bf3e <_free_r+0x86>
 800bfd0:	4b2c      	ldr	r3, [pc, #176]	; (800c084 <_free_r+0x1cc>)
 800bfd2:	4640      	mov	r0, r8
 800bfd4:	6819      	ldr	r1, [r3, #0]
 800bfd6:	f7ff ff21 	bl	800be1c <_malloc_trim_r>
 800bfda:	e7b0      	b.n	800bf3e <_free_r+0x86>
 800bfdc:	1811      	adds	r1, r2, r0
 800bfde:	6849      	ldr	r1, [r1, #4]
 800bfe0:	07c9      	lsls	r1, r1, #31
 800bfe2:	d444      	bmi.n	800c06e <_free_r+0x1b6>
 800bfe4:	6891      	ldr	r1, [r2, #8]
 800bfe6:	68d2      	ldr	r2, [r2, #12]
 800bfe8:	60ca      	str	r2, [r1, #12]
 800bfea:	4403      	add	r3, r0
 800bfec:	f043 0001 	orr.w	r0, r3, #1
 800bff0:	6091      	str	r1, [r2, #8]
 800bff2:	6060      	str	r0, [r4, #4]
 800bff4:	50e3      	str	r3, [r4, r3]
 800bff6:	e7a2      	b.n	800bf3e <_free_r+0x86>
 800bff8:	2a14      	cmp	r2, #20
 800bffa:	d817      	bhi.n	800c02c <_free_r+0x174>
 800bffc:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 800c000:	007f      	lsls	r7, r7, #1
 800c002:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 800c006:	e7a9      	b.n	800bf5c <_free_r+0xa4>
 800c008:	10aa      	asrs	r2, r5, #2
 800c00a:	684b      	ldr	r3, [r1, #4]
 800c00c:	2501      	movs	r5, #1
 800c00e:	fa05 f202 	lsl.w	r2, r5, r2
 800c012:	4313      	orrs	r3, r2
 800c014:	604b      	str	r3, [r1, #4]
 800c016:	4602      	mov	r2, r0
 800c018:	e7b1      	b.n	800bf7e <_free_r+0xc6>
 800c01a:	f043 0201 	orr.w	r2, r3, #1
 800c01e:	614c      	str	r4, [r1, #20]
 800c020:	610c      	str	r4, [r1, #16]
 800c022:	60e5      	str	r5, [r4, #12]
 800c024:	60a5      	str	r5, [r4, #8]
 800c026:	6062      	str	r2, [r4, #4]
 800c028:	50e3      	str	r3, [r4, r3]
 800c02a:	e788      	b.n	800bf3e <_free_r+0x86>
 800c02c:	2a54      	cmp	r2, #84	; 0x54
 800c02e:	d806      	bhi.n	800c03e <_free_r+0x186>
 800c030:	0b1a      	lsrs	r2, r3, #12
 800c032:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 800c036:	007f      	lsls	r7, r7, #1
 800c038:	f102 056e 	add.w	r5, r2, #110	; 0x6e
 800c03c:	e78e      	b.n	800bf5c <_free_r+0xa4>
 800c03e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800c042:	d806      	bhi.n	800c052 <_free_r+0x19a>
 800c044:	0bda      	lsrs	r2, r3, #15
 800c046:	f102 0778 	add.w	r7, r2, #120	; 0x78
 800c04a:	007f      	lsls	r7, r7, #1
 800c04c:	f102 0577 	add.w	r5, r2, #119	; 0x77
 800c050:	e784      	b.n	800bf5c <_free_r+0xa4>
 800c052:	f240 5054 	movw	r0, #1364	; 0x554
 800c056:	4282      	cmp	r2, r0
 800c058:	d806      	bhi.n	800c068 <_free_r+0x1b0>
 800c05a:	0c9a      	lsrs	r2, r3, #18
 800c05c:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 800c060:	007f      	lsls	r7, r7, #1
 800c062:	f102 057c 	add.w	r5, r2, #124	; 0x7c
 800c066:	e779      	b.n	800bf5c <_free_r+0xa4>
 800c068:	27fe      	movs	r7, #254	; 0xfe
 800c06a:	257e      	movs	r5, #126	; 0x7e
 800c06c:	e776      	b.n	800bf5c <_free_r+0xa4>
 800c06e:	f043 0201 	orr.w	r2, r3, #1
 800c072:	6062      	str	r2, [r4, #4]
 800c074:	50e3      	str	r3, [r4, r3]
 800c076:	e762      	b.n	800bf3e <_free_r+0x86>
 800c078:	2000044c 	.word	0x2000044c
 800c07c:	20000454 	.word	0x20000454
 800c080:	20000854 	.word	0x20000854
 800c084:	20001ea4 	.word	0x20001ea4

0800c088 <__sfvwrite_r>:
 800c088:	6893      	ldr	r3, [r2, #8]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d076      	beq.n	800c17c <__sfvwrite_r+0xf4>
 800c08e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c092:	898b      	ldrh	r3, [r1, #12]
 800c094:	b085      	sub	sp, #20
 800c096:	460c      	mov	r4, r1
 800c098:	0719      	lsls	r1, r3, #28
 800c09a:	9001      	str	r0, [sp, #4]
 800c09c:	4616      	mov	r6, r2
 800c09e:	d529      	bpl.n	800c0f4 <__sfvwrite_r+0x6c>
 800c0a0:	6922      	ldr	r2, [r4, #16]
 800c0a2:	b33a      	cbz	r2, 800c0f4 <__sfvwrite_r+0x6c>
 800c0a4:	f003 0802 	and.w	r8, r3, #2
 800c0a8:	fa1f f088 	uxth.w	r0, r8
 800c0ac:	6835      	ldr	r5, [r6, #0]
 800c0ae:	2800      	cmp	r0, #0
 800c0b0:	d02f      	beq.n	800c112 <__sfvwrite_r+0x8a>
 800c0b2:	f04f 0900 	mov.w	r9, #0
 800c0b6:	4fb4      	ldr	r7, [pc, #720]	; (800c388 <__sfvwrite_r+0x300>)
 800c0b8:	46c8      	mov	r8, r9
 800c0ba:	46b2      	mov	sl, r6
 800c0bc:	45b8      	cmp	r8, r7
 800c0be:	4643      	mov	r3, r8
 800c0c0:	464a      	mov	r2, r9
 800c0c2:	bf28      	it	cs
 800c0c4:	463b      	movcs	r3, r7
 800c0c6:	9801      	ldr	r0, [sp, #4]
 800c0c8:	f1b8 0f00 	cmp.w	r8, #0
 800c0cc:	d050      	beq.n	800c170 <__sfvwrite_r+0xe8>
 800c0ce:	69e1      	ldr	r1, [r4, #28]
 800c0d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c0d2:	47b0      	blx	r6
 800c0d4:	2800      	cmp	r0, #0
 800c0d6:	dd71      	ble.n	800c1bc <__sfvwrite_r+0x134>
 800c0d8:	f8da 3008 	ldr.w	r3, [sl, #8]
 800c0dc:	1a1b      	subs	r3, r3, r0
 800c0de:	4481      	add	r9, r0
 800c0e0:	ebc0 0808 	rsb	r8, r0, r8
 800c0e4:	f8ca 3008 	str.w	r3, [sl, #8]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d1e7      	bne.n	800c0bc <__sfvwrite_r+0x34>
 800c0ec:	2000      	movs	r0, #0
 800c0ee:	b005      	add	sp, #20
 800c0f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0f4:	4621      	mov	r1, r4
 800c0f6:	9801      	ldr	r0, [sp, #4]
 800c0f8:	f7fe fd2a 	bl	800ab50 <__swsetup_r>
 800c0fc:	2800      	cmp	r0, #0
 800c0fe:	f040 813a 	bne.w	800c376 <__sfvwrite_r+0x2ee>
 800c102:	89a3      	ldrh	r3, [r4, #12]
 800c104:	6835      	ldr	r5, [r6, #0]
 800c106:	f003 0802 	and.w	r8, r3, #2
 800c10a:	fa1f f088 	uxth.w	r0, r8
 800c10e:	2800      	cmp	r0, #0
 800c110:	d1cf      	bne.n	800c0b2 <__sfvwrite_r+0x2a>
 800c112:	f013 0901 	ands.w	r9, r3, #1
 800c116:	d15b      	bne.n	800c1d0 <__sfvwrite_r+0x148>
 800c118:	464f      	mov	r7, r9
 800c11a:	9602      	str	r6, [sp, #8]
 800c11c:	b31f      	cbz	r7, 800c166 <__sfvwrite_r+0xde>
 800c11e:	059a      	lsls	r2, r3, #22
 800c120:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800c124:	d52c      	bpl.n	800c180 <__sfvwrite_r+0xf8>
 800c126:	4547      	cmp	r7, r8
 800c128:	46c2      	mov	sl, r8
 800c12a:	f0c0 80a4 	bcc.w	800c276 <__sfvwrite_r+0x1ee>
 800c12e:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800c132:	f040 80b1 	bne.w	800c298 <__sfvwrite_r+0x210>
 800c136:	6820      	ldr	r0, [r4, #0]
 800c138:	4652      	mov	r2, sl
 800c13a:	4649      	mov	r1, r9
 800c13c:	f000 fc8a 	bl	800ca54 <memmove>
 800c140:	68a0      	ldr	r0, [r4, #8]
 800c142:	6823      	ldr	r3, [r4, #0]
 800c144:	ebc8 0000 	rsb	r0, r8, r0
 800c148:	4453      	add	r3, sl
 800c14a:	60a0      	str	r0, [r4, #8]
 800c14c:	6023      	str	r3, [r4, #0]
 800c14e:	4638      	mov	r0, r7
 800c150:	9a02      	ldr	r2, [sp, #8]
 800c152:	6893      	ldr	r3, [r2, #8]
 800c154:	1a1b      	subs	r3, r3, r0
 800c156:	4481      	add	r9, r0
 800c158:	1a3f      	subs	r7, r7, r0
 800c15a:	6093      	str	r3, [r2, #8]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d0c5      	beq.n	800c0ec <__sfvwrite_r+0x64>
 800c160:	89a3      	ldrh	r3, [r4, #12]
 800c162:	2f00      	cmp	r7, #0
 800c164:	d1db      	bne.n	800c11e <__sfvwrite_r+0x96>
 800c166:	f8d5 9000 	ldr.w	r9, [r5]
 800c16a:	686f      	ldr	r7, [r5, #4]
 800c16c:	3508      	adds	r5, #8
 800c16e:	e7d5      	b.n	800c11c <__sfvwrite_r+0x94>
 800c170:	f8d5 9000 	ldr.w	r9, [r5]
 800c174:	f8d5 8004 	ldr.w	r8, [r5, #4]
 800c178:	3508      	adds	r5, #8
 800c17a:	e79f      	b.n	800c0bc <__sfvwrite_r+0x34>
 800c17c:	2000      	movs	r0, #0
 800c17e:	4770      	bx	lr
 800c180:	6820      	ldr	r0, [r4, #0]
 800c182:	6923      	ldr	r3, [r4, #16]
 800c184:	4298      	cmp	r0, r3
 800c186:	d803      	bhi.n	800c190 <__sfvwrite_r+0x108>
 800c188:	6961      	ldr	r1, [r4, #20]
 800c18a:	428f      	cmp	r7, r1
 800c18c:	f080 80b7 	bcs.w	800c2fe <__sfvwrite_r+0x276>
 800c190:	45b8      	cmp	r8, r7
 800c192:	bf28      	it	cs
 800c194:	46b8      	movcs	r8, r7
 800c196:	4642      	mov	r2, r8
 800c198:	4649      	mov	r1, r9
 800c19a:	f000 fc5b 	bl	800ca54 <memmove>
 800c19e:	68a3      	ldr	r3, [r4, #8]
 800c1a0:	6822      	ldr	r2, [r4, #0]
 800c1a2:	ebc8 0303 	rsb	r3, r8, r3
 800c1a6:	4442      	add	r2, r8
 800c1a8:	60a3      	str	r3, [r4, #8]
 800c1aa:	6022      	str	r2, [r4, #0]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d149      	bne.n	800c244 <__sfvwrite_r+0x1bc>
 800c1b0:	4621      	mov	r1, r4
 800c1b2:	9801      	ldr	r0, [sp, #4]
 800c1b4:	f7ff fd94 	bl	800bce0 <_fflush_r>
 800c1b8:	2800      	cmp	r0, #0
 800c1ba:	d043      	beq.n	800c244 <__sfvwrite_r+0x1bc>
 800c1bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c1c8:	81a3      	strh	r3, [r4, #12]
 800c1ca:	b005      	add	sp, #20
 800c1cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1d0:	4680      	mov	r8, r0
 800c1d2:	9002      	str	r0, [sp, #8]
 800c1d4:	4682      	mov	sl, r0
 800c1d6:	4681      	mov	r9, r0
 800c1d8:	f1b9 0f00 	cmp.w	r9, #0
 800c1dc:	d02a      	beq.n	800c234 <__sfvwrite_r+0x1ac>
 800c1de:	9b02      	ldr	r3, [sp, #8]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d04c      	beq.n	800c27e <__sfvwrite_r+0x1f6>
 800c1e4:	6820      	ldr	r0, [r4, #0]
 800c1e6:	6923      	ldr	r3, [r4, #16]
 800c1e8:	6962      	ldr	r2, [r4, #20]
 800c1ea:	45c8      	cmp	r8, r9
 800c1ec:	46c3      	mov	fp, r8
 800c1ee:	bf28      	it	cs
 800c1f0:	46cb      	movcs	fp, r9
 800c1f2:	4298      	cmp	r0, r3
 800c1f4:	465f      	mov	r7, fp
 800c1f6:	d904      	bls.n	800c202 <__sfvwrite_r+0x17a>
 800c1f8:	68a3      	ldr	r3, [r4, #8]
 800c1fa:	4413      	add	r3, r2
 800c1fc:	459b      	cmp	fp, r3
 800c1fe:	f300 8090 	bgt.w	800c322 <__sfvwrite_r+0x29a>
 800c202:	4593      	cmp	fp, r2
 800c204:	db20      	blt.n	800c248 <__sfvwrite_r+0x1c0>
 800c206:	4613      	mov	r3, r2
 800c208:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800c20a:	69e1      	ldr	r1, [r4, #28]
 800c20c:	9801      	ldr	r0, [sp, #4]
 800c20e:	4652      	mov	r2, sl
 800c210:	47b8      	blx	r7
 800c212:	1e07      	subs	r7, r0, #0
 800c214:	ddd2      	ble.n	800c1bc <__sfvwrite_r+0x134>
 800c216:	ebb8 0807 	subs.w	r8, r8, r7
 800c21a:	d023      	beq.n	800c264 <__sfvwrite_r+0x1dc>
 800c21c:	68b3      	ldr	r3, [r6, #8]
 800c21e:	1bdb      	subs	r3, r3, r7
 800c220:	44ba      	add	sl, r7
 800c222:	ebc7 0909 	rsb	r9, r7, r9
 800c226:	60b3      	str	r3, [r6, #8]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	f43f af5f 	beq.w	800c0ec <__sfvwrite_r+0x64>
 800c22e:	f1b9 0f00 	cmp.w	r9, #0
 800c232:	d1d4      	bne.n	800c1de <__sfvwrite_r+0x156>
 800c234:	2300      	movs	r3, #0
 800c236:	f8d5 a000 	ldr.w	sl, [r5]
 800c23a:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800c23e:	9302      	str	r3, [sp, #8]
 800c240:	3508      	adds	r5, #8
 800c242:	e7c9      	b.n	800c1d8 <__sfvwrite_r+0x150>
 800c244:	4640      	mov	r0, r8
 800c246:	e783      	b.n	800c150 <__sfvwrite_r+0xc8>
 800c248:	465a      	mov	r2, fp
 800c24a:	4651      	mov	r1, sl
 800c24c:	f000 fc02 	bl	800ca54 <memmove>
 800c250:	68a2      	ldr	r2, [r4, #8]
 800c252:	6823      	ldr	r3, [r4, #0]
 800c254:	ebcb 0202 	rsb	r2, fp, r2
 800c258:	445b      	add	r3, fp
 800c25a:	ebb8 0807 	subs.w	r8, r8, r7
 800c25e:	60a2      	str	r2, [r4, #8]
 800c260:	6023      	str	r3, [r4, #0]
 800c262:	d1db      	bne.n	800c21c <__sfvwrite_r+0x194>
 800c264:	4621      	mov	r1, r4
 800c266:	9801      	ldr	r0, [sp, #4]
 800c268:	f7ff fd3a 	bl	800bce0 <_fflush_r>
 800c26c:	2800      	cmp	r0, #0
 800c26e:	d1a5      	bne.n	800c1bc <__sfvwrite_r+0x134>
 800c270:	f8cd 8008 	str.w	r8, [sp, #8]
 800c274:	e7d2      	b.n	800c21c <__sfvwrite_r+0x194>
 800c276:	6820      	ldr	r0, [r4, #0]
 800c278:	46b8      	mov	r8, r7
 800c27a:	46ba      	mov	sl, r7
 800c27c:	e75c      	b.n	800c138 <__sfvwrite_r+0xb0>
 800c27e:	464a      	mov	r2, r9
 800c280:	210a      	movs	r1, #10
 800c282:	4650      	mov	r0, sl
 800c284:	f7f4 faec 	bl	8000860 <memchr>
 800c288:	2800      	cmp	r0, #0
 800c28a:	d06f      	beq.n	800c36c <__sfvwrite_r+0x2e4>
 800c28c:	3001      	adds	r0, #1
 800c28e:	2301      	movs	r3, #1
 800c290:	ebca 0800 	rsb	r8, sl, r0
 800c294:	9302      	str	r3, [sp, #8]
 800c296:	e7a5      	b.n	800c1e4 <__sfvwrite_r+0x15c>
 800c298:	6962      	ldr	r2, [r4, #20]
 800c29a:	6820      	ldr	r0, [r4, #0]
 800c29c:	6921      	ldr	r1, [r4, #16]
 800c29e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
 800c2a2:	ebc1 0a00 	rsb	sl, r1, r0
 800c2a6:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
 800c2aa:	f10a 0001 	add.w	r0, sl, #1
 800c2ae:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c2b2:	4438      	add	r0, r7
 800c2b4:	4540      	cmp	r0, r8
 800c2b6:	4642      	mov	r2, r8
 800c2b8:	bf84      	itt	hi
 800c2ba:	4680      	movhi	r8, r0
 800c2bc:	4642      	movhi	r2, r8
 800c2be:	055b      	lsls	r3, r3, #21
 800c2c0:	d542      	bpl.n	800c348 <__sfvwrite_r+0x2c0>
 800c2c2:	4611      	mov	r1, r2
 800c2c4:	9801      	ldr	r0, [sp, #4]
 800c2c6:	f000 f90d 	bl	800c4e4 <_malloc_r>
 800c2ca:	4683      	mov	fp, r0
 800c2cc:	2800      	cmp	r0, #0
 800c2ce:	d055      	beq.n	800c37c <__sfvwrite_r+0x2f4>
 800c2d0:	4652      	mov	r2, sl
 800c2d2:	6921      	ldr	r1, [r4, #16]
 800c2d4:	f7f4 f9a6 	bl	8000624 <memcpy>
 800c2d8:	89a3      	ldrh	r3, [r4, #12]
 800c2da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c2de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2e2:	81a3      	strh	r3, [r4, #12]
 800c2e4:	ebca 0308 	rsb	r3, sl, r8
 800c2e8:	eb0b 000a 	add.w	r0, fp, sl
 800c2ec:	f8c4 8014 	str.w	r8, [r4, #20]
 800c2f0:	f8c4 b010 	str.w	fp, [r4, #16]
 800c2f4:	6020      	str	r0, [r4, #0]
 800c2f6:	60a3      	str	r3, [r4, #8]
 800c2f8:	46b8      	mov	r8, r7
 800c2fa:	46ba      	mov	sl, r7
 800c2fc:	e71c      	b.n	800c138 <__sfvwrite_r+0xb0>
 800c2fe:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c302:	42bb      	cmp	r3, r7
 800c304:	bf28      	it	cs
 800c306:	463b      	movcs	r3, r7
 800c308:	464a      	mov	r2, r9
 800c30a:	fb93 f3f1 	sdiv	r3, r3, r1
 800c30e:	9801      	ldr	r0, [sp, #4]
 800c310:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c312:	fb01 f303 	mul.w	r3, r1, r3
 800c316:	69e1      	ldr	r1, [r4, #28]
 800c318:	47b0      	blx	r6
 800c31a:	2800      	cmp	r0, #0
 800c31c:	f73f af18 	bgt.w	800c150 <__sfvwrite_r+0xc8>
 800c320:	e74c      	b.n	800c1bc <__sfvwrite_r+0x134>
 800c322:	461a      	mov	r2, r3
 800c324:	4651      	mov	r1, sl
 800c326:	9303      	str	r3, [sp, #12]
 800c328:	f000 fb94 	bl	800ca54 <memmove>
 800c32c:	6822      	ldr	r2, [r4, #0]
 800c32e:	9b03      	ldr	r3, [sp, #12]
 800c330:	9801      	ldr	r0, [sp, #4]
 800c332:	441a      	add	r2, r3
 800c334:	6022      	str	r2, [r4, #0]
 800c336:	4621      	mov	r1, r4
 800c338:	f7ff fcd2 	bl	800bce0 <_fflush_r>
 800c33c:	9b03      	ldr	r3, [sp, #12]
 800c33e:	2800      	cmp	r0, #0
 800c340:	f47f af3c 	bne.w	800c1bc <__sfvwrite_r+0x134>
 800c344:	461f      	mov	r7, r3
 800c346:	e766      	b.n	800c216 <__sfvwrite_r+0x18e>
 800c348:	9801      	ldr	r0, [sp, #4]
 800c34a:	f000 fef9 	bl	800d140 <_realloc_r>
 800c34e:	4683      	mov	fp, r0
 800c350:	2800      	cmp	r0, #0
 800c352:	d1c7      	bne.n	800c2e4 <__sfvwrite_r+0x25c>
 800c354:	9d01      	ldr	r5, [sp, #4]
 800c356:	6921      	ldr	r1, [r4, #16]
 800c358:	4628      	mov	r0, r5
 800c35a:	f7ff fdad 	bl	800beb8 <_free_r>
 800c35e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c362:	220c      	movs	r2, #12
 800c364:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c368:	602a      	str	r2, [r5, #0]
 800c36a:	e729      	b.n	800c1c0 <__sfvwrite_r+0x138>
 800c36c:	2301      	movs	r3, #1
 800c36e:	f109 0801 	add.w	r8, r9, #1
 800c372:	9302      	str	r3, [sp, #8]
 800c374:	e736      	b.n	800c1e4 <__sfvwrite_r+0x15c>
 800c376:	f04f 30ff 	mov.w	r0, #4294967295
 800c37a:	e6b8      	b.n	800c0ee <__sfvwrite_r+0x66>
 800c37c:	9a01      	ldr	r2, [sp, #4]
 800c37e:	230c      	movs	r3, #12
 800c380:	6013      	str	r3, [r2, #0]
 800c382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c386:	e71b      	b.n	800c1c0 <__sfvwrite_r+0x138>
 800c388:	7ffffc00 	.word	0x7ffffc00

0800c38c <_fwalk_reent>:
 800c38c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c390:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 800c394:	d01f      	beq.n	800c3d6 <_fwalk_reent+0x4a>
 800c396:	4688      	mov	r8, r1
 800c398:	4606      	mov	r6, r0
 800c39a:	f04f 0900 	mov.w	r9, #0
 800c39e:	687d      	ldr	r5, [r7, #4]
 800c3a0:	68bc      	ldr	r4, [r7, #8]
 800c3a2:	3d01      	subs	r5, #1
 800c3a4:	d411      	bmi.n	800c3ca <_fwalk_reent+0x3e>
 800c3a6:	89a3      	ldrh	r3, [r4, #12]
 800c3a8:	2b01      	cmp	r3, #1
 800c3aa:	f105 35ff 	add.w	r5, r5, #4294967295
 800c3ae:	d908      	bls.n	800c3c2 <_fwalk_reent+0x36>
 800c3b0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800c3b4:	3301      	adds	r3, #1
 800c3b6:	4621      	mov	r1, r4
 800c3b8:	4630      	mov	r0, r6
 800c3ba:	d002      	beq.n	800c3c2 <_fwalk_reent+0x36>
 800c3bc:	47c0      	blx	r8
 800c3be:	ea49 0900 	orr.w	r9, r9, r0
 800c3c2:	1c6b      	adds	r3, r5, #1
 800c3c4:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800c3c8:	d1ed      	bne.n	800c3a6 <_fwalk_reent+0x1a>
 800c3ca:	683f      	ldr	r7, [r7, #0]
 800c3cc:	2f00      	cmp	r7, #0
 800c3ce:	d1e6      	bne.n	800c39e <_fwalk_reent+0x12>
 800c3d0:	4648      	mov	r0, r9
 800c3d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3d6:	46b9      	mov	r9, r7
 800c3d8:	4648      	mov	r0, r9
 800c3da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3de:	bf00      	nop

0800c3e0 <_localeconv_r>:
 800c3e0:	4a04      	ldr	r2, [pc, #16]	; (800c3f4 <_localeconv_r+0x14>)
 800c3e2:	4b05      	ldr	r3, [pc, #20]	; (800c3f8 <_localeconv_r+0x18>)
 800c3e4:	6812      	ldr	r2, [r2, #0]
 800c3e6:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800c3e8:	2800      	cmp	r0, #0
 800c3ea:	bf08      	it	eq
 800c3ec:	4618      	moveq	r0, r3
 800c3ee:	30f0      	adds	r0, #240	; 0xf0
 800c3f0:	4770      	bx	lr
 800c3f2:	bf00      	nop
 800c3f4:	20000448 	.word	0x20000448
 800c3f8:	2000085c 	.word	0x2000085c

0800c3fc <__swhatbuf_r>:
 800c3fc:	b570      	push	{r4, r5, r6, lr}
 800c3fe:	460d      	mov	r5, r1
 800c400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c404:	2900      	cmp	r1, #0
 800c406:	b090      	sub	sp, #64	; 0x40
 800c408:	4614      	mov	r4, r2
 800c40a:	461e      	mov	r6, r3
 800c40c:	db14      	blt.n	800c438 <__swhatbuf_r+0x3c>
 800c40e:	aa01      	add	r2, sp, #4
 800c410:	f001 fa9a 	bl	800d948 <_fstat_r>
 800c414:	2800      	cmp	r0, #0
 800c416:	db0f      	blt.n	800c438 <__swhatbuf_r+0x3c>
 800c418:	9a02      	ldr	r2, [sp, #8]
 800c41a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c41e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
 800c422:	fab2 f282 	clz	r2, r2
 800c426:	0952      	lsrs	r2, r2, #5
 800c428:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c42c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c430:	6032      	str	r2, [r6, #0]
 800c432:	6023      	str	r3, [r4, #0]
 800c434:	b010      	add	sp, #64	; 0x40
 800c436:	bd70      	pop	{r4, r5, r6, pc}
 800c438:	89a8      	ldrh	r0, [r5, #12]
 800c43a:	f000 0080 	and.w	r0, r0, #128	; 0x80
 800c43e:	b282      	uxth	r2, r0
 800c440:	2000      	movs	r0, #0
 800c442:	6030      	str	r0, [r6, #0]
 800c444:	b11a      	cbz	r2, 800c44e <__swhatbuf_r+0x52>
 800c446:	2340      	movs	r3, #64	; 0x40
 800c448:	6023      	str	r3, [r4, #0]
 800c44a:	b010      	add	sp, #64	; 0x40
 800c44c:	bd70      	pop	{r4, r5, r6, pc}
 800c44e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c452:	4610      	mov	r0, r2
 800c454:	6023      	str	r3, [r4, #0]
 800c456:	b010      	add	sp, #64	; 0x40
 800c458:	bd70      	pop	{r4, r5, r6, pc}
 800c45a:	bf00      	nop

0800c45c <__smakebuf_r>:
 800c45c:	898a      	ldrh	r2, [r1, #12]
 800c45e:	0792      	lsls	r2, r2, #30
 800c460:	460b      	mov	r3, r1
 800c462:	d506      	bpl.n	800c472 <__smakebuf_r+0x16>
 800c464:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c468:	2101      	movs	r1, #1
 800c46a:	601a      	str	r2, [r3, #0]
 800c46c:	611a      	str	r2, [r3, #16]
 800c46e:	6159      	str	r1, [r3, #20]
 800c470:	4770      	bx	lr
 800c472:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c474:	b083      	sub	sp, #12
 800c476:	ab01      	add	r3, sp, #4
 800c478:	466a      	mov	r2, sp
 800c47a:	460c      	mov	r4, r1
 800c47c:	4605      	mov	r5, r0
 800c47e:	f7ff ffbd 	bl	800c3fc <__swhatbuf_r>
 800c482:	9900      	ldr	r1, [sp, #0]
 800c484:	4606      	mov	r6, r0
 800c486:	4628      	mov	r0, r5
 800c488:	f000 f82c 	bl	800c4e4 <_malloc_r>
 800c48c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c490:	b1d0      	cbz	r0, 800c4c8 <__smakebuf_r+0x6c>
 800c492:	9a01      	ldr	r2, [sp, #4]
 800c494:	4f12      	ldr	r7, [pc, #72]	; (800c4e0 <__smakebuf_r+0x84>)
 800c496:	9900      	ldr	r1, [sp, #0]
 800c498:	63ef      	str	r7, [r5, #60]	; 0x3c
 800c49a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c49e:	81a3      	strh	r3, [r4, #12]
 800c4a0:	6020      	str	r0, [r4, #0]
 800c4a2:	6120      	str	r0, [r4, #16]
 800c4a4:	6161      	str	r1, [r4, #20]
 800c4a6:	b91a      	cbnz	r2, 800c4b0 <__smakebuf_r+0x54>
 800c4a8:	4333      	orrs	r3, r6
 800c4aa:	81a3      	strh	r3, [r4, #12]
 800c4ac:	b003      	add	sp, #12
 800c4ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4b0:	4628      	mov	r0, r5
 800c4b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4b6:	f001 fa5b 	bl	800d970 <_isatty_r>
 800c4ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4be:	2800      	cmp	r0, #0
 800c4c0:	d0f2      	beq.n	800c4a8 <__smakebuf_r+0x4c>
 800c4c2:	f043 0301 	orr.w	r3, r3, #1
 800c4c6:	e7ef      	b.n	800c4a8 <__smakebuf_r+0x4c>
 800c4c8:	059a      	lsls	r2, r3, #22
 800c4ca:	d4ef      	bmi.n	800c4ac <__smakebuf_r+0x50>
 800c4cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c4d0:	f043 0302 	orr.w	r3, r3, #2
 800c4d4:	2101      	movs	r1, #1
 800c4d6:	81a3      	strh	r3, [r4, #12]
 800c4d8:	6022      	str	r2, [r4, #0]
 800c4da:	6122      	str	r2, [r4, #16]
 800c4dc:	6161      	str	r1, [r4, #20]
 800c4de:	e7e5      	b.n	800c4ac <__smakebuf_r+0x50>
 800c4e0:	0800bd0d 	.word	0x0800bd0d

0800c4e4 <_malloc_r>:
 800c4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4e8:	f101 050b 	add.w	r5, r1, #11
 800c4ec:	2d16      	cmp	r5, #22
 800c4ee:	b083      	sub	sp, #12
 800c4f0:	4606      	mov	r6, r0
 800c4f2:	f240 809f 	bls.w	800c634 <_malloc_r+0x150>
 800c4f6:	f035 0507 	bics.w	r5, r5, #7
 800c4fa:	f100 80bf 	bmi.w	800c67c <_malloc_r+0x198>
 800c4fe:	42a9      	cmp	r1, r5
 800c500:	f200 80bc 	bhi.w	800c67c <_malloc_r+0x198>
 800c504:	f000 fb0a 	bl	800cb1c <__malloc_lock>
 800c508:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 800c50c:	f0c0 829c 	bcc.w	800ca48 <_malloc_r+0x564>
 800c510:	0a6b      	lsrs	r3, r5, #9
 800c512:	f000 80ba 	beq.w	800c68a <_malloc_r+0x1a6>
 800c516:	2b04      	cmp	r3, #4
 800c518:	f200 8183 	bhi.w	800c822 <_malloc_r+0x33e>
 800c51c:	09a8      	lsrs	r0, r5, #6
 800c51e:	f100 0e39 	add.w	lr, r0, #57	; 0x39
 800c522:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800c526:	3038      	adds	r0, #56	; 0x38
 800c528:	4fc4      	ldr	r7, [pc, #784]	; (800c83c <_malloc_r+0x358>)
 800c52a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800c52e:	f1a3 0108 	sub.w	r1, r3, #8
 800c532:	685c      	ldr	r4, [r3, #4]
 800c534:	42a1      	cmp	r1, r4
 800c536:	d107      	bne.n	800c548 <_malloc_r+0x64>
 800c538:	e0ac      	b.n	800c694 <_malloc_r+0x1b0>
 800c53a:	2a00      	cmp	r2, #0
 800c53c:	f280 80ac 	bge.w	800c698 <_malloc_r+0x1b4>
 800c540:	68e4      	ldr	r4, [r4, #12]
 800c542:	42a1      	cmp	r1, r4
 800c544:	f000 80a6 	beq.w	800c694 <_malloc_r+0x1b0>
 800c548:	6863      	ldr	r3, [r4, #4]
 800c54a:	f023 0303 	bic.w	r3, r3, #3
 800c54e:	1b5a      	subs	r2, r3, r5
 800c550:	2a0f      	cmp	r2, #15
 800c552:	ddf2      	ble.n	800c53a <_malloc_r+0x56>
 800c554:	49b9      	ldr	r1, [pc, #740]	; (800c83c <_malloc_r+0x358>)
 800c556:	693c      	ldr	r4, [r7, #16]
 800c558:	f101 0e08 	add.w	lr, r1, #8
 800c55c:	4574      	cmp	r4, lr
 800c55e:	f000 81b3 	beq.w	800c8c8 <_malloc_r+0x3e4>
 800c562:	6863      	ldr	r3, [r4, #4]
 800c564:	f023 0303 	bic.w	r3, r3, #3
 800c568:	1b5a      	subs	r2, r3, r5
 800c56a:	2a0f      	cmp	r2, #15
 800c56c:	f300 8199 	bgt.w	800c8a2 <_malloc_r+0x3be>
 800c570:	2a00      	cmp	r2, #0
 800c572:	f8c1 e014 	str.w	lr, [r1, #20]
 800c576:	f8c1 e010 	str.w	lr, [r1, #16]
 800c57a:	f280 809e 	bge.w	800c6ba <_malloc_r+0x1d6>
 800c57e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c582:	f080 8167 	bcs.w	800c854 <_malloc_r+0x370>
 800c586:	08db      	lsrs	r3, r3, #3
 800c588:	f103 0c01 	add.w	ip, r3, #1
 800c58c:	2201      	movs	r2, #1
 800c58e:	109b      	asrs	r3, r3, #2
 800c590:	fa02 f303 	lsl.w	r3, r2, r3
 800c594:	684a      	ldr	r2, [r1, #4]
 800c596:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
 800c59a:	f8c4 8008 	str.w	r8, [r4, #8]
 800c59e:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
 800c5a2:	431a      	orrs	r2, r3
 800c5a4:	f1a9 0308 	sub.w	r3, r9, #8
 800c5a8:	60e3      	str	r3, [r4, #12]
 800c5aa:	604a      	str	r2, [r1, #4]
 800c5ac:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
 800c5b0:	f8c8 400c 	str.w	r4, [r8, #12]
 800c5b4:	1083      	asrs	r3, r0, #2
 800c5b6:	2401      	movs	r4, #1
 800c5b8:	409c      	lsls	r4, r3
 800c5ba:	4294      	cmp	r4, r2
 800c5bc:	f200 808a 	bhi.w	800c6d4 <_malloc_r+0x1f0>
 800c5c0:	4214      	tst	r4, r2
 800c5c2:	d106      	bne.n	800c5d2 <_malloc_r+0xee>
 800c5c4:	f020 0003 	bic.w	r0, r0, #3
 800c5c8:	0064      	lsls	r4, r4, #1
 800c5ca:	4214      	tst	r4, r2
 800c5cc:	f100 0004 	add.w	r0, r0, #4
 800c5d0:	d0fa      	beq.n	800c5c8 <_malloc_r+0xe4>
 800c5d2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 800c5d6:	46cc      	mov	ip, r9
 800c5d8:	4680      	mov	r8, r0
 800c5da:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800c5de:	458c      	cmp	ip, r1
 800c5e0:	d107      	bne.n	800c5f2 <_malloc_r+0x10e>
 800c5e2:	e173      	b.n	800c8cc <_malloc_r+0x3e8>
 800c5e4:	2a00      	cmp	r2, #0
 800c5e6:	f280 8181 	bge.w	800c8ec <_malloc_r+0x408>
 800c5ea:	68c9      	ldr	r1, [r1, #12]
 800c5ec:	458c      	cmp	ip, r1
 800c5ee:	f000 816d 	beq.w	800c8cc <_malloc_r+0x3e8>
 800c5f2:	684b      	ldr	r3, [r1, #4]
 800c5f4:	f023 0303 	bic.w	r3, r3, #3
 800c5f8:	1b5a      	subs	r2, r3, r5
 800c5fa:	2a0f      	cmp	r2, #15
 800c5fc:	ddf2      	ble.n	800c5e4 <_malloc_r+0x100>
 800c5fe:	460c      	mov	r4, r1
 800c600:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800c604:	f854 8f08 	ldr.w	r8, [r4, #8]!
 800c608:	194b      	adds	r3, r1, r5
 800c60a:	f045 0501 	orr.w	r5, r5, #1
 800c60e:	604d      	str	r5, [r1, #4]
 800c610:	f042 0101 	orr.w	r1, r2, #1
 800c614:	f8c8 c00c 	str.w	ip, [r8, #12]
 800c618:	4630      	mov	r0, r6
 800c61a:	f8cc 8008 	str.w	r8, [ip, #8]
 800c61e:	617b      	str	r3, [r7, #20]
 800c620:	613b      	str	r3, [r7, #16]
 800c622:	f8c3 e00c 	str.w	lr, [r3, #12]
 800c626:	f8c3 e008 	str.w	lr, [r3, #8]
 800c62a:	6059      	str	r1, [r3, #4]
 800c62c:	509a      	str	r2, [r3, r2]
 800c62e:	f000 fa77 	bl	800cb20 <__malloc_unlock>
 800c632:	e01f      	b.n	800c674 <_malloc_r+0x190>
 800c634:	2910      	cmp	r1, #16
 800c636:	d821      	bhi.n	800c67c <_malloc_r+0x198>
 800c638:	f000 fa70 	bl	800cb1c <__malloc_lock>
 800c63c:	2510      	movs	r5, #16
 800c63e:	2306      	movs	r3, #6
 800c640:	2002      	movs	r0, #2
 800c642:	4f7e      	ldr	r7, [pc, #504]	; (800c83c <_malloc_r+0x358>)
 800c644:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800c648:	f1a3 0208 	sub.w	r2, r3, #8
 800c64c:	685c      	ldr	r4, [r3, #4]
 800c64e:	4294      	cmp	r4, r2
 800c650:	f000 8145 	beq.w	800c8de <_malloc_r+0x3fa>
 800c654:	6863      	ldr	r3, [r4, #4]
 800c656:	68e1      	ldr	r1, [r4, #12]
 800c658:	68a5      	ldr	r5, [r4, #8]
 800c65a:	f023 0303 	bic.w	r3, r3, #3
 800c65e:	4423      	add	r3, r4
 800c660:	4630      	mov	r0, r6
 800c662:	685a      	ldr	r2, [r3, #4]
 800c664:	60e9      	str	r1, [r5, #12]
 800c666:	f042 0201 	orr.w	r2, r2, #1
 800c66a:	608d      	str	r5, [r1, #8]
 800c66c:	605a      	str	r2, [r3, #4]
 800c66e:	f000 fa57 	bl	800cb20 <__malloc_unlock>
 800c672:	3408      	adds	r4, #8
 800c674:	4620      	mov	r0, r4
 800c676:	b003      	add	sp, #12
 800c678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c67c:	2400      	movs	r4, #0
 800c67e:	230c      	movs	r3, #12
 800c680:	4620      	mov	r0, r4
 800c682:	6033      	str	r3, [r6, #0]
 800c684:	b003      	add	sp, #12
 800c686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c68a:	2380      	movs	r3, #128	; 0x80
 800c68c:	f04f 0e40 	mov.w	lr, #64	; 0x40
 800c690:	203f      	movs	r0, #63	; 0x3f
 800c692:	e749      	b.n	800c528 <_malloc_r+0x44>
 800c694:	4670      	mov	r0, lr
 800c696:	e75d      	b.n	800c554 <_malloc_r+0x70>
 800c698:	4423      	add	r3, r4
 800c69a:	68e1      	ldr	r1, [r4, #12]
 800c69c:	685a      	ldr	r2, [r3, #4]
 800c69e:	68a5      	ldr	r5, [r4, #8]
 800c6a0:	f042 0201 	orr.w	r2, r2, #1
 800c6a4:	60e9      	str	r1, [r5, #12]
 800c6a6:	4630      	mov	r0, r6
 800c6a8:	608d      	str	r5, [r1, #8]
 800c6aa:	605a      	str	r2, [r3, #4]
 800c6ac:	f000 fa38 	bl	800cb20 <__malloc_unlock>
 800c6b0:	3408      	adds	r4, #8
 800c6b2:	4620      	mov	r0, r4
 800c6b4:	b003      	add	sp, #12
 800c6b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6ba:	4423      	add	r3, r4
 800c6bc:	4630      	mov	r0, r6
 800c6be:	685a      	ldr	r2, [r3, #4]
 800c6c0:	f042 0201 	orr.w	r2, r2, #1
 800c6c4:	605a      	str	r2, [r3, #4]
 800c6c6:	f000 fa2b 	bl	800cb20 <__malloc_unlock>
 800c6ca:	3408      	adds	r4, #8
 800c6cc:	4620      	mov	r0, r4
 800c6ce:	b003      	add	sp, #12
 800c6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6d4:	68bc      	ldr	r4, [r7, #8]
 800c6d6:	6863      	ldr	r3, [r4, #4]
 800c6d8:	f023 0803 	bic.w	r8, r3, #3
 800c6dc:	45a8      	cmp	r8, r5
 800c6de:	d304      	bcc.n	800c6ea <_malloc_r+0x206>
 800c6e0:	ebc5 0308 	rsb	r3, r5, r8
 800c6e4:	2b0f      	cmp	r3, #15
 800c6e6:	f300 808c 	bgt.w	800c802 <_malloc_r+0x31e>
 800c6ea:	4b55      	ldr	r3, [pc, #340]	; (800c840 <_malloc_r+0x35c>)
 800c6ec:	f8df 9160 	ldr.w	r9, [pc, #352]	; 800c850 <_malloc_r+0x36c>
 800c6f0:	681a      	ldr	r2, [r3, #0]
 800c6f2:	f8d9 3000 	ldr.w	r3, [r9]
 800c6f6:	3301      	adds	r3, #1
 800c6f8:	442a      	add	r2, r5
 800c6fa:	eb04 0a08 	add.w	sl, r4, r8
 800c6fe:	f000 8160 	beq.w	800c9c2 <_malloc_r+0x4de>
 800c702:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c706:	320f      	adds	r2, #15
 800c708:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800c70c:	f022 020f 	bic.w	r2, r2, #15
 800c710:	4611      	mov	r1, r2
 800c712:	4630      	mov	r0, r6
 800c714:	9201      	str	r2, [sp, #4]
 800c716:	f000 ff03 	bl	800d520 <_sbrk_r>
 800c71a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c71e:	4683      	mov	fp, r0
 800c720:	9a01      	ldr	r2, [sp, #4]
 800c722:	f000 8158 	beq.w	800c9d6 <_malloc_r+0x4f2>
 800c726:	4582      	cmp	sl, r0
 800c728:	f200 80fc 	bhi.w	800c924 <_malloc_r+0x440>
 800c72c:	4b45      	ldr	r3, [pc, #276]	; (800c844 <_malloc_r+0x360>)
 800c72e:	6819      	ldr	r1, [r3, #0]
 800c730:	45da      	cmp	sl, fp
 800c732:	4411      	add	r1, r2
 800c734:	6019      	str	r1, [r3, #0]
 800c736:	f000 8153 	beq.w	800c9e0 <_malloc_r+0x4fc>
 800c73a:	f8d9 0000 	ldr.w	r0, [r9]
 800c73e:	f8df e110 	ldr.w	lr, [pc, #272]	; 800c850 <_malloc_r+0x36c>
 800c742:	3001      	adds	r0, #1
 800c744:	bf1b      	ittet	ne
 800c746:	ebca 0a0b 	rsbne	sl, sl, fp
 800c74a:	4451      	addne	r1, sl
 800c74c:	f8ce b000 	streq.w	fp, [lr]
 800c750:	6019      	strne	r1, [r3, #0]
 800c752:	f01b 0107 	ands.w	r1, fp, #7
 800c756:	f000 8117 	beq.w	800c988 <_malloc_r+0x4a4>
 800c75a:	f1c1 0008 	rsb	r0, r1, #8
 800c75e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 800c762:	4483      	add	fp, r0
 800c764:	3108      	adds	r1, #8
 800c766:	445a      	add	r2, fp
 800c768:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800c76c:	ebc2 0901 	rsb	r9, r2, r1
 800c770:	4649      	mov	r1, r9
 800c772:	4630      	mov	r0, r6
 800c774:	9301      	str	r3, [sp, #4]
 800c776:	f000 fed3 	bl	800d520 <_sbrk_r>
 800c77a:	1c43      	adds	r3, r0, #1
 800c77c:	9b01      	ldr	r3, [sp, #4]
 800c77e:	f000 813f 	beq.w	800ca00 <_malloc_r+0x51c>
 800c782:	ebcb 0200 	rsb	r2, fp, r0
 800c786:	444a      	add	r2, r9
 800c788:	f042 0201 	orr.w	r2, r2, #1
 800c78c:	6819      	ldr	r1, [r3, #0]
 800c78e:	f8c7 b008 	str.w	fp, [r7, #8]
 800c792:	4449      	add	r1, r9
 800c794:	42bc      	cmp	r4, r7
 800c796:	f8cb 2004 	str.w	r2, [fp, #4]
 800c79a:	6019      	str	r1, [r3, #0]
 800c79c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 800c844 <_malloc_r+0x360>
 800c7a0:	d016      	beq.n	800c7d0 <_malloc_r+0x2ec>
 800c7a2:	f1b8 0f0f 	cmp.w	r8, #15
 800c7a6:	f240 80fd 	bls.w	800c9a4 <_malloc_r+0x4c0>
 800c7aa:	6862      	ldr	r2, [r4, #4]
 800c7ac:	f1a8 030c 	sub.w	r3, r8, #12
 800c7b0:	f023 0307 	bic.w	r3, r3, #7
 800c7b4:	18e0      	adds	r0, r4, r3
 800c7b6:	f002 0201 	and.w	r2, r2, #1
 800c7ba:	f04f 0e05 	mov.w	lr, #5
 800c7be:	431a      	orrs	r2, r3
 800c7c0:	2b0f      	cmp	r3, #15
 800c7c2:	6062      	str	r2, [r4, #4]
 800c7c4:	f8c0 e004 	str.w	lr, [r0, #4]
 800c7c8:	f8c0 e008 	str.w	lr, [r0, #8]
 800c7cc:	f200 811c 	bhi.w	800ca08 <_malloc_r+0x524>
 800c7d0:	4b1d      	ldr	r3, [pc, #116]	; (800c848 <_malloc_r+0x364>)
 800c7d2:	68bc      	ldr	r4, [r7, #8]
 800c7d4:	681a      	ldr	r2, [r3, #0]
 800c7d6:	4291      	cmp	r1, r2
 800c7d8:	bf88      	it	hi
 800c7da:	6019      	strhi	r1, [r3, #0]
 800c7dc:	4b1b      	ldr	r3, [pc, #108]	; (800c84c <_malloc_r+0x368>)
 800c7de:	681a      	ldr	r2, [r3, #0]
 800c7e0:	4291      	cmp	r1, r2
 800c7e2:	6862      	ldr	r2, [r4, #4]
 800c7e4:	bf88      	it	hi
 800c7e6:	6019      	strhi	r1, [r3, #0]
 800c7e8:	f022 0203 	bic.w	r2, r2, #3
 800c7ec:	4295      	cmp	r5, r2
 800c7ee:	eba2 0305 	sub.w	r3, r2, r5
 800c7f2:	d801      	bhi.n	800c7f8 <_malloc_r+0x314>
 800c7f4:	2b0f      	cmp	r3, #15
 800c7f6:	dc04      	bgt.n	800c802 <_malloc_r+0x31e>
 800c7f8:	4630      	mov	r0, r6
 800c7fa:	f000 f991 	bl	800cb20 <__malloc_unlock>
 800c7fe:	2400      	movs	r4, #0
 800c800:	e738      	b.n	800c674 <_malloc_r+0x190>
 800c802:	1962      	adds	r2, r4, r5
 800c804:	f043 0301 	orr.w	r3, r3, #1
 800c808:	f045 0501 	orr.w	r5, r5, #1
 800c80c:	6065      	str	r5, [r4, #4]
 800c80e:	4630      	mov	r0, r6
 800c810:	60ba      	str	r2, [r7, #8]
 800c812:	6053      	str	r3, [r2, #4]
 800c814:	f000 f984 	bl	800cb20 <__malloc_unlock>
 800c818:	3408      	adds	r4, #8
 800c81a:	4620      	mov	r0, r4
 800c81c:	b003      	add	sp, #12
 800c81e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c822:	2b14      	cmp	r3, #20
 800c824:	d971      	bls.n	800c90a <_malloc_r+0x426>
 800c826:	2b54      	cmp	r3, #84	; 0x54
 800c828:	f200 80a4 	bhi.w	800c974 <_malloc_r+0x490>
 800c82c:	0b28      	lsrs	r0, r5, #12
 800c82e:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
 800c832:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800c836:	306e      	adds	r0, #110	; 0x6e
 800c838:	e676      	b.n	800c528 <_malloc_r+0x44>
 800c83a:	bf00      	nop
 800c83c:	2000044c 	.word	0x2000044c
 800c840:	20001ea4 	.word	0x20001ea4
 800c844:	20001ea8 	.word	0x20001ea8
 800c848:	20001ea0 	.word	0x20001ea0
 800c84c:	20001e9c 	.word	0x20001e9c
 800c850:	20000858 	.word	0x20000858
 800c854:	0a5a      	lsrs	r2, r3, #9
 800c856:	2a04      	cmp	r2, #4
 800c858:	d95e      	bls.n	800c918 <_malloc_r+0x434>
 800c85a:	2a14      	cmp	r2, #20
 800c85c:	f200 80b3 	bhi.w	800c9c6 <_malloc_r+0x4e2>
 800c860:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 800c864:	0049      	lsls	r1, r1, #1
 800c866:	325b      	adds	r2, #91	; 0x5b
 800c868:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
 800c86c:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800c870:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 800ca50 <_malloc_r+0x56c>
 800c874:	f1ac 0c08 	sub.w	ip, ip, #8
 800c878:	458c      	cmp	ip, r1
 800c87a:	f000 8088 	beq.w	800c98e <_malloc_r+0x4aa>
 800c87e:	684a      	ldr	r2, [r1, #4]
 800c880:	f022 0203 	bic.w	r2, r2, #3
 800c884:	4293      	cmp	r3, r2
 800c886:	d202      	bcs.n	800c88e <_malloc_r+0x3aa>
 800c888:	6889      	ldr	r1, [r1, #8]
 800c88a:	458c      	cmp	ip, r1
 800c88c:	d1f7      	bne.n	800c87e <_malloc_r+0x39a>
 800c88e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800c892:	687a      	ldr	r2, [r7, #4]
 800c894:	f8c4 c00c 	str.w	ip, [r4, #12]
 800c898:	60a1      	str	r1, [r4, #8]
 800c89a:	f8cc 4008 	str.w	r4, [ip, #8]
 800c89e:	60cc      	str	r4, [r1, #12]
 800c8a0:	e688      	b.n	800c5b4 <_malloc_r+0xd0>
 800c8a2:	1963      	adds	r3, r4, r5
 800c8a4:	f042 0701 	orr.w	r7, r2, #1
 800c8a8:	f045 0501 	orr.w	r5, r5, #1
 800c8ac:	6065      	str	r5, [r4, #4]
 800c8ae:	4630      	mov	r0, r6
 800c8b0:	614b      	str	r3, [r1, #20]
 800c8b2:	610b      	str	r3, [r1, #16]
 800c8b4:	f8c3 e00c 	str.w	lr, [r3, #12]
 800c8b8:	f8c3 e008 	str.w	lr, [r3, #8]
 800c8bc:	605f      	str	r7, [r3, #4]
 800c8be:	509a      	str	r2, [r3, r2]
 800c8c0:	3408      	adds	r4, #8
 800c8c2:	f000 f92d 	bl	800cb20 <__malloc_unlock>
 800c8c6:	e6d5      	b.n	800c674 <_malloc_r+0x190>
 800c8c8:	684a      	ldr	r2, [r1, #4]
 800c8ca:	e673      	b.n	800c5b4 <_malloc_r+0xd0>
 800c8cc:	f108 0801 	add.w	r8, r8, #1
 800c8d0:	f018 0f03 	tst.w	r8, #3
 800c8d4:	f10c 0c08 	add.w	ip, ip, #8
 800c8d8:	f47f ae7f 	bne.w	800c5da <_malloc_r+0xf6>
 800c8dc:	e030      	b.n	800c940 <_malloc_r+0x45c>
 800c8de:	68dc      	ldr	r4, [r3, #12]
 800c8e0:	42a3      	cmp	r3, r4
 800c8e2:	bf08      	it	eq
 800c8e4:	3002      	addeq	r0, #2
 800c8e6:	f43f ae35 	beq.w	800c554 <_malloc_r+0x70>
 800c8ea:	e6b3      	b.n	800c654 <_malloc_r+0x170>
 800c8ec:	440b      	add	r3, r1
 800c8ee:	460c      	mov	r4, r1
 800c8f0:	685a      	ldr	r2, [r3, #4]
 800c8f2:	68c9      	ldr	r1, [r1, #12]
 800c8f4:	f854 5f08 	ldr.w	r5, [r4, #8]!
 800c8f8:	f042 0201 	orr.w	r2, r2, #1
 800c8fc:	605a      	str	r2, [r3, #4]
 800c8fe:	4630      	mov	r0, r6
 800c900:	60e9      	str	r1, [r5, #12]
 800c902:	608d      	str	r5, [r1, #8]
 800c904:	f000 f90c 	bl	800cb20 <__malloc_unlock>
 800c908:	e6b4      	b.n	800c674 <_malloc_r+0x190>
 800c90a:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
 800c90e:	f103 005b 	add.w	r0, r3, #91	; 0x5b
 800c912:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800c916:	e607      	b.n	800c528 <_malloc_r+0x44>
 800c918:	099a      	lsrs	r2, r3, #6
 800c91a:	f102 0139 	add.w	r1, r2, #57	; 0x39
 800c91e:	0049      	lsls	r1, r1, #1
 800c920:	3238      	adds	r2, #56	; 0x38
 800c922:	e7a1      	b.n	800c868 <_malloc_r+0x384>
 800c924:	42bc      	cmp	r4, r7
 800c926:	4b4a      	ldr	r3, [pc, #296]	; (800ca50 <_malloc_r+0x56c>)
 800c928:	f43f af00 	beq.w	800c72c <_malloc_r+0x248>
 800c92c:	689c      	ldr	r4, [r3, #8]
 800c92e:	6862      	ldr	r2, [r4, #4]
 800c930:	f022 0203 	bic.w	r2, r2, #3
 800c934:	e75a      	b.n	800c7ec <_malloc_r+0x308>
 800c936:	f859 3908 	ldr.w	r3, [r9], #-8
 800c93a:	4599      	cmp	r9, r3
 800c93c:	f040 8082 	bne.w	800ca44 <_malloc_r+0x560>
 800c940:	f010 0f03 	tst.w	r0, #3
 800c944:	f100 30ff 	add.w	r0, r0, #4294967295
 800c948:	d1f5      	bne.n	800c936 <_malloc_r+0x452>
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	ea23 0304 	bic.w	r3, r3, r4
 800c950:	607b      	str	r3, [r7, #4]
 800c952:	0064      	lsls	r4, r4, #1
 800c954:	429c      	cmp	r4, r3
 800c956:	f63f aebd 	bhi.w	800c6d4 <_malloc_r+0x1f0>
 800c95a:	2c00      	cmp	r4, #0
 800c95c:	f43f aeba 	beq.w	800c6d4 <_malloc_r+0x1f0>
 800c960:	421c      	tst	r4, r3
 800c962:	4640      	mov	r0, r8
 800c964:	f47f ae35 	bne.w	800c5d2 <_malloc_r+0xee>
 800c968:	0064      	lsls	r4, r4, #1
 800c96a:	421c      	tst	r4, r3
 800c96c:	f100 0004 	add.w	r0, r0, #4
 800c970:	d0fa      	beq.n	800c968 <_malloc_r+0x484>
 800c972:	e62e      	b.n	800c5d2 <_malloc_r+0xee>
 800c974:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800c978:	d818      	bhi.n	800c9ac <_malloc_r+0x4c8>
 800c97a:	0be8      	lsrs	r0, r5, #15
 800c97c:	f100 0e78 	add.w	lr, r0, #120	; 0x78
 800c980:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800c984:	3077      	adds	r0, #119	; 0x77
 800c986:	e5cf      	b.n	800c528 <_malloc_r+0x44>
 800c988:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c98c:	e6eb      	b.n	800c766 <_malloc_r+0x282>
 800c98e:	2101      	movs	r1, #1
 800c990:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c994:	1092      	asrs	r2, r2, #2
 800c996:	fa01 f202 	lsl.w	r2, r1, r2
 800c99a:	431a      	orrs	r2, r3
 800c99c:	f8c8 2004 	str.w	r2, [r8, #4]
 800c9a0:	4661      	mov	r1, ip
 800c9a2:	e777      	b.n	800c894 <_malloc_r+0x3b0>
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	f8cb 3004 	str.w	r3, [fp, #4]
 800c9aa:	e725      	b.n	800c7f8 <_malloc_r+0x314>
 800c9ac:	f240 5254 	movw	r2, #1364	; 0x554
 800c9b0:	4293      	cmp	r3, r2
 800c9b2:	d820      	bhi.n	800c9f6 <_malloc_r+0x512>
 800c9b4:	0ca8      	lsrs	r0, r5, #18
 800c9b6:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
 800c9ba:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800c9be:	307c      	adds	r0, #124	; 0x7c
 800c9c0:	e5b2      	b.n	800c528 <_malloc_r+0x44>
 800c9c2:	3210      	adds	r2, #16
 800c9c4:	e6a4      	b.n	800c710 <_malloc_r+0x22c>
 800c9c6:	2a54      	cmp	r2, #84	; 0x54
 800c9c8:	d826      	bhi.n	800ca18 <_malloc_r+0x534>
 800c9ca:	0b1a      	lsrs	r2, r3, #12
 800c9cc:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 800c9d0:	0049      	lsls	r1, r1, #1
 800c9d2:	326e      	adds	r2, #110	; 0x6e
 800c9d4:	e748      	b.n	800c868 <_malloc_r+0x384>
 800c9d6:	68bc      	ldr	r4, [r7, #8]
 800c9d8:	6862      	ldr	r2, [r4, #4]
 800c9da:	f022 0203 	bic.w	r2, r2, #3
 800c9de:	e705      	b.n	800c7ec <_malloc_r+0x308>
 800c9e0:	f3ca 000b 	ubfx	r0, sl, #0, #12
 800c9e4:	2800      	cmp	r0, #0
 800c9e6:	f47f aea8 	bne.w	800c73a <_malloc_r+0x256>
 800c9ea:	4442      	add	r2, r8
 800c9ec:	68bb      	ldr	r3, [r7, #8]
 800c9ee:	f042 0201 	orr.w	r2, r2, #1
 800c9f2:	605a      	str	r2, [r3, #4]
 800c9f4:	e6ec      	b.n	800c7d0 <_malloc_r+0x2ec>
 800c9f6:	23fe      	movs	r3, #254	; 0xfe
 800c9f8:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
 800c9fc:	207e      	movs	r0, #126	; 0x7e
 800c9fe:	e593      	b.n	800c528 <_malloc_r+0x44>
 800ca00:	2201      	movs	r2, #1
 800ca02:	f04f 0900 	mov.w	r9, #0
 800ca06:	e6c1      	b.n	800c78c <_malloc_r+0x2a8>
 800ca08:	f104 0108 	add.w	r1, r4, #8
 800ca0c:	4630      	mov	r0, r6
 800ca0e:	f7ff fa53 	bl	800beb8 <_free_r>
 800ca12:	f8d9 1000 	ldr.w	r1, [r9]
 800ca16:	e6db      	b.n	800c7d0 <_malloc_r+0x2ec>
 800ca18:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800ca1c:	d805      	bhi.n	800ca2a <_malloc_r+0x546>
 800ca1e:	0bda      	lsrs	r2, r3, #15
 800ca20:	f102 0178 	add.w	r1, r2, #120	; 0x78
 800ca24:	0049      	lsls	r1, r1, #1
 800ca26:	3277      	adds	r2, #119	; 0x77
 800ca28:	e71e      	b.n	800c868 <_malloc_r+0x384>
 800ca2a:	f240 5154 	movw	r1, #1364	; 0x554
 800ca2e:	428a      	cmp	r2, r1
 800ca30:	d805      	bhi.n	800ca3e <_malloc_r+0x55a>
 800ca32:	0c9a      	lsrs	r2, r3, #18
 800ca34:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 800ca38:	0049      	lsls	r1, r1, #1
 800ca3a:	327c      	adds	r2, #124	; 0x7c
 800ca3c:	e714      	b.n	800c868 <_malloc_r+0x384>
 800ca3e:	21fe      	movs	r1, #254	; 0xfe
 800ca40:	227e      	movs	r2, #126	; 0x7e
 800ca42:	e711      	b.n	800c868 <_malloc_r+0x384>
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	e784      	b.n	800c952 <_malloc_r+0x46e>
 800ca48:	08e8      	lsrs	r0, r5, #3
 800ca4a:	1c43      	adds	r3, r0, #1
 800ca4c:	005b      	lsls	r3, r3, #1
 800ca4e:	e5f8      	b.n	800c642 <_malloc_r+0x15e>
 800ca50:	2000044c 	.word	0x2000044c

0800ca54 <memmove>:
 800ca54:	4288      	cmp	r0, r1
 800ca56:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca58:	d90d      	bls.n	800ca76 <memmove+0x22>
 800ca5a:	188b      	adds	r3, r1, r2
 800ca5c:	4298      	cmp	r0, r3
 800ca5e:	d20a      	bcs.n	800ca76 <memmove+0x22>
 800ca60:	1881      	adds	r1, r0, r2
 800ca62:	2a00      	cmp	r2, #0
 800ca64:	d051      	beq.n	800cb0a <memmove+0xb6>
 800ca66:	1a9a      	subs	r2, r3, r2
 800ca68:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ca6c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ca70:	4293      	cmp	r3, r2
 800ca72:	d1f9      	bne.n	800ca68 <memmove+0x14>
 800ca74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca76:	2a0f      	cmp	r2, #15
 800ca78:	d948      	bls.n	800cb0c <memmove+0xb8>
 800ca7a:	ea41 0300 	orr.w	r3, r1, r0
 800ca7e:	079b      	lsls	r3, r3, #30
 800ca80:	d146      	bne.n	800cb10 <memmove+0xbc>
 800ca82:	f100 0410 	add.w	r4, r0, #16
 800ca86:	f101 0310 	add.w	r3, r1, #16
 800ca8a:	4615      	mov	r5, r2
 800ca8c:	f853 6c10 	ldr.w	r6, [r3, #-16]
 800ca90:	f844 6c10 	str.w	r6, [r4, #-16]
 800ca94:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 800ca98:	f844 6c0c 	str.w	r6, [r4, #-12]
 800ca9c:	f853 6c08 	ldr.w	r6, [r3, #-8]
 800caa0:	f844 6c08 	str.w	r6, [r4, #-8]
 800caa4:	3d10      	subs	r5, #16
 800caa6:	f853 6c04 	ldr.w	r6, [r3, #-4]
 800caaa:	f844 6c04 	str.w	r6, [r4, #-4]
 800caae:	2d0f      	cmp	r5, #15
 800cab0:	f103 0310 	add.w	r3, r3, #16
 800cab4:	f104 0410 	add.w	r4, r4, #16
 800cab8:	d8e8      	bhi.n	800ca8c <memmove+0x38>
 800caba:	f1a2 0310 	sub.w	r3, r2, #16
 800cabe:	f023 030f 	bic.w	r3, r3, #15
 800cac2:	f002 0e0f 	and.w	lr, r2, #15
 800cac6:	3310      	adds	r3, #16
 800cac8:	f1be 0f03 	cmp.w	lr, #3
 800cacc:	4419      	add	r1, r3
 800cace:	4403      	add	r3, r0
 800cad0:	d921      	bls.n	800cb16 <memmove+0xc2>
 800cad2:	1f1e      	subs	r6, r3, #4
 800cad4:	460d      	mov	r5, r1
 800cad6:	4674      	mov	r4, lr
 800cad8:	3c04      	subs	r4, #4
 800cada:	f855 7b04 	ldr.w	r7, [r5], #4
 800cade:	f846 7f04 	str.w	r7, [r6, #4]!
 800cae2:	2c03      	cmp	r4, #3
 800cae4:	d8f8      	bhi.n	800cad8 <memmove+0x84>
 800cae6:	f1ae 0404 	sub.w	r4, lr, #4
 800caea:	f024 0403 	bic.w	r4, r4, #3
 800caee:	3404      	adds	r4, #4
 800caf0:	4423      	add	r3, r4
 800caf2:	4421      	add	r1, r4
 800caf4:	f002 0203 	and.w	r2, r2, #3
 800caf8:	b162      	cbz	r2, 800cb14 <memmove+0xc0>
 800cafa:	3b01      	subs	r3, #1
 800cafc:	440a      	add	r2, r1
 800cafe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb02:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb06:	428a      	cmp	r2, r1
 800cb08:	d1f9      	bne.n	800cafe <memmove+0xaa>
 800cb0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	e7f3      	b.n	800caf8 <memmove+0xa4>
 800cb10:	4603      	mov	r3, r0
 800cb12:	e7f2      	b.n	800cafa <memmove+0xa6>
 800cb14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb16:	4672      	mov	r2, lr
 800cb18:	e7ee      	b.n	800caf8 <memmove+0xa4>
 800cb1a:	bf00      	nop

0800cb1c <__malloc_lock>:
 800cb1c:	4770      	bx	lr
 800cb1e:	bf00      	nop

0800cb20 <__malloc_unlock>:
 800cb20:	4770      	bx	lr
 800cb22:	bf00      	nop

0800cb24 <_Balloc>:
 800cb24:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800cb26:	b570      	push	{r4, r5, r6, lr}
 800cb28:	4605      	mov	r5, r0
 800cb2a:	460c      	mov	r4, r1
 800cb2c:	b14b      	cbz	r3, 800cb42 <_Balloc+0x1e>
 800cb2e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800cb32:	b180      	cbz	r0, 800cb56 <_Balloc+0x32>
 800cb34:	6802      	ldr	r2, [r0, #0]
 800cb36:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	6103      	str	r3, [r0, #16]
 800cb3e:	60c3      	str	r3, [r0, #12]
 800cb40:	bd70      	pop	{r4, r5, r6, pc}
 800cb42:	2221      	movs	r2, #33	; 0x21
 800cb44:	2104      	movs	r1, #4
 800cb46:	f000 fe1d 	bl	800d784 <_calloc_r>
 800cb4a:	64e8      	str	r0, [r5, #76]	; 0x4c
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	2800      	cmp	r0, #0
 800cb50:	d1ed      	bne.n	800cb2e <_Balloc+0xa>
 800cb52:	2000      	movs	r0, #0
 800cb54:	bd70      	pop	{r4, r5, r6, pc}
 800cb56:	2101      	movs	r1, #1
 800cb58:	fa01 f604 	lsl.w	r6, r1, r4
 800cb5c:	1d72      	adds	r2, r6, #5
 800cb5e:	4628      	mov	r0, r5
 800cb60:	0092      	lsls	r2, r2, #2
 800cb62:	f000 fe0f 	bl	800d784 <_calloc_r>
 800cb66:	2800      	cmp	r0, #0
 800cb68:	d0f3      	beq.n	800cb52 <_Balloc+0x2e>
 800cb6a:	6044      	str	r4, [r0, #4]
 800cb6c:	6086      	str	r6, [r0, #8]
 800cb6e:	e7e4      	b.n	800cb3a <_Balloc+0x16>

0800cb70 <_Bfree>:
 800cb70:	b131      	cbz	r1, 800cb80 <_Bfree+0x10>
 800cb72:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800cb74:	684a      	ldr	r2, [r1, #4]
 800cb76:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800cb7a:	6008      	str	r0, [r1, #0]
 800cb7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800cb80:	4770      	bx	lr
 800cb82:	bf00      	nop

0800cb84 <__multadd>:
 800cb84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb86:	690c      	ldr	r4, [r1, #16]
 800cb88:	b083      	sub	sp, #12
 800cb8a:	460d      	mov	r5, r1
 800cb8c:	4606      	mov	r6, r0
 800cb8e:	f101 0e14 	add.w	lr, r1, #20
 800cb92:	2700      	movs	r7, #0
 800cb94:	f8de 0000 	ldr.w	r0, [lr]
 800cb98:	b281      	uxth	r1, r0
 800cb9a:	fb02 3101 	mla	r1, r2, r1, r3
 800cb9e:	0c0b      	lsrs	r3, r1, #16
 800cba0:	0c00      	lsrs	r0, r0, #16
 800cba2:	fb02 3300 	mla	r3, r2, r0, r3
 800cba6:	b289      	uxth	r1, r1
 800cba8:	3701      	adds	r7, #1
 800cbaa:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cbae:	42bc      	cmp	r4, r7
 800cbb0:	f84e 1b04 	str.w	r1, [lr], #4
 800cbb4:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800cbb8:	dcec      	bgt.n	800cb94 <__multadd+0x10>
 800cbba:	b13b      	cbz	r3, 800cbcc <__multadd+0x48>
 800cbbc:	68aa      	ldr	r2, [r5, #8]
 800cbbe:	4294      	cmp	r4, r2
 800cbc0:	da07      	bge.n	800cbd2 <__multadd+0x4e>
 800cbc2:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 800cbc6:	3401      	adds	r4, #1
 800cbc8:	6153      	str	r3, [r2, #20]
 800cbca:	612c      	str	r4, [r5, #16]
 800cbcc:	4628      	mov	r0, r5
 800cbce:	b003      	add	sp, #12
 800cbd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbd2:	6869      	ldr	r1, [r5, #4]
 800cbd4:	9301      	str	r3, [sp, #4]
 800cbd6:	3101      	adds	r1, #1
 800cbd8:	4630      	mov	r0, r6
 800cbda:	f7ff ffa3 	bl	800cb24 <_Balloc>
 800cbde:	692a      	ldr	r2, [r5, #16]
 800cbe0:	3202      	adds	r2, #2
 800cbe2:	f105 010c 	add.w	r1, r5, #12
 800cbe6:	4607      	mov	r7, r0
 800cbe8:	0092      	lsls	r2, r2, #2
 800cbea:	300c      	adds	r0, #12
 800cbec:	f7f3 fd1a 	bl	8000624 <memcpy>
 800cbf0:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 800cbf2:	6869      	ldr	r1, [r5, #4]
 800cbf4:	9b01      	ldr	r3, [sp, #4]
 800cbf6:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800cbfa:	6028      	str	r0, [r5, #0]
 800cbfc:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 800cc00:	463d      	mov	r5, r7
 800cc02:	e7de      	b.n	800cbc2 <__multadd+0x3e>

0800cc04 <__hi0bits>:
 800cc04:	0c03      	lsrs	r3, r0, #16
 800cc06:	041b      	lsls	r3, r3, #16
 800cc08:	b9b3      	cbnz	r3, 800cc38 <__hi0bits+0x34>
 800cc0a:	0400      	lsls	r0, r0, #16
 800cc0c:	2310      	movs	r3, #16
 800cc0e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cc12:	bf04      	itt	eq
 800cc14:	0200      	lsleq	r0, r0, #8
 800cc16:	3308      	addeq	r3, #8
 800cc18:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cc1c:	bf04      	itt	eq
 800cc1e:	0100      	lsleq	r0, r0, #4
 800cc20:	3304      	addeq	r3, #4
 800cc22:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cc26:	bf04      	itt	eq
 800cc28:	0080      	lsleq	r0, r0, #2
 800cc2a:	3302      	addeq	r3, #2
 800cc2c:	2800      	cmp	r0, #0
 800cc2e:	db07      	blt.n	800cc40 <__hi0bits+0x3c>
 800cc30:	0042      	lsls	r2, r0, #1
 800cc32:	d403      	bmi.n	800cc3c <__hi0bits+0x38>
 800cc34:	2020      	movs	r0, #32
 800cc36:	4770      	bx	lr
 800cc38:	2300      	movs	r3, #0
 800cc3a:	e7e8      	b.n	800cc0e <__hi0bits+0xa>
 800cc3c:	1c58      	adds	r0, r3, #1
 800cc3e:	4770      	bx	lr
 800cc40:	4618      	mov	r0, r3
 800cc42:	4770      	bx	lr

0800cc44 <__lo0bits>:
 800cc44:	6803      	ldr	r3, [r0, #0]
 800cc46:	f013 0207 	ands.w	r2, r3, #7
 800cc4a:	d007      	beq.n	800cc5c <__lo0bits+0x18>
 800cc4c:	07d9      	lsls	r1, r3, #31
 800cc4e:	d420      	bmi.n	800cc92 <__lo0bits+0x4e>
 800cc50:	079a      	lsls	r2, r3, #30
 800cc52:	d420      	bmi.n	800cc96 <__lo0bits+0x52>
 800cc54:	089b      	lsrs	r3, r3, #2
 800cc56:	6003      	str	r3, [r0, #0]
 800cc58:	2002      	movs	r0, #2
 800cc5a:	4770      	bx	lr
 800cc5c:	b299      	uxth	r1, r3
 800cc5e:	b909      	cbnz	r1, 800cc64 <__lo0bits+0x20>
 800cc60:	0c1b      	lsrs	r3, r3, #16
 800cc62:	2210      	movs	r2, #16
 800cc64:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cc68:	bf04      	itt	eq
 800cc6a:	0a1b      	lsreq	r3, r3, #8
 800cc6c:	3208      	addeq	r2, #8
 800cc6e:	0719      	lsls	r1, r3, #28
 800cc70:	bf04      	itt	eq
 800cc72:	091b      	lsreq	r3, r3, #4
 800cc74:	3204      	addeq	r2, #4
 800cc76:	0799      	lsls	r1, r3, #30
 800cc78:	bf04      	itt	eq
 800cc7a:	089b      	lsreq	r3, r3, #2
 800cc7c:	3202      	addeq	r2, #2
 800cc7e:	07d9      	lsls	r1, r3, #31
 800cc80:	d404      	bmi.n	800cc8c <__lo0bits+0x48>
 800cc82:	085b      	lsrs	r3, r3, #1
 800cc84:	d101      	bne.n	800cc8a <__lo0bits+0x46>
 800cc86:	2020      	movs	r0, #32
 800cc88:	4770      	bx	lr
 800cc8a:	3201      	adds	r2, #1
 800cc8c:	6003      	str	r3, [r0, #0]
 800cc8e:	4610      	mov	r0, r2
 800cc90:	4770      	bx	lr
 800cc92:	2000      	movs	r0, #0
 800cc94:	4770      	bx	lr
 800cc96:	085b      	lsrs	r3, r3, #1
 800cc98:	6003      	str	r3, [r0, #0]
 800cc9a:	2001      	movs	r0, #1
 800cc9c:	4770      	bx	lr
 800cc9e:	bf00      	nop

0800cca0 <__i2b>:
 800cca0:	b510      	push	{r4, lr}
 800cca2:	460c      	mov	r4, r1
 800cca4:	2101      	movs	r1, #1
 800cca6:	f7ff ff3d 	bl	800cb24 <_Balloc>
 800ccaa:	2201      	movs	r2, #1
 800ccac:	6144      	str	r4, [r0, #20]
 800ccae:	6102      	str	r2, [r0, #16]
 800ccb0:	bd10      	pop	{r4, pc}
 800ccb2:	bf00      	nop

0800ccb4 <__multiply>:
 800ccb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccb8:	690d      	ldr	r5, [r1, #16]
 800ccba:	6917      	ldr	r7, [r2, #16]
 800ccbc:	42bd      	cmp	r5, r7
 800ccbe:	b083      	sub	sp, #12
 800ccc0:	460c      	mov	r4, r1
 800ccc2:	4616      	mov	r6, r2
 800ccc4:	da04      	bge.n	800ccd0 <__multiply+0x1c>
 800ccc6:	462a      	mov	r2, r5
 800ccc8:	4634      	mov	r4, r6
 800ccca:	463d      	mov	r5, r7
 800cccc:	460e      	mov	r6, r1
 800ccce:	4617      	mov	r7, r2
 800ccd0:	68a3      	ldr	r3, [r4, #8]
 800ccd2:	6861      	ldr	r1, [r4, #4]
 800ccd4:	eb05 0807 	add.w	r8, r5, r7
 800ccd8:	4598      	cmp	r8, r3
 800ccda:	bfc8      	it	gt
 800ccdc:	3101      	addgt	r1, #1
 800ccde:	f7ff ff21 	bl	800cb24 <_Balloc>
 800cce2:	f100 0c14 	add.w	ip, r0, #20
 800cce6:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 800ccea:	45cc      	cmp	ip, r9
 800ccec:	9000      	str	r0, [sp, #0]
 800ccee:	d205      	bcs.n	800ccfc <__multiply+0x48>
 800ccf0:	4663      	mov	r3, ip
 800ccf2:	2100      	movs	r1, #0
 800ccf4:	f843 1b04 	str.w	r1, [r3], #4
 800ccf8:	4599      	cmp	r9, r3
 800ccfa:	d8fb      	bhi.n	800ccf4 <__multiply+0x40>
 800ccfc:	f106 0214 	add.w	r2, r6, #20
 800cd00:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 800cd04:	f104 0314 	add.w	r3, r4, #20
 800cd08:	4552      	cmp	r2, sl
 800cd0a:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
 800cd0e:	d254      	bcs.n	800cdba <__multiply+0x106>
 800cd10:	f8cd 9004 	str.w	r9, [sp, #4]
 800cd14:	4699      	mov	r9, r3
 800cd16:	f852 3b04 	ldr.w	r3, [r2], #4
 800cd1a:	fa1f fb83 	uxth.w	fp, r3
 800cd1e:	f1bb 0f00 	cmp.w	fp, #0
 800cd22:	d020      	beq.n	800cd66 <__multiply+0xb2>
 800cd24:	2000      	movs	r0, #0
 800cd26:	464f      	mov	r7, r9
 800cd28:	4666      	mov	r6, ip
 800cd2a:	4605      	mov	r5, r0
 800cd2c:	e000      	b.n	800cd30 <__multiply+0x7c>
 800cd2e:	461e      	mov	r6, r3
 800cd30:	f857 4b04 	ldr.w	r4, [r7], #4
 800cd34:	6830      	ldr	r0, [r6, #0]
 800cd36:	b2a1      	uxth	r1, r4
 800cd38:	b283      	uxth	r3, r0
 800cd3a:	fb0b 3101 	mla	r1, fp, r1, r3
 800cd3e:	0c24      	lsrs	r4, r4, #16
 800cd40:	0c00      	lsrs	r0, r0, #16
 800cd42:	194b      	adds	r3, r1, r5
 800cd44:	fb0b 0004 	mla	r0, fp, r4, r0
 800cd48:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 800cd4c:	b299      	uxth	r1, r3
 800cd4e:	4633      	mov	r3, r6
 800cd50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cd54:	45be      	cmp	lr, r7
 800cd56:	ea4f 4510 	mov.w	r5, r0, lsr #16
 800cd5a:	f843 1b04 	str.w	r1, [r3], #4
 800cd5e:	d8e6      	bhi.n	800cd2e <__multiply+0x7a>
 800cd60:	6075      	str	r5, [r6, #4]
 800cd62:	f852 3c04 	ldr.w	r3, [r2, #-4]
 800cd66:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 800cd6a:	d020      	beq.n	800cdae <__multiply+0xfa>
 800cd6c:	f8dc 3000 	ldr.w	r3, [ip]
 800cd70:	4667      	mov	r7, ip
 800cd72:	4618      	mov	r0, r3
 800cd74:	464d      	mov	r5, r9
 800cd76:	2100      	movs	r1, #0
 800cd78:	e000      	b.n	800cd7c <__multiply+0xc8>
 800cd7a:	4637      	mov	r7, r6
 800cd7c:	882c      	ldrh	r4, [r5, #0]
 800cd7e:	0c00      	lsrs	r0, r0, #16
 800cd80:	fb0b 0004 	mla	r0, fp, r4, r0
 800cd84:	4401      	add	r1, r0
 800cd86:	b29c      	uxth	r4, r3
 800cd88:	463e      	mov	r6, r7
 800cd8a:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 800cd8e:	f846 3b04 	str.w	r3, [r6], #4
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f855 4b04 	ldr.w	r4, [r5], #4
 800cd98:	b283      	uxth	r3, r0
 800cd9a:	0c24      	lsrs	r4, r4, #16
 800cd9c:	fb0b 3404 	mla	r4, fp, r4, r3
 800cda0:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 800cda4:	45ae      	cmp	lr, r5
 800cda6:	ea4f 4113 	mov.w	r1, r3, lsr #16
 800cdaa:	d8e6      	bhi.n	800cd7a <__multiply+0xc6>
 800cdac:	607b      	str	r3, [r7, #4]
 800cdae:	4592      	cmp	sl, r2
 800cdb0:	f10c 0c04 	add.w	ip, ip, #4
 800cdb4:	d8af      	bhi.n	800cd16 <__multiply+0x62>
 800cdb6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800cdba:	f1b8 0f00 	cmp.w	r8, #0
 800cdbe:	dd0b      	ble.n	800cdd8 <__multiply+0x124>
 800cdc0:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800cdc4:	f1a9 0904 	sub.w	r9, r9, #4
 800cdc8:	b11b      	cbz	r3, 800cdd2 <__multiply+0x11e>
 800cdca:	e005      	b.n	800cdd8 <__multiply+0x124>
 800cdcc:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 800cdd0:	b913      	cbnz	r3, 800cdd8 <__multiply+0x124>
 800cdd2:	f1b8 0801 	subs.w	r8, r8, #1
 800cdd6:	d1f9      	bne.n	800cdcc <__multiply+0x118>
 800cdd8:	9800      	ldr	r0, [sp, #0]
 800cdda:	f8c0 8010 	str.w	r8, [r0, #16]
 800cdde:	b003      	add	sp, #12
 800cde0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cde4 <__pow5mult>:
 800cde4:	f012 0303 	ands.w	r3, r2, #3
 800cde8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdec:	4614      	mov	r4, r2
 800cdee:	4607      	mov	r7, r0
 800cdf0:	d12e      	bne.n	800ce50 <__pow5mult+0x6c>
 800cdf2:	460e      	mov	r6, r1
 800cdf4:	10a4      	asrs	r4, r4, #2
 800cdf6:	d01c      	beq.n	800ce32 <__pow5mult+0x4e>
 800cdf8:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 800cdfa:	b395      	cbz	r5, 800ce62 <__pow5mult+0x7e>
 800cdfc:	07e3      	lsls	r3, r4, #31
 800cdfe:	f04f 0800 	mov.w	r8, #0
 800ce02:	d406      	bmi.n	800ce12 <__pow5mult+0x2e>
 800ce04:	1064      	asrs	r4, r4, #1
 800ce06:	d014      	beq.n	800ce32 <__pow5mult+0x4e>
 800ce08:	6828      	ldr	r0, [r5, #0]
 800ce0a:	b1a8      	cbz	r0, 800ce38 <__pow5mult+0x54>
 800ce0c:	4605      	mov	r5, r0
 800ce0e:	07e3      	lsls	r3, r4, #31
 800ce10:	d5f8      	bpl.n	800ce04 <__pow5mult+0x20>
 800ce12:	462a      	mov	r2, r5
 800ce14:	4631      	mov	r1, r6
 800ce16:	4638      	mov	r0, r7
 800ce18:	f7ff ff4c 	bl	800ccb4 <__multiply>
 800ce1c:	b1b6      	cbz	r6, 800ce4c <__pow5mult+0x68>
 800ce1e:	6872      	ldr	r2, [r6, #4]
 800ce20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce22:	1064      	asrs	r4, r4, #1
 800ce24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ce28:	6031      	str	r1, [r6, #0]
 800ce2a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 800ce2e:	4606      	mov	r6, r0
 800ce30:	d1ea      	bne.n	800ce08 <__pow5mult+0x24>
 800ce32:	4630      	mov	r0, r6
 800ce34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce38:	462a      	mov	r2, r5
 800ce3a:	4629      	mov	r1, r5
 800ce3c:	4638      	mov	r0, r7
 800ce3e:	f7ff ff39 	bl	800ccb4 <__multiply>
 800ce42:	6028      	str	r0, [r5, #0]
 800ce44:	f8c0 8000 	str.w	r8, [r0]
 800ce48:	4605      	mov	r5, r0
 800ce4a:	e7e0      	b.n	800ce0e <__pow5mult+0x2a>
 800ce4c:	4606      	mov	r6, r0
 800ce4e:	e7d9      	b.n	800ce04 <__pow5mult+0x20>
 800ce50:	1e5a      	subs	r2, r3, #1
 800ce52:	4d0b      	ldr	r5, [pc, #44]	; (800ce80 <__pow5mult+0x9c>)
 800ce54:	2300      	movs	r3, #0
 800ce56:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800ce5a:	f7ff fe93 	bl	800cb84 <__multadd>
 800ce5e:	4606      	mov	r6, r0
 800ce60:	e7c8      	b.n	800cdf4 <__pow5mult+0x10>
 800ce62:	2101      	movs	r1, #1
 800ce64:	4638      	mov	r0, r7
 800ce66:	f7ff fe5d 	bl	800cb24 <_Balloc>
 800ce6a:	f240 2171 	movw	r1, #625	; 0x271
 800ce6e:	2201      	movs	r2, #1
 800ce70:	2300      	movs	r3, #0
 800ce72:	6141      	str	r1, [r0, #20]
 800ce74:	6102      	str	r2, [r0, #16]
 800ce76:	4605      	mov	r5, r0
 800ce78:	64b8      	str	r0, [r7, #72]	; 0x48
 800ce7a:	6003      	str	r3, [r0, #0]
 800ce7c:	e7be      	b.n	800cdfc <__pow5mult+0x18>
 800ce7e:	bf00      	nop
 800ce80:	0800e250 	.word	0x0800e250

0800ce84 <__lshift>:
 800ce84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce88:	4691      	mov	r9, r2
 800ce8a:	690a      	ldr	r2, [r1, #16]
 800ce8c:	688b      	ldr	r3, [r1, #8]
 800ce8e:	ea4f 1469 	mov.w	r4, r9, asr #5
 800ce92:	eb04 0802 	add.w	r8, r4, r2
 800ce96:	f108 0501 	add.w	r5, r8, #1
 800ce9a:	429d      	cmp	r5, r3
 800ce9c:	460e      	mov	r6, r1
 800ce9e:	4682      	mov	sl, r0
 800cea0:	6849      	ldr	r1, [r1, #4]
 800cea2:	dd04      	ble.n	800ceae <__lshift+0x2a>
 800cea4:	005b      	lsls	r3, r3, #1
 800cea6:	429d      	cmp	r5, r3
 800cea8:	f101 0101 	add.w	r1, r1, #1
 800ceac:	dcfa      	bgt.n	800cea4 <__lshift+0x20>
 800ceae:	4650      	mov	r0, sl
 800ceb0:	f7ff fe38 	bl	800cb24 <_Balloc>
 800ceb4:	2c00      	cmp	r4, #0
 800ceb6:	f100 0214 	add.w	r2, r0, #20
 800ceba:	dd38      	ble.n	800cf2e <__lshift+0xaa>
 800cebc:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 800cec0:	2100      	movs	r1, #0
 800cec2:	f842 1b04 	str.w	r1, [r2], #4
 800cec6:	4293      	cmp	r3, r2
 800cec8:	d1fb      	bne.n	800cec2 <__lshift+0x3e>
 800ceca:	6934      	ldr	r4, [r6, #16]
 800cecc:	f106 0114 	add.w	r1, r6, #20
 800ced0:	f019 091f 	ands.w	r9, r9, #31
 800ced4:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
 800ced8:	d021      	beq.n	800cf1e <__lshift+0x9a>
 800ceda:	f1c9 0220 	rsb	r2, r9, #32
 800cede:	2400      	movs	r4, #0
 800cee0:	680f      	ldr	r7, [r1, #0]
 800cee2:	fa07 fc09 	lsl.w	ip, r7, r9
 800cee6:	ea4c 0404 	orr.w	r4, ip, r4
 800ceea:	469c      	mov	ip, r3
 800ceec:	f843 4b04 	str.w	r4, [r3], #4
 800cef0:	f851 4b04 	ldr.w	r4, [r1], #4
 800cef4:	458e      	cmp	lr, r1
 800cef6:	fa24 f402 	lsr.w	r4, r4, r2
 800cefa:	d8f1      	bhi.n	800cee0 <__lshift+0x5c>
 800cefc:	f8cc 4004 	str.w	r4, [ip, #4]
 800cf00:	b10c      	cbz	r4, 800cf06 <__lshift+0x82>
 800cf02:	f108 0502 	add.w	r5, r8, #2
 800cf06:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 800cf0a:	6872      	ldr	r2, [r6, #4]
 800cf0c:	3d01      	subs	r5, #1
 800cf0e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cf12:	6105      	str	r5, [r0, #16]
 800cf14:	6031      	str	r1, [r6, #0]
 800cf16:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 800cf1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf1e:	3b04      	subs	r3, #4
 800cf20:	f851 2b04 	ldr.w	r2, [r1], #4
 800cf24:	f843 2f04 	str.w	r2, [r3, #4]!
 800cf28:	458e      	cmp	lr, r1
 800cf2a:	d8f9      	bhi.n	800cf20 <__lshift+0x9c>
 800cf2c:	e7eb      	b.n	800cf06 <__lshift+0x82>
 800cf2e:	4613      	mov	r3, r2
 800cf30:	e7cb      	b.n	800ceca <__lshift+0x46>
 800cf32:	bf00      	nop

0800cf34 <__mcmp>:
 800cf34:	6902      	ldr	r2, [r0, #16]
 800cf36:	690b      	ldr	r3, [r1, #16]
 800cf38:	1ad2      	subs	r2, r2, r3
 800cf3a:	d112      	bne.n	800cf62 <__mcmp+0x2e>
 800cf3c:	009b      	lsls	r3, r3, #2
 800cf3e:	3014      	adds	r0, #20
 800cf40:	3114      	adds	r1, #20
 800cf42:	4419      	add	r1, r3
 800cf44:	b410      	push	{r4}
 800cf46:	4403      	add	r3, r0
 800cf48:	e001      	b.n	800cf4e <__mcmp+0x1a>
 800cf4a:	4298      	cmp	r0, r3
 800cf4c:	d20b      	bcs.n	800cf66 <__mcmp+0x32>
 800cf4e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800cf52:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cf56:	4294      	cmp	r4, r2
 800cf58:	d0f7      	beq.n	800cf4a <__mcmp+0x16>
 800cf5a:	d307      	bcc.n	800cf6c <__mcmp+0x38>
 800cf5c:	2001      	movs	r0, #1
 800cf5e:	bc10      	pop	{r4}
 800cf60:	4770      	bx	lr
 800cf62:	4610      	mov	r0, r2
 800cf64:	4770      	bx	lr
 800cf66:	2000      	movs	r0, #0
 800cf68:	bc10      	pop	{r4}
 800cf6a:	4770      	bx	lr
 800cf6c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf70:	e7f5      	b.n	800cf5e <__mcmp+0x2a>
 800cf72:	bf00      	nop

0800cf74 <__mdiff>:
 800cf74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf78:	690b      	ldr	r3, [r1, #16]
 800cf7a:	460f      	mov	r7, r1
 800cf7c:	6911      	ldr	r1, [r2, #16]
 800cf7e:	1a5b      	subs	r3, r3, r1
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	4690      	mov	r8, r2
 800cf84:	d117      	bne.n	800cfb6 <__mdiff+0x42>
 800cf86:	0089      	lsls	r1, r1, #2
 800cf88:	f107 0214 	add.w	r2, r7, #20
 800cf8c:	f108 0514 	add.w	r5, r8, #20
 800cf90:	1853      	adds	r3, r2, r1
 800cf92:	4429      	add	r1, r5
 800cf94:	e001      	b.n	800cf9a <__mdiff+0x26>
 800cf96:	429a      	cmp	r2, r3
 800cf98:	d25e      	bcs.n	800d058 <__mdiff+0xe4>
 800cf9a:	f853 6d04 	ldr.w	r6, [r3, #-4]!
 800cf9e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cfa2:	42a6      	cmp	r6, r4
 800cfa4:	d0f7      	beq.n	800cf96 <__mdiff+0x22>
 800cfa6:	d260      	bcs.n	800d06a <__mdiff+0xf6>
 800cfa8:	463b      	mov	r3, r7
 800cfaa:	4614      	mov	r4, r2
 800cfac:	4647      	mov	r7, r8
 800cfae:	f04f 0901 	mov.w	r9, #1
 800cfb2:	4698      	mov	r8, r3
 800cfb4:	e006      	b.n	800cfc4 <__mdiff+0x50>
 800cfb6:	db5d      	blt.n	800d074 <__mdiff+0x100>
 800cfb8:	f107 0514 	add.w	r5, r7, #20
 800cfbc:	f102 0414 	add.w	r4, r2, #20
 800cfc0:	f04f 0900 	mov.w	r9, #0
 800cfc4:	6879      	ldr	r1, [r7, #4]
 800cfc6:	f7ff fdad 	bl	800cb24 <_Balloc>
 800cfca:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800cfce:	693e      	ldr	r6, [r7, #16]
 800cfd0:	f8c0 900c 	str.w	r9, [r0, #12]
 800cfd4:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 800cfd8:	46a6      	mov	lr, r4
 800cfda:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 800cfde:	f100 0414 	add.w	r4, r0, #20
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	f85e 1b04 	ldr.w	r1, [lr], #4
 800cfe8:	f855 8b04 	ldr.w	r8, [r5], #4
 800cfec:	b28a      	uxth	r2, r1
 800cfee:	fa13 f388 	uxtah	r3, r3, r8
 800cff2:	0c09      	lsrs	r1, r1, #16
 800cff4:	1a9a      	subs	r2, r3, r2
 800cff6:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
 800cffa:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800cffe:	b292      	uxth	r2, r2
 800d000:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d004:	45f4      	cmp	ip, lr
 800d006:	f844 2b04 	str.w	r2, [r4], #4
 800d00a:	ea4f 4323 	mov.w	r3, r3, asr #16
 800d00e:	d8e9      	bhi.n	800cfe4 <__mdiff+0x70>
 800d010:	42af      	cmp	r7, r5
 800d012:	d917      	bls.n	800d044 <__mdiff+0xd0>
 800d014:	46a4      	mov	ip, r4
 800d016:	4629      	mov	r1, r5
 800d018:	f851 eb04 	ldr.w	lr, [r1], #4
 800d01c:	fa13 f28e 	uxtah	r2, r3, lr
 800d020:	1413      	asrs	r3, r2, #16
 800d022:	eb03 431e 	add.w	r3, r3, lr, lsr #16
 800d026:	b292      	uxth	r2, r2
 800d028:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d02c:	428f      	cmp	r7, r1
 800d02e:	f84c 2b04 	str.w	r2, [ip], #4
 800d032:	ea4f 4323 	mov.w	r3, r3, asr #16
 800d036:	d8ef      	bhi.n	800d018 <__mdiff+0xa4>
 800d038:	43ed      	mvns	r5, r5
 800d03a:	443d      	add	r5, r7
 800d03c:	f025 0503 	bic.w	r5, r5, #3
 800d040:	3504      	adds	r5, #4
 800d042:	442c      	add	r4, r5
 800d044:	3c04      	subs	r4, #4
 800d046:	b922      	cbnz	r2, 800d052 <__mdiff+0xde>
 800d048:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 800d04c:	3e01      	subs	r6, #1
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d0fa      	beq.n	800d048 <__mdiff+0xd4>
 800d052:	6106      	str	r6, [r0, #16]
 800d054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d058:	2100      	movs	r1, #0
 800d05a:	f7ff fd63 	bl	800cb24 <_Balloc>
 800d05e:	2201      	movs	r2, #1
 800d060:	2300      	movs	r3, #0
 800d062:	6102      	str	r2, [r0, #16]
 800d064:	6143      	str	r3, [r0, #20]
 800d066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d06a:	462c      	mov	r4, r5
 800d06c:	f04f 0900 	mov.w	r9, #0
 800d070:	4615      	mov	r5, r2
 800d072:	e7a7      	b.n	800cfc4 <__mdiff+0x50>
 800d074:	463b      	mov	r3, r7
 800d076:	f107 0414 	add.w	r4, r7, #20
 800d07a:	f108 0514 	add.w	r5, r8, #20
 800d07e:	4647      	mov	r7, r8
 800d080:	f04f 0901 	mov.w	r9, #1
 800d084:	4698      	mov	r8, r3
 800d086:	e79d      	b.n	800cfc4 <__mdiff+0x50>

0800d088 <__d2b>:
 800d088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d08c:	b082      	sub	sp, #8
 800d08e:	2101      	movs	r1, #1
 800d090:	461c      	mov	r4, r3
 800d092:	f3c3 570a 	ubfx	r7, r3, #20, #11
 800d096:	4615      	mov	r5, r2
 800d098:	9e08      	ldr	r6, [sp, #32]
 800d09a:	f7ff fd43 	bl	800cb24 <_Balloc>
 800d09e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d0a2:	4680      	mov	r8, r0
 800d0a4:	b10f      	cbz	r7, 800d0aa <__d2b+0x22>
 800d0a6:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800d0aa:	9401      	str	r4, [sp, #4]
 800d0ac:	b31d      	cbz	r5, 800d0f6 <__d2b+0x6e>
 800d0ae:	a802      	add	r0, sp, #8
 800d0b0:	f840 5d08 	str.w	r5, [r0, #-8]!
 800d0b4:	f7ff fdc6 	bl	800cc44 <__lo0bits>
 800d0b8:	2800      	cmp	r0, #0
 800d0ba:	d134      	bne.n	800d126 <__d2b+0x9e>
 800d0bc:	e89d 000c 	ldmia.w	sp, {r2, r3}
 800d0c0:	f8c8 2014 	str.w	r2, [r8, #20]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	bf0c      	ite	eq
 800d0c8:	2101      	moveq	r1, #1
 800d0ca:	2102      	movne	r1, #2
 800d0cc:	f8c8 3018 	str.w	r3, [r8, #24]
 800d0d0:	f8c8 1010 	str.w	r1, [r8, #16]
 800d0d4:	b9df      	cbnz	r7, 800d10e <__d2b+0x86>
 800d0d6:	eb08 0381 	add.w	r3, r8, r1, lsl #2
 800d0da:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d0de:	6030      	str	r0, [r6, #0]
 800d0e0:	6918      	ldr	r0, [r3, #16]
 800d0e2:	f7ff fd8f 	bl	800cc04 <__hi0bits>
 800d0e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0e8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d0ec:	6018      	str	r0, [r3, #0]
 800d0ee:	4640      	mov	r0, r8
 800d0f0:	b002      	add	sp, #8
 800d0f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0f6:	a801      	add	r0, sp, #4
 800d0f8:	f7ff fda4 	bl	800cc44 <__lo0bits>
 800d0fc:	9b01      	ldr	r3, [sp, #4]
 800d0fe:	f8c8 3014 	str.w	r3, [r8, #20]
 800d102:	2101      	movs	r1, #1
 800d104:	3020      	adds	r0, #32
 800d106:	f8c8 1010 	str.w	r1, [r8, #16]
 800d10a:	2f00      	cmp	r7, #0
 800d10c:	d0e3      	beq.n	800d0d6 <__d2b+0x4e>
 800d10e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d110:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
 800d114:	4407      	add	r7, r0
 800d116:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d11a:	6037      	str	r7, [r6, #0]
 800d11c:	6018      	str	r0, [r3, #0]
 800d11e:	4640      	mov	r0, r8
 800d120:	b002      	add	sp, #8
 800d122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d126:	e89d 000c 	ldmia.w	sp, {r2, r3}
 800d12a:	f1c0 0120 	rsb	r1, r0, #32
 800d12e:	fa03 f101 	lsl.w	r1, r3, r1
 800d132:	430a      	orrs	r2, r1
 800d134:	40c3      	lsrs	r3, r0
 800d136:	9301      	str	r3, [sp, #4]
 800d138:	f8c8 2014 	str.w	r2, [r8, #20]
 800d13c:	e7c2      	b.n	800d0c4 <__d2b+0x3c>
 800d13e:	bf00      	nop

0800d140 <_realloc_r>:
 800d140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d144:	4617      	mov	r7, r2
 800d146:	b083      	sub	sp, #12
 800d148:	2900      	cmp	r1, #0
 800d14a:	f000 80c1 	beq.w	800d2d0 <_realloc_r+0x190>
 800d14e:	460e      	mov	r6, r1
 800d150:	4681      	mov	r9, r0
 800d152:	f107 050b 	add.w	r5, r7, #11
 800d156:	f7ff fce1 	bl	800cb1c <__malloc_lock>
 800d15a:	f856 ec04 	ldr.w	lr, [r6, #-4]
 800d15e:	2d16      	cmp	r5, #22
 800d160:	f02e 0403 	bic.w	r4, lr, #3
 800d164:	f1a6 0808 	sub.w	r8, r6, #8
 800d168:	d840      	bhi.n	800d1ec <_realloc_r+0xac>
 800d16a:	2210      	movs	r2, #16
 800d16c:	4615      	mov	r5, r2
 800d16e:	42af      	cmp	r7, r5
 800d170:	d841      	bhi.n	800d1f6 <_realloc_r+0xb6>
 800d172:	4294      	cmp	r4, r2
 800d174:	da75      	bge.n	800d262 <_realloc_r+0x122>
 800d176:	4bc9      	ldr	r3, [pc, #804]	; (800d49c <_realloc_r+0x35c>)
 800d178:	6899      	ldr	r1, [r3, #8]
 800d17a:	eb08 0004 	add.w	r0, r8, r4
 800d17e:	4288      	cmp	r0, r1
 800d180:	6841      	ldr	r1, [r0, #4]
 800d182:	f000 80d9 	beq.w	800d338 <_realloc_r+0x1f8>
 800d186:	f021 0301 	bic.w	r3, r1, #1
 800d18a:	4403      	add	r3, r0
 800d18c:	685b      	ldr	r3, [r3, #4]
 800d18e:	07db      	lsls	r3, r3, #31
 800d190:	d57d      	bpl.n	800d28e <_realloc_r+0x14e>
 800d192:	f01e 0f01 	tst.w	lr, #1
 800d196:	d035      	beq.n	800d204 <_realloc_r+0xc4>
 800d198:	4639      	mov	r1, r7
 800d19a:	4648      	mov	r0, r9
 800d19c:	f7ff f9a2 	bl	800c4e4 <_malloc_r>
 800d1a0:	4607      	mov	r7, r0
 800d1a2:	b1e0      	cbz	r0, 800d1de <_realloc_r+0x9e>
 800d1a4:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d1a8:	f023 0301 	bic.w	r3, r3, #1
 800d1ac:	4443      	add	r3, r8
 800d1ae:	f1a0 0208 	sub.w	r2, r0, #8
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	f000 8144 	beq.w	800d440 <_realloc_r+0x300>
 800d1b8:	1f22      	subs	r2, r4, #4
 800d1ba:	2a24      	cmp	r2, #36	; 0x24
 800d1bc:	f200 8131 	bhi.w	800d422 <_realloc_r+0x2e2>
 800d1c0:	2a13      	cmp	r2, #19
 800d1c2:	f200 8104 	bhi.w	800d3ce <_realloc_r+0x28e>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	4632      	mov	r2, r6
 800d1ca:	6811      	ldr	r1, [r2, #0]
 800d1cc:	6019      	str	r1, [r3, #0]
 800d1ce:	6851      	ldr	r1, [r2, #4]
 800d1d0:	6059      	str	r1, [r3, #4]
 800d1d2:	6892      	ldr	r2, [r2, #8]
 800d1d4:	609a      	str	r2, [r3, #8]
 800d1d6:	4631      	mov	r1, r6
 800d1d8:	4648      	mov	r0, r9
 800d1da:	f7fe fe6d 	bl	800beb8 <_free_r>
 800d1de:	4648      	mov	r0, r9
 800d1e0:	f7ff fc9e 	bl	800cb20 <__malloc_unlock>
 800d1e4:	4638      	mov	r0, r7
 800d1e6:	b003      	add	sp, #12
 800d1e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1ec:	f025 0507 	bic.w	r5, r5, #7
 800d1f0:	2d00      	cmp	r5, #0
 800d1f2:	462a      	mov	r2, r5
 800d1f4:	dabb      	bge.n	800d16e <_realloc_r+0x2e>
 800d1f6:	230c      	movs	r3, #12
 800d1f8:	2000      	movs	r0, #0
 800d1fa:	f8c9 3000 	str.w	r3, [r9]
 800d1fe:	b003      	add	sp, #12
 800d200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d204:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800d208:	ebc3 0a08 	rsb	sl, r3, r8
 800d20c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800d210:	f023 0c03 	bic.w	ip, r3, #3
 800d214:	eb04 030c 	add.w	r3, r4, ip
 800d218:	4293      	cmp	r3, r2
 800d21a:	dbbd      	blt.n	800d198 <_realloc_r+0x58>
 800d21c:	4657      	mov	r7, sl
 800d21e:	f8da 100c 	ldr.w	r1, [sl, #12]
 800d222:	f857 0f08 	ldr.w	r0, [r7, #8]!
 800d226:	1f22      	subs	r2, r4, #4
 800d228:	2a24      	cmp	r2, #36	; 0x24
 800d22a:	60c1      	str	r1, [r0, #12]
 800d22c:	6088      	str	r0, [r1, #8]
 800d22e:	f200 8117 	bhi.w	800d460 <_realloc_r+0x320>
 800d232:	2a13      	cmp	r2, #19
 800d234:	f240 8112 	bls.w	800d45c <_realloc_r+0x31c>
 800d238:	6831      	ldr	r1, [r6, #0]
 800d23a:	f8ca 1008 	str.w	r1, [sl, #8]
 800d23e:	6871      	ldr	r1, [r6, #4]
 800d240:	f8ca 100c 	str.w	r1, [sl, #12]
 800d244:	2a1b      	cmp	r2, #27
 800d246:	f200 812b 	bhi.w	800d4a0 <_realloc_r+0x360>
 800d24a:	3608      	adds	r6, #8
 800d24c:	f10a 0210 	add.w	r2, sl, #16
 800d250:	6831      	ldr	r1, [r6, #0]
 800d252:	6011      	str	r1, [r2, #0]
 800d254:	6871      	ldr	r1, [r6, #4]
 800d256:	6051      	str	r1, [r2, #4]
 800d258:	68b1      	ldr	r1, [r6, #8]
 800d25a:	6091      	str	r1, [r2, #8]
 800d25c:	463e      	mov	r6, r7
 800d25e:	461c      	mov	r4, r3
 800d260:	46d0      	mov	r8, sl
 800d262:	1b63      	subs	r3, r4, r5
 800d264:	2b0f      	cmp	r3, #15
 800d266:	d81d      	bhi.n	800d2a4 <_realloc_r+0x164>
 800d268:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d26c:	f003 0301 	and.w	r3, r3, #1
 800d270:	4323      	orrs	r3, r4
 800d272:	4444      	add	r4, r8
 800d274:	f8c8 3004 	str.w	r3, [r8, #4]
 800d278:	6863      	ldr	r3, [r4, #4]
 800d27a:	f043 0301 	orr.w	r3, r3, #1
 800d27e:	6063      	str	r3, [r4, #4]
 800d280:	4648      	mov	r0, r9
 800d282:	f7ff fc4d 	bl	800cb20 <__malloc_unlock>
 800d286:	4630      	mov	r0, r6
 800d288:	b003      	add	sp, #12
 800d28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d28e:	f021 0103 	bic.w	r1, r1, #3
 800d292:	4421      	add	r1, r4
 800d294:	4291      	cmp	r1, r2
 800d296:	db21      	blt.n	800d2dc <_realloc_r+0x19c>
 800d298:	68c3      	ldr	r3, [r0, #12]
 800d29a:	6882      	ldr	r2, [r0, #8]
 800d29c:	460c      	mov	r4, r1
 800d29e:	60d3      	str	r3, [r2, #12]
 800d2a0:	609a      	str	r2, [r3, #8]
 800d2a2:	e7de      	b.n	800d262 <_realloc_r+0x122>
 800d2a4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800d2a8:	eb08 0105 	add.w	r1, r8, r5
 800d2ac:	f002 0201 	and.w	r2, r2, #1
 800d2b0:	4315      	orrs	r5, r2
 800d2b2:	f043 0201 	orr.w	r2, r3, #1
 800d2b6:	440b      	add	r3, r1
 800d2b8:	f8c8 5004 	str.w	r5, [r8, #4]
 800d2bc:	604a      	str	r2, [r1, #4]
 800d2be:	685a      	ldr	r2, [r3, #4]
 800d2c0:	f042 0201 	orr.w	r2, r2, #1
 800d2c4:	3108      	adds	r1, #8
 800d2c6:	605a      	str	r2, [r3, #4]
 800d2c8:	4648      	mov	r0, r9
 800d2ca:	f7fe fdf5 	bl	800beb8 <_free_r>
 800d2ce:	e7d7      	b.n	800d280 <_realloc_r+0x140>
 800d2d0:	4611      	mov	r1, r2
 800d2d2:	b003      	add	sp, #12
 800d2d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2d8:	f7ff b904 	b.w	800c4e4 <_malloc_r>
 800d2dc:	f01e 0f01 	tst.w	lr, #1
 800d2e0:	f47f af5a 	bne.w	800d198 <_realloc_r+0x58>
 800d2e4:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800d2e8:	ebc3 0a08 	rsb	sl, r3, r8
 800d2ec:	f8da 3004 	ldr.w	r3, [sl, #4]
 800d2f0:	f023 0c03 	bic.w	ip, r3, #3
 800d2f4:	eb01 0e0c 	add.w	lr, r1, ip
 800d2f8:	4596      	cmp	lr, r2
 800d2fa:	db8b      	blt.n	800d214 <_realloc_r+0xd4>
 800d2fc:	68c3      	ldr	r3, [r0, #12]
 800d2fe:	6882      	ldr	r2, [r0, #8]
 800d300:	4657      	mov	r7, sl
 800d302:	60d3      	str	r3, [r2, #12]
 800d304:	609a      	str	r2, [r3, #8]
 800d306:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800d30a:	f8da 300c 	ldr.w	r3, [sl, #12]
 800d30e:	60cb      	str	r3, [r1, #12]
 800d310:	1f22      	subs	r2, r4, #4
 800d312:	2a24      	cmp	r2, #36	; 0x24
 800d314:	6099      	str	r1, [r3, #8]
 800d316:	f200 8099 	bhi.w	800d44c <_realloc_r+0x30c>
 800d31a:	2a13      	cmp	r2, #19
 800d31c:	d962      	bls.n	800d3e4 <_realloc_r+0x2a4>
 800d31e:	6833      	ldr	r3, [r6, #0]
 800d320:	f8ca 3008 	str.w	r3, [sl, #8]
 800d324:	6873      	ldr	r3, [r6, #4]
 800d326:	f8ca 300c 	str.w	r3, [sl, #12]
 800d32a:	2a1b      	cmp	r2, #27
 800d32c:	f200 80a0 	bhi.w	800d470 <_realloc_r+0x330>
 800d330:	3608      	adds	r6, #8
 800d332:	f10a 0310 	add.w	r3, sl, #16
 800d336:	e056      	b.n	800d3e6 <_realloc_r+0x2a6>
 800d338:	f021 0b03 	bic.w	fp, r1, #3
 800d33c:	44a3      	add	fp, r4
 800d33e:	f105 0010 	add.w	r0, r5, #16
 800d342:	4583      	cmp	fp, r0
 800d344:	da59      	bge.n	800d3fa <_realloc_r+0x2ba>
 800d346:	f01e 0f01 	tst.w	lr, #1
 800d34a:	f47f af25 	bne.w	800d198 <_realloc_r+0x58>
 800d34e:	f856 1c08 	ldr.w	r1, [r6, #-8]
 800d352:	ebc1 0a08 	rsb	sl, r1, r8
 800d356:	f8da 1004 	ldr.w	r1, [sl, #4]
 800d35a:	f021 0c03 	bic.w	ip, r1, #3
 800d35e:	44e3      	add	fp, ip
 800d360:	4558      	cmp	r0, fp
 800d362:	f73f af57 	bgt.w	800d214 <_realloc_r+0xd4>
 800d366:	4657      	mov	r7, sl
 800d368:	f8da 100c 	ldr.w	r1, [sl, #12]
 800d36c:	f857 0f08 	ldr.w	r0, [r7, #8]!
 800d370:	1f22      	subs	r2, r4, #4
 800d372:	2a24      	cmp	r2, #36	; 0x24
 800d374:	60c1      	str	r1, [r0, #12]
 800d376:	6088      	str	r0, [r1, #8]
 800d378:	f200 80b4 	bhi.w	800d4e4 <_realloc_r+0x3a4>
 800d37c:	2a13      	cmp	r2, #19
 800d37e:	f240 80a5 	bls.w	800d4cc <_realloc_r+0x38c>
 800d382:	6831      	ldr	r1, [r6, #0]
 800d384:	f8ca 1008 	str.w	r1, [sl, #8]
 800d388:	6871      	ldr	r1, [r6, #4]
 800d38a:	f8ca 100c 	str.w	r1, [sl, #12]
 800d38e:	2a1b      	cmp	r2, #27
 800d390:	f200 80af 	bhi.w	800d4f2 <_realloc_r+0x3b2>
 800d394:	3608      	adds	r6, #8
 800d396:	f10a 0210 	add.w	r2, sl, #16
 800d39a:	6831      	ldr	r1, [r6, #0]
 800d39c:	6011      	str	r1, [r2, #0]
 800d39e:	6871      	ldr	r1, [r6, #4]
 800d3a0:	6051      	str	r1, [r2, #4]
 800d3a2:	68b1      	ldr	r1, [r6, #8]
 800d3a4:	6091      	str	r1, [r2, #8]
 800d3a6:	eb0a 0105 	add.w	r1, sl, r5
 800d3aa:	ebc5 020b 	rsb	r2, r5, fp
 800d3ae:	f042 0201 	orr.w	r2, r2, #1
 800d3b2:	6099      	str	r1, [r3, #8]
 800d3b4:	604a      	str	r2, [r1, #4]
 800d3b6:	f8da 3004 	ldr.w	r3, [sl, #4]
 800d3ba:	f003 0301 	and.w	r3, r3, #1
 800d3be:	431d      	orrs	r5, r3
 800d3c0:	4648      	mov	r0, r9
 800d3c2:	f8ca 5004 	str.w	r5, [sl, #4]
 800d3c6:	f7ff fbab 	bl	800cb20 <__malloc_unlock>
 800d3ca:	4638      	mov	r0, r7
 800d3cc:	e75c      	b.n	800d288 <_realloc_r+0x148>
 800d3ce:	6833      	ldr	r3, [r6, #0]
 800d3d0:	6003      	str	r3, [r0, #0]
 800d3d2:	6873      	ldr	r3, [r6, #4]
 800d3d4:	6043      	str	r3, [r0, #4]
 800d3d6:	2a1b      	cmp	r2, #27
 800d3d8:	d827      	bhi.n	800d42a <_realloc_r+0x2ea>
 800d3da:	f100 0308 	add.w	r3, r0, #8
 800d3de:	f106 0208 	add.w	r2, r6, #8
 800d3e2:	e6f2      	b.n	800d1ca <_realloc_r+0x8a>
 800d3e4:	463b      	mov	r3, r7
 800d3e6:	6832      	ldr	r2, [r6, #0]
 800d3e8:	601a      	str	r2, [r3, #0]
 800d3ea:	6872      	ldr	r2, [r6, #4]
 800d3ec:	605a      	str	r2, [r3, #4]
 800d3ee:	68b2      	ldr	r2, [r6, #8]
 800d3f0:	609a      	str	r2, [r3, #8]
 800d3f2:	463e      	mov	r6, r7
 800d3f4:	4674      	mov	r4, lr
 800d3f6:	46d0      	mov	r8, sl
 800d3f8:	e733      	b.n	800d262 <_realloc_r+0x122>
 800d3fa:	eb08 0105 	add.w	r1, r8, r5
 800d3fe:	ebc5 0b0b 	rsb	fp, r5, fp
 800d402:	f04b 0201 	orr.w	r2, fp, #1
 800d406:	6099      	str	r1, [r3, #8]
 800d408:	604a      	str	r2, [r1, #4]
 800d40a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d40e:	f003 0301 	and.w	r3, r3, #1
 800d412:	431d      	orrs	r5, r3
 800d414:	4648      	mov	r0, r9
 800d416:	f846 5c04 	str.w	r5, [r6, #-4]
 800d41a:	f7ff fb81 	bl	800cb20 <__malloc_unlock>
 800d41e:	4630      	mov	r0, r6
 800d420:	e732      	b.n	800d288 <_realloc_r+0x148>
 800d422:	4631      	mov	r1, r6
 800d424:	f7ff fb16 	bl	800ca54 <memmove>
 800d428:	e6d5      	b.n	800d1d6 <_realloc_r+0x96>
 800d42a:	68b3      	ldr	r3, [r6, #8]
 800d42c:	6083      	str	r3, [r0, #8]
 800d42e:	68f3      	ldr	r3, [r6, #12]
 800d430:	60c3      	str	r3, [r0, #12]
 800d432:	2a24      	cmp	r2, #36	; 0x24
 800d434:	d028      	beq.n	800d488 <_realloc_r+0x348>
 800d436:	f100 0310 	add.w	r3, r0, #16
 800d43a:	f106 0210 	add.w	r2, r6, #16
 800d43e:	e6c4      	b.n	800d1ca <_realloc_r+0x8a>
 800d440:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800d444:	f023 0303 	bic.w	r3, r3, #3
 800d448:	441c      	add	r4, r3
 800d44a:	e70a      	b.n	800d262 <_realloc_r+0x122>
 800d44c:	4631      	mov	r1, r6
 800d44e:	4638      	mov	r0, r7
 800d450:	4674      	mov	r4, lr
 800d452:	46d0      	mov	r8, sl
 800d454:	f7ff fafe 	bl	800ca54 <memmove>
 800d458:	463e      	mov	r6, r7
 800d45a:	e702      	b.n	800d262 <_realloc_r+0x122>
 800d45c:	463a      	mov	r2, r7
 800d45e:	e6f7      	b.n	800d250 <_realloc_r+0x110>
 800d460:	4631      	mov	r1, r6
 800d462:	4638      	mov	r0, r7
 800d464:	461c      	mov	r4, r3
 800d466:	46d0      	mov	r8, sl
 800d468:	f7ff faf4 	bl	800ca54 <memmove>
 800d46c:	463e      	mov	r6, r7
 800d46e:	e6f8      	b.n	800d262 <_realloc_r+0x122>
 800d470:	68b3      	ldr	r3, [r6, #8]
 800d472:	f8ca 3010 	str.w	r3, [sl, #16]
 800d476:	68f3      	ldr	r3, [r6, #12]
 800d478:	f8ca 3014 	str.w	r3, [sl, #20]
 800d47c:	2a24      	cmp	r2, #36	; 0x24
 800d47e:	d01b      	beq.n	800d4b8 <_realloc_r+0x378>
 800d480:	3610      	adds	r6, #16
 800d482:	f10a 0318 	add.w	r3, sl, #24
 800d486:	e7ae      	b.n	800d3e6 <_realloc_r+0x2a6>
 800d488:	6933      	ldr	r3, [r6, #16]
 800d48a:	6103      	str	r3, [r0, #16]
 800d48c:	6973      	ldr	r3, [r6, #20]
 800d48e:	6143      	str	r3, [r0, #20]
 800d490:	f106 0218 	add.w	r2, r6, #24
 800d494:	f100 0318 	add.w	r3, r0, #24
 800d498:	e697      	b.n	800d1ca <_realloc_r+0x8a>
 800d49a:	bf00      	nop
 800d49c:	2000044c 	.word	0x2000044c
 800d4a0:	68b1      	ldr	r1, [r6, #8]
 800d4a2:	f8ca 1010 	str.w	r1, [sl, #16]
 800d4a6:	68f1      	ldr	r1, [r6, #12]
 800d4a8:	f8ca 1014 	str.w	r1, [sl, #20]
 800d4ac:	2a24      	cmp	r2, #36	; 0x24
 800d4ae:	d00f      	beq.n	800d4d0 <_realloc_r+0x390>
 800d4b0:	3610      	adds	r6, #16
 800d4b2:	f10a 0218 	add.w	r2, sl, #24
 800d4b6:	e6cb      	b.n	800d250 <_realloc_r+0x110>
 800d4b8:	6933      	ldr	r3, [r6, #16]
 800d4ba:	f8ca 3018 	str.w	r3, [sl, #24]
 800d4be:	6973      	ldr	r3, [r6, #20]
 800d4c0:	f8ca 301c 	str.w	r3, [sl, #28]
 800d4c4:	3618      	adds	r6, #24
 800d4c6:	f10a 0320 	add.w	r3, sl, #32
 800d4ca:	e78c      	b.n	800d3e6 <_realloc_r+0x2a6>
 800d4cc:	463a      	mov	r2, r7
 800d4ce:	e764      	b.n	800d39a <_realloc_r+0x25a>
 800d4d0:	6932      	ldr	r2, [r6, #16]
 800d4d2:	f8ca 2018 	str.w	r2, [sl, #24]
 800d4d6:	6972      	ldr	r2, [r6, #20]
 800d4d8:	f8ca 201c 	str.w	r2, [sl, #28]
 800d4dc:	3618      	adds	r6, #24
 800d4de:	f10a 0220 	add.w	r2, sl, #32
 800d4e2:	e6b5      	b.n	800d250 <_realloc_r+0x110>
 800d4e4:	4631      	mov	r1, r6
 800d4e6:	4638      	mov	r0, r7
 800d4e8:	9301      	str	r3, [sp, #4]
 800d4ea:	f7ff fab3 	bl	800ca54 <memmove>
 800d4ee:	9b01      	ldr	r3, [sp, #4]
 800d4f0:	e759      	b.n	800d3a6 <_realloc_r+0x266>
 800d4f2:	68b1      	ldr	r1, [r6, #8]
 800d4f4:	f8ca 1010 	str.w	r1, [sl, #16]
 800d4f8:	68f1      	ldr	r1, [r6, #12]
 800d4fa:	f8ca 1014 	str.w	r1, [sl, #20]
 800d4fe:	2a24      	cmp	r2, #36	; 0x24
 800d500:	d003      	beq.n	800d50a <_realloc_r+0x3ca>
 800d502:	3610      	adds	r6, #16
 800d504:	f10a 0218 	add.w	r2, sl, #24
 800d508:	e747      	b.n	800d39a <_realloc_r+0x25a>
 800d50a:	6932      	ldr	r2, [r6, #16]
 800d50c:	f8ca 2018 	str.w	r2, [sl, #24]
 800d510:	6972      	ldr	r2, [r6, #20]
 800d512:	f8ca 201c 	str.w	r2, [sl, #28]
 800d516:	3618      	adds	r6, #24
 800d518:	f10a 0220 	add.w	r2, sl, #32
 800d51c:	e73d      	b.n	800d39a <_realloc_r+0x25a>
 800d51e:	bf00      	nop

0800d520 <_sbrk_r>:
 800d520:	b538      	push	{r3, r4, r5, lr}
 800d522:	4c07      	ldr	r4, [pc, #28]	; (800d540 <_sbrk_r+0x20>)
 800d524:	2300      	movs	r3, #0
 800d526:	4605      	mov	r5, r0
 800d528:	4608      	mov	r0, r1
 800d52a:	6023      	str	r3, [r4, #0]
 800d52c:	f7f9 fde0 	bl	80070f0 <_sbrk>
 800d530:	1c43      	adds	r3, r0, #1
 800d532:	d000      	beq.n	800d536 <_sbrk_r+0x16>
 800d534:	bd38      	pop	{r3, r4, r5, pc}
 800d536:	6823      	ldr	r3, [r4, #0]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d0fb      	beq.n	800d534 <_sbrk_r+0x14>
 800d53c:	602b      	str	r3, [r5, #0]
 800d53e:	bd38      	pop	{r3, r4, r5, pc}
 800d540:	20003778 	.word	0x20003778

0800d544 <__sread>:
 800d544:	b510      	push	{r4, lr}
 800d546:	460c      	mov	r4, r1
 800d548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d54c:	f000 fa5c 	bl	800da08 <_read_r>
 800d550:	2800      	cmp	r0, #0
 800d552:	db03      	blt.n	800d55c <__sread+0x18>
 800d554:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d556:	4403      	add	r3, r0
 800d558:	6523      	str	r3, [r4, #80]	; 0x50
 800d55a:	bd10      	pop	{r4, pc}
 800d55c:	89a3      	ldrh	r3, [r4, #12]
 800d55e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d562:	81a3      	strh	r3, [r4, #12]
 800d564:	bd10      	pop	{r4, pc}
 800d566:	bf00      	nop

0800d568 <__swrite>:
 800d568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d56c:	4616      	mov	r6, r2
 800d56e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d572:	461f      	mov	r7, r3
 800d574:	05d3      	lsls	r3, r2, #23
 800d576:	460c      	mov	r4, r1
 800d578:	4605      	mov	r5, r0
 800d57a:	d507      	bpl.n	800d58c <__swrite+0x24>
 800d57c:	2200      	movs	r2, #0
 800d57e:	2302      	movs	r3, #2
 800d580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d584:	f000 fa14 	bl	800d9b0 <_lseek_r>
 800d588:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d58c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d590:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d594:	81a2      	strh	r2, [r4, #12]
 800d596:	463b      	mov	r3, r7
 800d598:	4632      	mov	r2, r6
 800d59a:	4628      	mov	r0, r5
 800d59c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5a0:	f000 b8da 	b.w	800d758 <_write_r>

0800d5a4 <__sseek>:
 800d5a4:	b510      	push	{r4, lr}
 800d5a6:	460c      	mov	r4, r1
 800d5a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5ac:	f000 fa00 	bl	800d9b0 <_lseek_r>
 800d5b0:	89a3      	ldrh	r3, [r4, #12]
 800d5b2:	1c42      	adds	r2, r0, #1
 800d5b4:	bf0e      	itee	eq
 800d5b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d5ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d5be:	6520      	strne	r0, [r4, #80]	; 0x50
 800d5c0:	81a3      	strh	r3, [r4, #12]
 800d5c2:	bd10      	pop	{r4, pc}

0800d5c4 <__sclose>:
 800d5c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5c8:	f000 b90c 	b.w	800d7e4 <_close_r>

0800d5cc <__ssprint_r>:
 800d5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5d0:	6893      	ldr	r3, [r2, #8]
 800d5d2:	b083      	sub	sp, #12
 800d5d4:	4690      	mov	r8, r2
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d072      	beq.n	800d6c0 <__ssprint_r+0xf4>
 800d5da:	4683      	mov	fp, r0
 800d5dc:	f04f 0900 	mov.w	r9, #0
 800d5e0:	6816      	ldr	r6, [r2, #0]
 800d5e2:	6808      	ldr	r0, [r1, #0]
 800d5e4:	688b      	ldr	r3, [r1, #8]
 800d5e6:	460d      	mov	r5, r1
 800d5e8:	464c      	mov	r4, r9
 800d5ea:	2c00      	cmp	r4, #0
 800d5ec:	d045      	beq.n	800d67a <__ssprint_r+0xae>
 800d5ee:	429c      	cmp	r4, r3
 800d5f0:	461f      	mov	r7, r3
 800d5f2:	469a      	mov	sl, r3
 800d5f4:	d346      	bcc.n	800d684 <__ssprint_r+0xb8>
 800d5f6:	89ab      	ldrh	r3, [r5, #12]
 800d5f8:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800d5fc:	d02d      	beq.n	800d65a <__ssprint_r+0x8e>
 800d5fe:	696f      	ldr	r7, [r5, #20]
 800d600:	6929      	ldr	r1, [r5, #16]
 800d602:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800d606:	ebc1 0a00 	rsb	sl, r1, r0
 800d60a:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 800d60e:	1c60      	adds	r0, r4, #1
 800d610:	107f      	asrs	r7, r7, #1
 800d612:	4450      	add	r0, sl
 800d614:	42b8      	cmp	r0, r7
 800d616:	463a      	mov	r2, r7
 800d618:	bf84      	itt	hi
 800d61a:	4607      	movhi	r7, r0
 800d61c:	463a      	movhi	r2, r7
 800d61e:	055b      	lsls	r3, r3, #21
 800d620:	d533      	bpl.n	800d68a <__ssprint_r+0xbe>
 800d622:	4611      	mov	r1, r2
 800d624:	4658      	mov	r0, fp
 800d626:	f7fe ff5d 	bl	800c4e4 <_malloc_r>
 800d62a:	2800      	cmp	r0, #0
 800d62c:	d037      	beq.n	800d69e <__ssprint_r+0xd2>
 800d62e:	4652      	mov	r2, sl
 800d630:	6929      	ldr	r1, [r5, #16]
 800d632:	9001      	str	r0, [sp, #4]
 800d634:	f7f2 fff6 	bl	8000624 <memcpy>
 800d638:	89aa      	ldrh	r2, [r5, #12]
 800d63a:	9b01      	ldr	r3, [sp, #4]
 800d63c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800d640:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d644:	81aa      	strh	r2, [r5, #12]
 800d646:	ebca 0207 	rsb	r2, sl, r7
 800d64a:	eb03 000a 	add.w	r0, r3, sl
 800d64e:	616f      	str	r7, [r5, #20]
 800d650:	612b      	str	r3, [r5, #16]
 800d652:	6028      	str	r0, [r5, #0]
 800d654:	60aa      	str	r2, [r5, #8]
 800d656:	4627      	mov	r7, r4
 800d658:	46a2      	mov	sl, r4
 800d65a:	4652      	mov	r2, sl
 800d65c:	4649      	mov	r1, r9
 800d65e:	f7ff f9f9 	bl	800ca54 <memmove>
 800d662:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800d666:	68ab      	ldr	r3, [r5, #8]
 800d668:	6828      	ldr	r0, [r5, #0]
 800d66a:	1bdb      	subs	r3, r3, r7
 800d66c:	4450      	add	r0, sl
 800d66e:	1b14      	subs	r4, r2, r4
 800d670:	60ab      	str	r3, [r5, #8]
 800d672:	6028      	str	r0, [r5, #0]
 800d674:	f8c8 4008 	str.w	r4, [r8, #8]
 800d678:	b314      	cbz	r4, 800d6c0 <__ssprint_r+0xf4>
 800d67a:	f8d6 9000 	ldr.w	r9, [r6]
 800d67e:	6874      	ldr	r4, [r6, #4]
 800d680:	3608      	adds	r6, #8
 800d682:	e7b2      	b.n	800d5ea <__ssprint_r+0x1e>
 800d684:	4627      	mov	r7, r4
 800d686:	46a2      	mov	sl, r4
 800d688:	e7e7      	b.n	800d65a <__ssprint_r+0x8e>
 800d68a:	4658      	mov	r0, fp
 800d68c:	f7ff fd58 	bl	800d140 <_realloc_r>
 800d690:	4603      	mov	r3, r0
 800d692:	2800      	cmp	r0, #0
 800d694:	d1d7      	bne.n	800d646 <__ssprint_r+0x7a>
 800d696:	6929      	ldr	r1, [r5, #16]
 800d698:	4658      	mov	r0, fp
 800d69a:	f7fe fc0d 	bl	800beb8 <_free_r>
 800d69e:	230c      	movs	r3, #12
 800d6a0:	f8cb 3000 	str.w	r3, [fp]
 800d6a4:	89ab      	ldrh	r3, [r5, #12]
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d6b0:	81ab      	strh	r3, [r5, #12]
 800d6b2:	f8c8 2008 	str.w	r2, [r8, #8]
 800d6b6:	f8c8 2004 	str.w	r2, [r8, #4]
 800d6ba:	b003      	add	sp, #12
 800d6bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6c0:	2000      	movs	r0, #0
 800d6c2:	f8c8 0004 	str.w	r0, [r8, #4]
 800d6c6:	b003      	add	sp, #12
 800d6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d6cc <__sprint_r.part.0>:
 800d6cc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800d6ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6d2:	049c      	lsls	r4, r3, #18
 800d6d4:	4692      	mov	sl, r2
 800d6d6:	d52c      	bpl.n	800d732 <__sprint_r.part.0+0x66>
 800d6d8:	6893      	ldr	r3, [r2, #8]
 800d6da:	6812      	ldr	r2, [r2, #0]
 800d6dc:	b33b      	cbz	r3, 800d72e <__sprint_r.part.0+0x62>
 800d6de:	460f      	mov	r7, r1
 800d6e0:	4680      	mov	r8, r0
 800d6e2:	f102 0908 	add.w	r9, r2, #8
 800d6e6:	e919 0060 	ldmdb	r9, {r5, r6}
 800d6ea:	08b6      	lsrs	r6, r6, #2
 800d6ec:	d017      	beq.n	800d71e <__sprint_r.part.0+0x52>
 800d6ee:	3d04      	subs	r5, #4
 800d6f0:	2400      	movs	r4, #0
 800d6f2:	e001      	b.n	800d6f8 <__sprint_r.part.0+0x2c>
 800d6f4:	42a6      	cmp	r6, r4
 800d6f6:	d010      	beq.n	800d71a <__sprint_r.part.0+0x4e>
 800d6f8:	463a      	mov	r2, r7
 800d6fa:	f855 1f04 	ldr.w	r1, [r5, #4]!
 800d6fe:	4640      	mov	r0, r8
 800d700:	f000 f910 	bl	800d924 <_fputwc_r>
 800d704:	1c43      	adds	r3, r0, #1
 800d706:	f104 0401 	add.w	r4, r4, #1
 800d70a:	d1f3      	bne.n	800d6f4 <__sprint_r.part.0+0x28>
 800d70c:	2300      	movs	r3, #0
 800d70e:	f8ca 3008 	str.w	r3, [sl, #8]
 800d712:	f8ca 3004 	str.w	r3, [sl, #4]
 800d716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d71a:	f8da 3008 	ldr.w	r3, [sl, #8]
 800d71e:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
 800d722:	f8ca 3008 	str.w	r3, [sl, #8]
 800d726:	f109 0908 	add.w	r9, r9, #8
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d1db      	bne.n	800d6e6 <__sprint_r.part.0+0x1a>
 800d72e:	2000      	movs	r0, #0
 800d730:	e7ec      	b.n	800d70c <__sprint_r.part.0+0x40>
 800d732:	f7fe fca9 	bl	800c088 <__sfvwrite_r>
 800d736:	2300      	movs	r3, #0
 800d738:	f8ca 3008 	str.w	r3, [sl, #8]
 800d73c:	f8ca 3004 	str.w	r3, [sl, #4]
 800d740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800d744 <__sprint_r>:
 800d744:	6893      	ldr	r3, [r2, #8]
 800d746:	b10b      	cbz	r3, 800d74c <__sprint_r+0x8>
 800d748:	f7ff bfc0 	b.w	800d6cc <__sprint_r.part.0>
 800d74c:	b410      	push	{r4}
 800d74e:	4618      	mov	r0, r3
 800d750:	6053      	str	r3, [r2, #4]
 800d752:	bc10      	pop	{r4}
 800d754:	4770      	bx	lr
 800d756:	bf00      	nop

0800d758 <_write_r>:
 800d758:	b570      	push	{r4, r5, r6, lr}
 800d75a:	460d      	mov	r5, r1
 800d75c:	4c08      	ldr	r4, [pc, #32]	; (800d780 <_write_r+0x28>)
 800d75e:	4611      	mov	r1, r2
 800d760:	4606      	mov	r6, r0
 800d762:	461a      	mov	r2, r3
 800d764:	4628      	mov	r0, r5
 800d766:	2300      	movs	r3, #0
 800d768:	6023      	str	r3, [r4, #0]
 800d76a:	f7f9 fc43 	bl	8006ff4 <_write>
 800d76e:	1c43      	adds	r3, r0, #1
 800d770:	d000      	beq.n	800d774 <_write_r+0x1c>
 800d772:	bd70      	pop	{r4, r5, r6, pc}
 800d774:	6823      	ldr	r3, [r4, #0]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d0fb      	beq.n	800d772 <_write_r+0x1a>
 800d77a:	6033      	str	r3, [r6, #0]
 800d77c:	bd70      	pop	{r4, r5, r6, pc}
 800d77e:	bf00      	nop
 800d780:	20003778 	.word	0x20003778

0800d784 <_calloc_r>:
 800d784:	b510      	push	{r4, lr}
 800d786:	fb02 f101 	mul.w	r1, r2, r1
 800d78a:	f7fe feab 	bl	800c4e4 <_malloc_r>
 800d78e:	4604      	mov	r4, r0
 800d790:	b1d8      	cbz	r0, 800d7ca <_calloc_r+0x46>
 800d792:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800d796:	f022 0203 	bic.w	r2, r2, #3
 800d79a:	3a04      	subs	r2, #4
 800d79c:	2a24      	cmp	r2, #36	; 0x24
 800d79e:	d818      	bhi.n	800d7d2 <_calloc_r+0x4e>
 800d7a0:	2a13      	cmp	r2, #19
 800d7a2:	d914      	bls.n	800d7ce <_calloc_r+0x4a>
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	2a1b      	cmp	r2, #27
 800d7a8:	6003      	str	r3, [r0, #0]
 800d7aa:	6043      	str	r3, [r0, #4]
 800d7ac:	d916      	bls.n	800d7dc <_calloc_r+0x58>
 800d7ae:	2a24      	cmp	r2, #36	; 0x24
 800d7b0:	6083      	str	r3, [r0, #8]
 800d7b2:	60c3      	str	r3, [r0, #12]
 800d7b4:	bf11      	iteee	ne
 800d7b6:	f100 0210 	addne.w	r2, r0, #16
 800d7ba:	6103      	streq	r3, [r0, #16]
 800d7bc:	6143      	streq	r3, [r0, #20]
 800d7be:	f100 0218 	addeq.w	r2, r0, #24
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	6013      	str	r3, [r2, #0]
 800d7c6:	6053      	str	r3, [r2, #4]
 800d7c8:	6093      	str	r3, [r2, #8]
 800d7ca:	4620      	mov	r0, r4
 800d7cc:	bd10      	pop	{r4, pc}
 800d7ce:	4602      	mov	r2, r0
 800d7d0:	e7f7      	b.n	800d7c2 <_calloc_r+0x3e>
 800d7d2:	2100      	movs	r1, #0
 800d7d4:	f7fa f9ea 	bl	8007bac <memset>
 800d7d8:	4620      	mov	r0, r4
 800d7da:	bd10      	pop	{r4, pc}
 800d7dc:	f100 0208 	add.w	r2, r0, #8
 800d7e0:	e7ef      	b.n	800d7c2 <_calloc_r+0x3e>
 800d7e2:	bf00      	nop

0800d7e4 <_close_r>:
 800d7e4:	b538      	push	{r3, r4, r5, lr}
 800d7e6:	4c07      	ldr	r4, [pc, #28]	; (800d804 <_close_r+0x20>)
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	4605      	mov	r5, r0
 800d7ec:	4608      	mov	r0, r1
 800d7ee:	6023      	str	r3, [r4, #0]
 800d7f0:	f7f9 fc64 	bl	80070bc <_close>
 800d7f4:	1c43      	adds	r3, r0, #1
 800d7f6:	d000      	beq.n	800d7fa <_close_r+0x16>
 800d7f8:	bd38      	pop	{r3, r4, r5, pc}
 800d7fa:	6823      	ldr	r3, [r4, #0]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d0fb      	beq.n	800d7f8 <_close_r+0x14>
 800d800:	602b      	str	r3, [r5, #0]
 800d802:	bd38      	pop	{r3, r4, r5, pc}
 800d804:	20003778 	.word	0x20003778

0800d808 <_fclose_r>:
 800d808:	2900      	cmp	r1, #0
 800d80a:	d03d      	beq.n	800d888 <_fclose_r+0x80>
 800d80c:	b570      	push	{r4, r5, r6, lr}
 800d80e:	4605      	mov	r5, r0
 800d810:	460c      	mov	r4, r1
 800d812:	b108      	cbz	r0, 800d818 <_fclose_r+0x10>
 800d814:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d816:	b37b      	cbz	r3, 800d878 <_fclose_r+0x70>
 800d818:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d81c:	b90b      	cbnz	r3, 800d822 <_fclose_r+0x1a>
 800d81e:	2000      	movs	r0, #0
 800d820:	bd70      	pop	{r4, r5, r6, pc}
 800d822:	4621      	mov	r1, r4
 800d824:	4628      	mov	r0, r5
 800d826:	f7fe f9b7 	bl	800bb98 <__sflush_r>
 800d82a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d82c:	4606      	mov	r6, r0
 800d82e:	b133      	cbz	r3, 800d83e <_fclose_r+0x36>
 800d830:	69e1      	ldr	r1, [r4, #28]
 800d832:	4628      	mov	r0, r5
 800d834:	4798      	blx	r3
 800d836:	2800      	cmp	r0, #0
 800d838:	bfb8      	it	lt
 800d83a:	f04f 36ff 	movlt.w	r6, #4294967295
 800d83e:	89a3      	ldrh	r3, [r4, #12]
 800d840:	061b      	lsls	r3, r3, #24
 800d842:	d41c      	bmi.n	800d87e <_fclose_r+0x76>
 800d844:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d846:	b141      	cbz	r1, 800d85a <_fclose_r+0x52>
 800d848:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800d84c:	4299      	cmp	r1, r3
 800d84e:	d002      	beq.n	800d856 <_fclose_r+0x4e>
 800d850:	4628      	mov	r0, r5
 800d852:	f7fe fb31 	bl	800beb8 <_free_r>
 800d856:	2300      	movs	r3, #0
 800d858:	6323      	str	r3, [r4, #48]	; 0x30
 800d85a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d85c:	b121      	cbz	r1, 800d868 <_fclose_r+0x60>
 800d85e:	4628      	mov	r0, r5
 800d860:	f7fe fb2a 	bl	800beb8 <_free_r>
 800d864:	2300      	movs	r3, #0
 800d866:	6463      	str	r3, [r4, #68]	; 0x44
 800d868:	f7fe fad4 	bl	800be14 <__sfp_lock_acquire>
 800d86c:	2300      	movs	r3, #0
 800d86e:	81a3      	strh	r3, [r4, #12]
 800d870:	f7fe fad2 	bl	800be18 <__sfp_lock_release>
 800d874:	4630      	mov	r0, r6
 800d876:	bd70      	pop	{r4, r5, r6, pc}
 800d878:	f7fe fac6 	bl	800be08 <__sinit>
 800d87c:	e7cc      	b.n	800d818 <_fclose_r+0x10>
 800d87e:	6921      	ldr	r1, [r4, #16]
 800d880:	4628      	mov	r0, r5
 800d882:	f7fe fb19 	bl	800beb8 <_free_r>
 800d886:	e7dd      	b.n	800d844 <_fclose_r+0x3c>
 800d888:	2000      	movs	r0, #0
 800d88a:	4770      	bx	lr

0800d88c <__fputwc>:
 800d88c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d890:	b082      	sub	sp, #8
 800d892:	4680      	mov	r8, r0
 800d894:	4689      	mov	r9, r1
 800d896:	4614      	mov	r4, r2
 800d898:	f000 f87c 	bl	800d994 <__locale_mb_cur_max>
 800d89c:	2801      	cmp	r0, #1
 800d89e:	d033      	beq.n	800d908 <__fputwc+0x7c>
 800d8a0:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800d8a4:	464a      	mov	r2, r9
 800d8a6:	a901      	add	r1, sp, #4
 800d8a8:	4640      	mov	r0, r8
 800d8aa:	f000 f919 	bl	800dae0 <_wcrtomb_r>
 800d8ae:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d8b2:	4682      	mov	sl, r0
 800d8b4:	d021      	beq.n	800d8fa <__fputwc+0x6e>
 800d8b6:	b388      	cbz	r0, 800d91c <__fputwc+0x90>
 800d8b8:	f89d 6004 	ldrb.w	r6, [sp, #4]
 800d8bc:	2500      	movs	r5, #0
 800d8be:	e008      	b.n	800d8d2 <__fputwc+0x46>
 800d8c0:	6823      	ldr	r3, [r4, #0]
 800d8c2:	1c5a      	adds	r2, r3, #1
 800d8c4:	6022      	str	r2, [r4, #0]
 800d8c6:	701e      	strb	r6, [r3, #0]
 800d8c8:	3501      	adds	r5, #1
 800d8ca:	4555      	cmp	r5, sl
 800d8cc:	d226      	bcs.n	800d91c <__fputwc+0x90>
 800d8ce:	ab01      	add	r3, sp, #4
 800d8d0:	5d5e      	ldrb	r6, [r3, r5]
 800d8d2:	68a3      	ldr	r3, [r4, #8]
 800d8d4:	3b01      	subs	r3, #1
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	60a3      	str	r3, [r4, #8]
 800d8da:	daf1      	bge.n	800d8c0 <__fputwc+0x34>
 800d8dc:	69a7      	ldr	r7, [r4, #24]
 800d8de:	42bb      	cmp	r3, r7
 800d8e0:	4631      	mov	r1, r6
 800d8e2:	4622      	mov	r2, r4
 800d8e4:	4640      	mov	r0, r8
 800d8e6:	db01      	blt.n	800d8ec <__fputwc+0x60>
 800d8e8:	2e0a      	cmp	r6, #10
 800d8ea:	d1e9      	bne.n	800d8c0 <__fputwc+0x34>
 800d8ec:	f000 f8a2 	bl	800da34 <__swbuf_r>
 800d8f0:	1c43      	adds	r3, r0, #1
 800d8f2:	d1e9      	bne.n	800d8c8 <__fputwc+0x3c>
 800d8f4:	b002      	add	sp, #8
 800d8f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8fa:	89a3      	ldrh	r3, [r4, #12]
 800d8fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d900:	81a3      	strh	r3, [r4, #12]
 800d902:	b002      	add	sp, #8
 800d904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d908:	f109 33ff 	add.w	r3, r9, #4294967295
 800d90c:	2bfe      	cmp	r3, #254	; 0xfe
 800d90e:	d8c7      	bhi.n	800d8a0 <__fputwc+0x14>
 800d910:	fa5f f689 	uxtb.w	r6, r9
 800d914:	4682      	mov	sl, r0
 800d916:	f88d 6004 	strb.w	r6, [sp, #4]
 800d91a:	e7cf      	b.n	800d8bc <__fputwc+0x30>
 800d91c:	4648      	mov	r0, r9
 800d91e:	b002      	add	sp, #8
 800d920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800d924 <_fputwc_r>:
 800d924:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 800d928:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800d92c:	d10a      	bne.n	800d944 <_fputwc_r+0x20>
 800d92e:	b410      	push	{r4}
 800d930:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800d932:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d936:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 800d93a:	6654      	str	r4, [r2, #100]	; 0x64
 800d93c:	8193      	strh	r3, [r2, #12]
 800d93e:	bc10      	pop	{r4}
 800d940:	f7ff bfa4 	b.w	800d88c <__fputwc>
 800d944:	f7ff bfa2 	b.w	800d88c <__fputwc>

0800d948 <_fstat_r>:
 800d948:	b538      	push	{r3, r4, r5, lr}
 800d94a:	460b      	mov	r3, r1
 800d94c:	4c07      	ldr	r4, [pc, #28]	; (800d96c <_fstat_r+0x24>)
 800d94e:	4605      	mov	r5, r0
 800d950:	4611      	mov	r1, r2
 800d952:	4618      	mov	r0, r3
 800d954:	2300      	movs	r3, #0
 800d956:	6023      	str	r3, [r4, #0]
 800d958:	f7f9 fbb8 	bl	80070cc <_fstat>
 800d95c:	1c43      	adds	r3, r0, #1
 800d95e:	d000      	beq.n	800d962 <_fstat_r+0x1a>
 800d960:	bd38      	pop	{r3, r4, r5, pc}
 800d962:	6823      	ldr	r3, [r4, #0]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d0fb      	beq.n	800d960 <_fstat_r+0x18>
 800d968:	602b      	str	r3, [r5, #0]
 800d96a:	bd38      	pop	{r3, r4, r5, pc}
 800d96c:	20003778 	.word	0x20003778

0800d970 <_isatty_r>:
 800d970:	b538      	push	{r3, r4, r5, lr}
 800d972:	4c07      	ldr	r4, [pc, #28]	; (800d990 <_isatty_r+0x20>)
 800d974:	2300      	movs	r3, #0
 800d976:	4605      	mov	r5, r0
 800d978:	4608      	mov	r0, r1
 800d97a:	6023      	str	r3, [r4, #0]
 800d97c:	f7f9 fbf6 	bl	800716c <_isatty>
 800d980:	1c43      	adds	r3, r0, #1
 800d982:	d000      	beq.n	800d986 <_isatty_r+0x16>
 800d984:	bd38      	pop	{r3, r4, r5, pc}
 800d986:	6823      	ldr	r3, [r4, #0]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d0fb      	beq.n	800d984 <_isatty_r+0x14>
 800d98c:	602b      	str	r3, [r5, #0]
 800d98e:	bd38      	pop	{r3, r4, r5, pc}
 800d990:	20003778 	.word	0x20003778

0800d994 <__locale_mb_cur_max>:
 800d994:	4b04      	ldr	r3, [pc, #16]	; (800d9a8 <__locale_mb_cur_max+0x14>)
 800d996:	4a05      	ldr	r2, [pc, #20]	; (800d9ac <__locale_mb_cur_max+0x18>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	bf08      	it	eq
 800d9a0:	4613      	moveq	r3, r2
 800d9a2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800d9a6:	4770      	bx	lr
 800d9a8:	20000448 	.word	0x20000448
 800d9ac:	2000085c 	.word	0x2000085c

0800d9b0 <_lseek_r>:
 800d9b0:	b570      	push	{r4, r5, r6, lr}
 800d9b2:	460d      	mov	r5, r1
 800d9b4:	4c08      	ldr	r4, [pc, #32]	; (800d9d8 <_lseek_r+0x28>)
 800d9b6:	4611      	mov	r1, r2
 800d9b8:	4606      	mov	r6, r0
 800d9ba:	461a      	mov	r2, r3
 800d9bc:	4628      	mov	r0, r5
 800d9be:	2300      	movs	r3, #0
 800d9c0:	6023      	str	r3, [r4, #0]
 800d9c2:	f7f9 fb61 	bl	8007088 <_lseek>
 800d9c6:	1c43      	adds	r3, r0, #1
 800d9c8:	d000      	beq.n	800d9cc <_lseek_r+0x1c>
 800d9ca:	bd70      	pop	{r4, r5, r6, pc}
 800d9cc:	6823      	ldr	r3, [r4, #0]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d0fb      	beq.n	800d9ca <_lseek_r+0x1a>
 800d9d2:	6033      	str	r3, [r6, #0]
 800d9d4:	bd70      	pop	{r4, r5, r6, pc}
 800d9d6:	bf00      	nop
 800d9d8:	20003778 	.word	0x20003778

0800d9dc <__ascii_mbtowc>:
 800d9dc:	b082      	sub	sp, #8
 800d9de:	b149      	cbz	r1, 800d9f4 <__ascii_mbtowc+0x18>
 800d9e0:	b15a      	cbz	r2, 800d9fa <__ascii_mbtowc+0x1e>
 800d9e2:	b16b      	cbz	r3, 800da00 <__ascii_mbtowc+0x24>
 800d9e4:	7813      	ldrb	r3, [r2, #0]
 800d9e6:	600b      	str	r3, [r1, #0]
 800d9e8:	7812      	ldrb	r2, [r2, #0]
 800d9ea:	1c10      	adds	r0, r2, #0
 800d9ec:	bf18      	it	ne
 800d9ee:	2001      	movne	r0, #1
 800d9f0:	b002      	add	sp, #8
 800d9f2:	4770      	bx	lr
 800d9f4:	a901      	add	r1, sp, #4
 800d9f6:	2a00      	cmp	r2, #0
 800d9f8:	d1f3      	bne.n	800d9e2 <__ascii_mbtowc+0x6>
 800d9fa:	4610      	mov	r0, r2
 800d9fc:	b002      	add	sp, #8
 800d9fe:	4770      	bx	lr
 800da00:	f06f 0001 	mvn.w	r0, #1
 800da04:	e7f4      	b.n	800d9f0 <__ascii_mbtowc+0x14>
 800da06:	bf00      	nop

0800da08 <_read_r>:
 800da08:	b570      	push	{r4, r5, r6, lr}
 800da0a:	460d      	mov	r5, r1
 800da0c:	4c08      	ldr	r4, [pc, #32]	; (800da30 <_read_r+0x28>)
 800da0e:	4611      	mov	r1, r2
 800da10:	4606      	mov	r6, r0
 800da12:	461a      	mov	r2, r3
 800da14:	4628      	mov	r0, r5
 800da16:	2300      	movs	r3, #0
 800da18:	6023      	str	r3, [r4, #0]
 800da1a:	f7f9 fb43 	bl	80070a4 <_read>
 800da1e:	1c43      	adds	r3, r0, #1
 800da20:	d000      	beq.n	800da24 <_read_r+0x1c>
 800da22:	bd70      	pop	{r4, r5, r6, pc}
 800da24:	6823      	ldr	r3, [r4, #0]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d0fb      	beq.n	800da22 <_read_r+0x1a>
 800da2a:	6033      	str	r3, [r6, #0]
 800da2c:	bd70      	pop	{r4, r5, r6, pc}
 800da2e:	bf00      	nop
 800da30:	20003778 	.word	0x20003778

0800da34 <__swbuf_r>:
 800da34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da36:	460d      	mov	r5, r1
 800da38:	4614      	mov	r4, r2
 800da3a:	4606      	mov	r6, r0
 800da3c:	b110      	cbz	r0, 800da44 <__swbuf_r+0x10>
 800da3e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800da40:	2b00      	cmp	r3, #0
 800da42:	d04a      	beq.n	800dada <__swbuf_r+0xa6>
 800da44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800da48:	69a3      	ldr	r3, [r4, #24]
 800da4a:	60a3      	str	r3, [r4, #8]
 800da4c:	b291      	uxth	r1, r2
 800da4e:	0708      	lsls	r0, r1, #28
 800da50:	d538      	bpl.n	800dac4 <__swbuf_r+0x90>
 800da52:	6923      	ldr	r3, [r4, #16]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d035      	beq.n	800dac4 <__swbuf_r+0x90>
 800da58:	0489      	lsls	r1, r1, #18
 800da5a:	b2ef      	uxtb	r7, r5
 800da5c:	d515      	bpl.n	800da8a <__swbuf_r+0x56>
 800da5e:	6822      	ldr	r2, [r4, #0]
 800da60:	6961      	ldr	r1, [r4, #20]
 800da62:	1ad3      	subs	r3, r2, r3
 800da64:	428b      	cmp	r3, r1
 800da66:	da1c      	bge.n	800daa2 <__swbuf_r+0x6e>
 800da68:	3301      	adds	r3, #1
 800da6a:	68a1      	ldr	r1, [r4, #8]
 800da6c:	1c50      	adds	r0, r2, #1
 800da6e:	3901      	subs	r1, #1
 800da70:	60a1      	str	r1, [r4, #8]
 800da72:	6020      	str	r0, [r4, #0]
 800da74:	7015      	strb	r5, [r2, #0]
 800da76:	6962      	ldr	r2, [r4, #20]
 800da78:	429a      	cmp	r2, r3
 800da7a:	d01a      	beq.n	800dab2 <__swbuf_r+0x7e>
 800da7c:	89a3      	ldrh	r3, [r4, #12]
 800da7e:	07db      	lsls	r3, r3, #31
 800da80:	d501      	bpl.n	800da86 <__swbuf_r+0x52>
 800da82:	2f0a      	cmp	r7, #10
 800da84:	d015      	beq.n	800dab2 <__swbuf_r+0x7e>
 800da86:	4638      	mov	r0, r7
 800da88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da8a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800da8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800da90:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800da94:	81a2      	strh	r2, [r4, #12]
 800da96:	6822      	ldr	r2, [r4, #0]
 800da98:	6661      	str	r1, [r4, #100]	; 0x64
 800da9a:	6961      	ldr	r1, [r4, #20]
 800da9c:	1ad3      	subs	r3, r2, r3
 800da9e:	428b      	cmp	r3, r1
 800daa0:	dbe2      	blt.n	800da68 <__swbuf_r+0x34>
 800daa2:	4621      	mov	r1, r4
 800daa4:	4630      	mov	r0, r6
 800daa6:	f7fe f91b 	bl	800bce0 <_fflush_r>
 800daaa:	b940      	cbnz	r0, 800dabe <__swbuf_r+0x8a>
 800daac:	6822      	ldr	r2, [r4, #0]
 800daae:	2301      	movs	r3, #1
 800dab0:	e7db      	b.n	800da6a <__swbuf_r+0x36>
 800dab2:	4621      	mov	r1, r4
 800dab4:	4630      	mov	r0, r6
 800dab6:	f7fe f913 	bl	800bce0 <_fflush_r>
 800daba:	2800      	cmp	r0, #0
 800dabc:	d0e3      	beq.n	800da86 <__swbuf_r+0x52>
 800dabe:	f04f 37ff 	mov.w	r7, #4294967295
 800dac2:	e7e0      	b.n	800da86 <__swbuf_r+0x52>
 800dac4:	4621      	mov	r1, r4
 800dac6:	4630      	mov	r0, r6
 800dac8:	f7fd f842 	bl	800ab50 <__swsetup_r>
 800dacc:	2800      	cmp	r0, #0
 800dace:	d1f6      	bne.n	800dabe <__swbuf_r+0x8a>
 800dad0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dad4:	6923      	ldr	r3, [r4, #16]
 800dad6:	b291      	uxth	r1, r2
 800dad8:	e7be      	b.n	800da58 <__swbuf_r+0x24>
 800dada:	f7fe f995 	bl	800be08 <__sinit>
 800dade:	e7b1      	b.n	800da44 <__swbuf_r+0x10>

0800dae0 <_wcrtomb_r>:
 800dae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dae2:	4606      	mov	r6, r0
 800dae4:	b085      	sub	sp, #20
 800dae6:	461f      	mov	r7, r3
 800dae8:	b189      	cbz	r1, 800db0e <_wcrtomb_r+0x2e>
 800daea:	4c10      	ldr	r4, [pc, #64]	; (800db2c <_wcrtomb_r+0x4c>)
 800daec:	4d10      	ldr	r5, [pc, #64]	; (800db30 <_wcrtomb_r+0x50>)
 800daee:	6824      	ldr	r4, [r4, #0]
 800daf0:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800daf2:	2c00      	cmp	r4, #0
 800daf4:	bf08      	it	eq
 800daf6:	462c      	moveq	r4, r5
 800daf8:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 800dafc:	47a0      	blx	r4
 800dafe:	1c43      	adds	r3, r0, #1
 800db00:	d103      	bne.n	800db0a <_wcrtomb_r+0x2a>
 800db02:	2200      	movs	r2, #0
 800db04:	238a      	movs	r3, #138	; 0x8a
 800db06:	603a      	str	r2, [r7, #0]
 800db08:	6033      	str	r3, [r6, #0]
 800db0a:	b005      	add	sp, #20
 800db0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db0e:	460c      	mov	r4, r1
 800db10:	4906      	ldr	r1, [pc, #24]	; (800db2c <_wcrtomb_r+0x4c>)
 800db12:	4a07      	ldr	r2, [pc, #28]	; (800db30 <_wcrtomb_r+0x50>)
 800db14:	6809      	ldr	r1, [r1, #0]
 800db16:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800db18:	2900      	cmp	r1, #0
 800db1a:	bf08      	it	eq
 800db1c:	4611      	moveq	r1, r2
 800db1e:	4622      	mov	r2, r4
 800db20:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
 800db24:	a901      	add	r1, sp, #4
 800db26:	47a0      	blx	r4
 800db28:	e7e9      	b.n	800dafe <_wcrtomb_r+0x1e>
 800db2a:	bf00      	nop
 800db2c:	20000448 	.word	0x20000448
 800db30:	2000085c 	.word	0x2000085c

0800db34 <__ascii_wctomb>:
 800db34:	b121      	cbz	r1, 800db40 <__ascii_wctomb+0xc>
 800db36:	2aff      	cmp	r2, #255	; 0xff
 800db38:	d804      	bhi.n	800db44 <__ascii_wctomb+0x10>
 800db3a:	700a      	strb	r2, [r1, #0]
 800db3c:	2001      	movs	r0, #1
 800db3e:	4770      	bx	lr
 800db40:	4608      	mov	r0, r1
 800db42:	4770      	bx	lr
 800db44:	238a      	movs	r3, #138	; 0x8a
 800db46:	6003      	str	r3, [r0, #0]
 800db48:	f04f 30ff 	mov.w	r0, #4294967295
 800db4c:	4770      	bx	lr
 800db4e:	bf00      	nop


./bin/main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000200 <OSStartHighRdy>:
@              e) Enable interrupts (tasks will run with interrupts enabled).
@********************************************************************************************************

.thumb_func
OSStartHighRdy:
    CPSID   I                                                   @ Prevent interruption during context switch
 8000200:	b672      	cpsid	i
    MOVW    R0, #:lower16:NVIC_SYSPRI14                         @ Set the PendSV exception priority
 8000202:	f64e 5022 	movw	r0, #60706	; 0xed22
    MOVT    R0, #:upper16:NVIC_SYSPRI14
 8000206:	f2ce 0000 	movt	r0, #57344	; 0xe000

    MOVW    R1, #:lower16:NVIC_PENDSV_PRI
 800020a:	f240 01ff 	movw	r1, #255	; 0xff
    MOVT    R1, #:upper16:NVIC_PENDSV_PRI
 800020e:	f2c0 0100 	movt	r1, #0
    STRB    R1, [R0]
 8000212:	7001      	strb	r1, [r0, #0]

    MOVW    R0, #:lower16:OS_CPU_ExceptStkBase                  @ Initialize the MSP to the OS_CPU_ExceptStkBase
 8000214:	f243 30a0 	movw	r0, #13216	; 0x33a0
    MOVT    R0, #:upper16:OS_CPU_ExceptStkBase
 8000218:	f2c2 0000 	movt	r0, #8192	; 0x2000
    LDR     R1, [R0]
 800021c:	6801      	ldr	r1, [r0, #0]
    MSR     MSP, R1
 800021e:	f381 8808 	msr	MSP, r1

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 8000222:	f242 103c 	movw	r0, #8508	; 0x213c
    MOVT    R0, #:upper16:OSPrioCur
 8000226:	f2c2 0000 	movt	r0, #8192	; 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 800022a:	f242 1130 	movw	r1, #8496	; 0x2130
    MOVT    R1, #:upper16:OSPrioHighRdy
 800022e:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDRB    R2, [R1]
 8000232:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 8000234:	7002      	strb	r2, [r0, #0]

    MOVW    R5, #:lower16:OSTCBCurPtr
 8000236:	f242 2508 	movw	r5, #8712	; 0x2208
    MOVT    R5, #:upper16:OSTCBCurPtr
 800023a:	f2c2 0500 	movt	r5, #8192	; 0x2000
    MOVW    R1, #:lower16:OSTCBHighRdyPtr                       @ OSTCBCurPtr = OSTCBHighRdyPtr;
 800023e:	f242 2114 	movw	r1, #8724	; 0x2214
    MOVT    R1, #:upper16:OSTCBHighRdyPtr
 8000242:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDR     R2, [R1]
 8000246:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R5]
 8000248:	602a      	str	r2, [r5, #0]

    LDR     R0, [R2]                                            @ R0 is new process SP; SP = OSTCBHighRdyPtr->StkPtr;
 800024a:	6810      	ldr	r0, [r2, #0]
    MSR     PSP, R0                                             @ Load PSP with new process SP
 800024c:	f380 8809 	msr	PSP, r0

    MRS     R0, CONTROL
 8000250:	f3ef 8014 	mrs	r0, CONTROL
    ORR     R0, R0, #2
 8000254:	f040 0002 	orr.w	r0, r0, #2
    MSR     CONTROL, R0
 8000258:	f380 8814 	msr	CONTROL, r0
    ISB                                                         @ Sync instruction stream
 800025c:	f3bf 8f6f 	isb	sy

    LDMFD    SP!, {R4-R11}                                      @ Restore r4-11 from new process stack
 8000260:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    LDMFD    SP!, {R0-R3}                                       @ Restore r0, r3
 8000264:	bc0f      	pop	{r0, r1, r2, r3}
    LDMFD    SP!, {R12, LR}                                     @ Load R12 and LR
 8000266:	e8bd 5000 	ldmia.w	sp!, {ip, lr}
    LDMFD    SP!, {R1, R2}                                      @ Load PC and discard xPSR
 800026a:	bc06      	pop	{r1, r2}
    CPSIE    I
 800026c:	b662      	cpsie	i
    BX       R1
 800026e:	4708      	bx	r1

08000270 <OSCtxSw>:
@              triggers the PendSV exception which is where the real work is done.
@********************************************************************************************************

.thumb_func
OSCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 8000270:	4818      	ldr	r0, [pc, #96]	; (80002d4 <OS_CPU_PendSVHandler+0x50>)
    LDR     R1, =NVIC_PENDSVSET
 8000272:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    STR     R1, [R0]
 8000276:	6001      	str	r1, [r0, #0]
    BX      LR
 8000278:	4770      	bx	lr

0800027a <OSIntCtxSw>:
@              be handled when there are no more interrupts active and interrupts are enabled.
@********************************************************************************************************

.thumb_func
OSIntCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 800027a:	4816      	ldr	r0, [pc, #88]	; (80002d4 <OS_CPU_PendSVHandler+0x50>)
    LDR     R1, =NVIC_PENDSVSET
 800027c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    STR     R1, [R0]
 8000280:	6001      	str	r1, [r0, #0]
    BX      LR
 8000282:	4770      	bx	lr

08000284 <OS_CPU_PendSVHandler>:
@              therefore safe to assume that context being switched out was using the process stack (PSP).
@********************************************************************************************************

.thumb_func
OS_CPU_PendSVHandler:
    CPSID   I                                                   @ Prevent interruption during context switch
 8000284:	b672      	cpsid	i
    MRS     R0, PSP                                             @ PSP is process stack pointer
 8000286:	f3ef 8009 	mrs	r0, PSP
    STMFD   R0!, {R4-R11}                                       @ Save remaining regs r4-11 on process stack
 800028a:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

    MOVW    R5, #:lower16:OSTCBCurPtr                           @ OSTCBCurPtr->OSTCBStkPtr = SP;
 800028e:	f242 2508 	movw	r5, #8712	; 0x2208
    MOVT    R5, #:upper16:OSTCBCurPtr
 8000292:	f2c2 0500 	movt	r5, #8192	; 0x2000
    LDR     R6, [R5]
 8000296:	682e      	ldr	r6, [r5, #0]
    STR     R0, [R6]                                            @ R0 is SP of process being switched out
 8000298:	6030      	str	r0, [r6, #0]

                                                                @ At this point, entire context of process has been saved
    MOV     R4, LR                                              @ Save LR exc_return value
 800029a:	4674      	mov	r4, lr
    BL      OSTaskSwHook                                        @ OSTaskSwHook();
 800029c:	f006 fa86 	bl	80067ac <OSTaskSwHook>

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 80002a0:	f242 103c 	movw	r0, #8508	; 0x213c
    MOVT    R0, #:upper16:OSPrioCur
 80002a4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 80002a8:	f242 1130 	movw	r1, #8496	; 0x2130
    MOVT    R1, #:upper16:OSPrioHighRdy
 80002ac:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDRB    R2, [R1]
 80002b0:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 80002b2:	7002      	strb	r2, [r0, #0]

    MOVW    R1, #:lower16:OSTCBHighRdyPtr                      @ OSTCBCurPtr = OSTCBHighRdyPtr;
 80002b4:	f242 2114 	movw	r1, #8724	; 0x2214
    MOVT    R1, #:upper16:OSTCBHighRdyPtr
 80002b8:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDR     R2, [R1]
 80002bc:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R5]
 80002be:	602a      	str	r2, [r5, #0]

    ORR     LR, R4, #0xF4                                       @ Ensure exception return uses process stack
 80002c0:	f044 0ef4 	orr.w	lr, r4, #244	; 0xf4
    LDR     R0, [R2]                                            @ R0 is new process SP; SP = OSTCBHighRdyPtr->StkPtr;
 80002c4:	6810      	ldr	r0, [r2, #0]
    LDMFD   R0!, {R4-R11}                                       @ Restore r4-11 from new process stack
 80002c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, R0                                             @ Load PSP with new process SP
 80002ca:	f380 8809 	msr	PSP, r0
    CPSIE   I
 80002ce:	b662      	cpsie	i
    BX      LR                                                  @ Exception return will restore remaining context
 80002d0:	4770      	bx	lr
 80002d2:	0000      	.short	0x0000
@              triggers the PendSV exception which is where the real work is done.
@********************************************************************************************************

.thumb_func
OSCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 80002d4:	e000ed04 	.word	0xe000ed04

080002d8 <CPU_IntDis>:
@              void  CPU_IntEn (void);
@********************************************************************************************************

.thumb_func
CPU_IntDis:
        CPSID   I
 80002d8:	b672      	cpsid	i
        BX      LR
 80002da:	4770      	bx	lr

080002dc <CPU_IntEn>:

.thumb_func
CPU_IntEn:
        CPSIE   I
 80002dc:	b662      	cpsie	i
        BX      LR
 80002de:	4770      	bx	lr

080002e0 <CPU_SR_Save>:
@                       }
@********************************************************************************************************

.thumb_func
CPU_SR_Save:
        MRS     R0, PRIMASK                     @ Set prio int mask to mask all (except faults)
 80002e0:	f3ef 8010 	mrs	r0, PRIMASK
        CPSID   I
 80002e4:	b672      	cpsid	i
        BX      LR
 80002e6:	4770      	bx	lr

080002e8 <CPU_SR_Restore>:

.thumb_func
CPU_SR_Restore:                                  @ See Note #2.
        MSR     PRIMASK, R0
 80002e8:	f380 8810 	msr	PRIMASK, r0
        BX      LR
 80002ec:	4770      	bx	lr

080002ee <CPU_WaitForInt>:
@ Argument(s) : none.
@********************************************************************************************************

.thumb_func
CPU_WaitForInt:
        WFI                                     @ Wait for interrupt
 80002ee:	bf30      	wfi
        BX      LR
 80002f0:	4770      	bx	lr

080002f2 <CPU_WaitForExcept>:
@ Argument(s) : none.
@********************************************************************************************************

.thumb_func
CPU_WaitForExcept:
        WFE                                     @ Wait for exception
 80002f2:	bf20      	wfe
        BX      LR
 80002f4:	4770      	bx	lr

080002f6 <CPU_CntLeadZeros>:
@                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
@********************************************************************************************************

.thumb_func
CPU_CntLeadZeros:
        CLZ     R0, R0                          @ Count leading zeros
 80002f6:	fab0 f080 	clz	r0, r0
        BX      LR
 80002fa:	4770      	bx	lr

080002fc <CPU_CntTrailZeros>:
@                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
@********************************************************************************************************

.thumb_func
CPU_CntTrailZeros:
        RBIT    R0, R0                          @ Reverse bits
 80002fc:	fa90 f0a0 	rbit	r0, r0
        CLZ     R0, R0                          @ Count trailing zeros
 8000300:	fab0 f080 	clz	r0, r0
        BX      LR
 8000304:	4770      	bx	lr

08000306 <CPU_RevBits>:
@                       'val's final bit  N       =  'val's original bit  0
@********************************************************************************************************

.thumb_func
CPU_RevBits:
        RBIT    R0, R0                          @ Reverse bits
 8000306:	fa90 f0a0 	rbit	r0, r0
        BX      LR
 800030a:	4770      	bx	lr

0800030c <__aeabi_drsub>:
 800030c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000310:	e002      	b.n	8000318 <__adddf3>
 8000312:	bf00      	nop

08000314 <__aeabi_dsub>:
 8000314:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000318 <__adddf3>:
 8000318:	b530      	push	{r4, r5, lr}
 800031a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800031e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000322:	ea94 0f05 	teq	r4, r5
 8000326:	bf08      	it	eq
 8000328:	ea90 0f02 	teqeq	r0, r2
 800032c:	bf1f      	itttt	ne
 800032e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000332:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000336:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800033e:	f000 80e2 	beq.w	8000506 <__adddf3+0x1ee>
 8000342:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000346:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034a:	bfb8      	it	lt
 800034c:	426d      	neglt	r5, r5
 800034e:	dd0c      	ble.n	800036a <__adddf3+0x52>
 8000350:	442c      	add	r4, r5
 8000352:	ea80 0202 	eor.w	r2, r0, r2
 8000356:	ea81 0303 	eor.w	r3, r1, r3
 800035a:	ea82 0000 	eor.w	r0, r2, r0
 800035e:	ea83 0101 	eor.w	r1, r3, r1
 8000362:	ea80 0202 	eor.w	r2, r0, r2
 8000366:	ea81 0303 	eor.w	r3, r1, r3
 800036a:	2d36      	cmp	r5, #54	; 0x36
 800036c:	bf88      	it	hi
 800036e:	bd30      	pophi	{r4, r5, pc}
 8000370:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000374:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000378:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800037c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000380:	d002      	beq.n	8000388 <__adddf3+0x70>
 8000382:	4240      	negs	r0, r0
 8000384:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000388:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800038c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000390:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000394:	d002      	beq.n	800039c <__adddf3+0x84>
 8000396:	4252      	negs	r2, r2
 8000398:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039c:	ea94 0f05 	teq	r4, r5
 80003a0:	f000 80a7 	beq.w	80004f2 <__adddf3+0x1da>
 80003a4:	f1a4 0401 	sub.w	r4, r4, #1
 80003a8:	f1d5 0e20 	rsbs	lr, r5, #32
 80003ac:	db0d      	blt.n	80003ca <__adddf3+0xb2>
 80003ae:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b2:	fa22 f205 	lsr.w	r2, r2, r5
 80003b6:	1880      	adds	r0, r0, r2
 80003b8:	f141 0100 	adc.w	r1, r1, #0
 80003bc:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c0:	1880      	adds	r0, r0, r2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	4159      	adcs	r1, r3
 80003c8:	e00e      	b.n	80003e8 <__adddf3+0xd0>
 80003ca:	f1a5 0520 	sub.w	r5, r5, #32
 80003ce:	f10e 0e20 	add.w	lr, lr, #32
 80003d2:	2a01      	cmp	r2, #1
 80003d4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003d8:	bf28      	it	cs
 80003da:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003de:	fa43 f305 	asr.w	r3, r3, r5
 80003e2:	18c0      	adds	r0, r0, r3
 80003e4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ec:	d507      	bpl.n	80003fe <__adddf3+0xe6>
 80003ee:	f04f 0e00 	mov.w	lr, #0
 80003f2:	f1dc 0c00 	rsbs	ip, ip, #0
 80003f6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fa:	eb6e 0101 	sbc.w	r1, lr, r1
 80003fe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000402:	d31b      	bcc.n	800043c <__adddf3+0x124>
 8000404:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000408:	d30c      	bcc.n	8000424 <__adddf3+0x10c>
 800040a:	0849      	lsrs	r1, r1, #1
 800040c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000410:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000414:	f104 0401 	add.w	r4, r4, #1
 8000418:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800041c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000420:	f080 809a 	bcs.w	8000558 <__adddf3+0x240>
 8000424:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000428:	bf08      	it	eq
 800042a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800042e:	f150 0000 	adcs.w	r0, r0, #0
 8000432:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000436:	ea41 0105 	orr.w	r1, r1, r5
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000440:	4140      	adcs	r0, r0
 8000442:	eb41 0101 	adc.w	r1, r1, r1
 8000446:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800044a:	f1a4 0401 	sub.w	r4, r4, #1
 800044e:	d1e9      	bne.n	8000424 <__adddf3+0x10c>
 8000450:	f091 0f00 	teq	r1, #0
 8000454:	bf04      	itt	eq
 8000456:	4601      	moveq	r1, r0
 8000458:	2000      	moveq	r0, #0
 800045a:	fab1 f381 	clz	r3, r1
 800045e:	bf08      	it	eq
 8000460:	3320      	addeq	r3, #32
 8000462:	f1a3 030b 	sub.w	r3, r3, #11
 8000466:	f1b3 0220 	subs.w	r2, r3, #32
 800046a:	da0c      	bge.n	8000486 <__adddf3+0x16e>
 800046c:	320c      	adds	r2, #12
 800046e:	dd08      	ble.n	8000482 <__adddf3+0x16a>
 8000470:	f102 0c14 	add.w	ip, r2, #20
 8000474:	f1c2 020c 	rsb	r2, r2, #12
 8000478:	fa01 f00c 	lsl.w	r0, r1, ip
 800047c:	fa21 f102 	lsr.w	r1, r1, r2
 8000480:	e00c      	b.n	800049c <__adddf3+0x184>
 8000482:	f102 0214 	add.w	r2, r2, #20
 8000486:	bfd8      	it	le
 8000488:	f1c2 0c20 	rsble	ip, r2, #32
 800048c:	fa01 f102 	lsl.w	r1, r1, r2
 8000490:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000494:	bfdc      	itt	le
 8000496:	ea41 010c 	orrle.w	r1, r1, ip
 800049a:	4090      	lslle	r0, r2
 800049c:	1ae4      	subs	r4, r4, r3
 800049e:	bfa2      	ittt	ge
 80004a0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a4:	4329      	orrge	r1, r5
 80004a6:	bd30      	popge	{r4, r5, pc}
 80004a8:	ea6f 0404 	mvn.w	r4, r4
 80004ac:	3c1f      	subs	r4, #31
 80004ae:	da1c      	bge.n	80004ea <__adddf3+0x1d2>
 80004b0:	340c      	adds	r4, #12
 80004b2:	dc0e      	bgt.n	80004d2 <__adddf3+0x1ba>
 80004b4:	f104 0414 	add.w	r4, r4, #20
 80004b8:	f1c4 0220 	rsb	r2, r4, #32
 80004bc:	fa20 f004 	lsr.w	r0, r0, r4
 80004c0:	fa01 f302 	lsl.w	r3, r1, r2
 80004c4:	ea40 0003 	orr.w	r0, r0, r3
 80004c8:	fa21 f304 	lsr.w	r3, r1, r4
 80004cc:	ea45 0103 	orr.w	r1, r5, r3
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	f1c4 040c 	rsb	r4, r4, #12
 80004d6:	f1c4 0220 	rsb	r2, r4, #32
 80004da:	fa20 f002 	lsr.w	r0, r0, r2
 80004de:	fa01 f304 	lsl.w	r3, r1, r4
 80004e2:	ea40 0003 	orr.w	r0, r0, r3
 80004e6:	4629      	mov	r1, r5
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	fa21 f004 	lsr.w	r0, r1, r4
 80004ee:	4629      	mov	r1, r5
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	f094 0f00 	teq	r4, #0
 80004f6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004fa:	bf06      	itte	eq
 80004fc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000500:	3401      	addeq	r4, #1
 8000502:	3d01      	subne	r5, #1
 8000504:	e74e      	b.n	80003a4 <__adddf3+0x8c>
 8000506:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050a:	bf18      	it	ne
 800050c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000510:	d029      	beq.n	8000566 <__adddf3+0x24e>
 8000512:	ea94 0f05 	teq	r4, r5
 8000516:	bf08      	it	eq
 8000518:	ea90 0f02 	teqeq	r0, r2
 800051c:	d005      	beq.n	800052a <__adddf3+0x212>
 800051e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000522:	bf04      	itt	eq
 8000524:	4619      	moveq	r1, r3
 8000526:	4610      	moveq	r0, r2
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea91 0f03 	teq	r1, r3
 800052e:	bf1e      	ittt	ne
 8000530:	2100      	movne	r1, #0
 8000532:	2000      	movne	r0, #0
 8000534:	bd30      	popne	{r4, r5, pc}
 8000536:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053a:	d105      	bne.n	8000548 <__adddf3+0x230>
 800053c:	0040      	lsls	r0, r0, #1
 800053e:	4149      	adcs	r1, r1
 8000540:	bf28      	it	cs
 8000542:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000546:	bd30      	pop	{r4, r5, pc}
 8000548:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800054c:	bf3c      	itt	cc
 800054e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000552:	bd30      	popcc	{r4, r5, pc}
 8000554:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000558:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800055c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000560:	f04f 0000 	mov.w	r0, #0
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056a:	bf1a      	itte	ne
 800056c:	4619      	movne	r1, r3
 800056e:	4610      	movne	r0, r2
 8000570:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000574:	bf1c      	itt	ne
 8000576:	460b      	movne	r3, r1
 8000578:	4602      	movne	r2, r0
 800057a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800057e:	bf06      	itte	eq
 8000580:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000584:	ea91 0f03 	teqeq	r1, r3
 8000588:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	bf00      	nop

08000590 <__aeabi_ui2d>:
 8000590:	f090 0f00 	teq	r0, #0
 8000594:	bf04      	itt	eq
 8000596:	2100      	moveq	r1, #0
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a4:	f04f 0500 	mov.w	r5, #0
 80005a8:	f04f 0100 	mov.w	r1, #0
 80005ac:	e750      	b.n	8000450 <__adddf3+0x138>
 80005ae:	bf00      	nop

080005b0 <__aeabi_i2d>:
 80005b0:	f090 0f00 	teq	r0, #0
 80005b4:	bf04      	itt	eq
 80005b6:	2100      	moveq	r1, #0
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005c8:	bf48      	it	mi
 80005ca:	4240      	negmi	r0, r0
 80005cc:	f04f 0100 	mov.w	r1, #0
 80005d0:	e73e      	b.n	8000450 <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_f2d>:
 80005d4:	0042      	lsls	r2, r0, #1
 80005d6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005da:	ea4f 0131 	mov.w	r1, r1, rrx
 80005de:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e2:	bf1f      	itttt	ne
 80005e4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005ec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005f0:	4770      	bxne	lr
 80005f2:	f092 0f00 	teq	r2, #0
 80005f6:	bf14      	ite	ne
 80005f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005fc:	4770      	bxeq	lr
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000604:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000608:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800060c:	e720      	b.n	8000450 <__adddf3+0x138>
 800060e:	bf00      	nop

08000610 <__aeabi_ul2d>:
 8000610:	ea50 0201 	orrs.w	r2, r0, r1
 8000614:	bf08      	it	eq
 8000616:	4770      	bxeq	lr
 8000618:	b530      	push	{r4, r5, lr}
 800061a:	f04f 0500 	mov.w	r5, #0
 800061e:	e00a      	b.n	8000636 <__aeabi_l2d+0x16>

08000620 <__aeabi_l2d>:
 8000620:	ea50 0201 	orrs.w	r2, r0, r1
 8000624:	bf08      	it	eq
 8000626:	4770      	bxeq	lr
 8000628:	b530      	push	{r4, r5, lr}
 800062a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800062e:	d502      	bpl.n	8000636 <__aeabi_l2d+0x16>
 8000630:	4240      	negs	r0, r0
 8000632:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000636:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800063a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000642:	f43f aedc 	beq.w	80003fe <__adddf3+0xe6>
 8000646:	f04f 0203 	mov.w	r2, #3
 800064a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064e:	bf18      	it	ne
 8000650:	3203      	addne	r2, #3
 8000652:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000656:	bf18      	it	ne
 8000658:	3203      	addne	r2, #3
 800065a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800065e:	f1c2 0320 	rsb	r3, r2, #32
 8000662:	fa00 fc03 	lsl.w	ip, r0, r3
 8000666:	fa20 f002 	lsr.w	r0, r0, r2
 800066a:	fa01 fe03 	lsl.w	lr, r1, r3
 800066e:	ea40 000e 	orr.w	r0, r0, lr
 8000672:	fa21 f102 	lsr.w	r1, r1, r2
 8000676:	4414      	add	r4, r2
 8000678:	e6c1      	b.n	80003fe <__adddf3+0xe6>
 800067a:	bf00      	nop

0800067c <__aeabi_dmul>:
 800067c:	b570      	push	{r4, r5, r6, lr}
 800067e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000682:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000686:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800068a:	bf1d      	ittte	ne
 800068c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000690:	ea94 0f0c 	teqne	r4, ip
 8000694:	ea95 0f0c 	teqne	r5, ip
 8000698:	f000 f8de 	bleq	8000858 <__aeabi_dmul+0x1dc>
 800069c:	442c      	add	r4, r5
 800069e:	ea81 0603 	eor.w	r6, r1, r3
 80006a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006ae:	bf18      	it	ne
 80006b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006bc:	d038      	beq.n	8000730 <__aeabi_dmul+0xb4>
 80006be:	fba0 ce02 	umull	ip, lr, r0, r2
 80006c2:	f04f 0500 	mov.w	r5, #0
 80006c6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006ca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ce:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006d2:	f04f 0600 	mov.w	r6, #0
 80006d6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006da:	f09c 0f00 	teq	ip, #0
 80006de:	bf18      	it	ne
 80006e0:	f04e 0e01 	orrne.w	lr, lr, #1
 80006e4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006e8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006ec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006f0:	d204      	bcs.n	80006fc <__aeabi_dmul+0x80>
 80006f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006f6:	416d      	adcs	r5, r5
 80006f8:	eb46 0606 	adc.w	r6, r6, r6
 80006fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000700:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000704:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000708:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800070c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000710:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000714:	bf88      	it	hi
 8000716:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800071a:	d81e      	bhi.n	800075a <__aeabi_dmul+0xde>
 800071c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000720:	bf08      	it	eq
 8000722:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000726:	f150 0000 	adcs.w	r0, r0, #0
 800072a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800072e:	bd70      	pop	{r4, r5, r6, pc}
 8000730:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000734:	ea46 0101 	orr.w	r1, r6, r1
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000744:	bfc2      	ittt	gt
 8000746:	ebd4 050c 	rsbsgt	r5, r4, ip
 800074a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800074e:	bd70      	popgt	{r4, r5, r6, pc}
 8000750:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000754:	f04f 0e00 	mov.w	lr, #0
 8000758:	3c01      	subs	r4, #1
 800075a:	f300 80ab 	bgt.w	80008b4 <__aeabi_dmul+0x238>
 800075e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000762:	bfde      	ittt	le
 8000764:	2000      	movle	r0, #0
 8000766:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800076a:	bd70      	pople	{r4, r5, r6, pc}
 800076c:	f1c4 0400 	rsb	r4, r4, #0
 8000770:	3c20      	subs	r4, #32
 8000772:	da35      	bge.n	80007e0 <__aeabi_dmul+0x164>
 8000774:	340c      	adds	r4, #12
 8000776:	dc1b      	bgt.n	80007b0 <__aeabi_dmul+0x134>
 8000778:	f104 0414 	add.w	r4, r4, #20
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f305 	lsl.w	r3, r0, r5
 8000784:	fa20 f004 	lsr.w	r0, r0, r4
 8000788:	fa01 f205 	lsl.w	r2, r1, r5
 800078c:	ea40 0002 	orr.w	r0, r0, r2
 8000790:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000794:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	fa21 f604 	lsr.w	r6, r1, r4
 80007a0:	eb42 0106 	adc.w	r1, r2, r6
 80007a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a8:	bf08      	it	eq
 80007aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ae:	bd70      	pop	{r4, r5, r6, pc}
 80007b0:	f1c4 040c 	rsb	r4, r4, #12
 80007b4:	f1c4 0520 	rsb	r5, r4, #32
 80007b8:	fa00 f304 	lsl.w	r3, r0, r4
 80007bc:	fa20 f005 	lsr.w	r0, r0, r5
 80007c0:	fa01 f204 	lsl.w	r2, r1, r4
 80007c4:	ea40 0002 	orr.w	r0, r0, r2
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007d0:	f141 0100 	adc.w	r1, r1, #0
 80007d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d8:	bf08      	it	eq
 80007da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007de:	bd70      	pop	{r4, r5, r6, pc}
 80007e0:	f1c4 0520 	rsb	r5, r4, #32
 80007e4:	fa00 f205 	lsl.w	r2, r0, r5
 80007e8:	ea4e 0e02 	orr.w	lr, lr, r2
 80007ec:	fa20 f304 	lsr.w	r3, r0, r4
 80007f0:	fa01 f205 	lsl.w	r2, r1, r5
 80007f4:	ea43 0302 	orr.w	r3, r3, r2
 80007f8:	fa21 f004 	lsr.w	r0, r1, r4
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	fa21 f204 	lsr.w	r2, r1, r4
 8000804:	ea20 0002 	bic.w	r0, r0, r2
 8000808:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800080c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000810:	bf08      	it	eq
 8000812:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000816:	bd70      	pop	{r4, r5, r6, pc}
 8000818:	f094 0f00 	teq	r4, #0
 800081c:	d10f      	bne.n	800083e <__aeabi_dmul+0x1c2>
 800081e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000822:	0040      	lsls	r0, r0, #1
 8000824:	eb41 0101 	adc.w	r1, r1, r1
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	bf08      	it	eq
 800082e:	3c01      	subeq	r4, #1
 8000830:	d0f7      	beq.n	8000822 <__aeabi_dmul+0x1a6>
 8000832:	ea41 0106 	orr.w	r1, r1, r6
 8000836:	f095 0f00 	teq	r5, #0
 800083a:	bf18      	it	ne
 800083c:	4770      	bxne	lr
 800083e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000842:	0052      	lsls	r2, r2, #1
 8000844:	eb43 0303 	adc.w	r3, r3, r3
 8000848:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800084c:	bf08      	it	eq
 800084e:	3d01      	subeq	r5, #1
 8000850:	d0f7      	beq.n	8000842 <__aeabi_dmul+0x1c6>
 8000852:	ea43 0306 	orr.w	r3, r3, r6
 8000856:	4770      	bx	lr
 8000858:	ea94 0f0c 	teq	r4, ip
 800085c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000860:	bf18      	it	ne
 8000862:	ea95 0f0c 	teqne	r5, ip
 8000866:	d00c      	beq.n	8000882 <__aeabi_dmul+0x206>
 8000868:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800086c:	bf18      	it	ne
 800086e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000872:	d1d1      	bne.n	8000818 <__aeabi_dmul+0x19c>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000886:	bf06      	itte	eq
 8000888:	4610      	moveq	r0, r2
 800088a:	4619      	moveq	r1, r3
 800088c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000890:	d019      	beq.n	80008c6 <__aeabi_dmul+0x24a>
 8000892:	ea94 0f0c 	teq	r4, ip
 8000896:	d102      	bne.n	800089e <__aeabi_dmul+0x222>
 8000898:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800089c:	d113      	bne.n	80008c6 <__aeabi_dmul+0x24a>
 800089e:	ea95 0f0c 	teq	r5, ip
 80008a2:	d105      	bne.n	80008b0 <__aeabi_dmul+0x234>
 80008a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008a8:	bf1c      	itt	ne
 80008aa:	4610      	movne	r0, r2
 80008ac:	4619      	movne	r1, r3
 80008ae:	d10a      	bne.n	80008c6 <__aeabi_dmul+0x24a>
 80008b0:	ea81 0103 	eor.w	r1, r1, r3
 80008b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008b8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008c0:	f04f 0000 	mov.w	r0, #0
 80008c4:	bd70      	pop	{r4, r5, r6, pc}
 80008c6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008ca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ce:	bd70      	pop	{r4, r5, r6, pc}

080008d0 <__aeabi_ddiv>:
 80008d0:	b570      	push	{r4, r5, r6, lr}
 80008d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008de:	bf1d      	ittte	ne
 80008e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008e4:	ea94 0f0c 	teqne	r4, ip
 80008e8:	ea95 0f0c 	teqne	r5, ip
 80008ec:	f000 f8a7 	bleq	8000a3e <__aeabi_ddiv+0x16e>
 80008f0:	eba4 0405 	sub.w	r4, r4, r5
 80008f4:	ea81 0e03 	eor.w	lr, r1, r3
 80008f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000900:	f000 8088 	beq.w	8000a14 <__aeabi_ddiv+0x144>
 8000904:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000908:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800090c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000910:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000914:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000918:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800091c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000920:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000924:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000928:	429d      	cmp	r5, r3
 800092a:	bf08      	it	eq
 800092c:	4296      	cmpeq	r6, r2
 800092e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000932:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000936:	d202      	bcs.n	800093e <__aeabi_ddiv+0x6e>
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	1ab6      	subs	r6, r6, r2
 8000940:	eb65 0503 	sbc.w	r5, r5, r3
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800094e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000952:	ebb6 0e02 	subs.w	lr, r6, r2
 8000956:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095a:	bf22      	ittt	cs
 800095c:	1ab6      	subcs	r6, r6, r2
 800095e:	4675      	movcs	r5, lr
 8000960:	ea40 000c 	orrcs.w	r0, r0, ip
 8000964:	085b      	lsrs	r3, r3, #1
 8000966:	ea4f 0232 	mov.w	r2, r2, rrx
 800096a:	ebb6 0e02 	subs.w	lr, r6, r2
 800096e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000972:	bf22      	ittt	cs
 8000974:	1ab6      	subcs	r6, r6, r2
 8000976:	4675      	movcs	r5, lr
 8000978:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800097c:	085b      	lsrs	r3, r3, #1
 800097e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000982:	ebb6 0e02 	subs.w	lr, r6, r2
 8000986:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098a:	bf22      	ittt	cs
 800098c:	1ab6      	subcs	r6, r6, r2
 800098e:	4675      	movcs	r5, lr
 8000990:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000994:	085b      	lsrs	r3, r3, #1
 8000996:	ea4f 0232 	mov.w	r2, r2, rrx
 800099a:	ebb6 0e02 	subs.w	lr, r6, r2
 800099e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009a2:	bf22      	ittt	cs
 80009a4:	1ab6      	subcs	r6, r6, r2
 80009a6:	4675      	movcs	r5, lr
 80009a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009ac:	ea55 0e06 	orrs.w	lr, r5, r6
 80009b0:	d018      	beq.n	80009e4 <__aeabi_ddiv+0x114>
 80009b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ce:	d1c0      	bne.n	8000952 <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	d10b      	bne.n	80009ee <__aeabi_ddiv+0x11e>
 80009d6:	ea41 0100 	orr.w	r1, r1, r0
 80009da:	f04f 0000 	mov.w	r0, #0
 80009de:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009e2:	e7b6      	b.n	8000952 <__aeabi_ddiv+0x82>
 80009e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009e8:	bf04      	itt	eq
 80009ea:	4301      	orreq	r1, r0
 80009ec:	2000      	moveq	r0, #0
 80009ee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009f2:	bf88      	it	hi
 80009f4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009f8:	f63f aeaf 	bhi.w	800075a <__aeabi_dmul+0xde>
 80009fc:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a00:	bf04      	itt	eq
 8000a02:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a06:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a0a:	f150 0000 	adcs.w	r0, r0, #0
 8000a0e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a12:	bd70      	pop	{r4, r5, r6, pc}
 8000a14:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a18:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a1c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a20:	bfc2      	ittt	gt
 8000a22:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a26:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a2a:	bd70      	popgt	{r4, r5, r6, pc}
 8000a2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a30:	f04f 0e00 	mov.w	lr, #0
 8000a34:	3c01      	subs	r4, #1
 8000a36:	e690      	b.n	800075a <__aeabi_dmul+0xde>
 8000a38:	ea45 0e06 	orr.w	lr, r5, r6
 8000a3c:	e68d      	b.n	800075a <__aeabi_dmul+0xde>
 8000a3e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a42:	ea94 0f0c 	teq	r4, ip
 8000a46:	bf08      	it	eq
 8000a48:	ea95 0f0c 	teqeq	r5, ip
 8000a4c:	f43f af3b 	beq.w	80008c6 <__aeabi_dmul+0x24a>
 8000a50:	ea94 0f0c 	teq	r4, ip
 8000a54:	d10a      	bne.n	8000a6c <__aeabi_ddiv+0x19c>
 8000a56:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a5a:	f47f af34 	bne.w	80008c6 <__aeabi_dmul+0x24a>
 8000a5e:	ea95 0f0c 	teq	r5, ip
 8000a62:	f47f af25 	bne.w	80008b0 <__aeabi_dmul+0x234>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e72c      	b.n	80008c6 <__aeabi_dmul+0x24a>
 8000a6c:	ea95 0f0c 	teq	r5, ip
 8000a70:	d106      	bne.n	8000a80 <__aeabi_ddiv+0x1b0>
 8000a72:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a76:	f43f aefd 	beq.w	8000874 <__aeabi_dmul+0x1f8>
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	e722      	b.n	80008c6 <__aeabi_dmul+0x24a>
 8000a80:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a84:	bf18      	it	ne
 8000a86:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a8a:	f47f aec5 	bne.w	8000818 <__aeabi_dmul+0x19c>
 8000a8e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a92:	f47f af0d 	bne.w	80008b0 <__aeabi_dmul+0x234>
 8000a96:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a9a:	f47f aeeb 	bne.w	8000874 <__aeabi_dmul+0x1f8>
 8000a9e:	e712      	b.n	80008c6 <__aeabi_dmul+0x24a>

08000aa0 <__gedf2>:
 8000aa0:	f04f 3cff 	mov.w	ip, #4294967295
 8000aa4:	e006      	b.n	8000ab4 <__cmpdf2+0x4>
 8000aa6:	bf00      	nop

08000aa8 <__ledf2>:
 8000aa8:	f04f 0c01 	mov.w	ip, #1
 8000aac:	e002      	b.n	8000ab4 <__cmpdf2+0x4>
 8000aae:	bf00      	nop

08000ab0 <__cmpdf2>:
 8000ab0:	f04f 0c01 	mov.w	ip, #1
 8000ab4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	bf18      	it	ne
 8000ac6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aca:	d01b      	beq.n	8000b04 <__cmpdf2+0x54>
 8000acc:	b001      	add	sp, #4
 8000ace:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000ad2:	bf0c      	ite	eq
 8000ad4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ad8:	ea91 0f03 	teqne	r1, r3
 8000adc:	bf02      	ittt	eq
 8000ade:	ea90 0f02 	teqeq	r0, r2
 8000ae2:	2000      	moveq	r0, #0
 8000ae4:	4770      	bxeq	lr
 8000ae6:	f110 0f00 	cmn.w	r0, #0
 8000aea:	ea91 0f03 	teq	r1, r3
 8000aee:	bf58      	it	pl
 8000af0:	4299      	cmppl	r1, r3
 8000af2:	bf08      	it	eq
 8000af4:	4290      	cmpeq	r0, r2
 8000af6:	bf2c      	ite	cs
 8000af8:	17d8      	asrcs	r0, r3, #31
 8000afa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000afe:	f040 0001 	orr.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b0c:	d102      	bne.n	8000b14 <__cmpdf2+0x64>
 8000b0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b12:	d107      	bne.n	8000b24 <__cmpdf2+0x74>
 8000b14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b1c:	d1d6      	bne.n	8000acc <__cmpdf2+0x1c>
 8000b1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b22:	d0d3      	beq.n	8000acc <__cmpdf2+0x1c>
 8000b24:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_cdrcmple>:
 8000b2c:	4684      	mov	ip, r0
 8000b2e:	4610      	mov	r0, r2
 8000b30:	4662      	mov	r2, ip
 8000b32:	468c      	mov	ip, r1
 8000b34:	4619      	mov	r1, r3
 8000b36:	4663      	mov	r3, ip
 8000b38:	e000      	b.n	8000b3c <__aeabi_cdcmpeq>
 8000b3a:	bf00      	nop

08000b3c <__aeabi_cdcmpeq>:
 8000b3c:	b501      	push	{r0, lr}
 8000b3e:	f7ff ffb7 	bl	8000ab0 <__cmpdf2>
 8000b42:	2800      	cmp	r0, #0
 8000b44:	bf48      	it	mi
 8000b46:	f110 0f00 	cmnmi.w	r0, #0
 8000b4a:	bd01      	pop	{r0, pc}

08000b4c <__aeabi_dcmpeq>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff fff4 	bl	8000b3c <__aeabi_cdcmpeq>
 8000b54:	bf0c      	ite	eq
 8000b56:	2001      	moveq	r0, #1
 8000b58:	2000      	movne	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmplt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffea 	bl	8000b3c <__aeabi_cdcmpeq>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmple>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffe0 	bl	8000b3c <__aeabi_cdcmpeq>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpge>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffce 	bl	8000b2c <__aeabi_cdrcmple>
 8000b90:	bf94      	ite	ls
 8000b92:	2001      	movls	r0, #1
 8000b94:	2000      	movhi	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpgt>:
 8000b9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba0:	f7ff ffc4 	bl	8000b2c <__aeabi_cdrcmple>
 8000ba4:	bf34      	ite	cc
 8000ba6:	2001      	movcc	r0, #1
 8000ba8:	2000      	movcs	r0, #0
 8000baa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bae:	bf00      	nop

08000bb0 <__aeabi_uldivmod>:
 8000bb0:	b953      	cbnz	r3, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb2:	b94a      	cbnz	r2, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	bf08      	it	eq
 8000bb8:	2800      	cmpeq	r0, #0
 8000bba:	bf1c      	itt	ne
 8000bbc:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc4:	f000 b97e 	b.w	8000ec4 <__aeabi_idiv0>
 8000bc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd0:	f000 f806 	bl	8000be0 <__udivmoddi4>
 8000bd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bdc:	b004      	add	sp, #16
 8000bde:	4770      	bx	lr

08000be0 <__udivmoddi4>:
 8000be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be4:	468c      	mov	ip, r1
 8000be6:	460e      	mov	r6, r1
 8000be8:	4604      	mov	r4, r0
 8000bea:	9d08      	ldr	r5, [sp, #32]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d150      	bne.n	8000c92 <__udivmoddi4+0xb2>
 8000bf0:	428a      	cmp	r2, r1
 8000bf2:	4617      	mov	r7, r2
 8000bf4:	d96c      	bls.n	8000cd0 <__udivmoddi4+0xf0>
 8000bf6:	fab2 fe82 	clz	lr, r2
 8000bfa:	f1be 0f00 	cmp.w	lr, #0
 8000bfe:	d00b      	beq.n	8000c18 <__udivmoddi4+0x38>
 8000c00:	f1ce 0420 	rsb	r4, lr, #32
 8000c04:	fa20 f404 	lsr.w	r4, r0, r4
 8000c08:	fa01 f60e 	lsl.w	r6, r1, lr
 8000c0c:	ea44 0c06 	orr.w	ip, r4, r6
 8000c10:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c14:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c18:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c1c:	0c22      	lsrs	r2, r4, #16
 8000c1e:	fbbc f0f9 	udiv	r0, ip, r9
 8000c22:	fa1f f887 	uxth.w	r8, r7
 8000c26:	fb09 c610 	mls	r6, r9, r0, ip
 8000c2a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000c2e:	fb00 f308 	mul.w	r3, r0, r8
 8000c32:	42b3      	cmp	r3, r6
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x6a>
 8000c36:	19f6      	adds	r6, r6, r7
 8000c38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c3c:	f080 8122 	bcs.w	8000e84 <__udivmoddi4+0x2a4>
 8000c40:	42b3      	cmp	r3, r6
 8000c42:	f240 811f 	bls.w	8000e84 <__udivmoddi4+0x2a4>
 8000c46:	3802      	subs	r0, #2
 8000c48:	443e      	add	r6, r7
 8000c4a:	1af6      	subs	r6, r6, r3
 8000c4c:	b2a2      	uxth	r2, r4
 8000c4e:	fbb6 f3f9 	udiv	r3, r6, r9
 8000c52:	fb09 6613 	mls	r6, r9, r3, r6
 8000c56:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000c5a:	fb03 f808 	mul.w	r8, r3, r8
 8000c5e:	45a0      	cmp	r8, r4
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x96>
 8000c62:	19e4      	adds	r4, r4, r7
 8000c64:	f103 32ff 	add.w	r2, r3, #4294967295
 8000c68:	f080 810a 	bcs.w	8000e80 <__udivmoddi4+0x2a0>
 8000c6c:	45a0      	cmp	r8, r4
 8000c6e:	f240 8107 	bls.w	8000e80 <__udivmoddi4+0x2a0>
 8000c72:	3b02      	subs	r3, #2
 8000c74:	443c      	add	r4, r7
 8000c76:	ebc8 0404 	rsb	r4, r8, r4
 8000c7a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c7e:	2100      	movs	r1, #0
 8000c80:	2d00      	cmp	r5, #0
 8000c82:	d062      	beq.n	8000d4a <__udivmoddi4+0x16a>
 8000c84:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c88:	2300      	movs	r3, #0
 8000c8a:	602c      	str	r4, [r5, #0]
 8000c8c:	606b      	str	r3, [r5, #4]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d907      	bls.n	8000ca6 <__udivmoddi4+0xc6>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	d055      	beq.n	8000d46 <__udivmoddi4+0x166>
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	e885 0041 	stmia.w	r5, {r0, r6}
 8000ca0:	4608      	mov	r0, r1
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	fab3 f183 	clz	r1, r3
 8000caa:	2900      	cmp	r1, #0
 8000cac:	f040 8090 	bne.w	8000dd0 <__udivmoddi4+0x1f0>
 8000cb0:	42b3      	cmp	r3, r6
 8000cb2:	d302      	bcc.n	8000cba <__udivmoddi4+0xda>
 8000cb4:	4282      	cmp	r2, r0
 8000cb6:	f200 80f8 	bhi.w	8000eaa <__udivmoddi4+0x2ca>
 8000cba:	1a84      	subs	r4, r0, r2
 8000cbc:	eb66 0603 	sbc.w	r6, r6, r3
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	46b4      	mov	ip, r6
 8000cc4:	2d00      	cmp	r5, #0
 8000cc6:	d040      	beq.n	8000d4a <__udivmoddi4+0x16a>
 8000cc8:	e885 1010 	stmia.w	r5, {r4, ip}
 8000ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd0:	b912      	cbnz	r2, 8000cd8 <__udivmoddi4+0xf8>
 8000cd2:	2701      	movs	r7, #1
 8000cd4:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cd8:	fab7 fe87 	clz	lr, r7
 8000cdc:	f1be 0f00 	cmp.w	lr, #0
 8000ce0:	d135      	bne.n	8000d4e <__udivmoddi4+0x16e>
 8000ce2:	1bf3      	subs	r3, r6, r7
 8000ce4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ce8:	fa1f fc87 	uxth.w	ip, r7
 8000cec:	2101      	movs	r1, #1
 8000cee:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb08 3610 	mls	r6, r8, r0, r3
 8000cf8:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000cfc:	fb0c f300 	mul.w	r3, ip, r0
 8000d00:	42b3      	cmp	r3, r6
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x134>
 8000d04:	19f6      	adds	r6, r6, r7
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x132>
 8000d0c:	42b3      	cmp	r3, r6
 8000d0e:	f200 80ce 	bhi.w	8000eae <__udivmoddi4+0x2ce>
 8000d12:	4610      	mov	r0, r2
 8000d14:	1af6      	subs	r6, r6, r3
 8000d16:	b2a2      	uxth	r2, r4
 8000d18:	fbb6 f3f8 	udiv	r3, r6, r8
 8000d1c:	fb08 6613 	mls	r6, r8, r3, r6
 8000d20:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000d24:	fb0c fc03 	mul.w	ip, ip, r3
 8000d28:	45a4      	cmp	ip, r4
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x15c>
 8000d2c:	19e4      	adds	r4, r4, r7
 8000d2e:	f103 32ff 	add.w	r2, r3, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x15a>
 8000d34:	45a4      	cmp	ip, r4
 8000d36:	f200 80b5 	bhi.w	8000ea4 <__udivmoddi4+0x2c4>
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	ebcc 0404 	rsb	r4, ip, r4
 8000d40:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d44:	e79c      	b.n	8000c80 <__udivmoddi4+0xa0>
 8000d46:	4629      	mov	r1, r5
 8000d48:	4628      	mov	r0, r5
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	f1ce 0120 	rsb	r1, lr, #32
 8000d52:	fa06 f30e 	lsl.w	r3, r6, lr
 8000d56:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d5a:	fa20 f901 	lsr.w	r9, r0, r1
 8000d5e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d62:	40ce      	lsrs	r6, r1
 8000d64:	ea49 0903 	orr.w	r9, r9, r3
 8000d68:	fbb6 faf8 	udiv	sl, r6, r8
 8000d6c:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8000d70:	fb08 661a 	mls	r6, r8, sl, r6
 8000d74:	fa1f fc87 	uxth.w	ip, r7
 8000d78:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8000d7c:	fb0a f20c 	mul.w	r2, sl, ip
 8000d80:	429a      	cmp	r2, r3
 8000d82:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d86:	d90a      	bls.n	8000d9e <__udivmoddi4+0x1be>
 8000d88:	19db      	adds	r3, r3, r7
 8000d8a:	f10a 31ff 	add.w	r1, sl, #4294967295
 8000d8e:	f080 8087 	bcs.w	8000ea0 <__udivmoddi4+0x2c0>
 8000d92:	429a      	cmp	r2, r3
 8000d94:	f240 8084 	bls.w	8000ea0 <__udivmoddi4+0x2c0>
 8000d98:	f1aa 0a02 	sub.w	sl, sl, #2
 8000d9c:	443b      	add	r3, r7
 8000d9e:	1a9b      	subs	r3, r3, r2
 8000da0:	fa1f f989 	uxth.w	r9, r9
 8000da4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000da8:	fb08 3311 	mls	r3, r8, r1, r3
 8000dac:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8000db0:	fb01 f60c 	mul.w	r6, r1, ip
 8000db4:	429e      	cmp	r6, r3
 8000db6:	d907      	bls.n	8000dc8 <__udivmoddi4+0x1e8>
 8000db8:	19db      	adds	r3, r3, r7
 8000dba:	f101 32ff 	add.w	r2, r1, #4294967295
 8000dbe:	d26b      	bcs.n	8000e98 <__udivmoddi4+0x2b8>
 8000dc0:	429e      	cmp	r6, r3
 8000dc2:	d969      	bls.n	8000e98 <__udivmoddi4+0x2b8>
 8000dc4:	3902      	subs	r1, #2
 8000dc6:	443b      	add	r3, r7
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8000dce:	e78e      	b.n	8000cee <__udivmoddi4+0x10e>
 8000dd0:	f1c1 0e20 	rsb	lr, r1, #32
 8000dd4:	fa22 f40e 	lsr.w	r4, r2, lr
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	4323      	orrs	r3, r4
 8000ddc:	fa20 f70e 	lsr.w	r7, r0, lr
 8000de0:	fa06 f401 	lsl.w	r4, r6, r1
 8000de4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000de8:	fa26 f60e 	lsr.w	r6, r6, lr
 8000dec:	433c      	orrs	r4, r7
 8000dee:	fbb6 f9fc 	udiv	r9, r6, ip
 8000df2:	0c27      	lsrs	r7, r4, #16
 8000df4:	fb0c 6619 	mls	r6, ip, r9, r6
 8000df8:	fa1f f883 	uxth.w	r8, r3
 8000dfc:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8000e00:	fb09 f708 	mul.w	r7, r9, r8
 8000e04:	42b7      	cmp	r7, r6
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e0e:	d908      	bls.n	8000e22 <__udivmoddi4+0x242>
 8000e10:	18f6      	adds	r6, r6, r3
 8000e12:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e16:	d241      	bcs.n	8000e9c <__udivmoddi4+0x2bc>
 8000e18:	42b7      	cmp	r7, r6
 8000e1a:	d93f      	bls.n	8000e9c <__udivmoddi4+0x2bc>
 8000e1c:	f1a9 0902 	sub.w	r9, r9, #2
 8000e20:	441e      	add	r6, r3
 8000e22:	1bf6      	subs	r6, r6, r7
 8000e24:	b2a0      	uxth	r0, r4
 8000e26:	fbb6 f4fc 	udiv	r4, r6, ip
 8000e2a:	fb0c 6614 	mls	r6, ip, r4, r6
 8000e2e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8000e32:	fb04 f808 	mul.w	r8, r4, r8
 8000e36:	45b8      	cmp	r8, r7
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x26a>
 8000e3a:	18ff      	adds	r7, r7, r3
 8000e3c:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e40:	d228      	bcs.n	8000e94 <__udivmoddi4+0x2b4>
 8000e42:	45b8      	cmp	r8, r7
 8000e44:	d926      	bls.n	8000e94 <__udivmoddi4+0x2b4>
 8000e46:	3c02      	subs	r4, #2
 8000e48:	441f      	add	r7, r3
 8000e4a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 8000e4e:	ebc8 0707 	rsb	r7, r8, r7
 8000e52:	fba0 8902 	umull	r8, r9, r0, r2
 8000e56:	454f      	cmp	r7, r9
 8000e58:	4644      	mov	r4, r8
 8000e5a:	464e      	mov	r6, r9
 8000e5c:	d314      	bcc.n	8000e88 <__udivmoddi4+0x2a8>
 8000e5e:	d029      	beq.n	8000eb4 <__udivmoddi4+0x2d4>
 8000e60:	b365      	cbz	r5, 8000ebc <__udivmoddi4+0x2dc>
 8000e62:	ebba 0304 	subs.w	r3, sl, r4
 8000e66:	eb67 0706 	sbc.w	r7, r7, r6
 8000e6a:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	40cf      	lsrs	r7, r1
 8000e72:	ea4e 0303 	orr.w	r3, lr, r3
 8000e76:	e885 0088 	stmia.w	r5, {r3, r7}
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e80:	4613      	mov	r3, r2
 8000e82:	e6f8      	b.n	8000c76 <__udivmoddi4+0x96>
 8000e84:	4610      	mov	r0, r2
 8000e86:	e6e0      	b.n	8000c4a <__udivmoddi4+0x6a>
 8000e88:	ebb8 0402 	subs.w	r4, r8, r2
 8000e8c:	eb69 0603 	sbc.w	r6, r9, r3
 8000e90:	3801      	subs	r0, #1
 8000e92:	e7e5      	b.n	8000e60 <__udivmoddi4+0x280>
 8000e94:	4604      	mov	r4, r0
 8000e96:	e7d8      	b.n	8000e4a <__udivmoddi4+0x26a>
 8000e98:	4611      	mov	r1, r2
 8000e9a:	e795      	b.n	8000dc8 <__udivmoddi4+0x1e8>
 8000e9c:	4681      	mov	r9, r0
 8000e9e:	e7c0      	b.n	8000e22 <__udivmoddi4+0x242>
 8000ea0:	468a      	mov	sl, r1
 8000ea2:	e77c      	b.n	8000d9e <__udivmoddi4+0x1be>
 8000ea4:	3b02      	subs	r3, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e748      	b.n	8000d3c <__udivmoddi4+0x15c>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e70a      	b.n	8000cc4 <__udivmoddi4+0xe4>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	443e      	add	r6, r7
 8000eb2:	e72f      	b.n	8000d14 <__udivmoddi4+0x134>
 8000eb4:	45c2      	cmp	sl, r8
 8000eb6:	d3e7      	bcc.n	8000e88 <__udivmoddi4+0x2a8>
 8000eb8:	463e      	mov	r6, r7
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x280>
 8000ebc:	4629      	mov	r1, r5
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <memcpy>:
 8000ec8:	4684      	mov	ip, r0
 8000eca:	ea41 0300 	orr.w	r3, r1, r0
 8000ece:	f013 0303 	ands.w	r3, r3, #3
 8000ed2:	d16d      	bne.n	8000fb0 <memcpy+0xe8>
 8000ed4:	3a40      	subs	r2, #64	; 0x40
 8000ed6:	d341      	bcc.n	8000f5c <memcpy+0x94>
 8000ed8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000edc:	f840 3b04 	str.w	r3, [r0], #4
 8000ee0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ee4:	f840 3b04 	str.w	r3, [r0], #4
 8000ee8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000eec:	f840 3b04 	str.w	r3, [r0], #4
 8000ef0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ef4:	f840 3b04 	str.w	r3, [r0], #4
 8000ef8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000efc:	f840 3b04 	str.w	r3, [r0], #4
 8000f00:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f04:	f840 3b04 	str.w	r3, [r0], #4
 8000f08:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f0c:	f840 3b04 	str.w	r3, [r0], #4
 8000f10:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f14:	f840 3b04 	str.w	r3, [r0], #4
 8000f18:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f1c:	f840 3b04 	str.w	r3, [r0], #4
 8000f20:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f24:	f840 3b04 	str.w	r3, [r0], #4
 8000f28:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f2c:	f840 3b04 	str.w	r3, [r0], #4
 8000f30:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f34:	f840 3b04 	str.w	r3, [r0], #4
 8000f38:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f3c:	f840 3b04 	str.w	r3, [r0], #4
 8000f40:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f44:	f840 3b04 	str.w	r3, [r0], #4
 8000f48:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f4c:	f840 3b04 	str.w	r3, [r0], #4
 8000f50:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f54:	f840 3b04 	str.w	r3, [r0], #4
 8000f58:	3a40      	subs	r2, #64	; 0x40
 8000f5a:	d2bd      	bcs.n	8000ed8 <memcpy+0x10>
 8000f5c:	3230      	adds	r2, #48	; 0x30
 8000f5e:	d311      	bcc.n	8000f84 <memcpy+0xbc>
 8000f60:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f64:	f840 3b04 	str.w	r3, [r0], #4
 8000f68:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f6c:	f840 3b04 	str.w	r3, [r0], #4
 8000f70:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f74:	f840 3b04 	str.w	r3, [r0], #4
 8000f78:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f7c:	f840 3b04 	str.w	r3, [r0], #4
 8000f80:	3a10      	subs	r2, #16
 8000f82:	d2ed      	bcs.n	8000f60 <memcpy+0x98>
 8000f84:	320c      	adds	r2, #12
 8000f86:	d305      	bcc.n	8000f94 <memcpy+0xcc>
 8000f88:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f8c:	f840 3b04 	str.w	r3, [r0], #4
 8000f90:	3a04      	subs	r2, #4
 8000f92:	d2f9      	bcs.n	8000f88 <memcpy+0xc0>
 8000f94:	3204      	adds	r2, #4
 8000f96:	d008      	beq.n	8000faa <memcpy+0xe2>
 8000f98:	07d2      	lsls	r2, r2, #31
 8000f9a:	bf1c      	itt	ne
 8000f9c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000fa0:	f800 3b01 	strbne.w	r3, [r0], #1
 8000fa4:	d301      	bcc.n	8000faa <memcpy+0xe2>
 8000fa6:	880b      	ldrh	r3, [r1, #0]
 8000fa8:	8003      	strh	r3, [r0, #0]
 8000faa:	4660      	mov	r0, ip
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	2a08      	cmp	r2, #8
 8000fb2:	d313      	bcc.n	8000fdc <memcpy+0x114>
 8000fb4:	078b      	lsls	r3, r1, #30
 8000fb6:	d08d      	beq.n	8000ed4 <memcpy+0xc>
 8000fb8:	f010 0303 	ands.w	r3, r0, #3
 8000fbc:	d08a      	beq.n	8000ed4 <memcpy+0xc>
 8000fbe:	f1c3 0304 	rsb	r3, r3, #4
 8000fc2:	1ad2      	subs	r2, r2, r3
 8000fc4:	07db      	lsls	r3, r3, #31
 8000fc6:	bf1c      	itt	ne
 8000fc8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000fcc:	f800 3b01 	strbne.w	r3, [r0], #1
 8000fd0:	d380      	bcc.n	8000ed4 <memcpy+0xc>
 8000fd2:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000fd6:	f820 3b02 	strh.w	r3, [r0], #2
 8000fda:	e77b      	b.n	8000ed4 <memcpy+0xc>
 8000fdc:	3a04      	subs	r2, #4
 8000fde:	d3d9      	bcc.n	8000f94 <memcpy+0xcc>
 8000fe0:	3a01      	subs	r2, #1
 8000fe2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000fe6:	f800 3b01 	strb.w	r3, [r0], #1
 8000fea:	d2f9      	bcs.n	8000fe0 <memcpy+0x118>
 8000fec:	780b      	ldrb	r3, [r1, #0]
 8000fee:	7003      	strb	r3, [r0, #0]
 8000ff0:	784b      	ldrb	r3, [r1, #1]
 8000ff2:	7043      	strb	r3, [r0, #1]
 8000ff4:	788b      	ldrb	r3, [r1, #2]
 8000ff6:	7083      	strb	r3, [r0, #2]
 8000ff8:	4660      	mov	r0, ip
 8000ffa:	4770      	bx	lr
 8000ffc:	0000      	movs	r0, r0
	...

08001000 <strlen>:
 8001000:	f890 f000 	pld	[r0]
 8001004:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8001008:	f020 0107 	bic.w	r1, r0, #7
 800100c:	f06f 0c00 	mvn.w	ip, #0
 8001010:	f010 0407 	ands.w	r4, r0, #7
 8001014:	f891 f020 	pld	[r1, #32]
 8001018:	f040 8049 	bne.w	80010ae <strlen+0xae>
 800101c:	f04f 0400 	mov.w	r4, #0
 8001020:	f06f 0007 	mvn.w	r0, #7
 8001024:	e9d1 2300 	ldrd	r2, r3, [r1]
 8001028:	f891 f040 	pld	[r1, #64]	; 0x40
 800102c:	f100 0008 	add.w	r0, r0, #8
 8001030:	fa82 f24c 	uadd8	r2, r2, ip
 8001034:	faa4 f28c 	sel	r2, r4, ip
 8001038:	fa83 f34c 	uadd8	r3, r3, ip
 800103c:	faa2 f38c 	sel	r3, r2, ip
 8001040:	bb4b      	cbnz	r3, 8001096 <strlen+0x96>
 8001042:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8001046:	fa82 f24c 	uadd8	r2, r2, ip
 800104a:	f100 0008 	add.w	r0, r0, #8
 800104e:	faa4 f28c 	sel	r2, r4, ip
 8001052:	fa83 f34c 	uadd8	r3, r3, ip
 8001056:	faa2 f38c 	sel	r3, r2, ip
 800105a:	b9e3      	cbnz	r3, 8001096 <strlen+0x96>
 800105c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8001060:	fa82 f24c 	uadd8	r2, r2, ip
 8001064:	f100 0008 	add.w	r0, r0, #8
 8001068:	faa4 f28c 	sel	r2, r4, ip
 800106c:	fa83 f34c 	uadd8	r3, r3, ip
 8001070:	faa2 f38c 	sel	r3, r2, ip
 8001074:	b97b      	cbnz	r3, 8001096 <strlen+0x96>
 8001076:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 800107a:	f101 0120 	add.w	r1, r1, #32
 800107e:	fa82 f24c 	uadd8	r2, r2, ip
 8001082:	f100 0008 	add.w	r0, r0, #8
 8001086:	faa4 f28c 	sel	r2, r4, ip
 800108a:	fa83 f34c 	uadd8	r3, r3, ip
 800108e:	faa2 f38c 	sel	r3, r2, ip
 8001092:	2b00      	cmp	r3, #0
 8001094:	d0c6      	beq.n	8001024 <strlen+0x24>
 8001096:	2a00      	cmp	r2, #0
 8001098:	bf04      	itt	eq
 800109a:	3004      	addeq	r0, #4
 800109c:	461a      	moveq	r2, r3
 800109e:	ba12      	rev	r2, r2
 80010a0:	fab2 f282 	clz	r2, r2
 80010a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 80010a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80010ac:	4770      	bx	lr
 80010ae:	e9d1 2300 	ldrd	r2, r3, [r1]
 80010b2:	f004 0503 	and.w	r5, r4, #3
 80010b6:	f1c4 0000 	rsb	r0, r4, #0
 80010ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80010be:	f014 0f04 	tst.w	r4, #4
 80010c2:	f891 f040 	pld	[r1, #64]	; 0x40
 80010c6:	fa0c f505 	lsl.w	r5, ip, r5
 80010ca:	ea62 0205 	orn	r2, r2, r5
 80010ce:	bf1c      	itt	ne
 80010d0:	ea63 0305 	ornne	r3, r3, r5
 80010d4:	4662      	movne	r2, ip
 80010d6:	f04f 0400 	mov.w	r4, #0
 80010da:	e7a9      	b.n	8001030 <strlen+0x30>
 80010dc:	0000      	movs	r0, r0
	...

080010e0 <memchr>:
 80010e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80010e4:	2a10      	cmp	r2, #16
 80010e6:	db2b      	blt.n	8001140 <memchr+0x60>
 80010e8:	f010 0f07 	tst.w	r0, #7
 80010ec:	d008      	beq.n	8001100 <memchr+0x20>
 80010ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80010f2:	3a01      	subs	r2, #1
 80010f4:	428b      	cmp	r3, r1
 80010f6:	d02d      	beq.n	8001154 <memchr+0x74>
 80010f8:	f010 0f07 	tst.w	r0, #7
 80010fc:	b342      	cbz	r2, 8001150 <memchr+0x70>
 80010fe:	d1f6      	bne.n	80010ee <memchr+0xe>
 8001100:	b4f0      	push	{r4, r5, r6, r7}
 8001102:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8001106:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800110a:	f022 0407 	bic.w	r4, r2, #7
 800110e:	f07f 0700 	mvns.w	r7, #0
 8001112:	2300      	movs	r3, #0
 8001114:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8001118:	3c08      	subs	r4, #8
 800111a:	ea85 0501 	eor.w	r5, r5, r1
 800111e:	ea86 0601 	eor.w	r6, r6, r1
 8001122:	fa85 f547 	uadd8	r5, r5, r7
 8001126:	faa3 f587 	sel	r5, r3, r7
 800112a:	fa86 f647 	uadd8	r6, r6, r7
 800112e:	faa5 f687 	sel	r6, r5, r7
 8001132:	b98e      	cbnz	r6, 8001158 <memchr+0x78>
 8001134:	d1ee      	bne.n	8001114 <memchr+0x34>
 8001136:	bcf0      	pop	{r4, r5, r6, r7}
 8001138:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800113c:	f002 0207 	and.w	r2, r2, #7
 8001140:	b132      	cbz	r2, 8001150 <memchr+0x70>
 8001142:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001146:	3a01      	subs	r2, #1
 8001148:	ea83 0301 	eor.w	r3, r3, r1
 800114c:	b113      	cbz	r3, 8001154 <memchr+0x74>
 800114e:	d1f8      	bne.n	8001142 <memchr+0x62>
 8001150:	2000      	movs	r0, #0
 8001152:	4770      	bx	lr
 8001154:	3801      	subs	r0, #1
 8001156:	4770      	bx	lr
 8001158:	2d00      	cmp	r5, #0
 800115a:	bf06      	itte	eq
 800115c:	4635      	moveq	r5, r6
 800115e:	3803      	subeq	r0, #3
 8001160:	3807      	subne	r0, #7
 8001162:	f015 0f01 	tst.w	r5, #1
 8001166:	d107      	bne.n	8001178 <memchr+0x98>
 8001168:	3001      	adds	r0, #1
 800116a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800116e:	bf02      	ittt	eq
 8001170:	3001      	addeq	r0, #1
 8001172:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8001176:	3001      	addeq	r0, #1
 8001178:	bcf0      	pop	{r4, r5, r6, r7}
 800117a:	3801      	subs	r0, #1
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop

08001180 <__aeabi_dcmpun>:
 8001180:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8001184:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001188:	d102      	bne.n	8001190 <__aeabi_dcmpun+0x10>
 800118a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800118e:	d10a      	bne.n	80011a6 <__aeabi_dcmpun+0x26>
 8001190:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001194:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001198:	d102      	bne.n	80011a0 <__aeabi_dcmpun+0x20>
 800119a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800119e:	d102      	bne.n	80011a6 <__aeabi_dcmpun+0x26>
 80011a0:	f04f 0000 	mov.w	r0, #0
 80011a4:	4770      	bx	lr
 80011a6:	f04f 0001 	mov.w	r0, #1
 80011aa:	4770      	bx	lr

080011ac <__aeabi_d2iz>:
 80011ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80011b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80011b4:	d215      	bcs.n	80011e2 <__aeabi_d2iz+0x36>
 80011b6:	d511      	bpl.n	80011dc <__aeabi_d2iz+0x30>
 80011b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80011bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80011c0:	d912      	bls.n	80011e8 <__aeabi_d2iz+0x3c>
 80011c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80011c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80011ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80011d2:	fa23 f002 	lsr.w	r0, r3, r2
 80011d6:	bf18      	it	ne
 80011d8:	4240      	negne	r0, r0
 80011da:	4770      	bx	lr
 80011dc:	f04f 0000 	mov.w	r0, #0
 80011e0:	4770      	bx	lr
 80011e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80011e6:	d105      	bne.n	80011f4 <__aeabi_d2iz+0x48>
 80011e8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80011ec:	bf08      	it	eq
 80011ee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80011f2:	4770      	bx	lr
 80011f4:	f04f 0000 	mov.w	r0, #0
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop

080011fc <main>:
 * \returns 0 always
 *
 * \brief This is the standard entry point for C code.
 */
int main (void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08c      	sub	sp, #48	; 0x30
 8001200:	af0a      	add	r7, sp, #40	; 0x28
  OS_ERR  err;

  // Disable all interrupts                                               // <3>
  BSP_IntDisAll();
 8001202:	f005 fd0d 	bl	8006c20 <BSP_IntDisAll>
  // Enable Interrupt UART
  BSP_IntEn (BSP_INT_ID_USIC1_01); //**
 8001206:	205b      	movs	r0, #91	; 0x5b
 8001208:	f005 fd10 	bl	8006c2c <BSP_IntEn>
  BSP_IntEn (BSP_INT_ID_USIC1_00); //**
 800120c:	205a      	movs	r0, #90	; 0x5a
 800120e:	f005 fd0d 	bl	8006c2c <BSP_IntEn>

// init SEMI Hosting DEBUG Support                                        // <4>
#if SEMI_HOSTING
  initRetargetSwo();
 8001212:	f006 fce3 	bl	8007bdc <initRetargetSwo>
  SEGGER_RTT_ConfigUpBuffer (0, NULL, NULL, 0,
           SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL);
#endif

  // Init uC/OS-III
  OSInit (&err);                                                          // <5>
 8001216:	1dbb      	adds	r3, r7, #6
 8001218:	4618      	mov	r0, r3
 800121a:	f002 fbab 	bl	8003974 <OSInit>
  if (err != OS_ERR_NONE)
 800121e:	88fb      	ldrh	r3, [r7, #6]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d002      	beq.n	800122a <main+0x2e>
    APP_TRACE_DBG ("Error OSInit: main\n");
 8001224:	4814      	ldr	r0, [pc, #80]	; (8001278 <main+0x7c>)
 8001226:	f007 fc83 	bl	8008b30 <puts>

  /* Create the start task */                                             // <6>
  OSTaskCreate ( (OS_TCB     *) &AppStartTaskTCB,
 800122a:	1dbb      	adds	r3, r7, #6
 800122c:	9308      	str	r3, [sp, #32]
 800122e:	2303      	movs	r3, #3
 8001230:	9307      	str	r3, [sp, #28]
 8001232:	2300      	movs	r3, #0
 8001234:	9306      	str	r3, [sp, #24]
 8001236:	2300      	movs	r3, #0
 8001238:	9305      	str	r3, [sp, #20]
 800123a:	2300      	movs	r3, #0
 800123c:	9304      	str	r3, [sp, #16]
 800123e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001242:	9303      	str	r3, [sp, #12]
 8001244:	2319      	movs	r3, #25
 8001246:	9302      	str	r3, [sp, #8]
 8001248:	4b0c      	ldr	r3, [pc, #48]	; (800127c <main+0x80>)
 800124a:	9301      	str	r3, [sp, #4]
 800124c:	2302      	movs	r3, #2
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	2300      	movs	r3, #0
 8001252:	4a0b      	ldr	r2, [pc, #44]	; (8001280 <main+0x84>)
 8001254:	490b      	ldr	r1, [pc, #44]	; (8001284 <main+0x88>)
 8001256:	480c      	ldr	r0, [pc, #48]	; (8001288 <main+0x8c>)
 8001258:	f001 fbce 	bl	80029f8 <OSTaskCreate>
           (void       *) 0,
           (OS_OPT) (OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
           (OS_ERR     *) &err);

  // Start multitasking (i.e., give control to uC/OS-III)
  OSStart (&err);                                                         // <7>
 800125c:	1dbb      	adds	r3, r7, #6
 800125e:	4618      	mov	r0, r3
 8001260:	f002 fddc 	bl	8003e1c <OSStart>
  if (err != OS_ERR_NONE)
 8001264:	88fb      	ldrh	r3, [r7, #6]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d002      	beq.n	8001270 <main+0x74>
    APP_TRACE_DBG ("Error OSStart: main\n");
 800126a:	4808      	ldr	r0, [pc, #32]	; (800128c <main+0x90>)
 800126c:	f007 fc60 	bl	8008b30 <puts>

  while (1) {                                                             // <8>
    APP_TRACE_DBG ("Should never be output! Bug?\n");
 8001270:	4807      	ldr	r0, [pc, #28]	; (8001290 <main+0x94>)
 8001272:	f007 fc5d 	bl	8008b30 <puts>
  }
 8001276:	e7fb      	b.n	8001270 <main+0x74>
 8001278:	0800eb18 	.word	0x0800eb18
 800127c:	200009e0 	.word	0x200009e0
 8001280:	08001295 	.word	0x08001295
 8001284:	0800eb2c 	.word	0x0800eb2c
 8001288:	20000de0 	.word	0x20000de0
 800128c:	0800eb3c 	.word	0x0800eb3c
 8001290:	0800eb50 	.word	0x0800eb50

08001294 <AppTaskStart>:
 * \brief Startup (init) task that loads board support functions,
 *        initializes CPU services, the memory, the systick timer,
 *        etc. and finally invokes other application tasks.
 */
static void AppTaskStart (void *p_arg)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  CPU_INT32U  cnts;
  OS_ERR      err;

  (void) p_arg;
  // initialize BSP functions
  BSP_Init();                                                             // <9>
 800129c:	f006 fc62 	bl	8007b64 <BSP_Init>
  // initialize the uC/CPU services
  CPU_Init();
 80012a0:	f000 ff8e 	bl	80021c0 <CPU_Init>
  // determine SysTick reference frequency
  cpu_clk_freq = BSP_SysClkFreqGet();
 80012a4:	f006 fc04 	bl	8007ab0 <BSP_SysClkFreqGet>
 80012a8:	6178      	str	r0, [r7, #20]
  // determine nbr SysTick increments
  cnts = cpu_clk_freq / (CPU_INT32U) OSCfg_TickRate_Hz;
 80012aa:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <AppTaskStart+0x80>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	697a      	ldr	r2, [r7, #20]
 80012b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b4:	613b      	str	r3, [r7, #16]
  // init uCOS-III periodic time src (SysTick)
  OS_CPU_SysTickInit (cnts);
 80012b6:	6938      	ldr	r0, [r7, #16]
 80012b8:	f005 faee 	bl	8006898 <OS_CPU_SysTickInit>
  // initialize memory management module
  Mem_Init();
 80012bc:	f001 f868 	bl	8002390 <Mem_Init>
  // initialize mathematical module
  Math_Init();
 80012c0:	f001 f938 	bl	8002534 <Math_Init>
  //Ta
  pen_up();
 80012c4:	f000 fcc0 	bl	8001c48 <pen_up>

  _mcp23s08_Plotter_Init();
 80012c8:	f000 ff5a 	bl	8002180 <_mcp23s08_Plotter_Init>

  pen_down();
 80012cc:	f000 fcd0 	bl	8001c70 <pen_down>

// compute CPU capacity with no task running
#if (OS_CFG_STAT_TASK_EN > 0u)                                           // <10>
  OSStatTaskCPUUsageInit (&err);
 80012d0:	f107 030e 	add.w	r3, r7, #14
 80012d4:	4618      	mov	r0, r3
 80012d6:	f003 fe55 	bl	8004f84 <OSStatTaskCPUUsageInit>
  if (err != OS_ERR_NONE)
 80012da:	89fb      	ldrh	r3, [r7, #14]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d002      	beq.n	80012e6 <AppTaskStart+0x52>
    APP_TRACE_DBG ("Error OSStatTaskCPUUsageInit: AppTaskStart\n");
 80012e0:	480d      	ldr	r0, [pc, #52]	; (8001318 <AppTaskStart+0x84>)
 80012e2:	f007 fc25 	bl	8008b30 <puts>
#endif

  APP_TRACE_INFO ("Creating Application Objects...\n");                  // <11>
 80012e6:	480d      	ldr	r0, [pc, #52]	; (800131c <AppTaskStart+0x88>)
 80012e8:	f007 fc22 	bl	8008b30 <puts>
  // create application objects
  AppObjCreate();
 80012ec:	f000 f81c 	bl	8001328 <AppObjCreate>

  APP_TRACE_INFO ("Creating Application Tasks...\n");                    // <12>
 80012f0:	480b      	ldr	r0, [pc, #44]	; (8001320 <AppTaskStart+0x8c>)
 80012f2:	f007 fc1d 	bl	8008b30 <puts>
  // create application tasks
  AppTaskCreate();
 80012f6:	f000 f895 	bl	8001424 <AppTaskCreate>

  while (DEF_TRUE) {                                                     // <13>
    // Suspend current task
    OSTaskSuspend ( (OS_TCB *) 0, &err);
 80012fa:	f107 030e 	add.w	r3, r7, #14
 80012fe:	4619      	mov	r1, r3
 8001300:	2000      	movs	r0, #0
 8001302:	f001 fe35 	bl	8002f70 <OSTaskSuspend>
    if (err != OS_ERR_NONE)
 8001306:	89fb      	ldrh	r3, [r7, #14]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d0f6      	beq.n	80012fa <AppTaskStart+0x66>
      APP_TRACE_DBG ("Error OSTaskSuspend: AppTaskStart\n");
 800130c:	4805      	ldr	r0, [pc, #20]	; (8001324 <AppTaskStart+0x90>)
 800130e:	f007 fc0f 	bl	8008b30 <puts>
  }
 8001312:	e7f2      	b.n	80012fa <AppTaskStart+0x66>
 8001314:	0800f09c 	.word	0x0800f09c
 8001318:	0800eb70 	.word	0x0800eb70
 800131c:	0800eb9c 	.word	0x0800eb9c
 8001320:	0800ebbc 	.word	0x0800ebbc
 8001324:	0800ebdc 	.word	0x0800ebdc

08001328 <AppObjCreate>:
 * \brief Creates application objects.
 * \params none
 * \returns none
 */
static void AppObjCreate (void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af02      	add	r7, sp, #8
	OS_ERR      err;
	// Create Shared Memory
	  OSMemCreate ( (OS_MEM    *) &Mem_Partition,
 800132e:	1dbb      	adds	r3, r7, #6
 8001330:	9301      	str	r3, [sp, #4]
 8001332:	2314      	movs	r3, #20
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	2302      	movs	r3, #2
 8001338:	4a29      	ldr	r2, [pc, #164]	; (80013e0 <AppObjCreate+0xb8>)
 800133a:	492a      	ldr	r1, [pc, #168]	; (80013e4 <AppObjCreate+0xbc>)
 800133c:	482a      	ldr	r0, [pc, #168]	; (80013e8 <AppObjCreate+0xc0>)
 800133e:	f004 feab 	bl	8006098 <OSMemCreate>
	          (CPU_CHAR  *) "Mem Partition",
	          (void      *) &MyPartitionStorage[0][0],
	          (OS_MEM_QTY)  NUM_MSG,
	          (OS_MEM_SIZE) MAX_MSG_LENGTH * sizeof (CPU_CHAR),
	          (OS_ERR    *) &err);
	  if (err != OS_ERR_NONE)
 8001342:	88fb      	ldrh	r3, [r7, #6]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d002      	beq.n	800134e <AppObjCreate+0x26>
	    APP_TRACE_DBG ("Error OSMemCreate: AppObjCreate\n");
 8001348:	4828      	ldr	r0, [pc, #160]	; (80013ec <AppObjCreate+0xc4>)
 800134a:	f007 fbf1 	bl	8008b30 <puts>
	  // Create Shared Memory
	   OSMemCreate ( (OS_MEM    *) &Mem_Partition1,
 800134e:	1dbb      	adds	r3, r7, #6
 8001350:	9301      	str	r3, [sp, #4]
 8001352:	2314      	movs	r3, #20
 8001354:	9300      	str	r3, [sp, #0]
 8001356:	2302      	movs	r3, #2
 8001358:	4a25      	ldr	r2, [pc, #148]	; (80013f0 <AppObjCreate+0xc8>)
 800135a:	4926      	ldr	r1, [pc, #152]	; (80013f4 <AppObjCreate+0xcc>)
 800135c:	4826      	ldr	r0, [pc, #152]	; (80013f8 <AppObjCreate+0xd0>)
 800135e:	f004 fe9b 	bl	8006098 <OSMemCreate>
	           (CPU_CHAR  *) "Mem Partition1",
	           (void      *) &MyPartitionStorage1[0][0],
	           (OS_MEM_QTY)  NUM_MSG,
	           (OS_MEM_SIZE) MAX_MSG_LENGTH * sizeof (CPU_CHAR),
	           (OS_ERR    *) &err);
	   if (err != OS_ERR_NONE)
 8001362:	88fb      	ldrh	r3, [r7, #6]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d002      	beq.n	800136e <AppObjCreate+0x46>
	     APP_TRACE_DBG ("Error OSMemCreate: AppObjCreate\n");
 8001368:	4820      	ldr	r0, [pc, #128]	; (80013ec <AppObjCreate+0xc4>)
 800136a:	f007 fbe1 	bl	8008b30 <puts>
	   // Create Shared Memory
	   OSMemCreate ( (OS_MEM    *) &Mem_Partition2,
 800136e:	1dbb      	adds	r3, r7, #6
 8001370:	9301      	str	r3, [sp, #4]
 8001372:	2314      	movs	r3, #20
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	2302      	movs	r3, #2
 8001378:	4a20      	ldr	r2, [pc, #128]	; (80013fc <AppObjCreate+0xd4>)
 800137a:	4921      	ldr	r1, [pc, #132]	; (8001400 <AppObjCreate+0xd8>)
 800137c:	4821      	ldr	r0, [pc, #132]	; (8001404 <AppObjCreate+0xdc>)
 800137e:	f004 fe8b 	bl	8006098 <OSMemCreate>
	              (CPU_CHAR  *) "Mem Partition2",
	              (void      *) &MyPartitionStorage2[0][0],
	              (OS_MEM_QTY)  NUM_MSG,
	              (OS_MEM_SIZE) MAX_MSG_LENGTH * sizeof (CPU_CHAR),
	              (OS_ERR    *) &err);
	      if (err != OS_ERR_NONE)
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d002      	beq.n	800138e <AppObjCreate+0x66>
	        APP_TRACE_DBG ("Error OSMemCreate: AppObjCreate\n");
 8001388:	4818      	ldr	r0, [pc, #96]	; (80013ec <AppObjCreate+0xc4>)
 800138a:	f007 fbd1 	bl	8008b30 <puts>
	  // Create Message Queue
	  OSQCreate ( (OS_Q *)     &UART_ISR,
 800138e:	1dbb      	adds	r3, r7, #6
 8001390:	2202      	movs	r2, #2
 8001392:	491d      	ldr	r1, [pc, #116]	; (8001408 <AppObjCreate+0xe0>)
 8001394:	481d      	ldr	r0, [pc, #116]	; (800140c <AppObjCreate+0xe4>)
 8001396:	f001 f8eb 	bl	8002570 <OSQCreate>
	        (CPU_CHAR *) "ISR Queue",
	        (OS_MSG_QTY) NUM_MSG,
	        (OS_ERR   *) &err);
	  if (err != OS_ERR_NONE)
 800139a:	88fb      	ldrh	r3, [r7, #6]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d002      	beq.n	80013a6 <AppObjCreate+0x7e>
	    APP_TRACE_DBG ("Error OSQCreate: AppObjCreate\n");
 80013a0:	481b      	ldr	r0, [pc, #108]	; (8001410 <AppObjCreate+0xe8>)
 80013a2:	f007 fbc5 	bl	8008b30 <puts>

	  // Create Message Queue
	  OSQCreate ( (OS_Q *)     &Q_STEP_1,
 80013a6:	1dbb      	adds	r3, r7, #6
 80013a8:	2202      	movs	r2, #2
 80013aa:	491a      	ldr	r1, [pc, #104]	; (8001414 <AppObjCreate+0xec>)
 80013ac:	481a      	ldr	r0, [pc, #104]	; (8001418 <AppObjCreate+0xf0>)
 80013ae:	f001 f8df 	bl	8002570 <OSQCreate>
	 	              (CPU_CHAR *) "STEP_X Queue",
	 	              (OS_MSG_QTY) NUM_MSG,
	 	              (OS_ERR   *) &err);
	  if (err != OS_ERR_NONE)
 80013b2:	88fb      	ldrh	r3, [r7, #6]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d002      	beq.n	80013be <AppObjCreate+0x96>
		  APP_TRACE_DBG ("Error OSQCreate: AppObjCreate\n");
 80013b8:	4815      	ldr	r0, [pc, #84]	; (8001410 <AppObjCreate+0xe8>)
 80013ba:	f007 fbb9 	bl	8008b30 <puts>
	    // Create Message Queue
	  OSQCreate ( (OS_Q *)     &Q_STEP_2,
 80013be:	1dbb      	adds	r3, r7, #6
 80013c0:	2202      	movs	r2, #2
 80013c2:	4916      	ldr	r1, [pc, #88]	; (800141c <AppObjCreate+0xf4>)
 80013c4:	4816      	ldr	r0, [pc, #88]	; (8001420 <AppObjCreate+0xf8>)
 80013c6:	f001 f8d3 	bl	8002570 <OSQCreate>
	              (CPU_CHAR *) "STEP_Y Queue",
	              (OS_MSG_QTY) NUM_MSG,
	              (OS_ERR   *) &err);
	  if (err != OS_ERR_NONE)
 80013ca:	88fb      	ldrh	r3, [r7, #6]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d002      	beq.n	80013d6 <AppObjCreate+0xae>
		  APP_TRACE_DBG ("Error OSQCreate: AppObjCreate\n");
 80013d0:	480f      	ldr	r0, [pc, #60]	; (8001410 <AppObjCreate+0xe8>)
 80013d2:	f007 fbad 	bl	8008b30 <puts>

}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20001a34 	.word	0x20001a34
 80013e4:	0800ec00 	.word	0x0800ec00
 80013e8:	20001b34 	.word	0x20001b34
 80013ec:	0800ec10 	.word	0x0800ec10
 80013f0:	20001a6c 	.word	0x20001a6c
 80013f4:	0800ec30 	.word	0x0800ec30
 80013f8:	20001ab0 	.word	0x20001ab0
 80013fc:	20001b54 	.word	0x20001b54
 8001400:	0800ec40 	.word	0x0800ec40
 8001404:	20001a4c 	.word	0x20001a4c
 8001408:	0800ec50 	.word	0x0800ec50
 800140c:	20001ad4 	.word	0x20001ad4
 8001410:	0800ec5c 	.word	0x0800ec5c
 8001414:	0800ec7c 	.word	0x0800ec7c
 8001418:	20001b04 	.word	0x20001b04
 800141c:	0800ec8c 	.word	0x0800ec8c
 8001420:	20001a80 	.word	0x20001a80

08001424 <AppTaskCreate>:
 * \brief Creates one application task.
 * \params none
 * \returns none
 */
static void  AppTaskCreate (void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08c      	sub	sp, #48	; 0x30
 8001428:	af0a      	add	r7, sp, #40	; 0x28
  OS_ERR      err;

  // create AppTask_COM
  OSTaskCreate ( (OS_TCB     *) &AppTaskComTCB,
 800142a:	1dbb      	adds	r3, r7, #6
 800142c:	9308      	str	r3, [sp, #32]
 800142e:	2303      	movs	r3, #3
 8001430:	9307      	str	r3, [sp, #28]
 8001432:	2300      	movs	r3, #0
 8001434:	9306      	str	r3, [sp, #24]
 8001436:	2300      	movs	r3, #0
 8001438:	9305      	str	r3, [sp, #20]
 800143a:	2300      	movs	r3, #0
 800143c:	9304      	str	r3, [sp, #16]
 800143e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001442:	9303      	str	r3, [sp, #12]
 8001444:	2319      	movs	r3, #25
 8001446:	9302      	str	r3, [sp, #8]
 8001448:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <AppTaskCreate+0x8c>)
 800144a:	9301      	str	r3, [sp, #4]
 800144c:	230a      	movs	r3, #10
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	2300      	movs	r3, #0
 8001452:	4a18      	ldr	r2, [pc, #96]	; (80014b4 <AppTaskCreate+0x90>)
 8001454:	4918      	ldr	r1, [pc, #96]	; (80014b8 <AppTaskCreate+0x94>)
 8001456:	4819      	ldr	r0, [pc, #100]	; (80014bc <AppTaskCreate+0x98>)
 8001458:	f001 face 	bl	80029f8 <OSTaskCreate>
           (OS_MSG_QTY) 0u,
           (OS_TICK) 0u,
           (void       *) 0,
           (OS_OPT) (OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
           (OS_ERR     *) &err);
  if (err != OS_ERR_NONE)
 800145c:	88fb      	ldrh	r3, [r7, #6]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d002      	beq.n	8001468 <AppTaskCreate+0x44>
    APP_TRACE_DBG ("Error OSTaskCreate: AppTaskCreate\n");
 8001462:	4817      	ldr	r0, [pc, #92]	; (80014c0 <AppTaskCreate+0x9c>)
 8001464:	f007 fb64 	bl	8008b30 <puts>

  // create AppTask_IO
    OSTaskCreate ( (OS_TCB     *) &AppTaskStepperTCB,
 8001468:	1dbb      	adds	r3, r7, #6
 800146a:	9308      	str	r3, [sp, #32]
 800146c:	2303      	movs	r3, #3
 800146e:	9307      	str	r3, [sp, #28]
 8001470:	2300      	movs	r3, #0
 8001472:	9306      	str	r3, [sp, #24]
 8001474:	2300      	movs	r3, #0
 8001476:	9305      	str	r3, [sp, #20]
 8001478:	2300      	movs	r3, #0
 800147a:	9304      	str	r3, [sp, #16]
 800147c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001480:	9303      	str	r3, [sp, #12]
 8001482:	2319      	movs	r3, #25
 8001484:	9302      	str	r3, [sp, #8]
 8001486:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <AppTaskCreate+0xa0>)
 8001488:	9301      	str	r3, [sp, #4]
 800148a:	230b      	movs	r3, #11
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	2300      	movs	r3, #0
 8001490:	4a0d      	ldr	r2, [pc, #52]	; (80014c8 <AppTaskCreate+0xa4>)
 8001492:	490e      	ldr	r1, [pc, #56]	; (80014cc <AppTaskCreate+0xa8>)
 8001494:	480e      	ldr	r0, [pc, #56]	; (80014d0 <AppTaskCreate+0xac>)
 8001496:	f001 faaf 	bl	80029f8 <OSTaskCreate>
             (OS_MSG_QTY) 0u,
             (OS_TICK) 0u,
             (void       *) 0,
             (OS_OPT) (OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
             (OS_ERR     *) &err);
    if (err != OS_ERR_NONE)
 800149a:	88fb      	ldrh	r3, [r7, #6]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d002      	beq.n	80014a6 <AppTaskCreate+0x82>
      APP_TRACE_DBG ("Error OSTaskCreate: AppTaskCreate\n");
 80014a0:	4807      	ldr	r0, [pc, #28]	; (80014c0 <AppTaskCreate+0x9c>)
 80014a2:	f007 fb45 	bl	8008b30 <puts>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000ea0 	.word	0x20000ea0
 80014b4:	080014d5 	.word	0x080014d5
 80014b8:	0800ec9c 	.word	0x0800ec9c
 80014bc:	200016a0 	.word	0x200016a0
 80014c0:	0800eca4 	.word	0x0800eca4
 80014c4:	200012a0 	.word	0x200012a0
 80014c8:	080017cd 	.word	0x080017cd
 80014cc:	0800ecc8 	.word	0x0800ecc8
 80014d0:	20001760 	.word	0x20001760

080014d4 <AppTaskCom>:
 *        (3) Launch a terminal program and connect with 9600-8N1
 *            Enter strings like: #12345$, #abc$, etc.
 *            The XMC will respond with: XMC: 12345, XMC: abc, etc.
 */
static void AppTaskCom (void *p_arg)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b0a6      	sub	sp, #152	; 0x98
 80014d8:	af02      	add	r7, sp, #8
 80014da:	6078      	str	r0, [r7, #4]
  CPU_CHAR    	msg[MAX_MSG_LENGTH];
  CPU_CHAR    	x1[MAX_MSG_LENGTH];
  CPU_CHAR    	x2[MAX_MSG_LENGTH];
  CPU_CHAR  	y1[MAX_MSG_LENGTH];
  CPU_CHAR  	y2[MAX_MSG_LENGTH];
  char 			*msg_p=0;
 80014dc:	2300      	movs	r3, #0
 80014de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  int 			y2_i;
  int 			i;

  (void) p_arg;

  APP_TRACE_INFO ("Entering AppTaskCom ...\n");
 80014e2:	48af      	ldr	r0, [pc, #700]	; (80017a0 <AppTaskCom+0x2cc>)
 80014e4:	f007 fb24 	bl	8008b30 <puts>

  while (DEF_TRUE) {
	  // empty the message buffer


	  APP_TRACE_INFO ("Pending for uart message ...\n");
 80014e8:	48ae      	ldr	r0, [pc, #696]	; (80017a4 <AppTaskCom+0x2d0>)
 80014ea:	f007 fb21 	bl	8008b30 <puts>

	  // wait until a message is received

	  p_msg = OSQPend (&UART_ISR,
 80014ee:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80014f2:	f107 0372 	add.w	r3, r7, #114	; 0x72
 80014f6:	9301      	str	r3, [sp, #4]
 80014f8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	4613      	mov	r3, r2
 8001500:	2200      	movs	r2, #0
 8001502:	2100      	movs	r1, #0
 8001504:	48a8      	ldr	r0, [pc, #672]	; (80017a8 <AppTaskCom+0x2d4>)
 8001506:	f001 f883 	bl	8002610 <OSQPend>
 800150a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
			  0,
			  OS_OPT_PEND_BLOCKING,
	          &msg_size,
	          &ts,
	          &err);
	  if (err != OS_ERR_NONE && err != OS_ERR_TIMEOUT)
 800150e:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8001512:	2b00      	cmp	r3, #0
 8001514:	d008      	beq.n	8001528 <AppTaskCom+0x54>
 8001516:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800151a:	f247 22d9 	movw	r2, #29401	; 0x72d9
 800151e:	4293      	cmp	r3, r2
 8001520:	d002      	beq.n	8001528 <AppTaskCom+0x54>
		  APP_TRACE_DBG ("Error OSQPend: AppTaskCom\n");
 8001522:	48a2      	ldr	r0, [pc, #648]	; (80017ac <AppTaskCom+0x2d8>)
 8001524:	f007 fb04 	bl	8008b30 <puts>
	  // obtain message we received
	  APP_TRACE_INFO ("Got uart message ...\n");
 8001528:	48a1      	ldr	r0, [pc, #644]	; (80017b0 <AppTaskCom+0x2dc>)
 800152a:	f007 fb01 	bl	8008b30 <puts>
	  memset (&msg, 0, MAX_MSG_LENGTH);
 800152e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001532:	2214      	movs	r2, #20
 8001534:	2100      	movs	r1, #0
 8001536:	4618      	mov	r0, r3
 8001538:	f007 fa64 	bl	8008a04 <memset>
	  memcpy (msg, (CPU_CHAR*) p_msg, msg_size - 1);
 800153c:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8001540:	3b01      	subs	r3, #1
 8001542:	461a      	mov	r2, r3
 8001544:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001548:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fcbb 	bl	8000ec8 <memcpy>

	  // release the memory partition allocated in the UART service routine
	  OSMemPut (&Mem_Partition, p_msg, &err);
 8001552:	f107 0372 	add.w	r3, r7, #114	; 0x72
 8001556:	461a      	mov	r2, r3
 8001558:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800155c:	4895      	ldr	r0, [pc, #596]	; (80017b4 <AppTaskCom+0x2e0>)
 800155e:	f004 fe63 	bl	8006228 <OSMemPut>
	  if (err != OS_ERR_NONE)
 8001562:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8001566:	2b00      	cmp	r3, #0
 8001568:	d002      	beq.n	8001570 <AppTaskCom+0x9c>
	 	  APP_TRACE_DBG ("Error OSMemPut: AppTaskCom\n");
 800156a:	4893      	ldr	r0, [pc, #588]	; (80017b8 <AppTaskCom+0x2e4>)
 800156c:	f007 fae0 	bl	8008b30 <puts>

	  // EXTRACT Coordinates
	  msg_p=&msg[0];
 8001570:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001574:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  memset(&x1,0,MAX_MSG_LENGTH);
 8001578:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800157c:	2214      	movs	r2, #20
 800157e:	2100      	movs	r1, #0
 8001580:	4618      	mov	r0, r3
 8001582:	f007 fa3f 	bl	8008a04 <memset>
	  i=0;
 8001586:	2300      	movs	r3, #0
 8001588:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	  while(*msg_p!= ':'){
 800158c:	e014      	b.n	80015b8 <AppTaskCom+0xe4>
		  x1[i]=*msg_p;
 800158e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001592:	f993 1000 	ldrsb.w	r1, [r3]
 8001596:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800159a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800159e:	4413      	add	r3, r2
 80015a0:	460a      	mov	r2, r1
 80015a2:	701a      	strb	r2, [r3, #0]
		  msg_p++;
 80015a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015a8:	3301      	adds	r3, #1
 80015aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		  i++;
 80015ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80015b2:	3301      	adds	r3, #1
 80015b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

	  // EXTRACT Coordinates
	  msg_p=&msg[0];
	  memset(&x1,0,MAX_MSG_LENGTH);
	  i=0;
	  while(*msg_p!= ':'){
 80015b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015bc:	f993 3000 	ldrsb.w	r3, [r3]
 80015c0:	2b3a      	cmp	r3, #58	; 0x3a
 80015c2:	d1e4      	bne.n	800158e <AppTaskCom+0xba>
		  x1[i]=*msg_p;
		  msg_p++;
		  i++;
	  }
	  while(*msg_p== ':'){
 80015c4:	e004      	b.n	80015d0 <AppTaskCom+0xfc>
		  msg_p++;
 80015c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015ca:	3301      	adds	r3, #1
 80015cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  while(*msg_p!= ':'){
		  x1[i]=*msg_p;
		  msg_p++;
		  i++;
	  }
	  while(*msg_p== ':'){
 80015d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015d4:	f993 3000 	ldrsb.w	r3, [r3]
 80015d8:	2b3a      	cmp	r3, #58	; 0x3a
 80015da:	d0f4      	beq.n	80015c6 <AppTaskCom+0xf2>
		  msg_p++;
	  }

	  memset(&y1,0,MAX_MSG_LENGTH);
 80015dc:	f107 031c 	add.w	r3, r7, #28
 80015e0:	2214      	movs	r2, #20
 80015e2:	2100      	movs	r1, #0
 80015e4:	4618      	mov	r0, r3
 80015e6:	f007 fa0d 	bl	8008a04 <memset>
	  i=0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	  while(*msg_p != ':'){
 80015f0:	e014      	b.n	800161c <AppTaskCom+0x148>
		  y1[i]=*msg_p;
 80015f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015f6:	f993 1000 	ldrsb.w	r1, [r3]
 80015fa:	f107 021c 	add.w	r2, r7, #28
 80015fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001602:	4413      	add	r3, r2
 8001604:	460a      	mov	r2, r1
 8001606:	701a      	strb	r2, [r3, #0]
		  msg_p++;
 8001608:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800160c:	3301      	adds	r3, #1
 800160e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		  i++;
 8001612:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001616:	3301      	adds	r3, #1
 8001618:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		  msg_p++;
	  }

	  memset(&y1,0,MAX_MSG_LENGTH);
	  i=0;
	  while(*msg_p != ':'){
 800161c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001620:	f993 3000 	ldrsb.w	r3, [r3]
 8001624:	2b3a      	cmp	r3, #58	; 0x3a
 8001626:	d1e4      	bne.n	80015f2 <AppTaskCom+0x11e>
		  y1[i]=*msg_p;
		  msg_p++;
		  i++;
	  }
	  while(*msg_p== ':'){
 8001628:	e004      	b.n	8001634 <AppTaskCom+0x160>
	  		  msg_p++;
 800162a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800162e:	3301      	adds	r3, #1
 8001630:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  while(*msg_p != ':'){
		  y1[i]=*msg_p;
		  msg_p++;
		  i++;
	  }
	  while(*msg_p== ':'){
 8001634:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001638:	f993 3000 	ldrsb.w	r3, [r3]
 800163c:	2b3a      	cmp	r3, #58	; 0x3a
 800163e:	d0f4      	beq.n	800162a <AppTaskCom+0x156>
	  		  msg_p++;
	  }

	  memset(&x2,0,MAX_MSG_LENGTH);
 8001640:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001644:	2214      	movs	r2, #20
 8001646:	2100      	movs	r1, #0
 8001648:	4618      	mov	r0, r3
 800164a:	f007 f9db 	bl	8008a04 <memset>
	  i=0;
 800164e:	2300      	movs	r3, #0
 8001650:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	  while(*msg_p!= ':'){
 8001654:	e014      	b.n	8001680 <AppTaskCom+0x1ac>
		  x2[i]=*msg_p;
 8001656:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800165a:	f993 1000 	ldrsb.w	r1, [r3]
 800165e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001662:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001666:	4413      	add	r3, r2
 8001668:	460a      	mov	r2, r1
 800166a:	701a      	strb	r2, [r3, #0]
		  msg_p++;
 800166c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001670:	3301      	adds	r3, #1
 8001672:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		  i++;
 8001676:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800167a:	3301      	adds	r3, #1
 800167c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	  		  msg_p++;
	  }

	  memset(&x2,0,MAX_MSG_LENGTH);
	  i=0;
	  while(*msg_p!= ':'){
 8001680:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001684:	f993 3000 	ldrsb.w	r3, [r3]
 8001688:	2b3a      	cmp	r3, #58	; 0x3a
 800168a:	d1e4      	bne.n	8001656 <AppTaskCom+0x182>
		  x2[i]=*msg_p;
		  msg_p++;
		  i++;
	  }
	  while(*msg_p== ':'){
 800168c:	e004      	b.n	8001698 <AppTaskCom+0x1c4>
		  msg_p++;
 800168e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001692:	3301      	adds	r3, #1
 8001694:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  while(*msg_p!= ':'){
		  x2[i]=*msg_p;
		  msg_p++;
		  i++;
	  }
	  while(*msg_p== ':'){
 8001698:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800169c:	f993 3000 	ldrsb.w	r3, [r3]
 80016a0:	2b3a      	cmp	r3, #58	; 0x3a
 80016a2:	d0f4      	beq.n	800168e <AppTaskCom+0x1ba>
		  msg_p++;
	  }

	  memset(&y2,0,MAX_MSG_LENGTH);
 80016a4:	f107 0308 	add.w	r3, r7, #8
 80016a8:	2214      	movs	r2, #20
 80016aa:	2100      	movs	r1, #0
 80016ac:	4618      	mov	r0, r3
 80016ae:	f007 f9a9 	bl	8008a04 <memset>
	  i=0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	  while(*msg_p != '\0'){
 80016b8:	e014      	b.n	80016e4 <AppTaskCom+0x210>
		  y2[i]=*msg_p;
 80016ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80016be:	f993 1000 	ldrsb.w	r1, [r3]
 80016c2:	f107 0208 	add.w	r2, r7, #8
 80016c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80016ca:	4413      	add	r3, r2
 80016cc:	460a      	mov	r2, r1
 80016ce:	701a      	strb	r2, [r3, #0]
		  msg_p++;
 80016d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80016d4:	3301      	adds	r3, #1
 80016d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		  i++;
 80016da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80016de:	3301      	adds	r3, #1
 80016e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		  msg_p++;
	  }

	  memset(&y2,0,MAX_MSG_LENGTH);
	  i=0;
	  while(*msg_p != '\0'){
 80016e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80016e8:	f993 3000 	ldrsb.w	r3, [r3]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1e4      	bne.n	80016ba <AppTaskCom+0x1e6>
		  y2[i]=*msg_p;
		  msg_p++;
		  i++;
	  }
	  x1_i=atoi(x1);
 80016f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016f4:	4618      	mov	r0, r3
 80016f6:	f007 f959 	bl	80089ac <atoi>
 80016fa:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
	  y1_i=atoi(y1);
 80016fe:	f107 031c 	add.w	r3, r7, #28
 8001702:	4618      	mov	r0, r3
 8001704:	f007 f952 	bl	80089ac <atoi>
 8001708:	67f8      	str	r0, [r7, #124]	; 0x7c
	  x2_i=atoi(x2);
 800170a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800170e:	4618      	mov	r0, r3
 8001710:	f007 f94c 	bl	80089ac <atoi>
 8001714:	67b8      	str	r0, [r7, #120]	; 0x78
	  y2_i=atoi(y2);
 8001716:	f107 0308 	add.w	r3, r7, #8
 800171a:	4618      	mov	r0, r3
 800171c:	f007 f946 	bl	80089ac <atoi>
 8001720:	6778      	str	r0, [r7, #116]	; 0x74

	  x1_i= x1_i - x_c;
 8001722:	4b26      	ldr	r3, [pc, #152]	; (80017bc <AppTaskCom+0x2e8>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	  y1_i= y1_i - y_c;
 8001730:	4b23      	ldr	r3, [pc, #140]	; (80017c0 <AppTaskCom+0x2ec>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	67fb      	str	r3, [r7, #124]	; 0x7c
	  if(x1_i != 0 && y1_i != 0){
 800173a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800173e:	2b00      	cmp	r3, #0
 8001740:	d00c      	beq.n	800175c <AppTaskCom+0x288>
 8001742:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001744:	2b00      	cmp	r3, #0
 8001746:	d009      	beq.n	800175c <AppTaskCom+0x288>
		  pen_up();
 8001748:	f000 fa7e 	bl	8001c48 <pen_up>
		  drawline( x1_i, y1_i);
 800174c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800174e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001752:	f000 fac3 	bl	8001cdc <drawline>
		  pen_down();
 8001756:	f000 fa8b 	bl	8001c70 <pen_down>
 800175a:	e00a      	b.n	8001772 <AppTaskCom+0x29e>
	  }else{
		  OSTimeDlyHMSM  (0,
 800175c:	f107 0372 	add.w	r3, r7, #114	; 0x72
 8001760:	9301      	str	r3, [sp, #4]
 8001762:	2300      	movs	r3, #0
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	2364      	movs	r3, #100	; 0x64
 8001768:	2200      	movs	r2, #0
 800176a:	2100      	movs	r1, #0
 800176c:	2000      	movs	r0, #0
 800176e:	f003 ff71 	bl	8005654 <OSTimeDlyHMSM>
						0,
						100,
						OS_OPT_TIME_HMSM_STRICT ,
						&err);
	  }
	  x2_i= x2_i - x_c;
 8001772:	4b12      	ldr	r3, [pc, #72]	; (80017bc <AppTaskCom+0x2e8>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	67bb      	str	r3, [r7, #120]	; 0x78
	  y2_i= y2_i - y_c;
 800177c:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <AppTaskCom+0x2ec>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	677b      	str	r3, [r7, #116]	; 0x74
	  drawline( x2_i, y2_i);
 8001786:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001788:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800178a:	f000 faa7 	bl	8001cdc <drawline>
	  if (err != OS_ERR_NONE)
	  	 APP_TRACE_DBG ("Error OSQPend1: AppSTEPY\n");
	  OSMemPut (&Mem_Partition1, p_msg, &err);
	  */
	 // XMC_UART_CH_Transmit (XMC_UART1_CH1, ACK);
	XMC_UART_CH_Transmit (XMC_UART1_CH1, 'X');                           // <19>
 800178e:	2158      	movs	r1, #88	; 0x58
 8001790:	480c      	ldr	r0, [pc, #48]	; (80017c4 <AppTaskCom+0x2f0>)
 8001792:	f006 ff87 	bl	80086a4 <XMC_UART_CH_Transmit>
	APP_TRACE_INFO ("Plot Line end\n");
 8001796:	480c      	ldr	r0, [pc, #48]	; (80017c8 <AppTaskCom+0x2f4>)
 8001798:	f007 f9ca 	bl	8008b30 <puts>
  }
 800179c:	e6a4      	b.n	80014e8 <AppTaskCom+0x14>
 800179e:	bf00      	nop
 80017a0:	0800ecd4 	.word	0x0800ecd4
 80017a4:	0800ecec 	.word	0x0800ecec
 80017a8:	20001ad4 	.word	0x20001ad4
 80017ac:	0800ed0c 	.word	0x0800ed0c
 80017b0:	0800ed28 	.word	0x0800ed28
 80017b4:	20001b34 	.word	0x20001b34
 80017b8:	0800ed40 	.word	0x0800ed40
 80017bc:	20001824 	.word	0x20001824
 80017c0:	20001828 	.word	0x20001828
 80017c4:	48020200 	.word	0x48020200
 80017c8:	0800ed5c 	.word	0x0800ed5c

080017cc <AppTaskStepper>:
}
/***********************************AppTask_Io*/
void AppTaskStepper (void *p_arg)
{
 80017cc:	b5b0      	push	{r4, r5, r7, lr}
 80017ce:	b0a2      	sub	sp, #136	; 0x88
 80017d0:	af02      	add	r7, sp, #8
 80017d2:	6078      	str	r0, [r7, #4]
	void    *q_msg;
	OS_MSG_SIZE msg_size;
	CPU_TS      ts=0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	64fb      	str	r3, [r7, #76]	; 0x4c
	CPU_CHAR    msg[MAX_MSG_LENGTH];
	int 	i;

	CPU_CHAR xsteps[MAX_MSG_LENGTH];
	CPU_CHAR ysteps[MAX_MSG_LENGTH];
	_Bool xdir= 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	_Bool ydir= 0;
 80017de:	2300      	movs	r3, #0
 80017e0:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
	long double factor=0;
 80017e4:	f04f 0300 	mov.w	r3, #0
 80017e8:	f04f 0400 	mov.w	r4, #0
 80017ec:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	long double ready=0;
 80017f0:	f04f 0300 	mov.w	r3, #0
 80017f4:	f04f 0400 	mov.w	r4, #0
 80017f8:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	int times=0;
 80017fc:	2300      	movs	r3, #0
 80017fe:	66fb      	str	r3, [r7, #108]	; 0x6c
	int xtimes=0;
 8001800:	2300      	movs	r3, #0
 8001802:	66bb      	str	r3, [r7, #104]	; 0x68
	int ytimes=0;
 8001804:	2300      	movs	r3, #0
 8001806:	667b      	str	r3, [r7, #100]	; 0x64
	char *msg_p=0;
 8001808:	2300      	movs	r3, #0
 800180a:	663b      	str	r3, [r7, #96]	; 0x60
	APP_TRACE_INFO ("Entering AppTaskStepperY ...\n");
 800180c:	48b6      	ldr	r0, [pc, #728]	; (8001ae8 <AppTaskStepper+0x31c>)
 800180e:	f007 f98f 	bl	8008b30 <puts>

	while(1){
	// Pending for message
		q_msg = OSQPend (&Q_STEP_1,
 8001812:	f107 0252 	add.w	r2, r7, #82	; 0x52
 8001816:	f107 034a 	add.w	r3, r7, #74	; 0x4a
 800181a:	9301      	str	r3, [sp, #4]
 800181c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	4613      	mov	r3, r2
 8001824:	2200      	movs	r2, #0
 8001826:	2100      	movs	r1, #0
 8001828:	48b0      	ldr	r0, [pc, #704]	; (8001aec <AppTaskStepper+0x320>)
 800182a:	f000 fef1 	bl	8002610 <OSQPend>
 800182e:	6578      	str	r0, [r7, #84]	; 0x54
				0,
		        OS_OPT_PEND_BLOCKING,
		        &msg_size,
		        &ts,
				&err);
		if (err != OS_ERR_NONE)
 8001830:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001834:	2b00      	cmp	r3, #0
 8001836:	d002      	beq.n	800183e <AppTaskStepper+0x72>
		      APP_TRACE_DBG ("Error OSQPend1: AppSTEPY\n");
 8001838:	48ad      	ldr	r0, [pc, #692]	; (8001af0 <AppTaskStepper+0x324>)
 800183a:	f007 f979 	bl	8008b30 <puts>
		// obtain message we received
		memset(&msg,0,MAX_MSG_LENGTH);
 800183e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001842:	2214      	movs	r2, #20
 8001844:	2100      	movs	r1, #0
 8001846:	4618      	mov	r0, r3
 8001848:	f007 f8dc 	bl	8008a04 <memset>
		memcpy (msg, (CPU_CHAR*) q_msg, msg_size - 1);
 800184c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001850:	3b01      	subs	r3, #1
 8001852:	461a      	mov	r2, r3
 8001854:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001858:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff fb34 	bl	8000ec8 <memcpy>
		APP_TRACE_INFO("GOT COORDINATES !!! \n");
 8001860:	48a4      	ldr	r0, [pc, #656]	; (8001af4 <AppTaskStepper+0x328>)
 8001862:	f007 f965 	bl	8008b30 <puts>

		// release the memory partition
	    OSMemPut (&Mem_Partition2, q_msg, &err);                              // <18>
 8001866:	f107 034a 	add.w	r3, r7, #74	; 0x4a
 800186a:	461a      	mov	r2, r3
 800186c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800186e:	48a2      	ldr	r0, [pc, #648]	; (8001af8 <AppTaskStepper+0x32c>)
 8001870:	f004 fcda 	bl	8006228 <OSMemPut>
	    if (err != OS_ERR_NONE)
 8001874:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001878:	2b00      	cmp	r3, #0
 800187a:	d002      	beq.n	8001882 <AppTaskStepper+0xb6>
	    	APP_TRACE_DBG ("Error OSMemPut1: AppSTEPY\n");
 800187c:	489f      	ldr	r0, [pc, #636]	; (8001afc <AppTaskStepper+0x330>)
 800187e:	f007 f957 	bl	8008b30 <puts>
	//DECODE
	    msg_p=&msg[0];
 8001882:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001886:	663b      	str	r3, [r7, #96]	; 0x60
	    memset(&xsteps,0,MAX_MSG_LENGTH);
 8001888:	f107 0320 	add.w	r3, r7, #32
 800188c:	2214      	movs	r2, #20
 800188e:	2100      	movs	r1, #0
 8001890:	4618      	mov	r0, r3
 8001892:	f007 f8b7 	bl	8008a04 <memset>
	    i=0;
 8001896:	2300      	movs	r3, #0
 8001898:	67fb      	str	r3, [r7, #124]	; 0x7c
	    while(*msg_p!= ':'){
 800189a:	e00e      	b.n	80018ba <AppTaskStepper+0xee>
	    	xsteps[i]=*msg_p;
 800189c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800189e:	f993 1000 	ldrsb.w	r1, [r3]
 80018a2:	f107 0220 	add.w	r2, r7, #32
 80018a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018a8:	4413      	add	r3, r2
 80018aa:	460a      	mov	r2, r1
 80018ac:	701a      	strb	r2, [r3, #0]
	    	msg_p++;
 80018ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018b0:	3301      	adds	r3, #1
 80018b2:	663b      	str	r3, [r7, #96]	; 0x60
	       	i++;
 80018b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018b6:	3301      	adds	r3, #1
 80018b8:	67fb      	str	r3, [r7, #124]	; 0x7c
	    	APP_TRACE_DBG ("Error OSMemPut1: AppSTEPY\n");
	//DECODE
	    msg_p=&msg[0];
	    memset(&xsteps,0,MAX_MSG_LENGTH);
	    i=0;
	    while(*msg_p!= ':'){
 80018ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018bc:	f993 3000 	ldrsb.w	r3, [r3]
 80018c0:	2b3a      	cmp	r3, #58	; 0x3a
 80018c2:	d1eb      	bne.n	800189c <AppTaskStepper+0xd0>
	    	xsteps[i]=*msg_p;
	    	msg_p++;
	       	i++;
	   	}
 	    while(*msg_p== ':'){
 80018c4:	e002      	b.n	80018cc <AppTaskStepper+0x100>
 	    	msg_p++;
 80018c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018c8:	3301      	adds	r3, #1
 80018ca:	663b      	str	r3, [r7, #96]	; 0x60
	    while(*msg_p!= ':'){
	    	xsteps[i]=*msg_p;
	    	msg_p++;
	       	i++;
	   	}
 	    while(*msg_p== ':'){
 80018cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018ce:	f993 3000 	ldrsb.w	r3, [r3]
 80018d2:	2b3a      	cmp	r3, #58	; 0x3a
 80018d4:	d0f7      	beq.n	80018c6 <AppTaskStepper+0xfa>
 	    	msg_p++;
   	   	}

	    memset(&ysteps,0,MAX_MSG_LENGTH);
 80018d6:	f107 030c 	add.w	r3, r7, #12
 80018da:	2214      	movs	r2, #20
 80018dc:	2100      	movs	r1, #0
 80018de:	4618      	mov	r0, r3
 80018e0:	f007 f890 	bl	8008a04 <memset>
	    i=0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	67fb      	str	r3, [r7, #124]	; 0x7c
	    while(*msg_p != '\0'){
 80018e8:	e00e      	b.n	8001908 <AppTaskStepper+0x13c>
	    	ysteps[i]=*msg_p;
 80018ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018ec:	f993 1000 	ldrsb.w	r1, [r3]
 80018f0:	f107 020c 	add.w	r2, r7, #12
 80018f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018f6:	4413      	add	r3, r2
 80018f8:	460a      	mov	r2, r1
 80018fa:	701a      	strb	r2, [r3, #0]
	   	   	msg_p++;
 80018fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018fe:	3301      	adds	r3, #1
 8001900:	663b      	str	r3, [r7, #96]	; 0x60
	       	i++;
 8001902:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001904:	3301      	adds	r3, #1
 8001906:	67fb      	str	r3, [r7, #124]	; 0x7c
 	    	msg_p++;
   	   	}

	    memset(&ysteps,0,MAX_MSG_LENGTH);
	    i=0;
	    while(*msg_p != '\0'){
 8001908:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800190a:	f993 3000 	ldrsb.w	r3, [r3]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1eb      	bne.n	80018ea <AppTaskStepper+0x11e>
	    	ysteps[i]=*msg_p;
	   	   	msg_p++;
	       	i++;
	    }
	// PLOTT setup
		xtimes = atoi(xsteps);
 8001912:	f107 0320 	add.w	r3, r7, #32
 8001916:	4618      	mov	r0, r3
 8001918:	f007 f848 	bl	80089ac <atoi>
 800191c:	66b8      	str	r0, [r7, #104]	; 0x68
		ytimes = atoi(ysteps);
 800191e:	f107 030c 	add.w	r3, r7, #12
 8001922:	4618      	mov	r0, r3
 8001924:	f007 f842 	bl	80089ac <atoi>
 8001928:	6678      	str	r0, [r7, #100]	; 0x64
		sprintf(msg,"x: %d, y: %d\n",xtimes,ytimes);
 800192a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800192e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001930:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001932:	4973      	ldr	r1, [pc, #460]	; (8001b00 <AppTaskStepper+0x334>)
 8001934:	f007 f904 	bl	8008b40 <sprintf>
		APP_TRACE_INFO(msg);
 8001938:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800193c:	4618      	mov	r0, r3
 800193e:	f007 f8af 	bl	8008aa0 <printf>
		if(xtimes<0){
 8001942:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001944:	2b00      	cmp	r3, #0
 8001946:	da06      	bge.n	8001956 <AppTaskStepper+0x18a>
			xdir=0;
 8001948:	2300      	movs	r3, #0
 800194a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
			xtimes=0-xtimes;
 800194e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001950:	425b      	negs	r3, r3
 8001952:	66bb      	str	r3, [r7, #104]	; 0x68
 8001954:	e002      	b.n	800195c <AppTaskStepper+0x190>
		}else{
			xdir=1;
 8001956:	2301      	movs	r3, #1
 8001958:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
		}
		if(ytimes<0){
 800195c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800195e:	2b00      	cmp	r3, #0
 8001960:	da06      	bge.n	8001970 <AppTaskStepper+0x1a4>
			ydir=0;
 8001962:	2300      	movs	r3, #0
 8001964:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
			ytimes=0-ytimes;
 8001968:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800196a:	425b      	negs	r3, r3
 800196c:	667b      	str	r3, [r7, #100]	; 0x64
 800196e:	e002      	b.n	8001976 <AppTaskStepper+0x1aa>
		}else{
			ydir=1;
 8001970:	2301      	movs	r3, #1
 8001972:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
		}
	//Plott
		if(xtimes==ytimes){ 		// angle of 45 deg
 8001976:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001978:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800197a:	429a      	cmp	r2, r3
 800197c:	d10a      	bne.n	8001994 <AppTaskStepper+0x1c8>
			times=xtimes;
 800197e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001980:	66fb      	str	r3, [r7, #108]	; 0x6c
			diagonal(times,xdir,ydir);
 8001982:	f897 207a 	ldrb.w	r2, [r7, #122]	; 0x7a
 8001986:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800198a:	4619      	mov	r1, r3
 800198c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800198e:	f000 f983 	bl	8001c98 <diagonal>
 8001992:	e0e9      	b.n	8001b68 <AppTaskStepper+0x39c>
		}else if(xtimes==0){		//vertical line
 8001994:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001996:	2b00      	cmp	r3, #0
 8001998:	d112      	bne.n	80019c0 <AppTaskStepper+0x1f4>
			times=ytimes;
 800199a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800199c:	66fb      	str	r3, [r7, #108]	; 0x6c
			while(times!=0){
 800199e:	e00b      	b.n	80019b8 <AppTaskStepper+0x1ec>
				if(ydir){
 80019a0:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d002      	beq.n	80019ae <AppTaskStepper+0x1e2>
					_mcp23s08_step_posy();
 80019a8:	f000 fb04 	bl	8001fb4 <_mcp23s08_step_posy>
 80019ac:	e001      	b.n	80019b2 <AppTaskStepper+0x1e6>
				}else{
					_mcp23s08_step_negy();
 80019ae:	f000 fabd 	bl	8001f2c <_mcp23s08_step_negy>
				}
				times--;
 80019b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019b4:	3b01      	subs	r3, #1
 80019b6:	66fb      	str	r3, [r7, #108]	; 0x6c
		if(xtimes==ytimes){ 		// angle of 45 deg
			times=xtimes;
			diagonal(times,xdir,ydir);
		}else if(xtimes==0){		//vertical line
			times=ytimes;
			while(times!=0){
 80019b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f0      	bne.n	80019a0 <AppTaskStepper+0x1d4>
 80019be:	e0d3      	b.n	8001b68 <AppTaskStepper+0x39c>
				}else{
					_mcp23s08_step_negy();
				}
				times--;
			}
		}else if(ytimes==0){		//horizontal line
 80019c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d112      	bne.n	80019ec <AppTaskStepper+0x220>
			times=xtimes;
 80019c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019c8:	66fb      	str	r3, [r7, #108]	; 0x6c
			while(times!=0){
 80019ca:	e00b      	b.n	80019e4 <AppTaskStepper+0x218>
				if(xdir){
 80019cc:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d002      	beq.n	80019da <AppTaskStepper+0x20e>
					_mcp23s08_step_posx();
 80019d4:	f000 fb32 	bl	800203c <_mcp23s08_step_posx>
 80019d8:	e001      	b.n	80019de <AppTaskStepper+0x212>
				}else{
					_mcp23s08_step_negx();
 80019da:	f000 fb73 	bl	80020c4 <_mcp23s08_step_negx>
				}
				times--;
 80019de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019e0:	3b01      	subs	r3, #1
 80019e2:	66fb      	str	r3, [r7, #108]	; 0x6c
				}
				times--;
			}
		}else if(ytimes==0){		//horizontal line
			times=xtimes;
			while(times!=0){
 80019e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f0      	bne.n	80019cc <AppTaskStepper+0x200>
 80019ea:	e0bd      	b.n	8001b68 <AppTaskStepper+0x39c>
				}else{
					_mcp23s08_step_negx();
				}
				times--;
			}
		}else if(ytimes < xtimes){		//
 80019ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80019ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019f0:	429a      	cmp	r2, r3
 80019f2:	da52      	bge.n	8001a9a <AppTaskStepper+0x2ce>
			times=xtimes;
 80019f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019f6:	66fb      	str	r3, [r7, #108]	; 0x6c
			factor=(double)ytimes/(double)xtimes;
 80019f8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80019fa:	f7fe fdd9 	bl	80005b0 <__aeabi_i2d>
 80019fe:	4604      	mov	r4, r0
 8001a00:	460d      	mov	r5, r1
 8001a02:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001a04:	f7fe fdd4 	bl	80005b0 <__aeabi_i2d>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4620      	mov	r0, r4
 8001a0e:	4629      	mov	r1, r5
 8001a10:	f7fe ff5e 	bl	80008d0 <__aeabi_ddiv>
 8001a14:	4603      	mov	r3, r0
 8001a16:	460c      	mov	r4, r1
 8001a18:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
			ready=0;
 8001a1c:	f04f 0300 	mov.w	r3, #0
 8001a20:	f04f 0400 	mov.w	r4, #0
 8001a24:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
			while(times>0){
 8001a28:	e033      	b.n	8001a92 <AppTaskStepper+0x2c6>
				while(ready < 1){
					if(xdir){
 8001a2a:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d002      	beq.n	8001a38 <AppTaskStepper+0x26c>
						_mcp23s08_step_posx();
 8001a32:	f000 fb03 	bl	800203c <_mcp23s08_step_posx>
 8001a36:	e001      	b.n	8001a3c <AppTaskStepper+0x270>
					}else{
						_mcp23s08_step_negx();
 8001a38:	f000 fb44 	bl	80020c4 <_mcp23s08_step_negx>
					}
					ready= ready + factor;
 8001a3c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001a40:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001a44:	f7fe fc68 	bl	8000318 <__adddf3>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	460c      	mov	r4, r1
 8001a4c:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
					times--;
 8001a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a52:	3b01      	subs	r3, #1
 8001a54:	66fb      	str	r3, [r7, #108]	; 0x6c
		}else if(ytimes < xtimes){		//
			times=xtimes;
			factor=(double)ytimes/(double)xtimes;
			ready=0;
			while(times>0){
				while(ready < 1){
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	4b2a      	ldr	r3, [pc, #168]	; (8001b04 <AppTaskStepper+0x338>)
 8001a5c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001a60:	f7ff f87e 	bl	8000b60 <__aeabi_dcmplt>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1df      	bne.n	8001a2a <AppTaskStepper+0x25e>
						_mcp23s08_step_negx();
					}
					ready= ready + factor;
					times--;
				}
				if(ydir){
 8001a6a:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d002      	beq.n	8001a78 <AppTaskStepper+0x2ac>
					_mcp23s08_step_posy();
 8001a72:	f000 fa9f 	bl	8001fb4 <_mcp23s08_step_posy>
 8001a76:	e001      	b.n	8001a7c <AppTaskStepper+0x2b0>
				}else{
					_mcp23s08_step_negy();
 8001a78:	f000 fa58 	bl	8001f2c <_mcp23s08_step_negy>
				}
				ready = ready-1;
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	4b20      	ldr	r3, [pc, #128]	; (8001b04 <AppTaskStepper+0x338>)
 8001a82:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001a86:	f7fe fc45 	bl	8000314 <__aeabi_dsub>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	460c      	mov	r4, r1
 8001a8e:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
			}
		}else if(ytimes < xtimes){		//
			times=xtimes;
			factor=(double)ytimes/(double)xtimes;
			ready=0;
			while(times>0){
 8001a92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	dcde      	bgt.n	8001a56 <AppTaskStepper+0x28a>
 8001a98:	e066      	b.n	8001b68 <AppTaskStepper+0x39c>
				}else{
					_mcp23s08_step_negy();
				}
				ready = ready-1;
			}
		}else if(xtimes < ytimes){		//too bee continued
 8001a9a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001a9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	da62      	bge.n	8001b68 <AppTaskStepper+0x39c>
			times=ytimes;
 8001aa2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001aa4:	66fb      	str	r3, [r7, #108]	; 0x6c
			factor=(double)xtimes/(double)ytimes;
 8001aa6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001aa8:	f7fe fd82 	bl	80005b0 <__aeabi_i2d>
 8001aac:	4604      	mov	r4, r0
 8001aae:	460d      	mov	r5, r1
 8001ab0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001ab2:	f7fe fd7d 	bl	80005b0 <__aeabi_i2d>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4620      	mov	r0, r4
 8001abc:	4629      	mov	r1, r5
 8001abe:	f7fe ff07 	bl	80008d0 <__aeabi_ddiv>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	460c      	mov	r4, r1
 8001ac6:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
			ready=0;
 8001aca:	f04f 0300 	mov.w	r3, #0
 8001ace:	f04f 0400 	mov.w	r4, #0
 8001ad2:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
			while(times>0){
 8001ad6:	e044      	b.n	8001b62 <AppTaskStepper+0x396>
				while(ready < 1){
					if(ydir){
 8001ad8:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d013      	beq.n	8001b08 <AppTaskStepper+0x33c>
						_mcp23s08_step_posy();
 8001ae0:	f000 fa68 	bl	8001fb4 <_mcp23s08_step_posy>
 8001ae4:	e012      	b.n	8001b0c <AppTaskStepper+0x340>
 8001ae6:	bf00      	nop
 8001ae8:	0800ed6c 	.word	0x0800ed6c
 8001aec:	20001b04 	.word	0x20001b04
 8001af0:	0800ed8c 	.word	0x0800ed8c
 8001af4:	0800eda8 	.word	0x0800eda8
 8001af8:	20001a4c 	.word	0x20001a4c
 8001afc:	0800edc0 	.word	0x0800edc0
 8001b00:	0800eddc 	.word	0x0800eddc
 8001b04:	3ff00000 	.word	0x3ff00000
					}else{
						_mcp23s08_step_negy();
 8001b08:	f000 fa10 	bl	8001f2c <_mcp23s08_step_negy>
					}
					ready= ready + factor;
 8001b0c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001b10:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001b14:	f7fe fc00 	bl	8000318 <__adddf3>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	460c      	mov	r4, r1
 8001b1c:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
					times--;
 8001b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b22:	3b01      	subs	r3, #1
 8001b24:	66fb      	str	r3, [r7, #108]	; 0x6c
		}else if(xtimes < ytimes){		//too bee continued
			times=ytimes;
			factor=(double)xtimes/(double)ytimes;
			ready=0;
			while(times>0){
				while(ready < 1){
 8001b26:	f04f 0200 	mov.w	r2, #0
 8001b2a:	4b28      	ldr	r3, [pc, #160]	; (8001bcc <AppTaskStepper+0x400>)
 8001b2c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001b30:	f7ff f816 	bl	8000b60 <__aeabi_dcmplt>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1ce      	bne.n	8001ad8 <AppTaskStepper+0x30c>
						_mcp23s08_step_negy();
					}
					ready= ready + factor;
					times--;
				}
				if(xdir){
 8001b3a:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d002      	beq.n	8001b48 <AppTaskStepper+0x37c>
					_mcp23s08_step_posx();
 8001b42:	f000 fa7b 	bl	800203c <_mcp23s08_step_posx>
 8001b46:	e001      	b.n	8001b4c <AppTaskStepper+0x380>
				}else{
					_mcp23s08_step_negx();
 8001b48:	f000 fabc 	bl	80020c4 <_mcp23s08_step_negx>
				}
				ready = ready-1;
 8001b4c:	f04f 0200 	mov.w	r2, #0
 8001b50:	4b1e      	ldr	r3, [pc, #120]	; (8001bcc <AppTaskStepper+0x400>)
 8001b52:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001b56:	f7fe fbdd 	bl	8000314 <__aeabi_dsub>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	460c      	mov	r4, r1
 8001b5e:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
			}
		}else if(xtimes < ytimes){		//too bee continued
			times=ytimes;
			factor=(double)xtimes/(double)ytimes;
			ready=0;
			while(times>0){
 8001b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	dcde      	bgt.n	8001b26 <AppTaskStepper+0x35a>
			}
		}


	//DONE
		APP_TRACE_INFO("My current position is: \n");
 8001b68:	4819      	ldr	r0, [pc, #100]	; (8001bd0 <AppTaskStepper+0x404>)
 8001b6a:	f006 ffe1 	bl	8008b30 <puts>
		sprintf(msg,"x: %d , y: %d \n", x_c, y_c);
 8001b6e:	4b19      	ldr	r3, [pc, #100]	; (8001bd4 <AppTaskStepper+0x408>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <AppTaskStepper+0x40c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001b7a:	4918      	ldr	r1, [pc, #96]	; (8001bdc <AppTaskStepper+0x410>)
 8001b7c:	f006 ffe0 	bl	8008b40 <sprintf>
		APP_TRACE_INFO(msg);
 8001b80:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b84:	4618      	mov	r0, r3
 8001b86:	f006 ff8b 	bl	8008aa0 <printf>


	    q_msg = (CPU_CHAR *) OSMemGet (&Mem_Partition1, &err);
 8001b8a:	f107 034a 	add.w	r3, r7, #74	; 0x4a
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4813      	ldr	r0, [pc, #76]	; (8001be0 <AppTaskStepper+0x414>)
 8001b92:	f004 fb11 	bl	80061b8 <OSMemGet>
 8001b96:	6578      	str	r0, [r7, #84]	; 0x54
	    if (err != OS_ERR_NONE)
 8001b98:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d002      	beq.n	8001ba6 <AppTaskStepper+0x3da>
	    	APP_TRACE_DBG ("Error OSMemGet1: TaskSTePY\n");
 8001ba0:	4810      	ldr	r0, [pc, #64]	; (8001be4 <AppTaskStepper+0x418>)
 8001ba2:	f006 ffc5 	bl	8008b30 <puts>
	    OSQPost ( 	(OS_Q      *) &Q_STEP_2,
 8001ba6:	f107 034a 	add.w	r3, r7, #74	; 0x4a
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	2300      	movs	r3, #0
 8001bae:	2214      	movs	r2, #20
 8001bb0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001bb2:	480d      	ldr	r0, [pc, #52]	; (8001be8 <AppTaskStepper+0x41c>)
 8001bb4:	f000 fe24 	bl	8002800 <OSQPost>
	         		(void      *) q_msg,
	    	       	(OS_MSG_SIZE) MAX_MSG_LENGTH,
	    	       	(OS_OPT)      OS_OPT_POST_FIFO,
	    	        (OS_ERR    *) &err);
	   	if (err != OS_ERR_NONE)
 8001bb8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f43f ae28 	beq.w	8001812 <AppTaskStepper+0x46>
	   		APP_TRACE_DBG ("Error OSQPost1: TaskSTePY\n");
 8001bc2:	480a      	ldr	r0, [pc, #40]	; (8001bec <AppTaskStepper+0x420>)
 8001bc4:	f006 ffb4 	bl	8008b30 <puts>
	}//Whileend
 8001bc8:	e623      	b.n	8001812 <AppTaskStepper+0x46>
 8001bca:	bf00      	nop
 8001bcc:	3ff00000 	.word	0x3ff00000
 8001bd0:	0800edec 	.word	0x0800edec
 8001bd4:	20001824 	.word	0x20001824
 8001bd8:	20001828 	.word	0x20001828
 8001bdc:	0800ee08 	.word	0x0800ee08
 8001be0:	20001ab0 	.word	0x20001ab0
 8001be4:	0800ee18 	.word	0x0800ee18
 8001be8:	20001a80 	.word	0x20001a80
 8001bec:	0800ee34 	.word	0x0800ee34

08001bf0 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c00:	78fb      	ldrb	r3, [r7, #3]
 8001c02:	fa22 f303 	lsr.w	r3, r2, r3
 8001c06:	f003 0301 	and.w	r3, r3, #1
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <debounce>:




//_________________________________DEBOUNCE
_Bool debounce(int port,  int pin){
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
	//CPU_INT08U i=2;
	CPU_INT08U f_press=0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	73fb      	strb	r3, [r7, #15]
	//CPU_INT08U press=0;
	//OS_ERR      err;
	f_press=XMC_GPIO_GetInput((XMC_GPIO_PORT_t *const) port,(const uint8_t)pin);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	4611      	mov	r1, r2
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff ffe0 	bl	8001bf0 <XMC_GPIO_GetInput>
 8001c30:	4603      	mov	r3, r0
 8001c32:	73fb      	strb	r3, [r7, #15]
						OS_OPT_TIME_HMSM_STRICT ,
			       		&err);
  		if (err != OS_ERR_NONE)
  			return 3;
	}*/
	return f_press;
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	bf14      	ite	ne
 8001c3a:	2301      	movne	r3, #1
 8001c3c:	2300      	moveq	r3, #0
 8001c3e:	b2db      	uxtb	r3, r3
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <pen_up>:

void pen_up(void){
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af02      	add	r7, sp, #8
	OS_ERR      err;

	CCU40_0_SetCapture(2);
 8001c4e:	2002      	movs	r0, #2
 8001c50:	f004 ff8c 	bl	8006b6c <CCU40_0_SetCapture>
	OSTimeDlyHMSM  (0,
 8001c54:	1dbb      	adds	r3, r7, #6
 8001c56:	9301      	str	r3, [sp, #4]
 8001c58:	2300      	movs	r3, #0
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	2201      	movs	r2, #1
 8001c60:	2100      	movs	r1, #0
 8001c62:	2000      	movs	r0, #0
 8001c64:	f003 fcf6 	bl	8005654 <OSTimeDlyHMSM>
				   	0,
					1,
	 	    		0,
					OS_OPT_TIME_HMSM_STRICT ,
				    &err);
}
 8001c68:	bf00      	nop
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <pen_down>:

void pen_down(void){
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af02      	add	r7, sp, #8
	OS_ERR      err;

	CCU40_0_SetCapture(1);
 8001c76:	2001      	movs	r0, #1
 8001c78:	f004 ff78 	bl	8006b6c <CCU40_0_SetCapture>
	OSTimeDlyHMSM  (0,
 8001c7c:	1dbb      	adds	r3, r7, #6
 8001c7e:	9301      	str	r3, [sp, #4]
 8001c80:	2300      	movs	r3, #0
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	2300      	movs	r3, #0
 8001c86:	2201      	movs	r2, #1
 8001c88:	2100      	movs	r1, #0
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	f003 fce2 	bl	8005654 <OSTimeDlyHMSM>
				   	0,
					1,
					0,
					OS_OPT_TIME_HMSM_STRICT ,
				    &err);
}
 8001c90:	bf00      	nop
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <diagonal>:

void diagonal(int times,_Bool xdir,_Bool ydir){
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	70fb      	strb	r3, [r7, #3]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	70bb      	strb	r3, [r7, #2]
	while(times--){
 8001ca8:	e00f      	b.n	8001cca <diagonal+0x32>
		if(xdir){
 8001caa:	78fb      	ldrb	r3, [r7, #3]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d002      	beq.n	8001cb6 <diagonal+0x1e>
			_mcp23s08_step_posx();
 8001cb0:	f000 f9c4 	bl	800203c <_mcp23s08_step_posx>
 8001cb4:	e001      	b.n	8001cba <diagonal+0x22>
		}else{
			_mcp23s08_step_negx();
 8001cb6:	f000 fa05 	bl	80020c4 <_mcp23s08_step_negx>
		}
		if(ydir){
 8001cba:	78bb      	ldrb	r3, [r7, #2]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d002      	beq.n	8001cc6 <diagonal+0x2e>
			_mcp23s08_step_posy();
 8001cc0:	f000 f978 	bl	8001fb4 <_mcp23s08_step_posy>
 8001cc4:	e001      	b.n	8001cca <diagonal+0x32>
		}else{
			_mcp23s08_step_negy();
 8001cc6:	f000 f931 	bl	8001f2c <_mcp23s08_step_negy>
					OS_OPT_TIME_HMSM_STRICT ,
				    &err);
}

void diagonal(int times,_Bool xdir,_Bool ydir){
	while(times--){
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	1e5a      	subs	r2, r3, #1
 8001cce:	607a      	str	r2, [r7, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d1ea      	bne.n	8001caa <diagonal+0x12>
			_mcp23s08_step_posy();
		}else{
			_mcp23s08_step_negy();
		}
	}
}
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <drawline>:

void drawline(int x, int y){
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b088      	sub	sp, #32
 8001ce0:	af02      	add	r7, sp, #8
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
	extern OS_MEM      Mem_Partition2;
	extern OS_Q        Q_STEP_1;
	extern OS_Q        Q_STEP_2;


	p_msg = (CPU_CHAR *) OSMemGet (&Mem_Partition2, &err);
 8001ce6:	f107 0312 	add.w	r3, r7, #18
 8001cea:	4619      	mov	r1, r3
 8001cec:	482d      	ldr	r0, [pc, #180]	; (8001da4 <drawline+0xc8>)
 8001cee:	f004 fa63 	bl	80061b8 <OSMemGet>
 8001cf2:	6178      	str	r0, [r7, #20]
	if (err != OS_ERR_NONE)
 8001cf4:	8a7b      	ldrh	r3, [r7, #18]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d002      	beq.n	8001d00 <drawline+0x24>
		APP_TRACE_DBG ("Error OSMemGet1: AppTaskCom\n");
 8001cfa:	482b      	ldr	r0, [pc, #172]	; (8001da8 <drawline+0xcc>)
 8001cfc:	f006 ff18 	bl	8008b30 <puts>
	APP_TRACE_INFO ("Msg send to Step Task: \n");
 8001d00:	482a      	ldr	r0, [pc, #168]	; (8001dac <drawline+0xd0>)
 8001d02:	f006 ff15 	bl	8008b30 <puts>
	sprintf(p_msg,"x: %d , y: %d\n",x,y);
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	4929      	ldr	r1, [pc, #164]	; (8001db0 <drawline+0xd4>)
 8001d0c:	6978      	ldr	r0, [r7, #20]
 8001d0e:	f006 ff17 	bl	8008b40 <sprintf>
	APP_TRACE_INFO (p_msg);
 8001d12:	6978      	ldr	r0, [r7, #20]
 8001d14:	f006 fec4 	bl	8008aa0 <printf>
	memset(p_msg,0,20);
 8001d18:	2214      	movs	r2, #20
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	6978      	ldr	r0, [r7, #20]
 8001d1e:	f006 fe71 	bl	8008a04 <memset>
	sprintf(p_msg,"%d:%d",x,y);
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	4923      	ldr	r1, [pc, #140]	; (8001db4 <drawline+0xd8>)
 8001d28:	6978      	ldr	r0, [r7, #20]
 8001d2a:	f006 ff09 	bl	8008b40 <sprintf>

	OSQPost ( 	(OS_Q      *) &Q_STEP_1,
 8001d2e:	f107 0312 	add.w	r3, r7, #18
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	2300      	movs	r3, #0
 8001d36:	2214      	movs	r2, #20
 8001d38:	6979      	ldr	r1, [r7, #20]
 8001d3a:	481f      	ldr	r0, [pc, #124]	; (8001db8 <drawline+0xdc>)
 8001d3c:	f000 fd60 	bl	8002800 <OSQPost>
			(void      *) p_msg,
			(OS_MSG_SIZE) MAX_MSG_LENGTH,
			(OS_OPT)      OS_OPT_POST_FIFO,
			(OS_ERR    *) &err);
	if (err != OS_ERR_NONE)
 8001d40:	8a7b      	ldrh	r3, [r7, #18]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d002      	beq.n	8001d4c <drawline+0x70>
		APP_TRACE_DBG ("Error OSQPost1: AppTaskCom\n");
 8001d46:	481d      	ldr	r0, [pc, #116]	; (8001dbc <drawline+0xe0>)
 8001d48:	f006 fef2 	bl	8008b30 <puts>


	// Check if dones
	APP_TRACE_INFO ("Whait for endinf plott\n");
 8001d4c:	481c      	ldr	r0, [pc, #112]	; (8001dc0 <drawline+0xe4>)
 8001d4e:	f006 feef 	bl	8008b30 <puts>

	OSQPend (&Q_STEP_2,
 8001d52:	f107 0210 	add.w	r2, r7, #16
 8001d56:	f107 0312 	add.w	r3, r7, #18
 8001d5a:	9301      	str	r3, [sp, #4]
 8001d5c:	f107 030c 	add.w	r3, r7, #12
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	4613      	mov	r3, r2
 8001d64:	2200      	movs	r2, #0
 8001d66:	2100      	movs	r1, #0
 8001d68:	4816      	ldr	r0, [pc, #88]	; (8001dc4 <drawline+0xe8>)
 8001d6a:	f000 fc51 	bl	8002610 <OSQPend>
			0,
			OS_OPT_PEND_BLOCKING,
			&msg_size,
			&ts,
			&err);
	if (err != OS_ERR_NONE)
 8001d6e:	8a7b      	ldrh	r3, [r7, #18]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d002      	beq.n	8001d7a <drawline+0x9e>
	  	 APP_TRACE_DBG ("Error OSQPend1: AppSTEPY\n");
 8001d74:	4814      	ldr	r0, [pc, #80]	; (8001dc8 <drawline+0xec>)
 8001d76:	f006 fedb 	bl	8008b30 <puts>
	OSMemPut (&Mem_Partition1, p_msg, &err);
 8001d7a:	f107 0312 	add.w	r3, r7, #18
 8001d7e:	461a      	mov	r2, r3
 8001d80:	6979      	ldr	r1, [r7, #20]
 8001d82:	4812      	ldr	r0, [pc, #72]	; (8001dcc <drawline+0xf0>)
 8001d84:	f004 fa50 	bl	8006228 <OSMemPut>
	if (err != OS_ERR_NONE)
 8001d88:	8a7b      	ldrh	r3, [r7, #18]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d002      	beq.n	8001d94 <drawline+0xb8>
		APP_TRACE_DBG ("Error OSQPut: drawline\n");
 8001d8e:	4810      	ldr	r0, [pc, #64]	; (8001dd0 <drawline+0xf4>)
 8001d90:	f006 fece 	bl	8008b30 <puts>

	APP_TRACE_INFO ("Plot at right position!\n");
 8001d94:	480f      	ldr	r0, [pc, #60]	; (8001dd4 <drawline+0xf8>)
 8001d96:	f006 fecb 	bl	8008b30 <puts>
}
 8001d9a:	bf00      	nop
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20001a4c 	.word	0x20001a4c
 8001da8:	0800ee50 	.word	0x0800ee50
 8001dac:	0800ee6c 	.word	0x0800ee6c
 8001db0:	0800ee84 	.word	0x0800ee84
 8001db4:	0800ee94 	.word	0x0800ee94
 8001db8:	20001b04 	.word	0x20001b04
 8001dbc:	0800ee9c 	.word	0x0800ee9c
 8001dc0:	0800eeb8 	.word	0x0800eeb8
 8001dc4:	20001a80 	.word	0x20001a80
 8001dc8:	0800eed0 	.word	0x0800eed0
 8001dcc:	20001ab0 	.word	0x20001ab0
 8001dd0:	0800eeec 	.word	0x0800eeec
 8001dd4:	0800ef04 	.word	0x0800ef04

08001dd8 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	460b      	mov	r3, r1
 8001de2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8001de4:	78fb      	ldrb	r3, [r7, #3]
 8001de6:	2201      	movs	r2, #1
 8001de8:	409a      	lsls	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	605a      	str	r2, [r3, #4]
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr

08001df8 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8001e04:	78fb      	ldrb	r3, [r7, #3]
 8001e06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e0a:	409a      	lsls	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	605a      	str	r2, [r3, #4]
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bc80      	pop	{r7}
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop

08001e1c <_mcp23s08_reset_ss>:
 *  @param XMC_GPIO_PORT_t *const port, const uint8_t pin
 *  @return on success this function returns MCP23S08_OK (0) otherwise it check
 *  the given port on validity
 */
uint8_t _mcp23s08_reset_ss(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	460b      	mov	r3, r1
 8001e26:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));

  XMC_GPIO_SetOutputLow(port,pin);
 8001e28:	78fb      	ldrb	r3, [r7, #3]
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7ff ffe3 	bl	8001df8 <XMC_GPIO_SetOutputLow>

  return MCP23S08_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <_mcp23s08_set_ss>:
 *  @param XMC_GPIO_PORT_t *const port, const uint8_t pin
 *  @return on success this function returns MCP23S08_OK (0) otherwise it check
 *  the given port on validity
 */
uint8_t _mcp23s08_set_ss(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));

  XMC_GPIO_SetOutputHigh(port,pin);
 8001e48:	78fb      	ldrb	r3, [r7, #3]
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff ffc3 	bl	8001dd8 <XMC_GPIO_SetOutputHigh>

  return MCP23S08_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <_mcp23s08_reset>:
 *  @brief This function toggles the reset for the MCP23S08
 *  @param XMC_GPIO_PORT_t *const port, const uint8_t pin
 *  @return on success this function returns MCP23S08_OK (0)
 */
uint8_t _mcp23s08_reset(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  XMC_GPIO_SetOutputLow(MCP23S08_RESET);
 8001e60:	210c      	movs	r1, #12
 8001e62:	4805      	ldr	r0, [pc, #20]	; (8001e78 <_mcp23s08_reset+0x1c>)
 8001e64:	f7ff ffc8 	bl	8001df8 <XMC_GPIO_SetOutputLow>
  XMC_GPIO_SetOutputHigh(MCP23S08_RESET);
 8001e68:	210c      	movs	r1, #12
 8001e6a:	4803      	ldr	r0, [pc, #12]	; (8001e78 <_mcp23s08_reset+0x1c>)
 8001e6c:	f7ff ffb4 	bl	8001dd8 <XMC_GPIO_SetOutputHigh>

  return MCP23S08_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	48028000 	.word	0x48028000

08001e7c <_mcp23s08_reg_xfer>:
 *		   data ...... content of the register
 *		   rd_wr ..... read/write
 *  @return on success this function returns MCP23S08_OK (0)
 */
uint8_t _mcp23s08_reg_xfer(XMC_USIC_CH_t *const channel, uint8_t reg_name, uint8_t data, uint8_t rd_wr)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	4608      	mov	r0, r1
 8001e86:	4611      	mov	r1, r2
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	70fb      	strb	r3, [r7, #3]
 8001e8e:	460b      	mov	r3, r1
 8001e90:	70bb      	strb	r3, [r7, #2]
 8001e92:	4613      	mov	r3, r2
 8001e94:	707b      	strb	r3, [r7, #1]
  uint8_t recv = 0, mcp23s08_addr_rd = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	73fb      	strb	r3, [r7, #15]
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	73bb      	strb	r3, [r7, #14]

  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if(rd_wr)
 8001e9e:	787b      	ldrb	r3, [r7, #1]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d020      	beq.n	8001ee6 <_mcp23s08_reg_xfer+0x6a>
  {
	mcp23s08_addr_rd = mcp23s08_addr|MCP23S08_RD;
 8001ea4:	4b1f      	ldr	r3, [pc, #124]	; (8001f24 <_mcp23s08_reg_xfer+0xa8>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	73bb      	strb	r3, [r7, #14]

	_spi_transmit(channel,mcp23s08_addr_rd);
 8001eae:	7bbb      	ldrb	r3, [r7, #14]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f005 fbf8 	bl	80076a8 <_spi_transmit>
	_spi_receive(channel);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f005 fc15 	bl	80076e8 <_spi_receive>

	_spi_transmit(channel,reg_name);
 8001ebe:	78fb      	ldrb	r3, [r7, #3]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f005 fbf0 	bl	80076a8 <_spi_transmit>
	_spi_receive(channel);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f005 fc0d 	bl	80076e8 <_spi_receive>

	_spi_transmit(channel,mcp23s08_nop);
 8001ece:	4b16      	ldr	r3, [pc, #88]	; (8001f28 <_mcp23s08_reg_xfer+0xac>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f005 fbe7 	bl	80076a8 <_spi_transmit>
	recv = _spi_receive(channel);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f005 fc04 	bl	80076e8 <_spi_receive>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	73fb      	strb	r3, [r7, #15]
 8001ee4:	e018      	b.n	8001f18 <_mcp23s08_reg_xfer+0x9c>

  }
  else
  {
	_spi_transmit(channel,mcp23s08_addr);
 8001ee6:	4b0f      	ldr	r3, [pc, #60]	; (8001f24 <_mcp23s08_reg_xfer+0xa8>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	4619      	mov	r1, r3
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f005 fbdb 	bl	80076a8 <_spi_transmit>
	_spi_receive(channel);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f005 fbf8 	bl	80076e8 <_spi_receive>

	_spi_transmit(channel,reg_name);
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	4619      	mov	r1, r3
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f005 fbd3 	bl	80076a8 <_spi_transmit>
	_spi_receive(channel);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f005 fbf0 	bl	80076e8 <_spi_receive>

	_spi_transmit(channel,data);
 8001f08:	78bb      	ldrb	r3, [r7, #2]
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f005 fbcb 	bl	80076a8 <_spi_transmit>
	_spi_receive(channel);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f005 fbe8 	bl	80076e8 <_spi_receive>
  }

  return recv;
 8001f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20000000 	.word	0x20000000
 8001f28:	20001820 	.word	0x20001820

08001f2c <_mcp23s08_step_negy>:

uint8_t _mcp23s08_step_negy(void){
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
	//uint8_t reg_val;

	if(debounce(ENDSTOP1)){
 8001f30:	210f      	movs	r1, #15
 8001f32:	481d      	ldr	r0, [pc, #116]	; (8001fa8 <_mcp23s08_step_negy+0x7c>)
 8001f34:	f7ff fe6e 	bl	8001c14 <debounce>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d030      	beq.n	8001fa0 <_mcp23s08_step_negy+0x74>
		//_mcp23s08_reset_ss(MCP23S08_SS);
		//reg_val = _mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,0,MCP23S08_RD);
		//_mcp23s08_set_ss(MCP23S08_SS);

		_mcp23s08_reset_ss(MCP23S08_SS);
 8001f3e:	2102      	movs	r1, #2
 8001f40:	4819      	ldr	r0, [pc, #100]	; (8001fa8 <_mcp23s08_step_negy+0x7c>)
 8001f42:	f7ff ff6b 	bl	8001e1c <_mcp23s08_reset_ss>
		_mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,0x00,MCP23S08_WR);
 8001f46:	2300      	movs	r3, #0
 8001f48:	2200      	movs	r2, #0
 8001f4a:	2109      	movs	r1, #9
 8001f4c:	4817      	ldr	r0, [pc, #92]	; (8001fac <_mcp23s08_step_negy+0x80>)
 8001f4e:	f7ff ff95 	bl	8001e7c <_mcp23s08_reg_xfer>
		_mcp23s08_set_ss(MCP23S08_SS);
 8001f52:	2102      	movs	r1, #2
 8001f54:	4814      	ldr	r0, [pc, #80]	; (8001fa8 <_mcp23s08_step_negy+0x7c>)
 8001f56:	f7ff ff71 	bl	8001e3c <_mcp23s08_set_ss>

		_mcp23s08_reset_ss(MCP23S08_SS);
 8001f5a:	2102      	movs	r1, #2
 8001f5c:	4812      	ldr	r0, [pc, #72]	; (8001fa8 <_mcp23s08_step_negy+0x7c>)
 8001f5e:	f7ff ff5d 	bl	8001e1c <_mcp23s08_reset_ss>
		_mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,0x02,MCP23S08_WR);
 8001f62:	2300      	movs	r3, #0
 8001f64:	2202      	movs	r2, #2
 8001f66:	2109      	movs	r1, #9
 8001f68:	4810      	ldr	r0, [pc, #64]	; (8001fac <_mcp23s08_step_negy+0x80>)
 8001f6a:	f7ff ff87 	bl	8001e7c <_mcp23s08_reg_xfer>
		_mcp23s08_set_ss(MCP23S08_SS);
 8001f6e:	2102      	movs	r1, #2
 8001f70:	480d      	ldr	r0, [pc, #52]	; (8001fa8 <_mcp23s08_step_negy+0x7c>)
 8001f72:	f7ff ff63 	bl	8001e3c <_mcp23s08_set_ss>
		//APP_TRACE_INFO ("PLOTTERSTEP HIGH...\n");
		//_mcp23s08_reset_ss(MCP23S08_SS);
		//reg_val = _mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,0,MCP23S08_RD);
		//_mcp23s08_set_ss(MCP23S08_SS);

		_mcp23s08_reset_ss(MCP23S08_SS);
 8001f76:	2102      	movs	r1, #2
 8001f78:	480b      	ldr	r0, [pc, #44]	; (8001fa8 <_mcp23s08_step_negy+0x7c>)
 8001f7a:	f7ff ff4f 	bl	8001e1c <_mcp23s08_reset_ss>
		_mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,0,MCP23S08_WR);
 8001f7e:	2300      	movs	r3, #0
 8001f80:	2200      	movs	r2, #0
 8001f82:	2109      	movs	r1, #9
 8001f84:	4809      	ldr	r0, [pc, #36]	; (8001fac <_mcp23s08_step_negy+0x80>)
 8001f86:	f7ff ff79 	bl	8001e7c <_mcp23s08_reg_xfer>
		_mcp23s08_set_ss(MCP23S08_SS);
 8001f8a:	2102      	movs	r1, #2
 8001f8c:	4806      	ldr	r0, [pc, #24]	; (8001fa8 <_mcp23s08_step_negy+0x7c>)
 8001f8e:	f7ff ff55 	bl	8001e3c <_mcp23s08_set_ss>
		y_c--;
 8001f92:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <_mcp23s08_step_negy+0x84>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	3b01      	subs	r3, #1
 8001f98:	4a05      	ldr	r2, [pc, #20]	; (8001fb0 <_mcp23s08_step_negy+0x84>)
 8001f9a:	6013      	str	r3, [r2, #0]
		return 1;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e000      	b.n	8001fa2 <_mcp23s08_step_negy+0x76>
	}else{
		return 0;
 8001fa0:	2300      	movs	r3, #0
	}
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	48028100 	.word	0x48028100
 8001fac:	48020000 	.word	0x48020000
 8001fb0:	20001828 	.word	0x20001828

08001fb4 <_mcp23s08_step_posy>:


uint8_t _mcp23s08_step_posy(void){
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
	//uint8_t reg_val;

	if(debounce(ENDSTOP2)){
 8001fb8:	210d      	movs	r1, #13
 8001fba:	481d      	ldr	r0, [pc, #116]	; (8002030 <_mcp23s08_step_posy+0x7c>)
 8001fbc:	f7ff fe2a 	bl	8001c14 <debounce>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d030      	beq.n	8002028 <_mcp23s08_step_posy+0x74>
		//_mcp23s08_reset_ss(MCP23S08_SS);
		//reg_val = _mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,0,MCP23S08_RD);
		//_mcp23s08_set_ss(MCP23S08_SS);
		_mcp23s08_reset_ss(MCP23S08_SS);
 8001fc6:	2102      	movs	r1, #2
 8001fc8:	4819      	ldr	r0, [pc, #100]	; (8002030 <_mcp23s08_step_posy+0x7c>)
 8001fca:	f7ff ff27 	bl	8001e1c <_mcp23s08_reset_ss>
		_mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,0x01,MCP23S08_WR);
 8001fce:	2300      	movs	r3, #0
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	2109      	movs	r1, #9
 8001fd4:	4817      	ldr	r0, [pc, #92]	; (8002034 <_mcp23s08_step_posy+0x80>)
 8001fd6:	f7ff ff51 	bl	8001e7c <_mcp23s08_reg_xfer>
		_mcp23s08_set_ss(MCP23S08_SS);
 8001fda:	2102      	movs	r1, #2
 8001fdc:	4814      	ldr	r0, [pc, #80]	; (8002030 <_mcp23s08_step_posy+0x7c>)
 8001fde:	f7ff ff2d 	bl	8001e3c <_mcp23s08_set_ss>

		_mcp23s08_reset_ss(MCP23S08_SS);
 8001fe2:	2102      	movs	r1, #2
 8001fe4:	4812      	ldr	r0, [pc, #72]	; (8002030 <_mcp23s08_step_posy+0x7c>)
 8001fe6:	f7ff ff19 	bl	8001e1c <_mcp23s08_reset_ss>
		_mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,0x3,MCP23S08_WR);
 8001fea:	2300      	movs	r3, #0
 8001fec:	2203      	movs	r2, #3
 8001fee:	2109      	movs	r1, #9
 8001ff0:	4810      	ldr	r0, [pc, #64]	; (8002034 <_mcp23s08_step_posy+0x80>)
 8001ff2:	f7ff ff43 	bl	8001e7c <_mcp23s08_reg_xfer>
		_mcp23s08_set_ss(MCP23S08_SS);
 8001ff6:	2102      	movs	r1, #2
 8001ff8:	480d      	ldr	r0, [pc, #52]	; (8002030 <_mcp23s08_step_posy+0x7c>)
 8001ffa:	f7ff ff1f 	bl	8001e3c <_mcp23s08_set_ss>
		//APP_TRACE_INFO ("PLOTTERSTEP HIGH...\n");
		//_mcp23s08_reset_ss(MCP23S08_SS);
		//reg_val = _mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,0,MCP23S08_RD);
		//_mcp23s08_set_ss(MCP23S08_SS);

		_mcp23s08_reset_ss(MCP23S08_SS);
 8001ffe:	2102      	movs	r1, #2
 8002000:	480b      	ldr	r0, [pc, #44]	; (8002030 <_mcp23s08_step_posy+0x7c>)
 8002002:	f7ff ff0b 	bl	8001e1c <_mcp23s08_reset_ss>
		_mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,0x1,MCP23S08_WR);
 8002006:	2300      	movs	r3, #0
 8002008:	2201      	movs	r2, #1
 800200a:	2109      	movs	r1, #9
 800200c:	4809      	ldr	r0, [pc, #36]	; (8002034 <_mcp23s08_step_posy+0x80>)
 800200e:	f7ff ff35 	bl	8001e7c <_mcp23s08_reg_xfer>
		_mcp23s08_set_ss(MCP23S08_SS);
 8002012:	2102      	movs	r1, #2
 8002014:	4806      	ldr	r0, [pc, #24]	; (8002030 <_mcp23s08_step_posy+0x7c>)
 8002016:	f7ff ff11 	bl	8001e3c <_mcp23s08_set_ss>
		y_c++;
 800201a:	4b07      	ldr	r3, [pc, #28]	; (8002038 <_mcp23s08_step_posy+0x84>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	3301      	adds	r3, #1
 8002020:	4a05      	ldr	r2, [pc, #20]	; (8002038 <_mcp23s08_step_posy+0x84>)
 8002022:	6013      	str	r3, [r2, #0]
		return 1;
 8002024:	2301      	movs	r3, #1
 8002026:	e000      	b.n	800202a <_mcp23s08_step_posy+0x76>
	}else{
		return 0;
 8002028:	2300      	movs	r3, #0
	}
}
 800202a:	4618      	mov	r0, r3
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	48028100 	.word	0x48028100
 8002034:	48020000 	.word	0x48020000
 8002038:	20001828 	.word	0x20001828

0800203c <_mcp23s08_step_posx>:


uint8_t _mcp23s08_step_posx(void){
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
	//uint8_t reg_val;

	if(debounce(ENDSTOP4)){
 8002040:	210c      	movs	r1, #12
 8002042:	481d      	ldr	r0, [pc, #116]	; (80020b8 <_mcp23s08_step_posx+0x7c>)
 8002044:	f7ff fde6 	bl	8001c14 <debounce>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d030      	beq.n	80020b0 <_mcp23s08_step_posx+0x74>

		//_mcp23s08_reset_ss(MCP23S08_SS);
		//reg_val = _mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,0,MCP23S08_RD);
		//_mcp23s08_set_ss(MCP23S08_SS);
		_mcp23s08_reset_ss(MCP23S08_SS);
 800204e:	2102      	movs	r1, #2
 8002050:	4819      	ldr	r0, [pc, #100]	; (80020b8 <_mcp23s08_step_posx+0x7c>)
 8002052:	f7ff fee3 	bl	8001e1c <_mcp23s08_reset_ss>
		_mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,0x04,MCP23S08_WR);
 8002056:	2300      	movs	r3, #0
 8002058:	2204      	movs	r2, #4
 800205a:	2109      	movs	r1, #9
 800205c:	4817      	ldr	r0, [pc, #92]	; (80020bc <_mcp23s08_step_posx+0x80>)
 800205e:	f7ff ff0d 	bl	8001e7c <_mcp23s08_reg_xfer>
		_mcp23s08_set_ss(MCP23S08_SS);
 8002062:	2102      	movs	r1, #2
 8002064:	4814      	ldr	r0, [pc, #80]	; (80020b8 <_mcp23s08_step_posx+0x7c>)
 8002066:	f7ff fee9 	bl	8001e3c <_mcp23s08_set_ss>

		_mcp23s08_reset_ss(MCP23S08_SS);
 800206a:	2102      	movs	r1, #2
 800206c:	4812      	ldr	r0, [pc, #72]	; (80020b8 <_mcp23s08_step_posx+0x7c>)
 800206e:	f7ff fed5 	bl	8001e1c <_mcp23s08_reset_ss>
		_mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,0xC,MCP23S08_WR);
 8002072:	2300      	movs	r3, #0
 8002074:	220c      	movs	r2, #12
 8002076:	2109      	movs	r1, #9
 8002078:	4810      	ldr	r0, [pc, #64]	; (80020bc <_mcp23s08_step_posx+0x80>)
 800207a:	f7ff feff 	bl	8001e7c <_mcp23s08_reg_xfer>
		_mcp23s08_set_ss(MCP23S08_SS);
 800207e:	2102      	movs	r1, #2
 8002080:	480d      	ldr	r0, [pc, #52]	; (80020b8 <_mcp23s08_step_posx+0x7c>)
 8002082:	f7ff fedb 	bl	8001e3c <_mcp23s08_set_ss>

		//_mcp23s08_reset_ss(MCP23S08_SS);
		//reg_val = _mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,0,MCP23S08_RD);
		//_mcp23s08_set_ss(MCP23S08_SS);

		_mcp23s08_reset_ss(MCP23S08_SS);
 8002086:	2102      	movs	r1, #2
 8002088:	480b      	ldr	r0, [pc, #44]	; (80020b8 <_mcp23s08_step_posx+0x7c>)
 800208a:	f7ff fec7 	bl	8001e1c <_mcp23s08_reset_ss>
		_mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,0x4,MCP23S08_WR);
 800208e:	2300      	movs	r3, #0
 8002090:	2204      	movs	r2, #4
 8002092:	2109      	movs	r1, #9
 8002094:	4809      	ldr	r0, [pc, #36]	; (80020bc <_mcp23s08_step_posx+0x80>)
 8002096:	f7ff fef1 	bl	8001e7c <_mcp23s08_reg_xfer>
		_mcp23s08_set_ss(MCP23S08_SS);
 800209a:	2102      	movs	r1, #2
 800209c:	4806      	ldr	r0, [pc, #24]	; (80020b8 <_mcp23s08_step_posx+0x7c>)
 800209e:	f7ff fecd 	bl	8001e3c <_mcp23s08_set_ss>
		x_c++;
 80020a2:	4b07      	ldr	r3, [pc, #28]	; (80020c0 <_mcp23s08_step_posx+0x84>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	3301      	adds	r3, #1
 80020a8:	4a05      	ldr	r2, [pc, #20]	; (80020c0 <_mcp23s08_step_posx+0x84>)
 80020aa:	6013      	str	r3, [r2, #0]
		return 1;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e000      	b.n	80020b2 <_mcp23s08_step_posx+0x76>
	}else{
		return 0;
 80020b0:	2300      	movs	r3, #0
	}
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	48028100 	.word	0x48028100
 80020bc:	48020000 	.word	0x48020000
 80020c0:	20001824 	.word	0x20001824

080020c4 <_mcp23s08_step_negx>:

uint8_t _mcp23s08_step_negx(void){
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
	//uint8_t reg_val;

	if(debounce(ENDSTOP3)){
 80020c8:	210e      	movs	r1, #14
 80020ca:	481d      	ldr	r0, [pc, #116]	; (8002140 <_mcp23s08_step_negx+0x7c>)
 80020cc:	f7ff fda2 	bl	8001c14 <debounce>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d030      	beq.n	8002138 <_mcp23s08_step_negx+0x74>
		//_mcp23s08_reset_ss(MCP23S08_SS);
		//reg_val = _mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,0,MCP23S08_RD);
		//_mcp23s08_set_ss(MCP23S08_SS);
		_mcp23s08_reset_ss(MCP23S08_SS);
 80020d6:	2102      	movs	r1, #2
 80020d8:	4819      	ldr	r0, [pc, #100]	; (8002140 <_mcp23s08_step_negx+0x7c>)
 80020da:	f7ff fe9f 	bl	8001e1c <_mcp23s08_reset_ss>
		_mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,0x00,MCP23S08_WR);
 80020de:	2300      	movs	r3, #0
 80020e0:	2200      	movs	r2, #0
 80020e2:	2109      	movs	r1, #9
 80020e4:	4817      	ldr	r0, [pc, #92]	; (8002144 <_mcp23s08_step_negx+0x80>)
 80020e6:	f7ff fec9 	bl	8001e7c <_mcp23s08_reg_xfer>
		_mcp23s08_set_ss(MCP23S08_SS);
 80020ea:	2102      	movs	r1, #2
 80020ec:	4814      	ldr	r0, [pc, #80]	; (8002140 <_mcp23s08_step_negx+0x7c>)
 80020ee:	f7ff fea5 	bl	8001e3c <_mcp23s08_set_ss>

		_mcp23s08_reset_ss(MCP23S08_SS);
 80020f2:	2102      	movs	r1, #2
 80020f4:	4812      	ldr	r0, [pc, #72]	; (8002140 <_mcp23s08_step_negx+0x7c>)
 80020f6:	f7ff fe91 	bl	8001e1c <_mcp23s08_reset_ss>
		_mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,0x8,MCP23S08_WR);
 80020fa:	2300      	movs	r3, #0
 80020fc:	2208      	movs	r2, #8
 80020fe:	2109      	movs	r1, #9
 8002100:	4810      	ldr	r0, [pc, #64]	; (8002144 <_mcp23s08_step_negx+0x80>)
 8002102:	f7ff febb 	bl	8001e7c <_mcp23s08_reg_xfer>
		_mcp23s08_set_ss(MCP23S08_SS);
 8002106:	2102      	movs	r1, #2
 8002108:	480d      	ldr	r0, [pc, #52]	; (8002140 <_mcp23s08_step_negx+0x7c>)
 800210a:	f7ff fe97 	bl	8001e3c <_mcp23s08_set_ss>
		//APP_TRACE_INFO ("PLOTTERSTEP HIGH...\n");
		//_mcp23s08_reset_ss(MCP23S08_SS);
		///reg_val = _mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,0,MCP23S08_RD);
		//_mcp23s08_set_ss(MCP23S08_SS);

		_mcp23s08_reset_ss(MCP23S08_SS);
 800210e:	2102      	movs	r1, #2
 8002110:	480b      	ldr	r0, [pc, #44]	; (8002140 <_mcp23s08_step_negx+0x7c>)
 8002112:	f7ff fe83 	bl	8001e1c <_mcp23s08_reset_ss>
		_mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,0x0,MCP23S08_WR);
 8002116:	2300      	movs	r3, #0
 8002118:	2200      	movs	r2, #0
 800211a:	2109      	movs	r1, #9
 800211c:	4809      	ldr	r0, [pc, #36]	; (8002144 <_mcp23s08_step_negx+0x80>)
 800211e:	f7ff fead 	bl	8001e7c <_mcp23s08_reg_xfer>
		_mcp23s08_set_ss(MCP23S08_SS);
 8002122:	2102      	movs	r1, #2
 8002124:	4806      	ldr	r0, [pc, #24]	; (8002140 <_mcp23s08_step_negx+0x7c>)
 8002126:	f7ff fe89 	bl	8001e3c <_mcp23s08_set_ss>

		x_c--;
 800212a:	4b07      	ldr	r3, [pc, #28]	; (8002148 <_mcp23s08_step_negx+0x84>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	3b01      	subs	r3, #1
 8002130:	4a05      	ldr	r2, [pc, #20]	; (8002148 <_mcp23s08_step_negx+0x84>)
 8002132:	6013      	str	r3, [r2, #0]
		return 1;
 8002134:	2301      	movs	r3, #1
 8002136:	e000      	b.n	800213a <_mcp23s08_step_negx+0x76>
	}else{
		return 0;
 8002138:	2300      	movs	r3, #0
	}
}
 800213a:	4618      	mov	r0, r3
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	48028100 	.word	0x48028100
 8002144:	48020000 	.word	0x48020000
 8002148:	20001824 	.word	0x20001824

0800214c <_mcp23s08_goto_0_0>:

void _mcp23s08_goto_0_0(void){
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
	while(_mcp23s08_step_negx() || _mcp23s08_step_negy()){
 8002150:	bf00      	nop
 8002152:	f7ff ffb7 	bl	80020c4 <_mcp23s08_step_negx>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1fa      	bne.n	8002152 <_mcp23s08_goto_0_0+0x6>
 800215c:	f7ff fee6 	bl	8001f2c <_mcp23s08_step_negy>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f5      	bne.n	8002152 <_mcp23s08_goto_0_0+0x6>
	}
	x_c=0;
 8002166:	4b04      	ldr	r3, [pc, #16]	; (8002178 <_mcp23s08_goto_0_0+0x2c>)
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
	y_c=0;
 800216c:	4b03      	ldr	r3, [pc, #12]	; (800217c <_mcp23s08_goto_0_0+0x30>)
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20001824 	.word	0x20001824
 800217c:	20001828 	.word	0x20001828

08002180 <_mcp23s08_Plotter_Init>:

void _mcp23s08_Plotter_Init(void){
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
	//RESET and config GPIO
	_mcp23s08_reset();
 8002184:	f7ff fe6a 	bl	8001e5c <_mcp23s08_reset>
	_mcp23s08_config_gpio();
 8002188:	f000 f804 	bl	8002194 <_mcp23s08_config_gpio>
	while(_mcp23s08_step_negy()){
		y_steps_MAX++;
	}
	sprintf(d_msg,"%d\n",(int)y_steps_MAX);
	APP_TRACE_INFO(d_msg);*/
	_mcp23s08_goto_0_0();
 800218c:	f7ff ffde 	bl	800214c <_mcp23s08_goto_0_0>
}
 8002190:	bf00      	nop
 8002192:	bd80      	pop	{r7, pc}

08002194 <_mcp23s08_config_gpio>:

void _mcp23s08_config_gpio(void){
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
	_mcp23s08_reset_ss(MCP23S08_SS);
 8002198:	2102      	movs	r1, #2
 800219a:	4807      	ldr	r0, [pc, #28]	; (80021b8 <_mcp23s08_config_gpio+0x24>)
 800219c:	f7ff fe3e 	bl	8001e1c <_mcp23s08_reset_ss>
	_mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_IODIR,0,MCP23S08_WR);
 80021a0:	2300      	movs	r3, #0
 80021a2:	2200      	movs	r2, #0
 80021a4:	2100      	movs	r1, #0
 80021a6:	4805      	ldr	r0, [pc, #20]	; (80021bc <_mcp23s08_config_gpio+0x28>)
 80021a8:	f7ff fe68 	bl	8001e7c <_mcp23s08_reg_xfer>
	_mcp23s08_set_ss(MCP23S08_SS);
 80021ac:	2102      	movs	r1, #2
 80021ae:	4802      	ldr	r0, [pc, #8]	; (80021b8 <_mcp23s08_config_gpio+0x24>)
 80021b0:	f7ff fe44 	bl	8001e3c <_mcp23s08_set_ss>
}
 80021b4:	bf00      	nop
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	48028100 	.word	0x48028100
 80021bc:	48020000 	.word	0x48020000

080021c0 <CPU_Init>:
*                                                   & other CPU interrupts disabled time measurement functions
*********************************************************************************************************
*/

void  CPU_Init (void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
                                                                /* --------------------- INIT TS ---------------------- */
#if ((CPU_CFG_TS_EN     == DEF_ENABLED) || \
     (CPU_CFG_TS_TMR_EN == DEF_ENABLED))
    CPU_TS_Init();                                              /* See Note #3a.                                        */
 80021c4:	f000 f832 	bl	800222c <CPU_TS_Init>
    CPU_IntDisMeasInit();                                       /* See Note #3b.                                        */
#endif

                                                                /* ------------------ INIT CPU NAME ------------------- */
#if (CPU_CFG_NAME_EN == DEF_ENABLED)
     CPU_NameInit();
 80021c8:	f000 f82a 	bl	8002220 <CPU_NameInit>
#endif

#if (CPU_CFG_CACHE_MGMT_EN == DEF_ENABLED)
     CPU_Cache_Init();
#endif
}
 80021cc:	bf00      	nop
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <CPU_SW_Exception>:
*                   See also 'cpu_core.h  CPU_SW_EXCEPTION()  Note #1'.
*********************************************************************************************************
*/

void  CPU_SW_Exception (void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
    while (DEF_ON) {
        ;
    }
 80021d4:	e7fe      	b.n	80021d4 <CPU_SW_Exception+0x4>
 80021d6:	bf00      	nop

080021d8 <CPU_NameClr>:
*********************************************************************************************************
*/

#if (CPU_CFG_NAME_EN == DEF_ENABLED)
void  CPU_NameClr (void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
 80021de:	2300      	movs	r3, #0
 80021e0:	607b      	str	r3, [r7, #4]


    CPU_CRITICAL_ENTER();
 80021e2:	f7fe f87d 	bl	80002e0 <CPU_SR_Save>
 80021e6:	6078      	str	r0, [r7, #4]
    Mem_Clr((void     *)&CPU_Name[0],
 80021e8:	2110      	movs	r1, #16
 80021ea:	4805      	ldr	r0, [pc, #20]	; (8002200 <CPU_NameClr+0x28>)
 80021ec:	f000 f8f6 	bl	80023dc <Mem_Clr>
            (CPU_SIZE_T) CPU_CFG_NAME_SIZE);
    CPU_CRITICAL_EXIT();
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7fe f879 	bl	80002e8 <CPU_SR_Restore>
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20001b6c 	.word	0x20001b6c

08002204 <CPU_TS_TmrFreqSet>:
*********************************************************************************************************
*/

#if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
void  CPU_TS_TmrFreqSet (CPU_TS_TMR_FREQ  freq_hz)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
    CPU_TS_TmrFreq_Hz = freq_hz;
 800220c:	4a03      	ldr	r2, [pc, #12]	; (800221c <CPU_TS_TmrFreqSet+0x18>)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6013      	str	r3, [r2, #0]
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr
 800221c:	20001b68 	.word	0x20001b68

08002220 <CPU_NameInit>:
*********************************************************************************************************
*/

#if (CPU_CFG_NAME_EN == DEF_ENABLED)
static  void  CPU_NameInit (void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
    CPU_NameClr();
 8002224:	f7ff ffd8 	bl	80021d8 <CPU_NameClr>
}
 8002228:	bf00      	nop
 800222a:	bd80      	pop	{r7, pc}

0800222c <CPU_TS_Init>:
*/

#if ((CPU_CFG_TS_EN     == DEF_ENABLED) || \
     (CPU_CFG_TS_TMR_EN == DEF_ENABLED))
static  void  CPU_TS_Init (void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
#endif


                                                                /* ----------------- INIT CPU TS TMR ------------------ */
#if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
    CPU_TS_TmrFreq_Hz   = 0u;                                   /* Init/clr     ts tmr freq (see Note #1a).             */
 8002230:	4b03      	ldr	r3, [pc, #12]	; (8002240 <CPU_TS_Init+0x14>)
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
    CPU_TS_TmrInit();                                           /* Init & start ts tmr      (see Note #1b).             */
 8002236:	f005 fd33 	bl	8007ca0 <CPU_TS_TmrInit>
#if  ((CPU_CFG_TS_64_EN    == DEF_ENABLED)  && \
      (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_64))
    CPU_TS_64_Accum   = 0u;                                     /* Init 64-bit accum'd ts.                              */
    CPU_TS_64_TmrPrev = ts_tmr_cnts;                            /* Init 64-bit ts prev tmr val.                         */
#endif
}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20001b68 	.word	0x20001b68

08002244 <CPU_IntSrcEn>:
*               (3) See 'CPU_IntSrcDis()  Note #3'.
*********************************************************************************************************
*/

void  CPU_IntSrcEn (CPU_INT08U  pos)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	71fb      	strb	r3, [r7, #7]
    CPU_INT08U  group;
    CPU_INT08U  nbr;
    CPU_INT08U  pos_max;
    CPU_SR_ALLOC();
 800224e:	2300      	movs	r3, #0
 8002250:	60fb      	str	r3, [r7, #12]


    switch (pos) {
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	2b0f      	cmp	r3, #15
 8002256:	d857      	bhi.n	8002308 <CPU_IntSrcEn+0xc4>
 8002258:	a201      	add	r2, pc, #4	; (adr r2, 8002260 <CPU_IntSrcEn+0x1c>)
 800225a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800225e:	bf00      	nop
 8002260:	08002371 	.word	0x08002371
 8002264:	08002371 	.word	0x08002371
 8002268:	08002371 	.word	0x08002371
 800226c:	08002371 	.word	0x08002371
 8002270:	080022a1 	.word	0x080022a1
 8002274:	080022bb 	.word	0x080022bb
 8002278:	080022d5 	.word	0x080022d5
 800227c:	08002371 	.word	0x08002371
 8002280:	08002371 	.word	0x08002371
 8002284:	08002371 	.word	0x08002371
 8002288:	08002371 	.word	0x08002371
 800228c:	08002371 	.word	0x08002371
 8002290:	08002371 	.word	0x08002371
 8002294:	08002371 	.word	0x08002371
 8002298:	08002371 	.word	0x08002371
 800229c:	080022ef 	.word	0x080022ef
        case CPU_INT_DBGMON:                                    /* Debug monitor (see Note #2).                         */
        case CPU_INT_PENDSV:                                    /* PendSV (see Note #2).                                */
             break;

        case CPU_INT_MEM:                                       /* Memory management.                                   */
             CPU_CRITICAL_ENTER();
 80022a0:	f7fe f81e 	bl	80002e0 <CPU_SR_Save>
 80022a4:	60f8      	str	r0, [r7, #12]
             CPU_REG_NVIC_SHCSR |= CPU_REG_NVIC_SHCSR_MEMFAULTENA;
 80022a6:	4a36      	ldr	r2, [pc, #216]	; (8002380 <CPU_IntSrcEn+0x13c>)
 80022a8:	4b35      	ldr	r3, [pc, #212]	; (8002380 <CPU_IntSrcEn+0x13c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b0:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f7fe f818 	bl	80002e8 <CPU_SR_Restore>
             break;
 80022b8:	e05d      	b.n	8002376 <CPU_IntSrcEn+0x132>

        case CPU_INT_BUSFAULT:                                  /* Bus fault.                                           */
             CPU_CRITICAL_ENTER();
 80022ba:	f7fe f811 	bl	80002e0 <CPU_SR_Save>
 80022be:	60f8      	str	r0, [r7, #12]
             CPU_REG_NVIC_SHCSR |= CPU_REG_NVIC_SHCSR_BUSFAULTENA;
 80022c0:	4a2f      	ldr	r2, [pc, #188]	; (8002380 <CPU_IntSrcEn+0x13c>)
 80022c2:	4b2f      	ldr	r3, [pc, #188]	; (8002380 <CPU_IntSrcEn+0x13c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022ca:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f7fe f80b 	bl	80002e8 <CPU_SR_Restore>
             break;
 80022d2:	e050      	b.n	8002376 <CPU_IntSrcEn+0x132>

        case CPU_INT_USAGEFAULT:                                /* Usage fault.                                         */
             CPU_CRITICAL_ENTER();
 80022d4:	f7fe f804 	bl	80002e0 <CPU_SR_Save>
 80022d8:	60f8      	str	r0, [r7, #12]
             CPU_REG_NVIC_SHCSR |= CPU_REG_NVIC_SHCSR_USGFAULTENA;
 80022da:	4a29      	ldr	r2, [pc, #164]	; (8002380 <CPU_IntSrcEn+0x13c>)
 80022dc:	4b28      	ldr	r3, [pc, #160]	; (8002380 <CPU_IntSrcEn+0x13c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022e4:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f7fd fffe 	bl	80002e8 <CPU_SR_Restore>
             break;
 80022ec:	e043      	b.n	8002376 <CPU_IntSrcEn+0x132>

        case CPU_INT_SYSTICK:                                   /* SysTick.                                             */
             CPU_CRITICAL_ENTER();
 80022ee:	f7fd fff7 	bl	80002e0 <CPU_SR_Save>
 80022f2:	60f8      	str	r0, [r7, #12]
             CPU_REG_NVIC_ST_CTRL |= CPU_REG_NVIC_ST_CTRL_ENABLE;
 80022f4:	4a23      	ldr	r2, [pc, #140]	; (8002384 <CPU_IntSrcEn+0x140>)
 80022f6:	4b23      	ldr	r3, [pc, #140]	; (8002384 <CPU_IntSrcEn+0x140>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f7fd fff1 	bl	80002e8 <CPU_SR_Restore>
             break;
 8002306:	e036      	b.n	8002376 <CPU_IntSrcEn+0x132>


                                                                /* ---------------- EXTERNAL INTERRUPT ---------------- */
        default:
            pos_max = CPU_INT_SRC_POS_MAX;
 8002308:	4b1f      	ldr	r3, [pc, #124]	; (8002388 <CPU_IntSrcEn+0x144>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	3301      	adds	r3, #1
 800230e:	b2db      	uxtb	r3, r3
 8002310:	f003 031f 	and.w	r3, r3, #31
 8002314:	b2db      	uxtb	r3, r3
 8002316:	015b      	lsls	r3, r3, #5
 8002318:	b2db      	uxtb	r3, r3
 800231a:	3310      	adds	r3, #16
 800231c:	72fb      	strb	r3, [r7, #11]
            if (pos < pos_max) {                                /* See Note #3.                                         */
 800231e:	79fa      	ldrb	r2, [r7, #7]
 8002320:	7afb      	ldrb	r3, [r7, #11]
 8002322:	429a      	cmp	r2, r3
 8002324:	d226      	bcs.n	8002374 <CPU_IntSrcEn+0x130>
                 group = (pos - 16) / 32;
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	3b10      	subs	r3, #16
 800232a:	2b00      	cmp	r3, #0
 800232c:	da00      	bge.n	8002330 <CPU_IntSrcEn+0xec>
 800232e:	331f      	adds	r3, #31
 8002330:	115b      	asrs	r3, r3, #5
 8002332:	72bb      	strb	r3, [r7, #10]
                 nbr   = (pos - 16) % 32;
 8002334:	79fb      	ldrb	r3, [r7, #7]
 8002336:	f1a3 0210 	sub.w	r2, r3, #16
 800233a:	4b14      	ldr	r3, [pc, #80]	; (800238c <CPU_IntSrcEn+0x148>)
 800233c:	4013      	ands	r3, r2
 800233e:	2b00      	cmp	r3, #0
 8002340:	da03      	bge.n	800234a <CPU_IntSrcEn+0x106>
 8002342:	3b01      	subs	r3, #1
 8002344:	f063 031f 	orn	r3, r3, #31
 8002348:	3301      	adds	r3, #1
 800234a:	727b      	strb	r3, [r7, #9]

                 CPU_CRITICAL_ENTER();
 800234c:	f7fd ffc8 	bl	80002e0 <CPU_SR_Save>
 8002350:	60f8      	str	r0, [r7, #12]
                 CPU_REG_NVIC_SETEN(group) = DEF_BIT(nbr);
 8002352:	7abb      	ldrb	r3, [r7, #10]
 8002354:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
 8002358:	3340      	adds	r3, #64	; 0x40
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4619      	mov	r1, r3
 800235e:	7a7b      	ldrb	r3, [r7, #9]
 8002360:	2201      	movs	r2, #1
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	600b      	str	r3, [r1, #0]
                 CPU_CRITICAL_EXIT();
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f7fd ffbd 	bl	80002e8 <CPU_SR_Restore>
             }
             break;
 800236e:	e001      	b.n	8002374 <CPU_IntSrcEn+0x130>
        case CPU_INT_RSVD_07:
        case CPU_INT_RSVD_08:
        case CPU_INT_RSVD_09:
        case CPU_INT_RSVD_10:
        case CPU_INT_RSVD_13:
             break;
 8002370:	bf00      	nop
 8002372:	e000      	b.n	8002376 <CPU_IntSrcEn+0x132>

                 CPU_CRITICAL_ENTER();
                 CPU_REG_NVIC_SETEN(group) = DEF_BIT(nbr);
                 CPU_CRITICAL_EXIT();
             }
             break;
 8002374:	bf00      	nop
    }
}
 8002376:	bf00      	nop
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	e000ed24 	.word	0xe000ed24
 8002384:	e000e010 	.word	0xe000e010
 8002388:	e000e004 	.word	0xe000e004
 800238c:	8000001f 	.word	0x8000001f

08002390 <Mem_Init>:
*                   (b) BEFORE product's application calls any memory library module function(s)
*********************************************************************************************************
*/

void  Mem_Init (void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af02      	add	r7, sp, #8

                                                                /* ------------------ INIT SEG LIST ------------------- */
    Mem_SegHeadPtr = DEF_NULL;
 8002396:	4b0d      	ldr	r3, [pc, #52]	; (80023cc <Mem_Init+0x3c>)
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]

                                                                /* ------------------ INIT HEAP SEG ------------------- */
#ifdef  LIB_MEM_CFG_HEAP_BASE_ADDR
        heap_base_addr = LIB_MEM_CFG_HEAP_BASE_ADDR;
#else
        heap_base_addr = (CPU_ADDR)&Mem_Heap[0u];
 800239c:	4b0c      	ldr	r3, [pc, #48]	; (80023d0 <Mem_Init+0x40>)
 800239e:	607b      	str	r3, [r7, #4]
#endif

        Mem_SegCreate("Heap",
 80023a0:	1cbb      	adds	r3, r7, #2
 80023a2:	9301      	str	r3, [sp, #4]
 80023a4:	2301      	movs	r3, #1
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	4909      	ldr	r1, [pc, #36]	; (80023d4 <Mem_Init+0x44>)
 80023b0:	4809      	ldr	r0, [pc, #36]	; (80023d8 <Mem_Init+0x48>)
 80023b2:	f000 f87b 	bl	80024ac <Mem_SegCreate>
                      &Mem_SegHeap,                             /* Create heap seg.                                     */
                       heap_base_addr,
                       LIB_MEM_CFG_HEAP_SIZE,
                       LIB_MEM_PADDING_ALIGN_NONE,
                      &err);
        if (err != LIB_MEM_ERR_NONE) {
 80023b6:	887b      	ldrh	r3, [r7, #2]
 80023b8:	f242 7210 	movw	r2, #10000	; 0x2710
 80023bc:	4293      	cmp	r3, r2
 80023be:	d001      	beq.n	80023c4 <Mem_Init+0x34>
            CPU_SW_EXCEPTION(;);
 80023c0:	f7ff ff06 	bl	80021d0 <CPU_SW_Exception>
        }
    }
#endif
}
 80023c4:	bf00      	nop
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	20001b90 	.word	0x20001b90
 80023d0:	20001b94 	.word	0x20001b94
 80023d4:	20001b7c 	.word	0x20001b7c
 80023d8:	0800ef1c 	.word	0x0800ef1c

080023dc <Mem_Clr>:
*********************************************************************************************************
*/

void  Mem_Clr (void        *pmem,
               CPU_SIZE_T   size)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
    Mem_Set(pmem,
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	2100      	movs	r1, #0
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 f804 	bl	80023f8 <Mem_Set>
            0u,                                                 /* See Note #2.                                         */
            size);
}
 80023f0:	bf00      	nop
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <Mem_Set>:
*/

void  Mem_Set (void        *pmem,
               CPU_INT08U   data_val,
               CPU_SIZE_T   size)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b08b      	sub	sp, #44	; 0x2c
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	460b      	mov	r3, r1
 8002402:	607a      	str	r2, [r7, #4]
 8002404:	72fb      	strb	r3, [r7, #11]
        return;
    }
#endif


    data_align = 0u;
 8002406:	2300      	movs	r3, #0
 8002408:	623b      	str	r3, [r7, #32]
    for (i = 0u; i < sizeof(CPU_ALIGN); i++) {                  /* Fill each data_align octet with data val.            */
 800240a:	2300      	movs	r3, #0
 800240c:	617b      	str	r3, [r7, #20]
 800240e:	e009      	b.n	8002424 <Mem_Set+0x2c>
        data_align <<=  DEF_OCTET_NBR_BITS;
 8002410:	6a3b      	ldr	r3, [r7, #32]
 8002412:	021b      	lsls	r3, r3, #8
 8002414:	623b      	str	r3, [r7, #32]
        data_align  |= (CPU_ALIGN)data_val;
 8002416:	7afb      	ldrb	r3, [r7, #11]
 8002418:	6a3a      	ldr	r2, [r7, #32]
 800241a:	4313      	orrs	r3, r2
 800241c:	623b      	str	r3, [r7, #32]
    }
#endif


    data_align = 0u;
    for (i = 0u; i < sizeof(CPU_ALIGN); i++) {                  /* Fill each data_align octet with data val.            */
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	3301      	adds	r3, #1
 8002422:	617b      	str	r3, [r7, #20]
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	2b03      	cmp	r3, #3
 8002428:	d9f2      	bls.n	8002410 <Mem_Set+0x18>
        data_align <<=  DEF_OCTET_NBR_BITS;
        data_align  |= (CPU_ALIGN)data_val;
    }

    size_rem      =  size;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	627b      	str	r3, [r7, #36]	; 0x24
    mem_align_mod = (CPU_INT08U)((CPU_ADDR)pmem % sizeof(CPU_ALIGN));   /* See Note #3.                                 */
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	b2db      	uxtb	r3, r3
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	613b      	str	r3, [r7, #16]

    pmem_08 = (CPU_INT08U *)pmem;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	61bb      	str	r3, [r7, #24]
    if (mem_align_mod != 0u) {                                  /* If leading octets avail,                   ...       */
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d013      	beq.n	800246a <Mem_Set+0x72>
        i = mem_align_mod;
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	617b      	str	r3, [r7, #20]
        while ((size_rem > 0) &&                                /* ... start mem buf fill with leading octets ...       */
 8002446:	e00a      	b.n	800245e <Mem_Set+0x66>
               (i        < sizeof(CPU_ALIGN ))) {               /* ... until next CPU_ALIGN word boundary.              */
           *pmem_08++ = data_val;
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	1c5a      	adds	r2, r3, #1
 800244c:	61ba      	str	r2, [r7, #24]
 800244e:	7afa      	ldrb	r2, [r7, #11]
 8002450:	701a      	strb	r2, [r3, #0]
            size_rem -= sizeof(CPU_INT08U);
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	3b01      	subs	r3, #1
 8002456:	627b      	str	r3, [r7, #36]	; 0x24
            i++;
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	3301      	adds	r3, #1
 800245c:	617b      	str	r3, [r7, #20]
    mem_align_mod = (CPU_INT08U)((CPU_ADDR)pmem % sizeof(CPU_ALIGN));   /* See Note #3.                                 */

    pmem_08 = (CPU_INT08U *)pmem;
    if (mem_align_mod != 0u) {                                  /* If leading octets avail,                   ...       */
        i = mem_align_mod;
        while ((size_rem > 0) &&                                /* ... start mem buf fill with leading octets ...       */
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	2b00      	cmp	r3, #0
 8002462:	d002      	beq.n	800246a <Mem_Set+0x72>
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	2b03      	cmp	r3, #3
 8002468:	d9ee      	bls.n	8002448 <Mem_Set+0x50>
            size_rem -= sizeof(CPU_INT08U);
            i++;
        }
    }

    pmem_align = (CPU_ALIGN *)pmem_08;                          /* See Note #2.                                         */
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	61fb      	str	r3, [r7, #28]
    while (size_rem >= sizeof(CPU_ALIGN)) {                     /* While mem buf aligned on CPU_ALIGN word boundaries,  */
 800246e:	e007      	b.n	8002480 <Mem_Set+0x88>
       *pmem_align++ = data_align;                              /* ... fill mem buf with    CPU_ALIGN-sized data.       */
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	1d1a      	adds	r2, r3, #4
 8002474:	61fa      	str	r2, [r7, #28]
 8002476:	6a3a      	ldr	r2, [r7, #32]
 8002478:	601a      	str	r2, [r3, #0]
        size_rem    -= sizeof(CPU_ALIGN);
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	3b04      	subs	r3, #4
 800247e:	627b      	str	r3, [r7, #36]	; 0x24
            i++;
        }
    }

    pmem_align = (CPU_ALIGN *)pmem_08;                          /* See Note #2.                                         */
    while (size_rem >= sizeof(CPU_ALIGN)) {                     /* While mem buf aligned on CPU_ALIGN word boundaries,  */
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	2b03      	cmp	r3, #3
 8002484:	d8f4      	bhi.n	8002470 <Mem_Set+0x78>
       *pmem_align++ = data_align;                              /* ... fill mem buf with    CPU_ALIGN-sized data.       */
        size_rem    -= sizeof(CPU_ALIGN);
    }

    pmem_08 = (CPU_INT08U *)pmem_align;
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	61bb      	str	r3, [r7, #24]
    while (size_rem > 0) {                                      /* Finish mem buf fill with trailing octets.            */
 800248a:	e007      	b.n	800249c <Mem_Set+0xa4>
       *pmem_08++   = data_val;
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	61ba      	str	r2, [r7, #24]
 8002492:	7afa      	ldrb	r2, [r7, #11]
 8002494:	701a      	strb	r2, [r3, #0]
        size_rem   -= sizeof(CPU_INT08U);
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	3b01      	subs	r3, #1
 800249a:	627b      	str	r3, [r7, #36]	; 0x24
       *pmem_align++ = data_align;                              /* ... fill mem buf with    CPU_ALIGN-sized data.       */
        size_rem    -= sizeof(CPU_ALIGN);
    }

    pmem_08 = (CPU_INT08U *)pmem_align;
    while (size_rem > 0) {                                      /* Finish mem buf fill with trailing octets.            */
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1f4      	bne.n	800248c <Mem_Set+0x94>
       *pmem_08++   = data_val;
        size_rem   -= sizeof(CPU_INT08U);
    }
}
 80024a2:	bf00      	nop
 80024a4:	372c      	adds	r7, #44	; 0x2c
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bc80      	pop	{r7}
 80024aa:	4770      	bx	lr

080024ac <Mem_SegCreate>:
                            MEM_SEG     *p_seg,
                            CPU_ADDR     seg_base_addr,
                            CPU_SIZE_T   size,
                            CPU_SIZE_T   padding_align,
                            LIB_ERR     *p_err)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b088      	sub	sp, #32
 80024b0:	af02      	add	r7, sp, #8
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
 80024b8:	603b      	str	r3, [r7, #0]
    CPU_SR_ALLOC();
 80024ba:	2300      	movs	r3, #0
 80024bc:	617b      	str	r3, [r7, #20]
       *p_err = LIB_MEM_ERR_INVALID_MEM_ALIGN;
        return;
    }
#endif

    CPU_CRITICAL_ENTER();
 80024be:	f7fd ff0f 	bl	80002e0 <CPU_SR_Save>
 80024c2:	6178      	str	r0, [r7, #20]
        CPU_CRITICAL_EXIT();
        return;
    }
#endif

    Mem_SegCreateCritical(p_name,                               /* Create seg.                                          */
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	6a3b      	ldr	r3, [r7, #32]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	68b9      	ldr	r1, [r7, #8]
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f000 f80c 	bl	80024ec <Mem_SegCreateCritical>
                          p_seg,
                          seg_base_addr,
                          padding_align,
                          size);
    CPU_CRITICAL_EXIT();
 80024d4:	6978      	ldr	r0, [r7, #20]
 80024d6:	f7fd ff07 	bl	80002e8 <CPU_SR_Restore>

   *p_err = LIB_MEM_ERR_NONE;
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	f242 7210 	movw	r2, #10000	; 0x2710
 80024e0:	801a      	strh	r2, [r3, #0]
}
 80024e2:	bf00      	nop
 80024e4:	3718      	adds	r7, #24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop

080024ec <Mem_SegCreateCritical>:
static  void  Mem_SegCreateCritical(const  CPU_CHAR    *p_name,
                                           MEM_SEG     *p_seg,
                                           CPU_ADDR     seg_base_addr,
                                           CPU_SIZE_T   padding_align,
                                           CPU_SIZE_T   size)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
 80024f8:	603b      	str	r3, [r7, #0]
    p_seg->AddrBase         =  seg_base_addr;
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	601a      	str	r2, [r3, #0]
    p_seg->AddrEnd          = (seg_base_addr + (size - 1u));
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4413      	add	r3, r2
 8002506:	1e5a      	subs	r2, r3, #1
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	605a      	str	r2, [r3, #4]
    p_seg->AddrNext         =  seg_base_addr;
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	609a      	str	r2, [r3, #8]
    p_seg->NextPtr          =  Mem_SegHeadPtr;
 8002512:	4b07      	ldr	r3, [pc, #28]	; (8002530 <Mem_SegCreateCritical+0x44>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	60da      	str	r2, [r3, #12]
    p_seg->PaddingAlign     =  padding_align;
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	611a      	str	r2, [r3, #16]
    p_seg->AllocInfoHeadPtr = DEF_NULL;
#else
    (void)&p_name;
#endif

    Mem_SegHeadPtr = p_seg;
 8002520:	4a03      	ldr	r2, [pc, #12]	; (8002530 <Mem_SegCreateCritical+0x44>)
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	6013      	str	r3, [r2, #0]
}
 8002526:	bf00      	nop
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr
 8002530:	20001b90 	.word	0x20001b90

08002534 <Math_Init>:
*                   as when srand() is first called with a seed value of 1".
*********************************************************************************************************
*/

void  Math_Init (void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
    Math_RandSetSeed((RAND_NBR)RAND_SEED_INIT_VAL);             /* See Note #2.                                         */
 8002538:	2001      	movs	r0, #1
 800253a:	f000 f803 	bl	8002544 <Math_RandSetSeed>
}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop

08002544 <Math_RandSetSeed>:
*                   See also 'Math_Rand()  Note #1b'.
*********************************************************************************************************
*/

void  Math_RandSetSeed (RAND_NBR  seed)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
    CPU_SR_ALLOC();
 800254c:	2300      	movs	r3, #0
 800254e:	60fb      	str	r3, [r7, #12]


    CPU_CRITICAL_ENTER();
 8002550:	f7fd fec6 	bl	80002e0 <CPU_SR_Save>
 8002554:	60f8      	str	r0, [r7, #12]
    Math_RandSeedCur = seed;
 8002556:	4a05      	ldr	r2, [pc, #20]	; (800256c <Math_RandSetSeed+0x28>)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6013      	str	r3, [r2, #0]
    CPU_CRITICAL_EXIT();
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f7fd fec3 	bl	80002e8 <CPU_SR_Restore>
}
 8002562:	bf00      	nop
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	20001f94 	.word	0x20001f94

08002570 <OSQCreate>:
void  OSQCreate (OS_Q        *p_q,
                 CPU_CHAR    *p_name,
                 OS_MSG_QTY   max_qty,
                 OS_ERR      *p_err)

{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	603b      	str	r3, [r7, #0]
 800257c:	4613      	mov	r3, r2
 800257e:	80fb      	strh	r3, [r7, #6]
    CPU_SR_ALLOC();
 8002580:	2300      	movs	r3, #0
 8002582:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to be called from an ISR                   */
 8002584:	4b1f      	ldr	r3, [pc, #124]	; (8002604 <OSQCreate+0x94>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d004      	beq.n	8002596 <OSQCreate+0x26>
       *p_err = OS_ERR_CREATE_ISR;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	f642 62e1 	movw	r2, #12001	; 0x2ee1
 8002592:	801a      	strh	r2, [r3, #0]
        return;
 8002594:	e033      	b.n	80025fe <OSQCreate+0x8e>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_q == (OS_Q *)0) {                                 /* Validate arguments                                     */
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d104      	bne.n	80025a6 <OSQCreate+0x36>
       *p_err = OS_ERR_OBJ_PTR_NULL;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	f645 52c3 	movw	r2, #24003	; 0x5dc3
 80025a2:	801a      	strh	r2, [r3, #0]
        return;
 80025a4:	e02b      	b.n	80025fe <OSQCreate+0x8e>
    }
    if (max_qty == (OS_MSG_QTY)0) {                         /* Cannot specify a zero size queue                       */
 80025a6:	88fb      	ldrh	r3, [r7, #6]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d104      	bne.n	80025b6 <OSQCreate+0x46>
       *p_err = OS_ERR_Q_SIZE;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	f246 5294 	movw	r2, #26004	; 0x6594
 80025b2:	801a      	strh	r2, [r3, #0]
        return;
 80025b4:	e023      	b.n	80025fe <OSQCreate+0x8e>
    }
#endif

    OS_CRITICAL_ENTER();
 80025b6:	f7fd fe93 	bl	80002e0 <CPU_SR_Save>
 80025ba:	6178      	str	r0, [r7, #20]
#if OS_OBJ_TYPE_REQ > 0u
    p_q->Type    = OS_OBJ_TYPE_Q;                           /* Mark the data structure as a message queue             */
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4a12      	ldr	r2, [pc, #72]	; (8002608 <OSQCreate+0x98>)
 80025c0:	601a      	str	r2, [r3, #0]
#endif
#if OS_CFG_DBG_EN > 0u
    p_q->NamePtr = p_name;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	68ba      	ldr	r2, [r7, #8]
 80025c6:	605a      	str	r2, [r3, #4]
#else
    (void)&p_name;
#endif
    OS_MsgQInit(&p_q->MsgQ,                                 /* Initialize the queue                                   */
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	3320      	adds	r3, #32
 80025cc:	88fa      	ldrh	r2, [r7, #6]
 80025ce:	4611      	mov	r1, r2
 80025d0:	4618      	mov	r0, r3
 80025d2:	f001 f8cf 	bl	8003774 <OS_MsgQInit>
                max_qty);
    OS_PendListInit(&p_q->PendList);                        /* Initialize the waiting list                            */
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	3308      	adds	r3, #8
 80025da:	4618      	mov	r0, r3
 80025dc:	f001 fdb6 	bl	800414c <OS_PendListInit>

#if OS_CFG_DBG_EN > 0u
    OS_QDbgListAdd(p_q);
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f000 f965 	bl	80028b0 <OS_QDbgListAdd>
#endif
    OSQQty++;                                               /* One more queue created                                 */
 80025e6:	4b09      	ldr	r3, [pc, #36]	; (800260c <OSQCreate+0x9c>)
 80025e8:	881b      	ldrh	r3, [r3, #0]
 80025ea:	3301      	adds	r3, #1
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	4b07      	ldr	r3, [pc, #28]	; (800260c <OSQCreate+0x9c>)
 80025f0:	801a      	strh	r2, [r3, #0]
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_Q_CREATE(p_q, p_name);                         /* Record the event.                                      */
#endif
    OS_CRITICAL_EXIT_NO_SCHED();
 80025f2:	6978      	ldr	r0, [r7, #20]
 80025f4:	f7fd fe78 	bl	80002e8 <CPU_SR_Restore>
   *p_err = OS_ERR_NONE;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	2200      	movs	r2, #0
 80025fc:	801a      	strh	r2, [r3, #0]
}
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	20002234 	.word	0x20002234
 8002608:	55455551 	.word	0x55455551
 800260c:	2000220c 	.word	0x2000220c

08002610 <OSQPend>:
                OS_TICK       timeout,
                OS_OPT        opt,
                OS_MSG_SIZE  *p_msg_size,
                CPU_TS       *p_ts,
                OS_ERR       *p_err)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08e      	sub	sp, #56	; 0x38
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	603b      	str	r3, [r7, #0]
 800261c:	4613      	mov	r3, r2
 800261e:	80fb      	strh	r3, [r7, #6]
    OS_PEND_DATA  pend_data;
    void         *p_void;
    CPU_SR_ALLOC();
 8002620:	2300      	movs	r3, #0
 8002622:	633b      	str	r3, [r7, #48]	; 0x30
        return ((void *)0);
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 8002624:	4b72      	ldr	r3, [pc, #456]	; (80027f0 <OSQPend+0x1e0>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d005      	beq.n	8002638 <OSQPend+0x28>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_PEND_FAILED(p_q);                        /* Record the event.                                      */
#endif
       *p_err = OS_ERR_PEND_ISR;
 800262c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800262e:	f246 12ae 	movw	r2, #25006	; 0x61ae
 8002632:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 8002634:	2300      	movs	r3, #0
 8002636:	e0d7      	b.n	80027e8 <OSQPend+0x1d8>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_q == (OS_Q *)0) {                                 /* Validate arguments                                     */
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d105      	bne.n	800264a <OSQPend+0x3a>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_PEND_FAILED(p_q);                        /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_PTR_NULL;
 800263e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002640:	f645 52c3 	movw	r2, #24003	; 0x5dc3
 8002644:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 8002646:	2300      	movs	r3, #0
 8002648:	e0ce      	b.n	80027e8 <OSQPend+0x1d8>
    }
    if (p_msg_size == (OS_MSG_SIZE *)0) {
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d105      	bne.n	800265c <OSQPend+0x4c>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_PEND_FAILED(p_q);                        /* Record the event.                                      */
#endif
       *p_err = OS_ERR_PTR_INVALID;
 8002650:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002652:	f246 22d5 	movw	r2, #25301	; 0x62d5
 8002656:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 8002658:	2300      	movs	r3, #0
 800265a:	e0c5      	b.n	80027e8 <OSQPend+0x1d8>
    }
    switch (opt) {
 800265c:	88fb      	ldrh	r3, [r7, #6]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d008      	beq.n	8002674 <OSQPend+0x64>
 8002662:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002666:	d005      	beq.n	8002674 <OSQPend+0x64>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_Q_PEND_FAILED(p_q);                   /* Record the event.                                      */
#endif
            *p_err = OS_ERR_OPT_INVALID;
 8002668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800266a:	f645 6225 	movw	r2, #24101	; 0x5e25
 800266e:	801a      	strh	r2, [r3, #0]
             return ((void *)0);
 8002670:	2300      	movs	r3, #0
 8002672:	e0b9      	b.n	80027e8 <OSQPend+0x1d8>
        return ((void *)0);
    }
    switch (opt) {
        case OS_OPT_PEND_BLOCKING:
        case OS_OPT_PEND_NON_BLOCKING:
             break;
 8002674:	bf00      	nop
             return ((void *)0);
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_q->Type != OS_OBJ_TYPE_Q) {                       /* Make sure message queue was created                    */
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a5e      	ldr	r2, [pc, #376]	; (80027f4 <OSQPend+0x1e4>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d005      	beq.n	800268c <OSQPend+0x7c>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_PEND_FAILED(p_q);                        /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_TYPE;
 8002680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002682:	f645 52c4 	movw	r2, #24004	; 0x5dc4
 8002686:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 8002688:	2300      	movs	r3, #0
 800268a:	e0ad      	b.n	80027e8 <OSQPend+0x1d8>
    }
#endif

    if (p_ts != (CPU_TS *)0) {
 800268c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800268e:	2b00      	cmp	r3, #0
 8002690:	d002      	beq.n	8002698 <OSQPend+0x88>
       *p_ts  = (CPU_TS  )0;                                /* Initialize the returned timestamp                      */
 8002692:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
    }

    CPU_CRITICAL_ENTER();
 8002698:	f7fd fe22 	bl	80002e0 <CPU_SR_Save>
 800269c:	6338      	str	r0, [r7, #48]	; 0x30
    p_void = OS_MsgQGet(&p_q->MsgQ,                         /* Any message waiting in the message queue?              */
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f103 0020 	add.w	r0, r3, #32
 80026a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80026a8:	6839      	ldr	r1, [r7, #0]
 80026aa:	f001 f87d 	bl	80037a8 <OS_MsgQGet>
 80026ae:	6378      	str	r0, [r7, #52]	; 0x34
                        p_msg_size,
                        p_ts,
                        p_err);
    if (*p_err == OS_ERR_NONE) {
 80026b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026b2:	881b      	ldrh	r3, [r3, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d104      	bne.n	80026c2 <OSQPend+0xb2>
        CPU_CRITICAL_EXIT();
 80026b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026ba:	f7fd fe15 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_PEND(p_q);                               /* Record the event.                                      */
#endif
        return (p_void);                                    /* Yes, Return message received                           */
 80026be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c0:	e092      	b.n	80027e8 <OSQPend+0x1d8>
    }

    if ((opt & OS_OPT_PEND_NON_BLOCKING) != (OS_OPT)0) {    /* Caller wants to block if not available?                */
 80026c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	da08      	bge.n	80026dc <OSQPend+0xcc>
        CPU_CRITICAL_EXIT();
 80026ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026cc:	f7fd fe0c 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_PEND_FAILED(p_q);                        /* Record the event.                                      */
#endif
       *p_err = OS_ERR_PEND_WOULD_BLOCK;                    /* No                                                     */
 80026d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026d2:	f246 12b0 	movw	r2, #25008	; 0x61b0
 80026d6:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 80026d8:	2300      	movs	r3, #0
 80026da:	e085      	b.n	80027e8 <OSQPend+0x1d8>
    } else {
        if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /* Can't pend when the scheduler is locked                */
 80026dc:	4b46      	ldr	r3, [pc, #280]	; (80027f8 <OSQPend+0x1e8>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d008      	beq.n	80026f6 <OSQPend+0xe6>
            CPU_CRITICAL_EXIT();
 80026e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026e6:	f7fd fdff 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
            TRACE_OS_Q_PEND_FAILED(p_q);                    /* Record the event.                                      */
#endif
           *p_err = OS_ERR_SCHED_LOCKED;
 80026ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026ec:	f646 5263 	movw	r2, #28003	; 0x6d63
 80026f0:	801a      	strh	r2, [r3, #0]
            return ((void *)0);
 80026f2:	2300      	movs	r3, #0
 80026f4:	e078      	b.n	80027e8 <OSQPend+0x1d8>
        }
    }
                                                            /* Lock the scheduler/re-enable interrupts                */
    OS_CRITICAL_ENTER_CPU_EXIT();
    OS_Pend(&pend_data,                                     /* Block task pending on Message Queue                    */
 80026f6:	f107 0010 	add.w	r0, r7, #16
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	2205      	movs	r2, #5
 80026fe:	68f9      	ldr	r1, [r7, #12]
 8002700:	f001 fc1e 	bl	8003f40 <OS_Pend>
            (OS_PEND_OBJ *)((void *)p_q),
            OS_TASK_PEND_ON_Q,
            timeout);
    OS_CRITICAL_EXIT_NO_SCHED();
 8002704:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002706:	f7fd fdef 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_Q_PEND_BLOCK(p_q);                             /* Record the event.                                      */
#endif
    OSSched();                                              /* Find the next highest priority task ready to run       */
 800270a:	f001 faad 	bl	8003c68 <OSSched>

    CPU_CRITICAL_ENTER();
 800270e:	f7fd fde7 	bl	80002e0 <CPU_SR_Save>
 8002712:	6338      	str	r0, [r7, #48]	; 0x30
    switch (OSTCBCurPtr->PendStatus) {
 8002714:	4b39      	ldr	r3, [pc, #228]	; (80027fc <OSQPend+0x1ec>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800271c:	2b03      	cmp	r3, #3
 800271e:	d855      	bhi.n	80027cc <OSQPend+0x1bc>
 8002720:	a201      	add	r2, pc, #4	; (adr r2, 8002728 <OSQPend+0x118>)
 8002722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002726:	bf00      	nop
 8002728:	08002739 	.word	0x08002739
 800272c:	08002765 	.word	0x08002765
 8002730:	080027a9 	.word	0x080027a9
 8002734:	08002789 	.word	0x08002789
        case OS_STATUS_PEND_OK:                             /* Extract message from TCB (Put there by Post)           */
             p_void     = OSTCBCurPtr->MsgPtr;
 8002738:	4b30      	ldr	r3, [pc, #192]	; (80027fc <OSQPend+0x1ec>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273e:	637b      	str	r3, [r7, #52]	; 0x34
            *p_msg_size = OSTCBCurPtr->MsgSize;
 8002740:	4b2e      	ldr	r3, [pc, #184]	; (80027fc <OSQPend+0x1ec>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	801a      	strh	r2, [r3, #0]
             if (p_ts  != (CPU_TS *)0) {
 800274c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800274e:	2b00      	cmp	r3, #0
 8002750:	d004      	beq.n	800275c <OSQPend+0x14c>
                *p_ts   =  OSTCBCurPtr->TS;
 8002752:	4b2a      	ldr	r3, [pc, #168]	; (80027fc <OSQPend+0x1ec>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800275a:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_Q_PEND(p_q);                          /* Record the event.                                      */
#endif
            *p_err      = OS_ERR_NONE;
 800275c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800275e:	2200      	movs	r2, #0
 8002760:	801a      	strh	r2, [r3, #0]
             break;
 8002762:	e03d      	b.n	80027e0 <OSQPend+0x1d0>

        case OS_STATUS_PEND_ABORT:                          /* Indicate that we aborted                               */
             p_void     = (void      *)0;
 8002764:	2300      	movs	r3, #0
 8002766:	637b      	str	r3, [r7, #52]	; 0x34
            *p_msg_size = (OS_MSG_SIZE)0;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	2200      	movs	r2, #0
 800276c:	801a      	strh	r2, [r3, #0]
             if (p_ts  != (CPU_TS *)0) {
 800276e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002770:	2b00      	cmp	r3, #0
 8002772:	d004      	beq.n	800277e <OSQPend+0x16e>
                *p_ts   =  OSTCBCurPtr->TS;
 8002774:	4b21      	ldr	r3, [pc, #132]	; (80027fc <OSQPend+0x1ec>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800277a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800277c:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_Q_PEND_FAILED(p_q);                   /* Record the event.                                      */
#endif
            *p_err      = OS_ERR_PEND_ABORT;
 800277e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002780:	f246 12a9 	movw	r2, #25001	; 0x61a9
 8002784:	801a      	strh	r2, [r3, #0]
             break;
 8002786:	e02b      	b.n	80027e0 <OSQPend+0x1d0>

        case OS_STATUS_PEND_TIMEOUT:                        /* Indicate that we didn't get event within TO            */
             p_void     = (void      *)0;
 8002788:	2300      	movs	r3, #0
 800278a:	637b      	str	r3, [r7, #52]	; 0x34
            *p_msg_size = (OS_MSG_SIZE)0;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	2200      	movs	r2, #0
 8002790:	801a      	strh	r2, [r3, #0]
             if (p_ts  != (CPU_TS *)0) {
 8002792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002794:	2b00      	cmp	r3, #0
 8002796:	d002      	beq.n	800279e <OSQPend+0x18e>
                *p_ts   = (CPU_TS  )0;
 8002798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_Q_PEND_FAILED(p_q);                   /* Record the event.                                      */
#endif
            *p_err      = OS_ERR_TIMEOUT;
 800279e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027a0:	f247 22d9 	movw	r2, #29401	; 0x72d9
 80027a4:	801a      	strh	r2, [r3, #0]
             break;
 80027a6:	e01b      	b.n	80027e0 <OSQPend+0x1d0>

        case OS_STATUS_PEND_DEL:                            /* Indicate that object pended on has been deleted        */
             p_void     = (void      *)0;
 80027a8:	2300      	movs	r3, #0
 80027aa:	637b      	str	r3, [r7, #52]	; 0x34
            *p_msg_size = (OS_MSG_SIZE)0;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	2200      	movs	r2, #0
 80027b0:	801a      	strh	r2, [r3, #0]
             if (p_ts  != (CPU_TS *)0) {
 80027b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d004      	beq.n	80027c2 <OSQPend+0x1b2>
                *p_ts   =  OSTCBCurPtr->TS;
 80027b8:	4b10      	ldr	r3, [pc, #64]	; (80027fc <OSQPend+0x1ec>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80027be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027c0:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_Q_PEND_FAILED(p_q);                   /* Record the event.                                      */
#endif
            *p_err      = OS_ERR_OBJ_DEL;
 80027c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027c4:	f645 52c2 	movw	r2, #24002	; 0x5dc2
 80027c8:	801a      	strh	r2, [r3, #0]
             break;
 80027ca:	e009      	b.n	80027e0 <OSQPend+0x1d0>

        default:
             p_void     = (void      *)0;
 80027cc:	2300      	movs	r3, #0
 80027ce:	637b      	str	r3, [r7, #52]	; 0x34
            *p_msg_size = (OS_MSG_SIZE)0;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	2200      	movs	r2, #0
 80027d4:	801a      	strh	r2, [r3, #0]
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_Q_PEND_FAILED(p_q);                   /* Record the event.                                      */
#endif
            *p_err      = OS_ERR_STATUS_INVALID;
 80027d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027d8:	f646 622e 	movw	r2, #28206	; 0x6e2e
 80027dc:	801a      	strh	r2, [r3, #0]
             break;
 80027de:	bf00      	nop
    }
    CPU_CRITICAL_EXIT();
 80027e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027e2:	f7fd fd81 	bl	80002e8 <CPU_SR_Restore>
    return (p_void);
 80027e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3738      	adds	r7, #56	; 0x38
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	20002234 	.word	0x20002234
 80027f4:	55455551 	.word	0x55455551
 80027f8:	20001f9c 	.word	0x20001f9c
 80027fc:	20002208 	.word	0x20002208

08002800 <OSQPost>:
void  OSQPost (OS_Q         *p_q,
               void         *p_void,
               OS_MSG_SIZE   msg_size,
               OS_OPT        opt,
               OS_ERR       *p_err)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b088      	sub	sp, #32
 8002804:	af02      	add	r7, sp, #8
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	4611      	mov	r1, r2
 800280c:	461a      	mov	r2, r3
 800280e:	460b      	mov	r3, r1
 8002810:	80fb      	strh	r3, [r7, #6]
 8002812:	4613      	mov	r3, r2
 8002814:	80bb      	strh	r3, [r7, #4]
        return;
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_q == (OS_Q *)0) {                                 /* Validate 'p_q'                                         */
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d104      	bne.n	8002826 <OSQPost+0x26>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_POST_FAILED(p_q);                        /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_PTR_NULL;
 800281c:	6a3b      	ldr	r3, [r7, #32]
 800281e:	f645 52c3 	movw	r2, #24003	; 0x5dc3
 8002822:	801a      	strh	r2, [r3, #0]
        return;
 8002824:	e03f      	b.n	80028a6 <OSQPost+0xa6>
    }
    switch (opt) {                                          /* Validate 'opt'                                         */
 8002826:	88bb      	ldrh	r3, [r7, #4]
 8002828:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 800282c:	d022      	beq.n	8002874 <OSQPost+0x74>
 800282e:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 8002832:	dc07      	bgt.n	8002844 <OSQPost+0x44>
 8002834:	2b10      	cmp	r3, #16
 8002836:	d01d      	beq.n	8002874 <OSQPost+0x74>
 8002838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800283c:	d01a      	beq.n	8002874 <OSQPost+0x74>
 800283e:	2b00      	cmp	r3, #0
 8002840:	d018      	beq.n	8002874 <OSQPost+0x74>
 8002842:	e012      	b.n	800286a <OSQPost+0x6a>
 8002844:	f248 0210 	movw	r2, #32784	; 0x8010
 8002848:	4293      	cmp	r3, r2
 800284a:	d013      	beq.n	8002874 <OSQPost+0x74>
 800284c:	f248 0210 	movw	r2, #32784	; 0x8010
 8002850:	4293      	cmp	r3, r2
 8002852:	dc03      	bgt.n	800285c <OSQPost+0x5c>
 8002854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002858:	d00c      	beq.n	8002874 <OSQPost+0x74>
 800285a:	e006      	b.n	800286a <OSQPost+0x6a>
 800285c:	f5b3 4f02 	cmp.w	r3, #33280	; 0x8200
 8002860:	d008      	beq.n	8002874 <OSQPost+0x74>
 8002862:	f248 2210 	movw	r2, #33296	; 0x8210
 8002866:	4293      	cmp	r3, r2
 8002868:	d004      	beq.n	8002874 <OSQPost+0x74>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_Q_POST_FAILED(p_q);                   /* Record the event.                                      */
#endif
            *p_err =  OS_ERR_OPT_INVALID;
 800286a:	6a3b      	ldr	r3, [r7, #32]
 800286c:	f645 6225 	movw	r2, #24101	; 0x5e25
 8002870:	801a      	strh	r2, [r3, #0]
             return;
 8002872:	e018      	b.n	80028a6 <OSQPost+0xa6>
        case OS_OPT_POST_LIFO | OS_OPT_POST_ALL:
        case OS_OPT_POST_FIFO | OS_OPT_POST_NO_SCHED:
        case OS_OPT_POST_LIFO | OS_OPT_POST_NO_SCHED:
        case OS_OPT_POST_FIFO | OS_OPT_POST_ALL | OS_OPT_POST_NO_SCHED:
        case OS_OPT_POST_LIFO | OS_OPT_POST_ALL | OS_OPT_POST_NO_SCHED:
             break;
 8002874:	bf00      	nop
             return;
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_q->Type != OS_OBJ_TYPE_Q) {                       /* Make sure message queue was created                    */
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a0c      	ldr	r2, [pc, #48]	; (80028ac <OSQPost+0xac>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d004      	beq.n	800288a <OSQPost+0x8a>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_POST_FAILED(p_q);                        /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_TYPE;
 8002880:	6a3b      	ldr	r3, [r7, #32]
 8002882:	f645 52c4 	movw	r2, #24004	; 0x5dc4
 8002886:	801a      	strh	r2, [r3, #0]
        return;
 8002888:	e00d      	b.n	80028a6 <OSQPost+0xa6>
    }
#endif

    ts = OS_TS_GET();                                       /* Get timestamp                                          */
 800288a:	f005 fa27 	bl	8007cdc <CPU_TS_TmrRd>
 800288e:	6178      	str	r0, [r7, #20]
    }
#endif
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_Q_POST(p_q);                                   /* Record the event.                                      */
#endif
    OS_QPost(p_q,
 8002890:	88b9      	ldrh	r1, [r7, #4]
 8002892:	88fa      	ldrh	r2, [r7, #6]
 8002894:	6a3b      	ldr	r3, [r7, #32]
 8002896:	9301      	str	r3, [sp, #4]
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	460b      	mov	r3, r1
 800289e:	68b9      	ldr	r1, [r7, #8]
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f000 f841 	bl	8002928 <OS_QPost>
             p_void,
             msg_size,
             opt,
             ts,
             p_err);
}
 80028a6:	3718      	adds	r7, #24
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	55455551 	.word	0x55455551

080028b0 <OS_QDbgListAdd>:
*/


#if OS_CFG_DBG_EN > 0u
void  OS_QDbgListAdd (OS_Q  *p_q)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
    p_q->DbgNamePtr               = (CPU_CHAR *)((void *)" ");
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a0e      	ldr	r2, [pc, #56]	; (80028f4 <OS_QDbgListAdd+0x44>)
 80028bc:	61da      	str	r2, [r3, #28]
    p_q->DbgPrevPtr               = (OS_Q     *)0;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	615a      	str	r2, [r3, #20]
    if (OSQDbgListPtr == (OS_Q *)0) {
 80028c4:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <OS_QDbgListAdd+0x48>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d103      	bne.n	80028d4 <OS_QDbgListAdd+0x24>
        p_q->DbgNextPtr           = (OS_Q     *)0;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	619a      	str	r2, [r3, #24]
 80028d2:	e007      	b.n	80028e4 <OS_QDbgListAdd+0x34>
    } else {
        p_q->DbgNextPtr           =  OSQDbgListPtr;
 80028d4:	4b08      	ldr	r3, [pc, #32]	; (80028f8 <OS_QDbgListAdd+0x48>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	619a      	str	r2, [r3, #24]
        OSQDbgListPtr->DbgPrevPtr =  p_q;
 80028dc:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <OS_QDbgListAdd+0x48>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	615a      	str	r2, [r3, #20]
    }
    OSQDbgListPtr                 =  p_q;
 80028e4:	4a04      	ldr	r2, [pc, #16]	; (80028f8 <OS_QDbgListAdd+0x48>)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6013      	str	r3, [r2, #0]
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr
 80028f4:	0800ef60 	.word	0x0800ef60
 80028f8:	200023c4 	.word	0x200023c4

080028fc <OS_QInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_QInit (OS_ERR  *p_err)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSQDbgListPtr = (OS_Q *)0;
 8002904:	4b06      	ldr	r3, [pc, #24]	; (8002920 <OS_QInit+0x24>)
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]
#endif

    OSQQty        = (OS_OBJ_QTY)0;
 800290a:	4b06      	ldr	r3, [pc, #24]	; (8002924 <OS_QInit+0x28>)
 800290c:	2200      	movs	r2, #0
 800290e:	801a      	strh	r2, [r3, #0]
   *p_err         = OS_ERR_NONE;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	801a      	strh	r2, [r3, #0]
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr
 8002920:	200023c4 	.word	0x200023c4
 8002924:	2000220c 	.word	0x2000220c

08002928 <OS_QPost>:
                void         *p_void,
                OS_MSG_SIZE   msg_size,
                OS_OPT        opt,
                CPU_TS        ts,
                OS_ERR       *p_err)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b08c      	sub	sp, #48	; 0x30
 800292c:	af02      	add	r7, sp, #8
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	4611      	mov	r1, r2
 8002934:	461a      	mov	r2, r3
 8002936:	460b      	mov	r3, r1
 8002938:	80fb      	strh	r3, [r7, #6]
 800293a:	4613      	mov	r3, r2
 800293c:	80bb      	strh	r3, [r7, #4]
    OS_OPT         post_type;
    OS_PEND_LIST  *p_pend_list;
    OS_PEND_DATA  *p_pend_data;
    OS_PEND_DATA  *p_pend_data_next;
    OS_TCB        *p_tcb;
    CPU_SR_ALLOC();
 800293e:	2300      	movs	r3, #0
 8002940:	61fb      	str	r3, [r7, #28]



    OS_CRITICAL_ENTER();
 8002942:	f7fd fccd 	bl	80002e0 <CPU_SR_Save>
 8002946:	61f8      	str	r0, [r7, #28]
    p_pend_list = &p_q->PendList;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	3308      	adds	r3, #8
 800294c:	61bb      	str	r3, [r7, #24]
    if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0) {         /* Any task waiting on message queue?                     */
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	891b      	ldrh	r3, [r3, #8]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d11a      	bne.n	800298c <OS_QPost+0x64>
        if ((opt & OS_OPT_POST_LIFO) == (OS_OPT)0) {        /* Determine whether we post FIFO or LIFO                 */
 8002956:	88bb      	ldrh	r3, [r7, #4]
 8002958:	f003 0310 	and.w	r3, r3, #16
 800295c:	2b00      	cmp	r3, #0
 800295e:	d102      	bne.n	8002966 <OS_QPost+0x3e>
            post_type = OS_OPT_POST_FIFO;
 8002960:	2300      	movs	r3, #0
 8002962:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002964:	e001      	b.n	800296a <OS_QPost+0x42>
        } else {
            post_type = OS_OPT_POST_LIFO;
 8002966:	2310      	movs	r3, #16
 8002968:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
        OS_MsgQPut(&p_q->MsgQ,                              /* Place message in the message queue                     */
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f103 0020 	add.w	r0, r3, #32
 8002970:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8002972:	88fa      	ldrh	r2, [r7, #6]
 8002974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002976:	9301      	str	r3, [sp, #4]
 8002978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297a:	9300      	str	r3, [sp, #0]
 800297c:	460b      	mov	r3, r1
 800297e:	68b9      	ldr	r1, [r7, #8]
 8002980:	f000 ff70 	bl	8003864 <OS_MsgQPut>
                   p_void,
                   msg_size,
                   post_type,
                   ts,
                   p_err);
        OS_CRITICAL_EXIT();
 8002984:	69f8      	ldr	r0, [r7, #28]
 8002986:	f7fd fcaf 	bl	80002e8 <CPU_SR_Restore>
        return;
 800298a:	e031      	b.n	80029f0 <OS_QPost+0xc8>
    }

    if ((opt & OS_OPT_POST_ALL) != (OS_OPT)0) {             /* Post message to all tasks waiting?                     */
 800298c:	88bb      	ldrh	r3, [r7, #4]
 800298e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <OS_QPost+0x76>
        cnt = p_pend_list->NbrEntries;                      /* Yes                                                    */
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	891b      	ldrh	r3, [r3, #8]
 800299a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800299c:	e001      	b.n	80029a2 <OS_QPost+0x7a>
    } else {
        cnt = (OS_OBJ_QTY)1;                                /* No                                                     */
 800299e:	2301      	movs	r3, #1
 80029a0:	84fb      	strh	r3, [r7, #38]	; 0x26
    }
    p_pend_data = p_pend_list->HeadPtr;
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	623b      	str	r3, [r7, #32]
    while (cnt > 0u) {
 80029a8:	e013      	b.n	80029d2 <OS_QPost+0xaa>
        p_tcb            = p_pend_data->TCBPtr;
 80029aa:	6a3b      	ldr	r3, [r7, #32]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	617b      	str	r3, [r7, #20]
        p_pend_data_next = p_pend_data->NextPtr;
 80029b0:	6a3b      	ldr	r3, [r7, #32]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	613b      	str	r3, [r7, #16]
        OS_Post((OS_PEND_OBJ *)((void *)p_q),
 80029b6:	88fa      	ldrh	r2, [r7, #6]
 80029b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	4613      	mov	r3, r2
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	6979      	ldr	r1, [r7, #20]
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f001 fcbc 	bl	8004340 <OS_Post>
                p_tcb,
                p_void,
                msg_size,
                ts);
        p_pend_data = p_pend_data_next;
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	623b      	str	r3, [r7, #32]
        cnt--;
 80029cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80029ce:	3b01      	subs	r3, #1
 80029d0:	84fb      	strh	r3, [r7, #38]	; 0x26
        cnt = p_pend_list->NbrEntries;                      /* Yes                                                    */
    } else {
        cnt = (OS_OBJ_QTY)1;                                /* No                                                     */
    }
    p_pend_data = p_pend_list->HeadPtr;
    while (cnt > 0u) {
 80029d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1e8      	bne.n	80029aa <OS_QPost+0x82>
                msg_size,
                ts);
        p_pend_data = p_pend_data_next;
        cnt--;
    }
    OS_CRITICAL_EXIT_NO_SCHED();
 80029d8:	69f8      	ldr	r0, [r7, #28]
 80029da:	f7fd fc85 	bl	80002e8 <CPU_SR_Restore>
    if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0) {
 80029de:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	db01      	blt.n	80029ea <OS_QPost+0xc2>
        OSSched();                                          /* Run the scheduler                                      */
 80029e6:	f001 f93f 	bl	8003c68 <OSSched>
    }
   *p_err = OS_ERR_NONE;
 80029ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ec:	2200      	movs	r2, #0
 80029ee:	801a      	strh	r2, [r3, #0]
}
 80029f0:	3728      	adds	r7, #40	; 0x28
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop

080029f8 <OSTaskCreate>:
                    OS_MSG_QTY     q_size,
                    OS_TICK        time_quanta,
                    void          *p_ext,
                    OS_OPT         opt,
                    OS_ERR        *p_err)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b08c      	sub	sp, #48	; 0x30
 80029fc:	af02      	add	r7, sp, #8
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
 8002a04:	603b      	str	r3, [r7, #0]
    OS_TLS_ID      id;
#endif

    CPU_STK       *p_sp;
    CPU_STK       *p_stk_limit;
    CPU_SR_ALLOC();
 8002a06:	2300      	movs	r3, #0
 8002a08:	61bb      	str	r3, [r7, #24]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* ---------- CANNOT CREATE A TASK FROM AN ISR ---------- */
 8002a0a:	4b75      	ldr	r3, [pc, #468]	; (8002be0 <OSTaskCreate+0x1e8>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d004      	beq.n	8002a1c <OSTaskCreate+0x24>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_TASK_CREATE_ISR;
 8002a12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a14:	f247 124a 	movw	r2, #29002	; 0x714a
 8002a18:	801a      	strh	r2, [r3, #0]
        return;
 8002a1a:	e0dd      	b.n	8002bd8 <OSTaskCreate+0x1e0>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u                                  /* ---------------- VALIDATE ARGUMENTS ------------------ */
    if (p_tcb == (OS_TCB *)0) {                             /* User must supply a valid OS_TCB                        */
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d104      	bne.n	8002a2c <OSTaskCreate+0x34>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_TCB_INVALID;
 8002a22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a24:	f247 12ad 	movw	r2, #29101	; 0x71ad
 8002a28:	801a      	strh	r2, [r3, #0]
        return;
 8002a2a:	e0d5      	b.n	8002bd8 <OSTaskCreate+0x1e0>
    }
    if (p_task == (OS_TASK_PTR)0) {                         /* User must supply a valid task                          */
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d104      	bne.n	8002a3c <OSTaskCreate+0x44>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_TASK_INVALID;
 8002a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a34:	f247 124f 	movw	r2, #29007	; 0x714f
 8002a38:	801a      	strh	r2, [r3, #0]
        return;
 8002a3a:	e0cd      	b.n	8002bd8 <OSTaskCreate+0x1e0>
    }
    if (p_stk_base == (CPU_STK *)0) {                       /* User must supply a valid stack base address            */
 8002a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d104      	bne.n	8002a4c <OSTaskCreate+0x54>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_STK_INVALID;
 8002a42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a44:	f646 622f 	movw	r2, #28207	; 0x6e2f
 8002a48:	801a      	strh	r2, [r3, #0]
        return;
 8002a4a:	e0c5      	b.n	8002bd8 <OSTaskCreate+0x1e0>
    }
    if (stk_size < OSCfg_StkSizeMin) {                      /* User must supply a valid minimum stack size            */
 8002a4c:	4b65      	ldr	r3, [pc, #404]	; (8002be4 <OSTaskCreate+0x1ec>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d204      	bcs.n	8002a60 <OSTaskCreate+0x68>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_STK_SIZE_INVALID;
 8002a56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a58:	f646 6230 	movw	r2, #28208	; 0x6e30
 8002a5c:	801a      	strh	r2, [r3, #0]
        return;
 8002a5e:	e0bb      	b.n	8002bd8 <OSTaskCreate+0x1e0>
    }
    if (stk_limit >= stk_size) {                            /* User must supply a valid stack limit                   */
 8002a60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d304      	bcc.n	8002a72 <OSTaskCreate+0x7a>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_STK_LIMIT_INVALID;
 8002a68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a6a:	f646 6231 	movw	r2, #28209	; 0x6e31
 8002a6e:	801a      	strh	r2, [r3, #0]
        return;
 8002a70:	e0b2      	b.n	8002bd8 <OSTaskCreate+0x1e0>
    }
    if (prio >= OS_CFG_PRIO_MAX) {                          /* Priority must be within 0 and OS_CFG_PRIO_MAX-1        */
 8002a72:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002a76:	2b1f      	cmp	r3, #31
 8002a78:	d904      	bls.n	8002a84 <OSTaskCreate+0x8c>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_PRIO_INVALID;
 8002a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a7c:	f246 2273 	movw	r2, #25203	; 0x6273
 8002a80:	801a      	strh	r2, [r3, #0]
        return;
 8002a82:	e0a9      	b.n	8002bd8 <OSTaskCreate+0x1e0>
            return;
        }
    }
#endif

    if (prio == (OS_CFG_PRIO_MAX - 1u)) {
 8002a84:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002a88:	2b1f      	cmp	r3, #31
 8002a8a:	d108      	bne.n	8002a9e <OSTaskCreate+0xa6>
        if (p_tcb != &OSIdleTaskTCB) {
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	4a56      	ldr	r2, [pc, #344]	; (8002be8 <OSTaskCreate+0x1f0>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d004      	beq.n	8002a9e <OSTaskCreate+0xa6>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
            TRACE_OS_TASK_CREATE_FAILED(p_tcb);             /* Record the event.                                      */
#endif
           *p_err = OS_ERR_PRIO_INVALID;                    /* Not allowed to use same priority as idle task          */
 8002a94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a96:	f246 2273 	movw	r2, #25203	; 0x6273
 8002a9a:	801a      	strh	r2, [r3, #0]
            return;
 8002a9c:	e09c      	b.n	8002bd8 <OSTaskCreate+0x1e0>
        }
    }

    OS_TaskInitTCB(p_tcb);                                  /* Initialize the TCB to default values                   */
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 faca 	bl	8003038 <OS_TaskInitTCB>

   *p_err = OS_ERR_NONE;
 8002aa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	801a      	strh	r2, [r3, #0]
                                                            /* --------------- CLEAR THE TASK'S STACK --------------- */
    if ((opt & OS_OPT_TASK_STK_CHK) != (OS_OPT)0) {         /* See if stack checking has been enabled                 */
 8002aaa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d017      	beq.n	8002ae6 <OSTaskCreate+0xee>
        if ((opt & OS_OPT_TASK_STK_CLR) != (OS_OPT)0) {     /* See if stack needs to be cleared                       */
 8002ab6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d011      	beq.n	8002ae6 <OSTaskCreate+0xee>
            p_sp = p_stk_base;
 8002ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ac4:	61fb      	str	r3, [r7, #28]
            for (i = 0u; i < stk_size; i++) {               /* Stack grows from HIGH to LOW memory                    */
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aca:	e008      	b.n	8002ade <OSTaskCreate+0xe6>
               *p_sp = (CPU_STK)0;                          /* Clear from bottom of stack and up!                     */
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]
                p_sp++;
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	3304      	adds	r3, #4
 8002ad6:	61fb      	str	r3, [r7, #28]
   *p_err = OS_ERR_NONE;
                                                            /* --------------- CLEAR THE TASK'S STACK --------------- */
    if ((opt & OS_OPT_TASK_STK_CHK) != (OS_OPT)0) {         /* See if stack checking has been enabled                 */
        if ((opt & OS_OPT_TASK_STK_CLR) != (OS_OPT)0) {     /* See if stack needs to be cleared                       */
            p_sp = p_stk_base;
            for (i = 0u; i < stk_size; i++) {               /* Stack grows from HIGH to LOW memory                    */
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	3301      	adds	r3, #1
 8002adc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d3f2      	bcc.n	8002acc <OSTaskCreate+0xd4>
            }
        }
    }
                                                            /* ------- INITIALIZE THE STACK FRAME OF THE TASK ------- */
#if (CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO)
    p_stk_limit = p_stk_base + stk_limit;
 8002ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002aec:	4413      	add	r3, r2
 8002aee:	617b      	str	r3, [r7, #20]
#else
    p_stk_limit = p_stk_base + (stk_size - 1u) - stk_limit;
#endif

    p_sp = OSTaskStkInit(p_task,
 8002af0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002af4:	9301      	str	r3, [sp, #4]
 8002af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002afe:	6839      	ldr	r1, [r7, #0]
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f003 fdcf 	bl	80066a4 <OSTaskStkInit>
 8002b06:	61f8      	str	r0, [r7, #28]
                         stk_size,
                         opt);

                                                            /* -------------- INITIALIZE THE TCB FIELDS ------------- */
#if OS_CFG_DBG_EN > 0u
    p_tcb->TaskEntryAddr = p_task;                          /* Save task entry point address                          */
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	629a      	str	r2, [r3, #40]	; 0x28
    p_tcb->TaskEntryArg  = p_arg;                           /* Save task entry argument                               */
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	62da      	str	r2, [r3, #44]	; 0x2c
#endif

#if OS_CFG_DBG_EN > 0u
    p_tcb->NamePtr       = p_name;                          /* Save task name                                         */
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	621a      	str	r2, [r3, #32]
#else
    (void)&p_name;
#endif

    p_tcb->Prio          = prio;                            /* Save the task's priority                               */
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002b20:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

#if OS_CFG_MUTEX_EN > 0u
    p_tcb->BasePrio      = prio;                            /* Set the base priority                                  */
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002b2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
#endif

    p_tcb->StkPtr        = p_sp;                            /* Save the new top-of-stack pointer                      */
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	69fa      	ldr	r2, [r7, #28]
 8002b32:	601a      	str	r2, [r3, #0]
#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u))
    p_tcb->StkLimitPtr   = p_stk_limit;                     /* Save the stack limit pointer                           */
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	609a      	str	r2, [r3, #8]
    }
#else
    (void)&time_quanta;
#endif

    p_tcb->ExtPtr        = p_ext;                           /* Save pointer to TCB extension                          */
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b3e:	605a      	str	r2, [r3, #4]
#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u))
    p_tcb->StkBasePtr    = p_stk_base;                      /* Save pointer to the base address of the stack          */
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b44:	625a      	str	r2, [r3, #36]	; 0x24
    p_tcb->StkSize       = stk_size;                        /* Save the stack size (in number of CPU_STK elements)    */
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b4a:	641a      	str	r2, [r3, #64]	; 0x40
#endif
    p_tcb->Opt           = opt;                             /* Save task options                                      */
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002b52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if OS_CFG_TASK_REG_TBL_SIZE > 0u
    for (reg_nbr = 0u; reg_nbr < OS_CFG_TASK_REG_TBL_SIZE; reg_nbr++) {
 8002b56:	2300      	movs	r3, #0
 8002b58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b5c:	e00b      	b.n	8002b76 <OSTaskCreate+0x17e>
        p_tcb->RegTbl[reg_nbr] = (OS_REG)0;
 8002b5e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	321e      	adds	r2, #30
 8002b66:	2100      	movs	r1, #0
 8002b68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    p_tcb->StkSize       = stk_size;                        /* Save the stack size (in number of CPU_STK elements)    */
#endif
    p_tcb->Opt           = opt;                             /* Save task options                                      */

#if OS_CFG_TASK_REG_TBL_SIZE > 0u
    for (reg_nbr = 0u; reg_nbr < OS_CFG_TASK_REG_TBL_SIZE; reg_nbr++) {
 8002b6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b70:	3301      	adds	r3, #1
 8002b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0ef      	beq.n	8002b5e <OSTaskCreate+0x166>
        p_tcb->RegTbl[reg_nbr] = (OS_REG)0;
    }
#endif

#if OS_CFG_TASK_Q_EN > 0u
    OS_MsgQInit(&p_tcb->MsgQ,                               /* Initialize the task's message queue                    */
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	3360      	adds	r3, #96	; 0x60
 8002b82:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002b86:	4611      	mov	r1, r2
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f000 fdf3 	bl	8003774 <OS_MsgQInit>
                q_size);
#else
    (void)&q_size;
#endif

    OSTaskCreateHook(p_tcb);                                /* Call user defined hook                                 */
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f003 fd64 	bl	800665c <OSTaskCreateHook>
        p_tcb->TLS_Tbl[id] = (OS_TLS)0;
    }
    OS_TLS_TaskCreate(p_tcb);                               /* Call TLS hook                                          */
#endif
                                                            /* --------------- ADD TASK TO READY LIST --------------- */
    OS_CRITICAL_ENTER();
 8002b94:	f7fd fba4 	bl	80002e0 <CPU_SR_Save>
 8002b98:	61b8      	str	r0, [r7, #24]
    OS_PrioInsert(p_tcb->Prio);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f002 fc9d 	bl	80054e0 <OS_PrioInsert>
    OS_RdyListInsertTail(p_tcb);
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f001 fd14 	bl	80045d4 <OS_RdyListInsertTail>

#if OS_CFG_DBG_EN > 0u
    OS_TaskDbgListAdd(p_tcb);
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f000 fa01 	bl	8002fb4 <OS_TaskDbgListAdd>
#endif

    OSTaskQty++;                                            /* Increment the #tasks counter                           */
 8002bb2:	4b0e      	ldr	r3, [pc, #56]	; (8002bec <OSTaskCreate+0x1f4>)
 8002bb4:	881b      	ldrh	r3, [r3, #0]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	4b0c      	ldr	r3, [pc, #48]	; (8002bec <OSTaskCreate+0x1f4>)
 8002bbc:	801a      	strh	r2, [r3, #0]

    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Return if multitasking has not started                 */
 8002bbe:	4b0c      	ldr	r3, [pc, #48]	; (8002bf0 <OSTaskCreate+0x1f8>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d003      	beq.n	8002bce <OSTaskCreate+0x1d6>
        OS_CRITICAL_EXIT();
 8002bc6:	69b8      	ldr	r0, [r7, #24]
 8002bc8:	f7fd fb8e 	bl	80002e8 <CPU_SR_Restore>
        return;
 8002bcc:	e004      	b.n	8002bd8 <OSTaskCreate+0x1e0>
    }

    OS_CRITICAL_EXIT_NO_SCHED();
 8002bce:	69b8      	ldr	r0, [r7, #24]
 8002bd0:	f7fd fb8a 	bl	80002e8 <CPU_SR_Restore>

    OSSched();
 8002bd4:	f001 f848 	bl	8003c68 <OSSched>
}
 8002bd8:	3728      	adds	r7, #40	; 0x28
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	20002234 	.word	0x20002234
 8002be4:	0800f098 	.word	0x0800f098
 8002be8:	20002304 	.word	0x20002304
 8002bec:	20002236 	.word	0x20002236
 8002bf0:	20001fad 	.word	0x20001fad

08002bf4 <OSTaskResume>:
*/

#if OS_CFG_TASK_SUSPEND_EN > 0u
void  OSTaskResume (OS_TCB  *p_tcb,
                    OS_ERR  *p_err)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
    CPU_SR_ALLOC();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60fb      	str	r3, [r7, #12]
    }
#endif

#if (OS_CFG_ISR_POST_DEFERRED_EN   == 0u) && \
    (OS_CFG_CALLED_FROM_ISR_CHK_EN >  0u)
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 8002c02:	4b13      	ldr	r3, [pc, #76]	; (8002c50 <OSTaskResume+0x5c>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d004      	beq.n	8002c14 <OSTaskResume+0x20>
       *p_err = OS_ERR_TASK_RESUME_ISR;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	f247 1255 	movw	r2, #29013	; 0x7155
 8002c10:	801a      	strh	r2, [r3, #0]
        return;
 8002c12:	e019      	b.n	8002c48 <OSTaskResume+0x54>
    }
#endif


    CPU_CRITICAL_ENTER();
 8002c14:	f7fd fb64 	bl	80002e0 <CPU_SR_Save>
 8002c18:	60f8      	str	r0, [r7, #12]
#if OS_CFG_ARG_CHK_EN > 0u
    if ((p_tcb == (OS_TCB *)0) ||                           /* We cannot resume 'self'                                */
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d004      	beq.n	8002c2a <OSTaskResume+0x36>
        (p_tcb == OSTCBCurPtr)) {
 8002c20:	4b0c      	ldr	r3, [pc, #48]	; (8002c54 <OSTaskResume+0x60>)
 8002c22:	681b      	ldr	r3, [r3, #0]
#endif


    CPU_CRITICAL_ENTER();
#if OS_CFG_ARG_CHK_EN > 0u
    if ((p_tcb == (OS_TCB *)0) ||                           /* We cannot resume 'self'                                */
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d107      	bne.n	8002c3a <OSTaskResume+0x46>
        (p_tcb == OSTCBCurPtr)) {
        CPU_CRITICAL_EXIT();
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f7fd fb5c 	bl	80002e8 <CPU_SR_Restore>
       *p_err  = OS_ERR_TASK_RESUME_SELF;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	f247 1257 	movw	r2, #29015	; 0x7157
 8002c36:	801a      	strh	r2, [r3, #0]
        return;
 8002c38:	e006      	b.n	8002c48 <OSTaskResume+0x54>
    }
#endif
    CPU_CRITICAL_EXIT();
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f7fd fb54 	bl	80002e8 <CPU_SR_Restore>
                    (OS_ERR    *)p_err);
        return;
    }
#endif

    OS_TaskResume(p_tcb, p_err);
 8002c40:	6839      	ldr	r1, [r7, #0]
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 fac6 	bl	80031d4 <OS_TaskResume>

#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_TASK_RESUME(p_tcb);                            /* Record the event.                                      */
#endif
}
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	20002234 	.word	0x20002234
 8002c54:	20002208 	.word	0x20002208

08002c58 <OSTaskSemPend>:

OS_SEM_CTR  OSTaskSemPend (OS_TICK   timeout,
                           OS_OPT    opt,
                           CPU_TS   *p_ts,
                           OS_ERR   *p_err)
{
 8002c58:	b590      	push	{r4, r7, lr}
 8002c5a:	b087      	sub	sp, #28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	607a      	str	r2, [r7, #4]
 8002c62:	603b      	str	r3, [r7, #0]
 8002c64:	460b      	mov	r3, r1
 8002c66:	817b      	strh	r3, [r7, #10]
    OS_SEM_CTR    ctr;
    CPU_SR_ALLOC();
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]
        return ((OS_SEM_CTR)0);
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 8002c6c:	4b6f      	ldr	r3, [pc, #444]	; (8002e2c <OSTaskSemPend+0x1d4>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <OSTaskSemPend+0x28>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_SEM_PEND_FAILED(OSTCBCurPtr);         /* Record the event.                                      */
#endif
       *p_err = OS_ERR_PEND_ISR;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	f246 12ae 	movw	r2, #25006	; 0x61ae
 8002c7a:	801a      	strh	r2, [r3, #0]
        return ((OS_SEM_CTR)0);
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	e0d0      	b.n	8002e22 <OSTaskSemPend+0x1ca>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    switch (opt) {                                          /* Validate 'opt'                                         */
 8002c80:	897b      	ldrh	r3, [r7, #10]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d008      	beq.n	8002c98 <OSTaskSemPend+0x40>
 8002c86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c8a:	d005      	beq.n	8002c98 <OSTaskSemPend+0x40>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_TASK_SEM_PEND_FAILED(OSTCBCurPtr);    /* Record the event.                                      */
#endif
            *p_err = OS_ERR_OPT_INVALID;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	f645 6225 	movw	r2, #24101	; 0x5e25
 8002c92:	801a      	strh	r2, [r3, #0]
             return ((OS_SEM_CTR)0);
 8002c94:	2300      	movs	r3, #0
 8002c96:	e0c4      	b.n	8002e22 <OSTaskSemPend+0x1ca>

#if OS_CFG_ARG_CHK_EN > 0u
    switch (opt) {                                          /* Validate 'opt'                                         */
        case OS_OPT_PEND_BLOCKING:
        case OS_OPT_PEND_NON_BLOCKING:
             break;
 8002c98:	bf00      	nop
            *p_err = OS_ERR_OPT_INVALID;
             return ((OS_SEM_CTR)0);
    }
#endif

    if (p_ts != (CPU_TS *)0) {
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d002      	beq.n	8002ca6 <OSTaskSemPend+0x4e>
       *p_ts  = (CPU_TS  )0;                                /* Initialize the returned timestamp                      */
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
    }

    CPU_CRITICAL_ENTER();
 8002ca6:	f7fd fb1b 	bl	80002e0 <CPU_SR_Save>
 8002caa:	6178      	str	r0, [r7, #20]
    if (OSTCBCurPtr->SemCtr > (OS_SEM_CTR)0) {              /* See if task already been signaled                      */
 8002cac:	4b60      	ldr	r3, [pc, #384]	; (8002e30 <OSTaskSemPend+0x1d8>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d035      	beq.n	8002d22 <OSTaskSemPend+0xca>
        OSTCBCurPtr->SemCtr--;
 8002cb6:	4b5e      	ldr	r3, [pc, #376]	; (8002e30 <OSTaskSemPend+0x1d8>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cbc:	3a01      	subs	r2, #1
 8002cbe:	64da      	str	r2, [r3, #76]	; 0x4c
        ctr    = OSTCBCurPtr->SemCtr;
 8002cc0:	4b5b      	ldr	r3, [pc, #364]	; (8002e30 <OSTaskSemPend+0x1d8>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc6:	613b      	str	r3, [r7, #16]
        if (p_ts != (CPU_TS *)0) {
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d004      	beq.n	8002cd8 <OSTaskSemPend+0x80>
           *p_ts  = OSTCBCurPtr->TS;
 8002cce:	4b58      	ldr	r3, [pc, #352]	; (8002e30 <OSTaskSemPend+0x1d8>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	601a      	str	r2, [r3, #0]
        }
#if OS_CFG_TASK_PROFILE_EN > 0u
        OSTCBCurPtr->SemPendTime = OS_TS_GET() - OSTCBCurPtr->TS;
 8002cd8:	4b55      	ldr	r3, [pc, #340]	; (8002e30 <OSTaskSemPend+0x1d8>)
 8002cda:	681c      	ldr	r4, [r3, #0]
 8002cdc:	f004 fffe 	bl	8007cdc <CPU_TS_TmrRd>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	4b53      	ldr	r3, [pc, #332]	; (8002e30 <OSTaskSemPend+0x1d8>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        if (OSTCBCurPtr->SemPendTimeMax < OSTCBCurPtr->SemPendTime) {
 8002cee:	4b50      	ldr	r3, [pc, #320]	; (8002e30 <OSTaskSemPend+0x1d8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002cf6:	4b4e      	ldr	r3, [pc, #312]	; (8002e30 <OSTaskSemPend+0x1d8>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d207      	bcs.n	8002d12 <OSTaskSemPend+0xba>
            OSTCBCurPtr->SemPendTimeMax = OSTCBCurPtr->SemPendTime;
 8002d02:	4b4b      	ldr	r3, [pc, #300]	; (8002e30 <OSTaskSemPend+0x1d8>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a4a      	ldr	r2, [pc, #296]	; (8002e30 <OSTaskSemPend+0x1d8>)
 8002d08:	6812      	ldr	r2, [r2, #0]
 8002d0a:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 8002d0e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        }
#endif
        CPU_CRITICAL_EXIT();
 8002d12:	6978      	ldr	r0, [r7, #20]
 8002d14:	f7fd fae8 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_SEM_PEND(OSTCBCurPtr);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_NONE;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	801a      	strh	r2, [r3, #0]
        return (ctr);
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	e07f      	b.n	8002e22 <OSTaskSemPend+0x1ca>
    }

    if ((opt & OS_OPT_PEND_NON_BLOCKING) != (OS_OPT)0) {    /* Caller wants to block if not available?                */
 8002d22:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	da08      	bge.n	8002d3c <OSTaskSemPend+0xe4>
        CPU_CRITICAL_EXIT();        
 8002d2a:	6978      	ldr	r0, [r7, #20]
 8002d2c:	f7fd fadc 	bl	80002e8 <CPU_SR_Restore>
       *p_err = OS_ERR_PEND_WOULD_BLOCK;                    /* No                                                     */
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	f246 12b0 	movw	r2, #25008	; 0x61b0
 8002d36:	801a      	strh	r2, [r3, #0]
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_SEM_PEND_FAILED(OSTCBCurPtr);         /* Record the event.                                      */
#endif
        return ((OS_SEM_CTR)0);
 8002d38:	2300      	movs	r3, #0
 8002d3a:	e072      	b.n	8002e22 <OSTaskSemPend+0x1ca>
    } else {                                                /* Yes                                                    */
        if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /* Can't pend when the scheduler is locked                */
 8002d3c:	4b3d      	ldr	r3, [pc, #244]	; (8002e34 <OSTaskSemPend+0x1dc>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d008      	beq.n	8002d56 <OSTaskSemPend+0xfe>
            CPU_CRITICAL_EXIT();
 8002d44:	6978      	ldr	r0, [r7, #20]
 8002d46:	f7fd facf 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
            TRACE_OS_TASK_SEM_PEND_FAILED(OSTCBCurPtr);     /* Record the event.                                      */
#endif
           *p_err = OS_ERR_SCHED_LOCKED;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	f646 5263 	movw	r2, #28003	; 0x6d63
 8002d50:	801a      	strh	r2, [r3, #0]
            return ((OS_SEM_CTR)0);
 8002d52:	2300      	movs	r3, #0
 8002d54:	e065      	b.n	8002e22 <OSTaskSemPend+0x1ca>
        }
    }
                                                            /* Lock the scheduler/re-enable interrupts                */
    OS_CRITICAL_ENTER_CPU_EXIT();
    OS_Pend((OS_PEND_DATA *)0,                              /* Block task pending on Signal                           */
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2207      	movs	r2, #7
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	f001 f8ef 	bl	8003f40 <OS_Pend>
            (OS_PEND_OBJ  *)0,
            (OS_STATE      )OS_TASK_PEND_ON_TASK_SEM,
            (OS_TICK       )timeout);
    OS_CRITICAL_EXIT_NO_SCHED();
 8002d62:	6978      	ldr	r0, [r7, #20]
 8002d64:	f7fd fac0 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_TASK_SEM_PEND_BLOCK(OSTCBCurPtr);              /* Record the event.                                      */
#endif
    OSSched();                                              /* Find next highest priority task ready to run           */
 8002d68:	f000 ff7e 	bl	8003c68 <OSSched>

    CPU_CRITICAL_ENTER();
 8002d6c:	f7fd fab8 	bl	80002e0 <CPU_SR_Save>
 8002d70:	6178      	str	r0, [r7, #20]
    switch (OSTCBCurPtr->PendStatus) {                      /* See if we timed-out or aborted                         */
 8002d72:	4b2f      	ldr	r3, [pc, #188]	; (8002e30 <OSTaskSemPend+0x1d8>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d02c      	beq.n	8002dd8 <OSTaskSemPend+0x180>
 8002d7e:	2b03      	cmp	r3, #3
 8002d80:	d037      	beq.n	8002df2 <OSTaskSemPend+0x19a>
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d140      	bne.n	8002e08 <OSTaskSemPend+0x1b0>
        case OS_STATUS_PEND_OK:
             if (p_ts != (CPU_TS *)0) {
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d021      	beq.n	8002dd0 <OSTaskSemPend+0x178>
                *p_ts                    =  OSTCBCurPtr->TS;
 8002d8c:	4b28      	ldr	r3, [pc, #160]	; (8002e30 <OSTaskSemPend+0x1d8>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	601a      	str	r2, [r3, #0]
#if OS_CFG_TASK_PROFILE_EN > 0u
                OSTCBCurPtr->SemPendTime = OS_TS_GET() - OSTCBCurPtr->TS;
 8002d96:	4b26      	ldr	r3, [pc, #152]	; (8002e30 <OSTaskSemPend+0x1d8>)
 8002d98:	681c      	ldr	r4, [r3, #0]
 8002d9a:	f004 ff9f 	bl	8007cdc <CPU_TS_TmrRd>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	4b23      	ldr	r3, [pc, #140]	; (8002e30 <OSTaskSemPend+0x1d8>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
                if (OSTCBCurPtr->SemPendTimeMax < OSTCBCurPtr->SemPendTime) {
 8002dac:	4b20      	ldr	r3, [pc, #128]	; (8002e30 <OSTaskSemPend+0x1d8>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002db4:	4b1e      	ldr	r3, [pc, #120]	; (8002e30 <OSTaskSemPend+0x1d8>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d207      	bcs.n	8002dd0 <OSTaskSemPend+0x178>
                    OSTCBCurPtr->SemPendTimeMax = OSTCBCurPtr->SemPendTime;
 8002dc0:	4b1b      	ldr	r3, [pc, #108]	; (8002e30 <OSTaskSemPend+0x1d8>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a1a      	ldr	r2, [pc, #104]	; (8002e30 <OSTaskSemPend+0x1d8>)
 8002dc6:	6812      	ldr	r2, [r2, #0]
 8002dc8:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 8002dcc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#endif
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_TASK_SEM_PEND(OSTCBCurPtr);           /* Record the event.                                      */
#endif
            *p_err = OS_ERR_NONE;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	801a      	strh	r2, [r3, #0]
             break;
 8002dd6:	e01c      	b.n	8002e12 <OSTaskSemPend+0x1ba>

        case OS_STATUS_PEND_ABORT:
             if (p_ts != (CPU_TS *)0) {
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d004      	beq.n	8002de8 <OSTaskSemPend+0x190>
                *p_ts  =  OSTCBCurPtr->TS;
 8002dde:	4b14      	ldr	r3, [pc, #80]	; (8002e30 <OSTaskSemPend+0x1d8>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_TASK_SEM_PEND_FAILED(OSTCBCurPtr);    /* Record the event.                                      */
#endif
            *p_err = OS_ERR_PEND_ABORT;                     /* Indicate that we aborted                               */
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	f246 12a9 	movw	r2, #25001	; 0x61a9
 8002dee:	801a      	strh	r2, [r3, #0]
             break;
 8002df0:	e00f      	b.n	8002e12 <OSTaskSemPend+0x1ba>

        case OS_STATUS_PEND_TIMEOUT:
             if (p_ts != (CPU_TS *)0) {
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d002      	beq.n	8002dfe <OSTaskSemPend+0x1a6>
                *p_ts  = (CPU_TS  )0;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_TASK_SEM_PEND_FAILED(OSTCBCurPtr);    /* Record the event.                                      */
#endif
            *p_err = OS_ERR_TIMEOUT;                        /* Indicate that we didn't get event within TO            */
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	f247 22d9 	movw	r2, #29401	; 0x72d9
 8002e04:	801a      	strh	r2, [r3, #0]
             break;
 8002e06:	e004      	b.n	8002e12 <OSTaskSemPend+0x1ba>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_TASK_SEM_PEND_FAILED(OSTCBCurPtr);    /* Record the event.                                      */
#endif
            *p_err = OS_ERR_STATUS_INVALID;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	f646 622e 	movw	r2, #28206	; 0x6e2e
 8002e0e:	801a      	strh	r2, [r3, #0]
             break;
 8002e10:	bf00      	nop
    }
    ctr = OSTCBCurPtr->SemCtr;
 8002e12:	4b07      	ldr	r3, [pc, #28]	; (8002e30 <OSTaskSemPend+0x1d8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e18:	613b      	str	r3, [r7, #16]
    CPU_CRITICAL_EXIT();
 8002e1a:	6978      	ldr	r0, [r7, #20]
 8002e1c:	f7fd fa64 	bl	80002e8 <CPU_SR_Restore>
    return (ctr);
 8002e20:	693b      	ldr	r3, [r7, #16]
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	371c      	adds	r7, #28
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd90      	pop	{r4, r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	20002234 	.word	0x20002234
 8002e30:	20002208 	.word	0x20002208
 8002e34:	20001f9c 	.word	0x20001f9c

08002e38 <OSTaskSemPost>:
*/

OS_SEM_CTR  OSTaskSemPost (OS_TCB  *p_tcb,
                           OS_OPT   opt,
                           OS_ERR  *p_err)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	460b      	mov	r3, r1
 8002e42:	607a      	str	r2, [r7, #4]
 8002e44:	817b      	strh	r3, [r7, #10]
        return ((OS_SEM_CTR)0);
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    switch (opt) {                                          /* Validate 'opt'                                         */
 8002e46:	897b      	ldrh	r3, [r7, #10]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d008      	beq.n	8002e5e <OSTaskSemPost+0x26>
 8002e4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e50:	d005      	beq.n	8002e5e <OSTaskSemPost+0x26>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_TASK_SEM_POST_FAILED(p_tcb);          /* Record the event.                                      */
#endif
            *p_err =  OS_ERR_OPT_INVALID;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f645 6225 	movw	r2, #24101	; 0x5e25
 8002e58:	801a      	strh	r2, [r3, #0]
             return ((OS_SEM_CTR)0u);
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	e00b      	b.n	8002e76 <OSTaskSemPost+0x3e>

#if OS_CFG_ARG_CHK_EN > 0u
    switch (opt) {                                          /* Validate 'opt'                                         */
        case OS_OPT_POST_NONE:
        case OS_OPT_POST_NO_SCHED:
             break;
 8002e5e:	bf00      	nop
            *p_err =  OS_ERR_OPT_INVALID;
             return ((OS_SEM_CTR)0u);
    }
#endif

    ts = OS_TS_GET();                                       /* Get timestamp                                          */
 8002e60:	f004 ff3c 	bl	8007cdc <CPU_TS_TmrRd>
 8002e64:	6178      	str	r0, [r7, #20]

#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_TASK_SEM_POST(p_tcb);                          /* Record the event.                                      */
#endif

    ctr = OS_TaskSemPost(p_tcb,
 8002e66:	8979      	ldrh	r1, [r7, #10]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 fa57 	bl	8003320 <OS_TaskSemPost>
 8002e72:	6138      	str	r0, [r7, #16]
                         opt,
                         ts,
                         p_err);

    return (ctr);
 8002e74:	693b      	ldr	r3, [r7, #16]
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3718      	adds	r7, #24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop

08002e80 <OSTaskStkChk>:
#if OS_CFG_STAT_TASK_STK_CHK_EN > 0u
void  OSTaskStkChk (OS_TCB        *p_tcb,
                    CPU_STK_SIZE  *p_free,
                    CPU_STK_SIZE  *p_used,
                    OS_ERR        *p_err)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b088      	sub	sp, #32
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
 8002e8c:	603b      	str	r3, [r7, #0]
    CPU_STK_SIZE  free_stk;
    CPU_STK      *p_stk;
    CPU_SR_ALLOC();
 8002e8e:	2300      	movs	r3, #0
 8002e90:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* See if trying to check stack from ISR                  */
 8002e92:	4b35      	ldr	r3, [pc, #212]	; (8002f68 <OSTaskStkChk+0xe8>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d004      	beq.n	8002ea4 <OSTaskStkChk+0x24>
       *p_err = OS_ERR_TASK_STK_CHK_ISR;
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	f247 1259 	movw	r2, #29017	; 0x7159
 8002ea0:	801a      	strh	r2, [r3, #0]
        return;
 8002ea2:	e05e      	b.n	8002f62 <OSTaskStkChk+0xe2>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_free == (CPU_STK_SIZE*)0) {                       /* User must specify valid destinations for the sizes     */
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d104      	bne.n	8002eb4 <OSTaskStkChk+0x34>
       *p_err  = OS_ERR_PTR_INVALID;
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	f246 22d5 	movw	r2, #25301	; 0x62d5
 8002eb0:	801a      	strh	r2, [r3, #0]
        return;
 8002eb2:	e056      	b.n	8002f62 <OSTaskStkChk+0xe2>
    }

    if (p_used == (CPU_STK_SIZE*)0) {
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d104      	bne.n	8002ec4 <OSTaskStkChk+0x44>
       *p_err  = OS_ERR_PTR_INVALID;
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	f246 22d5 	movw	r2, #25301	; 0x62d5
 8002ec0:	801a      	strh	r2, [r3, #0]
        return;
 8002ec2:	e04e      	b.n	8002f62 <OSTaskStkChk+0xe2>
    }
#endif

    CPU_CRITICAL_ENTER();
 8002ec4:	f7fd fa0c 	bl	80002e0 <CPU_SR_Save>
 8002ec8:	6178      	str	r0, [r7, #20]
    if (p_tcb == (OS_TCB *)0) {                             /* Check the stack of the current task?                   */
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d102      	bne.n	8002ed6 <OSTaskStkChk+0x56>
        p_tcb = OSTCBCurPtr;                                /* Yes                                                    */
 8002ed0:	4b26      	ldr	r3, [pc, #152]	; (8002f6c <OSTaskStkChk+0xec>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	60fb      	str	r3, [r7, #12]
    }

    if (p_tcb->StkPtr == (CPU_STK*)0) {                     /* Make sure task exist                                   */
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10d      	bne.n	8002efa <OSTaskStkChk+0x7a>
        CPU_CRITICAL_EXIT();
 8002ede:	6978      	ldr	r0, [r7, #20]
 8002ee0:	f7fd fa02 	bl	80002e8 <CPU_SR_Restore>
       *p_free = (CPU_STK_SIZE)0;
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	601a      	str	r2, [r3, #0]
       *p_used = (CPU_STK_SIZE)0;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
       *p_err  =  OS_ERR_TASK_NOT_EXIST;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	f247 1252 	movw	r2, #29010	; 0x7152
 8002ef6:	801a      	strh	r2, [r3, #0]
        return;
 8002ef8:	e033      	b.n	8002f62 <OSTaskStkChk+0xe2>
    }

    if ((p_tcb->Opt & OS_OPT_TASK_STK_CHK) == (OS_OPT)0) {  /* Make sure stack checking option is set                 */
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10d      	bne.n	8002f24 <OSTaskStkChk+0xa4>
        CPU_CRITICAL_EXIT();
 8002f08:	6978      	ldr	r0, [r7, #20]
 8002f0a:	f7fd f9ed 	bl	80002e8 <CPU_SR_Restore>
       *p_free = (CPU_STK_SIZE)0;
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]
       *p_used = (CPU_STK_SIZE)0;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	601a      	str	r2, [r3, #0]
       *p_err  =  OS_ERR_TASK_OPT;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	f247 1254 	movw	r2, #29012	; 0x7154
 8002f20:	801a      	strh	r2, [r3, #0]
        return;
 8002f22:	e01e      	b.n	8002f62 <OSTaskStkChk+0xe2>
    }
    CPU_CRITICAL_EXIT();
 8002f24:	6978      	ldr	r0, [r7, #20]
 8002f26:	f7fd f9df 	bl	80002e8 <CPU_SR_Restore>

    free_stk  = 0u;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	61fb      	str	r3, [r7, #28]
#if CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO
    p_stk = p_tcb->StkBasePtr;                              /* Start at the lowest memory and go up                   */
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	61bb      	str	r3, [r7, #24]
    while (*p_stk == (CPU_STK)0) {                          /* Compute the number of zero entries on the stk          */
 8002f34:	e005      	b.n	8002f42 <OSTaskStkChk+0xc2>
        p_stk++;
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	3304      	adds	r3, #4
 8002f3a:	61bb      	str	r3, [r7, #24]
        free_stk++;
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	61fb      	str	r3, [r7, #28]
    CPU_CRITICAL_EXIT();

    free_stk  = 0u;
#if CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO
    p_stk = p_tcb->StkBasePtr;                              /* Start at the lowest memory and go up                   */
    while (*p_stk == (CPU_STK)0) {                          /* Compute the number of zero entries on the stk          */
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0f5      	beq.n	8002f36 <OSTaskStkChk+0xb6>
    while (*p_stk == (CPU_STK)0) {
        free_stk++;
        p_stk--;
    }
#endif
   *p_free = free_stk;
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	69fa      	ldr	r2, [r7, #28]
 8002f4e:	601a      	str	r2, [r3, #0]
   *p_used = (p_tcb->StkSize - free_stk);                   /* Compute number of entries used on the stack            */
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	1ad2      	subs	r2, r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	601a      	str	r2, [r3, #0]
   *p_err  = OS_ERR_NONE;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	801a      	strh	r2, [r3, #0]
}
 8002f62:	3720      	adds	r7, #32
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	20002234 	.word	0x20002234
 8002f6c:	20002208 	.word	0x20002208

08002f70 <OSTaskSuspend>:
*/

#if OS_CFG_TASK_SUSPEND_EN > 0u
void   OSTaskSuspend (OS_TCB  *p_tcb,
                      OS_ERR  *p_err)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
    }
#endif

#if (OS_CFG_ISR_POST_DEFERRED_EN   == 0u) && \
    (OS_CFG_CALLED_FROM_ISR_CHK_EN >  0u)
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 8002f7a:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <OSTaskSuspend+0x3c>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d004      	beq.n	8002f8c <OSTaskSuspend+0x1c>
       *p_err = OS_ERR_TASK_SUSPEND_ISR;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	f247 125d 	movw	r2, #29021	; 0x715d
 8002f88:	801a      	strh	r2, [r3, #0]
        return;
 8002f8a:	e00c      	b.n	8002fa6 <OSTaskSuspend+0x36>
    }
#endif

    if (p_tcb == &OSIdleTaskTCB) {                          /* Make sure not suspending the idle task                 */
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a08      	ldr	r2, [pc, #32]	; (8002fb0 <OSTaskSuspend+0x40>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d104      	bne.n	8002f9e <OSTaskSuspend+0x2e>
       *p_err = OS_ERR_TASK_SUSPEND_IDLE;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	f247 125b 	movw	r2, #29019	; 0x715b
 8002f9a:	801a      	strh	r2, [r3, #0]
        return;
 8002f9c:	e003      	b.n	8002fa6 <OSTaskSuspend+0x36>
                    (OS_ERR    *)p_err);
        return;
    }
#endif

    OS_TaskSuspend(p_tcb, p_err);
 8002f9e:	6839      	ldr	r1, [r7, #0]
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 fa51 	bl	8003448 <OS_TaskSuspend>
}
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	20002234 	.word	0x20002234
 8002fb0:	20002304 	.word	0x20002304

08002fb4 <OS_TaskDbgListAdd>:
************************************************************************************************************************
*/

#if OS_CFG_DBG_EN > 0u
void  OS_TaskDbgListAdd (OS_TCB  *p_tcb)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
    p_tcb->DbgPrevPtr                = (OS_TCB *)0;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    if (OSTaskDbgListPtr == (OS_TCB *)0) {
 8002fc4:	4b0d      	ldr	r3, [pc, #52]	; (8002ffc <OS_TaskDbgListAdd+0x48>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d104      	bne.n	8002fd6 <OS_TaskDbgListAdd+0x22>
        p_tcb->DbgNextPtr            = (OS_TCB *)0;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8002fd4:	e009      	b.n	8002fea <OS_TaskDbgListAdd+0x36>
    } else {
        p_tcb->DbgNextPtr            =  OSTaskDbgListPtr;
 8002fd6:	4b09      	ldr	r3, [pc, #36]	; (8002ffc <OS_TaskDbgListAdd+0x48>)
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        OSTaskDbgListPtr->DbgPrevPtr =  p_tcb;
 8002fe0:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <OS_TaskDbgListAdd+0x48>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    }
    OSTaskDbgListPtr                 =  p_tcb;
 8002fea:	4a04      	ldr	r2, [pc, #16]	; (8002ffc <OS_TaskDbgListAdd+0x48>)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6013      	str	r3, [r2, #0]
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bc80      	pop	{r7}
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	2000221c 	.word	0x2000221c

08003000 <OS_TaskInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TaskInit (OS_ERR  *p_err)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSTaskDbgListPtr = (OS_TCB      *)0;
 8003008:	4b08      	ldr	r3, [pc, #32]	; (800302c <OS_TaskInit+0x2c>)
 800300a:	2200      	movs	r2, #0
 800300c:	601a      	str	r2, [r3, #0]
#endif

    OSTaskQty        = (OS_OBJ_QTY   )0;                    /* Clear the number of tasks                              */
 800300e:	4b08      	ldr	r3, [pc, #32]	; (8003030 <OS_TaskInit+0x30>)
 8003010:	2200      	movs	r2, #0
 8003012:	801a      	strh	r2, [r3, #0]
    OSTaskCtxSwCtr   = (OS_CTX_SW_CTR)0;                    /* Clear the context switch counter                       */
 8003014:	4b07      	ldr	r3, [pc, #28]	; (8003034 <OS_TaskInit+0x34>)
 8003016:	2200      	movs	r2, #0
 8003018:	601a      	str	r2, [r3, #0]

   *p_err            = OS_ERR_NONE;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	801a      	strh	r2, [r3, #0]
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	bc80      	pop	{r7}
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	2000221c 	.word	0x2000221c
 8003030:	20002236 	.word	0x20002236
 8003034:	20002230 	.word	0x20002230

08003038 <OS_TaskInitTCB>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TaskInitTCB (OS_TCB  *p_tcb)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
#if OS_CFG_TASK_PROFILE_EN > 0u
    CPU_TS      ts;
#endif


    p_tcb->StkPtr             = (CPU_STK       *)0;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	601a      	str	r2, [r3, #0]
#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u))
    p_tcb->StkLimitPtr        = (CPU_STK       *)0;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	609a      	str	r2, [r3, #8]
#endif

    p_tcb->ExtPtr             = (void          *)0;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	605a      	str	r2, [r3, #4]

    p_tcb->NextPtr            = (OS_TCB        *)0;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	60da      	str	r2, [r3, #12]
    p_tcb->PrevPtr            = (OS_TCB        *)0;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	611a      	str	r2, [r3, #16]

    p_tcb->TickNextPtr        = (OS_TCB        *)0;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	615a      	str	r2, [r3, #20]
    p_tcb->TickPrevPtr        = (OS_TCB        *)0;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	619a      	str	r2, [r3, #24]
    p_tcb->TickListPtr        = (OS_TICK_LIST  *)0;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	61da      	str	r2, [r3, #28]

#if OS_CFG_DBG_EN > 0u
    p_tcb->NamePtr            = (CPU_CHAR      *)((void *)"?Task");
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a56      	ldr	r2, [pc, #344]	; (80031cc <OS_TaskInitTCB+0x194>)
 8003074:	621a      	str	r2, [r3, #32]
#endif

#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u))
    p_tcb->StkBasePtr         = (CPU_STK       *)0;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	625a      	str	r2, [r3, #36]	; 0x24
#endif

#if OS_CFG_DBG_EN > 0u
    p_tcb->TaskEntryAddr      = (OS_TASK_PTR    )0;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	629a      	str	r2, [r3, #40]	; 0x28
    p_tcb->TaskEntryArg       = (void          *)0;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	62da      	str	r2, [r3, #44]	; 0x2c
#endif

#if (OS_CFG_PEND_MULTI_EN > 0u)
    p_tcb->PendDataTblPtr     = (OS_PEND_DATA  *)0;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	631a      	str	r2, [r3, #48]	; 0x30
    p_tcb->PendDataTblEntries = (OS_OBJ_QTY     )0u;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
#endif

    p_tcb->TS                 = (CPU_TS         )0u;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	649a      	str	r2, [r3, #72]	; 0x48

#if (OS_MSG_EN > 0u)
    p_tcb->MsgPtr             = (void          *)0;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	659a      	str	r2, [r3, #88]	; 0x58
    p_tcb->MsgSize            = (OS_MSG_SIZE    )0u;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
#endif

#if OS_CFG_TASK_Q_EN > 0u
    OS_MsgQInit(&p_tcb->MsgQ,
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	3360      	adds	r3, #96	; 0x60
 80030ae:	2100      	movs	r1, #0
 80030b0:	4618      	mov	r0, r3
 80030b2:	f000 fb5f 	bl	8003774 <OS_MsgQInit>
                (OS_MSG_QTY)0u);
#if OS_CFG_TASK_PROFILE_EN > 0u
    p_tcb->MsgQPendTime       = (CPU_TS         )0u;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	671a      	str	r2, [r3, #112]	; 0x70
    p_tcb->MsgQPendTimeMax    = (CPU_TS         )0u;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	675a      	str	r2, [r3, #116]	; 0x74
#endif
#endif

#if OS_CFG_FLAG_EN > 0u
    p_tcb->FlagsPend          = (OS_FLAGS       )0u;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	67da      	str	r2, [r3, #124]	; 0x7c
    p_tcb->FlagsOpt           = (OS_OPT         )0u;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
    p_tcb->FlagsRdy           = (OS_FLAGS       )0u;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

#if OS_CFG_TASK_REG_TBL_SIZE > 0u
    for (reg_id = 0u; reg_id < OS_CFG_TASK_REG_TBL_SIZE; reg_id++) {
 80030d8:	2300      	movs	r3, #0
 80030da:	73fb      	strb	r3, [r7, #15]
 80030dc:	e008      	b.n	80030f0 <OS_TaskInitTCB+0xb8>
        p_tcb->RegTbl[reg_id] = (OS_REG)0u;
 80030de:	7bfa      	ldrb	r2, [r7, #15]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	321e      	adds	r2, #30
 80030e4:	2100      	movs	r1, #0
 80030e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    p_tcb->FlagsOpt           = (OS_OPT         )0u;
    p_tcb->FlagsRdy           = (OS_FLAGS       )0u;
#endif

#if OS_CFG_TASK_REG_TBL_SIZE > 0u
    for (reg_id = 0u; reg_id < OS_CFG_TASK_REG_TBL_SIZE; reg_id++) {
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
 80030ec:	3301      	adds	r3, #1
 80030ee:	73fb      	strb	r3, [r7, #15]
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0f3      	beq.n	80030de <OS_TaskInitTCB+0xa6>
    for (id = 0u; id < OS_CFG_TLS_TBL_SIZE; id++) {
        p_tcb->TLS_Tbl[id]    = (OS_TLS)0;
    }
#endif

    p_tcb->SemCtr             = (OS_SEM_CTR     )0u;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	64da      	str	r2, [r3, #76]	; 0x4c
#if OS_CFG_TASK_PROFILE_EN > 0u
    p_tcb->SemPendTime        = (CPU_TS         )0u;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    p_tcb->SemPendTimeMax     = (CPU_TS         )0u;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#endif

#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u))
    p_tcb->StkSize            = (CPU_STK_SIZE   )0u;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	641a      	str	r2, [r3, #64]	; 0x40
#endif


#if OS_CFG_TASK_SUSPEND_EN > 0u
    p_tcb->SuspendCtr         = (OS_NESTING_CTR )0u;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
#endif

#if OS_CFG_STAT_TASK_STK_CHK_EN > 0u
    p_tcb->StkFree            = (CPU_STK_SIZE   )0u;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    p_tcb->StkUsed            = (CPU_STK_SIZE   )0u;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
#endif

    p_tcb->Opt                = (OS_OPT         )0u;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    p_tcb->TickRemain         = (OS_TICK        )0u;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	651a      	str	r2, [r3, #80]	; 0x50
    p_tcb->TickCtrPrev        = (OS_TICK        )0u;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	655a      	str	r2, [r3, #84]	; 0x54
    p_tcb->TimeQuanta         = (OS_TICK        )0u;
    p_tcb->TimeQuantaCtr      = (OS_TICK        )0u;
#endif

#if OS_CFG_TASK_PROFILE_EN > 0u
    p_tcb->CPUUsage           = (OS_CPU_USAGE   )0u;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    p_tcb->CPUUsageMax        = (OS_CPU_USAGE   )0u;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
    p_tcb->CtxSwCtr           = (OS_CTX_SW_CTR  )0u;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    p_tcb->CyclesDelta        = (CPU_TS         )0u;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ts                        = OS_TS_GET();                /* Read the current timestamp and save                    */
 800315e:	f004 fdbd 	bl	8007cdc <CPU_TS_TmrRd>
 8003162:	60b8      	str	r0, [r7, #8]
    p_tcb->CyclesStart        = ts;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68ba      	ldr	r2, [r7, #8]
 8003168:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    p_tcb->CyclesTotal        = (OS_CYCLES      )0u;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif
#ifdef CPU_CFG_INT_DIS_MEAS_EN
    p_tcb->IntDisTimeMax      = (CPU_TS         )0u;
#endif
#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
    p_tcb->SchedLockTimeMax   = (CPU_TS         )0u;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
#endif

    p_tcb->PendOn             = (OS_STATE       )OS_TASK_PEND_ON_NOTHING;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    p_tcb->PendStatus         = (OS_STATUS      )OS_STATUS_PEND_OK;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    p_tcb->TaskState          = (OS_STATE       )OS_TASK_STATE_RDY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

    p_tcb->Prio               = (OS_PRIO        )OS_PRIO_INIT;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2220      	movs	r2, #32
 8003198:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
#if OS_CFG_MUTEX_EN > 0u
    p_tcb->BasePrio           = (OS_PRIO        )OS_PRIO_INIT;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2220      	movs	r2, #32
 80031a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    p_tcb->MutexGrpHeadPtr    = (OS_MUTEX      *)0;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif

#if OS_CFG_DBG_EN > 0u
    p_tcb->DbgPrevPtr         = (OS_TCB        *)0;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    p_tcb->DbgNextPtr         = (OS_TCB        *)0;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    p_tcb->DbgNamePtr         = (CPU_CHAR      *)((void *)" ");
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a04      	ldr	r2, [pc, #16]	; (80031d0 <OS_TaskInitTCB+0x198>)
 80031be:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
#endif
}
 80031c2:	bf00      	nop
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	0800ef64 	.word	0x0800ef64
 80031d0:	0800ef6c 	.word	0x0800ef6c

080031d4 <OS_TaskResume>:
*/

#if OS_CFG_TASK_SUSPEND_EN > 0u
void  OS_TaskResume (OS_TCB  *p_tcb,
                     OS_ERR  *p_err)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
    CPU_SR_ALLOC();
 80031de:	2300      	movs	r3, #0
 80031e0:	60fb      	str	r3, [r7, #12]


    CPU_CRITICAL_ENTER();
 80031e2:	f7fd f87d 	bl	80002e0 <CPU_SR_Save>
 80031e6:	60f8      	str	r0, [r7, #12]
   *p_err  = OS_ERR_NONE;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	2200      	movs	r2, #0
 80031ec:	801a      	strh	r2, [r3, #0]
    switch (p_tcb->TaskState) {
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80031f4:	2b07      	cmp	r3, #7
 80031f6:	d872      	bhi.n	80032de <OS_TaskResume+0x10a>
 80031f8:	a201      	add	r2, pc, #4	; (adr r2, 8003200 <OS_TaskResume+0x2c>)
 80031fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031fe:	bf00      	nop
 8003200:	08003221 	.word	0x08003221
 8003204:	08003221 	.word	0x08003221
 8003208:	08003221 	.word	0x08003221
 800320c:	08003221 	.word	0x08003221
 8003210:	08003231 	.word	0x08003231
 8003214:	08003261 	.word	0x08003261
 8003218:	0800328b 	.word	0x0800328b
 800321c:	080032b5 	.word	0x080032b5
        case OS_TASK_STATE_RDY:
        case OS_TASK_STATE_DLY:
        case OS_TASK_STATE_PEND:
        case OS_TASK_STATE_PEND_TIMEOUT:
             CPU_CRITICAL_EXIT();
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f7fd f861 	bl	80002e8 <CPU_SR_Restore>
            *p_err = OS_ERR_TASK_NOT_SUSPENDED;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	f247 1253 	movw	r2, #29011	; 0x7153
 800322c:	801a      	strh	r2, [r3, #0]
             break;
 800322e:	e05e      	b.n	80032ee <OS_TaskResume+0x11a>

        case OS_TASK_STATE_SUSPENDED:
             OS_CRITICAL_ENTER_CPU_EXIT();
             p_tcb->SuspendCtr--;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8003236:	3b01      	subs	r3, #1
 8003238:	b2da      	uxtb	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             if (p_tcb->SuspendCtr == (OS_NESTING_CTR)0) {
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8003246:	2b00      	cmp	r3, #0
 8003248:	d106      	bne.n	8003258 <OS_TaskResume+0x84>
                 p_tcb->TaskState = OS_TASK_STATE_RDY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                 OS_RdyListInsert(p_tcb);                            /* Insert the task in the ready list                      */
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f001 f960 	bl	8004518 <OS_RdyListInsert>
             }
             OS_CRITICAL_EXIT_NO_SCHED();
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f7fd f845 	bl	80002e8 <CPU_SR_Restore>
             break;
 800325e:	e046      	b.n	80032ee <OS_TaskResume+0x11a>

        case OS_TASK_STATE_DLY_SUSPENDED:
             p_tcb->SuspendCtr--;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8003266:	3b01      	subs	r3, #1
 8003268:	b2da      	uxtb	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             if (p_tcb->SuspendCtr == (OS_NESTING_CTR)0) {
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8003276:	2b00      	cmp	r3, #0
 8003278:	d103      	bne.n	8003282 <OS_TaskResume+0xae>
                 p_tcb->TaskState = OS_TASK_STATE_DLY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             }
             CPU_CRITICAL_EXIT();
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f7fd f830 	bl	80002e8 <CPU_SR_Restore>
             break;
 8003288:	e031      	b.n	80032ee <OS_TaskResume+0x11a>

        case OS_TASK_STATE_PEND_SUSPENDED:
             p_tcb->SuspendCtr--;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8003290:	3b01      	subs	r3, #1
 8003292:	b2da      	uxtb	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             if (p_tcb->SuspendCtr == (OS_NESTING_CTR)0) {
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d103      	bne.n	80032ac <OS_TaskResume+0xd8>
                 p_tcb->TaskState = OS_TASK_STATE_PEND;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2202      	movs	r2, #2
 80032a8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             }
             CPU_CRITICAL_EXIT();
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f7fd f81b 	bl	80002e8 <CPU_SR_Restore>
             break;
 80032b2:	e01c      	b.n	80032ee <OS_TaskResume+0x11a>

        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             p_tcb->SuspendCtr--;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80032ba:	3b01      	subs	r3, #1
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             if (p_tcb->SuspendCtr == (OS_NESTING_CTR)0) {
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d103      	bne.n	80032d6 <OS_TaskResume+0x102>
                 p_tcb->TaskState = OS_TASK_STATE_PEND_TIMEOUT;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2203      	movs	r2, #3
 80032d2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             }
             CPU_CRITICAL_EXIT();
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f7fd f806 	bl	80002e8 <CPU_SR_Restore>
             break;
 80032dc:	e007      	b.n	80032ee <OS_TaskResume+0x11a>

        default:
             CPU_CRITICAL_EXIT();
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f7fd f802 	bl	80002e8 <CPU_SR_Restore>
            *p_err = OS_ERR_STATE_INVALID;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	f646 622d 	movw	r2, #28205	; 0x6e2d
 80032ea:	801a      	strh	r2, [r3, #0]
             return;
 80032ec:	e001      	b.n	80032f2 <OS_TaskResume+0x11e>
    }

    OSSched();
 80032ee:	f000 fcbb 	bl	8003c68 <OSSched>
}
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <OS_TaskReturn>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TaskReturn (void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
    OS_ERR  err;



    OSTaskReturnHook(OSTCBCurPtr);                          /* Call hook to let user decide on what to do             */
 80032fe:	4b06      	ldr	r3, [pc, #24]	; (8003318 <OS_TaskReturn+0x20>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f003 f9bc 	bl	8006680 <OSTaskReturnHook>
#if OS_CFG_TASK_DEL_EN > 0u
    OSTaskDel((OS_TCB *)0,                                  /* Delete task if it accidentally returns!                */
              (OS_ERR *)&err);
#else
    for (;;) {
        OSTimeDly((OS_TICK )OSCfg_TickRate_Hz,
 8003308:	4b04      	ldr	r3, [pc, #16]	; (800331c <OS_TaskReturn+0x24>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	1dba      	adds	r2, r7, #6
 800330e:	2100      	movs	r1, #0
 8003310:	4618      	mov	r0, r3
 8003312:	f002 f933 	bl	800557c <OSTimeDly>
                  (OS_OPT  )OS_OPT_TIME_DLY,
                  (OS_ERR *)&err);
    }
 8003316:	e7f7      	b.n	8003308 <OS_TaskReturn+0x10>
 8003318:	20002208 	.word	0x20002208
 800331c:	0800f09c 	.word	0x0800f09c

08003320 <OS_TaskSemPost>:

OS_SEM_CTR  OS_TaskSemPost (OS_TCB  *p_tcb,
                            OS_OPT   opt,
                            CPU_TS   ts,
                            OS_ERR  *p_err)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af02      	add	r7, sp, #8
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	607a      	str	r2, [r7, #4]
 800332a:	603b      	str	r3, [r7, #0]
 800332c:	460b      	mov	r3, r1
 800332e:	817b      	strh	r3, [r7, #10]
    OS_SEM_CTR  ctr;
    CPU_SR_ALLOC();
 8003330:	2300      	movs	r3, #0
 8003332:	613b      	str	r3, [r7, #16]



    OS_CRITICAL_ENTER();
 8003334:	f7fc ffd4 	bl	80002e0 <CPU_SR_Save>
 8003338:	6138      	str	r0, [r7, #16]
    if (p_tcb == (OS_TCB *)0) {                             /* Post signal to 'self'?                                 */
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d102      	bne.n	8003346 <OS_TaskSemPost+0x26>
        p_tcb = OSTCBCurPtr;
 8003340:	4b40      	ldr	r3, [pc, #256]	; (8003444 <OS_TaskSemPost+0x124>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	60fb      	str	r3, [r7, #12]
    }
    p_tcb->TS = ts;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	649a      	str	r2, [r3, #72]	; 0x48
   *p_err     = OS_ERR_NONE;                                /* Assume we won't have any errors                        */
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	2200      	movs	r2, #0
 8003350:	801a      	strh	r2, [r3, #0]
    switch (p_tcb->TaskState) {
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003358:	2b07      	cmp	r3, #7
 800335a:	d863      	bhi.n	8003424 <OS_TaskSemPost+0x104>
 800335c:	a201      	add	r2, pc, #4	; (adr r2, 8003364 <OS_TaskSemPost+0x44>)
 800335e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003362:	bf00      	nop
 8003364:	08003385 	.word	0x08003385
 8003368:	08003385 	.word	0x08003385
 800336c:	080033bb 	.word	0x080033bb
 8003370:	080033bb 	.word	0x080033bb
 8003374:	08003385 	.word	0x08003385
 8003378:	08003385 	.word	0x08003385
 800337c:	080033bb 	.word	0x080033bb
 8003380:	080033bb 	.word	0x080033bb
                          return ((OS_SEM_CTR)0);
                      }
                      break;

                 case 4u:
                      if (p_tcb->SemCtr == DEF_INT_32U_MAX_VAL) {
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338c:	d108      	bne.n	80033a0 <OS_TaskSemPost+0x80>
                          OS_CRITICAL_EXIT();
 800338e:	6938      	ldr	r0, [r7, #16]
 8003390:	f7fc ffaa 	bl	80002e8 <CPU_SR_Restore>
                         *p_err = OS_ERR_SEM_OVF;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	f646 52c5 	movw	r2, #28101	; 0x6dc5
 800339a:	801a      	strh	r2, [r3, #0]
                          return ((OS_SEM_CTR)0);
 800339c:	2300      	movs	r3, #0
 800339e:	e04d      	b.n	800343c <OS_TaskSemPost+0x11c>
                      }
                      break;
 80033a0:	bf00      	nop

                 default:
                      break;
             }
             p_tcb->SemCtr++;                               /* Task signaled is not pending on anything               */
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033a6:	1c5a      	adds	r2, r3, #1
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	64da      	str	r2, [r3, #76]	; 0x4c
             ctr = p_tcb->SemCtr;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b0:	617b      	str	r3, [r7, #20]
             OS_CRITICAL_EXIT();
 80033b2:	6938      	ldr	r0, [r7, #16]
 80033b4:	f7fc ff98 	bl	80002e8 <CPU_SR_Restore>
             break;
 80033b8:	e03f      	b.n	800343a <OS_TaskSemPost+0x11a>

        case OS_TASK_STATE_PEND:
        case OS_TASK_STATE_PEND_TIMEOUT:
        case OS_TASK_STATE_PEND_SUSPENDED:
        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             if (p_tcb->PendOn == OS_TASK_PEND_ON_TASK_SEM) {   /* Is task signaled waiting for a signal?             */
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80033c0:	2b07      	cmp	r3, #7
 80033c2:	d114      	bne.n	80033ee <OS_TaskSemPost+0xce>
                 OS_Post((OS_PEND_OBJ *)0,                      /*      Task is pending on signal                     */
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	9300      	str	r3, [sp, #0]
 80033c8:	2300      	movs	r3, #0
 80033ca:	2200      	movs	r2, #0
 80033cc:	68f9      	ldr	r1, [r7, #12]
 80033ce:	2000      	movs	r0, #0
 80033d0:	f000 ffb6 	bl	8004340 <OS_Post>
                         (OS_TCB      *)p_tcb,
                         (void        *)0,
                         (OS_MSG_SIZE  )0u,
                         (CPU_TS       )ts);
                 ctr = p_tcb->SemCtr;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033d8:	617b      	str	r3, [r7, #20]
                 OS_CRITICAL_EXIT_NO_SCHED();
 80033da:	6938      	ldr	r0, [r7, #16]
 80033dc:	f7fc ff84 	bl	80002e8 <CPU_SR_Restore>
                 if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0) {
 80033e0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	db27      	blt.n	8003438 <OS_TaskSemPost+0x118>
                     OSSched();                                 /* Run the scheduler                                  */
 80033e8:	f000 fc3e 	bl	8003c68 <OSSched>
                 }
                 p_tcb->SemCtr++;                           /* No,  Task signaled is NOT pending on semaphore ...     */
                 ctr = p_tcb->SemCtr;                       /*      ... it must be waiting on something else          */
                 OS_CRITICAL_EXIT();
             }
             break;
 80033ec:	e024      	b.n	8003438 <OS_TaskSemPost+0x118>
                              return ((OS_SEM_CTR)0);
                          }
                          break;

                     case 4u:
                          if (p_tcb->SemCtr == DEF_INT_32U_MAX_VAL) {
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f6:	d108      	bne.n	800340a <OS_TaskSemPost+0xea>
                              OS_CRITICAL_EXIT();
 80033f8:	6938      	ldr	r0, [r7, #16]
 80033fa:	f7fc ff75 	bl	80002e8 <CPU_SR_Restore>
                             *p_err = OS_ERR_SEM_OVF;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	f646 52c5 	movw	r2, #28101	; 0x6dc5
 8003404:	801a      	strh	r2, [r3, #0]
                              return ((OS_SEM_CTR)0);
 8003406:	2300      	movs	r3, #0
 8003408:	e018      	b.n	800343c <OS_TaskSemPost+0x11c>
                          }
                          break;
 800340a:	bf00      	nop

                     default:
                          break;
                 }
                 p_tcb->SemCtr++;                           /* No,  Task signaled is NOT pending on semaphore ...     */
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003410:	1c5a      	adds	r2, r3, #1
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	64da      	str	r2, [r3, #76]	; 0x4c
                 ctr = p_tcb->SemCtr;                       /*      ... it must be waiting on something else          */
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800341a:	617b      	str	r3, [r7, #20]
                 OS_CRITICAL_EXIT();
 800341c:	6938      	ldr	r0, [r7, #16]
 800341e:	f7fc ff63 	bl	80002e8 <CPU_SR_Restore>
             }
             break;
 8003422:	e009      	b.n	8003438 <OS_TaskSemPost+0x118>

        default:
             OS_CRITICAL_EXIT();
 8003424:	6938      	ldr	r0, [r7, #16]
 8003426:	f7fc ff5f 	bl	80002e8 <CPU_SR_Restore>
            *p_err = OS_ERR_STATE_INVALID;
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	f646 622d 	movw	r2, #28205	; 0x6e2d
 8003430:	801a      	strh	r2, [r3, #0]
             ctr   = (OS_SEM_CTR)0;
 8003432:	2300      	movs	r3, #0
 8003434:	617b      	str	r3, [r7, #20]
             break;
 8003436:	e000      	b.n	800343a <OS_TaskSemPost+0x11a>
                 }
                 p_tcb->SemCtr++;                           /* No,  Task signaled is NOT pending on semaphore ...     */
                 ctr = p_tcb->SemCtr;                       /*      ... it must be waiting on something else          */
                 OS_CRITICAL_EXIT();
             }
             break;
 8003438:	bf00      	nop
             OS_CRITICAL_EXIT();
            *p_err = OS_ERR_STATE_INVALID;
             ctr   = (OS_SEM_CTR)0;
             break;
    }
    return (ctr);
 800343a:	697b      	ldr	r3, [r7, #20]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3718      	adds	r7, #24
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	20002208 	.word	0x20002208

08003448 <OS_TaskSuspend>:
*/

#if OS_CFG_TASK_SUSPEND_EN > 0u
void  OS_TaskSuspend (OS_TCB  *p_tcb,
                      OS_ERR  *p_err)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
    CPU_SR_ALLOC();
 8003452:	2300      	movs	r3, #0
 8003454:	60fb      	str	r3, [r7, #12]


    CPU_CRITICAL_ENTER();
 8003456:	f7fc ff43 	bl	80002e0 <CPU_SR_Save>
 800345a:	60f8      	str	r0, [r7, #12]
    if (p_tcb == (OS_TCB *)0) {                             /* See if specified to suspend self                       */
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d102      	bne.n	8003468 <OS_TaskSuspend+0x20>
        p_tcb = OSTCBCurPtr;
 8003462:	4b3d      	ldr	r3, [pc, #244]	; (8003558 <OS_TaskSuspend+0x110>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	607b      	str	r3, [r7, #4]
    }

    if (p_tcb == OSTCBCurPtr) {
 8003468:	4b3b      	ldr	r3, [pc, #236]	; (8003558 <OS_TaskSuspend+0x110>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	429a      	cmp	r2, r3
 8003470:	d10b      	bne.n	800348a <OS_TaskSuspend+0x42>
        if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /* Can't suspend when the scheduler is locked             */
 8003472:	4b3a      	ldr	r3, [pc, #232]	; (800355c <OS_TaskSuspend+0x114>)
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d007      	beq.n	800348a <OS_TaskSuspend+0x42>
            CPU_CRITICAL_EXIT();
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f7fc ff34 	bl	80002e8 <CPU_SR_Restore>
           *p_err = OS_ERR_SCHED_LOCKED;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	f646 5263 	movw	r2, #28003	; 0x6d63
 8003486:	801a      	strh	r2, [r3, #0]
            return;
 8003488:	e063      	b.n	8003552 <OS_TaskSuspend+0x10a>
        }
    }

   *p_err = OS_ERR_NONE;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2200      	movs	r2, #0
 800348e:	801a      	strh	r2, [r3, #0]
    switch (p_tcb->TaskState) {
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003496:	2b07      	cmp	r3, #7
 8003498:	d851      	bhi.n	800353e <OS_TaskSuspend+0xf6>
 800349a:	a201      	add	r2, pc, #4	; (adr r2, 80034a0 <OS_TaskSuspend+0x58>)
 800349c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a0:	080034c1 	.word	0x080034c1
 80034a4:	080034df 	.word	0x080034df
 80034a8:	080034f7 	.word	0x080034f7
 80034ac:	0800350f 	.word	0x0800350f
 80034b0:	08003527 	.word	0x08003527
 80034b4:	08003527 	.word	0x08003527
 80034b8:	08003527 	.word	0x08003527
 80034bc:	08003527 	.word	0x08003527
        case OS_TASK_STATE_RDY:
             OS_CRITICAL_ENTER_CPU_EXIT();
             p_tcb->TaskState  =  OS_TASK_STATE_SUSPENDED;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2204      	movs	r2, #4
 80034c4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             p_tcb->SuspendCtr = (OS_NESTING_CTR)1;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             OS_RdyListRemove(p_tcb);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f001 f8bf 	bl	8004654 <OS_RdyListRemove>
             OS_CRITICAL_EXIT_NO_SCHED();
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f7fc ff06 	bl	80002e8 <CPU_SR_Restore>
             break;
 80034dc:	e037      	b.n	800354e <OS_TaskSuspend+0x106>

        case OS_TASK_STATE_DLY:
             p_tcb->TaskState  = OS_TASK_STATE_DLY_SUSPENDED;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2205      	movs	r2, #5
 80034e2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             p_tcb->SuspendCtr = (OS_NESTING_CTR)1;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             CPU_CRITICAL_EXIT();
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f7fc fefa 	bl	80002e8 <CPU_SR_Restore>
             break;
 80034f4:	e02b      	b.n	800354e <OS_TaskSuspend+0x106>

        case OS_TASK_STATE_PEND:
             p_tcb->TaskState  = OS_TASK_STATE_PEND_SUSPENDED;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2206      	movs	r2, #6
 80034fa:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             p_tcb->SuspendCtr = (OS_NESTING_CTR)1;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             CPU_CRITICAL_EXIT();
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f7fc feee 	bl	80002e8 <CPU_SR_Restore>
             break;
 800350c:	e01f      	b.n	800354e <OS_TaskSuspend+0x106>

        case OS_TASK_STATE_PEND_TIMEOUT:
             p_tcb->TaskState  = OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2207      	movs	r2, #7
 8003512:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             p_tcb->SuspendCtr = (OS_NESTING_CTR)1;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             CPU_CRITICAL_EXIT();
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f7fc fee2 	bl	80002e8 <CPU_SR_Restore>
             break;
 8003524:	e013      	b.n	800354e <OS_TaskSuspend+0x106>

        case OS_TASK_STATE_SUSPENDED:
        case OS_TASK_STATE_DLY_SUSPENDED:
        case OS_TASK_STATE_PEND_SUSPENDED:
        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             p_tcb->SuspendCtr++;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800352c:	3301      	adds	r3, #1
 800352e:	b2da      	uxtb	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             CPU_CRITICAL_EXIT();
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f7fc fed6 	bl	80002e8 <CPU_SR_Restore>
             break;
 800353c:	e007      	b.n	800354e <OS_TaskSuspend+0x106>

        default:
             CPU_CRITICAL_EXIT();
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f7fc fed2 	bl	80002e8 <CPU_SR_Restore>
            *p_err = OS_ERR_STATE_INVALID;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	f646 622d 	movw	r2, #28205	; 0x6e2d
 800354a:	801a      	strh	r2, [r3, #0]
             return;
 800354c:	e001      	b.n	8003552 <OS_TaskSuspend+0x10a>
    }

    OSSched();
 800354e:	f000 fb8b 	bl	8003c68 <OSSched>
}
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	20002208 	.word	0x20002208
 800355c:	20001f9c 	.word	0x20001f9c

08003560 <OS_TaskChangePrio>:
************************************************************************************************************************
*/

void  OS_TaskChangePrio(OS_TCB  *p_tcb,
                        OS_PRIO  prio_new)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	460b      	mov	r3, r1
 800356a:	70fb      	strb	r3, [r7, #3]
    OS_PRIO  prio_cur;
#endif


    do {
        p_tcb_owner = (OS_TCB *)0;
 800356c:	2300      	movs	r3, #0
 800356e:	60fb      	str	r3, [r7, #12]
#if OS_CFG_MUTEX_EN > 0
        prio_cur    = p_tcb->Prio;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8003576:	72fb      	strb	r3, [r7, #11]
#endif
        switch (p_tcb->TaskState) {
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800357e:	2b07      	cmp	r3, #7
 8003580:	f200 808c 	bhi.w	800369c <OS_TaskChangePrio+0x13c>
 8003584:	a201      	add	r2, pc, #4	; (adr r2, 800358c <OS_TaskChangePrio+0x2c>)
 8003586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800358a:	bf00      	nop
 800358c:	080035ad 	.word	0x080035ad
 8003590:	080035e1 	.word	0x080035e1
 8003594:	080035eb 	.word	0x080035eb
 8003598:	080035eb 	.word	0x080035eb
 800359c:	080035e1 	.word	0x080035e1
 80035a0:	080035e1 	.word	0x080035e1
 80035a4:	080035eb 	.word	0x080035eb
 80035a8:	080035eb 	.word	0x080035eb
            case OS_TASK_STATE_RDY:
                 OS_RdyListRemove(p_tcb);                   /* Remove from current priority                           */
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f001 f851 	bl	8004654 <OS_RdyListRemove>
                 p_tcb->Prio = prio_new;                    /* Set new task priority                                  */
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	78fa      	ldrb	r2, [r7, #3]
 80035b6:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                 OS_PrioInsert(p_tcb->Prio);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80035c0:	4618      	mov	r0, r3
 80035c2:	f001 ff8d 	bl	80054e0 <OS_PrioInsert>
                 if (p_tcb == OSTCBCurPtr) {
 80035c6:	4b37      	ldr	r3, [pc, #220]	; (80036a4 <OS_TaskChangePrio+0x144>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d103      	bne.n	80035d8 <OS_TaskChangePrio+0x78>
                     OS_RdyListInsertHead(p_tcb);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 ffbf 	bl	8004554 <OS_RdyListInsertHead>
                 } else {
                     OS_RdyListInsertTail(p_tcb);
                 }
                 break;
 80035d6:	e05a      	b.n	800368e <OS_TaskChangePrio+0x12e>
                 p_tcb->Prio = prio_new;                    /* Set new task priority                                  */
                 OS_PrioInsert(p_tcb->Prio);
                 if (p_tcb == OSTCBCurPtr) {
                     OS_RdyListInsertHead(p_tcb);
                 } else {
                     OS_RdyListInsertTail(p_tcb);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 fffb 	bl	80045d4 <OS_RdyListInsertTail>
                 }
                 break;
 80035de:	e056      	b.n	800368e <OS_TaskChangePrio+0x12e>

            case OS_TASK_STATE_DLY:                         /* Nothing to do except change the priority in the OS_TCB */
            case OS_TASK_STATE_SUSPENDED:
            case OS_TASK_STATE_DLY_SUSPENDED:
                 p_tcb->Prio = prio_new;                    /* Set new task priority                                  */
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	78fa      	ldrb	r2, [r7, #3]
 80035e4:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                 break;
 80035e8:	e051      	b.n	800368e <OS_TaskChangePrio+0x12e>

            case OS_TASK_STATE_PEND:
            case OS_TASK_STATE_PEND_TIMEOUT:
            case OS_TASK_STATE_PEND_SUSPENDED:
            case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
                 p_tcb->Prio = prio_new;                    /* Set new task priority                                  */
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	78fa      	ldrb	r2, [r7, #3]
 80035ee:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                 switch (p_tcb->PendOn) {                   /* What to do depends on what we are pending on           */
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80035f8:	3b01      	subs	r3, #1
 80035fa:	2b05      	cmp	r3, #5
 80035fc:	d843      	bhi.n	8003686 <OS_TaskChangePrio+0x126>
 80035fe:	a201      	add	r2, pc, #4	; (adr r2, 8003604 <OS_TaskChangePrio+0xa4>)
 8003600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003604:	0800361d 	.word	0x0800361d
 8003608:	08003687 	.word	0x08003687
 800360c:	0800361d 	.word	0x0800361d
 8003610:	08003625 	.word	0x08003625
 8003614:	0800361d 	.word	0x0800361d
 8003618:	0800361d 	.word	0x0800361d
                     case OS_TASK_PEND_ON_FLAG:
                     case OS_TASK_PEND_ON_MULTI:
                     case OS_TASK_PEND_ON_Q:
                     case OS_TASK_PEND_ON_SEM:
                          OS_PendListChangePrio(p_tcb);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 fd69 	bl	80040f4 <OS_PendListChangePrio>
                          break;
 8003622:	e033      	b.n	800368c <OS_TaskChangePrio+0x12c>

                     case OS_TASK_PEND_ON_MUTEX:
#if OS_CFG_MUTEX_EN > 0
                          OS_PendListChangePrio(p_tcb);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 fd65 	bl	80040f4 <OS_PendListChangePrio>
                          p_tcb_owner = ((OS_MUTEX *)p_tcb->PendDataTblPtr->PendObjPtr)->OwnerTCBPtr;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	60fb      	str	r3, [r7, #12]
                          if (prio_cur > prio_new) {         /* Are we increasing the priority?                        */
 8003634:	7afa      	ldrb	r2, [r7, #11]
 8003636:	78fb      	ldrb	r3, [r7, #3]
 8003638:	429a      	cmp	r2, r3
 800363a:	d908      	bls.n	800364e <OS_TaskChangePrio+0xee>
                              if (p_tcb_owner->Prio <= prio_new) {/* Yes, do we need to give this prio to the owner?   */
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8003642:	78fa      	ldrb	r2, [r7, #3]
 8003644:	429a      	cmp	r2, r3
 8003646:	d320      	bcc.n	800368a <OS_TaskChangePrio+0x12a>
                                  p_tcb_owner = (OS_TCB *)0;
 8003648:	2300      	movs	r3, #0
 800364a:	60fb      	str	r3, [r7, #12]
#endif
                                  }
                              }
                          }
#endif
                         break;
 800364c:	e01d      	b.n	800368a <OS_TaskChangePrio+0x12a>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
                                 TRACE_OS_MUTEX_TASK_PRIO_INHERIT(p_tcb_owner, prio_new);
#endif
                              }
                          } else {
                              if (p_tcb_owner->Prio == prio_cur) {/* No, is it required to check for a lower prio?     */
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8003654:	7afa      	ldrb	r2, [r7, #11]
 8003656:	429a      	cmp	r2, r3
 8003658:	d117      	bne.n	800368a <OS_TaskChangePrio+0x12a>
                                  prio_new = OS_MutexGrpPrioFindHighest(p_tcb_owner);
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f002 fbd6 	bl	8005e0c <OS_MutexGrpPrioFindHighest>
 8003660:	4603      	mov	r3, r0
 8003662:	70fb      	strb	r3, [r7, #3]
                                  prio_new = prio_new > p_tcb_owner->BasePrio ? p_tcb_owner->BasePrio : prio_new;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800366a:	78fb      	ldrb	r3, [r7, #3]
 800366c:	4293      	cmp	r3, r2
 800366e:	bf28      	it	cs
 8003670:	4613      	movcs	r3, r2
 8003672:	70fb      	strb	r3, [r7, #3]
                                  if (prio_new == p_tcb_owner->Prio) {
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800367a:	78fa      	ldrb	r2, [r7, #3]
 800367c:	429a      	cmp	r2, r3
 800367e:	d104      	bne.n	800368a <OS_TaskChangePrio+0x12a>
                                      p_tcb_owner = (OS_TCB *)0;
 8003680:	2300      	movs	r3, #0
 8003682:	60fb      	str	r3, [r7, #12]
#endif
                                  }
                              }
                          }
#endif
                         break;
 8003684:	e001      	b.n	800368a <OS_TaskChangePrio+0x12a>

                     case OS_TASK_PEND_ON_TASK_Q:
                     case OS_TASK_PEND_ON_TASK_SEM:
                     default:
                          break;
 8003686:	bf00      	nop
 8003688:	e000      	b.n	800368c <OS_TaskChangePrio+0x12c>
#endif
                                  }
                              }
                          }
#endif
                         break;
 800368a:	bf00      	nop
                     case OS_TASK_PEND_ON_TASK_Q:
                     case OS_TASK_PEND_ON_TASK_SEM:
                     default:
                          break;
                 }
                 break;
 800368c:	bf00      	nop

            default:
                 return;
        }
        p_tcb = p_tcb_owner;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	607b      	str	r3, [r7, #4]
    } while (p_tcb != (OS_TCB *)0);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	f47f af69 	bne.w	800356c <OS_TaskChangePrio+0xc>
 800369a:	e000      	b.n	800369e <OS_TaskChangePrio+0x13e>
                          break;
                 }
                 break;

            default:
                 return;
 800369c:	bf00      	nop
        }
        p_tcb = p_tcb_owner;
    } while (p_tcb != (OS_TCB *)0);
}
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	20002208 	.word	0x20002208

080036a8 <OS_MsgPoolInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MsgPoolInit (OS_ERR  *p_err)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b087      	sub	sp, #28
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (OSCfg_MsgPoolBasePtr == (OS_MSG *)0) {
 80036b0:	4b2d      	ldr	r3, [pc, #180]	; (8003768 <OS_MsgPoolInit+0xc0>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d104      	bne.n	80036c2 <OS_MsgPoolInit+0x1a>
       *p_err = OS_ERR_MSG_POOL_NULL_PTR;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f245 721e 	movw	r2, #22302	; 0x571e
 80036be:	801a      	strh	r2, [r3, #0]
        return;
 80036c0:	e04e      	b.n	8003760 <OS_MsgPoolInit+0xb8>
    }
    if (OSCfg_MsgPoolSize == (OS_MSG_QTY)0) {
 80036c2:	4b2a      	ldr	r3, [pc, #168]	; (800376c <OS_MsgPoolInit+0xc4>)
 80036c4:	881b      	ldrh	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d104      	bne.n	80036d4 <OS_MsgPoolInit+0x2c>
       *p_err = OS_ERR_MSG_POOL_EMPTY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f245 721d 	movw	r2, #22301	; 0x571d
 80036d0:	801a      	strh	r2, [r3, #0]
        return;
 80036d2:	e045      	b.n	8003760 <OS_MsgPoolInit+0xb8>
    }
#endif

    p_msg1 = OSCfg_MsgPoolBasePtr;
 80036d4:	4b24      	ldr	r3, [pc, #144]	; (8003768 <OS_MsgPoolInit+0xc0>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	617b      	str	r3, [r7, #20]
    p_msg2 = OSCfg_MsgPoolBasePtr;
 80036da:	4b23      	ldr	r3, [pc, #140]	; (8003768 <OS_MsgPoolInit+0xc0>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	613b      	str	r3, [r7, #16]
    p_msg2++;
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	3310      	adds	r3, #16
 80036e4:	613b      	str	r3, [r7, #16]
    loops  = OSCfg_MsgPoolSize - 1u;
 80036e6:	4b21      	ldr	r3, [pc, #132]	; (800376c <OS_MsgPoolInit+0xc4>)
 80036e8:	881b      	ldrh	r3, [r3, #0]
 80036ea:	3b01      	subs	r3, #1
 80036ec:	81bb      	strh	r3, [r7, #12]
    for (i = 0u; i < loops; i++) {                          /* Init. list of free OS_MSGs                             */
 80036ee:	2300      	movs	r3, #0
 80036f0:	81fb      	strh	r3, [r7, #14]
 80036f2:	e014      	b.n	800371e <OS_MsgPoolInit+0x76>
        p_msg1->NextPtr = p_msg2;
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	601a      	str	r2, [r3, #0]
        p_msg1->MsgPtr  = (void      *)0;
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	2200      	movs	r2, #0
 80036fe:	605a      	str	r2, [r3, #4]
        p_msg1->MsgSize = (OS_MSG_SIZE)0u;
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	2200      	movs	r2, #0
 8003704:	811a      	strh	r2, [r3, #8]
        p_msg1->MsgTS   = (CPU_TS     )0u;
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	2200      	movs	r2, #0
 800370a:	60da      	str	r2, [r3, #12]
        p_msg1++;
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	3310      	adds	r3, #16
 8003710:	617b      	str	r3, [r7, #20]
        p_msg2++;
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	3310      	adds	r3, #16
 8003716:	613b      	str	r3, [r7, #16]

    p_msg1 = OSCfg_MsgPoolBasePtr;
    p_msg2 = OSCfg_MsgPoolBasePtr;
    p_msg2++;
    loops  = OSCfg_MsgPoolSize - 1u;
    for (i = 0u; i < loops; i++) {                          /* Init. list of free OS_MSGs                             */
 8003718:	89fb      	ldrh	r3, [r7, #14]
 800371a:	3301      	adds	r3, #1
 800371c:	81fb      	strh	r3, [r7, #14]
 800371e:	89fa      	ldrh	r2, [r7, #14]
 8003720:	89bb      	ldrh	r3, [r7, #12]
 8003722:	429a      	cmp	r2, r3
 8003724:	d3e6      	bcc.n	80036f4 <OS_MsgPoolInit+0x4c>
        p_msg1->MsgSize = (OS_MSG_SIZE)0u;
        p_msg1->MsgTS   = (CPU_TS     )0u;
        p_msg1++;
        p_msg2++;
    }
    p_msg1->NextPtr = (OS_MSG    *)0;                       /* Last OS_MSG                                            */
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]
    p_msg1->MsgPtr  = (void      *)0;
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	2200      	movs	r2, #0
 8003730:	605a      	str	r2, [r3, #4]
    p_msg1->MsgSize = (OS_MSG_SIZE)0u;
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	2200      	movs	r2, #0
 8003736:	811a      	strh	r2, [r3, #8]
    p_msg1->MsgTS   = (CPU_TS     )0u;
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	2200      	movs	r2, #0
 800373c:	60da      	str	r2, [r3, #12]

    OSMsgPool.NextPtr    =  OSCfg_MsgPoolBasePtr;
 800373e:	4b0a      	ldr	r3, [pc, #40]	; (8003768 <OS_MsgPoolInit+0xc0>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a0b      	ldr	r2, [pc, #44]	; (8003770 <OS_MsgPoolInit+0xc8>)
 8003744:	6013      	str	r3, [r2, #0]
    OSMsgPool.NbrFree    =  OSCfg_MsgPoolSize;
 8003746:	4b09      	ldr	r3, [pc, #36]	; (800376c <OS_MsgPoolInit+0xc4>)
 8003748:	881a      	ldrh	r2, [r3, #0]
 800374a:	4b09      	ldr	r3, [pc, #36]	; (8003770 <OS_MsgPoolInit+0xc8>)
 800374c:	809a      	strh	r2, [r3, #4]
    OSMsgPool.NbrUsed    = (OS_MSG_QTY)0;
 800374e:	4b08      	ldr	r3, [pc, #32]	; (8003770 <OS_MsgPoolInit+0xc8>)
 8003750:	2200      	movs	r2, #0
 8003752:	80da      	strh	r2, [r3, #6]
#if OS_CFG_DBG_EN > 0u
    OSMsgPool.NbrUsedMax = (OS_MSG_QTY)0;
 8003754:	4b06      	ldr	r3, [pc, #24]	; (8003770 <OS_MsgPoolInit+0xc8>)
 8003756:	2200      	movs	r2, #0
 8003758:	811a      	strh	r2, [r3, #8]
#endif
   *p_err                =  OS_ERR_NONE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	801a      	strh	r2, [r3, #0]
}
 8003760:	371c      	adds	r7, #28
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr
 8003768:	0800f080 	.word	0x0800f080
 800376c:	0800f07c 	.word	0x0800f07c
 8003770:	200022f8 	.word	0x200022f8

08003774 <OS_MsgQInit>:
************************************************************************************************************************
*/

void  OS_MsgQInit (OS_MSG_Q    *p_msg_q,
                   OS_MSG_QTY   size)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	460b      	mov	r3, r1
 800377e:	807b      	strh	r3, [r7, #2]
    p_msg_q->NbrEntriesSize = (OS_MSG_QTY)size;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	887a      	ldrh	r2, [r7, #2]
 8003784:	811a      	strh	r2, [r3, #8]
    p_msg_q->NbrEntries     = (OS_MSG_QTY)0;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	815a      	strh	r2, [r3, #10]
#if OS_CFG_DBG_EN > 0u
    p_msg_q->NbrEntriesMax  = (OS_MSG_QTY)0;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	819a      	strh	r2, [r3, #12]
#endif
    p_msg_q->InPtr          = (OS_MSG   *)0;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]
    p_msg_q->OutPtr         = (OS_MSG   *)0;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	605a      	str	r2, [r3, #4]
}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bc80      	pop	{r7}
 80037a6:	4770      	bx	lr

080037a8 <OS_MsgQGet>:

void  *OS_MsgQGet (OS_MSG_Q     *p_msg_q,
                   OS_MSG_SIZE  *p_msg_size,
                   CPU_TS       *p_ts,
                   OS_ERR       *p_err)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b087      	sub	sp, #28
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
 80037b4:	603b      	str	r3, [r7, #0]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return ((void *)0);
    }
#endif

    if (p_msg_q->NbrEntries == (OS_MSG_QTY)0) {             /* Is the queue empty?                                    */
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	895b      	ldrh	r3, [r3, #10]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10e      	bne.n	80037dc <OS_MsgQGet+0x34>
       *p_msg_size = (OS_MSG_SIZE)0;                        /* Yes                                                    */
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	2200      	movs	r2, #0
 80037c2:	801a      	strh	r2, [r3, #0]
        if (p_ts != (CPU_TS *)0) {
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d002      	beq.n	80037d0 <OS_MsgQGet+0x28>
           *p_ts  = (CPU_TS  )0;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	601a      	str	r2, [r3, #0]
        }
       *p_err = OS_ERR_Q_EMPTY;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	f246 5292 	movw	r2, #26002	; 0x6592
 80037d6:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 80037d8:	2300      	movs	r3, #0
 80037da:	e03c      	b.n	8003856 <OS_MsgQGet+0xae>
    }

    p_msg           = p_msg_q->OutPtr;                      /* No, get the next message to extract from the queue     */
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	617b      	str	r3, [r7, #20]
    p_void          = p_msg->MsgPtr;
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	613b      	str	r3, [r7, #16]
   *p_msg_size      = p_msg->MsgSize;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	891a      	ldrh	r2, [r3, #8]
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	801a      	strh	r2, [r3, #0]
    if (p_ts != (CPU_TS *)0) {
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <OS_MsgQGet+0x56>
       *p_ts  = p_msg->MsgTS;
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	68da      	ldr	r2, [r3, #12]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	601a      	str	r2, [r3, #0]
    }

    p_msg_q->OutPtr = p_msg->NextPtr;                       /* Point to next message to extract                       */
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	605a      	str	r2, [r3, #4]

    if (p_msg_q->OutPtr == (OS_MSG *)0) {                   /* Are there any more messages in the queue?              */
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d106      	bne.n	800381c <OS_MsgQGet+0x74>
        p_msg_q->InPtr      = (OS_MSG   *)0;                /* No                                                     */
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]
        p_msg_q->NbrEntries = (OS_MSG_QTY)0;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	815a      	strh	r2, [r3, #10]
 800381a:	e005      	b.n	8003828 <OS_MsgQGet+0x80>
    } else {
        p_msg_q->NbrEntries--;                              /* Yes, One less message in the queue                     */
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	895b      	ldrh	r3, [r3, #10]
 8003820:	3b01      	subs	r3, #1
 8003822:	b29a      	uxth	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	815a      	strh	r2, [r3, #10]
    }

    p_msg->NextPtr    = OSMsgPool.NextPtr;                  /* Return message control block to free list              */
 8003828:	4b0d      	ldr	r3, [pc, #52]	; (8003860 <OS_MsgQGet+0xb8>)
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	601a      	str	r2, [r3, #0]
    OSMsgPool.NextPtr = p_msg;
 8003830:	4a0b      	ldr	r2, [pc, #44]	; (8003860 <OS_MsgQGet+0xb8>)
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	6013      	str	r3, [r2, #0]
    OSMsgPool.NbrFree++;
 8003836:	4b0a      	ldr	r3, [pc, #40]	; (8003860 <OS_MsgQGet+0xb8>)
 8003838:	889b      	ldrh	r3, [r3, #4]
 800383a:	3301      	adds	r3, #1
 800383c:	b29a      	uxth	r2, r3
 800383e:	4b08      	ldr	r3, [pc, #32]	; (8003860 <OS_MsgQGet+0xb8>)
 8003840:	809a      	strh	r2, [r3, #4]
    OSMsgPool.NbrUsed--;
 8003842:	4b07      	ldr	r3, [pc, #28]	; (8003860 <OS_MsgQGet+0xb8>)
 8003844:	88db      	ldrh	r3, [r3, #6]
 8003846:	3b01      	subs	r3, #1
 8003848:	b29a      	uxth	r2, r3
 800384a:	4b05      	ldr	r3, [pc, #20]	; (8003860 <OS_MsgQGet+0xb8>)
 800384c:	80da      	strh	r2, [r3, #6]

   *p_err             = OS_ERR_NONE;
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2200      	movs	r2, #0
 8003852:	801a      	strh	r2, [r3, #0]
    return (p_void);
 8003854:	693b      	ldr	r3, [r7, #16]
}
 8003856:	4618      	mov	r0, r3
 8003858:	371c      	adds	r7, #28
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr
 8003860:	200022f8 	.word	0x200022f8

08003864 <OS_MsgQPut>:
                  void         *p_void,
                  OS_MSG_SIZE   msg_size,
                  OS_OPT        opt,
                  CPU_TS        ts,
                  OS_ERR       *p_err)
{
 8003864:	b480      	push	{r7}
 8003866:	b087      	sub	sp, #28
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	4611      	mov	r1, r2
 8003870:	461a      	mov	r2, r3
 8003872:	460b      	mov	r3, r1
 8003874:	80fb      	strh	r3, [r7, #6]
 8003876:	4613      	mov	r3, r2
 8003878:	80bb      	strh	r3, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    if (p_msg_q->NbrEntries >= p_msg_q->NbrEntriesSize) {
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	895a      	ldrh	r2, [r3, #10]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	891b      	ldrh	r3, [r3, #8]
 8003882:	429a      	cmp	r2, r3
 8003884:	d304      	bcc.n	8003890 <OS_MsgQPut+0x2c>
       *p_err = OS_ERR_Q_MAX;                               /* Message queue cannot accept any more messages          */
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003888:	f246 5293 	movw	r2, #26003	; 0x6593
 800388c:	801a      	strh	r2, [r3, #0]
        return;
 800388e:	e06b      	b.n	8003968 <OS_MsgQPut+0x104>
    }

    if (OSMsgPool.NbrFree == (OS_MSG_QTY)0) {
 8003890:	4b37      	ldr	r3, [pc, #220]	; (8003970 <OS_MsgQPut+0x10c>)
 8003892:	889b      	ldrh	r3, [r3, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d104      	bne.n	80038a2 <OS_MsgQPut+0x3e>
       *p_err = OS_ERR_MSG_POOL_EMPTY;                      /* No more OS_MSG to use                                  */
 8003898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389a:	f245 721d 	movw	r2, #22301	; 0x571d
 800389e:	801a      	strh	r2, [r3, #0]
        return;
 80038a0:	e062      	b.n	8003968 <OS_MsgQPut+0x104>
    }

    p_msg             = OSMsgPool.NextPtr;                  /* Remove message control block from free list            */
 80038a2:	4b33      	ldr	r3, [pc, #204]	; (8003970 <OS_MsgQPut+0x10c>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	617b      	str	r3, [r7, #20]
    OSMsgPool.NextPtr = p_msg->NextPtr;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a30      	ldr	r2, [pc, #192]	; (8003970 <OS_MsgQPut+0x10c>)
 80038ae:	6013      	str	r3, [r2, #0]
    OSMsgPool.NbrFree--;
 80038b0:	4b2f      	ldr	r3, [pc, #188]	; (8003970 <OS_MsgQPut+0x10c>)
 80038b2:	889b      	ldrh	r3, [r3, #4]
 80038b4:	3b01      	subs	r3, #1
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	4b2d      	ldr	r3, [pc, #180]	; (8003970 <OS_MsgQPut+0x10c>)
 80038ba:	809a      	strh	r2, [r3, #4]
    OSMsgPool.NbrUsed++;
 80038bc:	4b2c      	ldr	r3, [pc, #176]	; (8003970 <OS_MsgQPut+0x10c>)
 80038be:	88db      	ldrh	r3, [r3, #6]
 80038c0:	3301      	adds	r3, #1
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	4b2a      	ldr	r3, [pc, #168]	; (8003970 <OS_MsgQPut+0x10c>)
 80038c6:	80da      	strh	r2, [r3, #6]

#if OS_CFG_DBG_EN > 0u
    if (OSMsgPool.NbrUsedMax < OSMsgPool.NbrUsed) {
 80038c8:	4b29      	ldr	r3, [pc, #164]	; (8003970 <OS_MsgQPut+0x10c>)
 80038ca:	891a      	ldrh	r2, [r3, #8]
 80038cc:	4b28      	ldr	r3, [pc, #160]	; (8003970 <OS_MsgQPut+0x10c>)
 80038ce:	88db      	ldrh	r3, [r3, #6]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d203      	bcs.n	80038dc <OS_MsgQPut+0x78>
        OSMsgPool.NbrUsedMax = OSMsgPool.NbrUsed;
 80038d4:	4b26      	ldr	r3, [pc, #152]	; (8003970 <OS_MsgQPut+0x10c>)
 80038d6:	88da      	ldrh	r2, [r3, #6]
 80038d8:	4b25      	ldr	r3, [pc, #148]	; (8003970 <OS_MsgQPut+0x10c>)
 80038da:	811a      	strh	r2, [r3, #8]
    }
#endif

    if (p_msg_q->NbrEntries == (OS_MSG_QTY)0) {             /* Is this first message placed in the queue?             */
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	895b      	ldrh	r3, [r3, #10]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10c      	bne.n	80038fe <OS_MsgQPut+0x9a>
        p_msg_q->InPtr         = p_msg;                     /* Yes                                                    */
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	601a      	str	r2, [r3, #0]
        p_msg_q->OutPtr        = p_msg;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	605a      	str	r2, [r3, #4]
        p_msg_q->NbrEntries    = (OS_MSG_QTY)1;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2201      	movs	r2, #1
 80038f4:	815a      	strh	r2, [r3, #10]
        p_msg->NextPtr         = (OS_MSG *)0;
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	e01e      	b.n	800393c <OS_MsgQPut+0xd8>
    } else {                                                /* No                                                     */
        if ((opt & OS_OPT_POST_LIFO) == OS_OPT_POST_FIFO) { /* Is it FIFO or LIFO?                                    */
 80038fe:	88bb      	ldrh	r3, [r7, #4]
 8003900:	f003 0310 	and.w	r3, r3, #16
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10c      	bne.n	8003922 <OS_MsgQPut+0xbe>
            p_msg_in           = p_msg_q->InPtr;            /* FIFO, add to the head                                  */
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	613b      	str	r3, [r7, #16]
            p_msg_in->NextPtr  = p_msg;
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	601a      	str	r2, [r3, #0]
            p_msg_q->InPtr     = p_msg;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	601a      	str	r2, [r3, #0]
            p_msg->NextPtr     = (OS_MSG *)0;
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	e006      	b.n	8003930 <OS_MsgQPut+0xcc>
        } else {
            p_msg->NextPtr     = p_msg_q->OutPtr;           /* LIFO, add to the tail                                  */
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	601a      	str	r2, [r3, #0]
            p_msg_q->OutPtr    = p_msg;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	605a      	str	r2, [r3, #4]
        }
        p_msg_q->NbrEntries++;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	895b      	ldrh	r3, [r3, #10]
 8003934:	3301      	adds	r3, #1
 8003936:	b29a      	uxth	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	815a      	strh	r2, [r3, #10]
    }

#if OS_CFG_DBG_EN > 0u
    if (p_msg_q->NbrEntriesMax < p_msg_q->NbrEntries) {
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	899a      	ldrh	r2, [r3, #12]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	895b      	ldrh	r3, [r3, #10]
 8003944:	429a      	cmp	r2, r3
 8003946:	d203      	bcs.n	8003950 <OS_MsgQPut+0xec>
        p_msg_q->NbrEntriesMax = p_msg_q->NbrEntries;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	895a      	ldrh	r2, [r3, #10]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	819a      	strh	r2, [r3, #12]
    }
#endif

    p_msg->MsgPtr  = p_void;                                /* Deposit message in the message queue entry             */
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	68ba      	ldr	r2, [r7, #8]
 8003954:	605a      	str	r2, [r3, #4]
    p_msg->MsgSize = msg_size;
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	88fa      	ldrh	r2, [r7, #6]
 800395a:	811a      	strh	r2, [r3, #8]
    p_msg->MsgTS   = ts;
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	6a3a      	ldr	r2, [r7, #32]
 8003960:	60da      	str	r2, [r3, #12]
   *p_err          = OS_ERR_NONE;
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	2200      	movs	r2, #0
 8003966:	801a      	strh	r2, [r3, #0]
}
 8003968:	371c      	adds	r7, #28
 800396a:	46bd      	mov	sp, r7
 800396c:	bc80      	pop	{r7}
 800396e:	4770      	bx	lr
 8003970:	200022f8 	.word	0x200022f8

08003974 <OSInit>:
* Returns    : none
************************************************************************************************************************
*/

void  OSInit (OS_ERR  *p_err)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    OSInitHook();                                           /* Call port specific initialization code                 */
 800397c:	f002 fe44 	bl	8006608 <OSInitHook>

    OSIntNestingCtr                 = (OS_NESTING_CTR)0;    /* Clear the interrupt nesting counter                    */
 8003980:	4b60      	ldr	r3, [pc, #384]	; (8003b04 <OSInit+0x190>)
 8003982:	2200      	movs	r2, #0
 8003984:	701a      	strb	r2, [r3, #0]

    OSRunning                       =  OS_STATE_OS_STOPPED; /* Indicate that multitasking not started                 */
 8003986:	4b60      	ldr	r3, [pc, #384]	; (8003b08 <OSInit+0x194>)
 8003988:	2200      	movs	r2, #0
 800398a:	701a      	strb	r2, [r3, #0]

    OSSchedLockNestingCtr           = (OS_NESTING_CTR)0;    /* Clear the scheduling lock counter                      */
 800398c:	4b5f      	ldr	r3, [pc, #380]	; (8003b0c <OSInit+0x198>)
 800398e:	2200      	movs	r2, #0
 8003990:	701a      	strb	r2, [r3, #0]

    OSTCBCurPtr                     = (OS_TCB *)0;          /* Initialize OS_TCB pointers to a known state            */
 8003992:	4b5f      	ldr	r3, [pc, #380]	; (8003b10 <OSInit+0x19c>)
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]
    OSTCBHighRdyPtr                 = (OS_TCB *)0;
 8003998:	4b5e      	ldr	r3, [pc, #376]	; (8003b14 <OSInit+0x1a0>)
 800399a:	2200      	movs	r2, #0
 800399c:	601a      	str	r2, [r3, #0]

    OSPrioCur                       = (OS_PRIO)0;           /* Initialize priority variables to a known state         */
 800399e:	4b5e      	ldr	r3, [pc, #376]	; (8003b18 <OSInit+0x1a4>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	701a      	strb	r2, [r3, #0]
    OSPrioHighRdy                   = (OS_PRIO)0;
 80039a4:	4b5d      	ldr	r3, [pc, #372]	; (8003b1c <OSInit+0x1a8>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	701a      	strb	r2, [r3, #0]
    OSPrioSaved                     = (OS_PRIO)0;
 80039aa:	4b5d      	ldr	r3, [pc, #372]	; (8003b20 <OSInit+0x1ac>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	701a      	strb	r2, [r3, #0]

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
    OSSchedLockTimeBegin            = (CPU_TS)0;
 80039b0:	4b5c      	ldr	r3, [pc, #368]	; (8003b24 <OSInit+0x1b0>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	601a      	str	r2, [r3, #0]
    OSSchedLockTimeMax              = (CPU_TS)0;
 80039b6:	4b5c      	ldr	r3, [pc, #368]	; (8003b28 <OSInit+0x1b4>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]
    OSSchedLockTimeMaxCur           = (CPU_TS)0;
 80039bc:	4b5b      	ldr	r3, [pc, #364]	; (8003b2c <OSInit+0x1b8>)
 80039be:	2200      	movs	r2, #0
 80039c0:	601a      	str	r2, [r3, #0]
#if OS_CFG_SCHED_ROUND_ROBIN_EN > 0u
    OSSchedRoundRobinEn             = DEF_FALSE;
    OSSchedRoundRobinDfltTimeQuanta = OSCfg_TickRate_Hz / 10u;
#endif

    if (OSCfg_ISRStkSize > (CPU_STK_SIZE)0) {
 80039c2:	4b5b      	ldr	r3, [pc, #364]	; (8003b30 <OSInit+0x1bc>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d015      	beq.n	80039f6 <OSInit+0x82>
        p_stk = OSCfg_ISRStkBasePtr;                        /* Clear exception stack for stack checking.              */
 80039ca:	4b5a      	ldr	r3, [pc, #360]	; (8003b34 <OSInit+0x1c0>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	60fb      	str	r3, [r7, #12]
        if (p_stk != (CPU_STK *)0) {
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00f      	beq.n	80039f6 <OSInit+0x82>
            size  = OSCfg_ISRStkSize;
 80039d6:	4b56      	ldr	r3, [pc, #344]	; (8003b30 <OSInit+0x1bc>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	60bb      	str	r3, [r7, #8]
            while (size > (CPU_STK_SIZE)0) {
 80039dc:	e008      	b.n	80039f0 <OSInit+0x7c>
                size--;
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	3b01      	subs	r3, #1
 80039e2:	60bb      	str	r3, [r7, #8]
               *p_stk = (CPU_STK)0;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	601a      	str	r2, [r3, #0]
                p_stk++;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	3304      	adds	r3, #4
 80039ee:	60fb      	str	r3, [r7, #12]

    if (OSCfg_ISRStkSize > (CPU_STK_SIZE)0) {
        p_stk = OSCfg_ISRStkBasePtr;                        /* Clear exception stack for stack checking.              */
        if (p_stk != (CPU_STK *)0) {
            size  = OSCfg_ISRStkSize;
            while (size > (CPU_STK_SIZE)0) {
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1f3      	bne.n	80039de <OSInit+0x6a>
            }
        }
    }

#if OS_CFG_APP_HOOKS_EN > 0u
    OS_AppTaskCreateHookPtr = (OS_APP_HOOK_TCB )0;          /* Clear application hook pointers                        */
 80039f6:	4b50      	ldr	r3, [pc, #320]	; (8003b38 <OSInit+0x1c4>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	601a      	str	r2, [r3, #0]
    OS_AppTaskDelHookPtr    = (OS_APP_HOOK_TCB )0;
 80039fc:	4b4f      	ldr	r3, [pc, #316]	; (8003b3c <OSInit+0x1c8>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	601a      	str	r2, [r3, #0]
    OS_AppTaskReturnHookPtr = (OS_APP_HOOK_TCB )0;
 8003a02:	4b4f      	ldr	r3, [pc, #316]	; (8003b40 <OSInit+0x1cc>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	601a      	str	r2, [r3, #0]

    OS_AppIdleTaskHookPtr   = (OS_APP_HOOK_VOID)0;
 8003a08:	4b4e      	ldr	r3, [pc, #312]	; (8003b44 <OSInit+0x1d0>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	601a      	str	r2, [r3, #0]
    OS_AppStatTaskHookPtr   = (OS_APP_HOOK_VOID)0;
 8003a0e:	4b4e      	ldr	r3, [pc, #312]	; (8003b48 <OSInit+0x1d4>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]
    OS_AppTaskSwHookPtr     = (OS_APP_HOOK_VOID)0;
 8003a14:	4b4d      	ldr	r3, [pc, #308]	; (8003b4c <OSInit+0x1d8>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	601a      	str	r2, [r3, #0]
    OS_AppTimeTickHookPtr   = (OS_APP_HOOK_VOID)0;
 8003a1a:	4b4d      	ldr	r3, [pc, #308]	; (8003b50 <OSInit+0x1dc>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]
#endif

#if OS_CFG_TASK_REG_TBL_SIZE > 0u
    OSTaskRegNextAvailID    = (OS_REG_ID)0;
 8003a20:	4b4c      	ldr	r3, [pc, #304]	; (8003b54 <OSInit+0x1e0>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	701a      	strb	r2, [r3, #0]
#endif

    OS_PrioInit();                                          /* Initialize the priority bitmap table                   */
 8003a26:	f001 fd1f 	bl	8005468 <OS_PrioInit>

    OS_RdyListInit();                                       /* Initialize the Ready List                              */
 8003a2a:	f000 fd51 	bl	80044d0 <OS_RdyListInit>

    
#if OS_CFG_FLAG_EN > 0u                                     /* Initialize the Event Flag module                       */
    OS_FlagInit(p_err);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f001 f9fa 	bl	8004e28 <OS_FlagInit>
    if (*p_err != OS_ERR_NONE) {
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	881b      	ldrh	r3, [r3, #0]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d14a      	bne.n	8003ad2 <OSInit+0x15e>
    }
#endif


#if OS_CFG_MEM_EN > 0u                                      /* Initialize the Memory Manager module                   */
    OS_MemInit(p_err);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f002 fc55 	bl	80062ec <OS_MemInit>
    if (*p_err != OS_ERR_NONE) {
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	881b      	ldrh	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d145      	bne.n	8003ad6 <OSInit+0x162>
    }
#endif


#if (OS_MSG_EN) > 0u                                        /* Initialize the free list of OS_MSGs                    */
    OS_MsgPoolInit(p_err);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7ff fe2c 	bl	80036a8 <OS_MsgPoolInit>
    if (*p_err != OS_ERR_NONE) {
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	881b      	ldrh	r3, [r3, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d140      	bne.n	8003ada <OSInit+0x166>
    }
#endif


#if OS_CFG_MUTEX_EN > 0u                                    /* Initialize the Mutex Manager module                    */
    OS_MutexInit(p_err);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f002 f993 	bl	8005d84 <OS_MutexInit>
    if (*p_err != OS_ERR_NONE) {
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	881b      	ldrh	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d13b      	bne.n	8003ade <OSInit+0x16a>
    }
#endif


#if OS_CFG_Q_EN > 0u
    OS_QInit(p_err);                                        /* Initialize the Message Queue Manager module            */
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7fe ff48 	bl	80028fc <OS_QInit>
    if (*p_err != OS_ERR_NONE) {
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	881b      	ldrh	r3, [r3, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d136      	bne.n	8003ae2 <OSInit+0x16e>
    }
#endif


#if OS_CFG_SEM_EN > 0u                                      /* Initialize the Semaphore Manager module                */
    OS_SemInit(p_err);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f001 ff19 	bl	80058ac <OS_SemInit>
    if (*p_err != OS_ERR_NONE) {
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	881b      	ldrh	r3, [r3, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d131      	bne.n	8003ae6 <OSInit+0x172>
        return;
    }
#endif


    OS_TaskInit(p_err);                                     /* Initialize the task manager                            */
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7ff fabc 	bl	8003000 <OS_TaskInit>
    if (*p_err != OS_ERR_NONE) {
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	881b      	ldrh	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d12c      	bne.n	8003aea <OSInit+0x176>
        return;
    }
#endif

    
    OS_IdleTaskInit(p_err);                                 /* Initialize the Idle Task                               */
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 fa21 	bl	8003ed8 <OS_IdleTaskInit>
    if (*p_err != OS_ERR_NONE) {
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	881b      	ldrh	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d127      	bne.n	8003aee <OSInit+0x17a>
        return;
    }


    OS_TickTaskInit(p_err);                                 /* Initialize the Tick Task                               */
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 febe 	bl	8004820 <OS_TickTaskInit>
    if (*p_err != OS_ERR_NONE) {
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	881b      	ldrh	r3, [r3, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d122      	bne.n	8003af2 <OSInit+0x17e>
        return;
    }


#if OS_CFG_STAT_TASK_EN > 0u                                /* Initialize the Statistic Task                          */
    OS_StatTaskInit(p_err);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f001 fc71 	bl	8005394 <OS_StatTaskInit>
    if (*p_err != OS_ERR_NONE) {
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	881b      	ldrh	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d11d      	bne.n	8003af6 <OSInit+0x182>
    }
#endif


#if OS_CFG_TMR_EN > 0u                                      /* Initialize the Timer Manager module                    */
    OS_TmrInit(p_err);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f002 fc2c 	bl	8006318 <OS_TmrInit>
    if (*p_err != OS_ERR_NONE) {
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	881b      	ldrh	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d118      	bne.n	8003afa <OSInit+0x186>
    }
#endif


#if OS_CFG_DBG_EN > 0u
    OS_Dbg_Init();
 8003ac8:	f002 f9ca 	bl	8005e60 <OS_Dbg_Init>
#endif


    OSCfg_Init();
 8003acc:	f001 fee8 	bl	80058a0 <OSCfg_Init>
 8003ad0:	e014      	b.n	8003afc <OSInit+0x188>

    
#if OS_CFG_FLAG_EN > 0u                                     /* Initialize the Event Flag module                       */
    OS_FlagInit(p_err);
    if (*p_err != OS_ERR_NONE) {
        return;
 8003ad2:	bf00      	nop
 8003ad4:	e012      	b.n	8003afc <OSInit+0x188>


#if OS_CFG_MEM_EN > 0u                                      /* Initialize the Memory Manager module                   */
    OS_MemInit(p_err);
    if (*p_err != OS_ERR_NONE) {
        return;
 8003ad6:	bf00      	nop
 8003ad8:	e010      	b.n	8003afc <OSInit+0x188>


#if (OS_MSG_EN) > 0u                                        /* Initialize the free list of OS_MSGs                    */
    OS_MsgPoolInit(p_err);
    if (*p_err != OS_ERR_NONE) {
        return;
 8003ada:	bf00      	nop
 8003adc:	e00e      	b.n	8003afc <OSInit+0x188>


#if OS_CFG_MUTEX_EN > 0u                                    /* Initialize the Mutex Manager module                    */
    OS_MutexInit(p_err);
    if (*p_err != OS_ERR_NONE) {
        return;
 8003ade:	bf00      	nop
 8003ae0:	e00c      	b.n	8003afc <OSInit+0x188>


#if OS_CFG_Q_EN > 0u
    OS_QInit(p_err);                                        /* Initialize the Message Queue Manager module            */
    if (*p_err != OS_ERR_NONE) {
        return;
 8003ae2:	bf00      	nop
 8003ae4:	e00a      	b.n	8003afc <OSInit+0x188>


#if OS_CFG_SEM_EN > 0u                                      /* Initialize the Semaphore Manager module                */
    OS_SemInit(p_err);
    if (*p_err != OS_ERR_NONE) {
        return;
 8003ae6:	bf00      	nop
 8003ae8:	e008      	b.n	8003afc <OSInit+0x188>
#endif


    OS_TaskInit(p_err);                                     /* Initialize the task manager                            */
    if (*p_err != OS_ERR_NONE) {
        return;
 8003aea:	bf00      	nop
 8003aec:	e006      	b.n	8003afc <OSInit+0x188>
#endif

    
    OS_IdleTaskInit(p_err);                                 /* Initialize the Idle Task                               */
    if (*p_err != OS_ERR_NONE) {
        return;
 8003aee:	bf00      	nop
 8003af0:	e004      	b.n	8003afc <OSInit+0x188>
    }


    OS_TickTaskInit(p_err);                                 /* Initialize the Tick Task                               */
    if (*p_err != OS_ERR_NONE) {
        return;
 8003af2:	bf00      	nop
 8003af4:	e002      	b.n	8003afc <OSInit+0x188>


#if OS_CFG_STAT_TASK_EN > 0u                                /* Initialize the Statistic Task                          */
    OS_StatTaskInit(p_err);
    if (*p_err != OS_ERR_NONE) {
        return;
 8003af6:	bf00      	nop
 8003af8:	e000      	b.n	8003afc <OSInit+0x188>


#if OS_CFG_TMR_EN > 0u                                      /* Initialize the Timer Manager module                    */
    OS_TmrInit(p_err);
    if (*p_err != OS_ERR_NONE) {
        return;
 8003afa:	bf00      	nop
    OS_Dbg_Init();
#endif


    OSCfg_Init();
}
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	20002234 	.word	0x20002234
 8003b08:	20001fad 	.word	0x20001fad
 8003b0c:	20001f9c 	.word	0x20001f9c
 8003b10:	20002208 	.word	0x20002208
 8003b14:	20002214 	.word	0x20002214
 8003b18:	2000213c 	.word	0x2000213c
 8003b1c:	20002130 	.word	0x20002130
 8003b20:	20002210 	.word	0x20002210
 8003b24:	20002204 	.word	0x20002204
 8003b28:	20002428 	.word	0x20002428
 8003b2c:	20002218 	.word	0x20002218
 8003b30:	0800f078 	.word	0x0800f078
 8003b34:	0800f074 	.word	0x0800f074
 8003b38:	20002138 	.word	0x20002138
 8003b3c:	20002224 	.word	0x20002224
 8003b40:	20001fa0 	.word	0x20001fa0
 8003b44:	20002400 	.word	0x20002400
 8003b48:	2000241c 	.word	0x2000241c
 8003b4c:	2000240c 	.word	0x2000240c
 8003b50:	20002228 	.word	0x20002228
 8003b54:	20001fac 	.word	0x20001fac

08003b58 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 250 levels deep.
************************************************************************************************************************
*/

void  OSIntEnter (void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Is OS running?                                         */
 8003b5c:	4b0a      	ldr	r3, [pc, #40]	; (8003b88 <OSIntEnter+0x30>)
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d10a      	bne.n	8003b7a <OSIntEnter+0x22>
        return;                                             /* No                                                     */
    }

    if (OSIntNestingCtr >= (OS_NESTING_CTR)250u) {          /* Have we nested past 250 levels?                        */
 8003b64:	4b09      	ldr	r3, [pc, #36]	; (8003b8c <OSIntEnter+0x34>)
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	2bf9      	cmp	r3, #249	; 0xf9
 8003b6a:	d808      	bhi.n	8003b7e <OSIntEnter+0x26>
        return;                                             /* Yes                                                    */
    }

    OSIntNestingCtr++;                                      /* Increment ISR nesting level                            */
 8003b6c:	4b07      	ldr	r3, [pc, #28]	; (8003b8c <OSIntEnter+0x34>)
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	3301      	adds	r3, #1
 8003b72:	b2da      	uxtb	r2, r3
 8003b74:	4b05      	ldr	r3, [pc, #20]	; (8003b8c <OSIntEnter+0x34>)
 8003b76:	701a      	strb	r2, [r3, #0]
 8003b78:	e002      	b.n	8003b80 <OSIntEnter+0x28>
*/

void  OSIntEnter (void)
{
    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Is OS running?                                         */
        return;                                             /* No                                                     */
 8003b7a:	bf00      	nop
 8003b7c:	e000      	b.n	8003b80 <OSIntEnter+0x28>
    }

    if (OSIntNestingCtr >= (OS_NESTING_CTR)250u) {          /* Have we nested past 250 levels?                        */
        return;                                             /* Yes                                                    */
 8003b7e:	bf00      	nop
    }

    OSIntNestingCtr++;                                      /* Increment ISR nesting level                            */
}
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bc80      	pop	{r7}
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	20001fad 	.word	0x20001fad
 8003b8c:	20002234 	.word	0x20002234

08003b90 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OSSchedLock())
************************************************************************************************************************
*/

void  OSIntExit (void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
 8003b96:	2300      	movs	r3, #0
 8003b98:	607b      	str	r3, [r7, #4]



    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Has the OS started?                                    */
 8003b9a:	4b2b      	ldr	r3, [pc, #172]	; (8003c48 <OSIntExit+0xb8>)
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d14e      	bne.n	8003c40 <OSIntExit+0xb0>
        return;                                             /* No                                                     */
    }

    CPU_INT_DIS();
 8003ba2:	f7fc fb9d 	bl	80002e0 <CPU_SR_Save>
 8003ba6:	6078      	str	r0, [r7, #4]
    if (OSIntNestingCtr == (OS_NESTING_CTR)0) {             /* Prevent OSIntNestingCtr from wrapping                  */
 8003ba8:	4b28      	ldr	r3, [pc, #160]	; (8003c4c <OSIntExit+0xbc>)
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d103      	bne.n	8003bb8 <OSIntExit+0x28>
        CPU_INT_EN();
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f7fc fb99 	bl	80002e8 <CPU_SR_Restore>
        return;
 8003bb6:	e044      	b.n	8003c42 <OSIntExit+0xb2>
    }
    OSIntNestingCtr--;
 8003bb8:	4b24      	ldr	r3, [pc, #144]	; (8003c4c <OSIntExit+0xbc>)
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	b2da      	uxtb	r2, r3
 8003bc0:	4b22      	ldr	r3, [pc, #136]	; (8003c4c <OSIntExit+0xbc>)
 8003bc2:	701a      	strb	r2, [r3, #0]
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* ISRs still nested?                                     */
 8003bc4:	4b21      	ldr	r3, [pc, #132]	; (8003c4c <OSIntExit+0xbc>)
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d003      	beq.n	8003bd4 <OSIntExit+0x44>
        CPU_INT_EN();                                       /* Yes                                                    */
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f7fc fb8b 	bl	80002e8 <CPU_SR_Restore>
        return;
 8003bd2:	e036      	b.n	8003c42 <OSIntExit+0xb2>
    }

    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {        /* Scheduler still locked?                                */
 8003bd4:	4b1e      	ldr	r3, [pc, #120]	; (8003c50 <OSIntExit+0xc0>)
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <OSIntExit+0x54>
        CPU_INT_EN();                                       /* Yes                                                    */
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f7fc fb83 	bl	80002e8 <CPU_SR_Restore>
        return;
 8003be2:	e02e      	b.n	8003c42 <OSIntExit+0xb2>
    }

    OSPrioHighRdy   = OS_PrioGetHighest();                  /* Find highest priority                                  */
 8003be4:	f001 fc58 	bl	8005498 <OS_PrioGetHighest>
 8003be8:	4603      	mov	r3, r0
 8003bea:	461a      	mov	r2, r3
 8003bec:	4b19      	ldr	r3, [pc, #100]	; (8003c54 <OSIntExit+0xc4>)
 8003bee:	701a      	strb	r2, [r3, #0]
    OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;     /* Get highest priority task ready-to-run                 */
 8003bf0:	4b18      	ldr	r3, [pc, #96]	; (8003c54 <OSIntExit+0xc4>)
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4a18      	ldr	r2, [pc, #96]	; (8003c58 <OSIntExit+0xc8>)
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	440b      	add	r3, r1
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a15      	ldr	r2, [pc, #84]	; (8003c5c <OSIntExit+0xcc>)
 8003c06:	6013      	str	r3, [r2, #0]
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                   /* Current task still the highest priority?               */
 8003c08:	4b14      	ldr	r3, [pc, #80]	; (8003c5c <OSIntExit+0xcc>)
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	4b14      	ldr	r3, [pc, #80]	; (8003c60 <OSIntExit+0xd0>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d103      	bne.n	8003c1c <OSIntExit+0x8c>
        CPU_INT_EN();                                       /* Yes                                                    */
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f7fc fb67 	bl	80002e8 <CPU_SR_Restore>
        return;
 8003c1a:	e012      	b.n	8003c42 <OSIntExit+0xb2>
    }

#if OS_CFG_TASK_PROFILE_EN > 0u
    OSTCBHighRdyPtr->CtxSwCtr++;                            /* Inc. # of context switches for this new task           */
 8003c1c:	4b0f      	ldr	r3, [pc, #60]	; (8003c5c <OSIntExit+0xcc>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003c24:	3201      	adds	r2, #1
 8003c26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#endif
    OSTaskCtxSwCtr++;                                       /* Keep track of the total number of ctx switches         */
 8003c2a:	4b0e      	ldr	r3, [pc, #56]	; (8003c64 <OSIntExit+0xd4>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	4a0c      	ldr	r2, [pc, #48]	; (8003c64 <OSIntExit+0xd4>)
 8003c32:	6013      	str	r3, [r2, #0]

#if defined(OS_CFG_TLS_TBL_SIZE) && (OS_CFG_TLS_TBL_SIZE > 0u)
    OS_TLS_TaskSw();
#endif

    OSIntCtxSw();                                           /* Perform interrupt level ctx switch                     */
 8003c34:	f7fc fb21 	bl	800027a <OSIntCtxSw>

    CPU_INT_EN();
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f7fc fb55 	bl	80002e8 <CPU_SR_Restore>
 8003c3e:	e000      	b.n	8003c42 <OSIntExit+0xb2>
    CPU_SR_ALLOC();



    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Has the OS started?                                    */
        return;                                             /* No                                                     */
 8003c40:	bf00      	nop
#endif

    OSIntCtxSw();                                           /* Perform interrupt level ctx switch                     */

    CPU_INT_EN();
}
 8003c42:	3708      	adds	r7, #8
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	20001fad 	.word	0x20001fad
 8003c4c:	20002234 	.word	0x20002234
 8003c50:	20001f9c 	.word	0x20001f9c
 8003c54:	20002130 	.word	0x20002130
 8003c58:	20001fb0 	.word	0x20001fb0
 8003c5c:	20002214 	.word	0x20002214
 8003c60:	20002208 	.word	0x20002208
 8003c64:	20002230 	.word	0x20002230

08003c68 <OSSched>:
* Note(s)    : 1) Rescheduling is prevented when the scheduler is locked (see OSSchedLock())
************************************************************************************************************************
*/

void  OSSched (void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
 8003c6e:	2300      	movs	r3, #0
 8003c70:	607b      	str	r3, [r7, #4]



    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* ISRs still nested?                                     */
 8003c72:	4b20      	ldr	r3, [pc, #128]	; (8003cf4 <OSSched+0x8c>)
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d136      	bne.n	8003ce8 <OSSched+0x80>
        return;                                             /* Yes ... only schedule when no nested ISRs              */
    }

    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {        /* Scheduler locked?                                      */
 8003c7a:	4b1f      	ldr	r3, [pc, #124]	; (8003cf8 <OSSched+0x90>)
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d134      	bne.n	8003cec <OSSched+0x84>
        return;                                             /* Yes                                                    */
    }

    CPU_INT_DIS();
 8003c82:	f7fc fb2d 	bl	80002e0 <CPU_SR_Save>
 8003c86:	6078      	str	r0, [r7, #4]
    OSPrioHighRdy   = OS_PrioGetHighest();                  /* Find the highest priority ready                        */
 8003c88:	f001 fc06 	bl	8005498 <OS_PrioGetHighest>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	461a      	mov	r2, r3
 8003c90:	4b1a      	ldr	r3, [pc, #104]	; (8003cfc <OSSched+0x94>)
 8003c92:	701a      	strb	r2, [r3, #0]
    OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;
 8003c94:	4b19      	ldr	r3, [pc, #100]	; (8003cfc <OSSched+0x94>)
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	4619      	mov	r1, r3
 8003c9a:	4a19      	ldr	r2, [pc, #100]	; (8003d00 <OSSched+0x98>)
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	440b      	add	r3, r1
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	4413      	add	r3, r2
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a16      	ldr	r2, [pc, #88]	; (8003d04 <OSSched+0x9c>)
 8003caa:	6013      	str	r3, [r2, #0]
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                   /* Current task is still highest priority task?           */
 8003cac:	4b15      	ldr	r3, [pc, #84]	; (8003d04 <OSSched+0x9c>)
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	4b15      	ldr	r3, [pc, #84]	; (8003d08 <OSSched+0xa0>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d103      	bne.n	8003cc0 <OSSched+0x58>
        CPU_INT_EN();                                       /* Yes ... no need to context switch                      */
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f7fc fb15 	bl	80002e8 <CPU_SR_Restore>
        return;
 8003cbe:	e016      	b.n	8003cee <OSSched+0x86>
    }

#if OS_CFG_TASK_PROFILE_EN > 0u
    OSTCBHighRdyPtr->CtxSwCtr++;                            /* Inc. # of context switches to this task                */
 8003cc0:	4b10      	ldr	r3, [pc, #64]	; (8003d04 <OSSched+0x9c>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003cc8:	3201      	adds	r2, #1
 8003cca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#endif
    OSTaskCtxSwCtr++;                                       /* Increment context switch counter                       */
 8003cce:	4b0f      	ldr	r3, [pc, #60]	; (8003d0c <OSSched+0xa4>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	4a0d      	ldr	r2, [pc, #52]	; (8003d0c <OSSched+0xa4>)
 8003cd6:	6013      	str	r3, [r2, #0]

#if defined(OS_CFG_TLS_TBL_SIZE) && (OS_CFG_TLS_TBL_SIZE > 0u)
    OS_TLS_TaskSw();
#endif

    OS_TASK_SW();                                           /* Perform a task level context switch                    */
 8003cd8:	f7fc faca 	bl	8000270 <OSCtxSw>
    CPU_INT_EN();
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f7fc fb03 	bl	80002e8 <CPU_SR_Restore>

#ifdef OS_TASK_SW_SYNC
    OS_TASK_SW_SYNC();
 8003ce2:	f3bf 8f6f 	isb	sy
 8003ce6:	e002      	b.n	8003cee <OSSched+0x86>
    CPU_SR_ALLOC();



    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* ISRs still nested?                                     */
        return;                                             /* Yes ... only schedule when no nested ISRs              */
 8003ce8:	bf00      	nop
 8003cea:	e000      	b.n	8003cee <OSSched+0x86>
    }

    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {        /* Scheduler locked?                                      */
        return;                                             /* Yes                                                    */
 8003cec:	bf00      	nop
    CPU_INT_EN();

#ifdef OS_TASK_SW_SYNC
    OS_TASK_SW_SYNC();
#endif
}
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	20002234 	.word	0x20002234
 8003cf8:	20001f9c 	.word	0x20001f9c
 8003cfc:	20002130 	.word	0x20002130
 8003d00:	20001fb0 	.word	0x20001fb0
 8003d04:	20002214 	.word	0x20002214
 8003d08:	20002208 	.word	0x20002208
 8003d0c:	20002230 	.word	0x20002230

08003d10 <OSSchedLock>:
*                 call to OSSchedLock() you MUST have a call to OSSchedUnlock().
************************************************************************************************************************
*/

void  OSSchedLock (OS_ERR  *p_err)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
    CPU_SR_ALLOC();
 8003d18:	2300      	movs	r3, #0
 8003d1a:	60fb      	str	r3, [r7, #12]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 8003d1c:	4b17      	ldr	r3, [pc, #92]	; (8003d7c <OSSchedLock+0x6c>)
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d004      	beq.n	8003d2e <OSSchedLock+0x1e>
       *p_err = OS_ERR_SCHED_LOCK_ISR;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f646 5262 	movw	r2, #28002	; 0x6d62
 8003d2a:	801a      	strh	r2, [r3, #0]
        return;
 8003d2c:	e022      	b.n	8003d74 <OSSchedLock+0x64>
    }
#endif

    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Make sure multitasking is running                      */
 8003d2e:	4b14      	ldr	r3, [pc, #80]	; (8003d80 <OSSchedLock+0x70>)
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d004      	beq.n	8003d40 <OSSchedLock+0x30>
       *p_err = OS_ERR_OS_NOT_RUNNING;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f645 6289 	movw	r2, #24201	; 0x5e89
 8003d3c:	801a      	strh	r2, [r3, #0]
        return;
 8003d3e:	e019      	b.n	8003d74 <OSSchedLock+0x64>
    }

    if (OSSchedLockNestingCtr >= (OS_NESTING_CTR)250u) {    /* Prevent OSSchedLockNestingCtr overflowing              */
 8003d40:	4b10      	ldr	r3, [pc, #64]	; (8003d84 <OSSchedLock+0x74>)
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	2bf9      	cmp	r3, #249	; 0xf9
 8003d46:	d904      	bls.n	8003d52 <OSSchedLock+0x42>
       *p_err = OS_ERR_LOCK_NESTING_OVF;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f245 2209 	movw	r2, #21001	; 0x5209
 8003d4e:	801a      	strh	r2, [r3, #0]
        return;
 8003d50:	e010      	b.n	8003d74 <OSSchedLock+0x64>
    }

    CPU_CRITICAL_ENTER();
 8003d52:	f7fc fac5 	bl	80002e0 <CPU_SR_Save>
 8003d56:	60f8      	str	r0, [r7, #12]
    OSSchedLockNestingCtr++;                                /* Increment lock nesting level                           */
 8003d58:	4b0a      	ldr	r3, [pc, #40]	; (8003d84 <OSSchedLock+0x74>)
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	b2da      	uxtb	r2, r3
 8003d60:	4b08      	ldr	r3, [pc, #32]	; (8003d84 <OSSchedLock+0x74>)
 8003d62:	701a      	strb	r2, [r3, #0]
#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
    OS_SchedLockTimeMeasStart();
 8003d64:	f000 fcce 	bl	8004704 <OS_SchedLockTimeMeasStart>
#endif
    CPU_CRITICAL_EXIT();
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f7fc fabd 	bl	80002e8 <CPU_SR_Restore>
   *p_err = OS_ERR_NONE;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	801a      	strh	r2, [r3, #0]
}
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	20002234 	.word	0x20002234
 8003d80:	20001fad 	.word	0x20001fad
 8003d84:	20001f9c 	.word	0x20001f9c

08003d88 <OSSchedUnlock>:
*                 OSSchedLock() you MUST have a call to OSSchedUnlock().
************************************************************************************************************************
*/

void  OSSchedUnlock (OS_ERR  *p_err)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
    CPU_SR_ALLOC();
 8003d90:	2300      	movs	r3, #0
 8003d92:	60fb      	str	r3, [r7, #12]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 8003d94:	4b1e      	ldr	r3, [pc, #120]	; (8003e10 <OSSchedUnlock+0x88>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d004      	beq.n	8003da6 <OSSchedUnlock+0x1e>
       *p_err = OS_ERR_SCHED_UNLOCK_ISR;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f646 5265 	movw	r2, #28005	; 0x6d65
 8003da2:	801a      	strh	r2, [r3, #0]
        return;
 8003da4:	e030      	b.n	8003e08 <OSSchedUnlock+0x80>
    }
#endif

    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Make sure multitasking is running                      */
 8003da6:	4b1b      	ldr	r3, [pc, #108]	; (8003e14 <OSSchedUnlock+0x8c>)
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d004      	beq.n	8003db8 <OSSchedUnlock+0x30>
       *p_err = OS_ERR_OS_NOT_RUNNING;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f645 6289 	movw	r2, #24201	; 0x5e89
 8003db4:	801a      	strh	r2, [r3, #0]
        return;
 8003db6:	e027      	b.n	8003e08 <OSSchedUnlock+0x80>
    }

    if (OSSchedLockNestingCtr == (OS_NESTING_CTR)0) {       /* See if the scheduler is locked                         */
 8003db8:	4b17      	ldr	r3, [pc, #92]	; (8003e18 <OSSchedUnlock+0x90>)
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d104      	bne.n	8003dca <OSSchedUnlock+0x42>
       *p_err = OS_ERR_SCHED_NOT_LOCKED;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f646 5264 	movw	r2, #28004	; 0x6d64
 8003dc6:	801a      	strh	r2, [r3, #0]
        return;
 8003dc8:	e01e      	b.n	8003e08 <OSSchedUnlock+0x80>
    }

    CPU_CRITICAL_ENTER();
 8003dca:	f7fc fa89 	bl	80002e0 <CPU_SR_Save>
 8003dce:	60f8      	str	r0, [r7, #12]
    OSSchedLockNestingCtr--;                                /* Decrement lock nesting level                           */
 8003dd0:	4b11      	ldr	r3, [pc, #68]	; (8003e18 <OSSchedUnlock+0x90>)
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	b2da      	uxtb	r2, r3
 8003dd8:	4b0f      	ldr	r3, [pc, #60]	; (8003e18 <OSSchedUnlock+0x90>)
 8003dda:	701a      	strb	r2, [r3, #0]
    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {
 8003ddc:	4b0e      	ldr	r3, [pc, #56]	; (8003e18 <OSSchedUnlock+0x90>)
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d007      	beq.n	8003df4 <OSSchedUnlock+0x6c>
        CPU_CRITICAL_EXIT();                                /* Scheduler is still locked                              */
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f7fc fa7f 	bl	80002e8 <CPU_SR_Restore>
       *p_err = OS_ERR_SCHED_LOCKED;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f646 5263 	movw	r2, #28003	; 0x6d63
 8003df0:	801a      	strh	r2, [r3, #0]
        return;
 8003df2:	e009      	b.n	8003e08 <OSSchedUnlock+0x80>
    }

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
    OS_SchedLockTimeMeasStop();
 8003df4:	f000 fc98 	bl	8004728 <OS_SchedLockTimeMeasStop>
#endif

    CPU_CRITICAL_EXIT();                                    /* Scheduler should be re-enabled                         */
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f7fc fa75 	bl	80002e8 <CPU_SR_Restore>
    OSSched();                                              /* Run the scheduler                                      */
 8003dfe:	f7ff ff33 	bl	8003c68 <OSSched>
   *p_err = OS_ERR_NONE;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	801a      	strh	r2, [r3, #0]
}
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	20002234 	.word	0x20002234
 8003e14:	20001fad 	.word	0x20001fad
 8003e18:	20001f9c 	.word	0x20001f9c

08003e1c <OSStart>:
*              2) OSStart() is not supposed to return.  If it does, that would be considered a fatal error.
************************************************************************************************************************
*/

void  OSStart (OS_ERR  *p_err)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    if (OSRunning == OS_STATE_OS_STOPPED) {
 8003e24:	4b17      	ldr	r3, [pc, #92]	; (8003e84 <OSStart+0x68>)
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d123      	bne.n	8003e74 <OSStart+0x58>
        OSPrioHighRdy   = OS_PrioGetHighest();              /* Find the highest priority                              */
 8003e2c:	f001 fb34 	bl	8005498 <OS_PrioGetHighest>
 8003e30:	4603      	mov	r3, r0
 8003e32:	461a      	mov	r2, r3
 8003e34:	4b14      	ldr	r3, [pc, #80]	; (8003e88 <OSStart+0x6c>)
 8003e36:	701a      	strb	r2, [r3, #0]
        OSPrioCur       = OSPrioHighRdy;
 8003e38:	4b13      	ldr	r3, [pc, #76]	; (8003e88 <OSStart+0x6c>)
 8003e3a:	781a      	ldrb	r2, [r3, #0]
 8003e3c:	4b13      	ldr	r3, [pc, #76]	; (8003e8c <OSStart+0x70>)
 8003e3e:	701a      	strb	r2, [r3, #0]
        OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;
 8003e40:	4b11      	ldr	r3, [pc, #68]	; (8003e88 <OSStart+0x6c>)
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	4619      	mov	r1, r3
 8003e46:	4a12      	ldr	r2, [pc, #72]	; (8003e90 <OSStart+0x74>)
 8003e48:	460b      	mov	r3, r1
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	440b      	add	r3, r1
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4413      	add	r3, r2
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a0f      	ldr	r2, [pc, #60]	; (8003e94 <OSStart+0x78>)
 8003e56:	6013      	str	r3, [r2, #0]
        OSTCBCurPtr     = OSTCBHighRdyPtr;
 8003e58:	4b0e      	ldr	r3, [pc, #56]	; (8003e94 <OSStart+0x78>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a0e      	ldr	r2, [pc, #56]	; (8003e98 <OSStart+0x7c>)
 8003e5e:	6013      	str	r3, [r2, #0]
        OSRunning       = OS_STATE_OS_RUNNING;
 8003e60:	4b08      	ldr	r3, [pc, #32]	; (8003e84 <OSStart+0x68>)
 8003e62:	2201      	movs	r2, #1
 8003e64:	701a      	strb	r2, [r3, #0]
        OSStartHighRdy();                                   /* Execute target specific code to start task             */
 8003e66:	f7fc f9cb 	bl	8000200 <OSStartHighRdy>
       *p_err           = OS_ERR_FATAL_RETURN;              /* OSStart() is not supposed to return                    */
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f643 2299 	movw	r2, #15001	; 0x3a99
 8003e70:	801a      	strh	r2, [r3, #0]
    } else {
       *p_err           = OS_ERR_OS_RUNNING;                /* OS is already running                                  */
    }
}
 8003e72:	e003      	b.n	8003e7c <OSStart+0x60>
        OSTCBCurPtr     = OSTCBHighRdyPtr;
        OSRunning       = OS_STATE_OS_RUNNING;
        OSStartHighRdy();                                   /* Execute target specific code to start task             */
       *p_err           = OS_ERR_FATAL_RETURN;              /* OSStart() is not supposed to return                    */
    } else {
       *p_err           = OS_ERR_OS_RUNNING;                /* OS is already running                                  */
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f645 628a 	movw	r2, #24202	; 0x5e8a
 8003e7a:	801a      	strh	r2, [r3, #0]
    }
}
 8003e7c:	bf00      	nop
 8003e7e:	3708      	adds	r7, #8
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	20001fad 	.word	0x20001fad
 8003e88:	20002130 	.word	0x20002130
 8003e8c:	2000213c 	.word	0x2000213c
 8003e90:	20001fb0 	.word	0x20001fb0
 8003e94:	20002214 	.word	0x20002214
 8003e98:	20002208 	.word	0x20002208

08003e9c <OS_IdleTask>:
*              3) This hook has been added to allow you to do such things as STOP the CPU to conserve power.
************************************************************************************************************************
*/

void  OS_IdleTask (void  *p_arg)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
    CPU_SR_ALLOC();
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	60fb      	str	r3, [r7, #12]


    (void)&p_arg;                                           /* Prevent compiler warning for not using 'p_arg'         */

    while (DEF_ON) {
        CPU_CRITICAL_ENTER();
 8003ea8:	f7fc fa1a 	bl	80002e0 <CPU_SR_Save>
 8003eac:	60f8      	str	r0, [r7, #12]
        OSIdleTaskCtr++;
 8003eae:	4b08      	ldr	r3, [pc, #32]	; (8003ed0 <OS_IdleTask+0x34>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	4a06      	ldr	r2, [pc, #24]	; (8003ed0 <OS_IdleTask+0x34>)
 8003eb6:	6013      	str	r3, [r2, #0]
#if OS_CFG_STAT_TASK_EN > 0u
        OSStatTaskCtr++;
 8003eb8:	4b06      	ldr	r3, [pc, #24]	; (8003ed4 <OS_IdleTask+0x38>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	4a05      	ldr	r2, [pc, #20]	; (8003ed4 <OS_IdleTask+0x38>)
 8003ec0:	6013      	str	r3, [r2, #0]
#endif
        CPU_CRITICAL_EXIT();
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f7fc fa10 	bl	80002e8 <CPU_SR_Restore>

        OSIdleTaskHook();                                   /* Call user definable HOOK                               */
 8003ec8:	f002 fb90 	bl	80065ec <OSIdleTaskHook>
    }
 8003ecc:	e7ec      	b.n	8003ea8 <OS_IdleTask+0xc>
 8003ece:	bf00      	nop
 8003ed0:	20002414 	.word	0x20002414
 8003ed4:	20001fa8 	.word	0x20001fa8

08003ed8 <OS_IdleTaskInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_IdleTaskInit (OS_ERR  *p_err)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b08c      	sub	sp, #48	; 0x30
 8003edc:	af0a      	add	r7, sp, #40	; 0x28
 8003ede:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    OSIdleTaskCtr = (OS_IDLE_CTR)0;
 8003ee0:	4b10      	ldr	r3, [pc, #64]	; (8003f24 <OS_IdleTaskInit+0x4c>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	601a      	str	r2, [r3, #0]
                                                            /* ---------------- CREATE THE IDLE TASK ---------------- */
    OSTaskCreate((OS_TCB     *)&OSIdleTaskTCB,
 8003ee6:	4b10      	ldr	r3, [pc, #64]	; (8003f28 <OS_IdleTaskInit+0x50>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a10      	ldr	r2, [pc, #64]	; (8003f2c <OS_IdleTaskInit+0x54>)
 8003eec:	6812      	ldr	r2, [r2, #0]
 8003eee:	4910      	ldr	r1, [pc, #64]	; (8003f30 <OS_IdleTaskInit+0x58>)
 8003ef0:	6809      	ldr	r1, [r1, #0]
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	9008      	str	r0, [sp, #32]
 8003ef6:	200b      	movs	r0, #11
 8003ef8:	9007      	str	r0, [sp, #28]
 8003efa:	2000      	movs	r0, #0
 8003efc:	9006      	str	r0, [sp, #24]
 8003efe:	2000      	movs	r0, #0
 8003f00:	9005      	str	r0, [sp, #20]
 8003f02:	2000      	movs	r0, #0
 8003f04:	9004      	str	r0, [sp, #16]
 8003f06:	9103      	str	r1, [sp, #12]
 8003f08:	9202      	str	r2, [sp, #8]
 8003f0a:	9301      	str	r3, [sp, #4]
 8003f0c:	231f      	movs	r3, #31
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	2300      	movs	r3, #0
 8003f12:	4a08      	ldr	r2, [pc, #32]	; (8003f34 <OS_IdleTaskInit+0x5c>)
 8003f14:	4908      	ldr	r1, [pc, #32]	; (8003f38 <OS_IdleTaskInit+0x60>)
 8003f16:	4809      	ldr	r0, [pc, #36]	; (8003f3c <OS_IdleTaskInit+0x64>)
 8003f18:	f7fe fd6e 	bl	80029f8 <OSTaskCreate>
                 (OS_MSG_QTY  )0u,
                 (OS_TICK     )0u,
                 (void       *)0,
                 (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR | OS_OPT_TASK_NO_TLS),
                 (OS_ERR     *)p_err);
}
 8003f1c:	bf00      	nop
 8003f1e:	3708      	adds	r7, #8
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	20002414 	.word	0x20002414
 8003f28:	0800f068 	.word	0x0800f068
 8003f2c:	0800f06c 	.word	0x0800f06c
 8003f30:	0800f070 	.word	0x0800f070
 8003f34:	08003e9d 	.word	0x08003e9d
 8003f38:	0800ef70 	.word	0x0800ef70
 8003f3c:	20002304 	.word	0x20002304

08003f40 <OS_Pend>:

void  OS_Pend (OS_PEND_DATA  *p_pend_data,
               OS_PEND_OBJ   *p_obj,
               OS_STATE       pending_on,
               OS_TICK        timeout)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	603b      	str	r3, [r7, #0]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	71fb      	strb	r3, [r7, #7]
    OS_PEND_LIST  *p_pend_list;



    OSTCBCurPtr->PendOn     = pending_on;                    /* Resource not available, wait until it is              */
 8003f50:	4b1b      	ldr	r3, [pc, #108]	; (8003fc0 <OS_Pend+0x80>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	79fa      	ldrb	r2, [r7, #7]
 8003f56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    OSTCBCurPtr->PendStatus = OS_STATUS_PEND_OK;
 8003f5a:	4b19      	ldr	r3, [pc, #100]	; (8003fc0 <OS_Pend+0x80>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    OS_TaskBlock(OSTCBCurPtr,                                /* Block the task and add it to the tick list if needed  */
 8003f64:	4b16      	ldr	r3, [pc, #88]	; (8003fc0 <OS_Pend+0x80>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6839      	ldr	r1, [r7, #0]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 fc06 	bl	800477c <OS_TaskBlock>
                 timeout);

    if (p_obj != (OS_PEND_OBJ *)0) {                         /* Add the current task to the pend list ...             */
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d011      	beq.n	8003f9a <OS_Pend+0x5a>
        p_pend_list             = &p_obj->PendList;          /* ... if there is an object to pend on                  */
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	3308      	adds	r3, #8
 8003f7a:	617b      	str	r3, [r7, #20]
        p_pend_data->PendObjPtr = p_obj;                     /* Save the pointer to the object pending on             */
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	60da      	str	r2, [r3, #12]
        OS_PendDataInit((OS_TCB       *)OSTCBCurPtr,         /* Initialize the remaining field                        */
 8003f82:	4b0f      	ldr	r3, [pc, #60]	; (8003fc0 <OS_Pend+0x80>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2201      	movs	r2, #1
 8003f88:	68f9      	ldr	r1, [r7, #12]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 f81a 	bl	8003fc4 <OS_PendDataInit>
                        (OS_PEND_DATA *)p_pend_data,
                        (OS_OBJ_QTY    )1);
        OS_PendListInsertPrio(p_pend_list,                   /* Insert in the pend list in priority order             */
 8003f90:	68f9      	ldr	r1, [r7, #12]
 8003f92:	6978      	ldr	r0, [r7, #20]
 8003f94:	f000 f8ec 	bl	8004170 <OS_PendListInsertPrio>
 8003f98:	e008      	b.n	8003fac <OS_Pend+0x6c>
                              p_pend_data);
    } else {
        OSTCBCurPtr->PendDataTblEntries = (OS_OBJ_QTY    )0; /* If no object being pended on the clear these fields   */
 8003f9a:	4b09      	ldr	r3, [pc, #36]	; (8003fc0 <OS_Pend+0x80>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        OSTCBCurPtr->PendDataTblPtr     = (OS_PEND_DATA *)0; /* ... in the TCB                                        */
 8003fa4:	4b06      	ldr	r3, [pc, #24]	; (8003fc0 <OS_Pend+0x80>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	631a      	str	r2, [r3, #48]	; 0x30
    }
#if OS_CFG_DBG_EN > 0u
    OS_PendDbgNameAdd(p_obj,
 8003fac:	4b04      	ldr	r3, [pc, #16]	; (8003fc0 <OS_Pend+0x80>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	68b8      	ldr	r0, [r7, #8]
 8003fb4:	f000 f83c 	bl	8004030 <OS_PendDbgNameAdd>
                      OSTCBCurPtr);
#endif
}
 8003fb8:	bf00      	nop
 8003fba:	3718      	adds	r7, #24
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	20002208 	.word	0x20002208

08003fc4 <OS_PendDataInit>:
*/

void  OS_PendDataInit (OS_TCB        *p_tcb,
                       OS_PEND_DATA  *p_pend_data_tbl,
                       OS_OBJ_QTY     tbl_size)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b087      	sub	sp, #28
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	80fb      	strh	r3, [r7, #6]
    OS_OBJ_QTY  i;



    p_tcb->PendDataTblEntries = tbl_size;                   /* Link the TCB to the beginning of the table             */
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	88fa      	ldrh	r2, [r7, #6]
 8003fd6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    p_tcb->PendDataTblPtr     = p_pend_data_tbl;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	631a      	str	r2, [r3, #48]	; 0x30

    for (i = 0u; i < tbl_size; i++) {
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	82fb      	strh	r3, [r7, #22]
 8003fe4:	e01a      	b.n	800401c <OS_PendDataInit+0x58>
        p_pend_data_tbl->NextPtr    = (OS_PEND_DATA *)0;    /* Initialize all the fields                              */
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	605a      	str	r2, [r3, #4]
        p_pend_data_tbl->PrevPtr    = (OS_PEND_DATA *)0;
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	601a      	str	r2, [r3, #0]
        p_pend_data_tbl->RdyObjPtr  = (OS_PEND_OBJ  *)0;
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	611a      	str	r2, [r3, #16]
        p_pend_data_tbl->RdyMsgPtr  = (void         *)0;
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	615a      	str	r2, [r3, #20]
        p_pend_data_tbl->RdyMsgSize = (OS_MSG_SIZE   )0;
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	2200      	movs	r2, #0
 8004002:	831a      	strh	r2, [r3, #24]
        p_pend_data_tbl->RdyTS      = (CPU_TS        )0;
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	2200      	movs	r2, #0
 8004008:	61da      	str	r2, [r3, #28]
        p_pend_data_tbl->TCBPtr     = p_tcb;                /* Every entry points back to the TCB of the task         */
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	609a      	str	r2, [r3, #8]
        p_pend_data_tbl++;
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	3320      	adds	r3, #32
 8004014:	60bb      	str	r3, [r7, #8]


    p_tcb->PendDataTblEntries = tbl_size;                   /* Link the TCB to the beginning of the table             */
    p_tcb->PendDataTblPtr     = p_pend_data_tbl;

    for (i = 0u; i < tbl_size; i++) {
 8004016:	8afb      	ldrh	r3, [r7, #22]
 8004018:	3301      	adds	r3, #1
 800401a:	82fb      	strh	r3, [r7, #22]
 800401c:	8afa      	ldrh	r2, [r7, #22]
 800401e:	88fb      	ldrh	r3, [r7, #6]
 8004020:	429a      	cmp	r2, r3
 8004022:	d3e0      	bcc.n	8003fe6 <OS_PendDataInit+0x22>
        p_pend_data_tbl->RdyMsgSize = (OS_MSG_SIZE   )0;
        p_pend_data_tbl->RdyTS      = (CPU_TS        )0;
        p_pend_data_tbl->TCBPtr     = p_tcb;                /* Every entry points back to the TCB of the task         */
        p_pend_data_tbl++;
    }
}
 8004024:	bf00      	nop
 8004026:	371c      	adds	r7, #28
 8004028:	46bd      	mov	sp, r7
 800402a:	bc80      	pop	{r7}
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop

08004030 <OS_PendDbgNameAdd>:


#if OS_CFG_DBG_EN > 0u
void  OS_PendDbgNameAdd (OS_PEND_OBJ  *p_obj,
                         OS_TCB       *p_tcb)
{
 8004030:	b480      	push	{r7}
 8004032:	b087      	sub	sp, #28
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
    OS_PEND_LIST  *p_pend_list;
    OS_PEND_DATA  *p_pend_data;
    OS_TCB        *p_tcb1;


    if (p_obj != (OS_PEND_OBJ *)0) {
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d012      	beq.n	8004066 <OS_PendDbgNameAdd+0x36>
        p_tcb->DbgNamePtr =  p_obj->NamePtr;                /* Task pending on this object ... save name in TCB       */
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
        p_pend_list       = &p_obj->PendList;               /* Find name of HP task pending on this object ...        */
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	3308      	adds	r3, #8
 800404e:	617b      	str	r3, [r7, #20]
        p_pend_data       =  p_pend_list->HeadPtr;
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	613b      	str	r3, [r7, #16]
        p_tcb1            =  p_pend_data->TCBPtr;
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	60fb      	str	r3, [r7, #12]
        p_obj->DbgNamePtr = p_tcb1->NamePtr;                /* ... Save in object                                     */
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6a1a      	ldr	r2, [r3, #32]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	61da      	str	r2, [r3, #28]
            default:
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)" ");
                 break;
        }
    }
}
 8004064:	e016      	b.n	8004094 <OS_PendDbgNameAdd+0x64>
        p_pend_list       = &p_obj->PendList;               /* Find name of HP task pending on this object ...        */
        p_pend_data       =  p_pend_list->HeadPtr;
        p_tcb1            =  p_pend_data->TCBPtr;
        p_obj->DbgNamePtr = p_tcb1->NamePtr;                /* ... Save in object                                     */
    } else {
        switch (p_tcb->PendOn) {
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800406c:	2b02      	cmp	r3, #2
 800406e:	d002      	beq.n	8004076 <OS_PendDbgNameAdd+0x46>
 8004070:	2b07      	cmp	r3, #7
 8004072:	d005      	beq.n	8004080 <OS_PendDbgNameAdd+0x50>
 8004074:	e009      	b.n	800408a <OS_PendDbgNameAdd+0x5a>
            case OS_TASK_PEND_ON_TASK_Q:
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)"Task Q");
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	4a09      	ldr	r2, [pc, #36]	; (80040a0 <OS_PendDbgNameAdd+0x70>)
 800407a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
                 break;
 800407e:	e009      	b.n	8004094 <OS_PendDbgNameAdd+0x64>

            case OS_TASK_PEND_ON_TASK_SEM:
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)"Task Sem");
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	4a08      	ldr	r2, [pc, #32]	; (80040a4 <OS_PendDbgNameAdd+0x74>)
 8004084:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
                 break;
 8004088:	e004      	b.n	8004094 <OS_PendDbgNameAdd+0x64>

            default:
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)" ");
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	4a06      	ldr	r2, [pc, #24]	; (80040a8 <OS_PendDbgNameAdd+0x78>)
 800408e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
                 break;
 8004092:	bf00      	nop
        }
    }
}
 8004094:	bf00      	nop
 8004096:	371c      	adds	r7, #28
 8004098:	46bd      	mov	sp, r7
 800409a:	bc80      	pop	{r7}
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	0800ef84 	.word	0x0800ef84
 80040a4:	0800ef8c 	.word	0x0800ef8c
 80040a8:	0800ef98 	.word	0x0800ef98

080040ac <OS_PendDbgNameRemove>:



void  OS_PendDbgNameRemove (OS_PEND_OBJ  *p_obj,
                            OS_TCB       *p_tcb)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b087      	sub	sp, #28
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
    OS_PEND_LIST  *p_pend_list;
    OS_PEND_DATA  *p_pend_data;
    OS_TCB        *p_tcb1;


    p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)" ");          /* Remove name of object pended on for readied task       */
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	4a0d      	ldr	r2, [pc, #52]	; (80040f0 <OS_PendDbgNameRemove+0x44>)
 80040ba:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    p_pend_list       = &p_obj->PendList;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	3308      	adds	r3, #8
 80040c2:	617b      	str	r3, [r7, #20]
    p_pend_data       =  p_pend_list->HeadPtr;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	613b      	str	r3, [r7, #16]
    if (p_pend_data  != (OS_PEND_DATA *)0) {
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d007      	beq.n	80040e0 <OS_PendDbgNameRemove+0x34>
        p_tcb1            = p_pend_data->TCBPtr;
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	60fb      	str	r3, [r7, #12]
        p_obj->DbgNamePtr = p_tcb1->NamePtr;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6a1a      	ldr	r2, [r3, #32]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	61da      	str	r2, [r3, #28]
    } else {
        p_obj->DbgNamePtr = (CPU_CHAR *)((void *)" ");      /* No other task pending on object                        */
    }
}
 80040de:	e002      	b.n	80040e6 <OS_PendDbgNameRemove+0x3a>
    p_pend_data       =  p_pend_list->HeadPtr;
    if (p_pend_data  != (OS_PEND_DATA *)0) {
        p_tcb1            = p_pend_data->TCBPtr;
        p_obj->DbgNamePtr = p_tcb1->NamePtr;
    } else {
        p_obj->DbgNamePtr = (CPU_CHAR *)((void *)" ");      /* No other task pending on object                        */
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a03      	ldr	r2, [pc, #12]	; (80040f0 <OS_PendDbgNameRemove+0x44>)
 80040e4:	61da      	str	r2, [r3, #28]
    }
}
 80040e6:	bf00      	nop
 80040e8:	371c      	adds	r7, #28
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bc80      	pop	{r7}
 80040ee:	4770      	bx	lr
 80040f0:	0800ef98 	.word	0x0800ef98

080040f4 <OS_PendListChangePrio>:
*              2) It's assumed that the TCB contains the NEW priority in its .Prio field.
************************************************************************************************************************
*/

void  OS_PendListChangePrio (OS_TCB   *p_tcb)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
    OS_PEND_DATA   *p_pend_data;
    OS_PEND_LIST   *p_pend_list;
    OS_PEND_OBJ    *p_obj;


    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to first wait list entry                 */
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004100:	613b      	str	r3, [r7, #16]
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get the number of pend list task is in         */
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004108:	82fb      	strh	r3, [r7, #22]

    while (n_pend_list > 0u) {
 800410a:	e017      	b.n	800413c <OS_PendListChangePrio+0x48>
        p_obj       =  p_pend_data->PendObjPtr;                     /* Get pointer to pend list                       */
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	60fb      	str	r3, [r7, #12]
        p_pend_list = &p_obj->PendList;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	3308      	adds	r3, #8
 8004116:	60bb      	str	r3, [r7, #8]
        if (p_pend_list->NbrEntries > 1u) {                         /* Only move if multiple entries in the list      */
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	891b      	ldrh	r3, [r3, #8]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d907      	bls.n	8004130 <OS_PendListChangePrio+0x3c>
            OS_PendListRemove1(p_pend_list,                         /* Remove entry from current position             */
 8004120:	6939      	ldr	r1, [r7, #16]
 8004122:	68b8      	ldr	r0, [r7, #8]
 8004124:	f000 f8c2 	bl	80042ac <OS_PendListRemove1>
                               p_pend_data);
            OS_PendListInsertPrio(p_pend_list,                      /* INSERT it back in the list                     */
 8004128:	6939      	ldr	r1, [r7, #16]
 800412a:	68b8      	ldr	r0, [r7, #8]
 800412c:	f000 f820 	bl	8004170 <OS_PendListInsertPrio>
                                  p_pend_data);
        }
        p_pend_data++;                                              /* Point to next wait list                        */
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	3320      	adds	r3, #32
 8004134:	613b      	str	r3, [r7, #16]
        n_pend_list--;
 8004136:	8afb      	ldrh	r3, [r7, #22]
 8004138:	3b01      	subs	r3, #1
 800413a:	82fb      	strh	r3, [r7, #22]


    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to first wait list entry                 */
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get the number of pend list task is in         */

    while (n_pend_list > 0u) {
 800413c:	8afb      	ldrh	r3, [r7, #22]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1e4      	bne.n	800410c <OS_PendListChangePrio+0x18>
                                  p_pend_data);
        }
        p_pend_data++;                                              /* Point to next wait list                        */
        n_pend_list--;
    }
}
 8004142:	bf00      	nop
 8004144:	3718      	adds	r7, #24
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop

0800414c <OS_PendListInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application must not call it.
************************************************************************************************************************
*/

void  OS_PendListInit (OS_PEND_LIST  *p_pend_list)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
    p_pend_list->HeadPtr    = (OS_PEND_DATA *)0;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]
    p_pend_list->TailPtr    = (OS_PEND_DATA *)0;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	605a      	str	r2, [r3, #4]
    p_pend_list->NbrEntries = (OS_OBJ_QTY    )0;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	811a      	strh	r2, [r3, #8]
}
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	bc80      	pop	{r7}
 800416e:	4770      	bx	lr

08004170 <OS_PendListInsertPrio>:
************************************************************************************************************************
*/

void  OS_PendListInsertPrio (OS_PEND_LIST  *p_pend_list,
                             OS_PEND_DATA  *p_pend_data)
{
 8004170:	b480      	push	{r7}
 8004172:	b089      	sub	sp, #36	; 0x24
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
    OS_PEND_DATA  *p_pend_data_prev;
    OS_PEND_DATA  *p_pend_data_next;



    p_tcb = p_pend_data->TCBPtr;                                      /* Obtain the priority of the task to insert    */
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	61bb      	str	r3, [r7, #24]
    prio  = p_tcb->Prio;
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8004186:	75fb      	strb	r3, [r7, #23]
    if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0) {                   /* CASE 0: Insert when there are no entries     */
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	891b      	ldrh	r3, [r3, #8]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10f      	bne.n	80041b0 <OS_PendListInsertPrio+0x40>
        p_pend_list->NbrEntries = (OS_OBJ_QTY)1;                      /*         This is the first entry              */
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	811a      	strh	r2, [r3, #8]
        p_pend_data->NextPtr    = (OS_PEND_DATA *)0;                  /*         No other OS_PEND_DATAs in the list   */
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	2200      	movs	r2, #0
 800419a:	605a      	str	r2, [r3, #4]
        p_pend_data->PrevPtr    = (OS_PEND_DATA *)0;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	2200      	movs	r2, #0
 80041a0:	601a      	str	r2, [r3, #0]
        p_pend_list->HeadPtr    = p_pend_data;                        /*                                              */
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	601a      	str	r2, [r3, #0]
        p_pend_list->TailPtr    = p_pend_data;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	605a      	str	r2, [r3, #4]
                p_pend_data_prev->NextPtr  = p_pend_data;
                p_pend_data_next->PrevPtr  = p_pend_data;
            }
        }
    }
}
 80041ae:	e04d      	b.n	800424c <OS_PendListInsertPrio+0xdc>
        p_pend_data->NextPtr    = (OS_PEND_DATA *)0;                  /*         No other OS_PEND_DATAs in the list   */
        p_pend_data->PrevPtr    = (OS_PEND_DATA *)0;
        p_pend_list->HeadPtr    = p_pend_data;                        /*                                              */
        p_pend_list->TailPtr    = p_pend_data;
    } else {
        p_pend_list->NbrEntries++;                                    /* CASE 1: One more OS_PEND_DATA in the list    */
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	891b      	ldrh	r3, [r3, #8]
 80041b4:	3301      	adds	r3, #1
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	811a      	strh	r2, [r3, #8]
        p_pend_data_next = p_pend_list->HeadPtr;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	61fb      	str	r3, [r7, #28]
        while (p_pend_data_next != (OS_PEND_DATA *)0) {               /*         Find the position where to insert    */
 80041c2:	e00b      	b.n	80041dc <OS_PendListInsertPrio+0x6c>
            p_tcb_next   = p_pend_data_next->TCBPtr;
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	613b      	str	r3, [r7, #16]
            if (prio < p_tcb_next->Prio) {
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80041d0:	7dfa      	ldrb	r2, [r7, #23]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d306      	bcc.n	80041e4 <OS_PendListInsertPrio+0x74>
                break;                                                /*         Found! ... insert BEFORE current     */
            } else {
                p_pend_data_next = p_pend_data_next->NextPtr;         /*         Not Found, follow the list           */
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	61fb      	str	r3, [r7, #28]
        p_pend_list->HeadPtr    = p_pend_data;                        /*                                              */
        p_pend_list->TailPtr    = p_pend_data;
    } else {
        p_pend_list->NbrEntries++;                                    /* CASE 1: One more OS_PEND_DATA in the list    */
        p_pend_data_next = p_pend_list->HeadPtr;
        while (p_pend_data_next != (OS_PEND_DATA *)0) {               /*         Find the position where to insert    */
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1f0      	bne.n	80041c4 <OS_PendListInsertPrio+0x54>
 80041e2:	e000      	b.n	80041e6 <OS_PendListInsertPrio+0x76>
            p_tcb_next   = p_pend_data_next->TCBPtr;
            if (prio < p_tcb_next->Prio) {
                break;                                                /*         Found! ... insert BEFORE current     */
 80041e4:	bf00      	nop
            } else {
                p_pend_data_next = p_pend_data_next->NextPtr;         /*         Not Found, follow the list           */
            }
        }
        if (p_pend_data_next == (OS_PEND_DATA *)0) {                  /*         TCB to insert is lower in prio       */
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10f      	bne.n	800420c <OS_PendListInsertPrio+0x9c>
            p_pend_data->NextPtr      = (OS_PEND_DATA *)0;            /*         ... insert at the tail.              */
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	2200      	movs	r2, #0
 80041f0:	605a      	str	r2, [r3, #4]
            p_pend_data_prev          = p_pend_list->TailPtr;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	60fb      	str	r3, [r7, #12]
            p_pend_data->PrevPtr      = p_pend_data_prev;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	601a      	str	r2, [r3, #0]
            p_pend_data_prev->NextPtr = p_pend_data;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	605a      	str	r2, [r3, #4]
            p_pend_list->TailPtr      = p_pend_data;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	605a      	str	r2, [r3, #4]
                p_pend_data_prev->NextPtr  = p_pend_data;
                p_pend_data_next->PrevPtr  = p_pend_data;
            }
        }
    }
}
 800420a:	e01f      	b.n	800424c <OS_PendListInsertPrio+0xdc>
            p_pend_data_prev          = p_pend_list->TailPtr;
            p_pend_data->PrevPtr      = p_pend_data_prev;
            p_pend_data_prev->NextPtr = p_pend_data;
            p_pend_list->TailPtr      = p_pend_data;
        } else {
            if (p_pend_data_next->PrevPtr == (OS_PEND_DATA *)0) {     /*         Is new TCB highest priority?         */
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10c      	bne.n	800422e <OS_PendListInsertPrio+0xbe>
                p_pend_data_next->PrevPtr  = p_pend_data;             /*         Yes, insert as new Head of list      */
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	601a      	str	r2, [r3, #0]
                p_pend_data->PrevPtr       = (OS_PEND_DATA *)0;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2200      	movs	r2, #0
 800421e:	601a      	str	r2, [r3, #0]
                p_pend_data->NextPtr       = p_pend_data_next;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	69fa      	ldr	r2, [r7, #28]
 8004224:	605a      	str	r2, [r3, #4]
                p_pend_list->HeadPtr       = p_pend_data;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	601a      	str	r2, [r3, #0]
                p_pend_data_prev->NextPtr  = p_pend_data;
                p_pend_data_next->PrevPtr  = p_pend_data;
            }
        }
    }
}
 800422c:	e00e      	b.n	800424c <OS_PendListInsertPrio+0xdc>
                p_pend_data_next->PrevPtr  = p_pend_data;             /*         Yes, insert as new Head of list      */
                p_pend_data->PrevPtr       = (OS_PEND_DATA *)0;
                p_pend_data->NextPtr       = p_pend_data_next;
                p_pend_list->HeadPtr       = p_pend_data;
            } else {
                p_pend_data_prev           = p_pend_data_next->PrevPtr;/*        No,  insert in between two entries   */
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	60fb      	str	r3, [r7, #12]
                p_pend_data->PrevPtr       = p_pend_data_prev;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	601a      	str	r2, [r3, #0]
                p_pend_data->NextPtr       = p_pend_data_next;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	69fa      	ldr	r2, [r7, #28]
 800423e:	605a      	str	r2, [r3, #4]
                p_pend_data_prev->NextPtr  = p_pend_data;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	605a      	str	r2, [r3, #4]
                p_pend_data_next->PrevPtr  = p_pend_data;
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	601a      	str	r2, [r3, #0]
            }
        }
    }
}
 800424c:	bf00      	nop
 800424e:	3724      	adds	r7, #36	; 0x24
 8004250:	46bd      	mov	sp, r7
 8004252:	bc80      	pop	{r7}
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop

08004258 <OS_PendListRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_PendListRemove (OS_TCB  *p_tcb)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
    OS_PEND_LIST   *p_pend_list;
    OS_PEND_OBJ    *p_obj;



    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to the first OS_PEND_DATA to remove      */
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004264:	613b      	str	r3, [r7, #16]
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get number of entries in the table             */
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800426c:	82fb      	strh	r3, [r7, #22]

    while (n_pend_list > (OS_OBJ_QTY)0) {
 800426e:	e00f      	b.n	8004290 <OS_PendListRemove+0x38>
        p_obj       =  p_pend_data->PendObjPtr;                     /* Get pointer to pend list                       */
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	60fb      	str	r3, [r7, #12]
        p_pend_list = &p_obj->PendList;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	3308      	adds	r3, #8
 800427a:	60bb      	str	r3, [r7, #8]
        OS_PendListRemove1(p_pend_list,
 800427c:	6939      	ldr	r1, [r7, #16]
 800427e:	68b8      	ldr	r0, [r7, #8]
 8004280:	f000 f814 	bl	80042ac <OS_PendListRemove1>
                           p_pend_data);
        p_pend_data++;
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	3320      	adds	r3, #32
 8004288:	613b      	str	r3, [r7, #16]
        n_pend_list--;
 800428a:	8afb      	ldrh	r3, [r7, #22]
 800428c:	3b01      	subs	r3, #1
 800428e:	82fb      	strh	r3, [r7, #22]


    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to the first OS_PEND_DATA to remove      */
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get number of entries in the table             */

    while (n_pend_list > (OS_OBJ_QTY)0) {
 8004290:	8afb      	ldrh	r3, [r7, #22]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1ec      	bne.n	8004270 <OS_PendListRemove+0x18>
        OS_PendListRemove1(p_pend_list,
                           p_pend_data);
        p_pend_data++;
        n_pend_list--;
    }
    p_tcb->PendDataTblEntries = (OS_OBJ_QTY    )0;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    p_tcb->PendDataTblPtr     = (OS_PEND_DATA *)0;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80042a4:	bf00      	nop
 80042a6:	3718      	adds	r7, #24
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <OS_PendListRemove1>:
************************************************************************************************************************
*/

void  OS_PendListRemove1 (OS_PEND_LIST  *p_pend_list,
                          OS_PEND_DATA  *p_pend_data)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
    OS_PEND_DATA  *p_prev;
    OS_PEND_DATA  *p_next;



    if (p_pend_list->NbrEntries == 1u) {
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	891b      	ldrh	r3, [r3, #8]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d106      	bne.n	80042cc <OS_PendListRemove1+0x20>
        p_pend_list->HeadPtr = (OS_PEND_DATA *)0;           /* Only one entry in the pend list                        */
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]
        p_pend_list->TailPtr = (OS_PEND_DATA *)0;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	605a      	str	r2, [r3, #4]
 80042ca:	e027      	b.n	800431c <OS_PendListRemove1+0x70>

    } else if (p_pend_data->PrevPtr == (OS_PEND_DATA *)0) { /* See if entry is at the head of the list                */
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d109      	bne.n	80042e8 <OS_PendListRemove1+0x3c>
        p_next               = p_pend_data->NextPtr;        /* Yes                                                    */
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	60fb      	str	r3, [r7, #12]
        p_next->PrevPtr      = (OS_PEND_DATA *)0;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	601a      	str	r2, [r3, #0]
        p_pend_list->HeadPtr = p_next;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	601a      	str	r2, [r3, #0]
 80042e6:	e019      	b.n	800431c <OS_PendListRemove1+0x70>

    } else if (p_pend_data->NextPtr == (OS_PEND_DATA *)0) { /* See if entry is at the tail of the list                */
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d109      	bne.n	8004304 <OS_PendListRemove1+0x58>
        p_prev               = p_pend_data->PrevPtr;        /* Yes                                                    */
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	60bb      	str	r3, [r7, #8]
        p_prev->NextPtr      = (OS_PEND_DATA *)0;
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	2200      	movs	r2, #0
 80042fa:	605a      	str	r2, [r3, #4]
        p_pend_list->TailPtr = p_prev;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	605a      	str	r2, [r3, #4]
 8004302:	e00b      	b.n	800431c <OS_PendListRemove1+0x70>

    } else {
        p_prev               = p_pend_data->PrevPtr;        /* Remove from inside the list                            */
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	60bb      	str	r3, [r7, #8]
        p_next               = p_pend_data->NextPtr;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	60fb      	str	r3, [r7, #12]
        p_prev->NextPtr      = p_next;
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	605a      	str	r2, [r3, #4]
        p_next->PrevPtr      = p_prev;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	601a      	str	r2, [r3, #0]
    }
    p_pend_list->NbrEntries--;                              /* One less entry in the list                             */
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	891b      	ldrh	r3, [r3, #8]
 8004320:	3b01      	subs	r3, #1
 8004322:	b29a      	uxth	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	811a      	strh	r2, [r3, #8]
    p_pend_data->NextPtr = (OS_PEND_DATA *)0;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	2200      	movs	r2, #0
 800432c:	605a      	str	r2, [r3, #4]
    p_pend_data->PrevPtr = (OS_PEND_DATA *)0;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	2200      	movs	r2, #0
 8004332:	601a      	str	r2, [r3, #0]
}
 8004334:	bf00      	nop
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	bc80      	pop	{r7}
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop

08004340 <OS_Post>:
void  OS_Post (OS_PEND_OBJ  *p_obj,
               OS_TCB       *p_tcb,
               void         *p_void,
               OS_MSG_SIZE   msg_size,
               CPU_TS        ts)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af02      	add	r7, sp, #8
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
 800434c:	807b      	strh	r3, [r7, #2]
    switch (p_tcb->TaskState) {
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004354:	2b07      	cmp	r3, #7
 8004356:	f200 8086 	bhi.w	8004466 <OS_Post+0x126>
 800435a:	a201      	add	r2, pc, #4	; (adr r2, 8004360 <OS_Post+0x20>)
 800435c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004360:	08004467 	.word	0x08004467
 8004364:	08004467 	.word	0x08004467
 8004368:	08004381 	.word	0x08004381
 800436c:	08004381 	.word	0x08004381
 8004370:	08004467 	.word	0x08004467
 8004374:	08004467 	.word	0x08004467
 8004378:	080043f7 	.word	0x080043f7
 800437c:	080043f7 	.word	0x080043f7
        case OS_TASK_STATE_DLY_SUSPENDED:                        /* Cannot Post a suspended task that was also dly'd  */
             break;

        case OS_TASK_STATE_PEND:
        case OS_TASK_STATE_PEND_TIMEOUT:
             if (p_tcb->PendOn == OS_TASK_PEND_ON_MULTI) {
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004386:	2b03      	cmp	r3, #3
 8004388:	d109      	bne.n	800439e <OS_Post+0x5e>
                 OS_Post1(p_obj,                                 /* Indicate which object was posted to               */
 800438a:	887a      	ldrh	r2, [r7, #2]
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	9300      	str	r3, [sp, #0]
 8004390:	4613      	mov	r3, r2
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	68b9      	ldr	r1, [r7, #8]
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f000 f86a 	bl	8004470 <OS_Post1>
 800439c:	e009      	b.n	80043b2 <OS_Post+0x72>
                          p_void,
                          msg_size,
                          ts);
             } else {
#if (OS_MSG_EN > 0u)
                 p_tcb->MsgPtr  = p_void;                        /* Deposit message in OS_TCB of task waiting         */
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	659a      	str	r2, [r3, #88]	; 0x58
                 p_tcb->MsgSize = msg_size;                      /* ... assuming posting a message                    */
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	887a      	ldrh	r2, [r7, #2]
 80043a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
#endif
                 p_tcb->TS      = ts;
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	69ba      	ldr	r2, [r7, #24]
 80043b0:	649a      	str	r2, [r3, #72]	; 0x48
             }
             if (p_obj != (OS_PEND_OBJ *)0) {
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d006      	beq.n	80043c6 <OS_Post+0x86>
                 OS_PendListRemove(p_tcb);                       /* Remove task from wait list(s)                     */
 80043b8:	68b8      	ldr	r0, [r7, #8]
 80043ba:	f7ff ff4d 	bl	8004258 <OS_PendListRemove>
#if OS_CFG_DBG_EN > 0u
                 OS_PendDbgNameRemove(p_obj,
 80043be:	68b9      	ldr	r1, [r7, #8]
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f7ff fe73 	bl	80040ac <OS_PendDbgNameRemove>
                                      p_tcb);
#endif
             }
             if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT) {
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80043cc:	2b03      	cmp	r3, #3
 80043ce:	d102      	bne.n	80043d6 <OS_Post+0x96>
                 OS_TickListRemove(p_tcb);                       /* Remove from tick list                             */
 80043d0:	68b8      	ldr	r0, [r7, #8]
 80043d2:	f000 fbab 	bl	8004b2c <OS_TickListRemove>
             }
             OS_RdyListInsert(p_tcb);                            /* Insert the task in the ready list                 */
 80043d6:	68b8      	ldr	r0, [r7, #8]
 80043d8:	f000 f89e 	bl	8004518 <OS_RdyListInsert>
             p_tcb->TaskState  = OS_TASK_STATE_RDY;
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             p_tcb->PendStatus = OS_STATUS_PEND_OK;              /* Clear pend status                                 */
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
             p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;        /* Indicate no longer pending                        */
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
             break;
 80043f4:	e038      	b.n	8004468 <OS_Post+0x128>

        case OS_TASK_STATE_PEND_SUSPENDED:
        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             if (p_tcb->PendOn == OS_TASK_PEND_ON_MULTI) {
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80043fc:	2b03      	cmp	r3, #3
 80043fe:	d109      	bne.n	8004414 <OS_Post+0xd4>
                 OS_Post1(p_obj,                                 /* Indicate which object was posted to               */
 8004400:	887a      	ldrh	r2, [r7, #2]
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	9300      	str	r3, [sp, #0]
 8004406:	4613      	mov	r3, r2
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	68b9      	ldr	r1, [r7, #8]
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f000 f82f 	bl	8004470 <OS_Post1>
 8004412:	e009      	b.n	8004428 <OS_Post+0xe8>
                          p_void,
                          msg_size,
                          ts);
             } else {
#if (OS_MSG_EN > 0u)
                 p_tcb->MsgPtr  = p_void;                        /* Deposit message in OS_TCB of task waiting         */
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	659a      	str	r2, [r3, #88]	; 0x58
                 p_tcb->MsgSize = msg_size;                      /* ... assuming posting a message                    */
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	887a      	ldrh	r2, [r7, #2]
 800441e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
#endif
                 p_tcb->TS      = ts;
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	649a      	str	r2, [r3, #72]	; 0x48
             }
             if (p_obj != (OS_PEND_OBJ *)0) {
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d006      	beq.n	800443c <OS_Post+0xfc>
                 OS_PendListRemove(p_tcb);                       /* Remove task from wait list(s)                     */
 800442e:	68b8      	ldr	r0, [r7, #8]
 8004430:	f7ff ff12 	bl	8004258 <OS_PendListRemove>
#if OS_CFG_DBG_EN > 0u
                 OS_PendDbgNameRemove(p_obj,
 8004434:	68b9      	ldr	r1, [r7, #8]
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f7ff fe38 	bl	80040ac <OS_PendDbgNameRemove>
                                      p_tcb);
#endif
             }
             if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED) {
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004442:	2b07      	cmp	r3, #7
 8004444:	d102      	bne.n	800444c <OS_Post+0x10c>
                 OS_TickListRemove(p_tcb);                       /* Cancel any timeout                                */
 8004446:	68b8      	ldr	r0, [r7, #8]
 8004448:	f000 fb70 	bl	8004b2c <OS_TickListRemove>
             }
             p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	2204      	movs	r2, #4
 8004450:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             p_tcb->PendStatus = OS_STATUS_PEND_OK;              /* Clear pend status                                 */
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
             p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;        /* Indicate no longer pending                        */
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
             break;
 8004464:	e000      	b.n	8004468 <OS_Post+0x128>

        default:
             break;
 8004466:	bf00      	nop
    }
}
 8004468:	bf00      	nop
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <OS_Post1>:
void  OS_Post1 (OS_PEND_OBJ  *p_obj,
                OS_TCB       *p_tcb,
                void         *p_void,
                OS_MSG_SIZE   msg_size,
                CPU_TS        ts)
{
 8004470:	b480      	push	{r7}
 8004472:	b087      	sub	sp, #28
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
 800447c:	807b      	strh	r3, [r7, #2]
    OS_OBJ_QTY      n_pend_list;                                    /* Number of pend lists                           */
    OS_PEND_DATA   *p_pend_data;



    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to the first OS_PEND_DATA to remove      */
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004482:	613b      	str	r3, [r7, #16]
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get number of entries in the table             */
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800448a:	82fb      	strh	r3, [r7, #22]

    while (n_pend_list > (OS_OBJ_QTY)0) {                           /* Mark posted object in OS_PEND_DATA table       */
 800448c:	e017      	b.n	80044be <OS_Post1+0x4e>
        if (p_obj == p_pend_data->PendObjPtr) {                     /* Did we find the object posted to?              */
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	68da      	ldr	r2, [r3, #12]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	429a      	cmp	r2, r3
 8004496:	d10c      	bne.n	80044b2 <OS_Post1+0x42>
            p_pend_data->RdyObjPtr  = p_obj;                        /* Yes, indicate the object in the .RdyObjPtr     */
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	611a      	str	r2, [r3, #16]
            p_pend_data->RdyMsgPtr  = p_void;                       /*      store the message posted                  */
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	615a      	str	r2, [r3, #20]
            p_pend_data->RdyMsgSize = msg_size;                     /*      store the size of the message posted      */
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	887a      	ldrh	r2, [r7, #2]
 80044a8:	831a      	strh	r2, [r3, #24]
            p_pend_data->RdyTS      = ts;                           /*      save the timestamp of the post            */
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	6a3a      	ldr	r2, [r7, #32]
 80044ae:	61da      	str	r2, [r3, #28]
            break;
 80044b0:	e008      	b.n	80044c4 <OS_Post1+0x54>
        }
        p_pend_data++;
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	3320      	adds	r3, #32
 80044b6:	613b      	str	r3, [r7, #16]
        n_pend_list--;
 80044b8:	8afb      	ldrh	r3, [r7, #22]
 80044ba:	3b01      	subs	r3, #1
 80044bc:	82fb      	strh	r3, [r7, #22]


    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to the first OS_PEND_DATA to remove      */
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get number of entries in the table             */

    while (n_pend_list > (OS_OBJ_QTY)0) {                           /* Mark posted object in OS_PEND_DATA table       */
 80044be:	8afb      	ldrh	r3, [r7, #22]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1e4      	bne.n	800448e <OS_Post1+0x1e>
            break;
        }
        p_pend_data++;
        n_pend_list--;
    }
}
 80044c4:	bf00      	nop
 80044c6:	371c      	adds	r7, #28
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bc80      	pop	{r7}
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop

080044d0 <OS_RdyListInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_RdyListInit (void)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
    OS_PRIO       i;
    OS_RDY_LIST  *p_rdy_list;



    for (i = 0u; i < OS_CFG_PRIO_MAX; i++) {                /* Initialize the array of OS_RDY_LIST at each priority   */
 80044d6:	2300      	movs	r3, #0
 80044d8:	71fb      	strb	r3, [r7, #7]
 80044da:	e013      	b.n	8004504 <OS_RdyListInit+0x34>
        p_rdy_list = &OSRdyList[i];
 80044dc:	79fa      	ldrb	r2, [r7, #7]
 80044de:	4613      	mov	r3, r2
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	4413      	add	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4a0b      	ldr	r2, [pc, #44]	; (8004514 <OS_RdyListInit+0x44>)
 80044e8:	4413      	add	r3, r2
 80044ea:	603b      	str	r3, [r7, #0]
        p_rdy_list->NbrEntries = (OS_OBJ_QTY)0;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	2200      	movs	r2, #0
 80044f0:	811a      	strh	r2, [r3, #8]
        p_rdy_list->HeadPtr    = (OS_TCB   *)0;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2200      	movs	r2, #0
 80044f6:	601a      	str	r2, [r3, #0]
        p_rdy_list->TailPtr    = (OS_TCB   *)0;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	2200      	movs	r2, #0
 80044fc:	605a      	str	r2, [r3, #4]
    OS_PRIO       i;
    OS_RDY_LIST  *p_rdy_list;



    for (i = 0u; i < OS_CFG_PRIO_MAX; i++) {                /* Initialize the array of OS_RDY_LIST at each priority   */
 80044fe:	79fb      	ldrb	r3, [r7, #7]
 8004500:	3301      	adds	r3, #1
 8004502:	71fb      	strb	r3, [r7, #7]
 8004504:	79fb      	ldrb	r3, [r7, #7]
 8004506:	2b1f      	cmp	r3, #31
 8004508:	d9e8      	bls.n	80044dc <OS_RdyListInit+0xc>
        p_rdy_list = &OSRdyList[i];
        p_rdy_list->NbrEntries = (OS_OBJ_QTY)0;
        p_rdy_list->HeadPtr    = (OS_TCB   *)0;
        p_rdy_list->TailPtr    = (OS_TCB   *)0;
    }
}
 800450a:	bf00      	nop
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	bc80      	pop	{r7}
 8004512:	4770      	bx	lr
 8004514:	20001fb0 	.word	0x20001fb0

08004518 <OS_RdyListInsert>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_RdyListInsert (OS_TCB  *p_tcb)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
    OS_PrioInsert(p_tcb->Prio);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8004526:	4618      	mov	r0, r3
 8004528:	f000 ffda 	bl	80054e0 <OS_PrioInsert>
    if (p_tcb->Prio == OSPrioCur) {                         /* Are we readying a task at the same prio?               */
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8004532:	4b07      	ldr	r3, [pc, #28]	; (8004550 <OS_RdyListInsert+0x38>)
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	429a      	cmp	r2, r3
 8004538:	d103      	bne.n	8004542 <OS_RdyListInsert+0x2a>
        OS_RdyListInsertTail(p_tcb);                        /* Yes, insert readied task at the end of the list        */
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f84a 	bl	80045d4 <OS_RdyListInsertTail>
    }

#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_READY(p_tcb);                         /* Record the event.                                      */
#endif
}
 8004540:	e002      	b.n	8004548 <OS_RdyListInsert+0x30>
{
    OS_PrioInsert(p_tcb->Prio);
    if (p_tcb->Prio == OSPrioCur) {                         /* Are we readying a task at the same prio?               */
        OS_RdyListInsertTail(p_tcb);                        /* Yes, insert readied task at the end of the list        */
    } else {
        OS_RdyListInsertHead(p_tcb);                        /* No,  insert readied task at the beginning of the list  */
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f806 	bl	8004554 <OS_RdyListInsertHead>
    }

#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_READY(p_tcb);                         /* Record the event.                                      */
#endif
}
 8004548:	bf00      	nop
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	2000213c 	.word	0x2000213c

08004554 <OS_RdyListInsertHead>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListInsertHead (OS_TCB  *p_tcb)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
    OS_RDY_LIST  *p_rdy_list;
    OS_TCB       *p_tcb2;



    p_rdy_list = &OSRdyList[p_tcb->Prio];
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8004562:	461a      	mov	r2, r3
 8004564:	4613      	mov	r3, r2
 8004566:	005b      	lsls	r3, r3, #1
 8004568:	4413      	add	r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4a18      	ldr	r2, [pc, #96]	; (80045d0 <OS_RdyListInsertHead+0x7c>)
 800456e:	4413      	add	r3, r2
 8004570:	60fb      	str	r3, [r7, #12]
    if (p_rdy_list->NbrEntries == (OS_OBJ_QTY)0) {          /* CASE 0: Insert when there are no entries               */
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	891b      	ldrh	r3, [r3, #8]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d10f      	bne.n	800459a <OS_RdyListInsertHead+0x46>
        p_rdy_list->NbrEntries =  (OS_OBJ_QTY)1;            /*         This is the first entry                        */
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2201      	movs	r2, #1
 800457e:	811a      	strh	r2, [r3, #8]
        p_tcb->NextPtr         =  (OS_TCB   *)0;            /*         No other OS_TCBs in the list                   */
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	60da      	str	r2, [r3, #12]
        p_tcb->PrevPtr         =  (OS_TCB   *)0;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	611a      	str	r2, [r3, #16]
        p_rdy_list->HeadPtr    =  p_tcb;                    /*         Both list pointers point to this OS_TCB        */
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	601a      	str	r2, [r3, #0]
        p_rdy_list->TailPtr    =  p_tcb;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	605a      	str	r2, [r3, #4]
        p_tcb->PrevPtr         = (OS_TCB    *)0;
        p_tcb2                 = p_rdy_list->HeadPtr;       /*         Adjust old head of list's links                */
        p_tcb2->PrevPtr        = p_tcb;
        p_rdy_list->HeadPtr    = p_tcb;
    }
}
 8004598:	e015      	b.n	80045c6 <OS_RdyListInsertHead+0x72>
        p_tcb->NextPtr         =  (OS_TCB   *)0;            /*         No other OS_TCBs in the list                   */
        p_tcb->PrevPtr         =  (OS_TCB   *)0;
        p_rdy_list->HeadPtr    =  p_tcb;                    /*         Both list pointers point to this OS_TCB        */
        p_rdy_list->TailPtr    =  p_tcb;
    } else {                                                /* CASE 1: Insert BEFORE the current head of list         */
        p_rdy_list->NbrEntries++;                           /*         One more OS_TCB in the list                    */
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	891b      	ldrh	r3, [r3, #8]
 800459e:	3301      	adds	r3, #1
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	811a      	strh	r2, [r3, #8]
        p_tcb->NextPtr         = p_rdy_list->HeadPtr;       /*         Adjust new OS_TCBs links                       */
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	60da      	str	r2, [r3, #12]
        p_tcb->PrevPtr         = (OS_TCB    *)0;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	611a      	str	r2, [r3, #16]
        p_tcb2                 = p_rdy_list->HeadPtr;       /*         Adjust old head of list's links                */
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	60bb      	str	r3, [r7, #8]
        p_tcb2->PrevPtr        = p_tcb;
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	611a      	str	r2, [r3, #16]
        p_rdy_list->HeadPtr    = p_tcb;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	601a      	str	r2, [r3, #0]
    }
}
 80045c6:	bf00      	nop
 80045c8:	3714      	adds	r7, #20
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bc80      	pop	{r7}
 80045ce:	4770      	bx	lr
 80045d0:	20001fb0 	.word	0x20001fb0

080045d4 <OS_RdyListInsertTail>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListInsertTail (OS_TCB  *p_tcb)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
    OS_RDY_LIST  *p_rdy_list;
    OS_TCB       *p_tcb2;



    p_rdy_list = &OSRdyList[p_tcb->Prio];
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80045e2:	461a      	mov	r2, r3
 80045e4:	4613      	mov	r3, r2
 80045e6:	005b      	lsls	r3, r3, #1
 80045e8:	4413      	add	r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4a18      	ldr	r2, [pc, #96]	; (8004650 <OS_RdyListInsertTail+0x7c>)
 80045ee:	4413      	add	r3, r2
 80045f0:	60fb      	str	r3, [r7, #12]
    if (p_rdy_list->NbrEntries == (OS_OBJ_QTY)0) {          /* CASE 0: Insert when there are no entries               */
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	891b      	ldrh	r3, [r3, #8]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10f      	bne.n	800461a <OS_RdyListInsertTail+0x46>
        p_rdy_list->NbrEntries  = (OS_OBJ_QTY)1;            /*         This is the first entry                        */
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2201      	movs	r2, #1
 80045fe:	811a      	strh	r2, [r3, #8]
        p_tcb->NextPtr          = (OS_TCB   *)0;            /*         No other OS_TCBs in the list                   */
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	60da      	str	r2, [r3, #12]
        p_tcb->PrevPtr          = (OS_TCB   *)0;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	611a      	str	r2, [r3, #16]
        p_rdy_list->HeadPtr     = p_tcb;                    /*         Both list pointers point to this OS_TCB        */
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	601a      	str	r2, [r3, #0]
        p_rdy_list->TailPtr     = p_tcb;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	605a      	str	r2, [r3, #4]
        p_tcb2                  = p_rdy_list->TailPtr;
        p_tcb->PrevPtr          = p_tcb2;
        p_tcb2->NextPtr         = p_tcb;                    /*         Adjust old tail of list's links                */
        p_rdy_list->TailPtr     = p_tcb;
    }
}
 8004618:	e014      	b.n	8004644 <OS_RdyListInsertTail+0x70>
        p_tcb->NextPtr          = (OS_TCB   *)0;            /*         No other OS_TCBs in the list                   */
        p_tcb->PrevPtr          = (OS_TCB   *)0;
        p_rdy_list->HeadPtr     = p_tcb;                    /*         Both list pointers point to this OS_TCB        */
        p_rdy_list->TailPtr     = p_tcb;
    } else {                                                /* CASE 1: Insert AFTER the current tail of list          */
        p_rdy_list->NbrEntries++;                           /*         One more OS_TCB in the list                    */
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	891b      	ldrh	r3, [r3, #8]
 800461e:	3301      	adds	r3, #1
 8004620:	b29a      	uxth	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	811a      	strh	r2, [r3, #8]
        p_tcb->NextPtr          = (OS_TCB   *)0;            /*         Adjust new OS_TCBs links                       */
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	60da      	str	r2, [r3, #12]
        p_tcb2                  = p_rdy_list->TailPtr;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	60bb      	str	r3, [r7, #8]
        p_tcb->PrevPtr          = p_tcb2;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	611a      	str	r2, [r3, #16]
        p_tcb2->NextPtr         = p_tcb;                    /*         Adjust old tail of list's links                */
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	60da      	str	r2, [r3, #12]
        p_rdy_list->TailPtr     = p_tcb;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	605a      	str	r2, [r3, #4]
    }
}
 8004644:	bf00      	nop
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	bc80      	pop	{r7}
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	20001fb0 	.word	0x20001fb0

08004654 <OS_RdyListRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListRemove (OS_TCB  *p_tcb)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
    OS_TCB       *p_tcb1;
    OS_TCB       *p_tcb2;



    p_rdy_list = &OSRdyList[p_tcb->Prio];
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8004662:	461a      	mov	r2, r3
 8004664:	4613      	mov	r3, r2
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	4413      	add	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4a24      	ldr	r2, [pc, #144]	; (8004700 <OS_RdyListRemove+0xac>)
 800466e:	4413      	add	r3, r2
 8004670:	617b      	str	r3, [r7, #20]
    p_tcb1     = p_tcb->PrevPtr;                            /* Point to next and previous OS_TCB in the list          */
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	613b      	str	r3, [r7, #16]
    p_tcb2     = p_tcb->NextPtr;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	60fb      	str	r3, [r7, #12]
    if (p_tcb1 == (OS_TCB *)0) {                            /* Was the OS_TCB to remove was at the head?              */
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d11f      	bne.n	80046c4 <OS_RdyListRemove+0x70>
        if (p_tcb2 == (OS_TCB *)0) {                        /* Yes, was it the only OS_TCB?                           */
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10f      	bne.n	80046aa <OS_RdyListRemove+0x56>
            p_rdy_list->NbrEntries = (OS_OBJ_QTY)0;         /*      Yes, no more entries                              */
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	2200      	movs	r2, #0
 800468e:	811a      	strh	r2, [r3, #8]
            p_rdy_list->HeadPtr    = (OS_TCB   *)0;
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	2200      	movs	r2, #0
 8004694:	601a      	str	r2, [r3, #0]
            p_rdy_list->TailPtr    = (OS_TCB   *)0;
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	2200      	movs	r2, #0
 800469a:	605a      	str	r2, [r3, #4]
            OS_PrioRemove(p_tcb->Prio);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 ff42 	bl	800552c <OS_PrioRemove>
 80046a8:	e01f      	b.n	80046ea <OS_RdyListRemove+0x96>
        } else {
            p_rdy_list->NbrEntries--;                       /*      No,  one less entry                               */
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	891b      	ldrh	r3, [r3, #8]
 80046ae:	3b01      	subs	r3, #1
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	811a      	strh	r2, [r3, #8]
            p_tcb2->PrevPtr        = (OS_TCB   *)0;         /*           adjust back link of new list head            */
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	611a      	str	r2, [r3, #16]
            p_rdy_list->HeadPtr    = p_tcb2;                /*           adjust OS_RDY_LIST's new head                */
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	601a      	str	r2, [r3, #0]
 80046c2:	e012      	b.n	80046ea <OS_RdyListRemove+0x96>
        }
    } else {
        p_rdy_list->NbrEntries--;                           /* No,  one less entry                                    */
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	891b      	ldrh	r3, [r3, #8]
 80046c8:	3b01      	subs	r3, #1
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	811a      	strh	r2, [r3, #8]
        p_tcb1->NextPtr = p_tcb2;
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	60da      	str	r2, [r3, #12]
        if (p_tcb2 == (OS_TCB *)0) {
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d103      	bne.n	80046e4 <OS_RdyListRemove+0x90>
            p_rdy_list->TailPtr = p_tcb1;                   /*      Removing the TCB at the tail, adj the tail ptr    */
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	605a      	str	r2, [r3, #4]
 80046e2:	e002      	b.n	80046ea <OS_RdyListRemove+0x96>
        } else {
            p_tcb2->PrevPtr     = p_tcb1;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	611a      	str	r2, [r3, #16]
        }
    }
    p_tcb->PrevPtr = (OS_TCB *)0;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	611a      	str	r2, [r3, #16]
    p_tcb->NextPtr = (OS_TCB *)0;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	60da      	str	r2, [r3, #12]

#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_TASK_SUSPEND(p_tcb);                           /* Record the event.                                      */
#endif
}
 80046f6:	bf00      	nop
 80046f8:	3718      	adds	r7, #24
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	20001fb0 	.word	0x20001fb0

08004704 <OS_SchedLockTimeMeasStart>:
************************************************************************************************************************
*/

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
void  OS_SchedLockTimeMeasStart (void)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	af00      	add	r7, sp, #0
    if (OSSchedLockNestingCtr == 1u) {
 8004708:	4b05      	ldr	r3, [pc, #20]	; (8004720 <OS_SchedLockTimeMeasStart+0x1c>)
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d104      	bne.n	800471a <OS_SchedLockTimeMeasStart+0x16>
        OSSchedLockTimeBegin = CPU_TS_TmrRd();
 8004710:	f003 fae4 	bl	8007cdc <CPU_TS_TmrRd>
 8004714:	4602      	mov	r2, r0
 8004716:	4b03      	ldr	r3, [pc, #12]	; (8004724 <OS_SchedLockTimeMeasStart+0x20>)
 8004718:	601a      	str	r2, [r3, #0]
    }
}
 800471a:	bf00      	nop
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	20001f9c 	.word	0x20001f9c
 8004724:	20002204 	.word	0x20002204

08004728 <OS_SchedLockTimeMeasStop>:




void  OS_SchedLockTimeMeasStop (void)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
    CPU_TS_TMR  delta;


    if (OSSchedLockNestingCtr == (OS_NESTING_CTR)0) {       /* Make sure we fully un-nested scheduler lock            */
 800472e:	4b0f      	ldr	r3, [pc, #60]	; (800476c <OS_SchedLockTimeMeasStop+0x44>)
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d116      	bne.n	8004764 <OS_SchedLockTimeMeasStop+0x3c>
        delta = CPU_TS_TmrRd()                              /* Compute the delta time between begin and end           */
 8004736:	f003 fad1 	bl	8007cdc <CPU_TS_TmrRd>
 800473a:	4602      	mov	r2, r0
              - OSSchedLockTimeBegin;
 800473c:	4b0c      	ldr	r3, [pc, #48]	; (8004770 <OS_SchedLockTimeMeasStop+0x48>)
 800473e:	681b      	ldr	r3, [r3, #0]
{
    CPU_TS_TMR  delta;


    if (OSSchedLockNestingCtr == (OS_NESTING_CTR)0) {       /* Make sure we fully un-nested scheduler lock            */
        delta = CPU_TS_TmrRd()                              /* Compute the delta time between begin and end           */
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	607b      	str	r3, [r7, #4]
              - OSSchedLockTimeBegin;
        if (OSSchedLockTimeMax    < delta) {                /* Detect peak value                                      */
 8004744:	4b0b      	ldr	r3, [pc, #44]	; (8004774 <OS_SchedLockTimeMeasStop+0x4c>)
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	429a      	cmp	r2, r3
 800474c:	d202      	bcs.n	8004754 <OS_SchedLockTimeMeasStop+0x2c>
            OSSchedLockTimeMax    = delta;
 800474e:	4a09      	ldr	r2, [pc, #36]	; (8004774 <OS_SchedLockTimeMeasStop+0x4c>)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6013      	str	r3, [r2, #0]
        }
        if (OSSchedLockTimeMaxCur < delta) {                /* Detect peak value (for resettable value)               */
 8004754:	4b08      	ldr	r3, [pc, #32]	; (8004778 <OS_SchedLockTimeMeasStop+0x50>)
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	429a      	cmp	r2, r3
 800475c:	d202      	bcs.n	8004764 <OS_SchedLockTimeMeasStop+0x3c>
            OSSchedLockTimeMaxCur = delta;
 800475e:	4a06      	ldr	r2, [pc, #24]	; (8004778 <OS_SchedLockTimeMeasStop+0x50>)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6013      	str	r3, [r2, #0]
        }
    }
}
 8004764:	bf00      	nop
 8004766:	3708      	adds	r7, #8
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	20001f9c 	.word	0x20001f9c
 8004770:	20002204 	.word	0x20002204
 8004774:	20002428 	.word	0x20002428
 8004778:	20002218 	.word	0x20002218

0800477c <OS_TaskBlock>:
************************************************************************************************************************
*/

void  OS_TaskBlock (OS_TCB   *p_tcb,
                    OS_TICK   timeout)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
    if (timeout > (OS_TICK)0) {                             /* Add task to tick list if timeout non zero               */
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d009      	beq.n	80047a0 <OS_TaskBlock+0x24>
        OS_TickListInsert(&OSTickListTimeout, p_tcb, timeout);
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	6879      	ldr	r1, [r7, #4]
 8004790:	4809      	ldr	r0, [pc, #36]	; (80047b8 <OS_TaskBlock+0x3c>)
 8004792:	f000 f8b1 	bl	80048f8 <OS_TickListInsert>
        p_tcb->TaskState = OS_TASK_STATE_PEND_TIMEOUT;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2203      	movs	r2, #3
 800479a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 800479e:	e003      	b.n	80047a8 <OS_TaskBlock+0x2c>
    } else {
        p_tcb->TaskState = OS_TASK_STATE_PEND;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2202      	movs	r2, #2
 80047a4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    }
    OS_RdyListRemove(p_tcb);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f7ff ff53 	bl	8004654 <OS_RdyListRemove>
}
 80047ae:	bf00      	nop
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	20002518 	.word	0x20002518

080047bc <OS_TickTask>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TickTask (void  *p_arg)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b088      	sub	sp, #32
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
    OS_ERR  err;
    CPU_TS  ts_delta;
    CPU_TS  ts_delta_dly;
    CPU_TS  ts_delta_timeout;
    CPU_SR_ALLOC();
 80047c4:	2300      	movs	r3, #0
 80047c6:	61fb      	str	r3, [r7, #28]


    (void)&p_arg;                                               /* Prevent compiler warning                             */

    while (DEF_ON) {
        (void)OSTaskSemPend((OS_TICK  )0,
 80047c8:	f107 030e 	add.w	r3, r7, #14
 80047cc:	2200      	movs	r2, #0
 80047ce:	2100      	movs	r1, #0
 80047d0:	2000      	movs	r0, #0
 80047d2:	f7fe fa41 	bl	8002c58 <OSTaskSemPend>
                            (OS_OPT   )OS_OPT_PEND_BLOCKING,
                            (CPU_TS  *)0,
                            (OS_ERR  *)&err);                   /* Wait for signal from tick interrupt                  */
        if (err == OS_ERR_NONE) {
 80047d6:	89fb      	ldrh	r3, [r7, #14]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1f5      	bne.n	80047c8 <OS_TickTask+0xc>
            OS_CRITICAL_ENTER();
 80047dc:	f7fb fd80 	bl	80002e0 <CPU_SR_Save>
 80047e0:	61f8      	str	r0, [r7, #28]
            OSTickCtr++;                                        /* Keep track of the number of ticks                    */
 80047e2:	4b0d      	ldr	r3, [pc, #52]	; (8004818 <OS_TickTask+0x5c>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	3301      	adds	r3, #1
 80047e8:	4a0b      	ldr	r2, [pc, #44]	; (8004818 <OS_TickTask+0x5c>)
 80047ea:	6013      	str	r3, [r2, #0]
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
            TRACE_OS_TICK_INCREMENT(OSTickCtr);                 /* Record the event.                                    */
#endif
            OS_CRITICAL_EXIT();
 80047ec:	69f8      	ldr	r0, [r7, #28]
 80047ee:	f7fb fd7b 	bl	80002e8 <CPU_SR_Restore>
            ts_delta_dly     = OS_TickListUpdateDly();
 80047f2:	f000 fa05 	bl	8004c00 <OS_TickListUpdateDly>
 80047f6:	61b8      	str	r0, [r7, #24]
            ts_delta_timeout = OS_TickListUpdateTimeout();
 80047f8:	f000 fa64 	bl	8004cc4 <OS_TickListUpdateTimeout>
 80047fc:	6178      	str	r0, [r7, #20]
            ts_delta         = ts_delta_dly + ts_delta_timeout; /* Compute total execution time of list updates         */
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	4413      	add	r3, r2
 8004804:	613b      	str	r3, [r7, #16]
            if (OSTickTaskTimeMax < ts_delta) {
 8004806:	4b05      	ldr	r3, [pc, #20]	; (800481c <OS_TickTask+0x60>)
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	429a      	cmp	r2, r3
 800480e:	d2db      	bcs.n	80047c8 <OS_TickTask+0xc>
                OSTickTaskTimeMax = ts_delta;
 8004810:	4a02      	ldr	r2, [pc, #8]	; (800481c <OS_TickTask+0x60>)
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	6013      	str	r3, [r2, #0]
            }
        }
    }
 8004816:	e7d7      	b.n	80047c8 <OS_TickTask+0xc>
 8004818:	20002408 	.word	0x20002408
 800481c:	200024fc 	.word	0x200024fc

08004820 <OS_TickTaskInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TickTaskInit (OS_ERR  *p_err)
{
 8004820:	b590      	push	{r4, r7, lr}
 8004822:	b08d      	sub	sp, #52	; 0x34
 8004824:	af0a      	add	r7, sp, #40	; 0x28
 8004826:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    OSTickCtr                    = (OS_TICK)0u;                         /* Clear the tick counter                            */
 8004828:	4b28      	ldr	r3, [pc, #160]	; (80048cc <OS_TickTaskInit+0xac>)
 800482a:	2200      	movs	r2, #0
 800482c:	601a      	str	r2, [r3, #0]

    OSTickListDly.TCB_Ptr        = (OS_TCB   *)0;
 800482e:	4b28      	ldr	r3, [pc, #160]	; (80048d0 <OS_TickTaskInit+0xb0>)
 8004830:	2200      	movs	r2, #0
 8004832:	601a      	str	r2, [r3, #0]
    OSTickListTimeout.TCB_Ptr    = (OS_TCB   *)0;
 8004834:	4b27      	ldr	r3, [pc, #156]	; (80048d4 <OS_TickTaskInit+0xb4>)
 8004836:	2200      	movs	r2, #0
 8004838:	601a      	str	r2, [r3, #0]

#if OS_CFG_DBG_EN > 0u
    OSTickListDly.NbrEntries     = (OS_OBJ_QTY)0;
 800483a:	4b25      	ldr	r3, [pc, #148]	; (80048d0 <OS_TickTaskInit+0xb0>)
 800483c:	2200      	movs	r2, #0
 800483e:	809a      	strh	r2, [r3, #4]
    OSTickListDly.NbrUpdated     = (OS_OBJ_QTY)0;
 8004840:	4b23      	ldr	r3, [pc, #140]	; (80048d0 <OS_TickTaskInit+0xb0>)
 8004842:	2200      	movs	r2, #0
 8004844:	80da      	strh	r2, [r3, #6]

    OSTickListTimeout.NbrEntries = (OS_OBJ_QTY)0;
 8004846:	4b23      	ldr	r3, [pc, #140]	; (80048d4 <OS_TickTaskInit+0xb4>)
 8004848:	2200      	movs	r2, #0
 800484a:	809a      	strh	r2, [r3, #4]
    OSTickListTimeout.NbrUpdated = (OS_OBJ_QTY)0;
 800484c:	4b21      	ldr	r3, [pc, #132]	; (80048d4 <OS_TickTaskInit+0xb4>)
 800484e:	2200      	movs	r2, #0
 8004850:	80da      	strh	r2, [r3, #6]
#endif

                                                                        /* ---------------- CREATE THE TICK TASK ----------- */
    if (OSCfg_TickTaskStkBasePtr == (CPU_STK *)0) {
 8004852:	4b21      	ldr	r3, [pc, #132]	; (80048d8 <OS_TickTaskInit+0xb8>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d104      	bne.n	8004864 <OS_TickTaskInit+0x44>
       *p_err = OS_ERR_TICK_STK_INVALID;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f247 2212 	movw	r2, #29202	; 0x7212
 8004860:	801a      	strh	r2, [r3, #0]
        return;
 8004862:	e02f      	b.n	80048c4 <OS_TickTaskInit+0xa4>
    }

    if (OSCfg_TickTaskStkSize < OSCfg_StkSizeMin) {
 8004864:	4b1d      	ldr	r3, [pc, #116]	; (80048dc <OS_TickTaskInit+0xbc>)
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	4b1d      	ldr	r3, [pc, #116]	; (80048e0 <OS_TickTaskInit+0xc0>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	429a      	cmp	r2, r3
 800486e:	d204      	bcs.n	800487a <OS_TickTaskInit+0x5a>
       *p_err = OS_ERR_TICK_STK_SIZE_INVALID;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f247 2213 	movw	r2, #29203	; 0x7213
 8004876:	801a      	strh	r2, [r3, #0]
        return;
 8004878:	e024      	b.n	80048c4 <OS_TickTaskInit+0xa4>
    }

    if (OSCfg_TickTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {                 /* Only one task at the 'Idle Task' priority         */
 800487a:	4b1a      	ldr	r3, [pc, #104]	; (80048e4 <OS_TickTaskInit+0xc4>)
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	2b1e      	cmp	r3, #30
 8004880:	d904      	bls.n	800488c <OS_TickTaskInit+0x6c>
       *p_err = OS_ERR_TICK_PRIO_INVALID;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f247 2211 	movw	r2, #29201	; 0x7211
 8004888:	801a      	strh	r2, [r3, #0]
        return;
 800488a:	e01b      	b.n	80048c4 <OS_TickTaskInit+0xa4>
    }

    OSTaskCreate((OS_TCB     *)&OSTickTaskTCB,
 800488c:	4b15      	ldr	r3, [pc, #84]	; (80048e4 <OS_TickTaskInit+0xc4>)
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	4a11      	ldr	r2, [pc, #68]	; (80048d8 <OS_TickTaskInit+0xb8>)
 8004892:	6812      	ldr	r2, [r2, #0]
 8004894:	4914      	ldr	r1, [pc, #80]	; (80048e8 <OS_TickTaskInit+0xc8>)
 8004896:	6809      	ldr	r1, [r1, #0]
 8004898:	4810      	ldr	r0, [pc, #64]	; (80048dc <OS_TickTaskInit+0xbc>)
 800489a:	6800      	ldr	r0, [r0, #0]
 800489c:	687c      	ldr	r4, [r7, #4]
 800489e:	9408      	str	r4, [sp, #32]
 80048a0:	240b      	movs	r4, #11
 80048a2:	9407      	str	r4, [sp, #28]
 80048a4:	2400      	movs	r4, #0
 80048a6:	9406      	str	r4, [sp, #24]
 80048a8:	2400      	movs	r4, #0
 80048aa:	9405      	str	r4, [sp, #20]
 80048ac:	2400      	movs	r4, #0
 80048ae:	9404      	str	r4, [sp, #16]
 80048b0:	9003      	str	r0, [sp, #12]
 80048b2:	9102      	str	r1, [sp, #8]
 80048b4:	9201      	str	r2, [sp, #4]
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	2300      	movs	r3, #0
 80048ba:	4a0c      	ldr	r2, [pc, #48]	; (80048ec <OS_TickTaskInit+0xcc>)
 80048bc:	490c      	ldr	r1, [pc, #48]	; (80048f0 <OS_TickTaskInit+0xd0>)
 80048be:	480d      	ldr	r0, [pc, #52]	; (80048f4 <OS_TickTaskInit+0xd4>)
 80048c0:	f7fe f89a 	bl	80029f8 <OSTaskCreate>
                 (OS_MSG_QTY  )0u,
                 (OS_TICK     )0u,
                 (void       *)0,
                 (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR | OS_OPT_TASK_NO_TLS),
                 (OS_ERR     *)p_err);
}
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd90      	pop	{r4, r7, pc}
 80048ca:	bf00      	nop
 80048cc:	20002408 	.word	0x20002408
 80048d0:	2000250c 	.word	0x2000250c
 80048d4:	20002518 	.word	0x20002518
 80048d8:	0800f0a4 	.word	0x0800f0a4
 80048dc:	0800f0ac 	.word	0x0800f0ac
 80048e0:	0800f098 	.word	0x0800f098
 80048e4:	0800f0a0 	.word	0x0800f0a0
 80048e8:	0800f0a8 	.word	0x0800f0a8
 80048ec:	080047bd 	.word	0x080047bd
 80048f0:	0800ef9c 	.word	0x0800ef9c
 80048f4:	20002140 	.word	0x20002140

080048f8 <OS_TickListInsert>:
*/

void  OS_TickListInsert (OS_TICK_LIST  *p_list,
                         OS_TCB        *p_tcb,
                         OS_TICK        time)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b089      	sub	sp, #36	; 0x24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
    OS_TCB  *p_tcb1;
    OS_TCB  *p_tcb2;
    OS_TICK  remain;


    if (p_list->TCB_Ptr == (OS_TCB *)0) {                               /* Is the list empty?                                */
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d112      	bne.n	8004932 <OS_TickListInsert+0x3a>
        p_tcb->TickRemain  = time;                                      /* Yes, Store time in TCB                            */
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	651a      	str	r2, [r3, #80]	; 0x50
        p_tcb->TickNextPtr = (OS_TCB *)0;
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	2200      	movs	r2, #0
 8004916:	615a      	str	r2, [r3, #20]
        p_tcb->TickPrevPtr = (OS_TCB *)0;
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	2200      	movs	r2, #0
 800491c:	619a      	str	r2, [r3, #24]
        p_tcb->TickListPtr = (OS_TICK_LIST *)p_list;                    /*      Link to this list                            */
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	61da      	str	r2, [r3, #28]
        p_list->TCB_Ptr    = p_tcb;                                     /*      Point to TCB of task to place in the list    */
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	601a      	str	r2, [r3, #0]
#if OS_CFG_DBG_EN > 0u
        p_list->NbrEntries = 1u;                                        /*      List contains 1 entry                        */
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2201      	movs	r2, #1
 800492e:	809a      	strh	r2, [r3, #4]
 8004930:	e074      	b.n	8004a1c <OS_TickListInsert+0x124>
#endif
    } else {
        p_tcb1 = p_list->TCB_Ptr;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	61fb      	str	r3, [r7, #28]
        p_tcb2 = p_list->TCB_Ptr;                                       /* No,  Insert somewhere in the list in delta order  */
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	61bb      	str	r3, [r7, #24]
        remain = time;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	617b      	str	r3, [r7, #20]
        while (p_tcb2 != (OS_TCB *)0) {
 8004942:	e053      	b.n	80049ec <OS_TickListInsert+0xf4>
            if (remain <= p_tcb2->TickRemain) {
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	429a      	cmp	r2, r3
 800494c:	d344      	bcc.n	80049d8 <OS_TickListInsert+0xe0>
                if (p_tcb2->TickPrevPtr == (OS_TCB *)0) {               /*      Insert before the first entry in the list?   */
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d11e      	bne.n	8004994 <OS_TickListInsert+0x9c>
                    p_tcb->TickRemain   = remain;                       /*      Yes, Store remaining time                    */                                          
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	651a      	str	r2, [r3, #80]	; 0x50
                    p_tcb->TickPrevPtr  = (OS_TCB *)0;
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	2200      	movs	r2, #0
 8004960:	619a      	str	r2, [r3, #24]
                    p_tcb->TickNextPtr  = p_tcb2;    
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	615a      	str	r2, [r3, #20]
                    p_tcb->TickListPtr  = (OS_TICK_LIST *)p_list;       /*           Link TCB to this list                   */
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	61da      	str	r2, [r3, #28]
                    p_tcb2->TickRemain -= remain;                       /*           Reduce time of next entry in the list   */
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	1ad2      	subs	r2, r2, r3
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	651a      	str	r2, [r3, #80]	; 0x50
                    p_tcb2->TickPrevPtr = p_tcb;
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	619a      	str	r2, [r3, #24]
                    p_list->TCB_Ptr     = p_tcb;                        /*           Add TCB to the list                     */
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	601a      	str	r2, [r3, #0]
#if OS_CFG_DBG_EN > 0u
                    p_list->NbrEntries++;                               /*           List contains an extra entry            */
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	889b      	ldrh	r3, [r3, #4]
 800498a:	3301      	adds	r3, #1
 800498c:	b29a      	uxth	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	809a      	strh	r2, [r3, #4]
                    p_tcb1->TickNextPtr = p_tcb;
#if OS_CFG_DBG_EN > 0u
                    p_list->NbrEntries++;                               /*           List contains an extra entry            */
#endif
                }
                return;
 8004992:	e043      	b.n	8004a1c <OS_TickListInsert+0x124>
                    p_list->TCB_Ptr     = p_tcb;                        /*           Add TCB to the list                     */
#if OS_CFG_DBG_EN > 0u
                    p_list->NbrEntries++;                               /*           List contains an extra entry            */
#endif
                } else {                                                /*      No,  Insert somewhere further in the list    */
                    p_tcb1              = p_tcb2->TickPrevPtr;
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	61fb      	str	r3, [r7, #28]
                    p_tcb->TickRemain   = remain;                       /*           Store remaining time                    */
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	651a      	str	r2, [r3, #80]	; 0x50
                    p_tcb->TickPrevPtr  = p_tcb1;
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	69fa      	ldr	r2, [r7, #28]
 80049a4:	619a      	str	r2, [r3, #24]
                    p_tcb->TickNextPtr  = p_tcb2;    
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	69ba      	ldr	r2, [r7, #24]
 80049aa:	615a      	str	r2, [r3, #20]
                    p_tcb->TickListPtr  = (OS_TICK_LIST *)p_list;       /*           TCB points to this list                 */
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	61da      	str	r2, [r3, #28]
                    p_tcb2->TickRemain -= remain;                       /*           Reduce time of next entry in the list   */
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	1ad2      	subs	r2, r2, r3
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	651a      	str	r2, [r3, #80]	; 0x50
                    p_tcb2->TickPrevPtr = p_tcb;
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	619a      	str	r2, [r3, #24]
                    p_tcb1->TickNextPtr = p_tcb;
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	68ba      	ldr	r2, [r7, #8]
 80049c8:	615a      	str	r2, [r3, #20]
#if OS_CFG_DBG_EN > 0u
                    p_list->NbrEntries++;                               /*           List contains an extra entry            */
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	889b      	ldrh	r3, [r3, #4]
 80049ce:	3301      	adds	r3, #1
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	809a      	strh	r2, [r3, #4]
#endif
                }
                return;
 80049d6:	e021      	b.n	8004a1c <OS_TickListInsert+0x124>
            } else {
                remain -= p_tcb2->TickRemain;                           /*           Point to the next TCB in the list       */
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	617b      	str	r3, [r7, #20]
                p_tcb1  = p_tcb2;
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	61fb      	str	r3, [r7, #28]
                p_tcb2  = p_tcb2->TickNextPtr;
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	61bb      	str	r3, [r7, #24]
#endif
    } else {
        p_tcb1 = p_list->TCB_Ptr;
        p_tcb2 = p_list->TCB_Ptr;                                       /* No,  Insert somewhere in the list in delta order  */
        remain = time;
        while (p_tcb2 != (OS_TCB *)0) {
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1a8      	bne.n	8004944 <OS_TickListInsert+0x4c>
                remain -= p_tcb2->TickRemain;                           /*           Point to the next TCB in the list       */
                p_tcb1  = p_tcb2;
                p_tcb2  = p_tcb2->TickNextPtr;
            }                 
        }
        p_tcb->TickRemain   = remain;                       
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	651a      	str	r2, [r3, #80]	; 0x50
        p_tcb->TickPrevPtr  = p_tcb1;
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	69fa      	ldr	r2, [r7, #28]
 80049fc:	619a      	str	r2, [r3, #24]
        p_tcb->TickNextPtr  = (OS_TCB *)0;    
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	2200      	movs	r2, #0
 8004a02:	615a      	str	r2, [r3, #20]
        p_tcb->TickListPtr  = (OS_TICK_LIST *)p_list;                   /*           Link the list to the TCB                */
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	61da      	str	r2, [r3, #28]
        p_tcb1->TickNextPtr = p_tcb;
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	615a      	str	r2, [r3, #20]
#if OS_CFG_DBG_EN > 0u
        p_list->NbrEntries++;                                           /*           List contains an extra entry            */
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	889b      	ldrh	r3, [r3, #4]
 8004a14:	3301      	adds	r3, #1
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	809a      	strh	r2, [r3, #4]
#endif
    }
}
 8004a1c:	3724      	adds	r7, #36	; 0x24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bc80      	pop	{r7}
 8004a22:	4770      	bx	lr

08004a24 <OS_TickListInsertDly>:

void  OS_TickListInsertDly (OS_TCB   *p_tcb,
                            OS_TICK   time,
                            OS_OPT    opt,
                            OS_ERR   *p_err)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	603b      	str	r3, [r7, #0]
 8004a30:	4613      	mov	r3, r2
 8004a32:	80fb      	strh	r3, [r7, #6]
    OS_TICK   remain;



    if (opt == OS_OPT_TIME_MATCH) {                                     /* MATCH to absolute OSTickCtr value mode            */
 8004a34:	88fb      	ldrh	r3, [r7, #6]
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	d113      	bne.n	8004a62 <OS_TickListInsertDly+0x3e>
        remain = time - OSTickCtr;
 8004a3a:	4b3a      	ldr	r3, [pc, #232]	; (8004b24 <OS_TickListInsertDly+0x100>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	617b      	str	r3, [r7, #20]
        if ((remain > OS_TICK_TH_RDY) ||                                /* If delay already occurred, ...                    */
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a4a:	d802      	bhi.n	8004a52 <OS_TickListInsertDly+0x2e>
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d158      	bne.n	8004b04 <OS_TickListInsertDly+0xe0>
            (remain == (OS_TICK)0u)) {
            p_tcb->TickRemain = (OS_TICK)0u;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	651a      	str	r2, [r3, #80]	; 0x50
           *p_err             =  OS_ERR_TIME_ZERO_DLY;                  /* ... do NOT delay.                                 */
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	f247 227e 	movw	r2, #29310	; 0x727e
 8004a5e:	801a      	strh	r2, [r3, #0]
            return;
 8004a60:	e05c      	b.n	8004b1c <OS_TickListInsertDly+0xf8>
        }

    } else if (opt == OS_OPT_TIME_PERIODIC) {                           /* PERIODIC mode.                                    */
 8004a62:	88fb      	ldrh	r3, [r7, #6]
 8004a64:	2b08      	cmp	r3, #8
 8004a66:	d13f      	bne.n	8004ae8 <OS_TickListInsertDly+0xc4>
        if ((OSTickCtr - p_tcb->TickCtrPrev) > time) {
 8004a68:	4b2e      	ldr	r3, [pc, #184]	; (8004b24 <OS_TickListInsertDly+0x100>)
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a70:	1ad2      	subs	r2, r2, r3
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d908      	bls.n	8004a8a <OS_TickListInsertDly+0x66>
            remain             = time;                                  /* ... first time we load .TickCtrPrev               */
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	617b      	str	r3, [r7, #20]
            p_tcb->TickCtrPrev = OSTickCtr + time;
 8004a7c:	4b29      	ldr	r3, [pc, #164]	; (8004b24 <OS_TickListInsertDly+0x100>)
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	441a      	add	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	655a      	str	r2, [r3, #84]	; 0x54
 8004a88:	e03c      	b.n	8004b04 <OS_TickListInsertDly+0xe0>
        } else {
            remain = time - (OSTickCtr - p_tcb->TickCtrPrev);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a8e:	4b25      	ldr	r3, [pc, #148]	; (8004b24 <OS_TickListInsertDly+0x100>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	1ad2      	subs	r2, r2, r3
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	4413      	add	r3, r2
 8004a98:	617b      	str	r3, [r7, #20]
            if ((remain > OS_TICK_TH_RDY) ||                            /* If delay time has already passed, ...             */
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004aa0:	d802      	bhi.n	8004aa8 <OS_TickListInsertDly+0x84>
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d118      	bne.n	8004ada <OS_TickListInsertDly+0xb6>
                (remain == (OS_TICK)0u)) {
                p_tcb->TickCtrPrev += time + time * ((OSTickCtr - p_tcb->TickCtrPrev) / time); /* Try to recover the period  */
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004aac:	4b1d      	ldr	r3, [pc, #116]	; (8004b24 <OS_TickListInsertDly+0x100>)
 8004aae:	6819      	ldr	r1, [r3, #0]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab4:	1ac9      	subs	r1, r1, r3
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004abc:	3301      	adds	r3, #1
 8004abe:	68b9      	ldr	r1, [r7, #8]
 8004ac0:	fb01 f303 	mul.w	r3, r1, r3
 8004ac4:	441a      	add	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	655a      	str	r2, [r3, #84]	; 0x54
                p_tcb->TickRemain   = (OS_TICK)0u;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	651a      	str	r2, [r3, #80]	; 0x50
               *p_err               =  OS_ERR_TIME_ZERO_DLY;            /* ... do NOT delay.                                 */
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	f247 227e 	movw	r2, #29310	; 0x727e
 8004ad6:	801a      	strh	r2, [r3, #0]
                return;
 8004ad8:	e020      	b.n	8004b1c <OS_TickListInsertDly+0xf8>
            }
            p_tcb->TickCtrPrev += time;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	441a      	add	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	655a      	str	r2, [r3, #84]	; 0x54
 8004ae6:	e00d      	b.n	8004b04 <OS_TickListInsertDly+0xe0>
        }

    } else if (time > (OS_TICK)0u) {                                    /* RELATIVE time delay mode                          */
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d002      	beq.n	8004af4 <OS_TickListInsertDly+0xd0>
        remain = time;
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	617b      	str	r3, [r7, #20]
 8004af2:	e007      	b.n	8004b04 <OS_TickListInsertDly+0xe0>

    } else {                                                            /* Zero time delay; ...                              */
        p_tcb->TickRemain = (OS_TICK)0u;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	651a      	str	r2, [r3, #80]	; 0x50
       *p_err             =  OS_ERR_TIME_ZERO_DLY;                      /* ... do NOT delay.                                 */
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	f247 227e 	movw	r2, #29310	; 0x727e
 8004b00:	801a      	strh	r2, [r3, #0]
        return;
 8004b02:	e00b      	b.n	8004b1c <OS_TickListInsertDly+0xf8>
    }

    p_tcb->TaskState = OS_TASK_STATE_DLY;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    OS_TickListInsert(&OSTickListDly, p_tcb, remain);
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	68f9      	ldr	r1, [r7, #12]
 8004b10:	4805      	ldr	r0, [pc, #20]	; (8004b28 <OS_TickListInsertDly+0x104>)
 8004b12:	f7ff fef1 	bl	80048f8 <OS_TickListInsert>

   *p_err = OS_ERR_NONE;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	801a      	strh	r2, [r3, #0]
}
 8004b1c:	3718      	adds	r7, #24
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	20002408 	.word	0x20002408
 8004b28:	2000250c 	.word	0x2000250c

08004b2c <OS_TickListRemove>:
*              2) This function is assumed to be called with interrupts disabled.
************************************************************************************************************************
*/

void  OS_TickListRemove (OS_TCB  *p_tcb)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b087      	sub	sp, #28
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
    OS_TICK_LIST  *p_list;
    OS_TCB        *p_tcb1;
    OS_TCB        *p_tcb2;


    p_list = (OS_TICK_LIST *)p_tcb->TickListPtr;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	69db      	ldr	r3, [r3, #28]
 8004b38:	617b      	str	r3, [r7, #20]
    p_tcb1  = p_tcb->TickPrevPtr;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	613b      	str	r3, [r7, #16]
    p_tcb2  = p_tcb->TickNextPtr;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	60fb      	str	r3, [r7, #12]
    if (p_tcb1 == (OS_TCB *)0) {
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d12c      	bne.n	8004ba6 <OS_TickListRemove+0x7a>
        if (p_tcb2 == (OS_TCB *)0) {                                    /* Remove ONLY entry in the list?                    */
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10c      	bne.n	8004b6c <OS_TickListRemove+0x40>
            p_list->TCB_Ptr    = (OS_TCB        *)0;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	2200      	movs	r2, #0
 8004b56:	601a      	str	r2, [r3, #0]
#if OS_CFG_DBG_EN > 0u
            p_list->NbrEntries = (OS_OBJ_QTY    )0u;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	809a      	strh	r2, [r3, #4]
#endif
            p_tcb->TickRemain   = (OS_TICK       )0u;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	651a      	str	r2, [r3, #80]	; 0x50
            p_tcb->TickListPtr  = (OS_TICK_LIST *)0;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	61da      	str	r2, [r3, #28]
#endif
        p_tcb->TickNextPtr  = (OS_TCB       *)0;
        p_tcb->TickRemain   = (OS_TICK       )0u;
        p_tcb->TickListPtr  = (OS_TICK_LIST *)0;
    }
}
 8004b6a:	e03e      	b.n	8004bea <OS_TickListRemove+0xbe>
            p_list->NbrEntries = (OS_OBJ_QTY    )0u;
#endif
            p_tcb->TickRemain   = (OS_TICK       )0u;
            p_tcb->TickListPtr  = (OS_TICK_LIST *)0;
        } else {
            p_tcb2->TickPrevPtr = (OS_TCB       *)0;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	619a      	str	r2, [r3, #24]
            p_tcb2->TickRemain += p_tcb->TickRemain;                    /* Add back the ticks to the delta                   */
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b7a:	441a      	add	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	651a      	str	r2, [r3, #80]	; 0x50
            p_list->TCB_Ptr    = p_tcb2;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	601a      	str	r2, [r3, #0]
#if OS_CFG_DBG_EN > 0u
            p_list->NbrEntries--;
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	889b      	ldrh	r3, [r3, #4]
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	809a      	strh	r2, [r3, #4]
#endif
            p_tcb->TickNextPtr  = (OS_TCB       *)0;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	615a      	str	r2, [r3, #20]
            p_tcb->TickRemain   = (OS_TICK       )0u;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	651a      	str	r2, [r3, #80]	; 0x50
            p_tcb->TickListPtr  = (OS_TICK_LIST *)0;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	61da      	str	r2, [r3, #28]
#endif
        p_tcb->TickNextPtr  = (OS_TCB       *)0;
        p_tcb->TickRemain   = (OS_TICK       )0u;
        p_tcb->TickListPtr  = (OS_TICK_LIST *)0;
    }
}
 8004ba4:	e021      	b.n	8004bea <OS_TickListRemove+0xbe>
            p_tcb->TickNextPtr  = (OS_TCB       *)0;
            p_tcb->TickRemain   = (OS_TICK       )0u;
            p_tcb->TickListPtr  = (OS_TICK_LIST *)0;
        }
    } else {
        p_tcb1->TickNextPtr = p_tcb2;    
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	615a      	str	r2, [r3, #20]
        if (p_tcb2 != (OS_TCB *)0) {
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d009      	beq.n	8004bc6 <OS_TickListRemove+0x9a>
            p_tcb2->TickPrevPtr = p_tcb1;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	619a      	str	r2, [r3, #24]
            p_tcb2->TickRemain += p_tcb->TickRemain;                    /* Add back the ticks to the delta list              */
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bc0:	441a      	add	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	651a      	str	r2, [r3, #80]	; 0x50
        }
        p_tcb->TickPrevPtr  = (OS_TCB       *)0;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	619a      	str	r2, [r3, #24]
#if OS_CFG_DBG_EN > 0u
        p_list->NbrEntries--;
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	889b      	ldrh	r3, [r3, #4]
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	809a      	strh	r2, [r3, #4]
#endif
        p_tcb->TickNextPtr  = (OS_TCB       *)0;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	615a      	str	r2, [r3, #20]
        p_tcb->TickRemain   = (OS_TICK       )0u;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	651a      	str	r2, [r3, #80]	; 0x50
        p_tcb->TickListPtr  = (OS_TICK_LIST *)0;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	61da      	str	r2, [r3, #28]
    }
}
 8004bea:	bf00      	nop
 8004bec:	371c      	adds	r7, #28
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bc80      	pop	{r7}
 8004bf2:	4770      	bx	lr

08004bf4 <OS_TickListResetPeak>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TickListResetPeak (void)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	af00      	add	r7, sp, #0
#if OS_CFG_DBG_EN > 0u
#endif
}
 8004bf8:	bf00      	nop
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bc80      	pop	{r7}
 8004bfe:	4770      	bx	lr

08004c00 <OS_TickListUpdateDly>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

static  CPU_TS  OS_TickListUpdateDly (void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af00      	add	r7, sp, #0
    CPU_TS        ts_start;
    CPU_TS        ts_delta_dly;
#if OS_CFG_DBG_EN > 0u
    OS_OBJ_QTY    nbr_updated;
#endif
    CPU_SR_ALLOC();
 8004c06:	2300      	movs	r3, #0
 8004c08:	60fb      	str	r3, [r7, #12]

                                                              
                                                                        
    OS_CRITICAL_ENTER();
 8004c0a:	f7fb fb69 	bl	80002e0 <CPU_SR_Save>
 8004c0e:	60f8      	str	r0, [r7, #12]
    ts_start    = OS_TS_GET();
 8004c10:	f003 f864 	bl	8007cdc <CPU_TS_TmrRd>
 8004c14:	60b8      	str	r0, [r7, #8]
#if OS_CFG_DBG_EN > 0u
    nbr_updated = (OS_OBJ_QTY)0u;
 8004c16:	2300      	movs	r3, #0
 8004c18:	827b      	strh	r3, [r7, #18]
#endif
    p_list      = &OSTickListDly;
 8004c1a:	4b29      	ldr	r3, [pc, #164]	; (8004cc0 <OS_TickListUpdateDly+0xc0>)
 8004c1c:	607b      	str	r3, [r7, #4]
    p_tcb       = p_list->TCB_Ptr;                                      
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	617b      	str	r3, [r7, #20]
    if (p_tcb != (OS_TCB *)0) {
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d039      	beq.n	8004c9e <OS_TickListUpdateDly+0x9e>
        p_tcb->TickRemain--;
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c2e:	1e5a      	subs	r2, r3, #1
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	651a      	str	r2, [r3, #80]	; 0x50
        while (p_tcb->TickRemain == 0u) {
 8004c34:	e02f      	b.n	8004c96 <OS_TickListUpdateDly+0x96>
#if OS_CFG_DBG_EN > 0u
            nbr_updated++;											    /* Keep track of the number of TCBs updated          */
 8004c36:	8a7b      	ldrh	r3, [r7, #18]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	827b      	strh	r3, [r7, #18]
#endif
            if (p_tcb->TaskState == OS_TASK_STATE_DLY) {
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d107      	bne.n	8004c56 <OS_TickListUpdateDly+0x56>
                p_tcb->TaskState = OS_TASK_STATE_RDY;
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                OS_RdyListInsert(p_tcb);                                /* Insert the task in the ready list                 */
 8004c4e:	6978      	ldr	r0, [r7, #20]
 8004c50:	f7ff fc62 	bl	8004518 <OS_RdyListInsert>
 8004c54:	e008      	b.n	8004c68 <OS_TickListUpdateDly+0x68>
            } else if (p_tcb->TaskState == OS_TASK_STATE_DLY_SUSPENDED) {
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004c5c:	2b05      	cmp	r3, #5
 8004c5e:	d103      	bne.n	8004c68 <OS_TickListUpdateDly+0x68>
                p_tcb->TaskState = OS_TASK_STATE_SUSPENDED;
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	2204      	movs	r2, #4
 8004c64:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
            }

            p_list->TCB_Ptr = p_tcb->TickNextPtr;
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	695a      	ldr	r2, [r3, #20]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	601a      	str	r2, [r3, #0]
            p_tcb           = p_list->TCB_Ptr;                          /* Get 'p_tcb' again for loop                        */
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	617b      	str	r3, [r7, #20]
            if (p_tcb == (OS_TCB *)0) {
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d103      	bne.n	8004c84 <OS_TickListUpdateDly+0x84>
#if OS_CFG_DBG_EN > 0u
                p_list->NbrEntries = (OS_OBJ_QTY)0u;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	809a      	strh	r2, [r3, #4]
#endif
                break;
 8004c82:	e00c      	b.n	8004c9e <OS_TickListUpdateDly+0x9e>
            } else {
#if OS_CFG_DBG_EN > 0u
                p_list->NbrEntries--;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	889b      	ldrh	r3, [r3, #4]
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	809a      	strh	r2, [r3, #4]
#endif
                p_tcb->TickPrevPtr = (OS_TCB *)0;
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	2200      	movs	r2, #0
 8004c94:	619a      	str	r2, [r3, #24]
#endif
    p_list      = &OSTickListDly;
    p_tcb       = p_list->TCB_Ptr;                                      
    if (p_tcb != (OS_TCB *)0) {
        p_tcb->TickRemain--;
        while (p_tcb->TickRemain == 0u) {
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d0cb      	beq.n	8004c36 <OS_TickListUpdateDly+0x36>
                p_tcb->TickPrevPtr = (OS_TCB *)0;
            }
        }
    }
#if OS_CFG_DBG_EN > 0u
    p_list->NbrUpdated = nbr_updated;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	8a7a      	ldrh	r2, [r7, #18]
 8004ca2:	80da      	strh	r2, [r3, #6]
#endif
    ts_delta_dly       = OS_TS_GET() - ts_start;                        /* Measure execution time of the update              */
 8004ca4:	f003 f81a 	bl	8007cdc <CPU_TS_TmrRd>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	603b      	str	r3, [r7, #0]
    OS_CRITICAL_EXIT();
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f7fb fb19 	bl	80002e8 <CPU_SR_Restore>

    return (ts_delta_dly);
 8004cb6:	683b      	ldr	r3, [r7, #0]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3718      	adds	r7, #24
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	2000250c 	.word	0x2000250c

08004cc4 <OS_TickListUpdateTimeout>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

static  CPU_TS  OS_TickListUpdateTimeout (void)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b088      	sub	sp, #32
 8004cc8:	af00      	add	r7, sp, #0
#endif
#if OS_CFG_MUTEX_EN > 0u
    OS_TCB       *p_tcb_owner;
    OS_PRIO       prio_new;
#endif
    CPU_SR_ALLOC();
 8004cca:	2300      	movs	r3, #0
 8004ccc:	613b      	str	r3, [r7, #16]

                                                              
                                                                        
    OS_CRITICAL_ENTER();                                                /* ======= UPDATE TASKS WAITING WITH TIMEOUT ======= */
 8004cce:	f7fb fb07 	bl	80002e0 <CPU_SR_Save>
 8004cd2:	6138      	str	r0, [r7, #16]
    ts_start    = OS_TS_GET();
 8004cd4:	f003 f802 	bl	8007cdc <CPU_TS_TmrRd>
 8004cd8:	60f8      	str	r0, [r7, #12]
#if OS_CFG_DBG_EN > 0u
    nbr_updated = (OS_OBJ_QTY)0u;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	837b      	strh	r3, [r7, #26]
#endif
    p_list      = &OSTickListTimeout;
 8004cde:	4b51      	ldr	r3, [pc, #324]	; (8004e24 <OS_TickListUpdateTimeout+0x160>)
 8004ce0:	60bb      	str	r3, [r7, #8]
    p_tcb       = p_list->TCB_Ptr;                                  
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	61fb      	str	r3, [r7, #28]
    if (p_tcb != (OS_TCB *)0) {
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	f000 8089 	beq.w	8004e02 <OS_TickListUpdateTimeout+0x13e>
        p_tcb->TickRemain--;
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf4:	1e5a      	subs	r2, r3, #1
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	651a      	str	r2, [r3, #80]	; 0x50
        while (p_tcb->TickRemain == 0u) {
 8004cfa:	e07d      	b.n	8004df8 <OS_TickListUpdateTimeout+0x134>
#if OS_CFG_DBG_EN > 0u
            nbr_updated++;
 8004cfc:	8b7b      	ldrh	r3, [r7, #26]
 8004cfe:	3301      	adds	r3, #1
 8004d00:	837b      	strh	r3, [r7, #26]
#endif

#if OS_CFG_MUTEX_EN > 0u
            p_tcb_owner = (OS_TCB *)0;
 8004d02:	2300      	movs	r3, #0
 8004d04:	617b      	str	r3, [r7, #20]
            if (p_tcb->PendOn == OS_TASK_PEND_ON_MUTEX) {
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004d0c:	2b04      	cmp	r3, #4
 8004d0e:	d104      	bne.n	8004d1a <OS_TickListUpdateTimeout+0x56>
                p_tcb_owner = ((OS_MUTEX *)p_tcb->PendDataTblPtr->PendObjPtr)->OwnerTCBPtr;
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d18:	617b      	str	r3, [r7, #20]
            }
#endif

#if (OS_MSG_EN > 0u)
            p_tcb->MsgPtr  = (void      *)0;
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	659a      	str	r2, [r3, #88]	; 0x58
            p_tcb->MsgSize = (OS_MSG_SIZE)0u;
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
#endif
            p_tcb->TS      = OS_TS_GET();
 8004d28:	f002 ffd8 	bl	8007cdc <CPU_TS_TmrRd>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	649a      	str	r2, [r3, #72]	; 0x48
            OS_PendListRemove(p_tcb);                                   /* Remove from wait list                             */
 8004d32:	69f8      	ldr	r0, [r7, #28]
 8004d34:	f7ff fa90 	bl	8004258 <OS_PendListRemove>
            if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT) {
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004d3e:	2b03      	cmp	r3, #3
 8004d40:	d107      	bne.n	8004d52 <OS_TickListUpdateTimeout+0x8e>
                OS_RdyListInsert(p_tcb);                                /* Insert the task in the ready list                 */
 8004d42:	69f8      	ldr	r0, [r7, #28]
 8004d44:	f7ff fbe8 	bl	8004518 <OS_RdyListInsert>
                p_tcb->TaskState  = OS_TASK_STATE_RDY;
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8004d50:	e008      	b.n	8004d64 <OS_TickListUpdateTimeout+0xa0>
            } else if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED) {
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004d58:	2b07      	cmp	r3, #7
 8004d5a:	d103      	bne.n	8004d64 <OS_TickListUpdateTimeout+0xa0>

                p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	2204      	movs	r2, #4
 8004d60:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
            }
            p_tcb->PendStatus = OS_STATUS_PEND_TIMEOUT;                 /* Indicate pend timed out                           */
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	2203      	movs	r2, #3
 8004d68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;                /* Indicate no longer pending                        */
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if OS_CFG_MUTEX_EN > 0u
            if(p_tcb_owner != (OS_TCB *)0) {
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d027      	beq.n	8004dca <OS_TickListUpdateTimeout+0x106>
                if ((p_tcb_owner->Prio != p_tcb_owner->BasePrio) &&
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d01f      	beq.n	8004dca <OS_TickListUpdateTimeout+0x106>
                    (p_tcb_owner->Prio == p_tcb->Prio)) {               /* Has the owner inherited a priority?               */
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
            p_tcb->PendStatus = OS_STATUS_PEND_TIMEOUT;                 /* Indicate pend timed out                           */
            p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;                /* Indicate no longer pending                        */

#if OS_CFG_MUTEX_EN > 0u
            if(p_tcb_owner != (OS_TCB *)0) {
                if ((p_tcb_owner->Prio != p_tcb_owner->BasePrio) &&
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d117      	bne.n	8004dca <OS_TickListUpdateTimeout+0x106>
                    (p_tcb_owner->Prio == p_tcb->Prio)) {               /* Has the owner inherited a priority?               */
                    prio_new = OS_MutexGrpPrioFindHighest(p_tcb_owner);
 8004d9a:	6978      	ldr	r0, [r7, #20]
 8004d9c:	f001 f836 	bl	8005e0c <OS_MutexGrpPrioFindHighest>
 8004da0:	4603      	mov	r3, r0
 8004da2:	71fb      	strb	r3, [r7, #7]
                    prio_new = prio_new > p_tcb_owner->BasePrio ? p_tcb_owner->BasePrio : prio_new;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8004daa:	79fb      	ldrb	r3, [r7, #7]
 8004dac:	4293      	cmp	r3, r2
 8004dae:	bf28      	it	cs
 8004db0:	4613      	movcs	r3, r2
 8004db2:	71fb      	strb	r3, [r7, #7]
                    if(prio_new != p_tcb_owner->Prio) {
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8004dba:	79fa      	ldrb	r2, [r7, #7]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d004      	beq.n	8004dca <OS_TickListUpdateTimeout+0x106>
                        OS_TaskChangePrio(p_tcb_owner, prio_new);
 8004dc0:	79fb      	ldrb	r3, [r7, #7]
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	6978      	ldr	r0, [r7, #20]
 8004dc6:	f7fe fbcb 	bl	8003560 <OS_TaskChangePrio>
                    }
                }
            }
#endif

            p_list->TCB_Ptr = p_tcb->TickNextPtr;
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	695a      	ldr	r2, [r3, #20]
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	601a      	str	r2, [r3, #0]
            p_tcb           = p_list->TCB_Ptr;                          /* Get 'p_tcb' again for loop                        */
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	61fb      	str	r3, [r7, #28]
            if (p_tcb == (OS_TCB *)0) {
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d103      	bne.n	8004de6 <OS_TickListUpdateTimeout+0x122>
#if OS_CFG_DBG_EN > 0u
                p_list->NbrEntries = (OS_OBJ_QTY)0u;
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	2200      	movs	r2, #0
 8004de2:	809a      	strh	r2, [r3, #4]
#endif
                break;
 8004de4:	e00d      	b.n	8004e02 <OS_TickListUpdateTimeout+0x13e>
            } else {
#if OS_CFG_DBG_EN > 0u
                p_list->NbrEntries--;
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	889b      	ldrh	r3, [r3, #4]
 8004dea:	3b01      	subs	r3, #1
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	809a      	strh	r2, [r3, #4]
#endif
                p_tcb->TickPrevPtr = (OS_TCB *)0;
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	2200      	movs	r2, #0
 8004df6:	619a      	str	r2, [r3, #24]
#endif
    p_list      = &OSTickListTimeout;
    p_tcb       = p_list->TCB_Ptr;                                  
    if (p_tcb != (OS_TCB *)0) {
        p_tcb->TickRemain--;
        while (p_tcb->TickRemain == 0u) {
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f43f af7d 	beq.w	8004cfc <OS_TickListUpdateTimeout+0x38>
                p_tcb->TickPrevPtr = (OS_TCB *)0;
            }
        }
    }
#if OS_CFG_DBG_EN > 0u
    p_list->NbrUpdated = nbr_updated;
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	8b7a      	ldrh	r2, [r7, #26]
 8004e06:	80da      	strh	r2, [r3, #6]
#endif
    ts_delta_timeout   = OS_TS_GET() - ts_start;                        /* Measure execution time of the update              */
 8004e08:	f002 ff68 	bl	8007cdc <CPU_TS_TmrRd>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	603b      	str	r3, [r7, #0]
    OS_CRITICAL_EXIT();                                                 /* ------------------------------------------------- */
 8004e14:	6938      	ldr	r0, [r7, #16]
 8004e16:	f7fb fa67 	bl	80002e8 <CPU_SR_Restore>

    return (ts_delta_timeout);
 8004e1a:	683b      	ldr	r3, [r7, #0]
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3720      	adds	r7, #32
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	20002518 	.word	0x20002518

08004e28 <OS_FlagInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_FlagInit (OS_ERR  *p_err)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSFlagDbgListPtr = (OS_FLAG_GRP *)0;
 8004e30:	4b06      	ldr	r3, [pc, #24]	; (8004e4c <OS_FlagInit+0x24>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	601a      	str	r2, [r3, #0]
#endif

    OSFlagQty        = (OS_OBJ_QTY   )0;
 8004e36:	4b06      	ldr	r3, [pc, #24]	; (8004e50 <OS_FlagInit+0x28>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	801a      	strh	r2, [r3, #0]
   *p_err            = OS_ERR_NONE;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	801a      	strh	r2, [r3, #0]
}
 8004e42:	bf00      	nop
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bc80      	pop	{r7}
 8004e4a:	4770      	bx	lr
 8004e4c:	20002424 	.word	0x20002424
 8004e50:	20002420 	.word	0x20002420

08004e54 <OSStatReset>:
* Returns    : none
************************************************************************************************************************
*/

void  OSStatReset (OS_ERR  *p_err)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
#endif
#if (OS_CFG_Q_EN > 0u)
    OS_Q        *p_q;
#endif
#endif
    CPU_SR_ALLOC();
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	60fb      	str	r3, [r7, #12]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    CPU_CRITICAL_ENTER();
 8004e60:	f7fb fa3e 	bl	80002e0 <CPU_SR_Save>
 8004e64:	60f8      	str	r0, [r7, #12]
    OSIntQTaskTimeMax     = (CPU_TS    )0;                  /* Reset the task execution times                         */
    OSIntQNbrEntriesMax   = (OS_OBJ_QTY)0;                  /* Reset the queue maximum number of entries              */
#endif

#if OS_CFG_STAT_TASK_EN > 0u
    OSStatTaskCPUUsageMax = 0u;
 8004e66:	4b3f      	ldr	r3, [pc, #252]	; (8004f64 <OSStatReset+0x110>)
 8004e68:	2200      	movs	r2, #0
 8004e6a:	801a      	strh	r2, [r3, #0]
    OSStatTaskTimeMax     = (CPU_TS)0;
 8004e6c:	4b3e      	ldr	r3, [pc, #248]	; (8004f68 <OSStatReset+0x114>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	601a      	str	r2, [r3, #0]
#endif

    OSTickTaskTimeMax     = (CPU_TS)0;
 8004e72:	4b3e      	ldr	r3, [pc, #248]	; (8004f6c <OSStatReset+0x118>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	601a      	str	r2, [r3, #0]

#if OS_CFG_TMR_EN > 0u
    OSTmrTaskTimeMax      = (CPU_TS)0;
 8004e78:	4b3d      	ldr	r3, [pc, #244]	; (8004f70 <OSStatReset+0x11c>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	601a      	str	r2, [r3, #0]
#ifdef CPU_CFG_INT_DIS_MEAS_EN
    OSIntDisTimeMax       = (CPU_TS)0;                      /* Reset the maximum interrupt disable time               */
#endif

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
    OSSchedLockTimeMax    = (CPU_TS)0;                      /* Reset the maximum scheduler lock time                  */
 8004e7e:	4b3d      	ldr	r3, [pc, #244]	; (8004f74 <OSStatReset+0x120>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	601a      	str	r2, [r3, #0]
#endif

#if ((OS_MSG_EN > 0u) && (OS_CFG_DBG_EN > 0u))
    OSMsgPool.NbrUsedMax  = 0u;
 8004e84:	4b3c      	ldr	r3, [pc, #240]	; (8004f78 <OSStatReset+0x124>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	811a      	strh	r2, [r3, #8]
#endif
    CPU_CRITICAL_EXIT();
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f7fb fa2c 	bl	80002e8 <CPU_SR_Restore>

#if OS_CFG_DBG_EN > 0u
    CPU_CRITICAL_ENTER();
 8004e90:	f7fb fa26 	bl	80002e0 <CPU_SR_Save>
 8004e94:	60f8      	str	r0, [r7, #12]
    p_tcb = OSTaskDbgListPtr;
 8004e96:	4b39      	ldr	r3, [pc, #228]	; (8004f7c <OSStatReset+0x128>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	617b      	str	r3, [r7, #20]
    CPU_CRITICAL_EXIT();
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f7fb fa23 	bl	80002e8 <CPU_SR_Restore>
    while (p_tcb != (OS_TCB *)0) {                          /* Reset per-Task statistics                              */
 8004ea2:	e034      	b.n	8004f0e <OSStatReset+0xba>
        CPU_CRITICAL_ENTER();
 8004ea4:	f7fb fa1c 	bl	80002e0 <CPU_SR_Save>
 8004ea8:	60f8      	str	r0, [r7, #12]
#ifdef CPU_CFG_INT_DIS_MEAS_EN
        p_tcb->IntDisTimeMax    = (CPU_TS      )0;
#endif

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
        p_tcb->SchedLockTimeMax = (CPU_TS      )0;
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
#endif

#if OS_CFG_TASK_PROFILE_EN > 0u
#if OS_CFG_TASK_Q_EN > 0u
        p_tcb->MsgQPendTimeMax  = (CPU_TS      )0;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	675a      	str	r2, [r3, #116]	; 0x74
#endif
        p_tcb->SemPendTimeMax   = (CPU_TS      )0;
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        p_tcb->CtxSwCtr         = (OS_CTR      )0;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        p_tcb->CPUUsage         = (OS_CPU_USAGE)0;
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
        p_tcb->CPUUsageMax      = (OS_CPU_USAGE)0;
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
        p_tcb->CyclesTotal      = (OS_CYCLES   )0;
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        p_tcb->CyclesTotalPrev  = (OS_CYCLES   )0;
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        p_tcb->CyclesStart      =  OS_TS_GET();
 8004ee8:	f002 fef8 	bl	8007cdc <CPU_TS_TmrRd>
 8004eec:	4602      	mov	r2, r0
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif

#if OS_CFG_TASK_Q_EN > 0u
        p_msg_q                 = &p_tcb->MsgQ;
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	3360      	adds	r3, #96	; 0x60
 8004ef8:	60bb      	str	r3, [r7, #8]
        p_msg_q->NbrEntriesMax  = (OS_MSG_QTY  )0;
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	2200      	movs	r2, #0
 8004efe:	819a      	strh	r2, [r3, #12]
#endif
        p_tcb                   = p_tcb->DbgNextPtr;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004f06:	617b      	str	r3, [r7, #20]
        CPU_CRITICAL_EXIT();
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	f7fb f9ed 	bl	80002e8 <CPU_SR_Restore>

#if OS_CFG_DBG_EN > 0u
    CPU_CRITICAL_ENTER();
    p_tcb = OSTaskDbgListPtr;
    CPU_CRITICAL_EXIT();
    while (p_tcb != (OS_TCB *)0) {                          /* Reset per-Task statistics                              */
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1c7      	bne.n	8004ea4 <OSStatReset+0x50>
        CPU_CRITICAL_EXIT();
    }
#endif

#if (OS_CFG_Q_EN > 0u) && (OS_CFG_DBG_EN > 0u)
    CPU_CRITICAL_ENTER();
 8004f14:	f7fb f9e4 	bl	80002e0 <CPU_SR_Save>
 8004f18:	60f8      	str	r0, [r7, #12]
    p_q = OSQDbgListPtr;
 8004f1a:	4b19      	ldr	r3, [pc, #100]	; (8004f80 <OSStatReset+0x12c>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	613b      	str	r3, [r7, #16]
    CPU_CRITICAL_EXIT();
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f7fb f9e1 	bl	80002e8 <CPU_SR_Restore>
    while (p_q != (OS_Q *)0) {                              /* Reset message queues statistics                        */
 8004f26:	e00e      	b.n	8004f46 <OSStatReset+0xf2>
        CPU_CRITICAL_ENTER();
 8004f28:	f7fb f9da 	bl	80002e0 <CPU_SR_Save>
 8004f2c:	60f8      	str	r0, [r7, #12]
        p_msg_q                = &p_q->MsgQ;
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	3320      	adds	r3, #32
 8004f32:	60bb      	str	r3, [r7, #8]
        p_msg_q->NbrEntriesMax = (OS_MSG_QTY)0;
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	2200      	movs	r2, #0
 8004f38:	819a      	strh	r2, [r3, #12]
        p_q                    = p_q->DbgNextPtr;
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	613b      	str	r3, [r7, #16]
        CPU_CRITICAL_EXIT();
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	f7fb f9d1 	bl	80002e8 <CPU_SR_Restore>

#if (OS_CFG_Q_EN > 0u) && (OS_CFG_DBG_EN > 0u)
    CPU_CRITICAL_ENTER();
    p_q = OSQDbgListPtr;
    CPU_CRITICAL_EXIT();
    while (p_q != (OS_Q *)0) {                              /* Reset message queues statistics                        */
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1ed      	bne.n	8004f28 <OSStatReset+0xd4>
        p_q                    = p_q->DbgNextPtr;
        CPU_CRITICAL_EXIT();
    }
#endif

    OS_TickListResetPeak();                                 /* Reset tick wheel statistics                            */
 8004f4c:	f7ff fe52 	bl	8004bf4 <OS_TickListResetPeak>

#if OS_CFG_TMR_EN > 0u
    OS_TmrResetPeak();
 8004f50:	f001 fa7e 	bl	8006450 <OS_TmrResetPeak>
#endif


   *p_err = OS_ERR_NONE;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	801a      	strh	r2, [r3, #0]
}
 8004f5a:	bf00      	nop
 8004f5c:	3718      	adds	r7, #24
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	2000220e 	.word	0x2000220e
 8004f68:	20001fa4 	.word	0x20001fa4
 8004f6c:	200024fc 	.word	0x200024fc
 8004f70:	20002220 	.word	0x20002220
 8004f74:	20002428 	.word	0x20002428
 8004f78:	200022f8 	.word	0x200022f8
 8004f7c:	2000221c 	.word	0x2000221c
 8004f80:	200023c4 	.word	0x200023c4

08004f84 <OSStatTaskCPUUsageInit>:
* Returns    : none
************************************************************************************************************************
*/

void  OSStatTaskCPUUsageInit (OS_ERR  *p_err)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
    OS_ERR   err;
    OS_TICK  dly;
    CPU_SR_ALLOC();
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	613b      	str	r3, [r7, #16]
        return;
    }
#endif

#if ((OS_CFG_TMR_EN > 0u) && (OS_CFG_TASK_SUSPEND_EN > 0u))
    OSTaskSuspend(&OSTmrTaskTCB, &err);
 8004f90:	f107 030e 	add.w	r3, r7, #14
 8004f94:	4619      	mov	r1, r3
 8004f96:	4832      	ldr	r0, [pc, #200]	; (8005060 <OSStatTaskCPUUsageInit+0xdc>)
 8004f98:	f7fd ffea 	bl	8002f70 <OSTaskSuspend>
    if (err != OS_ERR_NONE) {
 8004f9c:	89fb      	ldrh	r3, [r7, #14]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d003      	beq.n	8004faa <OSStatTaskCPUUsageInit+0x26>
       *p_err = err;
 8004fa2:	89fa      	ldrh	r2, [r7, #14]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	801a      	strh	r2, [r3, #0]
        return;
 8004fa8:	e056      	b.n	8005058 <OSStatTaskCPUUsageInit+0xd4>
    }
#endif

    OSTimeDly((OS_TICK )2,                                  /* Synchronize with clock tick                            */
 8004faa:	f107 030e 	add.w	r3, r7, #14
 8004fae:	461a      	mov	r2, r3
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	2002      	movs	r0, #2
 8004fb4:	f000 fae2 	bl	800557c <OSTimeDly>
              (OS_OPT  )OS_OPT_TIME_DLY,
              (OS_ERR *)&err);
    if (err != OS_ERR_NONE) {
 8004fb8:	89fb      	ldrh	r3, [r7, #14]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d003      	beq.n	8004fc6 <OSStatTaskCPUUsageInit+0x42>
       *p_err = err;
 8004fbe:	89fa      	ldrh	r2, [r7, #14]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	801a      	strh	r2, [r3, #0]
        return;
 8004fc4:	e048      	b.n	8005058 <OSStatTaskCPUUsageInit+0xd4>
    }
    CPU_CRITICAL_ENTER();
 8004fc6:	f7fb f98b 	bl	80002e0 <CPU_SR_Save>
 8004fca:	6138      	str	r0, [r7, #16]
    OSStatTaskCtr = (OS_TICK)0;                             /* Clear idle counter                                     */
 8004fcc:	4b25      	ldr	r3, [pc, #148]	; (8005064 <OSStatTaskCPUUsageInit+0xe0>)
 8004fce:	2200      	movs	r2, #0
 8004fd0:	601a      	str	r2, [r3, #0]
    CPU_CRITICAL_EXIT();
 8004fd2:	6938      	ldr	r0, [r7, #16]
 8004fd4:	f7fb f988 	bl	80002e8 <CPU_SR_Restore>

    dly = (OS_TICK)0;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	617b      	str	r3, [r7, #20]
    if (OSCfg_TickRate_Hz > OSCfg_StatTaskRate_Hz) {
 8004fdc:	4b22      	ldr	r3, [pc, #136]	; (8005068 <OSStatTaskCPUUsageInit+0xe4>)
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	4b22      	ldr	r3, [pc, #136]	; (800506c <OSStatTaskCPUUsageInit+0xe8>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d906      	bls.n	8004ff6 <OSStatTaskCPUUsageInit+0x72>
        dly = (OS_TICK)(OSCfg_TickRate_Hz / OSCfg_StatTaskRate_Hz);
 8004fe8:	4b1f      	ldr	r3, [pc, #124]	; (8005068 <OSStatTaskCPUUsageInit+0xe4>)
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	4b1f      	ldr	r3, [pc, #124]	; (800506c <OSStatTaskCPUUsageInit+0xe8>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff4:	617b      	str	r3, [r7, #20]
    }
    if (dly == (OS_TICK)0) {
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d106      	bne.n	800500a <OSStatTaskCPUUsageInit+0x86>
        dly =  (OS_TICK)(OSCfg_TickRate_Hz / (OS_RATE_HZ)10);
 8004ffc:	4b1a      	ldr	r3, [pc, #104]	; (8005068 <OSStatTaskCPUUsageInit+0xe4>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a1b      	ldr	r2, [pc, #108]	; (8005070 <OSStatTaskCPUUsageInit+0xec>)
 8005002:	fba2 2303 	umull	r2, r3, r2, r3
 8005006:	08db      	lsrs	r3, r3, #3
 8005008:	617b      	str	r3, [r7, #20]
    }

    OSTimeDly(dly,                                          /* Determine MAX. idle counter value                      */
 800500a:	f107 030e 	add.w	r3, r7, #14
 800500e:	461a      	mov	r2, r3
 8005010:	2100      	movs	r1, #0
 8005012:	6978      	ldr	r0, [r7, #20]
 8005014:	f000 fab2 	bl	800557c <OSTimeDly>
              OS_OPT_TIME_DLY,
              &err);

#if ((OS_CFG_TMR_EN > 0u) && (OS_CFG_TASK_SUSPEND_EN > 0u))
    OSTaskResume(&OSTmrTaskTCB, &err);
 8005018:	f107 030e 	add.w	r3, r7, #14
 800501c:	4619      	mov	r1, r3
 800501e:	4810      	ldr	r0, [pc, #64]	; (8005060 <OSStatTaskCPUUsageInit+0xdc>)
 8005020:	f7fd fde8 	bl	8002bf4 <OSTaskResume>
    if (err != OS_ERR_NONE) {
 8005024:	89fb      	ldrh	r3, [r7, #14]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <OSStatTaskCPUUsageInit+0xae>
       *p_err = err;
 800502a:	89fa      	ldrh	r2, [r7, #14]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	801a      	strh	r2, [r3, #0]
        return;
 8005030:	e012      	b.n	8005058 <OSStatTaskCPUUsageInit+0xd4>
    }
#endif

    CPU_CRITICAL_ENTER();
 8005032:	f7fb f955 	bl	80002e0 <CPU_SR_Save>
 8005036:	6138      	str	r0, [r7, #16]
    OSStatTaskTimeMax = (CPU_TS)0;
 8005038:	4b0e      	ldr	r3, [pc, #56]	; (8005074 <OSStatTaskCPUUsageInit+0xf0>)
 800503a:	2200      	movs	r2, #0
 800503c:	601a      	str	r2, [r3, #0]

    OSStatTaskCtrMax  = OSStatTaskCtr;                      /* Store maximum idle counter count                       */
 800503e:	4b09      	ldr	r3, [pc, #36]	; (8005064 <OSStatTaskCPUUsageInit+0xe0>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a0d      	ldr	r2, [pc, #52]	; (8005078 <OSStatTaskCPUUsageInit+0xf4>)
 8005044:	6013      	str	r3, [r2, #0]
    OSStatTaskRdy     = OS_STATE_RDY;
 8005046:	4b0d      	ldr	r3, [pc, #52]	; (800507c <OSStatTaskCPUUsageInit+0xf8>)
 8005048:	2201      	movs	r2, #1
 800504a:	701a      	strb	r2, [r3, #0]
    CPU_CRITICAL_EXIT();
 800504c:	6938      	ldr	r0, [r7, #16]
 800504e:	f7fb f94b 	bl	80002e8 <CPU_SR_Restore>
   *p_err             = OS_ERR_NONE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	801a      	strh	r2, [r3, #0]
}
 8005058:	3718      	adds	r7, #24
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	20002238 	.word	0x20002238
 8005064:	20001fa8 	.word	0x20001fa8
 8005068:	0800f09c 	.word	0x0800f09c
 800506c:	0800f088 	.word	0x0800f088
 8005070:	cccccccd 	.word	0xcccccccd
 8005074:	20001fa4 	.word	0x20001fa4
 8005078:	20002404 	.word	0x20002404
 800507c:	20002131 	.word	0x20002131

08005080 <OS_StatTask>:
*              4) This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_StatTask (void  *p_arg)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b090      	sub	sp, #64	; 0x40
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
    OS_TICK      ctr_div;
    OS_ERR       err;
    OS_TICK      dly;
    CPU_TS       ts_start;
    CPU_TS       ts_end;
    CPU_SR_ALLOC();
 8005088:	2300      	movs	r3, #0
 800508a:	61bb      	str	r3, [r7, #24]



    (void)&p_arg;                                           /* Prevent compiler warning for not using 'p_arg'         */
    while (OSStatTaskRdy != DEF_TRUE) {
 800508c:	e008      	b.n	80050a0 <OS_StatTask+0x20>
        OSTimeDly(2u * OSCfg_StatTaskRate_Hz,               /* Wait until statistic task is ready                     */
 800508e:	4b84      	ldr	r3, [pc, #528]	; (80052a0 <OS_StatTask+0x220>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	005b      	lsls	r3, r3, #1
 8005094:	f107 020a 	add.w	r2, r7, #10
 8005098:	2100      	movs	r1, #0
 800509a:	4618      	mov	r0, r3
 800509c:	f000 fa6e 	bl	800557c <OSTimeDly>
    CPU_SR_ALLOC();



    (void)&p_arg;                                           /* Prevent compiler warning for not using 'p_arg'         */
    while (OSStatTaskRdy != DEF_TRUE) {
 80050a0:	4b80      	ldr	r3, [pc, #512]	; (80052a4 <OS_StatTask+0x224>)
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d1f2      	bne.n	800508e <OS_StatTask+0xe>
        OSTimeDly(2u * OSCfg_StatTaskRate_Hz,               /* Wait until statistic task is ready                     */
                  OS_OPT_TIME_DLY,
                  &err);
    }
    OSStatReset(&err);                                      /* Reset statistics                                       */
 80050a8:	f107 030a 	add.w	r3, r7, #10
 80050ac:	4618      	mov	r0, r3
 80050ae:	f7ff fed1 	bl	8004e54 <OSStatReset>

    dly = (OS_TICK)0;                                       /* Compute statistic task sleep delay                     */
 80050b2:	2300      	movs	r3, #0
 80050b4:	61fb      	str	r3, [r7, #28]
    if (OSCfg_TickRate_Hz > OSCfg_StatTaskRate_Hz) {
 80050b6:	4b7c      	ldr	r3, [pc, #496]	; (80052a8 <OS_StatTask+0x228>)
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	4b79      	ldr	r3, [pc, #484]	; (80052a0 <OS_StatTask+0x220>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d906      	bls.n	80050d0 <OS_StatTask+0x50>
        dly = (OS_TICK)(OSCfg_TickRate_Hz / OSCfg_StatTaskRate_Hz);
 80050c2:	4b79      	ldr	r3, [pc, #484]	; (80052a8 <OS_StatTask+0x228>)
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	4b76      	ldr	r3, [pc, #472]	; (80052a0 <OS_StatTask+0x220>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ce:	61fb      	str	r3, [r7, #28]
    }
    if (dly == (OS_TICK)0) {
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d106      	bne.n	80050e4 <OS_StatTask+0x64>
        dly =  (OS_TICK)(OSCfg_TickRate_Hz / (OS_RATE_HZ)10);
 80050d6:	4b74      	ldr	r3, [pc, #464]	; (80052a8 <OS_StatTask+0x228>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a74      	ldr	r2, [pc, #464]	; (80052ac <OS_StatTask+0x22c>)
 80050dc:	fba2 2303 	umull	r2, r3, r2, r3
 80050e0:	08db      	lsrs	r3, r3, #3
 80050e2:	61fb      	str	r3, [r7, #28]
    }

    while (DEF_ON) {
        ts_start        = OS_TS_GET();
 80050e4:	f002 fdfa 	bl	8007cdc <CPU_TS_TmrRd>
 80050e8:	6178      	str	r0, [r7, #20]
#ifdef  CPU_CFG_INT_DIS_MEAS_EN
        OSIntDisTimeMax = CPU_IntDisMeasMaxGet();
#endif

        CPU_CRITICAL_ENTER();                               /* ----------------- OVERALL CPU USAGE ------------------ */
 80050ea:	f7fb f8f9 	bl	80002e0 <CPU_SR_Save>
 80050ee:	61b8      	str	r0, [r7, #24]
        OSStatTaskCtrRun   = OSStatTaskCtr;                 /* Obtain the of the stat counter for the past .1 second  */
 80050f0:	4b6f      	ldr	r3, [pc, #444]	; (80052b0 <OS_StatTask+0x230>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a6f      	ldr	r2, [pc, #444]	; (80052b4 <OS_StatTask+0x234>)
 80050f6:	6013      	str	r3, [r2, #0]
        OSStatTaskCtr      = (OS_TICK)0;                    /* Reset the stat counter for the next .1 second          */
 80050f8:	4b6d      	ldr	r3, [pc, #436]	; (80052b0 <OS_StatTask+0x230>)
 80050fa:	2200      	movs	r2, #0
 80050fc:	601a      	str	r2, [r3, #0]
        CPU_CRITICAL_EXIT();
 80050fe:	69b8      	ldr	r0, [r7, #24]
 8005100:	f7fb f8f2 	bl	80002e8 <CPU_SR_Restore>

        if (OSStatTaskCtrMax > OSStatTaskCtrRun) {          /* Compute CPU Usage with best resolution                 */
 8005104:	4b6c      	ldr	r3, [pc, #432]	; (80052b8 <OS_StatTask+0x238>)
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	4b6a      	ldr	r3, [pc, #424]	; (80052b4 <OS_StatTask+0x234>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	429a      	cmp	r2, r3
 800510e:	d94f      	bls.n	80051b0 <OS_StatTask+0x130>
            if (OSStatTaskCtrMax < 400000u) {                                        /*            1 to       400,000 */
 8005110:	4b69      	ldr	r3, [pc, #420]	; (80052b8 <OS_StatTask+0x238>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a69      	ldr	r2, [pc, #420]	; (80052bc <OS_StatTask+0x23c>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d805      	bhi.n	8005126 <OS_StatTask+0xa6>
                ctr_mult = 10000u;
 800511a:	f242 7310 	movw	r3, #10000	; 0x2710
 800511e:	627b      	str	r3, [r7, #36]	; 0x24
                ctr_div  =     1u;
 8005120:	2301      	movs	r3, #1
 8005122:	623b      	str	r3, [r7, #32]
 8005124:	e024      	b.n	8005170 <OS_StatTask+0xf0>
            } else if (OSStatTaskCtrMax <   4000000u) {                              /*      400,000 to     4,000,000 */
 8005126:	4b64      	ldr	r3, [pc, #400]	; (80052b8 <OS_StatTask+0x238>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a65      	ldr	r2, [pc, #404]	; (80052c0 <OS_StatTask+0x240>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d805      	bhi.n	800513c <OS_StatTask+0xbc>
                ctr_mult =  1000u;
 8005130:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005134:	627b      	str	r3, [r7, #36]	; 0x24
                ctr_div  =    10u;
 8005136:	230a      	movs	r3, #10
 8005138:	623b      	str	r3, [r7, #32]
 800513a:	e019      	b.n	8005170 <OS_StatTask+0xf0>
            } else if (OSStatTaskCtrMax <  40000000u) {                              /*    4,000,000 to    40,000,000 */
 800513c:	4b5e      	ldr	r3, [pc, #376]	; (80052b8 <OS_StatTask+0x238>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a60      	ldr	r2, [pc, #384]	; (80052c4 <OS_StatTask+0x244>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d804      	bhi.n	8005150 <OS_StatTask+0xd0>
                ctr_mult =   100u;
 8005146:	2364      	movs	r3, #100	; 0x64
 8005148:	627b      	str	r3, [r7, #36]	; 0x24
                ctr_div  =   100u;
 800514a:	2364      	movs	r3, #100	; 0x64
 800514c:	623b      	str	r3, [r7, #32]
 800514e:	e00f      	b.n	8005170 <OS_StatTask+0xf0>
            } else if (OSStatTaskCtrMax < 400000000u) {                              /*   40,000,000 to   400,000,000 */
 8005150:	4b59      	ldr	r3, [pc, #356]	; (80052b8 <OS_StatTask+0x238>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a5c      	ldr	r2, [pc, #368]	; (80052c8 <OS_StatTask+0x248>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d805      	bhi.n	8005166 <OS_StatTask+0xe6>
                ctr_mult =    10u;
 800515a:	230a      	movs	r3, #10
 800515c:	627b      	str	r3, [r7, #36]	; 0x24
                ctr_div  =  1000u;
 800515e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005162:	623b      	str	r3, [r7, #32]
 8005164:	e004      	b.n	8005170 <OS_StatTask+0xf0>
            } else {                                                                 /*  400,000,000 and up           */
                ctr_mult =     1u;
 8005166:	2301      	movs	r3, #1
 8005168:	627b      	str	r3, [r7, #36]	; 0x24
                ctr_div  = 10000u;
 800516a:	f242 7310 	movw	r3, #10000	; 0x2710
 800516e:	623b      	str	r3, [r7, #32]
            }
            ctr_max            = OSStatTaskCtrMax / ctr_div;
 8005170:	4b51      	ldr	r3, [pc, #324]	; (80052b8 <OS_StatTask+0x238>)
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	6a3b      	ldr	r3, [r7, #32]
 8005176:	fbb2 f3f3 	udiv	r3, r2, r3
 800517a:	613b      	str	r3, [r7, #16]
            OSStatTaskCPUUsage = (OS_CPU_USAGE)((OS_TICK)10000u - ctr_mult * OSStatTaskCtrRun / ctr_max);
 800517c:	4b4d      	ldr	r3, [pc, #308]	; (80052b4 <OS_StatTask+0x234>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005182:	fb02 f203 	mul.w	r2, r2, r3
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	fbb2 f3f3 	udiv	r3, r2, r3
 800518c:	b29b      	uxth	r3, r3
 800518e:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8005192:	3310      	adds	r3, #16
 8005194:	b29a      	uxth	r2, r3
 8005196:	4b4d      	ldr	r3, [pc, #308]	; (80052cc <OS_StatTask+0x24c>)
 8005198:	801a      	strh	r2, [r3, #0]
            if (OSStatTaskCPUUsageMax < OSStatTaskCPUUsage) {
 800519a:	4b4d      	ldr	r3, [pc, #308]	; (80052d0 <OS_StatTask+0x250>)
 800519c:	881a      	ldrh	r2, [r3, #0]
 800519e:	4b4b      	ldr	r3, [pc, #300]	; (80052cc <OS_StatTask+0x24c>)
 80051a0:	881b      	ldrh	r3, [r3, #0]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d208      	bcs.n	80051b8 <OS_StatTask+0x138>
                OSStatTaskCPUUsageMax = OSStatTaskCPUUsage;
 80051a6:	4b49      	ldr	r3, [pc, #292]	; (80052cc <OS_StatTask+0x24c>)
 80051a8:	881a      	ldrh	r2, [r3, #0]
 80051aa:	4b49      	ldr	r3, [pc, #292]	; (80052d0 <OS_StatTask+0x250>)
 80051ac:	801a      	strh	r2, [r3, #0]
 80051ae:	e003      	b.n	80051b8 <OS_StatTask+0x138>
            }
        } else {
            OSStatTaskCPUUsage = (OS_CPU_USAGE)10000u;
 80051b0:	4b46      	ldr	r3, [pc, #280]	; (80052cc <OS_StatTask+0x24c>)
 80051b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80051b6:	801a      	strh	r2, [r3, #0]
        }

        OSStatTaskHook();                                   /* Invoke user definable hook                             */
 80051b8:	f001 fa42 	bl	8006640 <OSStatTaskHook>


#if OS_CFG_DBG_EN > 0u
#if OS_CFG_TASK_PROFILE_EN > 0u
        cycles_total = (OS_CYCLES)0;
 80051bc:	2300      	movs	r3, #0
 80051be:	63bb      	str	r3, [r7, #56]	; 0x38

        CPU_CRITICAL_ENTER();
 80051c0:	f7fb f88e 	bl	80002e0 <CPU_SR_Save>
 80051c4:	61b8      	str	r0, [r7, #24]
        p_tcb = OSTaskDbgListPtr;
 80051c6:	4b43      	ldr	r3, [pc, #268]	; (80052d4 <OS_StatTask+0x254>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	62bb      	str	r3, [r7, #40]	; 0x28
        CPU_CRITICAL_EXIT();
 80051cc:	69b8      	ldr	r0, [r7, #24]
 80051ce:	f7fb f88b 	bl	80002e8 <CPU_SR_Restore>
        while (p_tcb != (OS_TCB *)0) {                      /* ----------------- TOTAL CYCLES COUNT ----------------- */
 80051d2:	e01f      	b.n	8005214 <OS_StatTask+0x194>
            OS_CRITICAL_ENTER();
 80051d4:	f7fb f884 	bl	80002e0 <CPU_SR_Save>
 80051d8:	61b8      	str	r0, [r7, #24]
            p_tcb->CyclesTotalPrev =  p_tcb->CyclesTotal;   /* Save accumulated # cycles into a temp variable         */
 80051da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051dc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80051e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
            p_tcb->CyclesTotal     = (OS_CYCLES)0;          /* Reset total cycles for task for next run               */
 80051e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e8:	2200      	movs	r2, #0
 80051ea:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            OS_CRITICAL_EXIT();
 80051ee:	69b8      	ldr	r0, [r7, #24]
 80051f0:	f7fb f87a 	bl	80002e8 <CPU_SR_Restore>

            cycles_total          += p_tcb->CyclesTotalPrev;/* Perform sum of all task # cycles                       */
 80051f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051fc:	4413      	add	r3, r2
 80051fe:	63bb      	str	r3, [r7, #56]	; 0x38

            CPU_CRITICAL_ENTER();
 8005200:	f7fb f86e 	bl	80002e0 <CPU_SR_Save>
 8005204:	61b8      	str	r0, [r7, #24]
            p_tcb                  = p_tcb->DbgNextPtr;
 8005206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005208:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800520c:	62bb      	str	r3, [r7, #40]	; 0x28
            CPU_CRITICAL_EXIT();
 800520e:	69b8      	ldr	r0, [r7, #24]
 8005210:	f7fb f86a 	bl	80002e8 <CPU_SR_Restore>
        cycles_total = (OS_CYCLES)0;

        CPU_CRITICAL_ENTER();
        p_tcb = OSTaskDbgListPtr;
        CPU_CRITICAL_EXIT();
        while (p_tcb != (OS_TCB *)0) {                      /* ----------------- TOTAL CYCLES COUNT ----------------- */
 8005214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1dc      	bne.n	80051d4 <OS_StatTask+0x154>
#endif


#if OS_CFG_TASK_PROFILE_EN > 0u
                                                            /* ------------- INDIVIDUAL TASK CPU USAGE -------------- */
        if (cycles_total > (OS_CYCLES)0u) {                                          /* 'cycles_total' scaling ...    */
 800521a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521c:	2b00      	cmp	r3, #0
 800521e:	d031      	beq.n	8005284 <OS_StatTask+0x204>
            if (cycles_total < 400000u) {                                            /*            1 to       400,000 */
 8005220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005222:	4a26      	ldr	r2, [pc, #152]	; (80052bc <OS_StatTask+0x23c>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d805      	bhi.n	8005234 <OS_StatTask+0x1b4>
                cycles_mult = 10000u;
 8005228:	f242 7310 	movw	r3, #10000	; 0x2710
 800522c:	633b      	str	r3, [r7, #48]	; 0x30
                cycles_div  =     1u;
 800522e:	2301      	movs	r3, #1
 8005230:	637b      	str	r3, [r7, #52]	; 0x34
 8005232:	e021      	b.n	8005278 <OS_StatTask+0x1f8>
            } else if (cycles_total <   4000000u) {                                  /*      400,000 to     4,000,000 */
 8005234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005236:	4a22      	ldr	r2, [pc, #136]	; (80052c0 <OS_StatTask+0x240>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d805      	bhi.n	8005248 <OS_StatTask+0x1c8>
                cycles_mult =  1000u;
 800523c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005240:	633b      	str	r3, [r7, #48]	; 0x30
                cycles_div  =    10u;
 8005242:	230a      	movs	r3, #10
 8005244:	637b      	str	r3, [r7, #52]	; 0x34
 8005246:	e017      	b.n	8005278 <OS_StatTask+0x1f8>
            } else if (cycles_total <  40000000u) {                                  /*    4,000,000 to    40,000,000 */
 8005248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524a:	4a1e      	ldr	r2, [pc, #120]	; (80052c4 <OS_StatTask+0x244>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d804      	bhi.n	800525a <OS_StatTask+0x1da>
                cycles_mult =   100u;
 8005250:	2364      	movs	r3, #100	; 0x64
 8005252:	633b      	str	r3, [r7, #48]	; 0x30
                cycles_div  =   100u;
 8005254:	2364      	movs	r3, #100	; 0x64
 8005256:	637b      	str	r3, [r7, #52]	; 0x34
 8005258:	e00e      	b.n	8005278 <OS_StatTask+0x1f8>
            } else if (cycles_total < 400000000u) {                                  /*   40,000,000 to   400,000,000 */
 800525a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525c:	4a1a      	ldr	r2, [pc, #104]	; (80052c8 <OS_StatTask+0x248>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d805      	bhi.n	800526e <OS_StatTask+0x1ee>
                cycles_mult =    10u;
 8005262:	230a      	movs	r3, #10
 8005264:	633b      	str	r3, [r7, #48]	; 0x30
                cycles_div  =  1000u;
 8005266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800526a:	637b      	str	r3, [r7, #52]	; 0x34
 800526c:	e004      	b.n	8005278 <OS_StatTask+0x1f8>
            } else {                                                                 /*  400,000,000 and up           */
                cycles_mult =     1u;
 800526e:	2301      	movs	r3, #1
 8005270:	633b      	str	r3, [r7, #48]	; 0x30
                cycles_div  = 10000u;
 8005272:	f242 7310 	movw	r3, #10000	; 0x2710
 8005276:	637b      	str	r3, [r7, #52]	; 0x34
            }
            cycles_max  = cycles_total / cycles_div;
 8005278:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800527a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800527c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005280:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005282:	e003      	b.n	800528c <OS_StatTask+0x20c>
        } else {
            cycles_mult = 0u;
 8005284:	2300      	movs	r3, #0
 8005286:	633b      	str	r3, [r7, #48]	; 0x30
            cycles_max  = 1u;
 8005288:	2301      	movs	r3, #1
 800528a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif
        CPU_CRITICAL_ENTER();
 800528c:	f7fb f828 	bl	80002e0 <CPU_SR_Save>
 8005290:	61b8      	str	r0, [r7, #24]
        p_tcb = OSTaskDbgListPtr;
 8005292:	4b10      	ldr	r3, [pc, #64]	; (80052d4 <OS_StatTask+0x254>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	62bb      	str	r3, [r7, #40]	; 0x28
        CPU_CRITICAL_EXIT();
 8005298:	69b8      	ldr	r0, [r7, #24]
 800529a:	f7fb f825 	bl	80002e8 <CPU_SR_Restore>
        while (p_tcb != (OS_TCB *)0) {
 800529e:	e050      	b.n	8005342 <OS_StatTask+0x2c2>
 80052a0:	0800f088 	.word	0x0800f088
 80052a4:	20002131 	.word	0x20002131
 80052a8:	0800f09c 	.word	0x0800f09c
 80052ac:	cccccccd 	.word	0xcccccccd
 80052b0:	20001fa8 	.word	0x20001fa8
 80052b4:	20002418 	.word	0x20002418
 80052b8:	20002404 	.word	0x20002404
 80052bc:	00061a7f 	.word	0x00061a7f
 80052c0:	003d08ff 	.word	0x003d08ff
 80052c4:	026259ff 	.word	0x026259ff
 80052c8:	17d783ff 	.word	0x17d783ff
 80052cc:	2000222c 	.word	0x2000222c
 80052d0:	2000220e 	.word	0x2000220e
 80052d4:	2000221c 	.word	0x2000221c
#if OS_CFG_TASK_PROFILE_EN > 0u                             /* Compute execution time of each task                    */
            usage = (OS_CPU_USAGE)(cycles_mult * p_tcb->CyclesTotalPrev / cycles_max);
 80052d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052e0:	fb02 f203 	mul.w	r2, r2, r3
 80052e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ea:	87fb      	strh	r3, [r7, #62]	; 0x3e
            if (usage > 10000u) {
 80052ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80052ee:	f242 7210 	movw	r2, #10000	; 0x2710
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d902      	bls.n	80052fc <OS_StatTask+0x27c>
                usage = 10000u;
 80052f6:	f242 7310 	movw	r3, #10000	; 0x2710
 80052fa:	87fb      	strh	r3, [r7, #62]	; 0x3e
            }
            p_tcb->CPUUsage = usage;
 80052fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fe:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8005300:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
            if (p_tcb->CPUUsageMax < usage) {               /* Detect peak CPU usage                                  */
 8005304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005306:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800530a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800530c:	429a      	cmp	r2, r3
 800530e:	d903      	bls.n	8005318 <OS_StatTask+0x298>
                p_tcb->CPUUsageMax = usage;
 8005310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005312:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8005314:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
            }
#endif

#if OS_CFG_STAT_TASK_STK_CHK_EN > 0u
            OSTaskStkChk( p_tcb,                            /* Compute stack usage of active tasks only               */
 8005318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531a:	f103 01ac 	add.w	r1, r3, #172	; 0xac
 800531e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005320:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 8005324:	f107 030a 	add.w	r3, r7, #10
 8005328:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800532a:	f7fd fda9 	bl	8002e80 <OSTaskStkChk>
                         &p_tcb->StkFree,
                         &p_tcb->StkUsed,
                         &err);
#endif

            CPU_CRITICAL_ENTER();
 800532e:	f7fa ffd7 	bl	80002e0 <CPU_SR_Save>
 8005332:	61b8      	str	r0, [r7, #24]
            p_tcb = p_tcb->DbgNextPtr;
 8005334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005336:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800533a:	62bb      	str	r3, [r7, #40]	; 0x28
            CPU_CRITICAL_EXIT();
 800533c:	69b8      	ldr	r0, [r7, #24]
 800533e:	f7fa ffd3 	bl	80002e8 <CPU_SR_Restore>
        }
#endif
        CPU_CRITICAL_ENTER();
        p_tcb = OSTaskDbgListPtr;
        CPU_CRITICAL_EXIT();
        while (p_tcb != (OS_TCB *)0) {
 8005342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1c7      	bne.n	80052d8 <OS_StatTask+0x258>
            p_tcb = p_tcb->DbgNextPtr;
            CPU_CRITICAL_EXIT();
        }
#endif

        if (OSStatResetFlag == DEF_TRUE) {                  /* Check if need to reset statistics                      */
 8005348:	4b10      	ldr	r3, [pc, #64]	; (800538c <OS_StatTask+0x30c>)
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d107      	bne.n	8005360 <OS_StatTask+0x2e0>
            OSStatResetFlag  = DEF_FALSE;
 8005350:	4b0e      	ldr	r3, [pc, #56]	; (800538c <OS_StatTask+0x30c>)
 8005352:	2200      	movs	r2, #0
 8005354:	701a      	strb	r2, [r3, #0]
            OSStatReset(&err);
 8005356:	f107 030a 	add.w	r3, r7, #10
 800535a:	4618      	mov	r0, r3
 800535c:	f7ff fd7a 	bl	8004e54 <OSStatReset>
        }

        ts_end = OS_TS_GET() - ts_start;                    /* Measure execution time of statistic task               */
 8005360:	f002 fcbc 	bl	8007cdc <CPU_TS_TmrRd>
 8005364:	4602      	mov	r2, r0
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	60fb      	str	r3, [r7, #12]
        if (OSStatTaskTimeMax < ts_end) {
 800536c:	4b08      	ldr	r3, [pc, #32]	; (8005390 <OS_StatTask+0x310>)
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	429a      	cmp	r2, r3
 8005374:	d202      	bcs.n	800537c <OS_StatTask+0x2fc>
            OSStatTaskTimeMax = ts_end;
 8005376:	4a06      	ldr	r2, [pc, #24]	; (8005390 <OS_StatTask+0x310>)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6013      	str	r3, [r2, #0]
        }

        OSTimeDly(dly,
 800537c:	f107 030a 	add.w	r3, r7, #10
 8005380:	461a      	mov	r2, r3
 8005382:	2100      	movs	r1, #0
 8005384:	69f8      	ldr	r0, [r7, #28]
 8005386:	f000 f8f9 	bl	800557c <OSTimeDly>
                  OS_OPT_TIME_DLY,
                  &err);
    }
 800538a:	e6ab      	b.n	80050e4 <OS_StatTask+0x64>
 800538c:	2000242c 	.word	0x2000242c
 8005390:	20001fa4 	.word	0x20001fa4

08005394 <OS_StatTaskInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_StatTaskInit (OS_ERR  *p_err)
{
 8005394:	b590      	push	{r4, r7, lr}
 8005396:	b08d      	sub	sp, #52	; 0x34
 8005398:	af0a      	add	r7, sp, #40	; 0x28
 800539a:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    OSStatTaskCtr    = (OS_TICK)0;
 800539c:	4b25      	ldr	r3, [pc, #148]	; (8005434 <OS_StatTaskInit+0xa0>)
 800539e:	2200      	movs	r2, #0
 80053a0:	601a      	str	r2, [r3, #0]
    OSStatTaskCtrRun = (OS_TICK)0;
 80053a2:	4b25      	ldr	r3, [pc, #148]	; (8005438 <OS_StatTaskInit+0xa4>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	601a      	str	r2, [r3, #0]
    OSStatTaskCtrMax = (OS_TICK)0;
 80053a8:	4b24      	ldr	r3, [pc, #144]	; (800543c <OS_StatTaskInit+0xa8>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	601a      	str	r2, [r3, #0]
    OSStatTaskRdy    = OS_STATE_NOT_RDY;                    /* Statistic task is not ready                            */
 80053ae:	4b24      	ldr	r3, [pc, #144]	; (8005440 <OS_StatTaskInit+0xac>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	701a      	strb	r2, [r3, #0]
    OSStatResetFlag  = DEF_FALSE;
 80053b4:	4b23      	ldr	r3, [pc, #140]	; (8005444 <OS_StatTaskInit+0xb0>)
 80053b6:	2200      	movs	r2, #0
 80053b8:	701a      	strb	r2, [r3, #0]

                                                            /* ---------------- CREATE THE STAT TASK ---------------- */
    if (OSCfg_StatTaskStkBasePtr == (CPU_STK *)0) {
 80053ba:	4b23      	ldr	r3, [pc, #140]	; (8005448 <OS_StatTaskInit+0xb4>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d104      	bne.n	80053cc <OS_StatTaskInit+0x38>
       *p_err = OS_ERR_STAT_STK_INVALID;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f646 622b 	movw	r2, #28203	; 0x6e2b
 80053c8:	801a      	strh	r2, [r3, #0]
        return;
 80053ca:	e02f      	b.n	800542c <OS_StatTaskInit+0x98>
    }

    if (OSCfg_StatTaskStkSize < OSCfg_StkSizeMin) {
 80053cc:	4b1f      	ldr	r3, [pc, #124]	; (800544c <OS_StatTaskInit+0xb8>)
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	4b1f      	ldr	r3, [pc, #124]	; (8005450 <OS_StatTaskInit+0xbc>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d204      	bcs.n	80053e2 <OS_StatTaskInit+0x4e>
       *p_err = OS_ERR_STAT_STK_SIZE_INVALID;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f646 622c 	movw	r2, #28204	; 0x6e2c
 80053de:	801a      	strh	r2, [r3, #0]
        return;
 80053e0:	e024      	b.n	800542c <OS_StatTaskInit+0x98>
    }

    if (OSCfg_StatTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {
 80053e2:	4b1c      	ldr	r3, [pc, #112]	; (8005454 <OS_StatTaskInit+0xc0>)
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	2b1e      	cmp	r3, #30
 80053e8:	d904      	bls.n	80053f4 <OS_StatTaskInit+0x60>
       *p_err = OS_ERR_STAT_PRIO_INVALID;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f646 622a 	movw	r2, #28202	; 0x6e2a
 80053f0:	801a      	strh	r2, [r3, #0]
        return;
 80053f2:	e01b      	b.n	800542c <OS_StatTaskInit+0x98>
    }

    OSTaskCreate((OS_TCB     *)&OSStatTaskTCB,
 80053f4:	4b17      	ldr	r3, [pc, #92]	; (8005454 <OS_StatTaskInit+0xc0>)
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	4a13      	ldr	r2, [pc, #76]	; (8005448 <OS_StatTaskInit+0xb4>)
 80053fa:	6812      	ldr	r2, [r2, #0]
 80053fc:	4916      	ldr	r1, [pc, #88]	; (8005458 <OS_StatTaskInit+0xc4>)
 80053fe:	6809      	ldr	r1, [r1, #0]
 8005400:	4812      	ldr	r0, [pc, #72]	; (800544c <OS_StatTaskInit+0xb8>)
 8005402:	6800      	ldr	r0, [r0, #0]
 8005404:	687c      	ldr	r4, [r7, #4]
 8005406:	9408      	str	r4, [sp, #32]
 8005408:	2403      	movs	r4, #3
 800540a:	9407      	str	r4, [sp, #28]
 800540c:	2400      	movs	r4, #0
 800540e:	9406      	str	r4, [sp, #24]
 8005410:	2400      	movs	r4, #0
 8005412:	9405      	str	r4, [sp, #20]
 8005414:	2400      	movs	r4, #0
 8005416:	9404      	str	r4, [sp, #16]
 8005418:	9003      	str	r0, [sp, #12]
 800541a:	9102      	str	r1, [sp, #8]
 800541c:	9201      	str	r2, [sp, #4]
 800541e:	9300      	str	r3, [sp, #0]
 8005420:	2300      	movs	r3, #0
 8005422:	4a0e      	ldr	r2, [pc, #56]	; (800545c <OS_StatTaskInit+0xc8>)
 8005424:	490e      	ldr	r1, [pc, #56]	; (8005460 <OS_StatTaskInit+0xcc>)
 8005426:	480f      	ldr	r0, [pc, #60]	; (8005464 <OS_StatTaskInit+0xd0>)
 8005428:	f7fd fae6 	bl	80029f8 <OSTaskCreate>
                 (OS_MSG_QTY  )0,
                 (OS_TICK     )0,
                 (void       *)0,
                 (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
                 (OS_ERR     *)p_err);
}
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	bd90      	pop	{r4, r7, pc}
 8005432:	bf00      	nop
 8005434:	20001fa8 	.word	0x20001fa8
 8005438:	20002418 	.word	0x20002418
 800543c:	20002404 	.word	0x20002404
 8005440:	20002131 	.word	0x20002131
 8005444:	2000242c 	.word	0x2000242c
 8005448:	0800f08c 	.word	0x0800f08c
 800544c:	0800f094 	.word	0x0800f094
 8005450:	0800f098 	.word	0x0800f098
 8005454:	0800f084 	.word	0x0800f084
 8005458:	0800f090 	.word	0x0800f090
 800545c:	08005081 	.word	0x08005081
 8005460:	0800efb0 	.word	0x0800efb0
 8005464:	20002434 	.word	0x20002434

08005468 <OS_PrioInit>:
* Note       : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_PrioInit (void)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
    CPU_DATA  i;


                                                            /* Clear the bitmap table ... no task is ready            */
    for (i = 0u; i < OS_PRIO_TBL_SIZE; i++) {
 800546e:	2300      	movs	r3, #0
 8005470:	607b      	str	r3, [r7, #4]
 8005472:	e007      	b.n	8005484 <OS_PrioInit+0x1c>
         OSPrioTbl[i] = (CPU_DATA)0;
 8005474:	4a07      	ldr	r2, [pc, #28]	; (8005494 <OS_PrioInit+0x2c>)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2100      	movs	r1, #0
 800547a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
{
    CPU_DATA  i;


                                                            /* Clear the bitmap table ... no task is ready            */
    for (i = 0u; i < OS_PRIO_TBL_SIZE; i++) {
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	3301      	adds	r3, #1
 8005482:	607b      	str	r3, [r7, #4]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d0f4      	beq.n	8005474 <OS_PrioInit+0xc>
         OSPrioTbl[i] = (CPU_DATA)0;
    }
}
 800548a:	bf00      	nop
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	bc80      	pop	{r7}
 8005492:	4770      	bx	lr
 8005494:	20001f98 	.word	0x20001f98

08005498 <OS_PrioGetHighest>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

OS_PRIO  OS_PrioGetHighest (void)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
    CPU_DATA  *p_tbl;
    OS_PRIO    prio;


    prio  = (OS_PRIO)0;
 800549e:	2300      	movs	r3, #0
 80054a0:	70fb      	strb	r3, [r7, #3]
    p_tbl = &OSPrioTbl[0];
 80054a2:	4b0e      	ldr	r3, [pc, #56]	; (80054dc <OS_PrioGetHighest+0x44>)
 80054a4:	607b      	str	r3, [r7, #4]
    while (*p_tbl == (CPU_DATA)0) {                         /* Search the bitmap table for the highest priority       */
 80054a6:	e005      	b.n	80054b4 <OS_PrioGetHighest+0x1c>
        prio += DEF_INT_CPU_NBR_BITS;                       /* Compute the step of each CPU_DATA entry                */
 80054a8:	78fb      	ldrb	r3, [r7, #3]
 80054aa:	3320      	adds	r3, #32
 80054ac:	70fb      	strb	r3, [r7, #3]
        p_tbl++;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	3304      	adds	r3, #4
 80054b2:	607b      	str	r3, [r7, #4]
    OS_PRIO    prio;


    prio  = (OS_PRIO)0;
    p_tbl = &OSPrioTbl[0];
    while (*p_tbl == (CPU_DATA)0) {                         /* Search the bitmap table for the highest priority       */
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d0f5      	beq.n	80054a8 <OS_PrioGetHighest+0x10>
        prio += DEF_INT_CPU_NBR_BITS;                       /* Compute the step of each CPU_DATA entry                */
        p_tbl++;
    }
    prio += (OS_PRIO)CPU_CntLeadZeros(*p_tbl);              /* Find the position of the first bit set at the entry    */
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7fa ff18 	bl	80002f6 <CPU_CntLeadZeros>
 80054c6:	4603      	mov	r3, r0
 80054c8:	b2da      	uxtb	r2, r3
 80054ca:	78fb      	ldrb	r3, [r7, #3]
 80054cc:	4413      	add	r3, r2
 80054ce:	70fb      	strb	r3, [r7, #3]
    return (prio);
 80054d0:	78fb      	ldrb	r3, [r7, #3]
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3708      	adds	r7, #8
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	20001f98 	.word	0x20001f98

080054e0 <OS_PrioInsert>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_PrioInsert (OS_PRIO  prio)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b087      	sub	sp, #28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	4603      	mov	r3, r0
 80054e8:	71fb      	strb	r3, [r7, #7]
    CPU_DATA  bit;
    CPU_DATA  bit_nbr;
    OS_PRIO   ix;


    ix             = prio / DEF_INT_CPU_NBR_BITS;
 80054ea:	79fb      	ldrb	r3, [r7, #7]
 80054ec:	095b      	lsrs	r3, r3, #5
 80054ee:	75fb      	strb	r3, [r7, #23]
    bit_nbr        = (CPU_DATA)prio & (DEF_INT_CPU_NBR_BITS - 1u);
 80054f0:	79fb      	ldrb	r3, [r7, #7]
 80054f2:	f003 031f 	and.w	r3, r3, #31
 80054f6:	613b      	str	r3, [r7, #16]
    bit            = 1u;
 80054f8:	2301      	movs	r3, #1
 80054fa:	60fb      	str	r3, [r7, #12]
    bit          <<= (DEF_INT_CPU_NBR_BITS - 1u) - bit_nbr;
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	f1c3 031f 	rsb	r3, r3, #31
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	fa02 f303 	lsl.w	r3, r2, r3
 8005508:	60fb      	str	r3, [r7, #12]
    OSPrioTbl[ix] |= bit;
 800550a:	7dfb      	ldrb	r3, [r7, #23]
 800550c:	7dfa      	ldrb	r2, [r7, #23]
 800550e:	4906      	ldr	r1, [pc, #24]	; (8005528 <OS_PrioInsert+0x48>)
 8005510:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	430a      	orrs	r2, r1
 8005518:	4903      	ldr	r1, [pc, #12]	; (8005528 <OS_PrioInsert+0x48>)
 800551a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800551e:	bf00      	nop
 8005520:	371c      	adds	r7, #28
 8005522:	46bd      	mov	sp, r7
 8005524:	bc80      	pop	{r7}
 8005526:	4770      	bx	lr
 8005528:	20001f98 	.word	0x20001f98

0800552c <OS_PrioRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_PrioRemove (OS_PRIO  prio)
{
 800552c:	b480      	push	{r7}
 800552e:	b087      	sub	sp, #28
 8005530:	af00      	add	r7, sp, #0
 8005532:	4603      	mov	r3, r0
 8005534:	71fb      	strb	r3, [r7, #7]
    CPU_DATA  bit;
    CPU_DATA  bit_nbr;
    OS_PRIO   ix;


    ix             = prio / DEF_INT_CPU_NBR_BITS;
 8005536:	79fb      	ldrb	r3, [r7, #7]
 8005538:	095b      	lsrs	r3, r3, #5
 800553a:	75fb      	strb	r3, [r7, #23]
    bit_nbr        = (CPU_DATA)prio & (DEF_INT_CPU_NBR_BITS - 1u);
 800553c:	79fb      	ldrb	r3, [r7, #7]
 800553e:	f003 031f 	and.w	r3, r3, #31
 8005542:	613b      	str	r3, [r7, #16]
    bit            = 1u;
 8005544:	2301      	movs	r3, #1
 8005546:	60fb      	str	r3, [r7, #12]
    bit          <<= (DEF_INT_CPU_NBR_BITS - 1u) - bit_nbr;
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	f1c3 031f 	rsb	r3, r3, #31
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	fa02 f303 	lsl.w	r3, r2, r3
 8005554:	60fb      	str	r3, [r7, #12]
    OSPrioTbl[ix] &= ~bit;
 8005556:	7dfb      	ldrb	r3, [r7, #23]
 8005558:	7dfa      	ldrb	r2, [r7, #23]
 800555a:	4907      	ldr	r1, [pc, #28]	; (8005578 <OS_PrioRemove+0x4c>)
 800555c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	43d2      	mvns	r2, r2
 8005564:	400a      	ands	r2, r1
 8005566:	4904      	ldr	r1, [pc, #16]	; (8005578 <OS_PrioRemove+0x4c>)
 8005568:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800556c:	bf00      	nop
 800556e:	371c      	adds	r7, #28
 8005570:	46bd      	mov	sp, r7
 8005572:	bc80      	pop	{r7}
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	20001f98 	.word	0x20001f98

0800557c <OSTimeDly>:
*/

void  OSTimeDly (OS_TICK   dly,
                 OS_OPT    opt,
                 OS_ERR   *p_err)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	460b      	mov	r3, r1
 8005586:	607a      	str	r2, [r7, #4]
 8005588:	817b      	strh	r3, [r7, #10]
    CPU_SR_ALLOC();
 800558a:	2300      	movs	r3, #0
 800558c:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0u) {             /* Not allowed to call from an ISR                        */
 800558e:	4b2e      	ldr	r3, [pc, #184]	; (8005648 <OSTimeDly+0xcc>)
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d004      	beq.n	80055a0 <OSTimeDly+0x24>
       *p_err = OS_ERR_TIME_DLY_ISR;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f247 2275 	movw	r2, #29301	; 0x7275
 800559c:	801a      	strh	r2, [r3, #0]
        return;
 800559e:	e050      	b.n	8005642 <OSTimeDly+0xc6>
    }
#endif

    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0u) {       /* Can't delay when the scheduler is locked               */
 80055a0:	4b2a      	ldr	r3, [pc, #168]	; (800564c <OSTimeDly+0xd0>)
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d004      	beq.n	80055b2 <OSTimeDly+0x36>
       *p_err = OS_ERR_SCHED_LOCKED;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f646 5263 	movw	r2, #28003	; 0x6d63
 80055ae:	801a      	strh	r2, [r3, #0]
        return;
 80055b0:	e047      	b.n	8005642 <OSTimeDly+0xc6>
    }

    switch (opt) {
 80055b2:	897b      	ldrh	r3, [r7, #10]
 80055b4:	2b08      	cmp	r3, #8
 80055b6:	d81d      	bhi.n	80055f4 <OSTimeDly+0x78>
 80055b8:	a201      	add	r2, pc, #4	; (adr r2, 80055c0 <OSTimeDly+0x44>)
 80055ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055be:	bf00      	nop
 80055c0:	080055e5 	.word	0x080055e5
 80055c4:	080055f5 	.word	0x080055f5
 80055c8:	080055e5 	.word	0x080055e5
 80055cc:	080055f5 	.word	0x080055f5
 80055d0:	080055ff 	.word	0x080055ff
 80055d4:	080055f5 	.word	0x080055f5
 80055d8:	080055f5 	.word	0x080055f5
 80055dc:	080055f5 	.word	0x080055f5
 80055e0:	080055e5 	.word	0x080055e5
        case OS_OPT_TIME_DLY:
        case OS_OPT_TIME_TIMEOUT:
        case OS_OPT_TIME_PERIODIC:
             if (dly == (OS_TICK)0u) {                      /* 0 means no delay!                                      */
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10b      	bne.n	8005602 <OSTimeDly+0x86>
                *p_err = OS_ERR_TIME_ZERO_DLY;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f247 227e 	movw	r2, #29310	; 0x727e
 80055f0:	801a      	strh	r2, [r3, #0]
                 return;
 80055f2:	e026      	b.n	8005642 <OSTimeDly+0xc6>

        case OS_OPT_TIME_MATCH:
             break;

        default:
            *p_err = OS_ERR_OPT_INVALID;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f645 6225 	movw	r2, #24101	; 0x5e25
 80055fa:	801a      	strh	r2, [r3, #0]
             return;
 80055fc:	e021      	b.n	8005642 <OSTimeDly+0xc6>
                 return;
             }
             break;

        case OS_OPT_TIME_MATCH:
             break;
 80055fe:	bf00      	nop
 8005600:	e000      	b.n	8005604 <OSTimeDly+0x88>
        case OS_OPT_TIME_PERIODIC:
             if (dly == (OS_TICK)0u) {                      /* 0 means no delay!                                      */
                *p_err = OS_ERR_TIME_ZERO_DLY;
                 return;
             }
             break;
 8005602:	bf00      	nop
        default:
            *p_err = OS_ERR_OPT_INVALID;
             return;
    }

    OS_CRITICAL_ENTER();
 8005604:	f7fa fe6c 	bl	80002e0 <CPU_SR_Save>
 8005608:	6178      	str	r0, [r7, #20]
    OS_TickListInsertDly(OSTCBCurPtr,
 800560a:	4b11      	ldr	r3, [pc, #68]	; (8005650 <OSTimeDly+0xd4>)
 800560c:	6818      	ldr	r0, [r3, #0]
 800560e:	897a      	ldrh	r2, [r7, #10]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	68f9      	ldr	r1, [r7, #12]
 8005614:	f7ff fa06 	bl	8004a24 <OS_TickListInsertDly>
                         dly,
                         opt,
                         p_err);
    if (*p_err != OS_ERR_NONE) {
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	881b      	ldrh	r3, [r3, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d003      	beq.n	8005628 <OSTimeDly+0xac>
         OS_CRITICAL_EXIT_NO_SCHED();
 8005620:	6978      	ldr	r0, [r7, #20]
 8005622:	f7fa fe61 	bl	80002e8 <CPU_SR_Restore>
         return;
 8005626:	e00c      	b.n	8005642 <OSTimeDly+0xc6>
    }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_TASK_DLY(dly);                                 /* Record the event.                                      */
#endif
    OS_RdyListRemove(OSTCBCurPtr);                          /* Remove current task from ready list                    */
 8005628:	4b09      	ldr	r3, [pc, #36]	; (8005650 <OSTimeDly+0xd4>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4618      	mov	r0, r3
 800562e:	f7ff f811 	bl	8004654 <OS_RdyListRemove>
    OS_CRITICAL_EXIT_NO_SCHED();
 8005632:	6978      	ldr	r0, [r7, #20]
 8005634:	f7fa fe58 	bl	80002e8 <CPU_SR_Restore>
    OSSched();                                              /* Find next task to run!                                 */
 8005638:	f7fe fb16 	bl	8003c68 <OSSched>
   *p_err = OS_ERR_NONE;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	801a      	strh	r2, [r3, #0]
}
 8005642:	3718      	adds	r7, #24
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	20002234 	.word	0x20002234
 800564c:	20001f9c 	.word	0x20001f9c
 8005650:	20002208 	.word	0x20002208

08005654 <OSTimeDlyHMSM>:
                     CPU_INT16U   minutes,
                     CPU_INT16U   seconds,
                     CPU_INT32U   milli,
                     OS_OPT       opt,
                     OS_ERR      *p_err)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b088      	sub	sp, #32
 8005658:	af00      	add	r7, sp, #0
 800565a:	607b      	str	r3, [r7, #4]
 800565c:	4603      	mov	r3, r0
 800565e:	81fb      	strh	r3, [r7, #14]
 8005660:	460b      	mov	r3, r1
 8005662:	81bb      	strh	r3, [r7, #12]
 8005664:	4613      	mov	r3, r2
 8005666:	817b      	strh	r3, [r7, #10]
    CPU_BOOLEAN  opt_non_strict;
#endif
    OS_OPT       opt_time;
    OS_RATE_HZ   tick_rate;
    OS_TICK      ticks;
    CPU_SR_ALLOC();
 8005668:	2300      	movs	r3, #0
 800566a:	61fb      	str	r3, [r7, #28]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0u) {             /* Not allowed to call from an ISR                        */
 800566c:	4b72      	ldr	r3, [pc, #456]	; (8005838 <OSTimeDlyHMSM+0x1e4>)
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d004      	beq.n	800567e <OSTimeDlyHMSM+0x2a>
       *p_err = OS_ERR_TIME_DLY_ISR;
 8005674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005676:	f247 2275 	movw	r2, #29301	; 0x7275
 800567a:	801a      	strh	r2, [r3, #0]
        return;
 800567c:	e0d8      	b.n	8005830 <OSTimeDlyHMSM+0x1dc>
    }
#endif

    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0u) {       /* Can't delay when the scheduler is locked               */
 800567e:	4b6f      	ldr	r3, [pc, #444]	; (800583c <OSTimeDlyHMSM+0x1e8>)
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d004      	beq.n	8005690 <OSTimeDlyHMSM+0x3c>
       *p_err = OS_ERR_SCHED_LOCKED;
 8005686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005688:	f646 5263 	movw	r2, #28003	; 0x6d63
 800568c:	801a      	strh	r2, [r3, #0]
        return;
 800568e:	e0cf      	b.n	8005830 <OSTimeDlyHMSM+0x1dc>
    }

    opt_time = opt & OS_OPT_TIME_MASK;                      /* Retrieve time options only.                            */
 8005690:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005692:	f003 030e 	and.w	r3, r3, #14
 8005696:	837b      	strh	r3, [r7, #26]
    switch (opt_time) {
 8005698:	8b7b      	ldrh	r3, [r7, #26]
 800569a:	2b08      	cmp	r3, #8
 800569c:	d825      	bhi.n	80056ea <OSTimeDlyHMSM+0x96>
 800569e:	a201      	add	r2, pc, #4	; (adr r2, 80056a4 <OSTimeDlyHMSM+0x50>)
 80056a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a4:	080056c9 	.word	0x080056c9
 80056a8:	080056eb 	.word	0x080056eb
 80056ac:	080056c9 	.word	0x080056c9
 80056b0:	080056eb 	.word	0x080056eb
 80056b4:	080056f5 	.word	0x080056f5
 80056b8:	080056eb 	.word	0x080056eb
 80056bc:	080056eb 	.word	0x080056eb
 80056c0:	080056eb 	.word	0x080056eb
 80056c4:	080056c9 	.word	0x080056c9
        case OS_OPT_TIME_DLY:
        case OS_OPT_TIME_TIMEOUT:
        case OS_OPT_TIME_PERIODIC:
             if (milli == (CPU_INT32U)0u) {                 /* Make sure we didn't specify a 0 delay                  */
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d114      	bne.n	80056f8 <OSTimeDlyHMSM+0xa4>
                 if (seconds == (CPU_INT16U)0u) {
 80056ce:	897b      	ldrh	r3, [r7, #10]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d111      	bne.n	80056f8 <OSTimeDlyHMSM+0xa4>
                     if (minutes == (CPU_INT16U)0u) {
 80056d4:	89bb      	ldrh	r3, [r7, #12]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d10e      	bne.n	80056f8 <OSTimeDlyHMSM+0xa4>
                         if (hours == (CPU_INT16U)0u) {
 80056da:	89fb      	ldrh	r3, [r7, #14]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d10b      	bne.n	80056f8 <OSTimeDlyHMSM+0xa4>
                            *p_err = OS_ERR_TIME_ZERO_DLY;
 80056e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e2:	f247 227e 	movw	r2, #29310	; 0x727e
 80056e6:	801a      	strh	r2, [r3, #0]
                             return;
 80056e8:	e0a2      	b.n	8005830 <OSTimeDlyHMSM+0x1dc>

        case OS_OPT_TIME_MATCH:
             break;

        default:
            *p_err = OS_ERR_OPT_INVALID;
 80056ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ec:	f645 6225 	movw	r2, #24101	; 0x5e25
 80056f0:	801a      	strh	r2, [r3, #0]
             return;
 80056f2:	e09d      	b.n	8005830 <OSTimeDlyHMSM+0x1dc>
                 }
             }
             break;

        case OS_OPT_TIME_MATCH:
             break;
 80056f4:	bf00      	nop
 80056f6:	e000      	b.n	80056fa <OSTimeDlyHMSM+0xa6>
                             return;
                         }
                     }
                 }
             }
             break;
 80056f8:	bf00      	nop
            *p_err = OS_ERR_OPT_INVALID;
             return;
    }

#if OS_CFG_ARG_CHK_EN > 0u                                  /* Validate arguments to be within range                  */
    opt_invalid = DEF_BIT_IS_SET_ANY(opt, ~OS_OPT_TIME_OPTS_MASK);
 80056fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80056fc:	f023 031e 	bic.w	r3, r3, #30
 8005700:	2b00      	cmp	r3, #0
 8005702:	bf14      	ite	ne
 8005704:	2301      	movne	r3, #1
 8005706:	2300      	moveq	r3, #0
 8005708:	b2db      	uxtb	r3, r3
 800570a:	767b      	strb	r3, [r7, #25]
    if (opt_invalid == DEF_YES) {
 800570c:	7e7b      	ldrb	r3, [r7, #25]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d104      	bne.n	800571c <OSTimeDlyHMSM+0xc8>
       *p_err = OS_ERR_OPT_INVALID;
 8005712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005714:	f645 6225 	movw	r2, #24101	; 0x5e25
 8005718:	801a      	strh	r2, [r3, #0]
        return;
 800571a:	e089      	b.n	8005830 <OSTimeDlyHMSM+0x1dc>
    }

    opt_non_strict = DEF_BIT_IS_SET(opt, OS_OPT_TIME_HMSM_NON_STRICT);
 800571c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800571e:	f003 0310 	and.w	r3, r3, #16
 8005722:	2b00      	cmp	r3, #0
 8005724:	d001      	beq.n	800572a <OSTimeDlyHMSM+0xd6>
 8005726:	2301      	movs	r3, #1
 8005728:	e000      	b.n	800572c <OSTimeDlyHMSM+0xd8>
 800572a:	2300      	movs	r3, #0
 800572c:	763b      	strb	r3, [r7, #24]
    if (opt_non_strict != DEF_YES) {
 800572e:	7e3b      	ldrb	r3, [r7, #24]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d020      	beq.n	8005776 <OSTimeDlyHMSM+0x122>
         if (milli   > (CPU_INT32U)999u) {
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800573a:	d304      	bcc.n	8005746 <OSTimeDlyHMSM+0xf2>
            *p_err = OS_ERR_TIME_INVALID_MILLISECONDS;
 800573c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800573e:	f247 227b 	movw	r2, #29307	; 0x727b
 8005742:	801a      	strh	r2, [r3, #0]
             return;
 8005744:	e074      	b.n	8005830 <OSTimeDlyHMSM+0x1dc>
         }
         if (seconds > (CPU_INT16U)59u) {
 8005746:	897b      	ldrh	r3, [r7, #10]
 8005748:	2b3b      	cmp	r3, #59	; 0x3b
 800574a:	d904      	bls.n	8005756 <OSTimeDlyHMSM+0x102>
            *p_err = OS_ERR_TIME_INVALID_SECONDS;
 800574c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574e:	f247 227a 	movw	r2, #29306	; 0x727a
 8005752:	801a      	strh	r2, [r3, #0]
             return;
 8005754:	e06c      	b.n	8005830 <OSTimeDlyHMSM+0x1dc>
         }
         if (minutes > (CPU_INT16U)59u) {
 8005756:	89bb      	ldrh	r3, [r7, #12]
 8005758:	2b3b      	cmp	r3, #59	; 0x3b
 800575a:	d904      	bls.n	8005766 <OSTimeDlyHMSM+0x112>
            *p_err = OS_ERR_TIME_INVALID_MINUTES;
 800575c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800575e:	f247 2279 	movw	r2, #29305	; 0x7279
 8005762:	801a      	strh	r2, [r3, #0]
             return;
 8005764:	e064      	b.n	8005830 <OSTimeDlyHMSM+0x1dc>
         }
         if (hours   > (CPU_INT16U)99u) {
 8005766:	89fb      	ldrh	r3, [r7, #14]
 8005768:	2b63      	cmp	r3, #99	; 0x63
 800576a:	d917      	bls.n	800579c <OSTimeDlyHMSM+0x148>
            *p_err = OS_ERR_TIME_INVALID_HOURS;
 800576c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800576e:	f247 2278 	movw	r2, #29304	; 0x7278
 8005772:	801a      	strh	r2, [r3, #0]
             return;
 8005774:	e05c      	b.n	8005830 <OSTimeDlyHMSM+0x1dc>
         }
    } else {
         if (minutes > (CPU_INT16U)9999u) {
 8005776:	89bb      	ldrh	r3, [r7, #12]
 8005778:	f242 720f 	movw	r2, #9999	; 0x270f
 800577c:	4293      	cmp	r3, r2
 800577e:	d904      	bls.n	800578a <OSTimeDlyHMSM+0x136>
            *p_err = OS_ERR_TIME_INVALID_MINUTES;
 8005780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005782:	f247 2279 	movw	r2, #29305	; 0x7279
 8005786:	801a      	strh	r2, [r3, #0]
             return;
 8005788:	e052      	b.n	8005830 <OSTimeDlyHMSM+0x1dc>
         }
         if (hours   > (CPU_INT16U)999u) {
 800578a:	89fb      	ldrh	r3, [r7, #14]
 800578c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005790:	d304      	bcc.n	800579c <OSTimeDlyHMSM+0x148>
            *p_err = OS_ERR_TIME_INVALID_HOURS;
 8005792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005794:	f247 2278 	movw	r2, #29304	; 0x7278
 8005798:	801a      	strh	r2, [r3, #0]
             return;
 800579a:	e049      	b.n	8005830 <OSTimeDlyHMSM+0x1dc>
    }
#endif

                                                            /* Compute the total number of clock ticks required..     */
                                                            /* .. (rounded to the nearest tick)                       */
    tick_rate = OSCfg_TickRate_Hz;
 800579c:	4b28      	ldr	r3, [pc, #160]	; (8005840 <OSTimeDlyHMSM+0x1ec>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	617b      	str	r3, [r7, #20]
    ticks     = ((OS_TICK)hours * (OS_TICK)3600u + (OS_TICK)minutes * (OS_TICK)60u + (OS_TICK)seconds) * tick_rate
 80057a2:	89fb      	ldrh	r3, [r7, #14]
 80057a4:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80057a8:	fb02 f103 	mul.w	r1, r2, r3
 80057ac:	89ba      	ldrh	r2, [r7, #12]
 80057ae:	4613      	mov	r3, r2
 80057b0:	011b      	lsls	r3, r3, #4
 80057b2:	1a9b      	subs	r3, r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	18ca      	adds	r2, r1, r3
 80057b8:	897b      	ldrh	r3, [r7, #10]
 80057ba:	4413      	add	r3, r2
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	fb02 f203 	mul.w	r2, r2, r3
              + (tick_rate * ((OS_TICK)milli + (OS_TICK)500u / tick_rate)) / (OS_TICK)1000u;
 80057c2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	fbb1 f1f3 	udiv	r1, r1, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	440b      	add	r3, r1
 80057d0:	6979      	ldr	r1, [r7, #20]
 80057d2:	fb01 f303 	mul.w	r3, r1, r3
 80057d6:	491b      	ldr	r1, [pc, #108]	; (8005844 <OSTimeDlyHMSM+0x1f0>)
 80057d8:	fba1 1303 	umull	r1, r3, r1, r3
 80057dc:	099b      	lsrs	r3, r3, #6
#endif

                                                            /* Compute the total number of clock ticks required..     */
                                                            /* .. (rounded to the nearest tick)                       */
    tick_rate = OSCfg_TickRate_Hz;
    ticks     = ((OS_TICK)hours * (OS_TICK)3600u + (OS_TICK)minutes * (OS_TICK)60u + (OS_TICK)seconds) * tick_rate
 80057de:	4413      	add	r3, r2
 80057e0:	613b      	str	r3, [r7, #16]
              + (tick_rate * ((OS_TICK)milli + (OS_TICK)500u / tick_rate)) / (OS_TICK)1000u;

    if (ticks > (OS_TICK)0u) {
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d01f      	beq.n	8005828 <OSTimeDlyHMSM+0x1d4>
        OS_CRITICAL_ENTER();
 80057e8:	f7fa fd7a 	bl	80002e0 <CPU_SR_Save>
 80057ec:	61f8      	str	r0, [r7, #28]
        OS_TickListInsertDly(OSTCBCurPtr,
 80057ee:	4b16      	ldr	r3, [pc, #88]	; (8005848 <OSTimeDlyHMSM+0x1f4>)
 80057f0:	6818      	ldr	r0, [r3, #0]
 80057f2:	8b7a      	ldrh	r2, [r7, #26]
 80057f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f6:	6939      	ldr	r1, [r7, #16]
 80057f8:	f7ff f914 	bl	8004a24 <OS_TickListInsertDly>
                             ticks,
                             opt_time,
                             p_err);
        if (*p_err != OS_ERR_NONE) {
 80057fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057fe:	881b      	ldrh	r3, [r3, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d003      	beq.n	800580c <OSTimeDlyHMSM+0x1b8>
             OS_CRITICAL_EXIT_NO_SCHED();
 8005804:	69f8      	ldr	r0, [r7, #28]
 8005806:	f7fa fd6f 	bl	80002e8 <CPU_SR_Restore>
             return;
 800580a:	e011      	b.n	8005830 <OSTimeDlyHMSM+0x1dc>
        }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_DLY(ticks);                           /* Record the event.                                      */
#endif
        OS_RdyListRemove(OSTCBCurPtr);                      /* Remove current task from ready list                    */
 800580c:	4b0e      	ldr	r3, [pc, #56]	; (8005848 <OSTimeDlyHMSM+0x1f4>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4618      	mov	r0, r3
 8005812:	f7fe ff1f 	bl	8004654 <OS_RdyListRemove>
        OS_CRITICAL_EXIT_NO_SCHED();
 8005816:	69f8      	ldr	r0, [r7, #28]
 8005818:	f7fa fd66 	bl	80002e8 <CPU_SR_Restore>
        OSSched();                                          /* Find next task to run!                                 */
 800581c:	f7fe fa24 	bl	8003c68 <OSSched>
       *p_err = OS_ERR_NONE;
 8005820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005822:	2200      	movs	r2, #0
 8005824:	801a      	strh	r2, [r3, #0]
 8005826:	e003      	b.n	8005830 <OSTimeDlyHMSM+0x1dc>
    } else {
       *p_err = OS_ERR_TIME_ZERO_DLY;
 8005828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582a:	f247 227e 	movw	r2, #29310	; 0x727e
 800582e:	801a      	strh	r2, [r3, #0]
    }
}
 8005830:	3720      	adds	r7, #32
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	20002234 	.word	0x20002234
 800583c:	20001f9c 	.word	0x20001f9c
 8005840:	0800f09c 	.word	0x0800f09c
 8005844:	10624dd3 	.word	0x10624dd3
 8005848:	20002208 	.word	0x20002208

0800584c <OSTimeTick>:
* Returns    : none
************************************************************************************************************************
*/

void  OSTimeTick (void)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
#if OS_CFG_ISR_POST_DEFERRED_EN > 0u
    CPU_TS  ts;
#endif


    OSTimeTickHook();                                       /* Call user definable hook                               */
 8005852:	f000 fff7 	bl	8006844 <OSTimeTickHook>
                (CPU_TS     ) ts,
                (OS_ERR    *)&err);

#else

   (void)OSTaskSemPost((OS_TCB *)&OSTickTaskTCB,            /* Signal tick task                                       */
 8005856:	1dbb      	adds	r3, r7, #6
 8005858:	461a      	mov	r2, r3
 800585a:	2100      	movs	r1, #0
 800585c:	480c      	ldr	r0, [pc, #48]	; (8005890 <OSTimeTick+0x44>)
 800585e:	f7fd faeb 	bl	8002e38 <OSTaskSemPost>
#if OS_CFG_SCHED_ROUND_ROBIN_EN > 0u
    OS_SchedRoundRobin(&OSRdyList[OSPrioCur]);
#endif

#if OS_CFG_TMR_EN > 0u
    OSTmrUpdateCtr--;
 8005862:	4b0c      	ldr	r3, [pc, #48]	; (8005894 <OSTimeTick+0x48>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	3b01      	subs	r3, #1
 8005868:	4a0a      	ldr	r2, [pc, #40]	; (8005894 <OSTimeTick+0x48>)
 800586a:	6013      	str	r3, [r2, #0]
    if (OSTmrUpdateCtr == (OS_CTR)0u) {
 800586c:	4b09      	ldr	r3, [pc, #36]	; (8005894 <OSTimeTick+0x48>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d109      	bne.n	8005888 <OSTimeTick+0x3c>
        OSTmrUpdateCtr = OSTmrUpdateCnt;
 8005874:	4b08      	ldr	r3, [pc, #32]	; (8005898 <OSTimeTick+0x4c>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a06      	ldr	r2, [pc, #24]	; (8005894 <OSTimeTick+0x48>)
 800587a:	6013      	str	r3, [r2, #0]
        OSTaskSemPost((OS_TCB *)&OSTmrTaskTCB,              /* Signal timer task                                      */
 800587c:	1dbb      	adds	r3, r7, #6
 800587e:	461a      	mov	r2, r3
 8005880:	2100      	movs	r1, #0
 8005882:	4806      	ldr	r0, [pc, #24]	; (800589c <OSTimeTick+0x50>)
 8005884:	f7fd fad8 	bl	8002e38 <OSTaskSemPost>
                      (OS_ERR *)&err);
    }
#endif

#endif
}
 8005888:	bf00      	nop
 800588a:	3708      	adds	r7, #8
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	20002140 	.word	0x20002140
 8005894:	20002514 	.word	0x20002514
 8005898:	20002504 	.word	0x20002504
 800589c:	20002238 	.word	0x20002238

080058a0 <OSCfg_Init>:
*                  DOES NOT optimize out the 'const' variables above.
************************************************************************************************************************
*/

void  OSCfg_Init (void)
{
 80058a0:	b480      	push	{r7}
 80058a2:	af00      	add	r7, sp, #0
    (void)&OSCfg_TmrTaskStkBasePtr;
    (void)&OSCfg_TmrTaskStkLimit;
    (void)&OSCfg_TmrTaskStkSize;
    (void)&OSCfg_TmrTaskStkSizeRAM;
#endif
}
 80058a4:	bf00      	nop
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bc80      	pop	{r7}
 80058aa:	4770      	bx	lr

080058ac <OS_SemInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_SemInit (OS_ERR  *p_err)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSSemDbgListPtr = (OS_SEM *)0;
 80058b4:	4b06      	ldr	r3, [pc, #24]	; (80058d0 <OS_SemInit+0x24>)
 80058b6:	2200      	movs	r2, #0
 80058b8:	601a      	str	r2, [r3, #0]
#endif

    OSSemQty        = (OS_OBJ_QTY)0;
 80058ba:	4b06      	ldr	r3, [pc, #24]	; (80058d4 <OS_SemInit+0x28>)
 80058bc:	2200      	movs	r2, #0
 80058be:	801a      	strh	r2, [r3, #0]
   *p_err           = OS_ERR_NONE;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	801a      	strh	r2, [r3, #0]
}
 80058c6:	bf00      	nop
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bc80      	pop	{r7}
 80058ce:	4770      	bx	lr
 80058d0:	20002134 	.word	0x20002134
 80058d4:	200023c8 	.word	0x200023c8

080058d8 <OSMutexCreate>:
*/

void  OSMutexCreate (OS_MUTEX  *p_mutex,
                     CPU_CHAR  *p_name,
                     OS_ERR    *p_err)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b086      	sub	sp, #24
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
    CPU_SR_ALLOC();
 80058e4:	2300      	movs	r3, #0
 80058e6:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to be called from an ISR                   */
 80058e8:	4b1e      	ldr	r3, [pc, #120]	; (8005964 <OSMutexCreate+0x8c>)
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d004      	beq.n	80058fa <OSMutexCreate+0x22>
       *p_err = OS_ERR_CREATE_ISR;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f642 62e1 	movw	r2, #12001	; 0x2ee1
 80058f6:	801a      	strh	r2, [r3, #0]
        return;
 80058f8:	e031      	b.n	800595e <OSMutexCreate+0x86>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_mutex == (OS_MUTEX *)0) {                         /* Validate 'p_mutex'                                     */
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d104      	bne.n	800590a <OSMutexCreate+0x32>
       *p_err = OS_ERR_OBJ_PTR_NULL;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f645 52c3 	movw	r2, #24003	; 0x5dc3
 8005906:	801a      	strh	r2, [r3, #0]
        return;
 8005908:	e029      	b.n	800595e <OSMutexCreate+0x86>
    }
#endif

    OS_CRITICAL_ENTER();
 800590a:	f7fa fce9 	bl	80002e0 <CPU_SR_Save>
 800590e:	6178      	str	r0, [r7, #20]
#if OS_OBJ_TYPE_REQ > 0u
    p_mutex->Type              =  OS_OBJ_TYPE_MUTEX;        /* Mark the data structure as a mutex                     */
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	4a15      	ldr	r2, [pc, #84]	; (8005968 <OSMutexCreate+0x90>)
 8005914:	601a      	str	r2, [r3, #0]
#endif
#if OS_CFG_DBG_EN > 0u
    p_mutex->NamePtr           =  p_name;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	605a      	str	r2, [r3, #4]
#else
    (void)&p_name;
#endif
    p_mutex->MutexGrpNextPtr   = (OS_MUTEX     *)0;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	621a      	str	r2, [r3, #32]
    p_mutex->OwnerTCBPtr       = (OS_TCB       *)0;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	625a      	str	r2, [r3, #36]	; 0x24
    p_mutex->OwnerNestingCtr   = (OS_NESTING_CTR)0;         /* Mutex is available                                     */
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    p_mutex->TS                = (CPU_TS        )0;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	62da      	str	r2, [r3, #44]	; 0x2c
    OS_PendListInit(&p_mutex->PendList);                    /* Initialize the waiting list                            */
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	3308      	adds	r3, #8
 800593a:	4618      	mov	r0, r3
 800593c:	f7fe fc06 	bl	800414c <OS_PendListInit>

#if OS_CFG_DBG_EN > 0u
    OS_MutexDbgListAdd(p_mutex);
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	f000 f9f9 	bl	8005d38 <OS_MutexDbgListAdd>
#endif

    OSMutexQty++;
 8005946:	4b09      	ldr	r3, [pc, #36]	; (800596c <OSMutexCreate+0x94>)
 8005948:	881b      	ldrh	r3, [r3, #0]
 800594a:	3301      	adds	r3, #1
 800594c:	b29a      	uxth	r2, r3
 800594e:	4b07      	ldr	r3, [pc, #28]	; (800596c <OSMutexCreate+0x94>)
 8005950:	801a      	strh	r2, [r3, #0]

#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_MUTEX_CREATE(p_mutex, p_name);                 /* Record the event.                                      */
#endif

    OS_CRITICAL_EXIT_NO_SCHED();
 8005952:	6978      	ldr	r0, [r7, #20]
 8005954:	f7fa fcc8 	bl	80002e8 <CPU_SR_Restore>
   *p_err = OS_ERR_NONE;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	801a      	strh	r2, [r3, #0]
}
 800595e:	3718      	adds	r7, #24
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	20002234 	.word	0x20002234
 8005968:	5854554d 	.word	0x5854554d
 800596c:	20002430 	.word	0x20002430

08005970 <OSMutexPend>:
void  OSMutexPend (OS_MUTEX  *p_mutex,
                   OS_TICK    timeout,
                   OS_OPT     opt,
                   CPU_TS    *p_ts,
                   OS_ERR    *p_err)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b08e      	sub	sp, #56	; 0x38
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	603b      	str	r3, [r7, #0]
 800597c:	4613      	mov	r3, r2
 800597e:	80fb      	strh	r3, [r7, #6]
    OS_PEND_DATA  pend_data;
    OS_TCB       *p_tcb;
    CPU_SR_ALLOC();
 8005980:	2300      	movs	r3, #0
 8005982:	637b      	str	r3, [r7, #52]	; 0x34
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 8005984:	4b7a      	ldr	r3, [pc, #488]	; (8005b70 <OSMutexPend+0x200>)
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d004      	beq.n	8005996 <OSMutexPend+0x26>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_PEND_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_PEND_ISR;
 800598c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800598e:	f246 12ae 	movw	r2, #25006	; 0x61ae
 8005992:	801a      	strh	r2, [r3, #0]
        return;
 8005994:	e0e9      	b.n	8005b6a <OSMutexPend+0x1fa>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_mutex == (OS_MUTEX *)0) {                         /* Validate arguments                                     */
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d104      	bne.n	80059a6 <OSMutexPend+0x36>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_PEND_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_PTR_NULL;
 800599c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800599e:	f645 52c3 	movw	r2, #24003	; 0x5dc3
 80059a2:	801a      	strh	r2, [r3, #0]
        return;
 80059a4:	e0e1      	b.n	8005b6a <OSMutexPend+0x1fa>
    }
    switch (opt) {                                          /* Validate 'opt'                                         */
 80059a6:	88fb      	ldrh	r3, [r7, #6]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d007      	beq.n	80059bc <OSMutexPend+0x4c>
 80059ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059b0:	d004      	beq.n	80059bc <OSMutexPend+0x4c>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_MUTEX_PEND_FAILED(p_mutex);           /* Record the event.                                      */
#endif
            *p_err = OS_ERR_OPT_INVALID;
 80059b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059b4:	f645 6225 	movw	r2, #24101	; 0x5e25
 80059b8:	801a      	strh	r2, [r3, #0]
             return;
 80059ba:	e0d6      	b.n	8005b6a <OSMutexPend+0x1fa>
        return;
    }
    switch (opt) {                                          /* Validate 'opt'                                         */
        case OS_OPT_PEND_BLOCKING:
        case OS_OPT_PEND_NON_BLOCKING:
             break;
 80059bc:	bf00      	nop
             return;
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_mutex->Type != OS_OBJ_TYPE_MUTEX) {               /* Make sure mutex was created                            */
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a6c      	ldr	r2, [pc, #432]	; (8005b74 <OSMutexPend+0x204>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d004      	beq.n	80059d2 <OSMutexPend+0x62>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_PEND_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_TYPE;
 80059c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059ca:	f645 52c4 	movw	r2, #24004	; 0x5dc4
 80059ce:	801a      	strh	r2, [r3, #0]
        return;
 80059d0:	e0cb      	b.n	8005b6a <OSMutexPend+0x1fa>
    }
#endif

    if (p_ts != (CPU_TS *)0) {
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d002      	beq.n	80059de <OSMutexPend+0x6e>
       *p_ts  = (CPU_TS  )0;                                /* Initialize the returned timestamp                      */
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	2200      	movs	r2, #0
 80059dc:	601a      	str	r2, [r3, #0]
    }

    CPU_CRITICAL_ENTER();
 80059de:	f7fa fc7f 	bl	80002e0 <CPU_SR_Save>
 80059e2:	6378      	str	r0, [r7, #52]	; 0x34
    if (p_mutex->OwnerNestingCtr == (OS_NESTING_CTR)0) {    /* Resource available?                                    */
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d11b      	bne.n	8005a26 <OSMutexPend+0xb6>
        p_mutex->OwnerTCBPtr       =  OSTCBCurPtr;          /* Yes, caller may proceed                                */
 80059ee:	4b62      	ldr	r3, [pc, #392]	; (8005b78 <OSMutexPend+0x208>)
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	625a      	str	r2, [r3, #36]	; 0x24
        p_mutex->OwnerNestingCtr   = (OS_NESTING_CTR)1;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        if (p_ts != (CPU_TS *)0) {
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d003      	beq.n	8005a0c <OSMutexPend+0x9c>
           *p_ts  = p_mutex->TS;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	601a      	str	r2, [r3, #0]
        }
        OS_MutexGrpAdd(OSTCBCurPtr, p_mutex);               /* Add mutex to owner's group                             */
 8005a0c:	4b5a      	ldr	r3, [pc, #360]	; (8005b78 <OSMutexPend+0x208>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68f9      	ldr	r1, [r7, #12]
 8005a12:	4618      	mov	r0, r3
 8005a14:	f000 f9cc 	bl	8005db0 <OS_MutexGrpAdd>
        CPU_CRITICAL_EXIT();
 8005a18:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005a1a:	f7fa fc65 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_PEND(p_mutex);                       /* Record the event.                                      */
#endif
       *p_err = OS_ERR_NONE;
 8005a1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a20:	2200      	movs	r2, #0
 8005a22:	801a      	strh	r2, [r3, #0]
        return;
 8005a24:	e0a1      	b.n	8005b6a <OSMutexPend+0x1fa>
    }

    if (OSTCBCurPtr == p_mutex->OwnerTCBPtr) {              /* See if current task is already the owner of the mutex  */
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a2a:	4b53      	ldr	r3, [pc, #332]	; (8005b78 <OSMutexPend+0x208>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d116      	bne.n	8005a60 <OSMutexPend+0xf0>
        p_mutex->OwnerNestingCtr++;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a38:	3301      	adds	r3, #1
 8005a3a:	b2da      	uxtb	r2, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        if (p_ts != (CPU_TS *)0) {
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d003      	beq.n	8005a50 <OSMutexPend+0xe0>
           *p_ts  = p_mutex->TS;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	601a      	str	r2, [r3, #0]
        }
        CPU_CRITICAL_EXIT();
 8005a50:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005a52:	f7fa fc49 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_PEND_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_MUTEX_OWNER;                         /* Indicate that current task already owns the mutex      */
 8005a56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a58:	f245 7282 	movw	r2, #22402	; 0x5782
 8005a5c:	801a      	strh	r2, [r3, #0]
        return;
 8005a5e:	e084      	b.n	8005b6a <OSMutexPend+0x1fa>
    }

    if ((opt & OS_OPT_PEND_NON_BLOCKING) != (OS_OPT)0) {    /* Caller wants to block if not available?                */
 8005a60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	da07      	bge.n	8005a78 <OSMutexPend+0x108>
        CPU_CRITICAL_EXIT();
 8005a68:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005a6a:	f7fa fc3d 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_PEND_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_PEND_WOULD_BLOCK;                    /* No                                                     */
 8005a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a70:	f246 12b0 	movw	r2, #25008	; 0x61b0
 8005a74:	801a      	strh	r2, [r3, #0]
        return;
 8005a76:	e078      	b.n	8005b6a <OSMutexPend+0x1fa>
    } else {
        if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /* Can't pend when the scheduler is locked                */
 8005a78:	4b40      	ldr	r3, [pc, #256]	; (8005b7c <OSMutexPend+0x20c>)
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d007      	beq.n	8005a90 <OSMutexPend+0x120>
            CPU_CRITICAL_EXIT();
 8005a80:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005a82:	f7fa fc31 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
            TRACE_OS_MUTEX_PEND_FAILED(p_mutex);            /* Record the event.                                      */
#endif
           *p_err = OS_ERR_SCHED_LOCKED;
 8005a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a88:	f646 5263 	movw	r2, #28003	; 0x6d63
 8005a8c:	801a      	strh	r2, [r3, #0]
            return;
 8005a8e:	e06c      	b.n	8005b6a <OSMutexPend+0x1fa>
        }
    }
                                                            /* Lock the scheduler/re-enable interrupts                */
    OS_CRITICAL_ENTER_CPU_EXIT();
    p_tcb = p_mutex->OwnerTCBPtr;                           /* Point to the TCB of the Mutex owner                    */
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a94:	633b      	str	r3, [r7, #48]	; 0x30
    if (p_tcb->Prio > OSTCBCurPtr->Prio) {                  /* See if mutex owner has a lower priority than current   */
 8005a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a98:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8005a9c:	4b36      	ldr	r3, [pc, #216]	; (8005b78 <OSMutexPend+0x208>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d907      	bls.n	8005ab8 <OSMutexPend+0x148>
        OS_TaskChangePrio(p_tcb, OSTCBCurPtr->Prio);
 8005aa8:	4b33      	ldr	r3, [pc, #204]	; (8005b78 <OSMutexPend+0x208>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ab4:	f7fd fd54 	bl	8003560 <OS_TaskChangePrio>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
                 TRACE_OS_MUTEX_TASK_PRIO_INHERIT(p_tcb, p_tcb->Prio);
#endif
    }

    OS_Pend(&pend_data,                                     /* Block task pending on Mutex                            */
 8005ab8:	f107 0010 	add.w	r0, r7, #16
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	2204      	movs	r2, #4
 8005ac0:	68f9      	ldr	r1, [r7, #12]
 8005ac2:	f7fe fa3d 	bl	8003f40 <OS_Pend>
            (OS_PEND_OBJ *)((void *)p_mutex),
             OS_TASK_PEND_ON_MUTEX,
             timeout);

    OS_CRITICAL_EXIT_NO_SCHED();
 8005ac6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005ac8:	f7fa fc0e 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_MUTEX_PEND_BLOCK(p_mutex);                     /* Record the event.                                      */
#endif
    OSSched();                                              /* Find the next highest priority task ready to run       */
 8005acc:	f7fe f8cc 	bl	8003c68 <OSSched>

    CPU_CRITICAL_ENTER();
 8005ad0:	f7fa fc06 	bl	80002e0 <CPU_SR_Save>
 8005ad4:	6378      	str	r0, [r7, #52]	; 0x34
    switch (OSTCBCurPtr->PendStatus) {
 8005ad6:	4b28      	ldr	r3, [pc, #160]	; (8005b78 <OSMutexPend+0x208>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ade:	2b03      	cmp	r3, #3
 8005ae0:	d83b      	bhi.n	8005b5a <OSMutexPend+0x1ea>
 8005ae2:	a201      	add	r2, pc, #4	; (adr r2, 8005ae8 <OSMutexPend+0x178>)
 8005ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae8:	08005af9 	.word	0x08005af9
 8005aec:	08005b11 	.word	0x08005b11
 8005af0:	08005b41 	.word	0x08005b41
 8005af4:	08005b2b 	.word	0x08005b2b
        case OS_STATUS_PEND_OK:                             /* We got the mutex                                       */
             if (p_ts != (CPU_TS *)0) {
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d004      	beq.n	8005b08 <OSMutexPend+0x198>
                *p_ts  = OSTCBCurPtr->TS;
 8005afe:	4b1e      	ldr	r3, [pc, #120]	; (8005b78 <OSMutexPend+0x208>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_MUTEX_PEND(p_mutex);                  /* Record the event.                                      */
#endif
            *p_err = OS_ERR_NONE;
 8005b08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	801a      	strh	r2, [r3, #0]
             break;
 8005b0e:	e029      	b.n	8005b64 <OSMutexPend+0x1f4>

        case OS_STATUS_PEND_ABORT:                          /* Indicate that we aborted                               */
             if (p_ts != (CPU_TS *)0) {
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d004      	beq.n	8005b20 <OSMutexPend+0x1b0>
                *p_ts  = OSTCBCurPtr->TS;
 8005b16:	4b18      	ldr	r3, [pc, #96]	; (8005b78 <OSMutexPend+0x208>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_MUTEX_PEND_FAILED(p_mutex);           /* Record the event.                                      */
#endif
            *p_err = OS_ERR_PEND_ABORT;
 8005b20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b22:	f246 12a9 	movw	r2, #25001	; 0x61a9
 8005b26:	801a      	strh	r2, [r3, #0]
             break;
 8005b28:	e01c      	b.n	8005b64 <OSMutexPend+0x1f4>

        case OS_STATUS_PEND_TIMEOUT:                        /* Indicate that we didn't get mutex within timeout       */
             if (p_ts != (CPU_TS *)0) {
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d002      	beq.n	8005b36 <OSMutexPend+0x1c6>
                *p_ts  = (CPU_TS  )0;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	2200      	movs	r2, #0
 8005b34:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_MUTEX_PEND_FAILED(p_mutex);           /* Record the event.                                      */
#endif
            *p_err = OS_ERR_TIMEOUT;
 8005b36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b38:	f247 22d9 	movw	r2, #29401	; 0x72d9
 8005b3c:	801a      	strh	r2, [r3, #0]
             break;
 8005b3e:	e011      	b.n	8005b64 <OSMutexPend+0x1f4>

        case OS_STATUS_PEND_DEL:                            /* Indicate that object pended on has been deleted        */
             if (p_ts != (CPU_TS *)0) {
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d004      	beq.n	8005b50 <OSMutexPend+0x1e0>
                *p_ts  = OSTCBCurPtr->TS;
 8005b46:	4b0c      	ldr	r3, [pc, #48]	; (8005b78 <OSMutexPend+0x208>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_MUTEX_PEND_FAILED(p_mutex);           /* Record the event.                                      */
#endif
            *p_err = OS_ERR_OBJ_DEL;
 8005b50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b52:	f645 52c2 	movw	r2, #24002	; 0x5dc2
 8005b56:	801a      	strh	r2, [r3, #0]
             break;
 8005b58:	e004      	b.n	8005b64 <OSMutexPend+0x1f4>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_MUTEX_PEND_FAILED(p_mutex);           /* Record the event.                                      */
#endif
            *p_err = OS_ERR_STATUS_INVALID;
 8005b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b5c:	f646 622e 	movw	r2, #28206	; 0x6e2e
 8005b60:	801a      	strh	r2, [r3, #0]
             break;
 8005b62:	bf00      	nop
    }
    CPU_CRITICAL_EXIT();
 8005b64:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005b66:	f7fa fbbf 	bl	80002e8 <CPU_SR_Restore>
}
 8005b6a:	3738      	adds	r7, #56	; 0x38
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	20002234 	.word	0x20002234
 8005b74:	5854554d 	.word	0x5854554d
 8005b78:	20002208 	.word	0x20002208
 8005b7c:	20001f9c 	.word	0x20001f9c

08005b80 <OSMutexPost>:
*/

void  OSMutexPost (OS_MUTEX  *p_mutex,
                   OS_OPT     opt,
                   OS_ERR    *p_err)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b08c      	sub	sp, #48	; 0x30
 8005b84:	af02      	add	r7, sp, #8
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	460b      	mov	r3, r1
 8005b8a:	607a      	str	r2, [r7, #4]
 8005b8c:	817b      	strh	r3, [r7, #10]
    OS_PEND_LIST  *p_pend_list;
    OS_TCB        *p_tcb;
    CPU_TS         ts;
    OS_PRIO        prio_new;
    CPU_SR_ALLOC();
 8005b8e:	2300      	movs	r3, #0
 8005b90:	627b      	str	r3, [r7, #36]	; 0x24
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 8005b92:	4b65      	ldr	r3, [pc, #404]	; (8005d28 <OSMutexPost+0x1a8>)
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d004      	beq.n	8005ba4 <OSMutexPost+0x24>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_POST_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_POST_ISR;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f246 220e 	movw	r2, #25102	; 0x620e
 8005ba0:	801a      	strh	r2, [r3, #0]
        return;
 8005ba2:	e0be      	b.n	8005d22 <OSMutexPost+0x1a2>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_mutex == (OS_MUTEX *)0) {                         /* Validate 'p_mutex'                                     */
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d104      	bne.n	8005bb4 <OSMutexPost+0x34>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_POST_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_PTR_NULL;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f645 52c3 	movw	r2, #24003	; 0x5dc3
 8005bb0:	801a      	strh	r2, [r3, #0]
        return;
 8005bb2:	e0b6      	b.n	8005d22 <OSMutexPost+0x1a2>
    }
    switch (opt) {                                          /* Validate 'opt'                                         */
 8005bb4:	897b      	ldrh	r3, [r7, #10]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d007      	beq.n	8005bca <OSMutexPost+0x4a>
 8005bba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bbe:	d004      	beq.n	8005bca <OSMutexPost+0x4a>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_MUTEX_POST_FAILED(p_mutex);           /* Record the event.                                      */
#endif
            *p_err =  OS_ERR_OPT_INVALID;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f645 6225 	movw	r2, #24101	; 0x5e25
 8005bc6:	801a      	strh	r2, [r3, #0]
             return;
 8005bc8:	e0ab      	b.n	8005d22 <OSMutexPost+0x1a2>
        return;
    }
    switch (opt) {                                          /* Validate 'opt'                                         */
        case OS_OPT_POST_NONE:
        case OS_OPT_POST_NO_SCHED:
             break;
 8005bca:	bf00      	nop
             return;
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_mutex->Type != OS_OBJ_TYPE_MUTEX) {               /* Make sure mutex was created                            */
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a56      	ldr	r2, [pc, #344]	; (8005d2c <OSMutexPost+0x1ac>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d004      	beq.n	8005be0 <OSMutexPost+0x60>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_POST_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_TYPE;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f645 52c4 	movw	r2, #24004	; 0x5dc4
 8005bdc:	801a      	strh	r2, [r3, #0]
        return;
 8005bde:	e0a0      	b.n	8005d22 <OSMutexPost+0x1a2>
    }
#endif

    CPU_CRITICAL_ENTER();
 8005be0:	f7fa fb7e 	bl	80002e0 <CPU_SR_Save>
 8005be4:	6278      	str	r0, [r7, #36]	; 0x24
    if (OSTCBCurPtr != p_mutex->OwnerTCBPtr) {              /* Make sure the mutex owner is releasing the mutex       */
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bea:	4b51      	ldr	r3, [pc, #324]	; (8005d30 <OSMutexPost+0x1b0>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d007      	beq.n	8005c02 <OSMutexPost+0x82>
        CPU_CRITICAL_EXIT();
 8005bf2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005bf4:	f7fa fb78 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_POST_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_MUTEX_NOT_OWNER;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f245 7281 	movw	r2, #22401	; 0x5781
 8005bfe:	801a      	strh	r2, [r3, #0]
        return;
 8005c00:	e08f      	b.n	8005d22 <OSMutexPost+0x1a2>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_MUTEX_POST(p_mutex);                           /* Record the event.                                      */
#endif

    OS_CRITICAL_ENTER_CPU_EXIT();
    ts          = OS_TS_GET();                              /* Get timestamp                                          */
 8005c02:	f002 f86b 	bl	8007cdc <CPU_TS_TmrRd>
 8005c06:	6238      	str	r0, [r7, #32]
    p_mutex->TS = ts;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6a3a      	ldr	r2, [r7, #32]
 8005c0c:	62da      	str	r2, [r3, #44]	; 0x2c
    p_mutex->OwnerNestingCtr--;                             /* Decrement owner's nesting counter                      */
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c14:	3b01      	subs	r3, #1
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (p_mutex->OwnerNestingCtr > (OS_NESTING_CTR)0) {     /* Are we done with all nestings?                         */
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d007      	beq.n	8005c38 <OSMutexPost+0xb8>
        OS_CRITICAL_EXIT();                                 /* No                                                     */
 8005c28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c2a:	f7fa fb5d 	bl	80002e8 <CPU_SR_Restore>
       *p_err = OS_ERR_MUTEX_NESTING;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f245 7283 	movw	r2, #22403	; 0x5783
 8005c34:	801a      	strh	r2, [r3, #0]
        return;
 8005c36:	e074      	b.n	8005d22 <OSMutexPost+0x1a2>
    }

    OS_MutexGrpRemove(OSTCBCurPtr, p_mutex);                /* Remove mutex from owner's group                        */
 8005c38:	4b3d      	ldr	r3, [pc, #244]	; (8005d30 <OSMutexPost+0x1b0>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68f9      	ldr	r1, [r7, #12]
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f000 f8c8 	bl	8005dd4 <OS_MutexGrpRemove>

    p_pend_list = &p_mutex->PendList;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	3308      	adds	r3, #8
 8005c48:	61fb      	str	r3, [r7, #28]
    if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0) {         /* Any task waiting on mutex?                             */
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	891b      	ldrh	r3, [r3, #8]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d10d      	bne.n	8005c6e <OSMutexPost+0xee>
        p_mutex->OwnerTCBPtr     = (OS_TCB       *)0;       /* No                                                     */
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	625a      	str	r2, [r3, #36]	; 0x24
        p_mutex->OwnerNestingCtr = (OS_NESTING_CTR)0;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        OS_CRITICAL_EXIT();
 8005c60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c62:	f7fa fb41 	bl	80002e8 <CPU_SR_Restore>
       *p_err = OS_ERR_NONE;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	801a      	strh	r2, [r3, #0]
        return;
 8005c6c:	e059      	b.n	8005d22 <OSMutexPost+0x1a2>
    }
                                                            /* Yes                                                    */
    if (OSTCBCurPtr->Prio != OSTCBCurPtr->BasePrio) {       /* Has owner inherited a priority?                        */
 8005c6e:	4b30      	ldr	r3, [pc, #192]	; (8005d30 <OSMutexPost+0x1b0>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8005c76:	4b2e      	ldr	r3, [pc, #184]	; (8005d30 <OSMutexPost+0x1b0>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d02c      	beq.n	8005cdc <OSMutexPost+0x15c>
        prio_new = OS_MutexGrpPrioFindHighest(OSTCBCurPtr); /* Yes, find highest priority pending                     */
 8005c82:	4b2b      	ldr	r3, [pc, #172]	; (8005d30 <OSMutexPost+0x1b0>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4618      	mov	r0, r3
 8005c88:	f000 f8c0 	bl	8005e0c <OS_MutexGrpPrioFindHighest>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	76fb      	strb	r3, [r7, #27]
        prio_new = prio_new > OSTCBCurPtr->BasePrio ? OSTCBCurPtr->BasePrio : prio_new;
 8005c90:	4b27      	ldr	r3, [pc, #156]	; (8005d30 <OSMutexPost+0x1b0>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8005c98:	7efb      	ldrb	r3, [r7, #27]
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	bf28      	it	cs
 8005c9e:	4613      	movcs	r3, r2
 8005ca0:	76fb      	strb	r3, [r7, #27]
        if (prio_new > OSTCBCurPtr->Prio) {
 8005ca2:	4b23      	ldr	r3, [pc, #140]	; (8005d30 <OSMutexPost+0x1b0>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8005caa:	7efa      	ldrb	r2, [r7, #27]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d915      	bls.n	8005cdc <OSMutexPost+0x15c>
            OS_RdyListRemove(OSTCBCurPtr);
 8005cb0:	4b1f      	ldr	r3, [pc, #124]	; (8005d30 <OSMutexPost+0x1b0>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7fe fccd 	bl	8004654 <OS_RdyListRemove>
            OSTCBCurPtr->Prio = prio_new;                   /* Lower owner's priority back to its original one        */
 8005cba:	4b1d      	ldr	r3, [pc, #116]	; (8005d30 <OSMutexPost+0x1b0>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	7efa      	ldrb	r2, [r7, #27]
 8005cc0:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
            TRACE_OS_MUTEX_TASK_PRIO_DISINHERIT(OSTCBCurPtr, prio_new);
#endif
            OS_PrioInsert(prio_new);
 8005cc4:	7efb      	ldrb	r3, [r7, #27]
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7ff fc0a 	bl	80054e0 <OS_PrioInsert>
            OS_RdyListInsertTail(OSTCBCurPtr);              /* Insert owner in ready list at new priority             */
 8005ccc:	4b18      	ldr	r3, [pc, #96]	; (8005d30 <OSMutexPost+0x1b0>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7fe fc7f 	bl	80045d4 <OS_RdyListInsertTail>
            OSPrioCur         = prio_new;
 8005cd6:	4a17      	ldr	r2, [pc, #92]	; (8005d34 <OSMutexPost+0x1b4>)
 8005cd8:	7efb      	ldrb	r3, [r7, #27]
 8005cda:	7013      	strb	r3, [r2, #0]
        }
    }
                                                            /* Get TCB from head of pend list                         */
    p_tcb                      = p_pend_list->HeadPtr->TCBPtr;
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	617b      	str	r3, [r7, #20]
    p_mutex->OwnerTCBPtr       = p_tcb;                     /* Give mutex to new owner                                */
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	625a      	str	r2, [r3, #36]	; 0x24
    p_mutex->OwnerNestingCtr   = (OS_NESTING_CTR)1;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    OS_MutexGrpAdd(p_tcb, p_mutex);
 8005cf2:	68f9      	ldr	r1, [r7, #12]
 8005cf4:	6978      	ldr	r0, [r7, #20]
 8005cf6:	f000 f85b 	bl	8005db0 <OS_MutexGrpAdd>
                                                            /* Post to mutex                                          */
    OS_Post((OS_PEND_OBJ *)((void *)p_mutex),
 8005cfa:	6a3b      	ldr	r3, [r7, #32]
 8005cfc:	9300      	str	r3, [sp, #0]
 8005cfe:	2300      	movs	r3, #0
 8005d00:	2200      	movs	r2, #0
 8005d02:	6979      	ldr	r1, [r7, #20]
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f7fe fb1b 	bl	8004340 <OS_Post>
            (OS_TCB      *)p_tcb,
            (void        *)0,
            (OS_MSG_SIZE  )0,
            (CPU_TS       )ts);

    OS_CRITICAL_EXIT_NO_SCHED();
 8005d0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d0c:	f7fa faec 	bl	80002e8 <CPU_SR_Restore>

    if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0) {
 8005d10:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	db01      	blt.n	8005d1c <OSMutexPost+0x19c>
        OSSched();                                          /* Run the scheduler                                      */
 8005d18:	f7fd ffa6 	bl	8003c68 <OSSched>
    }

   *p_err = OS_ERR_NONE;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	801a      	strh	r2, [r3, #0]
}
 8005d22:	3728      	adds	r7, #40	; 0x28
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	20002234 	.word	0x20002234
 8005d2c:	5854554d 	.word	0x5854554d
 8005d30:	20002208 	.word	0x20002208
 8005d34:	2000213c 	.word	0x2000213c

08005d38 <OS_MutexDbgListAdd>:
*/


#if OS_CFG_DBG_EN > 0u
void  OS_MutexDbgListAdd (OS_MUTEX  *p_mutex)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
    p_mutex->DbgNamePtr               = (CPU_CHAR *)((void *)" ");
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a0e      	ldr	r2, [pc, #56]	; (8005d7c <OS_MutexDbgListAdd+0x44>)
 8005d44:	61da      	str	r2, [r3, #28]
    p_mutex->DbgPrevPtr               = (OS_MUTEX *)0;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	615a      	str	r2, [r3, #20]
    if (OSMutexDbgListPtr == (OS_MUTEX *)0) {
 8005d4c:	4b0c      	ldr	r3, [pc, #48]	; (8005d80 <OS_MutexDbgListAdd+0x48>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d103      	bne.n	8005d5c <OS_MutexDbgListAdd+0x24>
        p_mutex->DbgNextPtr           = (OS_MUTEX *)0;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	619a      	str	r2, [r3, #24]
 8005d5a:	e007      	b.n	8005d6c <OS_MutexDbgListAdd+0x34>
    } else {
        p_mutex->DbgNextPtr           =  OSMutexDbgListPtr;
 8005d5c:	4b08      	ldr	r3, [pc, #32]	; (8005d80 <OS_MutexDbgListAdd+0x48>)
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	619a      	str	r2, [r3, #24]
        OSMutexDbgListPtr->DbgPrevPtr =  p_mutex;
 8005d64:	4b06      	ldr	r3, [pc, #24]	; (8005d80 <OS_MutexDbgListAdd+0x48>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	615a      	str	r2, [r3, #20]
    }
    OSMutexDbgListPtr                 =  p_mutex;
 8005d6c:	4a04      	ldr	r2, [pc, #16]	; (8005d80 <OS_MutexDbgListAdd+0x48>)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6013      	str	r3, [r2, #0]
}
 8005d72:	bf00      	nop
 8005d74:	370c      	adds	r7, #12
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bc80      	pop	{r7}
 8005d7a:	4770      	bx	lr
 8005d7c:	0800efcc 	.word	0x0800efcc
 8005d80:	20002508 	.word	0x20002508

08005d84 <OS_MutexInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MutexInit (OS_ERR  *p_err)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSMutexDbgListPtr = (OS_MUTEX *)0;
 8005d8c:	4b06      	ldr	r3, [pc, #24]	; (8005da8 <OS_MutexInit+0x24>)
 8005d8e:	2200      	movs	r2, #0
 8005d90:	601a      	str	r2, [r3, #0]
#endif

    OSMutexQty        = (OS_OBJ_QTY)0;
 8005d92:	4b06      	ldr	r3, [pc, #24]	; (8005dac <OS_MutexInit+0x28>)
 8005d94:	2200      	movs	r2, #0
 8005d96:	801a      	strh	r2, [r3, #0]
   *p_err             =  OS_ERR_NONE;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	801a      	strh	r2, [r3, #0]
}
 8005d9e:	bf00      	nop
 8005da0:	370c      	adds	r7, #12
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bc80      	pop	{r7}
 8005da6:	4770      	bx	lr
 8005da8:	20002508 	.word	0x20002508
 8005dac:	20002430 	.word	0x20002430

08005db0 <OS_MutexGrpAdd>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MutexGrpAdd (OS_TCB  *p_tcb, OS_MUTEX  *p_mutex)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
    p_mutex->MutexGrpNextPtr = p_tcb->MutexGrpHeadPtr;      /* The mutex grp is not sorted add to head of list.       */
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	621a      	str	r2, [r3, #32]
    p_tcb->MutexGrpHeadPtr   = p_mutex;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	683a      	ldr	r2, [r7, #0]
 8005dc6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bc80      	pop	{r7}
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop

08005dd4 <OS_MutexGrpRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MutexGrpRemove (OS_TCB  *p_tcb, OS_MUTEX  *p_mutex)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
    OS_MUTEX  **pp_mutex;

    pp_mutex = &p_tcb->MutexGrpHeadPtr;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	333c      	adds	r3, #60	; 0x3c
 8005de2:	60fb      	str	r3, [r7, #12]

    while(*pp_mutex != p_mutex) {
 8005de4:	e003      	b.n	8005dee <OS_MutexGrpRemove+0x1a>
        pp_mutex = &(*pp_mutex)->MutexGrpNextPtr;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	3320      	adds	r3, #32
 8005dec:	60fb      	str	r3, [r7, #12]
{
    OS_MUTEX  **pp_mutex;

    pp_mutex = &p_tcb->MutexGrpHeadPtr;

    while(*pp_mutex != p_mutex) {
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d1f6      	bne.n	8005de6 <OS_MutexGrpRemove+0x12>
        pp_mutex = &(*pp_mutex)->MutexGrpNextPtr;
    }

    *pp_mutex = (*pp_mutex)->MutexGrpNextPtr;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	6a1a      	ldr	r2, [r3, #32]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	601a      	str	r2, [r3, #0]
}
 8005e02:	bf00      	nop
 8005e04:	3714      	adds	r7, #20
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bc80      	pop	{r7}
 8005e0a:	4770      	bx	lr

08005e0c <OS_MutexGrpPrioFindHighest>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

OS_PRIO  OS_MutexGrpPrioFindHighest (OS_TCB  *p_tcb)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b087      	sub	sp, #28
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
    OS_PRIO        highest_prio;
    OS_PRIO        prio;
    OS_PEND_DATA  *p_head;


    highest_prio = OS_CFG_PRIO_MAX - 1u;
 8005e14:	231f      	movs	r3, #31
 8005e16:	74fb      	strb	r3, [r7, #19]
    pp_mutex = &p_tcb->MutexGrpHeadPtr;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	333c      	adds	r3, #60	; 0x3c
 8005e1c:	617b      	str	r3, [r7, #20]

    while(*pp_mutex != (OS_MUTEX *)0) {
 8005e1e:	e015      	b.n	8005e4c <OS_MutexGrpPrioFindHighest+0x40>
        p_head = (*pp_mutex)->PendList.HeadPtr;
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	60fb      	str	r3, [r7, #12]
        if (p_head!= (OS_PEND_DATA *)0) {
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00a      	beq.n	8005e44 <OS_MutexGrpPrioFindHighest+0x38>
            prio = p_head->TCBPtr->Prio;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8005e36:	72fb      	strb	r3, [r7, #11]
            if(prio < highest_prio) {
 8005e38:	7afa      	ldrb	r2, [r7, #11]
 8005e3a:	7cfb      	ldrb	r3, [r7, #19]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d201      	bcs.n	8005e44 <OS_MutexGrpPrioFindHighest+0x38>
                highest_prio = prio;
 8005e40:	7afb      	ldrb	r3, [r7, #11]
 8005e42:	74fb      	strb	r3, [r7, #19]
            }
        }
        pp_mutex = &(*pp_mutex)->MutexGrpNextPtr;
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	3320      	adds	r3, #32
 8005e4a:	617b      	str	r3, [r7, #20]


    highest_prio = OS_CFG_PRIO_MAX - 1u;
    pp_mutex = &p_tcb->MutexGrpHeadPtr;

    while(*pp_mutex != (OS_MUTEX *)0) {
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d1e5      	bne.n	8005e20 <OS_MutexGrpPrioFindHighest+0x14>
            }
        }
        pp_mutex = &(*pp_mutex)->MutexGrpNextPtr;
    }

    return (highest_prio);
 8005e54:	7cfb      	ldrb	r3, [r7, #19]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	371c      	adds	r7, #28
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bc80      	pop	{r7}
 8005e5e:	4770      	bx	lr

08005e60 <OS_Dbg_Init>:
*                  DOES NOT optimize out the 'const' variables above.
************************************************************************************************************************
*/

void  OS_Dbg_Init (void)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
    CPU_INT08U const  *p_temp08;
    CPU_INT16U const  *p_temp16;
    CPU_INT32U const  *p_temp32;


    p_temp08 = (CPU_INT08U const *)&OSDbg_DbgEn;
 8005e66:	4b47      	ldr	r3, [pc, #284]	; (8005f84 <OS_Dbg_Init+0x124>)
 8005e68:	60fb      	str	r3, [r7, #12]

    p_temp32 = (CPU_INT32U const *)&OSDbg_DataSize;
 8005e6a:	4b47      	ldr	r3, [pc, #284]	; (8005f88 <OS_Dbg_Init+0x128>)
 8005e6c:	60bb      	str	r3, [r7, #8]

    p_temp08 = (CPU_INT08U const *)&OSDbg_ArgChkEn;
 8005e6e:	4b47      	ldr	r3, [pc, #284]	; (8005f8c <OS_Dbg_Init+0x12c>)
 8005e70:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_AppHooksEn;
 8005e72:	4b47      	ldr	r3, [pc, #284]	; (8005f90 <OS_Dbg_Init+0x130>)
 8005e74:	60fb      	str	r3, [r7, #12]

    p_temp32 = (CPU_INT32U const *)&OSDbg_EndiannessTest;
 8005e76:	4b47      	ldr	r3, [pc, #284]	; (8005f94 <OS_Dbg_Init+0x134>)
 8005e78:	60bb      	str	r3, [r7, #8]

    p_temp08 = (CPU_INT08U const *)&OSDbg_CalledFromISRChkEn;
 8005e7a:	4b47      	ldr	r3, [pc, #284]	; (8005f98 <OS_Dbg_Init+0x138>)
 8005e7c:	60fb      	str	r3, [r7, #12]

    p_temp16 = (CPU_INT16U const *)&OSDbg_FlagGrp;
 8005e7e:	4b47      	ldr	r3, [pc, #284]	; (8005f9c <OS_Dbg_Init+0x13c>)
 8005e80:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_FlagEn;
 8005e82:	4b47      	ldr	r3, [pc, #284]	; (8005fa0 <OS_Dbg_Init+0x140>)
 8005e84:	60fb      	str	r3, [r7, #12]
#if OS_CFG_FLAG_EN > 0u
    p_temp08 = (CPU_INT08U const *)&OSDbg_FlagDelEn;
 8005e86:	4b47      	ldr	r3, [pc, #284]	; (8005fa4 <OS_Dbg_Init+0x144>)
 8005e88:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_FlagModeClrEn;
 8005e8a:	4b47      	ldr	r3, [pc, #284]	; (8005fa8 <OS_Dbg_Init+0x148>)
 8005e8c:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_FlagPendAbortEn;
 8005e8e:	4b47      	ldr	r3, [pc, #284]	; (8005fac <OS_Dbg_Init+0x14c>)
 8005e90:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_FlagGrpSize;
 8005e92:	4b47      	ldr	r3, [pc, #284]	; (8005fb0 <OS_Dbg_Init+0x150>)
 8005e94:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_FlagWidth;
 8005e96:	4b47      	ldr	r3, [pc, #284]	; (8005fb4 <OS_Dbg_Init+0x154>)
 8005e98:	607b      	str	r3, [r7, #4]

#if OS_CFG_ISR_POST_DEFERRED_EN > 0u
    p_temp16 = (CPU_INT16U const *)&OSDbg_IntQ;
#endif

    p_temp08 = (CPU_INT08U const *)&OSDbg_ISRPostDeferredEn;
 8005e9a:	4b47      	ldr	r3, [pc, #284]	; (8005fb8 <OS_Dbg_Init+0x158>)
 8005e9c:	60fb      	str	r3, [r7, #12]

    p_temp16 = (CPU_INT16U const *)&OSDbg_Mem;
 8005e9e:	4b47      	ldr	r3, [pc, #284]	; (8005fbc <OS_Dbg_Init+0x15c>)
 8005ea0:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_MemEn;
 8005ea2:	4b47      	ldr	r3, [pc, #284]	; (8005fc0 <OS_Dbg_Init+0x160>)
 8005ea4:	60fb      	str	r3, [r7, #12]
#if OS_CFG_MEM_EN > 0u
    p_temp16 = (CPU_INT16U const *)&OSDbg_MemSize;
 8005ea6:	4b47      	ldr	r3, [pc, #284]	; (8005fc4 <OS_Dbg_Init+0x164>)
 8005ea8:	607b      	str	r3, [r7, #4]
#endif

    p_temp08 = (CPU_INT08U const *)&OSDbg_MsgEn;
 8005eaa:	4b47      	ldr	r3, [pc, #284]	; (8005fc8 <OS_Dbg_Init+0x168>)
 8005eac:	60fb      	str	r3, [r7, #12]
#if (OS_MSG_EN) > 0u
    p_temp16 = (CPU_INT16U const *)&OSDbg_MsgSize;
 8005eae:	4b47      	ldr	r3, [pc, #284]	; (8005fcc <OS_Dbg_Init+0x16c>)
 8005eb0:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_MsgPoolSize;
 8005eb2:	4b47      	ldr	r3, [pc, #284]	; (8005fd0 <OS_Dbg_Init+0x170>)
 8005eb4:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_MsgQSize;
 8005eb6:	4b47      	ldr	r3, [pc, #284]	; (8005fd4 <OS_Dbg_Init+0x174>)
 8005eb8:	607b      	str	r3, [r7, #4]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_Mutex;
 8005eba:	4b47      	ldr	r3, [pc, #284]	; (8005fd8 <OS_Dbg_Init+0x178>)
 8005ebc:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_MutexEn;
 8005ebe:	4b47      	ldr	r3, [pc, #284]	; (8005fdc <OS_Dbg_Init+0x17c>)
 8005ec0:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_MUTEX_EN) > 0u
    p_temp08 = (CPU_INT08U const *)&OSDbg_MutexDelEn;
 8005ec2:	4b47      	ldr	r3, [pc, #284]	; (8005fe0 <OS_Dbg_Init+0x180>)
 8005ec4:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_MutexPendAbortEn;
 8005ec6:	4b47      	ldr	r3, [pc, #284]	; (8005fe4 <OS_Dbg_Init+0x184>)
 8005ec8:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_MutexSize;
 8005eca:	4b47      	ldr	r3, [pc, #284]	; (8005fe8 <OS_Dbg_Init+0x188>)
 8005ecc:	607b      	str	r3, [r7, #4]
#endif

    p_temp08 = (CPU_INT08U const *)&OSDbg_ObjTypeChkEn;
 8005ece:	4b47      	ldr	r3, [pc, #284]	; (8005fec <OS_Dbg_Init+0x18c>)
 8005ed0:	60fb      	str	r3, [r7, #12]

    p_temp08 = (CPU_INT08U const *)&OSDbg_PendMultiEn;
 8005ed2:	4b47      	ldr	r3, [pc, #284]	; (8005ff0 <OS_Dbg_Init+0x190>)
 8005ed4:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_PendDataSize;
 8005ed6:	4b47      	ldr	r3, [pc, #284]	; (8005ff4 <OS_Dbg_Init+0x194>)
 8005ed8:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_PendListSize;
 8005eda:	4b47      	ldr	r3, [pc, #284]	; (8005ff8 <OS_Dbg_Init+0x198>)
 8005edc:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_PendObjSize;
 8005ede:	4b47      	ldr	r3, [pc, #284]	; (8005ffc <OS_Dbg_Init+0x19c>)
 8005ee0:	607b      	str	r3, [r7, #4]

    p_temp16 = (CPU_INT16U const *)&OSDbg_PrioMax;
 8005ee2:	4b47      	ldr	r3, [pc, #284]	; (8006000 <OS_Dbg_Init+0x1a0>)
 8005ee4:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_PrioTblSize;
 8005ee6:	4b47      	ldr	r3, [pc, #284]	; (8006004 <OS_Dbg_Init+0x1a4>)
 8005ee8:	607b      	str	r3, [r7, #4]

    p_temp16 = (CPU_INT16U const *)&OSDbg_PtrSize;
 8005eea:	4b47      	ldr	r3, [pc, #284]	; (8006008 <OS_Dbg_Init+0x1a8>)
 8005eec:	607b      	str	r3, [r7, #4]

    p_temp16 = (CPU_INT16U const *)&OSDbg_Q;
 8005eee:	4b47      	ldr	r3, [pc, #284]	; (800600c <OS_Dbg_Init+0x1ac>)
 8005ef0:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_QEn;
 8005ef2:	4b47      	ldr	r3, [pc, #284]	; (8006010 <OS_Dbg_Init+0x1b0>)
 8005ef4:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_Q_EN) > 0u
    p_temp08 = (CPU_INT08U const *)&OSDbg_QDelEn;
 8005ef6:	4b47      	ldr	r3, [pc, #284]	; (8006014 <OS_Dbg_Init+0x1b4>)
 8005ef8:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_QFlushEn;
 8005efa:	4b47      	ldr	r3, [pc, #284]	; (8006018 <OS_Dbg_Init+0x1b8>)
 8005efc:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_QPendAbortEn;
 8005efe:	4b47      	ldr	r3, [pc, #284]	; (800601c <OS_Dbg_Init+0x1bc>)
 8005f00:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_QSize;
 8005f02:	4b47      	ldr	r3, [pc, #284]	; (8006020 <OS_Dbg_Init+0x1c0>)
 8005f04:	607b      	str	r3, [r7, #4]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_SchedRoundRobinEn;
 8005f06:	4b47      	ldr	r3, [pc, #284]	; (8006024 <OS_Dbg_Init+0x1c4>)
 8005f08:	607b      	str	r3, [r7, #4]

    p_temp16 = (CPU_INT16U const *)&OSDbg_Sem;
 8005f0a:	4b47      	ldr	r3, [pc, #284]	; (8006028 <OS_Dbg_Init+0x1c8>)
 8005f0c:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_SemEn;
 8005f0e:	4b47      	ldr	r3, [pc, #284]	; (800602c <OS_Dbg_Init+0x1cc>)
 8005f10:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_SEM_EN) > 0u
    p_temp08 = (CPU_INT08U const *)&OSDbg_SemDelEn;
 8005f12:	4b47      	ldr	r3, [pc, #284]	; (8006030 <OS_Dbg_Init+0x1d0>)
 8005f14:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_SemPendAbortEn;
 8005f16:	4b47      	ldr	r3, [pc, #284]	; (8006034 <OS_Dbg_Init+0x1d4>)
 8005f18:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_SemSetEn;
 8005f1a:	4b47      	ldr	r3, [pc, #284]	; (8006038 <OS_Dbg_Init+0x1d8>)
 8005f1c:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_SemSize;
 8005f1e:	4b47      	ldr	r3, [pc, #284]	; (800603c <OS_Dbg_Init+0x1dc>)
 8005f20:	607b      	str	r3, [r7, #4]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_RdyList;
 8005f22:	4b47      	ldr	r3, [pc, #284]	; (8006040 <OS_Dbg_Init+0x1e0>)
 8005f24:	607b      	str	r3, [r7, #4]
    p_temp32 = (CPU_INT32U const *)&OSDbg_RdyListSize;
 8005f26:	4b47      	ldr	r3, [pc, #284]	; (8006044 <OS_Dbg_Init+0x1e4>)
 8005f28:	60bb      	str	r3, [r7, #8]

    p_temp16 = (CPU_INT16U const *)&OSDbg_StkWidth;
 8005f2a:	4b47      	ldr	r3, [pc, #284]	; (8006048 <OS_Dbg_Init+0x1e8>)
 8005f2c:	607b      	str	r3, [r7, #4]

    p_temp08 = (CPU_INT08U const *)&OSDbg_StatTaskEn;
 8005f2e:	4b47      	ldr	r3, [pc, #284]	; (800604c <OS_Dbg_Init+0x1ec>)
 8005f30:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_StatTaskStkChkEn;
 8005f32:	4b47      	ldr	r3, [pc, #284]	; (8006050 <OS_Dbg_Init+0x1f0>)
 8005f34:	60fb      	str	r3, [r7, #12]

    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskChangePrioEn;
 8005f36:	4b47      	ldr	r3, [pc, #284]	; (8006054 <OS_Dbg_Init+0x1f4>)
 8005f38:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskDelEn;
 8005f3a:	4b47      	ldr	r3, [pc, #284]	; (8006058 <OS_Dbg_Init+0x1f8>)
 8005f3c:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskQEn;
 8005f3e:	4b47      	ldr	r3, [pc, #284]	; (800605c <OS_Dbg_Init+0x1fc>)
 8005f40:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskQPendAbortEn;
 8005f42:	4b47      	ldr	r3, [pc, #284]	; (8006060 <OS_Dbg_Init+0x200>)
 8005f44:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskProfileEn;
 8005f46:	4b47      	ldr	r3, [pc, #284]	; (8006064 <OS_Dbg_Init+0x204>)
 8005f48:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_TaskRegTblSize;
 8005f4a:	4b47      	ldr	r3, [pc, #284]	; (8006068 <OS_Dbg_Init+0x208>)
 8005f4c:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskSemPendAbortEn;
 8005f4e:	4b47      	ldr	r3, [pc, #284]	; (800606c <OS_Dbg_Init+0x20c>)
 8005f50:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskSuspendEn;
 8005f52:	4b47      	ldr	r3, [pc, #284]	; (8006070 <OS_Dbg_Init+0x210>)
 8005f54:	60fb      	str	r3, [r7, #12]

    p_temp16 = (CPU_INT16U const *)&OSDbg_TCBSize;
 8005f56:	4b47      	ldr	r3, [pc, #284]	; (8006074 <OS_Dbg_Init+0x214>)
 8005f58:	607b      	str	r3, [r7, #4]

    p_temp16 = (CPU_INT16U const *)&OSDbg_TickListSize;
 8005f5a:	4b47      	ldr	r3, [pc, #284]	; (8006078 <OS_Dbg_Init+0x218>)
 8005f5c:	607b      	str	r3, [r7, #4]

    p_temp08 = (CPU_INT08U const *)&OSDbg_TimeDlyHMSMEn;
 8005f5e:	4b47      	ldr	r3, [pc, #284]	; (800607c <OS_Dbg_Init+0x21c>)
 8005f60:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TimeDlyResumeEn;
 8005f62:	4b47      	ldr	r3, [pc, #284]	; (8006080 <OS_Dbg_Init+0x220>)
 8005f64:	60fb      	str	r3, [r7, #12]


    p_temp16 = (CPU_INT16U const *)&OSDbg_Tmr;
 8005f66:	4b47      	ldr	r3, [pc, #284]	; (8006084 <OS_Dbg_Init+0x224>)
 8005f68:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TmrEn;
 8005f6a:	4b47      	ldr	r3, [pc, #284]	; (8006088 <OS_Dbg_Init+0x228>)
 8005f6c:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_TMR_EN) > 0u
    p_temp08 = (CPU_INT08U const *)&OSDbg_TmrDelEn;
 8005f6e:	4b47      	ldr	r3, [pc, #284]	; (800608c <OS_Dbg_Init+0x22c>)
 8005f70:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_TmrSize;
 8005f72:	4b47      	ldr	r3, [pc, #284]	; (8006090 <OS_Dbg_Init+0x230>)
 8005f74:	607b      	str	r3, [r7, #4]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_VersionNbr;
 8005f76:	4b47      	ldr	r3, [pc, #284]	; (8006094 <OS_Dbg_Init+0x234>)
 8005f78:	607b      	str	r3, [r7, #4]

    p_temp08 = p_temp08;                                     /* Prevent compiler warning for not using 'p_temp'        */
    p_temp16 = p_temp16;
    p_temp32 = p_temp32;
}
 8005f7a:	bf00      	nop
 8005f7c:	3714      	adds	r7, #20
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bc80      	pop	{r7}
 8005f82:	4770      	bx	lr
 8005f84:	0800f0c4 	.word	0x0800f0c4
 8005f88:	0800f22c 	.word	0x0800f22c
 8005f8c:	0800f0c5 	.word	0x0800f0c5
 8005f90:	0800f0c6 	.word	0x0800f0c6
 8005f94:	0800f0c8 	.word	0x0800f0c8
 8005f98:	0800f0cc 	.word	0x0800f0cc
 8005f9c:	0800f0d0 	.word	0x0800f0d0
 8005fa0:	0800f0cd 	.word	0x0800f0cd
 8005fa4:	0800f0f8 	.word	0x0800f0f8
 8005fa8:	0800f0f9 	.word	0x0800f0f9
 8005fac:	0800f0fa 	.word	0x0800f0fa
 8005fb0:	0800f0fc 	.word	0x0800f0fc
 8005fb4:	0800f0fe 	.word	0x0800f0fe
 8005fb8:	0800f100 	.word	0x0800f100
 8005fbc:	0800f104 	.word	0x0800f104
 8005fc0:	0800f124 	.word	0x0800f124
 8005fc4:	0800f126 	.word	0x0800f126
 8005fc8:	0800f128 	.word	0x0800f128
 8005fcc:	0800f12a 	.word	0x0800f12a
 8005fd0:	0800f12c 	.word	0x0800f12c
 8005fd4:	0800f12e 	.word	0x0800f12e
 8005fd8:	0800f130 	.word	0x0800f130
 8005fdc:	0800f160 	.word	0x0800f160
 8005fe0:	0800f161 	.word	0x0800f161
 8005fe4:	0800f162 	.word	0x0800f162
 8005fe8:	0800f164 	.word	0x0800f164
 8005fec:	0800f166 	.word	0x0800f166
 8005ff0:	0800f167 	.word	0x0800f167
 8005ff4:	0800f168 	.word	0x0800f168
 8005ff8:	0800f16a 	.word	0x0800f16a
 8005ffc:	0800f16c 	.word	0x0800f16c
 8006000:	0800f16e 	.word	0x0800f16e
 8006004:	0800f170 	.word	0x0800f170
 8006008:	0800f172 	.word	0x0800f172
 800600c:	0800f174 	.word	0x0800f174
 8006010:	0800f1a4 	.word	0x0800f1a4
 8006014:	0800f1a5 	.word	0x0800f1a5
 8006018:	0800f1a6 	.word	0x0800f1a6
 800601c:	0800f1a7 	.word	0x0800f1a7
 8006020:	0800f1a8 	.word	0x0800f1a8
 8006024:	0800f1aa 	.word	0x0800f1aa
 8006028:	0800f1ac 	.word	0x0800f1ac
 800602c:	0800f1d4 	.word	0x0800f1d4
 8006030:	0800f1d5 	.word	0x0800f1d5
 8006034:	0800f1d6 	.word	0x0800f1d6
 8006038:	0800f1d7 	.word	0x0800f1d7
 800603c:	0800f1d8 	.word	0x0800f1d8
 8006040:	0800f1da 	.word	0x0800f1da
 8006044:	0800f1dc 	.word	0x0800f1dc
 8006048:	0800f1e0 	.word	0x0800f1e0
 800604c:	0800f1e1 	.word	0x0800f1e1
 8006050:	0800f1e2 	.word	0x0800f1e2
 8006054:	0800f1e3 	.word	0x0800f1e3
 8006058:	0800f1e4 	.word	0x0800f1e4
 800605c:	0800f1e5 	.word	0x0800f1e5
 8006060:	0800f1e6 	.word	0x0800f1e6
 8006064:	0800f1e7 	.word	0x0800f1e7
 8006068:	0800f1e8 	.word	0x0800f1e8
 800606c:	0800f1ea 	.word	0x0800f1ea
 8006070:	0800f1eb 	.word	0x0800f1eb
 8006074:	0800f1ec 	.word	0x0800f1ec
 8006078:	0800f1ee 	.word	0x0800f1ee
 800607c:	0800f1f0 	.word	0x0800f1f0
 8006080:	0800f1f1 	.word	0x0800f1f1
 8006084:	0800f1f4 	.word	0x0800f1f4
 8006088:	0800f224 	.word	0x0800f224
 800608c:	0800f225 	.word	0x0800f225
 8006090:	0800f226 	.word	0x0800f226
 8006094:	0800f228 	.word	0x0800f228

08006098 <OSMemCreate>:
                   CPU_CHAR     *p_name,
                   void         *p_addr,
                   OS_MEM_QTY    n_blks,
                   OS_MEM_SIZE   blk_size,
                   OS_ERR       *p_err)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b08a      	sub	sp, #40	; 0x28
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	607a      	str	r2, [r7, #4]
 80060a4:	807b      	strh	r3, [r7, #2]
#endif
    OS_MEM_QTY     i;
    OS_MEM_QTY     loops;
    CPU_INT08U    *p_blk;
    void         **p_link;
    CPU_SR_ALLOC();
 80060a6:	2300      	movs	r3, #0
 80060a8:	61bb      	str	r3, [r7, #24]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 80060aa:	4b40      	ldr	r3, [pc, #256]	; (80061ac <OSMemCreate+0x114>)
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d004      	beq.n	80060bc <OSMemCreate+0x24>
       *p_err = OS_ERR_MEM_CREATE_ISR;
 80060b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b4:	f245 62b9 	movw	r2, #22201	; 0x56b9
 80060b8:	801a      	strh	r2, [r3, #0]
        return;
 80060ba:	e074      	b.n	80061a6 <OSMemCreate+0x10e>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_addr == (void *)0) {                              /* Must pass a valid address for the memory part.         */
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d104      	bne.n	80060cc <OSMemCreate+0x34>
       *p_err   = OS_ERR_MEM_INVALID_P_ADDR;
 80060c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060c4:	f245 62bb 	movw	r2, #22203	; 0x56bb
 80060c8:	801a      	strh	r2, [r3, #0]
        return;
 80060ca:	e06c      	b.n	80061a6 <OSMemCreate+0x10e>
    }
    if (n_blks < (OS_MEM_QTY)2) {                           /* Must have at least 2 blocks per partition              */
 80060cc:	887b      	ldrh	r3, [r7, #2]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d804      	bhi.n	80060dc <OSMemCreate+0x44>
       *p_err = OS_ERR_MEM_INVALID_BLKS;
 80060d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060d4:	f245 62bc 	movw	r2, #22204	; 0x56bc
 80060d8:	801a      	strh	r2, [r3, #0]
        return;
 80060da:	e064      	b.n	80061a6 <OSMemCreate+0x10e>
    }
    if (blk_size < sizeof(void *)) {                        /* Must contain space for at least a pointer              */
 80060dc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80060de:	2b03      	cmp	r3, #3
 80060e0:	d804      	bhi.n	80060ec <OSMemCreate+0x54>
       *p_err = OS_ERR_MEM_INVALID_SIZE;
 80060e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060e4:	f245 62c1 	movw	r2, #22209	; 0x56c1
 80060e8:	801a      	strh	r2, [r3, #0]
        return;
 80060ea:	e05c      	b.n	80061a6 <OSMemCreate+0x10e>
    }
    align_msk = sizeof(void *) - 1u;
 80060ec:	2303      	movs	r3, #3
 80060ee:	617b      	str	r3, [r7, #20]
    if (align_msk > 0u) {
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d013      	beq.n	800611e <OSMemCreate+0x86>
        if (((CPU_ADDR)p_addr & align_msk) != 0u){          /* Must be pointer size aligned                           */
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	4013      	ands	r3, r2
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d004      	beq.n	800610a <OSMemCreate+0x72>
           *p_err = OS_ERR_MEM_INVALID_P_ADDR;
 8006100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006102:	f245 62bb 	movw	r2, #22203	; 0x56bb
 8006106:	801a      	strh	r2, [r3, #0]
            return;
 8006108:	e04d      	b.n	80061a6 <OSMemCreate+0x10e>
        }
        if ((blk_size & align_msk) != 0u) {                 /* Block size must be a multiple address size             */
 800610a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	4013      	ands	r3, r2
 8006110:	2b00      	cmp	r3, #0
 8006112:	d004      	beq.n	800611e <OSMemCreate+0x86>
           *p_err = OS_ERR_MEM_INVALID_SIZE;
 8006114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006116:	f245 62c1 	movw	r2, #22209	; 0x56c1
 800611a:	801a      	strh	r2, [r3, #0]
            return;
 800611c:	e043      	b.n	80061a6 <OSMemCreate+0x10e>
        }
    }
#endif

    p_link = (void **)p_addr;                               /* Create linked list of free memory blocks               */
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	61fb      	str	r3, [r7, #28]
    p_blk  = (CPU_INT08U *)p_addr;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	623b      	str	r3, [r7, #32]
    loops  = n_blks - 1u;
 8006126:	887b      	ldrh	r3, [r7, #2]
 8006128:	3b01      	subs	r3, #1
 800612a:	827b      	strh	r3, [r7, #18]
    for (i = 0u; i < loops; i++) {
 800612c:	2300      	movs	r3, #0
 800612e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006130:	e00b      	b.n	800614a <OSMemCreate+0xb2>
        p_blk +=  blk_size;
 8006132:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006134:	6a3a      	ldr	r2, [r7, #32]
 8006136:	4413      	add	r3, r2
 8006138:	623b      	str	r3, [r7, #32]
       *p_link = (void  *)p_blk;                            /* Save pointer to NEXT block in CURRENT block            */
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	6a3a      	ldr	r2, [r7, #32]
 800613e:	601a      	str	r2, [r3, #0]
        p_link = (void **)(void *)p_blk;                    /* Position     to NEXT block                             */
 8006140:	6a3b      	ldr	r3, [r7, #32]
 8006142:	61fb      	str	r3, [r7, #28]
#endif

    p_link = (void **)p_addr;                               /* Create linked list of free memory blocks               */
    p_blk  = (CPU_INT08U *)p_addr;
    loops  = n_blks - 1u;
    for (i = 0u; i < loops; i++) {
 8006144:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006146:	3301      	adds	r3, #1
 8006148:	84fb      	strh	r3, [r7, #38]	; 0x26
 800614a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800614c:	8a7b      	ldrh	r3, [r7, #18]
 800614e:	429a      	cmp	r2, r3
 8006150:	d3ef      	bcc.n	8006132 <OSMemCreate+0x9a>
        p_blk +=  blk_size;
       *p_link = (void  *)p_blk;                            /* Save pointer to NEXT block in CURRENT block            */
        p_link = (void **)(void *)p_blk;                    /* Position     to NEXT block                             */
    }
   *p_link             = (void *)0;                         /* Last memory block points to NULL                       */
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	2200      	movs	r2, #0
 8006156:	601a      	str	r2, [r3, #0]

    OS_CRITICAL_ENTER();
 8006158:	f7fa f8c2 	bl	80002e0 <CPU_SR_Save>
 800615c:	61b8      	str	r0, [r7, #24]
#if OS_OBJ_TYPE_REQ > 0u
    p_mem->Type        = OS_OBJ_TYPE_MEM;                   /* Set the type of object                                 */
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	4a13      	ldr	r2, [pc, #76]	; (80061b0 <OSMemCreate+0x118>)
 8006162:	601a      	str	r2, [r3, #0]
#endif
#if OS_CFG_DBG_EN > 0u
    p_mem->NamePtr     = p_name;                            /* Save name of memory partition                          */
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	68ba      	ldr	r2, [r7, #8]
 8006168:	609a      	str	r2, [r3, #8]
#else
    (void)&p_name;
#endif
    p_mem->AddrPtr     = p_addr;                            /* Store start address of memory partition                */
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	605a      	str	r2, [r3, #4]
    p_mem->FreeListPtr = p_addr;                            /* Initialize pointer to pool of free blocks              */
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	60da      	str	r2, [r3, #12]
    p_mem->NbrFree     = n_blks;                            /* Store number of free blocks in MCB                     */
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	887a      	ldrh	r2, [r7, #2]
 800617a:	829a      	strh	r2, [r3, #20]
    p_mem->NbrMax      = n_blks;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	887a      	ldrh	r2, [r7, #2]
 8006180:	825a      	strh	r2, [r3, #18]
    p_mem->BlkSize     = blk_size;                          /* Store block size of each memory blocks                 */
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8006186:	821a      	strh	r2, [r3, #16]

#if OS_CFG_DBG_EN > 0u
    OS_MemDbgListAdd(p_mem);
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f000 f88d 	bl	80062a8 <OS_MemDbgListAdd>
#endif

    OSMemQty++;
 800618e:	4b09      	ldr	r3, [pc, #36]	; (80061b4 <OSMemCreate+0x11c>)
 8006190:	881b      	ldrh	r3, [r3, #0]
 8006192:	3301      	adds	r3, #1
 8006194:	b29a      	uxth	r2, r3
 8006196:	4b07      	ldr	r3, [pc, #28]	; (80061b4 <OSMemCreate+0x11c>)
 8006198:	801a      	strh	r2, [r3, #0]

#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_MEM_CREATE(p_mem, p_name);                     /* Record the event.                                      */
#endif

    OS_CRITICAL_EXIT_NO_SCHED();
 800619a:	69b8      	ldr	r0, [r7, #24]
 800619c:	f7fa f8a4 	bl	80002e8 <CPU_SR_Restore>
   *p_err = OS_ERR_NONE;
 80061a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a2:	2200      	movs	r2, #0
 80061a4:	801a      	strh	r2, [r3, #0]
}
 80061a6:	3728      	adds	r7, #40	; 0x28
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	20002234 	.word	0x20002234
 80061b0:	204d454d 	.word	0x204d454d
 80061b4:	2000242e 	.word	0x2000242e

080061b8 <OSMemGet>:
************************************************************************************************************************
*/

void  *OSMemGet (OS_MEM  *p_mem,
                 OS_ERR  *p_err)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
    void    *p_blk;
    CPU_SR_ALLOC();
 80061c2:	2300      	movs	r3, #0
 80061c4:	60fb      	str	r3, [r7, #12]
        return ((void *)0);
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_mem == (OS_MEM *)0) {                             /* Must point to a valid memory partition                 */
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d105      	bne.n	80061d8 <OSMemGet+0x20>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MEM_GET_FAILED(p_mem);                     /* Record the event.                                      */
#endif
       *p_err  = OS_ERR_MEM_INVALID_P_MEM;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	f245 62bf 	movw	r2, #22207	; 0x56bf
 80061d2:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 80061d4:	2300      	movs	r3, #0
 80061d6:	e023      	b.n	8006220 <OSMemGet+0x68>
    }
#endif

    CPU_CRITICAL_ENTER();
 80061d8:	f7fa f882 	bl	80002e0 <CPU_SR_Save>
 80061dc:	60f8      	str	r0, [r7, #12]
    if (p_mem->NbrFree == (OS_MEM_QTY)0) {                  /* See if there are any free memory blocks                */
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	8a9b      	ldrh	r3, [r3, #20]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d108      	bne.n	80061f8 <OSMemGet+0x40>
        CPU_CRITICAL_EXIT();
 80061e6:	68f8      	ldr	r0, [r7, #12]
 80061e8:	f7fa f87e 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MEM_GET_FAILED(p_mem);                     /* Record the event.                                      */
#endif
       *p_err = OS_ERR_MEM_NO_FREE_BLKS;                    /* No,  Notify caller of empty memory partition           */
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	f245 62c2 	movw	r2, #22210	; 0x56c2
 80061f2:	801a      	strh	r2, [r3, #0]
        return ((void *)0);                                 /*      Return NULL pointer to caller                     */
 80061f4:	2300      	movs	r3, #0
 80061f6:	e013      	b.n	8006220 <OSMemGet+0x68>
    }
    p_blk              = p_mem->FreeListPtr;                /* Yes, point to next free memory block                   */
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	60bb      	str	r3, [r7, #8]
    p_mem->FreeListPtr = *(void **)p_blk;                   /*      Adjust pointer to new free list                   */
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	60da      	str	r2, [r3, #12]
    p_mem->NbrFree--;                                       /*      One less memory block in this partition           */
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	8a9b      	ldrh	r3, [r3, #20]
 800620a:	3b01      	subs	r3, #1
 800620c:	b29a      	uxth	r2, r3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	829a      	strh	r2, [r3, #20]
    CPU_CRITICAL_EXIT();
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f7fa f868 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_MEM_GET(p_mem);                                /* Record the event.                                      */
#endif
   *p_err = OS_ERR_NONE;                                    /*      No error                                          */
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	2200      	movs	r2, #0
 800621c:	801a      	strh	r2, [r3, #0]
    return (p_blk);                                         /*      Return memory block to caller                     */
 800621e:	68bb      	ldr	r3, [r7, #8]
}
 8006220:	4618      	mov	r0, r3
 8006222:	3710      	adds	r7, #16
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <OSMemPut>:
*/

void  OSMemPut (OS_MEM  *p_mem,
                void    *p_blk,
                OS_ERR  *p_err)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b086      	sub	sp, #24
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	607a      	str	r2, [r7, #4]
    CPU_SR_ALLOC();
 8006234:	2300      	movs	r3, #0
 8006236:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_mem == (OS_MEM *)0) {                             /* Must point to a valid memory partition                 */
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d104      	bne.n	8006248 <OSMemPut+0x20>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MEM_PUT_FAILED(p_mem);                     /* Record the event.                                      */
#endif
       *p_err  = OS_ERR_MEM_INVALID_P_MEM;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f245 62bf 	movw	r2, #22207	; 0x56bf
 8006244:	801a      	strh	r2, [r3, #0]
        return;
 8006246:	e02b      	b.n	80062a0 <OSMemPut+0x78>
    }
    if (p_blk == (void *)0) {                               /* Must release a valid block                             */
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d104      	bne.n	8006258 <OSMemPut+0x30>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MEM_PUT_FAILED(p_mem);                     /* Record the event.                                      */
#endif
       *p_err  = OS_ERR_MEM_INVALID_P_BLK;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f245 62be 	movw	r2, #22206	; 0x56be
 8006254:	801a      	strh	r2, [r3, #0]
        return;
 8006256:	e023      	b.n	80062a0 <OSMemPut+0x78>
    }
#endif

    CPU_CRITICAL_ENTER();
 8006258:	f7fa f842 	bl	80002e0 <CPU_SR_Save>
 800625c:	6178      	str	r0, [r7, #20]
    if (p_mem->NbrFree >= p_mem->NbrMax) {                  /* Make sure all blocks not already returned              */
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	8a9a      	ldrh	r2, [r3, #20]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	8a5b      	ldrh	r3, [r3, #18]
 8006266:	429a      	cmp	r2, r3
 8006268:	d307      	bcc.n	800627a <OSMemPut+0x52>
        CPU_CRITICAL_EXIT();
 800626a:	6978      	ldr	r0, [r7, #20]
 800626c:	f7fa f83c 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MEM_PUT_FAILED(p_mem);                     /* Record the event.                                      */
#endif
       *p_err = OS_ERR_MEM_FULL;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f245 62ba 	movw	r2, #22202	; 0x56ba
 8006276:	801a      	strh	r2, [r3, #0]
        return;
 8006278:	e012      	b.n	80062a0 <OSMemPut+0x78>
    }
    *(void **)p_blk    = p_mem->FreeListPtr;                /* Insert released block into free block list             */
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	68da      	ldr	r2, [r3, #12]
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	601a      	str	r2, [r3, #0]
    p_mem->FreeListPtr = p_blk;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	60da      	str	r2, [r3, #12]
    p_mem->NbrFree++;                                       /* One more memory block in this partition                */
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	8a9b      	ldrh	r3, [r3, #20]
 800628c:	3301      	adds	r3, #1
 800628e:	b29a      	uxth	r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	829a      	strh	r2, [r3, #20]
    CPU_CRITICAL_EXIT();
 8006294:	6978      	ldr	r0, [r7, #20]
 8006296:	f7fa f827 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_MEM_PUT(p_mem);                                /* Record the event.                                      */
#endif
   *p_err              = OS_ERR_NONE;                       /* Notify caller that memory block was released           */
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	801a      	strh	r2, [r3, #0]
}
 80062a0:	3718      	adds	r7, #24
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop

080062a8 <OS_MemDbgListAdd>:
************************************************************************************************************************
*/

#if OS_CFG_DBG_EN > 0u
void  OS_MemDbgListAdd (OS_MEM  *p_mem)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
    p_mem->DbgPrevPtr               = (OS_MEM *)0;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	619a      	str	r2, [r3, #24]
    if (OSMemDbgListPtr == (OS_MEM *)0) {
 80062b6:	4b0c      	ldr	r3, [pc, #48]	; (80062e8 <OS_MemDbgListAdd+0x40>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d103      	bne.n	80062c6 <OS_MemDbgListAdd+0x1e>
        p_mem->DbgNextPtr           = (OS_MEM *)0;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	61da      	str	r2, [r3, #28]
 80062c4:	e007      	b.n	80062d6 <OS_MemDbgListAdd+0x2e>
    } else {
        p_mem->DbgNextPtr           =  OSMemDbgListPtr;
 80062c6:	4b08      	ldr	r3, [pc, #32]	; (80062e8 <OS_MemDbgListAdd+0x40>)
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	61da      	str	r2, [r3, #28]
        OSMemDbgListPtr->DbgPrevPtr =  p_mem;
 80062ce:	4b06      	ldr	r3, [pc, #24]	; (80062e8 <OS_MemDbgListAdd+0x40>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	619a      	str	r2, [r3, #24]
    }
    OSMemDbgListPtr                 =  p_mem;
 80062d6:	4a04      	ldr	r2, [pc, #16]	; (80062e8 <OS_MemDbgListAdd+0x40>)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6013      	str	r3, [r2, #0]
}
 80062dc:	bf00      	nop
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bc80      	pop	{r7}
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	200023cc 	.word	0x200023cc

080062ec <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_MemInit (OS_ERR  *p_err)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSMemDbgListPtr = (OS_MEM   *)0;
 80062f4:	4b06      	ldr	r3, [pc, #24]	; (8006310 <OS_MemInit+0x24>)
 80062f6:	2200      	movs	r2, #0
 80062f8:	601a      	str	r2, [r3, #0]
#endif

    OSMemQty        = (OS_OBJ_QTY)0;
 80062fa:	4b06      	ldr	r3, [pc, #24]	; (8006314 <OS_MemInit+0x28>)
 80062fc:	2200      	movs	r2, #0
 80062fe:	801a      	strh	r2, [r3, #0]
   *p_err           = OS_ERR_NONE;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	801a      	strh	r2, [r3, #0]
}
 8006306:	bf00      	nop
 8006308:	370c      	adds	r7, #12
 800630a:	46bd      	mov	sp, r7
 800630c:	bc80      	pop	{r7}
 800630e:	4770      	bx	lr
 8006310:	200023cc 	.word	0x200023cc
 8006314:	2000242e 	.word	0x2000242e

08006318 <OS_TmrInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_TmrInit (OS_ERR  *p_err)
{
 8006318:	b590      	push	{r4, r7, lr}
 800631a:	b08d      	sub	sp, #52	; 0x34
 800631c:	af0a      	add	r7, sp, #40	; 0x28
 800631e:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSTmrDbgListPtr = (OS_TMR *)0;
 8006320:	4b37      	ldr	r3, [pc, #220]	; (8006400 <OS_TmrInit+0xe8>)
 8006322:	2200      	movs	r2, #0
 8006324:	601a      	str	r2, [r3, #0]
#endif

    OSTmrListPtr        = (OS_TMR *)0;                      /* Create an empty timer list                             */
 8006326:	4b37      	ldr	r3, [pc, #220]	; (8006404 <OS_TmrInit+0xec>)
 8006328:	2200      	movs	r2, #0
 800632a:	601a      	str	r2, [r3, #0]
    OSTmrListEntries    = 0u;
 800632c:	4b36      	ldr	r3, [pc, #216]	; (8006408 <OS_TmrInit+0xf0>)
 800632e:	2200      	movs	r2, #0
 8006330:	801a      	strh	r2, [r3, #0]

    if (OSCfg_TmrTaskRate_Hz > (OS_RATE_HZ)0) {
 8006332:	4b36      	ldr	r3, [pc, #216]	; (800640c <OS_TmrInit+0xf4>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d008      	beq.n	800634c <OS_TmrInit+0x34>
        OSTmrUpdateCnt  = OSCfg_TickRate_Hz / OSCfg_TmrTaskRate_Hz;
 800633a:	4b35      	ldr	r3, [pc, #212]	; (8006410 <OS_TmrInit+0xf8>)
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	4b33      	ldr	r3, [pc, #204]	; (800640c <OS_TmrInit+0xf4>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	fbb2 f3f3 	udiv	r3, r2, r3
 8006346:	4a33      	ldr	r2, [pc, #204]	; (8006414 <OS_TmrInit+0xfc>)
 8006348:	6013      	str	r3, [r2, #0]
 800634a:	e007      	b.n	800635c <OS_TmrInit+0x44>
    } else {
        OSTmrUpdateCnt  = OSCfg_TickRate_Hz / (OS_RATE_HZ)10;
 800634c:	4b30      	ldr	r3, [pc, #192]	; (8006410 <OS_TmrInit+0xf8>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a31      	ldr	r2, [pc, #196]	; (8006418 <OS_TmrInit+0x100>)
 8006352:	fba2 2303 	umull	r2, r3, r2, r3
 8006356:	08db      	lsrs	r3, r3, #3
 8006358:	4a2e      	ldr	r2, [pc, #184]	; (8006414 <OS_TmrInit+0xfc>)
 800635a:	6013      	str	r3, [r2, #0]
    }
    OSTmrUpdateCtr      = OSTmrUpdateCnt;
 800635c:	4b2d      	ldr	r3, [pc, #180]	; (8006414 <OS_TmrInit+0xfc>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a2e      	ldr	r2, [pc, #184]	; (800641c <OS_TmrInit+0x104>)
 8006362:	6013      	str	r3, [r2, #0]

    OSTmrTickCtr        = (OS_TICK)0;
 8006364:	4b2e      	ldr	r3, [pc, #184]	; (8006420 <OS_TmrInit+0x108>)
 8006366:	2200      	movs	r2, #0
 8006368:	601a      	str	r2, [r3, #0]

    OSTmrTaskTimeMax    = (CPU_TS)0;
 800636a:	4b2e      	ldr	r3, [pc, #184]	; (8006424 <OS_TmrInit+0x10c>)
 800636c:	2200      	movs	r2, #0
 800636e:	601a      	str	r2, [r3, #0]

#if   OS_CFG_MUTEX_EN > 0u
    OSMutexCreate(&OSTmrMutex,                              /* Use a mutex to protect the timers                      */
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	492d      	ldr	r1, [pc, #180]	; (8006428 <OS_TmrInit+0x110>)
 8006374:	482d      	ldr	r0, [pc, #180]	; (800642c <OS_TmrInit+0x114>)
 8006376:	f7ff faaf 	bl	80058d8 <OSMutexCreate>
                  "OS Tmr Mutex", 
                  p_err);
    if (*p_err != OS_ERR_NONE) {
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	881b      	ldrh	r3, [r3, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d139      	bne.n	80063f6 <OS_TmrInit+0xde>
        return;
    }
#endif

                                                            /* ---------------- CREATE THE TIMER TASK --------------- */
    if (OSCfg_TmrTaskStkBasePtr == (CPU_STK*)0) {
 8006382:	4b2b      	ldr	r3, [pc, #172]	; (8006430 <OS_TmrInit+0x118>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d104      	bne.n	8006394 <OS_TmrInit+0x7c>
       *p_err = OS_ERR_TMR_STK_INVALID;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f247 3247 	movw	r2, #29511	; 0x7347
 8006390:	801a      	strh	r2, [r3, #0]
        return;
 8006392:	e031      	b.n	80063f8 <OS_TmrInit+0xe0>
    }

    if (OSCfg_TmrTaskStkSize < OSCfg_StkSizeMin) {
 8006394:	4b27      	ldr	r3, [pc, #156]	; (8006434 <OS_TmrInit+0x11c>)
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	4b27      	ldr	r3, [pc, #156]	; (8006438 <OS_TmrInit+0x120>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	429a      	cmp	r2, r3
 800639e:	d204      	bcs.n	80063aa <OS_TmrInit+0x92>
       *p_err = OS_ERR_TMR_STK_SIZE_INVALID;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f247 3248 	movw	r2, #29512	; 0x7348
 80063a6:	801a      	strh	r2, [r3, #0]
        return;
 80063a8:	e026      	b.n	80063f8 <OS_TmrInit+0xe0>
    }

    if (OSCfg_TmrTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {
 80063aa:	4b24      	ldr	r3, [pc, #144]	; (800643c <OS_TmrInit+0x124>)
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	2b1e      	cmp	r3, #30
 80063b0:	d904      	bls.n	80063bc <OS_TmrInit+0xa4>
       *p_err = OS_ERR_TMR_PRIO_INVALID;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f247 3246 	movw	r2, #29510	; 0x7346
 80063b8:	801a      	strh	r2, [r3, #0]
        return;
 80063ba:	e01d      	b.n	80063f8 <OS_TmrInit+0xe0>
    }

    OSTaskCreate((OS_TCB     *)&OSTmrTaskTCB,
 80063bc:	4b1f      	ldr	r3, [pc, #124]	; (800643c <OS_TmrInit+0x124>)
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	4a1b      	ldr	r2, [pc, #108]	; (8006430 <OS_TmrInit+0x118>)
 80063c2:	6812      	ldr	r2, [r2, #0]
 80063c4:	491e      	ldr	r1, [pc, #120]	; (8006440 <OS_TmrInit+0x128>)
 80063c6:	6809      	ldr	r1, [r1, #0]
 80063c8:	481a      	ldr	r0, [pc, #104]	; (8006434 <OS_TmrInit+0x11c>)
 80063ca:	6800      	ldr	r0, [r0, #0]
 80063cc:	687c      	ldr	r4, [r7, #4]
 80063ce:	9408      	str	r4, [sp, #32]
 80063d0:	240b      	movs	r4, #11
 80063d2:	9407      	str	r4, [sp, #28]
 80063d4:	2400      	movs	r4, #0
 80063d6:	9406      	str	r4, [sp, #24]
 80063d8:	2400      	movs	r4, #0
 80063da:	9405      	str	r4, [sp, #20]
 80063dc:	2400      	movs	r4, #0
 80063de:	9404      	str	r4, [sp, #16]
 80063e0:	9003      	str	r0, [sp, #12]
 80063e2:	9102      	str	r1, [sp, #8]
 80063e4:	9201      	str	r2, [sp, #4]
 80063e6:	9300      	str	r3, [sp, #0]
 80063e8:	2300      	movs	r3, #0
 80063ea:	4a16      	ldr	r2, [pc, #88]	; (8006444 <OS_TmrInit+0x12c>)
 80063ec:	4916      	ldr	r1, [pc, #88]	; (8006448 <OS_TmrInit+0x130>)
 80063ee:	4817      	ldr	r0, [pc, #92]	; (800644c <OS_TmrInit+0x134>)
 80063f0:	f7fc fb02 	bl	80029f8 <OSTaskCreate>
 80063f4:	e000      	b.n	80063f8 <OS_TmrInit+0xe0>
#if   OS_CFG_MUTEX_EN > 0u
    OSMutexCreate(&OSTmrMutex,                              /* Use a mutex to protect the timers                      */
                  "OS Tmr Mutex", 
                  p_err);
    if (*p_err != OS_ERR_NONE) {
        return;
 80063f6:	bf00      	nop
                 (OS_MSG_QTY  )0,
                 (OS_TICK     )0,
                 (void       *)0,
                 (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR | OS_OPT_TASK_NO_TLS),
                 (OS_ERR     *)p_err);
}
 80063f8:	370c      	adds	r7, #12
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd90      	pop	{r4, r7, pc}
 80063fe:	bf00      	nop
 8006400:	200024f8 	.word	0x200024f8
 8006404:	200024f4 	.word	0x200024f4
 8006408:	20002500 	.word	0x20002500
 800640c:	0800f0b4 	.word	0x0800f0b4
 8006410:	0800f09c 	.word	0x0800f09c
 8006414:	20002504 	.word	0x20002504
 8006418:	cccccccd 	.word	0xcccccccd
 800641c:	20002514 	.word	0x20002514
 8006420:	20002200 	.word	0x20002200
 8006424:	20002220 	.word	0x20002220
 8006428:	0800efd8 	.word	0x0800efd8
 800642c:	200023d0 	.word	0x200023d0
 8006430:	0800f0b8 	.word	0x0800f0b8
 8006434:	0800f0c0 	.word	0x0800f0c0
 8006438:	0800f098 	.word	0x0800f098
 800643c:	0800f0b0 	.word	0x0800f0b0
 8006440:	0800f0bc 	.word	0x0800f0bc
 8006444:	080064d9 	.word	0x080064d9
 8006448:	0800efe8 	.word	0x0800efe8
 800644c:	20002238 	.word	0x20002238

08006450 <OS_TmrResetPeak>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TmrResetPeak (void)
{
 8006450:	b480      	push	{r7}
 8006452:	af00      	add	r7, sp, #0
}
 8006454:	bf00      	nop
 8006456:	46bd      	mov	sp, r7
 8006458:	bc80      	pop	{r7}
 800645a:	4770      	bx	lr

0800645c <OS_TmrUnlink>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_TmrUnlink (OS_TMR  *p_tmr)
{
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
    OS_TMR  *p_tmr1;
    OS_TMR  *p_tmr2;



    if (OSTmrListPtr == p_tmr) {                            /* See if timer to remove is at the beginning of list     */
 8006464:	4b1a      	ldr	r3, [pc, #104]	; (80064d0 <OS_TmrUnlink+0x74>)
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	429a      	cmp	r2, r3
 800646c:	d10c      	bne.n	8006488 <OS_TmrUnlink+0x2c>
        p_tmr1       = (OS_TMR *)p_tmr->NextPtr;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	60fb      	str	r3, [r7, #12]
        OSTmrListPtr = (OS_TMR *)p_tmr1;
 8006474:	4a16      	ldr	r2, [pc, #88]	; (80064d0 <OS_TmrUnlink+0x74>)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6013      	str	r3, [r2, #0]
        if (p_tmr1 != (OS_TMR *)0) {
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d012      	beq.n	80064a6 <OS_TmrUnlink+0x4a>
            p_tmr1->PrevPtr = (OS_TMR *)0;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	615a      	str	r2, [r3, #20]
 8006486:	e00e      	b.n	80064a6 <OS_TmrUnlink+0x4a>
        }
    } else {
        p_tmr1          = (OS_TMR *)p_tmr->PrevPtr;         /* Remove timer from somewhere in the list                */
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	695b      	ldr	r3, [r3, #20]
 800648c:	60fb      	str	r3, [r7, #12]
        p_tmr2          = (OS_TMR *)p_tmr->NextPtr;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	60bb      	str	r3, [r7, #8]
        p_tmr1->NextPtr = p_tmr2;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	611a      	str	r2, [r3, #16]
        if (p_tmr2 != (OS_TMR *)0) {
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d002      	beq.n	80064a6 <OS_TmrUnlink+0x4a>
            p_tmr2->PrevPtr = (OS_TMR *)p_tmr1;
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	615a      	str	r2, [r3, #20]
        }
    }
    p_tmr->State   = OS_TMR_STATE_STOPPED;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2201      	movs	r2, #1
 80064aa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    p_tmr->NextPtr = (OS_TMR *)0;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	611a      	str	r2, [r3, #16]
    p_tmr->PrevPtr = (OS_TMR *)0;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	615a      	str	r2, [r3, #20]
    OSTmrListEntries--;
 80064ba:	4b06      	ldr	r3, [pc, #24]	; (80064d4 <OS_TmrUnlink+0x78>)
 80064bc:	881b      	ldrh	r3, [r3, #0]
 80064be:	3b01      	subs	r3, #1
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	4b04      	ldr	r3, [pc, #16]	; (80064d4 <OS_TmrUnlink+0x78>)
 80064c4:	801a      	strh	r2, [r3, #0]
}
 80064c6:	bf00      	nop
 80064c8:	3714      	adds	r7, #20
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bc80      	pop	{r7}
 80064ce:	4770      	bx	lr
 80064d0:	200024f4 	.word	0x200024f4
 80064d4:	20002500 	.word	0x20002500

080064d8 <OS_TmrTask>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_TmrTask (void  *p_arg)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b08a      	sub	sp, #40	; 0x28
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]



    (void)&p_arg;                                                /* Not using 'p_arg', prevent compiler warning       */
    while (DEF_ON) {
        (void)OSTaskSemPend((OS_TICK )0,                         /* Wait for signal indicating time to update tmrs    */
 80064e0:	f107 0312 	add.w	r3, r7, #18
 80064e4:	f107 020c 	add.w	r2, r7, #12
 80064e8:	2100      	movs	r1, #0
 80064ea:	2000      	movs	r0, #0
 80064ec:	f7fc fbb4 	bl	8002c58 <OSTaskSemPend>
                            (OS_OPT  )OS_OPT_PEND_BLOCKING,
                            (CPU_TS *)&ts,
                            (OS_ERR *)&err);


        OS_TmrLock();
 80064f0:	f000 f85a 	bl	80065a8 <OS_TmrLock>
        ts_start = OS_TS_GET();
 80064f4:	f001 fbf2 	bl	8007cdc <CPU_TS_TmrRd>
 80064f8:	6238      	str	r0, [r7, #32]
        OSTmrTickCtr++;                                          /* Increment the current time                        */
 80064fa:	4b28      	ldr	r3, [pc, #160]	; (800659c <OS_TmrTask+0xc4>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	3301      	adds	r3, #1
 8006500:	4a26      	ldr	r2, [pc, #152]	; (800659c <OS_TmrTask+0xc4>)
 8006502:	6013      	str	r3, [r2, #0]
        p_tmr    = OSTmrListPtr;
 8006504:	4b26      	ldr	r3, [pc, #152]	; (80065a0 <OS_TmrTask+0xc8>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	627b      	str	r3, [r7, #36]	; 0x24
        while (p_tmr != (OS_TMR *)0) {                           /* Update all the timers in the list                 */
 800650a:	e033      	b.n	8006574 <OS_TmrTask+0x9c>
            OSSchedLock(&err);
 800650c:	f107 0312 	add.w	r3, r7, #18
 8006510:	4618      	mov	r0, r3
 8006512:	f7fd fbfd 	bl	8003d10 <OSSchedLock>
            (void)&err;
            p_tmr_next = p_tmr->NextPtr;
 8006516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	61bb      	str	r3, [r7, #24]
            p_tmr->Remain--;
 800651c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651e:	699b      	ldr	r3, [r3, #24]
 8006520:	1e5a      	subs	r2, r3, #1
 8006522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006524:	619a      	str	r2, [r3, #24]
            if (p_tmr->Remain == 0) {
 8006526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d11b      	bne.n	8006566 <OS_TmrTask+0x8e>
                if (p_tmr->Opt == OS_OPT_TMR_PERIODIC) {
 800652e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006530:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006532:	2b02      	cmp	r3, #2
 8006534:	d104      	bne.n	8006540 <OS_TmrTask+0x68>
                    p_tmr->Remain = p_tmr->Period;               /* Reload the time remaining                         */
 8006536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006538:	6a1a      	ldr	r2, [r3, #32]
 800653a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653c:	619a      	str	r2, [r3, #24]
 800653e:	e006      	b.n	800654e <OS_TmrTask+0x76>
                } else {
                    OS_TmrUnlink(p_tmr);                         /* Remove from list                                  */
 8006540:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006542:	f7ff ff8b 	bl	800645c <OS_TmrUnlink>
                    p_tmr->State = OS_TMR_STATE_COMPLETED;       /* Indicate that the timer has completed             */
 8006546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006548:	2203      	movs	r2, #3
 800654a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
                }
                p_fnct = p_tmr->CallbackPtr;                     /* Execute callback function if available            */
 800654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	617b      	str	r3, [r7, #20]
                if (p_fnct != (OS_TMR_CALLBACK_PTR)0) {
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d005      	beq.n	8006566 <OS_TmrTask+0x8e>
                    (*p_fnct)((void *)p_tmr,
 800655a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655c:	68da      	ldr	r2, [r3, #12]
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	4611      	mov	r1, r2
 8006562:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006564:	4798      	blx	r3
                              p_tmr->CallbackPtrArg);
                }
            }
            p_tmr = p_tmr_next;
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	627b      	str	r3, [r7, #36]	; 0x24
            OSSchedUnlock(&err);
 800656a:	f107 0312 	add.w	r3, r7, #18
 800656e:	4618      	mov	r0, r3
 8006570:	f7fd fc0a 	bl	8003d88 <OSSchedUnlock>

        OS_TmrLock();
        ts_start = OS_TS_GET();
        OSTmrTickCtr++;                                          /* Increment the current time                        */
        p_tmr    = OSTmrListPtr;
        while (p_tmr != (OS_TMR *)0) {                           /* Update all the timers in the list                 */
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1c8      	bne.n	800650c <OS_TmrTask+0x34>
            p_tmr = p_tmr_next;
            OSSchedUnlock(&err);
            (void)&err;
        }

        ts_delta = OS_TS_GET() - ts_start;                      /* Measure execution time of timer task              */
 800657a:	f001 fbaf 	bl	8007cdc <CPU_TS_TmrRd>
 800657e:	4602      	mov	r2, r0
 8006580:	6a3b      	ldr	r3, [r7, #32]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	61fb      	str	r3, [r7, #28]
        OS_TmrUnlock();
 8006586:	f000 f821 	bl	80065cc <OS_TmrUnlock>

        if (OSTmrTaskTimeMax < ts_delta) {
 800658a:	4b06      	ldr	r3, [pc, #24]	; (80065a4 <OS_TmrTask+0xcc>)
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	429a      	cmp	r2, r3
 8006592:	d2a5      	bcs.n	80064e0 <OS_TmrTask+0x8>
            OSTmrTaskTimeMax = ts_delta;
 8006594:	4a03      	ldr	r2, [pc, #12]	; (80065a4 <OS_TmrTask+0xcc>)
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	6013      	str	r3, [r2, #0]
        }
    }
 800659a:	e7a1      	b.n	80064e0 <OS_TmrTask+0x8>
 800659c:	20002200 	.word	0x20002200
 80065a0:	200024f4 	.word	0x200024f4
 80065a4:	20002220 	.word	0x20002220

080065a8 <OS_TmrLock>:
* Note(s)    : 1) These function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

static  void  OS_TmrLock (void)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af02      	add	r7, sp, #8
    OS_ERR  err;
#if OS_CFG_MUTEX_EN > 0u
    CPU_TS  ts;


    OSMutexPend(&OSTmrMutex,                                /* Use a mutex to protect the timers                      */
 80065ae:	463a      	mov	r2, r7
 80065b0:	1dbb      	adds	r3, r7, #6
 80065b2:	9300      	str	r3, [sp, #0]
 80065b4:	4613      	mov	r3, r2
 80065b6:	2200      	movs	r2, #0
 80065b8:	2100      	movs	r1, #0
 80065ba:	4803      	ldr	r0, [pc, #12]	; (80065c8 <OS_TmrLock+0x20>)
 80065bc:	f7ff f9d8 	bl	8005970 <OSMutexPend>
                &err);
#else
    OSSchedLock(&err);                                      /* Lock the scheduler to protect the timers               */
#endif
    (void)&err;
}
 80065c0:	bf00      	nop
 80065c2:	3708      	adds	r7, #8
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	200023d0 	.word	0x200023d0

080065cc <OS_TmrUnlock>:




static  void  OS_TmrUnlock (void)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
    OS_ERR  err;


#if OS_CFG_MUTEX_EN > 0u
    OSMutexPost(&OSTmrMutex,                                /* Use a mutex to protect the timers                      */
 80065d2:	1dbb      	adds	r3, r7, #6
 80065d4:	461a      	mov	r2, r3
 80065d6:	2100      	movs	r1, #0
 80065d8:	4803      	ldr	r0, [pc, #12]	; (80065e8 <OS_TmrUnlock+0x1c>)
 80065da:	f7ff fad1 	bl	8005b80 <OSMutexPost>
                &err);
#else
    OSSchedUnlock(&err);                                    /* Lock the scheduler to protect the timers               */
#endif
    (void)&err;
}
 80065de:	bf00      	nop
 80065e0:	3708      	adds	r7, #8
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	200023d0 	.word	0x200023d0

080065ec <OSIdleTaskHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSIdleTaskHook (void)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	af00      	add	r7, sp, #0
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppIdleTaskHookPtr != (OS_APP_HOOK_VOID)0) {
 80065f0:	4b04      	ldr	r3, [pc, #16]	; (8006604 <OSIdleTaskHook+0x18>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d002      	beq.n	80065fe <OSIdleTaskHook+0x12>
        (*OS_AppIdleTaskHookPtr)();
 80065f8:	4b02      	ldr	r3, [pc, #8]	; (8006604 <OSIdleTaskHook+0x18>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4798      	blx	r3
    }
#endif
}
 80065fe:	bf00      	nop
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	20002400 	.word	0x20002400

08006608 <OSInitHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSInitHook (void)
{
 8006608:	b480      	push	{r7}
 800660a:	af00      	add	r7, sp, #0
                                                                    /* 8-byte align the ISR stack.                            */    
    OS_CPU_ExceptStkBase = (CPU_STK *)(OSCfg_ISRStkBasePtr + OSCfg_ISRStkSize);
 800660c:	4b09      	ldr	r3, [pc, #36]	; (8006634 <OSInitHook+0x2c>)
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	4b09      	ldr	r3, [pc, #36]	; (8006638 <OSInitHook+0x30>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	4413      	add	r3, r2
 8006618:	4a08      	ldr	r2, [pc, #32]	; (800663c <OSInitHook+0x34>)
 800661a:	6013      	str	r3, [r2, #0]
    OS_CPU_ExceptStkBase = (CPU_STK *)((CPU_STK)(OS_CPU_ExceptStkBase) & 0xFFFFFFF8);
 800661c:	4b07      	ldr	r3, [pc, #28]	; (800663c <OSInitHook+0x34>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f023 0307 	bic.w	r3, r3, #7
 8006624:	461a      	mov	r2, r3
 8006626:	4b05      	ldr	r3, [pc, #20]	; (800663c <OSInitHook+0x34>)
 8006628:	601a      	str	r2, [r3, #0]
}
 800662a:	bf00      	nop
 800662c:	46bd      	mov	sp, r7
 800662e:	bc80      	pop	{r7}
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	0800f074 	.word	0x0800f074
 8006638:	0800f078 	.word	0x0800f078
 800663c:	200033a0 	.word	0x200033a0

08006640 <OSStatTaskHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSStatTaskHook (void)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	af00      	add	r7, sp, #0
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppStatTaskHookPtr != (OS_APP_HOOK_VOID)0) {
 8006644:	4b04      	ldr	r3, [pc, #16]	; (8006658 <OSStatTaskHook+0x18>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d002      	beq.n	8006652 <OSStatTaskHook+0x12>
        (*OS_AppStatTaskHookPtr)();
 800664c:	4b02      	ldr	r3, [pc, #8]	; (8006658 <OSStatTaskHook+0x18>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4798      	blx	r3
    }
#endif
}
 8006652:	bf00      	nop
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	2000241c 	.word	0x2000241c

0800665c <OSTaskCreateHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSTaskCreateHook (OS_TCB  *p_tcb)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskCreateHookPtr != (OS_APP_HOOK_TCB)0) {
 8006664:	4b05      	ldr	r3, [pc, #20]	; (800667c <OSTaskCreateHook+0x20>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d003      	beq.n	8006674 <OSTaskCreateHook+0x18>
        (*OS_AppTaskCreateHookPtr)(p_tcb);
 800666c:	4b03      	ldr	r3, [pc, #12]	; (800667c <OSTaskCreateHook+0x20>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	4798      	blx	r3
    }
#else
    (void)p_tcb;                                            /* Prevent compiler warning                               */
#endif
}
 8006674:	bf00      	nop
 8006676:	3708      	adds	r7, #8
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	20002138 	.word	0x20002138

08006680 <OSTaskReturnHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSTaskReturnHook (OS_TCB  *p_tcb)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskReturnHookPtr != (OS_APP_HOOK_TCB)0) {
 8006688:	4b05      	ldr	r3, [pc, #20]	; (80066a0 <OSTaskReturnHook+0x20>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d003      	beq.n	8006698 <OSTaskReturnHook+0x18>
        (*OS_AppTaskReturnHookPtr)(p_tcb);
 8006690:	4b03      	ldr	r3, [pc, #12]	; (80066a0 <OSTaskReturnHook+0x20>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	4798      	blx	r3
    }
#else
    (void)p_tcb;                                            /* Prevent compiler warning                               */
#endif
}
 8006698:	bf00      	nop
 800669a:	3708      	adds	r7, #8
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}
 80066a0:	20001fa0 	.word	0x20001fa0

080066a4 <OSTaskStkInit>:
                         void          *p_arg,
                         CPU_STK       *p_stk_base,
                         CPU_STK       *p_stk_limit,
                         CPU_STK_SIZE   stk_size,
                         OS_OPT         opt)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b087      	sub	sp, #28
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]
 80066b0:	603b      	str	r3, [r7, #0]
    CPU_STK    *p_stk;

    
    (void)opt;                                                  /* Prevent compiler warning                               */

    p_stk = &p_stk_base[stk_size];                              /* Load stack pointer                                     */
 80066b2:	6a3b      	ldr	r3, [r7, #32]
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	4413      	add	r3, r2
 80066ba:	617b      	str	r3, [r7, #20]
                                                                /* Align the stack to 8-bytes.                            */
    p_stk = (CPU_STK *)((CPU_STK)(p_stk) & 0xFFFFFFF8);
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	f023 0307 	bic.w	r3, r3, #7
 80066c2:	617b      	str	r3, [r7, #20]
                                                                /* Registers stacked as if auto-saved on exception        */
    *--p_stk = (CPU_STK)0x01000000u;                            /* xPSR                                                   */
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	3b04      	subs	r3, #4
 80066c8:	617b      	str	r3, [r7, #20]
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80066d0:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)p_task;                                 /* Entry Point                                            */
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	3b04      	subs	r3, #4
 80066d6:	617b      	str	r3, [r7, #20]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)OS_TaskReturn;                          /* R14 (LR)                                               */
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	3b04      	subs	r3, #4
 80066e2:	617b      	str	r3, [r7, #20]
 80066e4:	4a30      	ldr	r2, [pc, #192]	; (80067a8 <OSTaskStkInit+0x104>)
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x12121212u;                            /* R12                                                    */
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	3b04      	subs	r3, #4
 80066ee:	617b      	str	r3, [r7, #20]
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 80066f6:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x03030303u;                            /* R3                                                     */
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	3b04      	subs	r3, #4
 80066fc:	617b      	str	r3, [r7, #20]
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 8006704:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x02020202u;                            /* R2                                                     */
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	3b04      	subs	r3, #4
 800670a:	617b      	str	r3, [r7, #20]
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 8006712:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)p_stk_limit;                            /* R1                                                     */
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	3b04      	subs	r3, #4
 8006718:	617b      	str	r3, [r7, #20]
 800671a:	683a      	ldr	r2, [r7, #0]
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)p_arg;                                  /* R0 : argument                                          */
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	3b04      	subs	r3, #4
 8006724:	617b      	str	r3, [r7, #20]
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	601a      	str	r2, [r3, #0]
                                                                /* Remaining registers saved on process stack             */
    *--p_stk = (CPU_STK)0x11111111u;                            /* R11                                                    */
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	3b04      	subs	r3, #4
 8006730:	617b      	str	r3, [r7, #20]
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8006738:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x10101010u;                            /* R10                                                    */
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	3b04      	subs	r3, #4
 800673e:	617b      	str	r3, [r7, #20]
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 8006746:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x09090909u;                            /* R9                                                     */
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	3b04      	subs	r3, #4
 800674c:	617b      	str	r3, [r7, #20]
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 8006754:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x08080808u;                            /* R8                                                     */
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	3b04      	subs	r3, #4
 800675a:	617b      	str	r3, [r7, #20]
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 8006762:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x07070707u;                            /* R7                                                     */
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	3b04      	subs	r3, #4
 8006768:	617b      	str	r3, [r7, #20]
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 8006770:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x06060606u;                            /* R6                                                     */
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	3b04      	subs	r3, #4
 8006776:	617b      	str	r3, [r7, #20]
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 800677e:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x05050505u;                            /* R5                                                     */
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	3b04      	subs	r3, #4
 8006784:	617b      	str	r3, [r7, #20]
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 800678c:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x04040404u;                            /* R4                                                     */
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	3b04      	subs	r3, #4
 8006792:	617b      	str	r3, [r7, #20]
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 800679a:	601a      	str	r2, [r3, #0]
        *--p_stk = (CPU_STK)0x3F800000u;                        /* S1                                                     */
        *--p_stk = (CPU_STK)0x00000000u;                        /* S0                                                     */
    }
#endif    

    return (p_stk);
 800679c:	697b      	ldr	r3, [r7, #20]
}
 800679e:	4618      	mov	r0, r3
 80067a0:	371c      	adds	r7, #28
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bc80      	pop	{r7}
 80067a6:	4770      	bx	lr
 80067a8:	080032f9 	.word	0x080032f9

080067ac <OSTaskSwHook>:
*                 to the task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/

void  OSTaskSwHook (void)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
        OS_CPU_FP_Reg_Pop(OSTCBHighRdyPtr->StkPtr);
    }
#endif    

#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskSwHookPtr != (OS_APP_HOOK_VOID)0) {
 80067b2:	4b20      	ldr	r3, [pc, #128]	; (8006834 <OSTaskSwHook+0x88>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d002      	beq.n	80067c0 <OSTaskSwHook+0x14>
        (*OS_AppTaskSwHookPtr)();
 80067ba:	4b1e      	ldr	r3, [pc, #120]	; (8006834 <OSTaskSwHook+0x88>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4798      	blx	r3
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_TASK_SWITCHED_IN(OSTCBHighRdyPtr);             /* Record the event.                                      */
#endif

#if OS_CFG_TASK_PROFILE_EN > 0u
    ts = OS_TS_GET();
 80067c0:	f001 fa8c 	bl	8007cdc <CPU_TS_TmrRd>
 80067c4:	6078      	str	r0, [r7, #4]
    if (OSTCBCurPtr != OSTCBHighRdyPtr) {
 80067c6:	4b1c      	ldr	r3, [pc, #112]	; (8006838 <OSTaskSwHook+0x8c>)
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	4b1c      	ldr	r3, [pc, #112]	; (800683c <OSTaskSwHook+0x90>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d016      	beq.n	8006800 <OSTaskSwHook+0x54>
        OSTCBCurPtr->CyclesDelta  = ts - OSTCBCurPtr->CyclesStart;
 80067d2:	4b19      	ldr	r3, [pc, #100]	; (8006838 <OSTaskSwHook+0x8c>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a18      	ldr	r2, [pc, #96]	; (8006838 <OSTaskSwHook+0x8c>)
 80067d8:	6812      	ldr	r2, [r2, #0]
 80067da:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 80067de:	6879      	ldr	r1, [r7, #4]
 80067e0:	1a8a      	subs	r2, r1, r2
 80067e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        OSTCBCurPtr->CyclesTotal += (OS_CYCLES)OSTCBCurPtr->CyclesDelta;
 80067e6:	4b14      	ldr	r3, [pc, #80]	; (8006838 <OSTaskSwHook+0x8c>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a13      	ldr	r2, [pc, #76]	; (8006838 <OSTaskSwHook+0x8c>)
 80067ec:	6812      	ldr	r2, [r2, #0]
 80067ee:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
 80067f2:	4a11      	ldr	r2, [pc, #68]	; (8006838 <OSTaskSwHook+0x8c>)
 80067f4:	6812      	ldr	r2, [r2, #0]
 80067f6:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80067fa:	440a      	add	r2, r1
 80067fc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }

    OSTCBHighRdyPtr->CyclesStart = ts;
 8006800:	4b0e      	ldr	r3, [pc, #56]	; (800683c <OSTaskSwHook+0x90>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }
#endif

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
                                                            /* Keep track of per-task scheduler lock time             */
    if (OSTCBCurPtr->SchedLockTimeMax < OSSchedLockTimeMaxCur) {
 800680a:	4b0b      	ldr	r3, [pc, #44]	; (8006838 <OSTaskSwHook+0x8c>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006812:	4b0b      	ldr	r3, [pc, #44]	; (8006840 <OSTaskSwHook+0x94>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	429a      	cmp	r2, r3
 8006818:	d205      	bcs.n	8006826 <OSTaskSwHook+0x7a>
        OSTCBCurPtr->SchedLockTimeMax = OSSchedLockTimeMaxCur;
 800681a:	4b07      	ldr	r3, [pc, #28]	; (8006838 <OSTaskSwHook+0x8c>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a08      	ldr	r2, [pc, #32]	; (8006840 <OSTaskSwHook+0x94>)
 8006820:	6812      	ldr	r2, [r2, #0]
 8006822:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }
    OSSchedLockTimeMaxCur = (CPU_TS)0;                      /* Reset the per-task value                               */
 8006826:	4b06      	ldr	r3, [pc, #24]	; (8006840 <OSTaskSwHook+0x94>)
 8006828:	2200      	movs	r2, #0
 800682a:	601a      	str	r2, [r3, #0]
#endif
}
 800682c:	bf00      	nop
 800682e:	3708      	adds	r7, #8
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	2000240c 	.word	0x2000240c
 8006838:	20002208 	.word	0x20002208
 800683c:	20002214 	.word	0x20002214
 8006840:	20002218 	.word	0x20002218

08006844 <OSTimeTickHook>:
* Note(s)    : 1) This function is assumed to be called from the Tick ISR.
*********************************************************************************************************
*/

void  OSTimeTickHook (void)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	af00      	add	r7, sp, #0
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTimeTickHookPtr != (OS_APP_HOOK_VOID)0) {
 8006848:	4b04      	ldr	r3, [pc, #16]	; (800685c <OSTimeTickHook+0x18>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d002      	beq.n	8006856 <OSTimeTickHook+0x12>
        (*OS_AppTimeTickHookPtr)();
 8006850:	4b02      	ldr	r3, [pc, #8]	; (800685c <OSTimeTickHook+0x18>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4798      	blx	r3
    }
#endif
}
 8006856:	bf00      	nop
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	20002228 	.word	0x20002228

08006860 <OS_CPU_SysTickHandler>:
* Note(s)    : 1) This function MUST be placed on entry 15 of the Cortex-M4 vector table.
*********************************************************************************************************
*/

void  OS_CPU_SysTickHandler (void)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
 8006866:	2300      	movs	r3, #0
 8006868:	607b      	str	r3, [r7, #4]


    CPU_CRITICAL_ENTER();
 800686a:	f7f9 fd39 	bl	80002e0 <CPU_SR_Save>
 800686e:	6078      	str	r0, [r7, #4]
    OSIntNestingCtr++;                                      /* Tell uC/OS-III that we are starting an ISR             */
 8006870:	4b08      	ldr	r3, [pc, #32]	; (8006894 <OS_CPU_SysTickHandler+0x34>)
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	3301      	adds	r3, #1
 8006876:	b2da      	uxtb	r2, r3
 8006878:	4b06      	ldr	r3, [pc, #24]	; (8006894 <OS_CPU_SysTickHandler+0x34>)
 800687a:	701a      	strb	r2, [r3, #0]
    CPU_CRITICAL_EXIT();
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f7f9 fd33 	bl	80002e8 <CPU_SR_Restore>

    OSTimeTick();                                           /* Call uC/OS-III's OSTimeTick()                          */
 8006882:	f7fe ffe3 	bl	800584c <OSTimeTick>

    OSIntExit();                                            /* Tell uC/OS-III that we are leaving the ISR             */
 8006886:	f7fd f983 	bl	8003b90 <OSIntExit>
}
 800688a:	bf00      	nop
 800688c:	3708      	adds	r7, #8
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	20002234 	.word	0x20002234

08006898 <OS_CPU_SysTickInit>:
* Note(s)    : 1) This function MUST be called after OSStart() & after processor initialization.
*********************************************************************************************************
*/

void  OS_CPU_SysTickInit (CPU_INT32U  cnts)
{
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
    CPU_INT32U  prio;


    CPU_REG_NVIC_ST_RELOAD = cnts - 1u;
 80068a0:	4a0f      	ldr	r2, [pc, #60]	; (80068e0 <OS_CPU_SysTickInit+0x48>)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	3b01      	subs	r3, #1
 80068a6:	6013      	str	r3, [r2, #0]

                                                            /* Set SysTick handler prio.                              */
    prio                   = CPU_REG_NVIC_SHPRI3;
 80068a8:	4b0e      	ldr	r3, [pc, #56]	; (80068e4 <OS_CPU_SysTickInit+0x4c>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	60fb      	str	r3, [r7, #12]
    prio                  &= DEF_BIT_FIELD(24, 0);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80068b4:	60fb      	str	r3, [r7, #12]
    prio                  |= DEF_BIT_MASK(OS_CPU_CFG_SYSTICK_PRIO, 24);

    CPU_REG_NVIC_SHPRI3    = prio;
 80068b6:	4a0b      	ldr	r2, [pc, #44]	; (80068e4 <OS_CPU_SysTickInit+0x4c>)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6013      	str	r3, [r2, #0]

                                                            /* Enable timer.                                          */
    CPU_REG_NVIC_ST_CTRL  |= CPU_REG_NVIC_ST_CTRL_CLKSOURCE |
 80068bc:	4a0a      	ldr	r2, [pc, #40]	; (80068e8 <OS_CPU_SysTickInit+0x50>)
 80068be:	4b0a      	ldr	r3, [pc, #40]	; (80068e8 <OS_CPU_SysTickInit+0x50>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f043 0305 	orr.w	r3, r3, #5
 80068c6:	6013      	str	r3, [r2, #0]
                             CPU_REG_NVIC_ST_CTRL_ENABLE;
                                                            /* Enable timer interrupt.                                */
    CPU_REG_NVIC_ST_CTRL  |= CPU_REG_NVIC_ST_CTRL_TICKINT;
 80068c8:	4a07      	ldr	r2, [pc, #28]	; (80068e8 <OS_CPU_SysTickInit+0x50>)
 80068ca:	4b07      	ldr	r3, [pc, #28]	; (80068e8 <OS_CPU_SysTickInit+0x50>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f043 0302 	orr.w	r3, r3, #2
 80068d2:	6013      	str	r3, [r2, #0]
}
 80068d4:	bf00      	nop
 80068d6:	3714      	adds	r7, #20
 80068d8:	46bd      	mov	sp, r7
 80068da:	bc80      	pop	{r7}
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop
 80068e0:	e000e014 	.word	0xe000e014
 80068e4:	e000ed20 	.word	0xe000ed20
 80068e8:	e000e010 	.word	0xe000e010

080068ec <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	4603      	mov	r3, r0
 80068f4:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80068f6:	4908      	ldr	r1, [pc, #32]	; (8006918 <NVIC_EnableIRQ+0x2c>)
 80068f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068fc:	095b      	lsrs	r3, r3, #5
 80068fe:	79fa      	ldrb	r2, [r7, #7]
 8006900:	f002 021f 	and.w	r2, r2, #31
 8006904:	2001      	movs	r0, #1
 8006906:	fa00 f202 	lsl.w	r2, r0, r2
 800690a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800690e:	bf00      	nop
 8006910:	370c      	adds	r7, #12
 8006912:	46bd      	mov	sp, r7
 8006914:	bc80      	pop	{r7}
 8006916:	4770      	bx	lr
 8006918:	e000e100 	.word	0xe000e100

0800691c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	4603      	mov	r3, r0
 8006924:	6039      	str	r1, [r7, #0]
 8006926:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8006928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800692c:	2b00      	cmp	r3, #0
 800692e:	da0b      	bge.n	8006948 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8006930:	490d      	ldr	r1, [pc, #52]	; (8006968 <NVIC_SetPriority+0x4c>)
 8006932:	79fb      	ldrb	r3, [r7, #7]
 8006934:	f003 030f 	and.w	r3, r3, #15
 8006938:	3b04      	subs	r3, #4
 800693a:	683a      	ldr	r2, [r7, #0]
 800693c:	b2d2      	uxtb	r2, r2
 800693e:	0092      	lsls	r2, r2, #2
 8006940:	b2d2      	uxtb	r2, r2
 8006942:	440b      	add	r3, r1
 8006944:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8006946:	e009      	b.n	800695c <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8006948:	4908      	ldr	r1, [pc, #32]	; (800696c <NVIC_SetPriority+0x50>)
 800694a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800694e:	683a      	ldr	r2, [r7, #0]
 8006950:	b2d2      	uxtb	r2, r2
 8006952:	0092      	lsls	r2, r2, #2
 8006954:	b2d2      	uxtb	r2, r2
 8006956:	440b      	add	r3, r1
 8006958:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800695c:	bf00      	nop
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	bc80      	pop	{r7}
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	e000ed00 	.word	0xe000ed00
 800696c:	e000e100 	.word	0xe000e100

08006970 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	60da      	str	r2, [r3, #12]
}
 8006984:	bf00      	nop
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	bc80      	pop	{r7}
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop

08006990 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	460b      	mov	r3, r1
 800699a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	68da      	ldr	r2, [r3, #12]
 80069a0:	78fb      	ldrb	r3, [r7, #3]
 80069a2:	2101      	movs	r1, #1
 80069a4:	fa01 f303 	lsl.w	r3, r1, r3
 80069a8:	431a      	orrs	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	60da      	str	r2, [r3, #12]
}
 80069ae:	bf00      	nop
 80069b0:	370c      	adds	r7, #12
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bc80      	pop	{r7}
 80069b6:	4770      	bx	lr

080069b8 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	60da      	str	r2, [r3, #12]
}
 80069c6:	bf00      	nop
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bc80      	pop	{r7}
 80069ce:	4770      	bx	lr

080069d0 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	460b      	mov	r3, r1
 80069da:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 80069dc:	887a      	ldrh	r2, [r7, #2]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80069e2:	bf00      	nop
 80069e4:	370c      	adds	r7, #12
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bc80      	pop	{r7}
 80069ea:	4770      	bx	lr

080069ec <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	460b      	mov	r3, r1
 80069f6:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 80069f8:	887a      	ldrh	r2, [r7, #2]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80069fe:	bf00      	nop
 8006a00:	370c      	adds	r7, #12
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bc80      	pop	{r7}
 8006a06:	4770      	bx	lr

08006a08 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS |= (uint32_t)shadow_transfer_msk;  
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	691a      	ldr	r2, [r3, #16]
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	431a      	orrs	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	611a      	str	r2, [r3, #16]
}
 8006a1e:	bf00      	nop
 8006a20:	370c      	adds	r7, #12
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bc80      	pop	{r7}
 8006a26:	4770      	bx	lr

08006a28 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	460b      	mov	r3, r1
 8006a32:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8006a3a:	78fb      	ldrb	r3, [r7, #3]
 8006a3c:	2101      	movs	r1, #1
 8006a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a42:	431a      	orrs	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8006a4a:	bf00      	nop
 8006a4c:	370c      	adds	r7, #12
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bc80      	pop	{r7}
 8006a52:	4770      	bx	lr

08006a54 <XMC_SCU_SetCcuTriggerHigh>:
 * the timer using this API.<BR>
 * \par<b>Related APIs:</b><BR>
 * XMC_CCU4_SLICE_StartConfig(), XMC_CCU4_SLICE_SetInput(), XMC_SCU_SetCcuTriggerLow()\n\n\n
 */
__STATIC_INLINE void XMC_SCU_SetCcuTriggerHigh(const uint32_t trigger)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  SCU_GENERAL->CCUCON |= (uint32_t)trigger;
 8006a5c:	4905      	ldr	r1, [pc, #20]	; (8006a74 <XMC_SCU_SetCcuTriggerHigh+0x20>)
 8006a5e:	4b05      	ldr	r3, [pc, #20]	; (8006a74 <XMC_SCU_SetCcuTriggerHigh+0x20>)
 8006a60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 8006a68:	bf00      	nop
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bc80      	pop	{r7}
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	50004000 	.word	0x50004000

08006a78 <BSP_CCU4_Init>:
#include "../../XMCLIB/inc/xmc4_ccu4_map.h"



_Bool BSP_CCU4_Init (void)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
	XMC_CCU4_SLICE_COMPARE_CONFIG_t g_timer_object =
 8006a7e:	f107 0308 	add.w	r3, r7, #8
 8006a82:	2200      	movs	r2, #0
 8006a84:	601a      	str	r2, [r3, #0]
 8006a86:	605a      	str	r2, [r3, #4]
 8006a88:	7a3b      	ldrb	r3, [r7, #8]
 8006a8a:	f043 0302 	orr.w	r3, r3, #2
 8006a8e:	723b      	strb	r3, [r7, #8]
 8006a90:	7b3b      	ldrb	r3, [r7, #12]
 8006a92:	2208      	movs	r2, #8
 8006a94:	f362 0303 	bfi	r3, r2, #0, #4
 8006a98:	733b      	strb	r3, [r7, #12]
		};
	};*/

	  /* Local variable which holds configuration of Event-1 */
	XMC_CCU4_SLICE_EVENT_CONFIG_t config;
	config.duration = XMC_CCU4_SLICE_EVENT_FILTER_DISABLED;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	71fb      	strb	r3, [r7, #7]
	config.edge     = XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_RISING_EDGE;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	717b      	strb	r3, [r7, #5]
	config.level    = XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH; /* Not needed */
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	71bb      	strb	r3, [r7, #6]
	config.mapped_input = XMC_CCU4_SLICE_INPUT_I;
 8006aa6:	2308      	movs	r3, #8
 8006aa8:	713b      	strb	r3, [r7, #4]

	/* Ensure fCCU reaches CCU42 */
	XMC_CCU4_SetModuleClock(MODULE_PTR, XMC_CCU4_CLOCK_SCU);
 8006aaa:	2100      	movs	r1, #0
 8006aac:	482d      	ldr	r0, [pc, #180]	; (8006b64 <BSP_CCU4_Init+0xec>)
 8006aae:	f001 fb19 	bl	80080e4 <XMC_CCU4_SetModuleClock>
	XMC_CCU4_Init(MODULE_PTR, XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR);
 8006ab2:	2100      	movs	r1, #0
 8006ab4:	482b      	ldr	r0, [pc, #172]	; (8006b64 <BSP_CCU4_Init+0xec>)
 8006ab6:	f001 faf5 	bl	80080a4 <XMC_CCU4_Init>

	/* Get the slice out of idle mode */
	XMC_CCU4_EnableClock(MODULE_PTR, SLICE_NUMBER);
 8006aba:	2100      	movs	r1, #0
 8006abc:	4829      	ldr	r0, [pc, #164]	; (8006b64 <BSP_CCU4_Init+0xec>)
 8006abe:	f7ff ff67 	bl	8006990 <XMC_CCU4_EnableClock>
/* Start the prescaler and restore clocks to slices */
	XMC_CCU4_StartPrescaler(MODULE_PTR);
 8006ac2:	4828      	ldr	r0, [pc, #160]	; (8006b64 <BSP_CCU4_Init+0xec>)
 8006ac4:	f7ff ff54 	bl	8006970 <XMC_CCU4_StartPrescaler>

/* Initialize the Slice */
	XMC_CCU4_SLICE_CompareInit(SLICE_PTR, &g_timer_object);
 8006ac8:	f107 0308 	add.w	r3, r7, #8
 8006acc:	4619      	mov	r1, r3
 8006ace:	4826      	ldr	r0, [pc, #152]	; (8006b68 <BSP_CCU4_Init+0xf0>)
 8006ad0:	f001 fb22 	bl	8008118 <XMC_CCU4_SLICE_CompareInit>
/* Enable compare match and period match events */
	XMC_CCU4_SLICE_EnableEvent(SLICE_PTR, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	4824      	ldr	r0, [pc, #144]	; (8006b68 <BSP_CCU4_Init+0xf0>)
 8006ad8:	f7ff ffa6 	bl	8006a28 <XMC_CCU4_SLICE_EnableEvent>
	XMC_CCU4_SLICE_EnableEvent(SLICE_PTR, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
 8006adc:	2102      	movs	r1, #2
 8006ade:	4822      	ldr	r0, [pc, #136]	; (8006b68 <BSP_CCU4_Init+0xf0>)
 8006ae0:	f7ff ffa2 	bl	8006a28 <XMC_CCU4_SLICE_EnableEvent>
/* Connect period match event to SR0 */
	XMC_CCU4_SLICE_SetInterruptNode(SLICE_PTR, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH, XMC_CCU4_SLICE_SR_ID_0);
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	2100      	movs	r1, #0
 8006ae8:	481f      	ldr	r0, [pc, #124]	; (8006b68 <BSP_CCU4_Init+0xf0>)
 8006aea:	f001 fbe3 	bl	80082b4 <XMC_CCU4_SLICE_SetInterruptNode>

/* Connect compare match event to SR1 */
	XMC_CCU4_SLICE_SetInterruptNode(SLICE_PTR, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP, XMC_CCU4_SLICE_SR_ID_1);
 8006aee:	2201      	movs	r2, #1
 8006af0:	2102      	movs	r1, #2
 8006af2:	481d      	ldr	r0, [pc, #116]	; (8006b68 <BSP_CCU4_Init+0xf0>)
 8006af4:	f001 fbde 	bl	80082b4 <XMC_CCU4_SLICE_SetInterruptNode>

/* Configure NVIC */
	/* Set priority */
	NVIC_SetPriority(CCU40_0_IRQn, 10U);
 8006af8:	210a      	movs	r1, #10
 8006afa:	202c      	movs	r0, #44	; 0x2c
 8006afc:	f7ff ff0e 	bl	800691c <NVIC_SetPriority>
	NVIC_SetPriority(CCU40_1_IRQn, 10U);
 8006b00:	210a      	movs	r1, #10
 8006b02:	202d      	movs	r0, #45	; 0x2d
 8006b04:	f7ff ff0a 	bl	800691c <NVIC_SetPriority>
	//NVIC_SetPriority(CCU40_3_IRQn, 10U);
	/* Enable IRQ */
	NVIC_EnableIRQ(CCU40_0_IRQn);
 8006b08:	202c      	movs	r0, #44	; 0x2c
 8006b0a:	f7ff feef 	bl	80068ec <NVIC_EnableIRQ>
	NVIC_EnableIRQ(CCU40_1_IRQn);
 8006b0e:	202d      	movs	r0, #45	; 0x2d
 8006b10:	f7ff feec 	bl	80068ec <NVIC_EnableIRQ>
	/* Program a very large value into PR and CR */
	XMC_CCU4_SLICE_SetTimerPeriodMatch(SLICE_PTR, PERIODE); //65500U
 8006b14:	f242 419e 	movw	r1, #9374	; 0x249e
 8006b18:	4813      	ldr	r0, [pc, #76]	; (8006b68 <BSP_CCU4_Init+0xf0>)
 8006b1a:	f7ff ff59 	bl	80069d0 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
	XMC_CCU4_SLICE_SetTimerCompareMatch(SLICE_PTR, CAPTURE1);//32000U
 8006b1e:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8006b22:	4811      	ldr	r0, [pc, #68]	; (8006b68 <BSP_CCU4_Init+0xf0>)
 8006b24:	f7ff ff62 	bl	80069ec <XMC_CCU4_SLICE_SetTimerCompareMatch>

	/* Enable shadow transfer */
	XMC_CCU4_EnableShadowTransfer(MODULE_PTR, 							\
 8006b28:	2105      	movs	r1, #5
 8006b2a:	480e      	ldr	r0, [pc, #56]	; (8006b64 <BSP_CCU4_Init+0xec>)
 8006b2c:	f7ff ff6c 	bl	8006a08 <XMC_CCU4_EnableShadowTransfer>
			(uint32_t)(XMC_CCU4_SHADOW_TRANSFER_SLICE_0|				\
			XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_0));
	/* Configure Event-1 and map it to Input-I */
	XMC_CCU4_SLICE_ConfigureEvent(SLICE_PTR, XMC_CCU4_SLICE_EVENT_0, &config);
 8006b30:	1d3b      	adds	r3, r7, #4
 8006b32:	461a      	mov	r2, r3
 8006b34:	2101      	movs	r1, #1
 8006b36:	480c      	ldr	r0, [pc, #48]	; (8006b68 <BSP_CCU4_Init+0xf0>)
 8006b38:	f001 fb52 	bl	80081e0 <XMC_CCU4_SLICE_ConfigureEvent>
	/* Map Event-1 to Start function */
	XMC_CCU4_SLICE_StartConfig(SLICE_PTR, XMC_CCU4_SLICE_EVENT_0, XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR);
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	2101      	movs	r1, #1
 8006b40:	4809      	ldr	r0, [pc, #36]	; (8006b68 <BSP_CCU4_Init+0xf0>)
 8006b42:	f001 fb1f 	bl	8008184 <XMC_CCU4_SLICE_StartConfig>

	/* Generate an external start trigger */
	XMC_SCU_SetCcuTriggerHigh(CAPCOM_MASK);
 8006b46:	2001      	movs	r0, #1
 8006b48:	f7ff ff84 	bl	8006a54 <XMC_SCU_SetCcuTriggerHigh>
	XMC_CCU4_EnableClock(MODULE_PTR, SLICE_NUMBER);
 8006b4c:	2100      	movs	r1, #0
 8006b4e:	4805      	ldr	r0, [pc, #20]	; (8006b64 <BSP_CCU4_Init+0xec>)
 8006b50:	f7ff ff1e 	bl	8006990 <XMC_CCU4_EnableClock>
	XMC_CCU4_SLICE_StartTimer(SLICE_PTR);
 8006b54:	4804      	ldr	r0, [pc, #16]	; (8006b68 <BSP_CCU4_Init+0xf0>)
 8006b56:	f7ff ff2f 	bl	80069b8 <XMC_CCU4_SLICE_StartTimer>
	return true;
 8006b5a:	2301      	movs	r3, #1
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	4000c000 	.word	0x4000c000
 8006b68:	4000c100 	.word	0x4000c100

08006b6c <CCU40_0_SetCapture>:

void CCU40_0_SetCapture(int dc){
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
	XMC_CCU4_SLICE_SetTimerCompareMatch(SLICE_PTR, (PERIODE/(dc*10)));
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	4613      	mov	r3, r2
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4413      	add	r3, r2
 8006b7c:	005b      	lsls	r3, r3, #1
 8006b7e:	461a      	mov	r2, r3
 8006b80:	f242 439e 	movw	r3, #9374	; 0x249e
 8006b84:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	4805      	ldr	r0, [pc, #20]	; (8006ba4 <CCU40_0_SetCapture+0x38>)
 8006b8e:	f7ff ff2d 	bl	80069ec <XMC_CCU4_SLICE_SetTimerCompareMatch>
	XMC_CCU4_EnableShadowTransfer(MODULE_PTR,XMC_CCU4_SHADOW_TRANSFER_SLICE_0);
 8006b92:	2101      	movs	r1, #1
 8006b94:	4804      	ldr	r0, [pc, #16]	; (8006ba8 <CCU40_0_SetCapture+0x3c>)
 8006b96:	f7ff ff37 	bl	8006a08 <XMC_CCU4_EnableShadowTransfer>
}
 8006b9a:	bf00      	nop
 8006b9c:	3708      	adds	r7, #8
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	4000c100 	.word	0x4000c100
 8006ba8:	4000c000 	.word	0x4000c000

08006bac <XMC_SCU_SetCcuTriggerHigh>:
 * The input signal for the CCU slice should be selected as SCU input.
 * The above mentioned configurations can be made using the CCU LLD API XMC_CCU4_SLICE_StartConfig(). 
 * CCU timer slice should be started using XMC_CCU4_SLICE_StartTimer() before triggering 
 * the timer using this API.<BR>
 * \par<b>Related APIs:</b><BR>
 * XMC_CCU4_SLICE_StartConfig(), XMC_CCU4_SLICE_SetInput(), XMC_SCU_SetCcuTriggerLow()\n\n\n
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 */
 8006bb4:	4905      	ldr	r1, [pc, #20]	; (8006bcc <XMC_SCU_SetCcuTriggerHigh+0x20>)
 8006bb6:	4b05      	ldr	r3, [pc, #20]	; (8006bcc <XMC_SCU_SetCcuTriggerHigh+0x20>)
 8006bb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	64cb      	str	r3, [r1, #76]	; 0x4c
__STATIC_INLINE void XMC_SCU_SetCcuTriggerHigh(const uint32_t trigger)
 8006bc0:	bf00      	nop
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bc80      	pop	{r7}
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	50004000 	.word	0x50004000

08006bd0 <XMC_SCU_SetCcuTriggerLow>:
 * The input signal for the CCU slice should be selected as SCU input.
 * The above mentioned configurations can be made using the CCU LLD API XMC_CCU4_SLICE_StartConfig(). 
 * CCU timer slice should be started using XMC_CCU4_SLICE_StartTimer() before triggering 
 * the timer using this API.<BR>
 * \par<b>Related APIs:</b><BR>
 * XMC_CCU4_SLICE_StartConfig(), XMC_CCU4_SLICE_SetInput(), XMC_SCU_SetCcuTriggerHigh()\n\n\n
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 */
 8006bd8:	4905      	ldr	r1, [pc, #20]	; (8006bf0 <XMC_SCU_SetCcuTriggerLow+0x20>)
 8006bda:	4b05      	ldr	r3, [pc, #20]	; (8006bf0 <XMC_SCU_SetCcuTriggerLow+0x20>)
 8006bdc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	43db      	mvns	r3, r3
 8006be2:	4013      	ands	r3, r2
 8006be4:	64cb      	str	r3, [r1, #76]	; 0x4c
__STATIC_INLINE void XMC_SCU_SetCcuTriggerLow(const uint32_t trigger)
 8006be6:	bf00      	nop
 8006be8:	370c      	adds	r7, #12
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bc80      	pop	{r7}
 8006bee:	4770      	bx	lr
 8006bf0:	50004000 	.word	0x50004000

08006bf4 <XMC_CCU4_SLICE_ClearEvent>:
/**
 * @param slice Constant pointer to CC4 Slice
 * @param reg_num The capture register from which the captured value is to be retrieved
 *                Range: [0,3]
 * @return <BR>
 *    uint32_t  Returns the Capture register value.
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	70fb      	strb	r3, [r7, #3]
 *              Range: [0 to 0x1FFFFF]
 *
 * \par<b>Description:</b><br>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006c06:	78fb      	ldrb	r3, [r7, #3]
 8006c08:	2101      	movs	r1, #1
 8006c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8006c0e:	431a      	orrs	r2, r3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 * Retrieves timer value which has been captured in the Capture registers, by reading CC4yCV[\b reg_num] register.\n\n
 8006c16:	bf00      	nop
 8006c18:	370c      	adds	r7, #12
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bc80      	pop	{r7}
 8006c1e:	4770      	bx	lr

08006c20 <BSP_IntDisAll>:
 * \params   none
 * \returns  none
 * \brief    disable all interrupts
 */
void  BSP_IntDisAll (void)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	af00      	add	r7, sp, #0
	CPU_IntDis();
 8006c24:	f7f9 fb58 	bl	80002d8 <CPU_IntDis>
}
 8006c28:	bf00      	nop
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <BSP_IntEn>:
 * \params   int_id ... interrupt to enable
 * \returns  none
 * \brief    enable interrupt
 */
void  BSP_IntEn (CPU_DATA  int_id)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
	if (int_id < BSP_INT_ID_MAX) {
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2b6f      	cmp	r3, #111	; 0x6f
 8006c38:	d806      	bhi.n	8006c48 <BSP_IntEn+0x1c>
		CPU_IntSrcEn (int_id + 16);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	3310      	adds	r3, #16
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7fb fafe 	bl	8002244 <CPU_IntSrcEn>
	}
}
 8006c48:	bf00      	nop
 8006c4a:	3708      	adds	r7, #8
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <BSP_IntVectSet>:
 *           isr ...... handler to assign
 * \returns  none
 * \brief    assign ISR handler
 */
void  BSP_IntVectSet (CPU_DATA int_id, CPU_FNCT_VOID  isr)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
	CPU_SR_ALLOC();
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	60fb      	str	r3, [r7, #12]

	if (int_id < BSP_INT_ID_MAX) {
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2b6f      	cmp	r3, #111	; 0x6f
 8006c62:	d80a      	bhi.n	8006c7a <BSP_IntVectSet+0x2a>
		CPU_CRITICAL_ENTER();
 8006c64:	f7f9 fb3c 	bl	80002e0 <CPU_SR_Save>
 8006c68:	60f8      	str	r0, [r7, #12]
		BSP_IntVectTbl[int_id] = isr;
 8006c6a:	4906      	ldr	r1, [pc, #24]	; (8006c84 <BSP_IntVectSet+0x34>)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	683a      	ldr	r2, [r7, #0]
 8006c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		CPU_CRITICAL_EXIT();
 8006c74:	68f8      	ldr	r0, [r7, #12]
 8006c76:	f7f9 fb37 	bl	80002e8 <CPU_SR_Restore>
	}
}
 8006c7a:	bf00      	nop
 8006c7c:	3710      	adds	r7, #16
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	2000182c 	.word	0x2000182c

08006c88 <BSP_IntInit>:
 * \params   none
 * \returns  none
 * \brief    initialize interrupts
 */
void  BSP_IntInit (void)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	af00      	add	r7, sp, #0
	BSP_IntVectSet (USIC1_1_IRQn, BSP_IntHandler_Uart_Recive); //**
 8006c8c:	4908      	ldr	r1, [pc, #32]	; (8006cb0 <BSP_IntInit+0x28>)
 8006c8e:	205b      	movs	r0, #91	; 0x5b
 8006c90:	f7ff ffde 	bl	8006c50 <BSP_IntVectSet>
	BSP_IntVectSet (USIC1_0_IRQn, BSP_IntHandler_Uart_Recive); //**
 8006c94:	4906      	ldr	r1, [pc, #24]	; (8006cb0 <BSP_IntInit+0x28>)
 8006c96:	205a      	movs	r0, #90	; 0x5a
 8006c98:	f7ff ffda 	bl	8006c50 <BSP_IntVectSet>
	BSP_IntVectSet (CCU40_0_IRQn, CCU40_0_IRQHandler);
 8006c9c:	4905      	ldr	r1, [pc, #20]	; (8006cb4 <BSP_IntInit+0x2c>)
 8006c9e:	202c      	movs	r0, #44	; 0x2c
 8006ca0:	f7ff ffd6 	bl	8006c50 <BSP_IntVectSet>
	BSP_IntVectSet (CCU40_1_IRQn, CCU40_1_IRQHandler);
 8006ca4:	4904      	ldr	r1, [pc, #16]	; (8006cb8 <BSP_IntInit+0x30>)
 8006ca6:	202d      	movs	r0, #45	; 0x2d
 8006ca8:	f7ff ffd2 	bl	8006c50 <BSP_IntVectSet>
}
 8006cac:	bf00      	nop
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	08006cf1 	.word	0x08006cf1
 8006cb4:	08006cbd 	.word	0x08006cbd
 8006cb8:	08006cdd 	.word	0x08006cdd

08006cbc <CCU40_0_IRQHandler>:

static void CCU40_0_IRQHandler(void)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	af00      	add	r7, sp, #0
  XMC_CCU4_SLICE_ClearEvent(SLICE_PTR, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8006cc0:	2100      	movs	r1, #0
 8006cc2:	4805      	ldr	r0, [pc, #20]	; (8006cd8 <CCU40_0_IRQHandler+0x1c>)
 8006cc4:	f7ff ff96 	bl	8006bf4 <XMC_CCU4_SLICE_ClearEvent>
  //APP_TRACE_INFO ("sH ...\n");
  XMC_SCU_SetCcuTriggerLow(CAPCOM_MASK);
 8006cc8:	2001      	movs	r0, #1
 8006cca:	f7ff ff81 	bl	8006bd0 <XMC_SCU_SetCcuTriggerLow>
  XMC_SCU_SetCcuTriggerHigh(CAPCOM_MASK);
 8006cce:	2001      	movs	r0, #1
 8006cd0:	f7ff ff6c 	bl	8006bac <XMC_SCU_SetCcuTriggerHigh>
}
 8006cd4:	bf00      	nop
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	4000c100 	.word	0x4000c100

08006cdc <CCU40_1_IRQHandler>:

static void CCU40_1_IRQHandler(void){
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	af00      	add	r7, sp, #0

	XMC_CCU4_SLICE_ClearEvent(SLICE_PTR,  XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
 8006ce0:	2102      	movs	r1, #2
 8006ce2:	4802      	ldr	r0, [pc, #8]	; (8006cec <CCU40_1_IRQHandler+0x10>)
 8006ce4:	f7ff ff86 	bl	8006bf4 <XMC_CCU4_SLICE_ClearEvent>
		//APP_TRACE_INFO ("sL ...\n");
}
 8006ce8:	bf00      	nop
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	4000c100 	.word	0x4000c100

08006cf0 <BSP_IntHandler_Uart_Recive>:
 * \returns  none
 * \brief    UART interrupt handler
 *           https://doc.micrium.com/display/osiiidoc/Keeping+the+Data+in+Scope
 */
static  void  BSP_IntHandler_Uart_Recive (void)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af02      	add	r7, sp, #8
	static CPU_CHAR    *RxDataPtr  = NULL ;
	static CPU_INT32U  RxDataCtr = 0;
	static CPU_CHAR    msg_receiving = 0;

	// receive byte
	RxData = XMC_UART_CH_GetReceivedData (XMC_UART1_CH1);                   // <1>
 8006cf6:	4838      	ldr	r0, [pc, #224]	; (8006dd8 <BSP_IntHandler_Uart_Recive+0xe8>)
 8006cf8:	f001 fcfa 	bl	80086f0 <XMC_UART_CH_GetReceivedData>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	71fb      	strb	r3, [r7, #7]

	// is the character a "start of packet" character?                      // <2>
	if ( ( (int) RxData == Start_of_Packet) && msg_receiving == 0) {
 8006d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d04:	4a35      	ldr	r2, [pc, #212]	; (8006ddc <BSP_IntHandler_Uart_Recive+0xec>)
 8006d06:	7812      	ldrb	r2, [r2, #0]
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d116      	bne.n	8006d3a <BSP_IntHandler_Uart_Recive+0x4a>
 8006d0c:	4b34      	ldr	r3, [pc, #208]	; (8006de0 <BSP_IntHandler_Uart_Recive+0xf0>)
 8006d0e:	f993 3000 	ldrsb.w	r3, [r3]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d111      	bne.n	8006d3a <BSP_IntHandler_Uart_Recive+0x4a>
		// allocate a memory block
		RxDataPtr = (CPU_CHAR *) OSMemGet (&Mem_Partition, &err);
 8006d16:	1d3b      	adds	r3, r7, #4
 8006d18:	4619      	mov	r1, r3
 8006d1a:	4832      	ldr	r0, [pc, #200]	; (8006de4 <BSP_IntHandler_Uart_Recive+0xf4>)
 8006d1c:	f7ff fa4c 	bl	80061b8 <OSMemGet>
 8006d20:	4602      	mov	r2, r0
 8006d22:	4b31      	ldr	r3, [pc, #196]	; (8006de8 <BSP_IntHandler_Uart_Recive+0xf8>)
 8006d24:	601a      	str	r2, [r3, #0]
		if (err != OS_ERR_NONE)
 8006d26:	88bb      	ldrh	r3, [r7, #4]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d003      	beq.n	8006d34 <BSP_IntHandler_Uart_Recive+0x44>
			APP_TRACE_DBG ("Error OSMemGet: BSP_IntHandler_Uart_Recive\n");
 8006d2c:	482f      	ldr	r0, [pc, #188]	; (8006dec <BSP_IntHandler_Uart_Recive+0xfc>)
 8006d2e:	f001 feff 	bl	8008b30 <puts>
 8006d32:	e002      	b.n	8006d3a <BSP_IntHandler_Uart_Recive+0x4a>
		else
			msg_receiving = 1;
 8006d34:	4b2a      	ldr	r3, [pc, #168]	; (8006de0 <BSP_IntHandler_Uart_Recive+0xf0>)
 8006d36:	2201      	movs	r2, #1
 8006d38:	701a      	strb	r2, [r3, #0]

	// receive characters and put them into the memory partition            // <3>
	// until we detect and "end of packet character"
	// NOTE: the message itself may also contain a "start of packet character"
	//       but no "end of packet character"
	if ( ( (int) RxData != Start_of_Packet) && ( (int) RxData != End_of_Packet)
 8006d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d3e:	4a27      	ldr	r2, [pc, #156]	; (8006ddc <BSP_IntHandler_Uart_Recive+0xec>)
 8006d40:	7812      	ldrb	r2, [r2, #0]
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d018      	beq.n	8006d78 <BSP_IntHandler_Uart_Recive+0x88>
 8006d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d4a:	4a29      	ldr	r2, [pc, #164]	; (8006df0 <BSP_IntHandler_Uart_Recive+0x100>)
 8006d4c:	7812      	ldrb	r2, [r2, #0]
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d012      	beq.n	8006d78 <BSP_IntHandler_Uart_Recive+0x88>
	     && msg_receiving == 1) {
 8006d52:	4b23      	ldr	r3, [pc, #140]	; (8006de0 <BSP_IntHandler_Uart_Recive+0xf0>)
 8006d54:	f993 3000 	ldrsb.w	r3, [r3]
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d10d      	bne.n	8006d78 <BSP_IntHandler_Uart_Recive+0x88>
		// put byte into the memory partition at the respective address
		*RxDataPtr = RxData;
 8006d5c:	4b22      	ldr	r3, [pc, #136]	; (8006de8 <BSP_IntHandler_Uart_Recive+0xf8>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	79fa      	ldrb	r2, [r7, #7]
 8006d62:	701a      	strb	r2, [r3, #0]
		// increment the address to point to the next location
		RxDataPtr++;
 8006d64:	4b20      	ldr	r3, [pc, #128]	; (8006de8 <BSP_IntHandler_Uart_Recive+0xf8>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	3301      	adds	r3, #1
 8006d6a:	4a1f      	ldr	r2, [pc, #124]	; (8006de8 <BSP_IntHandler_Uart_Recive+0xf8>)
 8006d6c:	6013      	str	r3, [r2, #0]
		// increment the receive counter
		RxDataCtr++;
 8006d6e:	4b21      	ldr	r3, [pc, #132]	; (8006df4 <BSP_IntHandler_Uart_Recive+0x104>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	3301      	adds	r3, #1
 8006d74:	4a1f      	ldr	r2, [pc, #124]	; (8006df4 <BSP_IntHandler_Uart_Recive+0x104>)
 8006d76:	6013      	str	r3, [r2, #0]
	}

	// is the character a "end of packet" character?                        // <4>
	if ( ( (int) RxData == End_of_Packet) && msg_receiving == 1) {
 8006d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d7c:	4a1c      	ldr	r2, [pc, #112]	; (8006df0 <BSP_IntHandler_Uart_Recive+0x100>)
 8006d7e:	7812      	ldrb	r2, [r2, #0]
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d124      	bne.n	8006dce <BSP_IntHandler_Uart_Recive+0xde>
 8006d84:	4b16      	ldr	r3, [pc, #88]	; (8006de0 <BSP_IntHandler_Uart_Recive+0xf0>)
 8006d86:	f993 3000 	ldrsb.w	r3, [r3]
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d11f      	bne.n	8006dce <BSP_IntHandler_Uart_Recive+0xde>
		// send the message to the application task - to that end put a pointer to
		// the memory block into the queue to the application task
		OSQPost ( (OS_Q      *) &UART_ISR,
 8006d8e:	4b16      	ldr	r3, [pc, #88]	; (8006de8 <BSP_IntHandler_Uart_Recive+0xf8>)
 8006d90:	681a      	ldr	r2, [r3, #0]
			  (void      *) (RxDataPtr - RxDataCtr),
 8006d92:	4b18      	ldr	r3, [pc, #96]	; (8006df4 <BSP_IntHandler_Uart_Recive+0x104>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	425b      	negs	r3, r3
 8006d98:	18d1      	adds	r1, r2, r3
			  (OS_MSG_SIZE) RxDataCtr + 1,
 8006d9a:	4b16      	ldr	r3, [pc, #88]	; (8006df4 <BSP_IntHandler_Uart_Recive+0x104>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	b29b      	uxth	r3, r3

	// is the character a "end of packet" character?                        // <4>
	if ( ( (int) RxData == End_of_Packet) && msg_receiving == 1) {
		// send the message to the application task - to that end put a pointer to
		// the memory block into the queue to the application task
		OSQPost ( (OS_Q      *) &UART_ISR,
 8006da0:	3301      	adds	r3, #1
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	1d3b      	adds	r3, r7, #4
 8006da6:	9300      	str	r3, [sp, #0]
 8006da8:	2300      	movs	r3, #0
 8006daa:	4813      	ldr	r0, [pc, #76]	; (8006df8 <BSP_IntHandler_Uart_Recive+0x108>)
 8006dac:	f7fb fd28 	bl	8002800 <OSQPost>
			  (void      *) (RxDataPtr - RxDataCtr),
			  (OS_MSG_SIZE) RxDataCtr + 1,
			  (OS_OPT)      OS_OPT_POST_FIFO,
			  (OS_ERR    *) &err);
		if (err != OS_ERR_NONE)
 8006db0:	88bb      	ldrh	r3, [r7, #4]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d002      	beq.n	8006dbc <BSP_IntHandler_Uart_Recive+0xcc>
			APP_TRACE_DBG ("Error OSQPost: BSP_IntHandler_Uart_Recive\n");
 8006db6:	4811      	ldr	r0, [pc, #68]	; (8006dfc <BSP_IntHandler_Uart_Recive+0x10c>)
 8006db8:	f001 feba 	bl	8008b30 <puts>

		// clear the receive pointer and counter                              // <5>
		RxDataPtr = NULL;
 8006dbc:	4b0a      	ldr	r3, [pc, #40]	; (8006de8 <BSP_IntHandler_Uart_Recive+0xf8>)
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	601a      	str	r2, [r3, #0]
		RxDataCtr = 0;
 8006dc2:	4b0c      	ldr	r3, [pc, #48]	; (8006df4 <BSP_IntHandler_Uart_Recive+0x104>)
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	601a      	str	r2, [r3, #0]
		// ready for a next message
		msg_receiving = 0;
 8006dc8:	4b05      	ldr	r3, [pc, #20]	; (8006de0 <BSP_IntHandler_Uart_Recive+0xf0>)
 8006dca:	2200      	movs	r2, #0
 8006dcc:	701a      	strb	r2, [r3, #0]
	}
}
 8006dce:	bf00      	nop
 8006dd0:	3708      	adds	r7, #8
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	48020200 	.word	0x48020200
 8006ddc:	20000001 	.word	0x20000001
 8006de0:	200019ec 	.word	0x200019ec
 8006de4:	20001b34 	.word	0x20001b34
 8006de8:	200019f0 	.word	0x200019f0
 8006dec:	0800f000 	.word	0x0800f000
 8006df0:	20000002 	.word	0x20000002
 8006df4:	200019f4 	.word	0x200019f4
 8006df8:	20001ad4 	.word	0x20001ad4
 8006dfc:	0800f02c 	.word	0x0800f02c

08006e00 <BSP_IntHandlerSCU>:
 * \params   none
 * \returns  none
 * \brief    handle an interrupt
 */
void BSP_IntHandlerSCU (void)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_SCU);
 8006e04:	2000      	movs	r0, #0
 8006e06:	f000 fb23 	bl	8007450 <BSP_IntHandler>
}
 8006e0a:	bf00      	nop
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop

08006e10 <BSP_IntHandlerERU0_00>:
void BSP_IntHandlerERU0_00 (void)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU0_00);
 8006e14:	2001      	movs	r0, #1
 8006e16:	f000 fb1b 	bl	8007450 <BSP_IntHandler>
}
 8006e1a:	bf00      	nop
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop

08006e20 <BSP_IntHandlerERU0_01>:
void BSP_IntHandlerERU0_01 (void)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU0_01);
 8006e24:	2002      	movs	r0, #2
 8006e26:	f000 fb13 	bl	8007450 <BSP_IntHandler>
}
 8006e2a:	bf00      	nop
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop

08006e30 <BSP_IntHandlerERU0_02>:
void BSP_IntHandlerERU0_02 (void)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU0_02);
 8006e34:	2003      	movs	r0, #3
 8006e36:	f000 fb0b 	bl	8007450 <BSP_IntHandler>
}
 8006e3a:	bf00      	nop
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop

08006e40 <BSP_IntHandlerERU0_03>:
void BSP_IntHandlerERU0_03 (void)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU0_03);
 8006e44:	2004      	movs	r0, #4
 8006e46:	f000 fb03 	bl	8007450 <BSP_IntHandler>
}
 8006e4a:	bf00      	nop
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop

08006e50 <BSP_IntHandlerERU1_00>:
void BSP_IntHandlerERU1_00 (void)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU1_00);
 8006e54:	2005      	movs	r0, #5
 8006e56:	f000 fafb 	bl	8007450 <BSP_IntHandler>
}
 8006e5a:	bf00      	nop
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop

08006e60 <BSP_IntHandlerERU1_01>:
void BSP_IntHandlerERU1_01 (void)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU1_01);
 8006e64:	2006      	movs	r0, #6
 8006e66:	f000 faf3 	bl	8007450 <BSP_IntHandler>
}
 8006e6a:	bf00      	nop
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop

08006e70 <BSP_IntHandlerERU1_02>:
void BSP_IntHandlerERU1_02 (void)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU1_02);
 8006e74:	2007      	movs	r0, #7
 8006e76:	f000 faeb 	bl	8007450 <BSP_IntHandler>
}
 8006e7a:	bf00      	nop
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop

08006e80 <BSP_IntHandlerERU1_03>:
void BSP_IntHandlerERU1_03 (void)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU1_03);
 8006e84:	2008      	movs	r0, #8
 8006e86:	f000 fae3 	bl	8007450 <BSP_IntHandler>
}
 8006e8a:	bf00      	nop
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop

08006e90 <BSP_IntHandlerPMU0_00>:
void BSP_IntHandlerPMU0_00 (void)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_PMU0_00);
 8006e94:	200c      	movs	r0, #12
 8006e96:	f000 fadb 	bl	8007450 <BSP_IntHandler>
}
 8006e9a:	bf00      	nop
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop

08006ea0 <BSP_IntHandlerVADC0_C0_00>:
void BSP_IntHandlerVADC0_C0_00 (void)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_C0_00);
 8006ea4:	200e      	movs	r0, #14
 8006ea6:	f000 fad3 	bl	8007450 <BSP_IntHandler>
}
 8006eaa:	bf00      	nop
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop

08006eb0 <BSP_IntHandlerVADC0_C0_01>:
void BSP_IntHandlerVADC0_C0_01 (void)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_C0_01);
 8006eb4:	200f      	movs	r0, #15
 8006eb6:	f000 facb 	bl	8007450 <BSP_IntHandler>
}
 8006eba:	bf00      	nop
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop

08006ec0 <BSP_IntHandlerVADC0_C0_02>:
void BSP_IntHandlerVADC0_C0_02 (void)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_C0_02);
 8006ec4:	2010      	movs	r0, #16
 8006ec6:	f000 fac3 	bl	8007450 <BSP_IntHandler>
}
 8006eca:	bf00      	nop
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop

08006ed0 <BSP_IntHandlerVADC0_C0_03>:
void BSP_IntHandlerVADC0_C0_03 (void)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_C0_03);
 8006ed4:	2011      	movs	r0, #17
 8006ed6:	f000 fabb 	bl	8007450 <BSP_IntHandler>
}
 8006eda:	bf00      	nop
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop

08006ee0 <BSP_IntHandlerVADC0_G0_00>:
void BSP_IntHandlerVADC0_G0_00 (void)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G0_00);
 8006ee4:	2012      	movs	r0, #18
 8006ee6:	f000 fab3 	bl	8007450 <BSP_IntHandler>
}
 8006eea:	bf00      	nop
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop

08006ef0 <BSP_IntHandlerVADC0_G0_01>:
void BSP_IntHandlerVADC0_G0_01 (void)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G0_01);
 8006ef4:	2013      	movs	r0, #19
 8006ef6:	f000 faab 	bl	8007450 <BSP_IntHandler>
}
 8006efa:	bf00      	nop
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop

08006f00 <BSP_IntHandlerVADC0_G0_02>:
void BSP_IntHandlerVADC0_G0_02 (void)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G0_02);
 8006f04:	2014      	movs	r0, #20
 8006f06:	f000 faa3 	bl	8007450 <BSP_IntHandler>
}
 8006f0a:	bf00      	nop
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop

08006f10 <BSP_IntHandlerVADC0_G0_03>:
void BSP_IntHandlerVADC0_G0_03 (void)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G0_03);
 8006f14:	2015      	movs	r0, #21
 8006f16:	f000 fa9b 	bl	8007450 <BSP_IntHandler>
}
 8006f1a:	bf00      	nop
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop

08006f20 <BSP_IntHandlerVADC0_G1_00>:
void BSP_IntHandlerVADC0_G1_00 (void)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G1_00);
 8006f24:	2016      	movs	r0, #22
 8006f26:	f000 fa93 	bl	8007450 <BSP_IntHandler>
}
 8006f2a:	bf00      	nop
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop

08006f30 <BSP_IntHandlerVADC0_G1_01>:
void BSP_IntHandlerVADC0_G1_01 (void)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G1_01);
 8006f34:	2017      	movs	r0, #23
 8006f36:	f000 fa8b 	bl	8007450 <BSP_IntHandler>
}
 8006f3a:	bf00      	nop
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop

08006f40 <BSP_IntHandlerVADC0_G1_02>:
void BSP_IntHandlerVADC0_G1_02 (void)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G1_02);
 8006f44:	2018      	movs	r0, #24
 8006f46:	f000 fa83 	bl	8007450 <BSP_IntHandler>
}
 8006f4a:	bf00      	nop
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop

08006f50 <BSP_IntHandlerVADC0_G1_03>:
void BSP_IntHandlerVADC0_G1_03 (void)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G1_03);
 8006f54:	2019      	movs	r0, #25
 8006f56:	f000 fa7b 	bl	8007450 <BSP_IntHandler>
}
 8006f5a:	bf00      	nop
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop

08006f60 <BSP_IntHandlerVADC0_G2_00>:
void BSP_IntHandlerVADC0_G2_00 (void)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G2_00);
 8006f64:	201a      	movs	r0, #26
 8006f66:	f000 fa73 	bl	8007450 <BSP_IntHandler>
}
 8006f6a:	bf00      	nop
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop

08006f70 <BSP_IntHandlerVADC0_G2_01>:
void BSP_IntHandlerVADC0_G2_01 (void)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G2_01);
 8006f74:	201b      	movs	r0, #27
 8006f76:	f000 fa6b 	bl	8007450 <BSP_IntHandler>
}
 8006f7a:	bf00      	nop
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop

08006f80 <BSP_IntHandlerVADC0_G2_02>:
void BSP_IntHandlerVADC0_G2_02 (void)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G2_02);
 8006f84:	201c      	movs	r0, #28
 8006f86:	f000 fa63 	bl	8007450 <BSP_IntHandler>
}
 8006f8a:	bf00      	nop
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop

08006f90 <BSP_IntHandlerVADC0_G2_03>:
void BSP_IntHandlerVADC0_G2_03 (void)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G2_03);
 8006f94:	201d      	movs	r0, #29
 8006f96:	f000 fa5b 	bl	8007450 <BSP_IntHandler>
}
 8006f9a:	bf00      	nop
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop

08006fa0 <BSP_IntHandlerVADC0_G3_00>:
void BSP_IntHandlerVADC0_G3_00 (void)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G3_00);
 8006fa4:	201e      	movs	r0, #30
 8006fa6:	f000 fa53 	bl	8007450 <BSP_IntHandler>
}
 8006faa:	bf00      	nop
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop

08006fb0 <BSP_IntHandlerVADC0_G3_01>:
void BSP_IntHandlerVADC0_G3_01 (void)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G3_01);
 8006fb4:	201f      	movs	r0, #31
 8006fb6:	f000 fa4b 	bl	8007450 <BSP_IntHandler>
}
 8006fba:	bf00      	nop
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop

08006fc0 <BSP_IntHandlerVADC0_G3_02>:
void BSP_IntHandlerVADC0_G3_02 (void)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G3_02);
 8006fc4:	2020      	movs	r0, #32
 8006fc6:	f000 fa43 	bl	8007450 <BSP_IntHandler>
}
 8006fca:	bf00      	nop
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop

08006fd0 <BSP_IntHandlerVADC0_G3_03>:
void BSP_IntHandlerVADC0_G3_03 (void)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G3_03);
 8006fd4:	2021      	movs	r0, #33	; 0x21
 8006fd6:	f000 fa3b 	bl	8007450 <BSP_IntHandler>
}
 8006fda:	bf00      	nop
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop

08006fe0 <BSP_IntHandlerDSD0_00>:
void BSP_IntHandlerDSD0_00 (void)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_00);
 8006fe4:	2022      	movs	r0, #34	; 0x22
 8006fe6:	f000 fa33 	bl	8007450 <BSP_IntHandler>
}
 8006fea:	bf00      	nop
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop

08006ff0 <BSP_IntHandlerDSD0_01>:
void BSP_IntHandlerDSD0_01 (void)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_01);
 8006ff4:	2023      	movs	r0, #35	; 0x23
 8006ff6:	f000 fa2b 	bl	8007450 <BSP_IntHandler>
}
 8006ffa:	bf00      	nop
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop

08007000 <BSP_IntHandlerDSD0_02>:
void BSP_IntHandlerDSD0_02 (void)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_02);
 8007004:	2024      	movs	r0, #36	; 0x24
 8007006:	f000 fa23 	bl	8007450 <BSP_IntHandler>
}
 800700a:	bf00      	nop
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop

08007010 <BSP_IntHandlerDSD0_03>:
void BSP_IntHandlerDSD0_03 (void)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_03);
 8007014:	2025      	movs	r0, #37	; 0x25
 8007016:	f000 fa1b 	bl	8007450 <BSP_IntHandler>
}
 800701a:	bf00      	nop
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop

08007020 <BSP_IntHandlerDSD0_04>:
void BSP_IntHandlerDSD0_04 (void)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_04);
 8007024:	2026      	movs	r0, #38	; 0x26
 8007026:	f000 fa13 	bl	8007450 <BSP_IntHandler>
}
 800702a:	bf00      	nop
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop

08007030 <BSP_IntHandlerDSD0_05>:
void BSP_IntHandlerDSD0_05 (void)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_05);
 8007034:	2027      	movs	r0, #39	; 0x27
 8007036:	f000 fa0b 	bl	8007450 <BSP_IntHandler>
}
 800703a:	bf00      	nop
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop

08007040 <BSP_IntHandlerDSD0_06>:
void BSP_IntHandlerDSD0_06 (void)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_06);
 8007044:	2028      	movs	r0, #40	; 0x28
 8007046:	f000 fa03 	bl	8007450 <BSP_IntHandler>
}
 800704a:	bf00      	nop
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop

08007050 <BSP_IntHandlerDSD0_07>:
void BSP_IntHandlerDSD0_07 (void)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_07);
 8007054:	2029      	movs	r0, #41	; 0x29
 8007056:	f000 f9fb 	bl	8007450 <BSP_IntHandler>
}
 800705a:	bf00      	nop
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop

08007060 <BSP_IntHandlerDAC0_00>:
void BSP_IntHandlerDAC0_00 (void)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DAC0_00);
 8007064:	202a      	movs	r0, #42	; 0x2a
 8007066:	f000 f9f3 	bl	8007450 <BSP_IntHandler>
}
 800706a:	bf00      	nop
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop

08007070 <BSP_IntHandlerDAC0_01>:
void BSP_IntHandlerDAC0_01 (void)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DAC0_01);
 8007074:	202b      	movs	r0, #43	; 0x2b
 8007076:	f000 f9eb 	bl	8007450 <BSP_IntHandler>
}
 800707a:	bf00      	nop
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop

08007080 <BSP_IntHandlerCCU40_00>:
void BSP_IntHandlerCCU40_00 (void)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU40_00);
 8007084:	202c      	movs	r0, #44	; 0x2c
 8007086:	f000 f9e3 	bl	8007450 <BSP_IntHandler>
}
 800708a:	bf00      	nop
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop

08007090 <BSP_IntHandlerCCU40_01>:
void BSP_IntHandlerCCU40_01 (void)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU40_01);
 8007094:	202d      	movs	r0, #45	; 0x2d
 8007096:	f000 f9db 	bl	8007450 <BSP_IntHandler>
}
 800709a:	bf00      	nop
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop

080070a0 <BSP_IntHandlerCCU40_02>:
void BSP_IntHandlerCCU40_02 (void)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU40_02);
 80070a4:	202e      	movs	r0, #46	; 0x2e
 80070a6:	f000 f9d3 	bl	8007450 <BSP_IntHandler>
}
 80070aa:	bf00      	nop
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop

080070b0 <BSP_IntHandlerCCU40_03>:
void BSP_IntHandlerCCU40_03 (void)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU40_03);
 80070b4:	202f      	movs	r0, #47	; 0x2f
 80070b6:	f000 f9cb 	bl	8007450 <BSP_IntHandler>
}
 80070ba:	bf00      	nop
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop

080070c0 <BSP_IntHandlerCCU41_00>:
void BSP_IntHandlerCCU41_00 (void)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU41_00);
 80070c4:	2030      	movs	r0, #48	; 0x30
 80070c6:	f000 f9c3 	bl	8007450 <BSP_IntHandler>
}
 80070ca:	bf00      	nop
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop

080070d0 <BSP_IntHandlerCCU41_01>:
void BSP_IntHandlerCCU41_01 (void)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU41_01);
 80070d4:	2031      	movs	r0, #49	; 0x31
 80070d6:	f000 f9bb 	bl	8007450 <BSP_IntHandler>
}
 80070da:	bf00      	nop
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop

080070e0 <BSP_IntHandlerCCU41_02>:
void BSP_IntHandlerCCU41_02 (void)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU41_02);
 80070e4:	2032      	movs	r0, #50	; 0x32
 80070e6:	f000 f9b3 	bl	8007450 <BSP_IntHandler>
}
 80070ea:	bf00      	nop
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop

080070f0 <BSP_IntHandlerCCU41_03>:
void BSP_IntHandlerCCU41_03 (void)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU41_03);
 80070f4:	2033      	movs	r0, #51	; 0x33
 80070f6:	f000 f9ab 	bl	8007450 <BSP_IntHandler>
}
 80070fa:	bf00      	nop
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop

08007100 <BSP_IntHandlerCCU42_00>:
void BSP_IntHandlerCCU42_00 (void)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU42_00);
 8007104:	2034      	movs	r0, #52	; 0x34
 8007106:	f000 f9a3 	bl	8007450 <BSP_IntHandler>
}
 800710a:	bf00      	nop
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop

08007110 <BSP_IntHandlerCCU42_01>:
void BSP_IntHandlerCCU42_01 (void)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU42_01);
 8007114:	2035      	movs	r0, #53	; 0x35
 8007116:	f000 f99b 	bl	8007450 <BSP_IntHandler>
}
 800711a:	bf00      	nop
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop

08007120 <BSP_IntHandlerCCU42_02>:
void BSP_IntHandlerCCU42_02 (void)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU42_02);
 8007124:	2036      	movs	r0, #54	; 0x36
 8007126:	f000 f993 	bl	8007450 <BSP_IntHandler>
}
 800712a:	bf00      	nop
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop

08007130 <BSP_IntHandlerCCU42_03>:
void BSP_IntHandlerCCU42_03 (void)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU42_03);
 8007134:	2037      	movs	r0, #55	; 0x37
 8007136:	f000 f98b 	bl	8007450 <BSP_IntHandler>
}
 800713a:	bf00      	nop
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop

08007140 <BSP_IntHandlerCCU43_00>:
void BSP_IntHandlerCCU43_00 (void)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU43_00);
 8007144:	2038      	movs	r0, #56	; 0x38
 8007146:	f000 f983 	bl	8007450 <BSP_IntHandler>
}
 800714a:	bf00      	nop
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop

08007150 <BSP_IntHandlerCCU43_01>:
void BSP_IntHandlerCCU43_01 (void)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU43_01);
 8007154:	2039      	movs	r0, #57	; 0x39
 8007156:	f000 f97b 	bl	8007450 <BSP_IntHandler>
}
 800715a:	bf00      	nop
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop

08007160 <BSP_IntHandlerCCU43_02>:
void BSP_IntHandlerCCU43_02 (void)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU43_02);
 8007164:	203a      	movs	r0, #58	; 0x3a
 8007166:	f000 f973 	bl	8007450 <BSP_IntHandler>
}
 800716a:	bf00      	nop
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop

08007170 <BSP_IntHandlerCCU43_03>:
void BSP_IntHandlerCCU43_03 (void)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU43_03);
 8007174:	203b      	movs	r0, #59	; 0x3b
 8007176:	f000 f96b 	bl	8007450 <BSP_IntHandler>
}
 800717a:	bf00      	nop
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop

08007180 <BSP_IntHandlerCCU80_00>:
void BSP_IntHandlerCCU80_00 (void)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU80_00);
 8007184:	203c      	movs	r0, #60	; 0x3c
 8007186:	f000 f963 	bl	8007450 <BSP_IntHandler>
}
 800718a:	bf00      	nop
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop

08007190 <BSP_IntHandlerCCU80_01>:
void BSP_IntHandlerCCU80_01 (void)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU80_01);
 8007194:	203d      	movs	r0, #61	; 0x3d
 8007196:	f000 f95b 	bl	8007450 <BSP_IntHandler>
}
 800719a:	bf00      	nop
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop

080071a0 <BSP_IntHandlerCCU80_02>:
void BSP_IntHandlerCCU80_02 (void)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU80_02);
 80071a4:	203e      	movs	r0, #62	; 0x3e
 80071a6:	f000 f953 	bl	8007450 <BSP_IntHandler>
}
 80071aa:	bf00      	nop
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop

080071b0 <BSP_IntHandlerCCU80_03>:
void BSP_IntHandlerCCU80_03 (void)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU80_03);
 80071b4:	203f      	movs	r0, #63	; 0x3f
 80071b6:	f000 f94b 	bl	8007450 <BSP_IntHandler>
}
 80071ba:	bf00      	nop
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop

080071c0 <BSP_IntHandlerCCU81_00>:
void BSP_IntHandlerCCU81_00 (void)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU81_00);
 80071c4:	2040      	movs	r0, #64	; 0x40
 80071c6:	f000 f943 	bl	8007450 <BSP_IntHandler>
}
 80071ca:	bf00      	nop
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop

080071d0 <BSP_IntHandlerCCU81_01>:
void BSP_IntHandlerCCU81_01 (void)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU81_01);
 80071d4:	2041      	movs	r0, #65	; 0x41
 80071d6:	f000 f93b 	bl	8007450 <BSP_IntHandler>
}
 80071da:	bf00      	nop
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop

080071e0 <BSP_IntHandlerCCU81_02>:
void BSP_IntHandlerCCU81_02 (void)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU81_02);
 80071e4:	2042      	movs	r0, #66	; 0x42
 80071e6:	f000 f933 	bl	8007450 <BSP_IntHandler>
}
 80071ea:	bf00      	nop
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop

080071f0 <BSP_IntHandlerCCU81_03>:
void BSP_IntHandlerCCU81_03 (void)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU81_03);
 80071f4:	2043      	movs	r0, #67	; 0x43
 80071f6:	f000 f92b 	bl	8007450 <BSP_IntHandler>
}
 80071fa:	bf00      	nop
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop

08007200 <BSP_IntHandlerPOSIF0_00>:
void BSP_IntHandlerPOSIF0_00 (void)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_POSIF0_00);
 8007204:	2044      	movs	r0, #68	; 0x44
 8007206:	f000 f923 	bl	8007450 <BSP_IntHandler>
}
 800720a:	bf00      	nop
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop

08007210 <BSP_IntHandlerPOSIF0_01>:
void BSP_IntHandlerPOSIF0_01 (void)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_POSIF0_01);
 8007214:	2045      	movs	r0, #69	; 0x45
 8007216:	f000 f91b 	bl	8007450 <BSP_IntHandler>
}
 800721a:	bf00      	nop
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop

08007220 <BSP_IntHandlerPOSIF1_00>:
void BSP_IntHandlerPOSIF1_00 (void)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_POSIF1_00);
 8007224:	2046      	movs	r0, #70	; 0x46
 8007226:	f000 f913 	bl	8007450 <BSP_IntHandler>
}
 800722a:	bf00      	nop
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop

08007230 <BSP_IntHandlerPOSIF1_01>:
void BSP_IntHandlerPOSIF1_01 (void)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_POSIF1_01);
 8007234:	2047      	movs	r0, #71	; 0x47
 8007236:	f000 f90b 	bl	8007450 <BSP_IntHandler>
}
 800723a:	bf00      	nop
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop

08007240 <BSP_IntHandlerCAN0_00>:
void BSP_IntHandlerCAN0_00 (void)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_00);
 8007244:	204c      	movs	r0, #76	; 0x4c
 8007246:	f000 f903 	bl	8007450 <BSP_IntHandler>
}
 800724a:	bf00      	nop
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop

08007250 <BSP_IntHandlerCAN0_01>:
void BSP_IntHandlerCAN0_01 (void)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_01);
 8007254:	204d      	movs	r0, #77	; 0x4d
 8007256:	f000 f8fb 	bl	8007450 <BSP_IntHandler>
}
 800725a:	bf00      	nop
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop

08007260 <BSP_IntHandlerCAN0_02>:
void BSP_IntHandlerCAN0_02 (void)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_02);
 8007264:	204e      	movs	r0, #78	; 0x4e
 8007266:	f000 f8f3 	bl	8007450 <BSP_IntHandler>
}
 800726a:	bf00      	nop
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop

08007270 <BSP_IntHandlerCAN0_03>:
void BSP_IntHandlerCAN0_03 (void)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_03);
 8007274:	204f      	movs	r0, #79	; 0x4f
 8007276:	f000 f8eb 	bl	8007450 <BSP_IntHandler>
}
 800727a:	bf00      	nop
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop

08007280 <BSP_IntHandlerCAN0_04>:
void BSP_IntHandlerCAN0_04 (void)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_04);
 8007284:	2050      	movs	r0, #80	; 0x50
 8007286:	f000 f8e3 	bl	8007450 <BSP_IntHandler>
}
 800728a:	bf00      	nop
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop

08007290 <BSP_IntHandlerCAN0_05>:
void BSP_IntHandlerCAN0_05 (void)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_05);
 8007294:	2051      	movs	r0, #81	; 0x51
 8007296:	f000 f8db 	bl	8007450 <BSP_IntHandler>
}
 800729a:	bf00      	nop
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop

080072a0 <BSP_IntHandlerCAN0_06>:
void BSP_IntHandlerCAN0_06 (void)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_06);
 80072a4:	2052      	movs	r0, #82	; 0x52
 80072a6:	f000 f8d3 	bl	8007450 <BSP_IntHandler>
}
 80072aa:	bf00      	nop
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop

080072b0 <BSP_IntHandlerCAN0_07>:
void BSP_IntHandlerCAN0_07 (void)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_07);
 80072b4:	2053      	movs	r0, #83	; 0x53
 80072b6:	f000 f8cb 	bl	8007450 <BSP_IntHandler>
}
 80072ba:	bf00      	nop
 80072bc:	bd80      	pop	{r7, pc}
 80072be:	bf00      	nop

080072c0 <BSP_IntHandlerUSIC0_00>:
void BSP_IntHandlerUSIC0_00 (void)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC0_00);
 80072c4:	2054      	movs	r0, #84	; 0x54
 80072c6:	f000 f8c3 	bl	8007450 <BSP_IntHandler>
}
 80072ca:	bf00      	nop
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop

080072d0 <BSP_IntHandlerUSIC0_01>:
void BSP_IntHandlerUSIC0_01 (void)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC0_01);
 80072d4:	2055      	movs	r0, #85	; 0x55
 80072d6:	f000 f8bb 	bl	8007450 <BSP_IntHandler>
}
 80072da:	bf00      	nop
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop

080072e0 <BSP_IntHandlerUSIC0_02>:
void BSP_IntHandlerUSIC0_02 (void)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC0_02);
 80072e4:	2056      	movs	r0, #86	; 0x56
 80072e6:	f000 f8b3 	bl	8007450 <BSP_IntHandler>
}
 80072ea:	bf00      	nop
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop

080072f0 <BSP_IntHandlerUSIC0_03>:
void BSP_IntHandlerUSIC0_03 (void)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC0_03);
 80072f4:	2057      	movs	r0, #87	; 0x57
 80072f6:	f000 f8ab 	bl	8007450 <BSP_IntHandler>
}
 80072fa:	bf00      	nop
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop

08007300 <BSP_IntHandlerUSIC0_04>:
void BSP_IntHandlerUSIC0_04 (void)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC0_04);
 8007304:	2058      	movs	r0, #88	; 0x58
 8007306:	f000 f8a3 	bl	8007450 <BSP_IntHandler>
}
 800730a:	bf00      	nop
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop

08007310 <BSP_IntHandlerUSIC0_05>:
void BSP_IntHandlerUSIC0_05 (void)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC0_05);
 8007314:	2059      	movs	r0, #89	; 0x59
 8007316:	f000 f89b 	bl	8007450 <BSP_IntHandler>
}
 800731a:	bf00      	nop
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop

08007320 <BSP_IntHandlerUSIC1_00>:
void BSP_IntHandlerUSIC1_00 (void)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC1_00);
 8007324:	205a      	movs	r0, #90	; 0x5a
 8007326:	f000 f893 	bl	8007450 <BSP_IntHandler>
}
 800732a:	bf00      	nop
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop

08007330 <BSP_IntHandlerUSIC1_01>:
void BSP_IntHandlerUSIC1_01 (void)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC1_01);
 8007334:	205b      	movs	r0, #91	; 0x5b
 8007336:	f000 f88b 	bl	8007450 <BSP_IntHandler>
}
 800733a:	bf00      	nop
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop

08007340 <BSP_IntHandlerUSIC1_02>:
void BSP_IntHandlerUSIC1_02 (void)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC1_02);
 8007344:	205c      	movs	r0, #92	; 0x5c
 8007346:	f000 f883 	bl	8007450 <BSP_IntHandler>
}
 800734a:	bf00      	nop
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop

08007350 <BSP_IntHandlerUSIC1_03>:
void BSP_IntHandlerUSIC1_03 (void)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC1_03);
 8007354:	205d      	movs	r0, #93	; 0x5d
 8007356:	f000 f87b 	bl	8007450 <BSP_IntHandler>
}
 800735a:	bf00      	nop
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop

08007360 <BSP_IntHandlerUSIC1_04>:
void BSP_IntHandlerUSIC1_04 (void)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC1_04);
 8007364:	205e      	movs	r0, #94	; 0x5e
 8007366:	f000 f873 	bl	8007450 <BSP_IntHandler>
}
 800736a:	bf00      	nop
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop

08007370 <BSP_IntHandlerUSIC1_05>:
void BSP_IntHandlerUSIC1_05 (void)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC1_05);
 8007374:	205f      	movs	r0, #95	; 0x5f
 8007376:	f000 f86b 	bl	8007450 <BSP_IntHandler>
}
 800737a:	bf00      	nop
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop

08007380 <BSP_IntHandlerUSIC2_00>:
void BSP_IntHandlerUSIC2_00 (void)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC2_00);
 8007384:	2060      	movs	r0, #96	; 0x60
 8007386:	f000 f863 	bl	8007450 <BSP_IntHandler>
}
 800738a:	bf00      	nop
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop

08007390 <BSP_IntHandlerUSIC2_01>:
void BSP_IntHandlerUSIC2_01 (void)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC2_01);
 8007394:	2061      	movs	r0, #97	; 0x61
 8007396:	f000 f85b 	bl	8007450 <BSP_IntHandler>
}
 800739a:	bf00      	nop
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop

080073a0 <BSP_IntHandlerUSIC2_02>:
void BSP_IntHandlerUSIC2_02 (void)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC2_02);
 80073a4:	2062      	movs	r0, #98	; 0x62
 80073a6:	f000 f853 	bl	8007450 <BSP_IntHandler>
}
 80073aa:	bf00      	nop
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop

080073b0 <BSP_IntHandlerUSIC2_03>:
void BSP_IntHandlerUSIC2_03 (void)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC2_03);
 80073b4:	2063      	movs	r0, #99	; 0x63
 80073b6:	f000 f84b 	bl	8007450 <BSP_IntHandler>
}
 80073ba:	bf00      	nop
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop

080073c0 <BSP_IntHandlerUSIC2_04>:
void BSP_IntHandlerUSIC2_04 (void)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC2_04);
 80073c4:	2064      	movs	r0, #100	; 0x64
 80073c6:	f000 f843 	bl	8007450 <BSP_IntHandler>
}
 80073ca:	bf00      	nop
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop

080073d0 <BSP_IntHandlerUSIC2_05>:
void BSP_IntHandlerUSIC2_05 (void)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC2_05);
 80073d4:	2065      	movs	r0, #101	; 0x65
 80073d6:	f000 f83b 	bl	8007450 <BSP_IntHandler>
}
 80073da:	bf00      	nop
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop

080073e0 <BSP_IntHandlerLEDTS0_00>:
void BSP_IntHandlerLEDTS0_00 (void)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_LEDTS0_00);
 80073e4:	2066      	movs	r0, #102	; 0x66
 80073e6:	f000 f833 	bl	8007450 <BSP_IntHandler>
}
 80073ea:	bf00      	nop
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop

080073f0 <BSP_IntHandlerFCE0_00>:
void BSP_IntHandlerFCE0_00 (void)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_FCE0_00);
 80073f4:	2068      	movs	r0, #104	; 0x68
 80073f6:	f000 f82b 	bl	8007450 <BSP_IntHandler>
}
 80073fa:	bf00      	nop
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop

08007400 <BSP_IntHandlerGPDMA0_00>:
void BSP_IntHandlerGPDMA0_00 (void)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_GPDMA0_00);
 8007404:	2069      	movs	r0, #105	; 0x69
 8007406:	f000 f823 	bl	8007450 <BSP_IntHandler>
}
 800740a:	bf00      	nop
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop

08007410 <BSP_IntHandlerSDMMC0_00>:
void BSP_IntHandlerSDMMC0_00 (void)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_SDMMC0_00);
 8007414:	206a      	movs	r0, #106	; 0x6a
 8007416:	f000 f81b 	bl	8007450 <BSP_IntHandler>
}
 800741a:	bf00      	nop
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop

08007420 <BSP_IntHandlerUSB0_00>:
void BSP_IntHandlerUSB0_00 (void)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USB0_00);
 8007424:	206b      	movs	r0, #107	; 0x6b
 8007426:	f000 f813 	bl	8007450 <BSP_IntHandler>
}
 800742a:	bf00      	nop
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop

08007430 <BSP_IntHandlerETH0_00>:
void BSP_IntHandlerETH0_00 (void)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ETH0_00);
 8007434:	206c      	movs	r0, #108	; 0x6c
 8007436:	f000 f80b 	bl	8007450 <BSP_IntHandler>
}
 800743a:	bf00      	nop
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop

08007440 <BSP_IntHandlerGPDMA1_00>:
void BSP_IntHandlerGPDMA1_00 (void)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_GPDMA1_00);
 8007444:	206e      	movs	r0, #110	; 0x6e
 8007446:	f000 f803 	bl	8007450 <BSP_IntHandler>
}
 800744a:	bf00      	nop
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop

08007450 <BSP_IntHandler>:
 * \params   int_id interrupt that will be handled
 * \returns  none
 * \brief    central interrupt handler
 */
static  void  BSP_IntHandler (CPU_DATA  int_id)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
	CPU_FNCT_VOID  isr;
	CPU_SR_ALLOC();
 8007458:	2300      	movs	r3, #0
 800745a:	60fb      	str	r3, [r7, #12]

	/* tell the OS that we are starting an ISR */
	CPU_CRITICAL_ENTER();
 800745c:	f7f8 ff40 	bl	80002e0 <CPU_SR_Save>
 8007460:	60f8      	str	r0, [r7, #12]
	OSIntEnter();
 8007462:	f7fc fb79 	bl	8003b58 <OSIntEnter>
	CPU_CRITICAL_EXIT();
 8007466:	68f8      	ldr	r0, [r7, #12]
 8007468:	f7f8 ff3e 	bl	80002e8 <CPU_SR_Restore>

	if (int_id < BSP_INT_ID_MAX) {
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2b6f      	cmp	r3, #111	; 0x6f
 8007470:	d809      	bhi.n	8007486 <BSP_IntHandler+0x36>
		isr = BSP_IntVectTbl[int_id];
 8007472:	4a08      	ldr	r2, [pc, #32]	; (8007494 <BSP_IntHandler+0x44>)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800747a:	60bb      	str	r3, [r7, #8]
		if (isr != (CPU_FNCT_VOID) 0) {
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d001      	beq.n	8007486 <BSP_IntHandler+0x36>
			isr();
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	4798      	blx	r3
		}
	}
	/* tell the OS that we are leaving an ISR */
	OSIntExit();
 8007486:	f7fc fb83 	bl	8003b90 <OSIntExit>
}
 800748a:	bf00      	nop
 800748c:	3710      	adds	r7, #16
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	2000182c 	.word	0x2000182c

08007498 <BSP_GPIO_Init>:
/**
 * @brief  Initialize UART1 CH1 - Tx=P0.1, Rx=P0.0, 9600-8N1
 * @return true on success, false otherwise
 */
_Bool BSP_GPIO_Init (void)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	af00      	add	r7, sp, #0

	XMC_GPIO_Init(SERVO_CCU4, &servo_config);
 800749c:	4a0d      	ldr	r2, [pc, #52]	; (80074d4 <BSP_GPIO_Init+0x3c>)
 800749e:	2103      	movs	r1, #3
 80074a0:	480d      	ldr	r0, [pc, #52]	; (80074d8 <BSP_GPIO_Init+0x40>)
 80074a2:	f001 f999 	bl	80087d8 <XMC_GPIO_Init>

	XMC_GPIO_SetMode(ENDSTOP1,XMC_GPIO_MODE_INPUT_PULL_DOWN);
 80074a6:	2208      	movs	r2, #8
 80074a8:	210f      	movs	r1, #15
 80074aa:	480b      	ldr	r0, [pc, #44]	; (80074d8 <BSP_GPIO_Init+0x40>)
 80074ac:	f001 f954 	bl	8008758 <XMC_GPIO_SetMode>
	XMC_GPIO_SetMode(ENDSTOP2,XMC_GPIO_MODE_INPUT_PULL_DOWN);
 80074b0:	2208      	movs	r2, #8
 80074b2:	210d      	movs	r1, #13
 80074b4:	4808      	ldr	r0, [pc, #32]	; (80074d8 <BSP_GPIO_Init+0x40>)
 80074b6:	f001 f94f 	bl	8008758 <XMC_GPIO_SetMode>
	XMC_GPIO_SetMode(ENDSTOP3,XMC_GPIO_MODE_INPUT_PULL_DOWN);
 80074ba:	2208      	movs	r2, #8
 80074bc:	210e      	movs	r1, #14
 80074be:	4806      	ldr	r0, [pc, #24]	; (80074d8 <BSP_GPIO_Init+0x40>)
 80074c0:	f001 f94a 	bl	8008758 <XMC_GPIO_SetMode>
	XMC_GPIO_SetMode(ENDSTOP4,XMC_GPIO_MODE_INPUT_PULL_DOWN);
 80074c4:	2208      	movs	r2, #8
 80074c6:	210c      	movs	r1, #12
 80074c8:	4803      	ldr	r0, [pc, #12]	; (80074d8 <BSP_GPIO_Init+0x40>)
 80074ca:	f001 f945 	bl	8008758 <XMC_GPIO_SetMode>

	return true;
 80074ce:	2301      	movs	r3, #1
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	bd80      	pop	{r7, pc}
 80074d4:	20000004 	.word	0x20000004
 80074d8:	48028100 	.word	0x48028100

080074dc <XMC_USIC_CH_SetInputSource>:
 * Baudrate is configured by considering the peripheral frequency and the desired baudrate.
 * Optimum values of FDR->STEP and BRG->PDIV are calulated and used for generating the desired
 * baudrate.
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetStartTransmisionMode(), XMC_USIC_CH_SetInputSource() \n\n\n
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	460b      	mov	r3, r1
 80074e6:	70fb      	strb	r3, [r7, #3]
 80074e8:	4613      	mov	r3, r2
 80074ea:	70bb      	strb	r3, [r7, #2]
 */
 80074ec:	78f8      	ldrb	r0, [r7, #3]
 80074ee:	78fb      	ldrb	r3, [r7, #3]
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	3306      	adds	r3, #6
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	4413      	add	r3, r2
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	f023 0207 	bic.w	r2, r3, #7
XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling);
 80074fe:	78bb      	ldrb	r3, [r7, #2]
 * Optimum values of FDR->STEP and BRG->PDIV are calulated and used for generating the desired
 * baudrate.
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetStartTransmisionMode(), XMC_USIC_CH_SetInputSource() \n\n\n
 */
 8007500:	431a      	orrs	r2, r3
 8007502:	6879      	ldr	r1, [r7, #4]
 8007504:	1d83      	adds	r3, r0, #6
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	440b      	add	r3, r1
 800750a:	605a      	str	r2, [r3, #4]
XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling);

 800750c:	bf00      	nop
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	bc80      	pop	{r7}
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop

08007518 <XMC_USIC_CH_SetMode>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	460b      	mov	r3, r1
 8007522:	70fb      	strb	r3, [r7, #3]
  channel->TRBSCR |= (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007528:	f023 020f 	bic.w	r2, r3, #15
 800752c:	78fb      	ldrb	r3, [r7, #3]
 800752e:	431a      	orrs	r2, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	641a      	str	r2, [r3, #64]	; 0x40
}
 8007534:	bf00      	nop
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	bc80      	pop	{r7}
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop

08007540 <XMC_SPI_CH_Start>:
 * <li>Set polarity for the Slave signal,</li>
 * <li>Enable Frame end mode(MSLS signal is kept active after transmission of a frame)</li>
 * </ul>
 */
void XMC_SPI_CH_Init(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config);

 8007540:	b580      	push	{r7, lr}
 8007542:	b082      	sub	sp, #8
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
/**
 * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 8007548:	2101      	movs	r1, #1
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f7ff ffe4 	bl	8007518 <XMC_USIC_CH_SetMode>
 *
 8007550:	bf00      	nop
 8007552:	3708      	adds	r7, #8
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <XMC_SPI_CH_GetStatusFlag>:
 * After disabling the events, XMC_SPI_CH_EnableEvent() has to be invoked to re-enable the events.
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_EnableEvent()
 */
void XMC_SPI_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event);
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]

 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
/**
 8007564:	4618      	mov	r0, r3
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	bc80      	pop	{r7}
 800756c:	4770      	bx	lr
 800756e:	bf00      	nop

08007570 <XMC_SPI_CH_ClearStatusFlag>:
  return channel->PSR_SSCMode;
}

/**
 * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 * @param flag Protocol event status to be cleared for detection of next occurence.
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
 *              Refer @ XMC_SPI_CH_STATUS_FLAG_t for valid values. <b>OR</b> combinations of these enum item can be used 
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	431a      	orrs	r2, r3
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	64da      	str	r2, [r3, #76]	; 0x4c
 *              as input.
 8007586:	bf00      	nop
 8007588:	370c      	adds	r7, #12
 800758a:	46bd      	mov	sp, r7
 800758c:	bc80      	pop	{r7}
 800758e:	4770      	bx	lr

08007590 <XMC_SPI_CH_SetInputSource>:
 * @param  channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 *
 * @return None
 *
 * \par<b>Description</b><br>
 * Configure the handling of end of frame through software, by setting TCSR.EOF bit.\n\n
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	460b      	mov	r3, r1
 800759a:	70fb      	strb	r3, [r7, #3]
 800759c:	4613      	mov	r3, r2
 800759e:	70bb      	strb	r3, [r7, #2]
 * This can be used if the software handles the TBUF data without FIFO. If EOF is set, a valid content of the TBUF is 
 80075a0:	78fb      	ldrb	r3, [r7, #3]
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	3306      	adds	r3, #6
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	4413      	add	r3, r2
 80075aa:	2210      	movs	r2, #16
 80075ac:	605a      	str	r2, [r3, #4]
 * considered as last word of a frame. After transfer of the last word, MSLS signal becomes inactive. For software 
 80075ae:	78ba      	ldrb	r2, [r7, #2]
 80075b0:	78fb      	ldrb	r3, [r7, #3]
 80075b2:	4619      	mov	r1, r3
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f7ff ff91 	bl	80074dc <XMC_USIC_CH_SetInputSource>
 * handling of EOF bit, it is recommended to configure TCSR.WLEMD as 0. \n
 80075ba:	bf00      	nop
 80075bc:	3708      	adds	r7, #8
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop

080075c4 <XMC_GPIO_SetOutputHigh>:

/**
 *
 * @param port constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	460b      	mov	r3, r1
 80075ce:	70fb      	strb	r3, [r7, #3]
 * @param pin  port pin number.
 *
 * @return None
 80075d0:	78fb      	ldrb	r3, [r7, #3]
 80075d2:	2201      	movs	r2, #1
 80075d4:	409a      	lsls	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	605a      	str	r2, [r3, #4]
 *
 80075da:	bf00      	nop
 80075dc:	370c      	adds	r7, #12
 80075de:	46bd      	mov	sp, r7
 80075e0:	bc80      	pop	{r7}
 80075e2:	4770      	bx	lr

080075e4 <BSP_SPI_Init>:
 *  @brief This function configures the SPI interface to communicate with the MCP23S08 & the MCP3004
 *  @param none
 *  @return on success this function returns SPI_OK (0)
 */
uint8_t BSP_SPI_Init(void)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	af00      	add	r7, sp, #0
	/*Initialize and Start SPI*/
	XMC_SPI_CH_Init(XMC_SPI1_CH0, &spi_config);
 80075e8:	4929      	ldr	r1, [pc, #164]	; (8007690 <BSP_SPI_Init+0xac>)
 80075ea:	482a      	ldr	r0, [pc, #168]	; (8007694 <BSP_SPI_Init+0xb0>)
 80075ec:	f000 ff38 	bl	8008460 <XMC_SPI_CH_Init>

	/*Input source selected*/
	XMC_SPI_CH_SetInputSource(XMC_SPI1_CH0,XMC_SPI_CH_INPUT_DIN0,USIC1_C0_DX0_P0_4);
 80075f0:	2200      	movs	r2, #0
 80075f2:	2100      	movs	r1, #0
 80075f4:	4827      	ldr	r0, [pc, #156]	; (8007694 <BSP_SPI_Init+0xb0>)
 80075f6:	f7ff ffcb 	bl	8007590 <XMC_SPI_CH_SetInputSource>
	XMC_SPI_CH_EnableEvent(XMC_SPI1_CH0,XMC_SPI_CH_EVENT_STANDARD_RECEIVE);
 80075fa:	4927      	ldr	r1, [pc, #156]	; (8007698 <BSP_SPI_Init+0xb4>)
 80075fc:	4825      	ldr	r0, [pc, #148]	; (8007694 <BSP_SPI_Init+0xb0>)
 80075fe:	f000 ffc3 	bl	8008588 <XMC_SPI_CH_EnableEvent>
	XMC_SPI_CH_Start(XMC_SPI1_CH0);
 8007602:	4824      	ldr	r0, [pc, #144]	; (8007694 <BSP_SPI_Init+0xb0>)
 8007604:	f7ff ff9c 	bl	8007540 <XMC_SPI_CH_Start>

	/*GPIO configuration*/
	XMC_GPIO_SetMode(SPI_MOSI, XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT2);
 8007608:	2290      	movs	r2, #144	; 0x90
 800760a:	2105      	movs	r1, #5
 800760c:	4823      	ldr	r0, [pc, #140]	; (800769c <BSP_SPI_Init+0xb8>)
 800760e:	f001 f8a3 	bl	8008758 <XMC_GPIO_SetMode>
	XMC_GPIO_SetMode(SPI_MISO, XMC_GPIO_MODE_INPUT_TRISTATE);
 8007612:	2200      	movs	r2, #0
 8007614:	2104      	movs	r1, #4
 8007616:	4821      	ldr	r0, [pc, #132]	; (800769c <BSP_SPI_Init+0xb8>)
 8007618:	f001 f89e 	bl	8008758 <XMC_GPIO_SetMode>
	XMC_GPIO_SetMode(SPI_SCLK, XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT2);
 800761c:	2290      	movs	r2, #144	; 0x90
 800761e:	210b      	movs	r1, #11
 8007620:	481e      	ldr	r0, [pc, #120]	; (800769c <BSP_SPI_Init+0xb8>)
 8007622:	f001 f899 	bl	8008758 <XMC_GPIO_SetMode>

	gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL;
 8007626:	4b1e      	ldr	r3, [pc, #120]	; (80076a0 <BSP_SPI_Init+0xbc>)
 8007628:	2280      	movs	r2, #128	; 0x80
 800762a:	701a      	strb	r2, [r3, #0]
	gpio_config.output_level = XMC_GPIO_OUTPUT_LEVEL_HIGH;
 800762c:	4b1c      	ldr	r3, [pc, #112]	; (80076a0 <BSP_SPI_Init+0xbc>)
 800762e:	2201      	movs	r2, #1
 8007630:	605a      	str	r2, [r3, #4]
	gpio_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_MEDIUM;
 8007632:	4b1b      	ldr	r3, [pc, #108]	; (80076a0 <BSP_SPI_Init+0xbc>)
 8007634:	2204      	movs	r2, #4
 8007636:	721a      	strb	r2, [r3, #8]

	XMC_GPIO_Init(MCP23S08_SS, &gpio_config); //IO-Expander CS
 8007638:	4a19      	ldr	r2, [pc, #100]	; (80076a0 <BSP_SPI_Init+0xbc>)
 800763a:	2102      	movs	r1, #2
 800763c:	4819      	ldr	r0, [pc, #100]	; (80076a4 <BSP_SPI_Init+0xc0>)
 800763e:	f001 f8cb 	bl	80087d8 <XMC_GPIO_Init>
	XMC_GPIO_SetOutputHigh(MCP23S08_SS);
 8007642:	2102      	movs	r1, #2
 8007644:	4817      	ldr	r0, [pc, #92]	; (80076a4 <BSP_SPI_Init+0xc0>)
 8007646:	f7ff ffbd 	bl	80075c4 <XMC_GPIO_SetOutputHigh>

	gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL;
 800764a:	4b15      	ldr	r3, [pc, #84]	; (80076a0 <BSP_SPI_Init+0xbc>)
 800764c:	2280      	movs	r2, #128	; 0x80
 800764e:	701a      	strb	r2, [r3, #0]
	gpio_config.output_level = XMC_GPIO_OUTPUT_LEVEL_HIGH;
 8007650:	4b13      	ldr	r3, [pc, #76]	; (80076a0 <BSP_SPI_Init+0xbc>)
 8007652:	2201      	movs	r2, #1
 8007654:	605a      	str	r2, [r3, #4]
	gpio_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_MEDIUM;
 8007656:	4b12      	ldr	r3, [pc, #72]	; (80076a0 <BSP_SPI_Init+0xbc>)
 8007658:	2204      	movs	r2, #4
 800765a:	721a      	strb	r2, [r3, #8]

	XMC_GPIO_Init(MCP3004_SS, &gpio_config); //ADC-CS
 800765c:	4a10      	ldr	r2, [pc, #64]	; (80076a0 <BSP_SPI_Init+0xbc>)
 800765e:	2104      	movs	r1, #4
 8007660:	4810      	ldr	r0, [pc, #64]	; (80076a4 <BSP_SPI_Init+0xc0>)
 8007662:	f001 f8b9 	bl	80087d8 <XMC_GPIO_Init>
	XMC_GPIO_SetOutputHigh(MCP3004_SS);
 8007666:	2104      	movs	r1, #4
 8007668:	480e      	ldr	r0, [pc, #56]	; (80076a4 <BSP_SPI_Init+0xc0>)
 800766a:	f7ff ffab 	bl	80075c4 <XMC_GPIO_SetOutputHigh>

	gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL;
 800766e:	4b0c      	ldr	r3, [pc, #48]	; (80076a0 <BSP_SPI_Init+0xbc>)
 8007670:	2280      	movs	r2, #128	; 0x80
 8007672:	701a      	strb	r2, [r3, #0]
	gpio_config.output_level = XMC_GPIO_OUTPUT_LEVEL_HIGH;
 8007674:	4b0a      	ldr	r3, [pc, #40]	; (80076a0 <BSP_SPI_Init+0xbc>)
 8007676:	2201      	movs	r2, #1
 8007678:	605a      	str	r2, [r3, #4]
	gpio_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_MEDIUM;
 800767a:	4b09      	ldr	r3, [pc, #36]	; (80076a0 <BSP_SPI_Init+0xbc>)
 800767c:	2204      	movs	r2, #4
 800767e:	721a      	strb	r2, [r3, #8]

	XMC_GPIO_Init(MCP23S08_RESET, &gpio_config); //IO-Expander Reset
 8007680:	4a07      	ldr	r2, [pc, #28]	; (80076a0 <BSP_SPI_Init+0xbc>)
 8007682:	210c      	movs	r1, #12
 8007684:	4805      	ldr	r0, [pc, #20]	; (800769c <BSP_SPI_Init+0xb8>)
 8007686:	f001 f8a7 	bl	80087d8 <XMC_GPIO_Init>

	return SPI_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	bd80      	pop	{r7, pc}
 8007690:	2000001c 	.word	0x2000001c
 8007694:	48020000 	.word	0x48020000
 8007698:	80004000 	.word	0x80004000
 800769c:	48028000 	.word	0x48028000
 80076a0:	20000010 	.word	0x20000010
 80076a4:	48028100 	.word	0x48028100

080076a8 <_spi_transmit>:
 *  @param channel ... SPI channel
 *		   spi_data .. byte which should be transmitted
 *  @return on success this function returns SPI_OK (0)
 */
uint8_t _spi_transmit(XMC_USIC_CH_t *const channel, uint8_t spi_data)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	460b      	mov	r3, r1
 80076b2:	70fb      	strb	r3, [r7, #3]
	XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

	XMC_SPI_CH_Transmit(channel, spi_data, XMC_SPI_CH_MODE_STANDARD);
 80076b4:	78fb      	ldrb	r3, [r7, #3]
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	2200      	movs	r2, #0
 80076ba:	4619      	mov	r1, r3
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 ff05 	bl	80084cc <XMC_SPI_CH_Transmit>
	while((XMC_SPI_CH_GetStatusFlag(channel) & XMC_SPI_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION) == 0U);
 80076c2:	bf00      	nop
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f7ff ff47 	bl	8007558 <XMC_SPI_CH_GetStatusFlag>
 80076ca:	4603      	mov	r3, r0
 80076cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d0f7      	beq.n	80076c4 <_spi_transmit+0x1c>
	XMC_SPI_CH_ClearStatusFlag(channel, XMC_SPI_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION);
 80076d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f7ff ff49 	bl	8007570 <XMC_SPI_CH_ClearStatusFlag>

	return SPI_OK;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3708      	adds	r7, #8
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <_spi_receive>:
 *  @brief This function reads data from a specific SPI channel
 *  @param channel ... SPI channel
 *  @return byte which was received and is valid
 */
uint8_t _spi_receive(XMC_USIC_CH_t *const channel)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
	XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

	return XMC_SPI_CH_GetReceivedData(channel);
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 ff21 	bl	8008538 <XMC_SPI_CH_GetReceivedData>
 80076f6:	4603      	mov	r3, r0
 80076f8:	b2db      	uxtb	r3, r3
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3708      	adds	r7, #8
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop

08007704 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	4603      	mov	r3, r0
 800770c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800770e:	4908      	ldr	r1, [pc, #32]	; (8007730 <NVIC_EnableIRQ+0x2c>)
 8007710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007714:	095b      	lsrs	r3, r3, #5
 8007716:	79fa      	ldrb	r2, [r7, #7]
 8007718:	f002 021f 	and.w	r2, r2, #31
 800771c:	2001      	movs	r0, #1
 800771e:	fa00 f202 	lsl.w	r2, r0, r2
 8007722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007726:	bf00      	nop
 8007728:	370c      	adds	r7, #12
 800772a:	46bd      	mov	sp, r7
 800772c:	bc80      	pop	{r7}
 800772e:	4770      	bx	lr
 8007730:	e000e100 	.word	0xe000e100

08007734 <XMC_USIC_CH_SetInputSource>:
 * Baudrate is configured by considering the peripheral frequency and the desired baudrate.
 * Optimum values of FDR->STEP and BRG->PDIV are calulated and used for generating the desired
 * baudrate.
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetStartTransmisionMode(), XMC_USIC_CH_SetInputSource() \n\n\n
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	460b      	mov	r3, r1
 800773e:	70fb      	strb	r3, [r7, #3]
 8007740:	4613      	mov	r3, r2
 8007742:	70bb      	strb	r3, [r7, #2]
 */
 8007744:	78f8      	ldrb	r0, [r7, #3]
 8007746:	78fb      	ldrb	r3, [r7, #3]
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	3306      	adds	r3, #6
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	4413      	add	r3, r2
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	f023 0207 	bic.w	r2, r3, #7
XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling);
 8007756:	78bb      	ldrb	r3, [r7, #2]
 * Optimum values of FDR->STEP and BRG->PDIV are calulated and used for generating the desired
 * baudrate.
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetStartTransmisionMode(), XMC_USIC_CH_SetInputSource() \n\n\n
 */
 8007758:	431a      	orrs	r2, r3
 800775a:	6879      	ldr	r1, [r7, #4]
 800775c:	1d83      	adds	r3, r0, #6
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	440b      	add	r3, r1
 8007762:	605a      	str	r2, [r3, #4]
XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling);

 8007764:	bf00      	nop
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	bc80      	pop	{r7}
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop

08007770 <XMC_UART_CH_Start>:
 * \par<b>Description</b><br>
 * Sets the USIC channel operation mode to UART mode.\n\n
 * CCR register bitfield \a Mode is set to 2(UART mode). This API should be called after configuring
 * the USIC channel. Transmission and reception can happen only when the UART mode is set. 
 * This is an inline function.
 *
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 * \par<b>Related APIs:</b><BR>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777c:	f023 030f 	bic.w	r3, r3, #15
 8007780:	f043 0202 	orr.w	r2, r3, #2
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	641a      	str	r2, [r3, #64]	; 0x40
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 8007788:	bf00      	nop
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	bc80      	pop	{r7}
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop

08007794 <XMC_UART_CH_SetInterruptNodePointer>:
 * For all the protocol events enlisted in the enumeration XMC_UART_CH_EVENT_t, one common
 * interrupt gets generated. The service request connects the interrupt node to the UART 
 * protocol events.
 * Note: NVIC node should be separately enabled to generate the interrupt.
 *
 * \par<b>Related APIs:</b><BR>
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	460b      	mov	r3, r1
 800779e:	70fb      	strb	r3, [r7, #3]
 * XMC_UART_CH_EnableEvent() \n\n\n
 80077a0:	78fb      	ldrb	r3, [r7, #3]
 80077a2:	461a      	mov	r2, r3
 80077a4:	2110      	movs	r1, #16
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 fbe4 	bl	8007f74 <XMC_USIC_CH_SetInterruptNodePointer>
 */
__STATIC_INLINE void XMC_UART_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
 80077ac:	bf00      	nop
 80077ae:	3708      	adds	r7, #8
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <XMC_UART_CH_SetInputSource>:
 * \par<b>Description</b><br>
 * Sets input soource for the UART communication.\n\n
 * It is used for configuring the input stage for data reception.
 * Selects the input data signal source among DXnA, DXnB.. DXnG for the input stage. 
 * The API can be used for the input stages DX0, DX3 and DX5. 
 *
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	460b      	mov	r3, r1
 80077be:	70fb      	strb	r3, [r7, #3]
 80077c0:	4613      	mov	r3, r2
 80077c2:	70bb      	strb	r3, [r7, #2]
 * \par<b>Related APIs:</b><BR>
 80077c4:	78fb      	ldrb	r3, [r7, #3]
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	3306      	adds	r3, #6
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	4413      	add	r3, r2
 80077ce:	2200      	movs	r2, #0
 80077d0:	605a      	str	r2, [r3, #4]
 * XMC_UART_CH_EnableInputInversion() \n\n\n
 80077d2:	78ba      	ldrb	r2, [r7, #2]
 80077d4:	78fb      	ldrb	r3, [r7, #3]
 80077d6:	4619      	mov	r1, r3
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f7ff ffab 	bl	8007734 <XMC_USIC_CH_SetInputSource>
 */
 80077de:	bf00      	nop
 80077e0:	3708      	adds	r7, #8
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop

080077e8 <BSP_UART_Init>:
/**
 * @brief  Initialize UART1 CH1 - Tx=P0.1, Rx=P0.0, 9600-8N1
 * @return true on success, false otherwise
 */
_Bool BSP_UART_Init (void)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	af00      	add	r7, sp, #0

	XMC_UART_CH_Init (XMC_UART1_CH1, &uart_config);
 80077ec:	4917      	ldr	r1, [pc, #92]	; (800784c <BSP_UART_Init+0x64>)
 80077ee:	4818      	ldr	r0, [pc, #96]	; (8007850 <BSP_UART_Init+0x68>)
 80077f0:	f000 ff02 	bl	80085f8 <XMC_UART_CH_Init>
	XMC_UART_CH_Init (XMC_UART1_CH0, &uart_config);
 80077f4:	4915      	ldr	r1, [pc, #84]	; (800784c <BSP_UART_Init+0x64>)
 80077f6:	4817      	ldr	r0, [pc, #92]	; (8007854 <BSP_UART_Init+0x6c>)
 80077f8:	f000 fefe 	bl	80085f8 <XMC_UART_CH_Init>
	XMC_UART_CH_SetInputSource (XMC_UART1_CH1, XMC_UART_CH_INPUT_RXD, 
 80077fc:	2203      	movs	r2, #3
 80077fe:	2100      	movs	r1, #0
 8007800:	4813      	ldr	r0, [pc, #76]	; (8007850 <BSP_UART_Init+0x68>)
 8007802:	f7ff ffd7 	bl	80077b4 <XMC_UART_CH_SetInputSource>
	                            USIC1_C1_DX0_P0_0);

	XMC_UART_CH_SetInterruptNodePointer	(XMC_UART1_CH1, 0) ;
 8007806:	2100      	movs	r1, #0
 8007808:	4811      	ldr	r0, [pc, #68]	; (8007850 <BSP_UART_Init+0x68>)
 800780a:	f7ff ffc3 	bl	8007794 <XMC_UART_CH_SetInterruptNodePointer>
	XMC_UART_CH_EnableEvent (XMC_UART1_CH1, XMC_UART_CH_EVENT_STANDARD_RECEIVE);
 800780e:	4912      	ldr	r1, [pc, #72]	; (8007858 <BSP_UART_Init+0x70>)
 8007810:	480f      	ldr	r0, [pc, #60]	; (8007850 <BSP_UART_Init+0x68>)
 8007812:	f000 ff87 	bl	8008724 <XMC_UART_CH_EnableEvent>
	XMC_UART_CH_EnableEvent (XMC_UART1_CH1, 
 8007816:	f04f 2180 	mov.w	r1, #2147516416	; 0x80008000
 800781a:	480d      	ldr	r0, [pc, #52]	; (8007850 <BSP_UART_Init+0x68>)
 800781c:	f000 ff82 	bl	8008724 <XMC_UART_CH_EnableEvent>
	                         XMC_UART_CH_EVENT_ALTERNATIVE_RECEIVE);
	NVIC_EnableIRQ (USIC1_0_IRQn);
 8007820:	205a      	movs	r0, #90	; 0x5a
 8007822:	f7ff ff6f 	bl	8007704 <NVIC_EnableIRQ>

	XMC_UART_CH_Start (XMC_UART1_CH1);
 8007826:	480a      	ldr	r0, [pc, #40]	; (8007850 <BSP_UART_Init+0x68>)
 8007828:	f7ff ffa2 	bl	8007770 <XMC_UART_CH_Start>
	XMC_UART_CH_Start (XMC_UART1_CH0);
 800782c:	4809      	ldr	r0, [pc, #36]	; (8007854 <BSP_UART_Init+0x6c>)
 800782e:	f7ff ff9f 	bl	8007770 <XMC_UART_CH_Start>

	XMC_GPIO_SetMode (UART_TX, XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT2);
 8007832:	2290      	movs	r2, #144	; 0x90
 8007834:	2101      	movs	r1, #1
 8007836:	4809      	ldr	r0, [pc, #36]	; (800785c <BSP_UART_Init+0x74>)
 8007838:	f000 ff8e 	bl	8008758 <XMC_GPIO_SetMode>
	XMC_GPIO_SetMode (UART_RX, XMC_GPIO_MODE_INPUT_TRISTATE);
 800783c:	2200      	movs	r2, #0
 800783e:	2100      	movs	r1, #0
 8007840:	4806      	ldr	r0, [pc, #24]	; (800785c <BSP_UART_Init+0x74>)
 8007842:	f000 ff89 	bl	8008758 <XMC_GPIO_SetMode>

	return true;
 8007846:	2301      	movs	r3, #1
}
 8007848:	4618      	mov	r0, r3
 800784a:	bd80      	pop	{r7, pc}
 800784c:	20000024 	.word	0x20000024
 8007850:	48020200 	.word	0x48020200
 8007854:	48020000 	.word	0x48020000
 8007858:	80004000 	.word	0x80004000
 800785c:	48028000 	.word	0x48028000

08007860 <BSP_LowLevelInit>:
 * @note Problems with Branch prediction if accessing the flash via the cached
 *       memory interface. In this silicon(step A11), branch prediction has to
 *       be switched off by setting PCON.PBS = 1.
 */
void  BSP_LowLevelInit (void)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
	CPU_INT32U  reg_val;

	/* Disable Watchdog timer */
	DEF_BIT_CLR (BSP_REG_WDT_CTR, BSP_BIT_WDT_CTR_ENB);
 8007866:	4a0d      	ldr	r2, [pc, #52]	; (800789c <BSP_LowLevelInit+0x3c>)
 8007868:	4b0c      	ldr	r3, [pc, #48]	; (800789c <BSP_LowLevelInit+0x3c>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f023 0301 	bic.w	r3, r3, #1
 8007870:	6013      	str	r3, [r2, #0]
	DEF_BIT_SET (BSP_REG_PREF_PCON, BSP_BIT_PREF_PCON_PBS);
 8007872:	4a0b      	ldr	r2, [pc, #44]	; (80078a0 <BSP_LowLevelInit+0x40>)
 8007874:	4b0a      	ldr	r3, [pc, #40]	; (80078a0 <BSP_LowLevelInit+0x40>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800787c:	6013      	str	r3, [r2, #0]

	reg_val = BSP_REG_FLASH0_FCON;
 800787e:	4b09      	ldr	r3, [pc, #36]	; (80078a4 <BSP_LowLevelInit+0x44>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	607b      	str	r3, [r7, #4]
	reg_val = 0x3;
 8007884:	2303      	movs	r3, #3
 8007886:	607b      	str	r3, [r7, #4]
	BSP_REG_FLASH0_FCON = reg_val;
 8007888:	4a06      	ldr	r2, [pc, #24]	; (80078a4 <BSP_LowLevelInit+0x44>)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6013      	str	r3, [r2, #0]

	BSP_SysInit();
 800788e:	f000 f80b 	bl	80078a8 <BSP_SysInit>
}
 8007892:	bf00      	nop
 8007894:	3708      	adds	r7, #8
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop
 800789c:	50008004 	.word	0x50008004
 80078a0:	58004000 	.word	0x58004000
 80078a4:	58002014 	.word	0x58002014

080078a8 <BSP_SysInit>:
 *       result in multiple changes of the K2-Divider to avoid big frequency
 *       changes. Between the update of two K2-divider values 6 cycles of fpll
 *       should be waited.
 */
void  BSP_SysInit (void)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
	CPU_INT32U  reg_to;
	CPU_INT32U  reg;

	/* Set VCO and PLL power saving mode to normal behavior */
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON0, (BSP_BIT_PLLCON0_VCOPWD |
 80078ae:	4a74      	ldr	r2, [pc, #464]	; (8007a80 <BSP_SysInit+0x1d8>)
 80078b0:	4b73      	ldr	r3, [pc, #460]	; (8007a80 <BSP_SysInit+0x1d8>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078b8:	f023 0302 	bic.w	r3, r3, #2
 80078bc:	6013      	str	r3, [r2, #0]
					   BSP_BIT_PLLCON0_PLLPWD));

	reg = BSP_REG_SCU_OSCHPCTRL;
 80078be:	4b71      	ldr	r3, [pc, #452]	; (8007a84 <BSP_SysInit+0x1dc>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	603b      	str	r3, [r7, #0]
	/* Set Ext. Crystal mod; osc power saving isn't entered */
	DEF_BIT_CLR (reg, (BSP_BIT_OSCHPCTRL_MODE_MASK  |
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80078ca:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80078ce:	603b      	str	r3, [r7, #0]
			   BSP_BIT_OSCHPCTRL_OSCVAL_MASK));
	/* Cfg. foscref = fosc / (OSCVAL + 1) */
	DEF_BIT_SET (reg, BSP_BIT_OSCHPCTRL_OSCVAL);
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078d6:	603b      	str	r3, [r7, #0]
	BSP_REG_SCU_OSCHPCTRL = reg;
 80078d8:	4a6a      	ldr	r2, [pc, #424]	; (8007a84 <BSP_SysInit+0x1dc>)
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	6013      	str	r3, [r2, #0]

	/* Set ext. osc as PLL input */
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON2, BSP_BIT_PLLCON2_PINSEL);
 80078de:	4a6a      	ldr	r2, [pc, #424]	; (8007a88 <BSP_SysInit+0x1e0>)
 80078e0:	4b69      	ldr	r3, [pc, #420]	; (8007a88 <BSP_SysInit+0x1e0>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f023 0301 	bic.w	r3, r3, #1
 80078e8:	6013      	str	r3, [r2, #0]
	/* Restart osc watchdog of the PLL */
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_OSCRES);
 80078ea:	4a65      	ldr	r2, [pc, #404]	; (8007a80 <BSP_SysInit+0x1d8>)
 80078ec:	4b64      	ldr	r3, [pc, #400]	; (8007a80 <BSP_SysInit+0x1d8>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80078f4:	6013      	str	r3, [r2, #0]
	/* Wait for stable OSC frequency */
	reg_to = BSP_REG_VAL_TO;
 80078f6:	4b65      	ldr	r3, [pc, #404]	; (8007a8c <BSP_SysInit+0x1e4>)
 80078f8:	607b      	str	r3, [r7, #4]
	while ( (DEF_BIT_IS_CLR (BSP_REG_SCU_PLLSTAT, (BSP_BIT_PLLSTAT_PLLLV |
 80078fa:	e002      	b.n	8007902 <BSP_SysInit+0x5a>
						       BSP_BIT_PLLSTAT_PLLHV |
						       BSP_BIT_PLLSTAT_PLLSP))) &
		(reg_to > 0u)) {
		reg_to--;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	3b01      	subs	r3, #1
 8007900:	607b      	str	r3, [r7, #4]
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON2, BSP_BIT_PLLCON2_PINSEL);
	/* Restart osc watchdog of the PLL */
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_OSCRES);
	/* Wait for stable OSC frequency */
	reg_to = BSP_REG_VAL_TO;
	while ( (DEF_BIT_IS_CLR (BSP_REG_SCU_PLLSTAT, (BSP_BIT_PLLSTAT_PLLLV |
 8007902:	4b63      	ldr	r3, [pc, #396]	; (8007a90 <BSP_SysInit+0x1e8>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f403 7360 	and.w	r3, r3, #896	; 0x380
 800790a:	2b00      	cmp	r3, #0
 800790c:	d101      	bne.n	8007912 <BSP_SysInit+0x6a>
 800790e:	2301      	movs	r3, #1
 8007910:	e000      	b.n	8007914 <BSP_SysInit+0x6c>
 8007912:	2300      	movs	r3, #0
						       BSP_BIT_PLLSTAT_PLLHV |
						       BSP_BIT_PLLSTAT_PLLSP))) &
		(reg_to > 0u)) {
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	2a00      	cmp	r2, #0
 8007918:	bf14      	ite	ne
 800791a:	2201      	movne	r2, #1
 800791c:	2200      	moveq	r2, #0
 800791e:	b2d2      	uxtb	r2, r2
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_OSCRES);
	/* Wait for stable OSC frequency */
	reg_to = BSP_REG_VAL_TO;
	while ( (DEF_BIT_IS_CLR (BSP_REG_SCU_PLLSTAT, (BSP_BIT_PLLSTAT_PLLLV |
						       BSP_BIT_PLLSTAT_PLLHV |
						       BSP_BIT_PLLSTAT_PLLSP))) &
 8007920:	4013      	ands	r3, r2
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON2, BSP_BIT_PLLCON2_PINSEL);
	/* Restart osc watchdog of the PLL */
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_OSCRES);
	/* Wait for stable OSC frequency */
	reg_to = BSP_REG_VAL_TO;
	while ( (DEF_BIT_IS_CLR (BSP_REG_SCU_PLLSTAT, (BSP_BIT_PLLSTAT_PLLLV |
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1ea      	bne.n	80078fc <BSP_SysInit+0x54>
						       BSP_BIT_PLLSTAT_PLLHV |
						       BSP_BIT_PLLSTAT_PLLSP))) &
		(reg_to > 0u)) {
		reg_to--;
	}
	if (reg_to == 0u) {
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d100      	bne.n	800792e <BSP_SysInit+0x86>
		while (DEF_TRUE);
 800792c:	e7fe      	b.n	800792c <BSP_SysInit+0x84>
	}
	/* ---------------- PLL CONFIGURATION ----------------- */
	/* Select OSC_FI as system clk */
	BSP_REG_SCU_SYSCLKCR = BSP_BIT_SYSCLKCR_OSC_FI;
 800792e:	4b59      	ldr	r3, [pc, #356]	; (8007a94 <BSP_SysInit+0x1ec>)
 8007930:	2200      	movs	r2, #0
 8007932:	601a      	str	r2, [r3, #0]
	/* PLL is bypassed */
	DEF_BIT_SET (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_VCOBYP);
 8007934:	4a52      	ldr	r2, [pc, #328]	; (8007a80 <BSP_SysInit+0x1d8>)
 8007936:	4b52      	ldr	r3, [pc, #328]	; (8007a80 <BSP_SysInit+0x1d8>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f043 0301 	orr.w	r3, r3, #1
 800793e:	6013      	str	r3, [r2, #0]
	/* Disconnect OSC_HP from PLL */
	DEF_BIT_SET (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_FINDIS);
 8007940:	4a4f      	ldr	r2, [pc, #316]	; (8007a80 <BSP_SysInit+0x1d8>)
 8007942:	4b4f      	ldr	r3, [pc, #316]	; (8007a80 <BSP_SysInit+0x1d8>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f043 0310 	orr.w	r3, r3, #16
 800794a:	6013      	str	r3, [r2, #0]

	/* fpll = (NDIV  * fosc) / (PDIV * K2DIV))              */
	/*      = (40 * 12MHz) / (1 * 20)) = 24MHz              */
	BSP_REG_SCU_PLLCON1 = ( ( (BSP_PLLCON1_K1DIV       - 1u) <<  0u)
 800794c:	4b52      	ldr	r3, [pc, #328]	; (8007a98 <BSP_SysInit+0x1f0>)
 800794e:	4a53      	ldr	r2, [pc, #332]	; (8007a9c <BSP_SysInit+0x1f4>)
 8007950:	601a      	str	r2, [r3, #0]
				| ( (BSP_PLLCON1_NDIV        - 1u) <<  8u)
				| ( (BSP_PLLCON1_K2DIV_STEP1 - 1u) << 16u)
				| ( (BSP_PLLCON1_PDIV        - 1u) << 24u));

	/* Keeps OSC clk conn. to VCO in case of Loss-of-lock */
	BSP_REG_SCU_PLLCON0 |= BSP_BIT_PLLCON0_OSCDISCDIS;
 8007952:	4a4b      	ldr	r2, [pc, #300]	; (8007a80 <BSP_SysInit+0x1d8>)
 8007954:	4b4a      	ldr	r3, [pc, #296]	; (8007a80 <BSP_SysInit+0x1d8>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800795c:	6013      	str	r3, [r2, #0]
	/* Connect OSC_HP to PLL */
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_FINDIS);
 800795e:	4a48      	ldr	r2, [pc, #288]	; (8007a80 <BSP_SysInit+0x1d8>)
 8007960:	4b47      	ldr	r3, [pc, #284]	; (8007a80 <BSP_SysInit+0x1d8>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f023 0310 	bic.w	r3, r3, #16
 8007968:	6013      	str	r3, [r2, #0]
	/* Restart PLL lock detection */
	DEF_BIT_SET (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_RESLD);
 800796a:	4a45      	ldr	r2, [pc, #276]	; (8007a80 <BSP_SysInit+0x1d8>)
 800796c:	4b44      	ldr	r3, [pc, #272]	; (8007a80 <BSP_SysInit+0x1d8>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007974:	6013      	str	r3, [r2, #0]

	/* Wait for PLL Lock */
	reg_to = BSP_REG_VAL_TO;
 8007976:	4b45      	ldr	r3, [pc, #276]	; (8007a8c <BSP_SysInit+0x1e4>)
 8007978:	607b      	str	r3, [r7, #4]
	while ( (DEF_BIT_IS_CLR (BSP_REG_SCU_PLLSTAT, BSP_BIT_PLLSTAT_VCOLOCK)) &
 800797a:	e002      	b.n	8007982 <BSP_SysInit+0xda>
		(reg_to > 0u)) {
		reg_to--;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	3b01      	subs	r3, #1
 8007980:	607b      	str	r3, [r7, #4]
	/* Restart PLL lock detection */
	DEF_BIT_SET (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_RESLD);

	/* Wait for PLL Lock */
	reg_to = BSP_REG_VAL_TO;
	while ( (DEF_BIT_IS_CLR (BSP_REG_SCU_PLLSTAT, BSP_BIT_PLLSTAT_VCOLOCK)) &
 8007982:	4b43      	ldr	r3, [pc, #268]	; (8007a90 <BSP_SysInit+0x1e8>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f003 0304 	and.w	r3, r3, #4
 800798a:	2b00      	cmp	r3, #0
 800798c:	d101      	bne.n	8007992 <BSP_SysInit+0xea>
 800798e:	2301      	movs	r3, #1
 8007990:	e000      	b.n	8007994 <BSP_SysInit+0xec>
 8007992:	2300      	movs	r3, #0
		(reg_to > 0u)) {
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	2a00      	cmp	r2, #0
 8007998:	bf14      	ite	ne
 800799a:	2201      	movne	r2, #1
 800799c:	2200      	moveq	r2, #0
 800799e:	b2d2      	uxtb	r2, r2
	/* Restart PLL lock detection */
	DEF_BIT_SET (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_RESLD);

	/* Wait for PLL Lock */
	reg_to = BSP_REG_VAL_TO;
	while ( (DEF_BIT_IS_CLR (BSP_REG_SCU_PLLSTAT, BSP_BIT_PLLSTAT_VCOLOCK)) &
 80079a0:	4013      	ands	r3, r2
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d1ea      	bne.n	800797c <BSP_SysInit+0xd4>
		(reg_to > 0u)) {
		reg_to--;
	}
	if (reg_to == 0u) {
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d100      	bne.n	80079ae <BSP_SysInit+0x106>
		while (DEF_TRUE);
 80079ac:	e7fe      	b.n	80079ac <BSP_SysInit+0x104>
	}

	/* Normal opertaion, PLL is not bypassed */
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_VCOBYP);
 80079ae:	4a34      	ldr	r2, [pc, #208]	; (8007a80 <BSP_SysInit+0x1d8>)
 80079b0:	4b33      	ldr	r3, [pc, #204]	; (8007a80 <BSP_SysInit+0x1d8>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f023 0301 	bic.w	r3, r3, #1
 80079b8:	6013      	str	r3, [r2, #0]
	/* Enable MMC clock */
	DEF_BIT_SET (BSP_REG_SCU_CLKSET, BSP_BIT_CLKSET_MMCEN);
 80079ba:	4a39      	ldr	r2, [pc, #228]	; (8007aa0 <BSP_SysInit+0x1f8>)
 80079bc:	4b38      	ldr	r3, [pc, #224]	; (8007aa0 <BSP_SysInit+0x1f8>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f043 0302 	orr.w	r3, r3, #2
 80079c4:	6013      	str	r3, [r2, #0]
	/* fcpu = fsys */
	DEF_BIT_CLR (BSP_REG_SCU_CPUCLKCR, BSP_BIT_CPUCLKCR_CPUDIV);
 80079c6:	4a37      	ldr	r2, [pc, #220]	; (8007aa4 <BSP_SysInit+0x1fc>)
 80079c8:	4b36      	ldr	r3, [pc, #216]	; (8007aa4 <BSP_SysInit+0x1fc>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f023 0301 	bic.w	r3, r3, #1
 80079d0:	6013      	str	r3, [r2, #0]
	/* fpb  = fsys */
	DEF_BIT_CLR (BSP_REG_SCU_PBCLKCR,  BSP_BIT_PBCLKCR_PBDIV);
 80079d2:	4a35      	ldr	r2, [pc, #212]	; (8007aa8 <BSP_SysInit+0x200>)
 80079d4:	4b34      	ldr	r3, [pc, #208]	; (8007aa8 <BSP_SysInit+0x200>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f023 0301 	bic.w	r3, r3, #1
 80079dc:	6013      	str	r3, [r2, #0]
	/* fccu = fsys */
	DEF_BIT_CLR (BSP_REG_SCU_CCUCLKCR, BSP_BIT_CCUCLKCR_CCUDIV);
 80079de:	4a33      	ldr	r2, [pc, #204]	; (8007aac <BSP_SysInit+0x204>)
 80079e0:	4b32      	ldr	r3, [pc, #200]	; (8007aac <BSP_SysInit+0x204>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f023 0301 	bic.w	r3, r3, #1
 80079e8:	6013      	str	r3, [r2, #0]
	/* Select PLL clock as system clk */
	BSP_REG_SCU_SYSCLKCR |= BSP_BIT_SYSCLKCR_PLL_CLK;
 80079ea:	4a2a      	ldr	r2, [pc, #168]	; (8007a94 <BSP_SysInit+0x1ec>)
 80079ec:	4b29      	ldr	r3, [pc, #164]	; (8007a94 <BSP_SysInit+0x1ec>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079f4:	6013      	str	r3, [r2, #0]
	/* Wait between K2 divider updates */
	reg_to = BSP_REG_VAL_TO;
 80079f6:	4b25      	ldr	r3, [pc, #148]	; (8007a8c <BSP_SysInit+0x1e4>)
 80079f8:	607b      	str	r3, [r7, #4]
	while (reg_to > 0u) {
 80079fa:	e002      	b.n	8007a02 <BSP_SysInit+0x15a>
		reg_to--;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	3b01      	subs	r3, #1
 8007a00:	607b      	str	r3, [r7, #4]
	DEF_BIT_CLR (BSP_REG_SCU_CCUCLKCR, BSP_BIT_CCUCLKCR_CCUDIV);
	/* Select PLL clock as system clk */
	BSP_REG_SCU_SYSCLKCR |= BSP_BIT_SYSCLKCR_PLL_CLK;
	/* Wait between K2 divider updates */
	reg_to = BSP_REG_VAL_TO;
	while (reg_to > 0u) {
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1f9      	bne.n	80079fc <BSP_SysInit+0x154>
		reg_to--;
	}
	/* fpll = (NDIV  * fosc) / (PDIV * K2DIV)) */
	/*      = (40 * 12MHz) / (1 * 8)) = 60MHz  */
	reg  = (BSP_REG_SCU_PLLCON1 & ~BSP_PLLCON1_K2DIV_MASK);
 8007a08:	4b23      	ldr	r3, [pc, #140]	; (8007a98 <BSP_SysInit+0x1f0>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8007a10:	603b      	str	r3, [r7, #0]
	reg |= ( (BSP_PLLCON1_K2DIV_STEP2 - 1u) << 16);
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8007a18:	603b      	str	r3, [r7, #0]
	BSP_REG_SCU_PLLCON1 = reg;
 8007a1a:	4a1f      	ldr	r2, [pc, #124]	; (8007a98 <BSP_SysInit+0x1f0>)
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	6013      	str	r3, [r2, #0]
	/* Wait between K2 divider updates */
	reg_to = BSP_REG_VAL_TO;
 8007a20:	4b1a      	ldr	r3, [pc, #104]	; (8007a8c <BSP_SysInit+0x1e4>)
 8007a22:	607b      	str	r3, [r7, #4]
	while (reg_to > 0u) {
 8007a24:	e002      	b.n	8007a2c <BSP_SysInit+0x184>
		reg_to--;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	3b01      	subs	r3, #1
 8007a2a:	607b      	str	r3, [r7, #4]
	reg  = (BSP_REG_SCU_PLLCON1 & ~BSP_PLLCON1_K2DIV_MASK);
	reg |= ( (BSP_PLLCON1_K2DIV_STEP2 - 1u) << 16);
	BSP_REG_SCU_PLLCON1 = reg;
	/* Wait between K2 divider updates */
	reg_to = BSP_REG_VAL_TO;
	while (reg_to > 0u) {
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d1f9      	bne.n	8007a26 <BSP_SysInit+0x17e>
		reg_to--;
	}

	/* fpll = (NDIV  * fosc) / (PDIV * K2DIV)) */
	/*      = (40 * 12MHz) / (1 * 5)) = 96MHz  */
	reg                 = (BSP_REG_SCU_PLLCON1 & ~BSP_PLLCON1_K2DIV_MASK);
 8007a32:	4b19      	ldr	r3, [pc, #100]	; (8007a98 <BSP_SysInit+0x1f0>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8007a3a:	603b      	str	r3, [r7, #0]
	reg                |= ( (BSP_PLLCON1_K2DIV_STEP3 - 1u) << 16);
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a42:	603b      	str	r3, [r7, #0]
	BSP_REG_SCU_PLLCON1 = reg;
 8007a44:	4a14      	ldr	r2, [pc, #80]	; (8007a98 <BSP_SysInit+0x1f0>)
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	6013      	str	r3, [r2, #0]
	/* Wait between K2 divider updates */
	reg_to = BSP_REG_VAL_TO;
 8007a4a:	4b10      	ldr	r3, [pc, #64]	; (8007a8c <BSP_SysInit+0x1e4>)
 8007a4c:	607b      	str	r3, [r7, #4]
	while (reg_to > 0u) {
 8007a4e:	e002      	b.n	8007a56 <BSP_SysInit+0x1ae>
		reg_to--;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	3b01      	subs	r3, #1
 8007a54:	607b      	str	r3, [r7, #4]
	reg                 = (BSP_REG_SCU_PLLCON1 & ~BSP_PLLCON1_K2DIV_MASK);
	reg                |= ( (BSP_PLLCON1_K2DIV_STEP3 - 1u) << 16);
	BSP_REG_SCU_PLLCON1 = reg;
	/* Wait between K2 divider updates */
	reg_to = BSP_REG_VAL_TO;
	while (reg_to > 0u) {
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d1f9      	bne.n	8007a50 <BSP_SysInit+0x1a8>
		reg_to--;
	}
	/* fpll = (NDIV  * fosc) / (PDIV * K2DIV)) */
	/*      = (40 * 12MHz) / (1 * 4)) = 120MHz */
	reg                 = (BSP_REG_SCU_PLLCON1 & ~BSP_PLLCON1_K2DIV_MASK);
 8007a5c:	4b0e      	ldr	r3, [pc, #56]	; (8007a98 <BSP_SysInit+0x1f0>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8007a64:	603b      	str	r3, [r7, #0]
	reg                |= ( (BSP_PLLCON1_K2DIV_FINAL - 1u) << 16);
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8007a6c:	603b      	str	r3, [r7, #0]
	BSP_REG_SCU_PLLCON1 = reg;
 8007a6e:	4a0a      	ldr	r2, [pc, #40]	; (8007a98 <BSP_SysInit+0x1f0>)
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	6013      	str	r3, [r2, #0]
}
 8007a74:	bf00      	nop
 8007a76:	370c      	adds	r7, #12
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bc80      	pop	{r7}
 8007a7c:	4770      	bx	lr
 8007a7e:	bf00      	nop
 8007a80:	50004714 	.word	0x50004714
 8007a84:	50004704 	.word	0x50004704
 8007a88:	5000471c 	.word	0x5000471c
 8007a8c:	0007ffff 	.word	0x0007ffff
 8007a90:	50004710 	.word	0x50004710
 8007a94:	5000460c 	.word	0x5000460c
 8007a98:	50004718 	.word	0x50004718
 8007a9c:	00132700 	.word	0x00132700
 8007aa0:	50004604 	.word	0x50004604
 8007aa4:	50004610 	.word	0x50004610
 8007aa8:	50004614 	.word	0x50004614
 8007aac:	50004620 	.word	0x50004620

08007ab0 <BSP_SysClkFreqGet>:
 *
 * @brief This function is used to retrieve system or CPU clock frequency
 *
 */
CPU_INT32U BSP_SysClkFreqGet (void)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b085      	sub	sp, #20
 8007ab4:	af00      	add	r7, sp, #0
	CPU_INT08U  pll_p;
	CPU_INT08U  pll_k2;
	CPU_INT32U  cpu_freq;


	sysclk_src = (BSP_REG_SCU_SYSCLKCR & DEF_BIT_FIELD (2u, 16u)) >> 16u;
 8007ab6:	4b26      	ldr	r3, [pc, #152]	; (8007b50 <BSP_SysClkFreqGet+0xa0>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007abe:	0c1b      	lsrs	r3, r3, #16
 8007ac0:	72fb      	strb	r3, [r7, #11]
	sysclk_div = (BSP_REG_SCU_SYSCLKCR & DEF_BIT_FIELD (8u, 0u)) + 1u;
 8007ac2:	4b23      	ldr	r3, [pc, #140]	; (8007b50 <BSP_SysClkFreqGet+0xa0>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	3301      	adds	r3, #1
 8007ace:	813b      	strh	r3, [r7, #8]

	switch (sysclk_src) {
 8007ad0:	7afb      	ldrb	r3, [r7, #11]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d002      	beq.n	8007adc <BSP_SysClkFreqGet+0x2c>
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d003      	beq.n	8007ae2 <BSP_SysClkFreqGet+0x32>
 8007ada:	e022      	b.n	8007b22 <BSP_SysClkFreqGet+0x72>
	case 0:
		/* Fast Internal Oscillator selected as system clk */
		cpu_freq = BSP_CFG_SYS_INT_OSC_FI_FREQ_HZ;
 8007adc:	4b1d      	ldr	r3, [pc, #116]	; (8007b54 <BSP_SysClkFreqGet+0xa4>)
 8007ade:	60fb      	str	r3, [r7, #12]
		break;
 8007ae0:	e021      	b.n	8007b26 <BSP_SysClkFreqGet+0x76>

	case 1:
		/* PLL clock is selected as system clk */
		cpu_freq = BSP_CFG_SYS_XTAL_OSC_FREQ_HZ;
 8007ae2:	4b1d      	ldr	r3, [pc, #116]	; (8007b58 <BSP_SysClkFreqGet+0xa8>)
 8007ae4:	60fb      	str	r3, [r7, #12]
		pll_n    = (BSP_REG_SCU_PLLCON1 >>  8u) + 1u;
 8007ae6:	4b1d      	ldr	r3, [pc, #116]	; (8007b5c <BSP_SysClkFreqGet+0xac>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	0a1b      	lsrs	r3, r3, #8
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	3301      	adds	r3, #1
 8007af0:	71fb      	strb	r3, [r7, #7]
		pll_p    = (BSP_REG_SCU_PLLCON1 >> 24u) + 1u;
 8007af2:	4b1a      	ldr	r3, [pc, #104]	; (8007b5c <BSP_SysClkFreqGet+0xac>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	0e1b      	lsrs	r3, r3, #24
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	3301      	adds	r3, #1
 8007afc:	71bb      	strb	r3, [r7, #6]
		pll_k2   = (BSP_REG_SCU_PLLCON1 >> 16u) + 1u;
 8007afe:	4b17      	ldr	r3, [pc, #92]	; (8007b5c <BSP_SysClkFreqGet+0xac>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	0c1b      	lsrs	r3, r3, #16
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	3301      	adds	r3, #1
 8007b08:	717b      	strb	r3, [r7, #5]
		cpu_freq = ( (cpu_freq / pll_p) * pll_n) / pll_k2;
 8007b0a:	79bb      	ldrb	r3, [r7, #6]
 8007b0c:	68fa      	ldr	r2, [r7, #12]
 8007b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b12:	79fa      	ldrb	r2, [r7, #7]
 8007b14:	fb02 f203 	mul.w	r2, r2, r3
 8007b18:	797b      	ldrb	r3, [r7, #5]
 8007b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b1e:	60fb      	str	r3, [r7, #12]
		break;
 8007b20:	e001      	b.n	8007b26 <BSP_SysClkFreqGet+0x76>

	case 2:
	case 3:
	default:
		return ( (CPU_INT32U) 0u);
 8007b22:	2300      	movs	r3, #0
 8007b24:	e00e      	b.n	8007b44 <BSP_SysClkFreqGet+0x94>
	}
	cpu_freq /= sysclk_div;
 8007b26:	893b      	ldrh	r3, [r7, #8]
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b2e:	60fb      	str	r3, [r7, #12]
	if (DEF_BIT_IS_SET (BSP_REG_SCU_CPUCLKCR, BSP_BIT_CPUCLKCR_CPUDIV)) {
 8007b30:	4b0b      	ldr	r3, [pc, #44]	; (8007b60 <BSP_SysClkFreqGet+0xb0>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f003 0301 	and.w	r3, r3, #1
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d002      	beq.n	8007b42 <BSP_SysClkFreqGet+0x92>
		cpu_freq /= 2u;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	085b      	lsrs	r3, r3, #1
 8007b40:	60fb      	str	r3, [r7, #12]
	}
	return (cpu_freq);
 8007b42:	68fb      	ldr	r3, [r7, #12]
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3714      	adds	r7, #20
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bc80      	pop	{r7}
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop
 8007b50:	5000460c 	.word	0x5000460c
 8007b54:	016e3600 	.word	0x016e3600
 8007b58:	00b71b00 	.word	0x00b71b00
 8007b5c:	50004718 	.word	0x50004718
 8007b60:	50004610 	.word	0x50004610

08007b64 <BSP_Init>:
 * @params none
 * @returns none
 * @brief Initialization of the board support.
 */
void  BSP_Init (void)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	af00      	add	r7, sp, #0
	BSP_IntInit();
 8007b68:	f7ff f88e 	bl	8006c88 <BSP_IntInit>
	BSP_UART_Init();
 8007b6c:	f7ff fe3c 	bl	80077e8 <BSP_UART_Init>
	BSP_GPIO_Init();
 8007b70:	f7ff fc92 	bl	8007498 <BSP_GPIO_Init>
	BSP_CCU4_Init();
 8007b74:	f7fe ff80 	bl	8006a78 <BSP_CCU4_Init>
	if(BSP_SPI_Init()!=SPI_OK){
 8007b78:	f7ff fd34 	bl	80075e4 <BSP_SPI_Init>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d002      	beq.n	8007b88 <BSP_Init+0x24>
		APP_TRACE_INFO ("SPI NOT OK ...\n");
 8007b82:	4802      	ldr	r0, [pc, #8]	; (8007b8c <BSP_Init+0x28>)
 8007b84:	f000 ffd4 	bl	8008b30 <puts>
		/*Error should never get here*/
	}
}
 8007b88:	bf00      	nop
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	0800f058 	.word	0x0800f058

08007b90 <ITM_SendChar>:
    \param [in]     ch  Character to transmit.

    \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  if ((ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8007b98:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007b9c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8007ba0:	f003 0301 	and.w	r3, r3, #1
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d012      	beq.n	8007bce <ITM_SendChar+0x3e>
      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
 8007ba8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007bac:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8007bb0:	f003 0301 	and.w	r3, r3, #1

    \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if ((ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d00a      	beq.n	8007bce <ITM_SendChar+0x3e>
      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0].u32 == 0);
 8007bb8:	bf00      	nop
 8007bba:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d0fa      	beq.n	8007bba <ITM_SendChar+0x2a>
    ITM->PORT[0].u8 = (uint8_t) ch;
 8007bc4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	b2d2      	uxtb	r2, r2
 8007bcc:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8007bce:	687b      	ldr	r3, [r7, #4]
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bc80      	pop	{r7}
 8007bd8:	4770      	bx	lr
 8007bda:	bf00      	nop

08007bdc <initRetargetSwo>:
 *            CMSIS-Core > Reference > Debug Access
 *        (2) ARM Cortex-M4 Processor Technical Reference Manual
 *        (3) ARMv7-M Architecture Reference Manual
 */
void initRetargetSwo (void)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	af00      	add	r7, sp, #0
	// P2.1: After a system reset, this pin selects HWO0 (DB.TDO/DB.TRACESWO)
	// PORT2->HWSEL ... clear bits [3:2]
	PORT2->HWSEL &= ~PORT2_HWSEL_HW1_Msk;
 8007be0:	4a1c      	ldr	r2, [pc, #112]	; (8007c54 <initRetargetSwo+0x78>)
 8007be2:	4b1c      	ldr	r3, [pc, #112]	; (8007c54 <initRetargetSwo+0x78>)
 8007be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007be6:	f023 030c 	bic.w	r3, r3, #12
 8007bea:	6753      	str	r3, [r2, #116]	; 0x74
	// PORT2->HWSEL ... set bit [2] -> HWO0
	PORT2->HWSEL |= 0x01UL << PORT2_HWSEL_HW1_Pos;
 8007bec:	4a19      	ldr	r2, [pc, #100]	; (8007c54 <initRetargetSwo+0x78>)
 8007bee:	4b19      	ldr	r3, [pc, #100]	; (8007c54 <initRetargetSwo+0x78>)
 8007bf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bf2:	f043 0304 	orr.w	r3, r3, #4
 8007bf6:	6753      	str	r3, [r2, #116]	; 0x74

	// Enable trace systems
	// Source: ARMv7-M Architecture Reference Manual
	// DEMCR = Debug Exception and Monitor Control Register
	//         TRCENA ... global enable for DWT and ITM blocks
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8007bf8:	4a17      	ldr	r2, [pc, #92]	; (8007c58 <initRetargetSwo+0x7c>)
 8007bfa:	4b17      	ldr	r3, [pc, #92]	; (8007c58 <initRetargetSwo+0x7c>)
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c02:	60d3      	str	r3, [r2, #12]
	// SWO baud rate prescaler value
	// ACPR = Asynchronous Clock Prescaler Register
	//        fSWO = fCPU / (SWOSCALAR + 1)
	//        fSWO = 1MHz (maximum speed JLINK Lite CortexM)
	//        fCPU = 120MHz
	TPI->ACPR = 119UL;
 8007c04:	4b15      	ldr	r3, [pc, #84]	; (8007c5c <initRetargetSwo+0x80>)
 8007c06:	2277      	movs	r2, #119	; 0x77
 8007c08:	611a      	str	r2, [r3, #16]
	// Source: ARMv7-M Architecture Reference Manual
	// SPPR = Selected Pin Control Register
	//        0x0 ... Synchronous Trace Port Mode
	//        0x1 ... Asynchronous Serial Wire Output (Manchester)
	//        0x2 ... Asynchronous Serial Wire Output (NRZ)
	TPI->SPPR = 0x2UL;
 8007c0a:	4b14      	ldr	r3, [pc, #80]	; (8007c5c <initRetargetSwo+0x80>)
 8007c0c:	2202      	movs	r2, #2
 8007c0e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	// Source: ARM Cortex-M4 Processor Technical Reference Manual
	// Source: infineonforums -> 358-ITM-printf-style-debugging-not-working
	// FFCR = Formatter and Flash Control Register
	//        0x0 ... continuous formatting disabled
	//        0x1 ... continuous formatting enabled
	TPI->FFCR &= ~TPI_FFCR_EnFCont_Msk;
 8007c12:	4a12      	ldr	r2, [pc, #72]	; (8007c5c <initRetargetSwo+0x80>)
 8007c14:	4b11      	ldr	r3, [pc, #68]	; (8007c5c <initRetargetSwo+0x80>)
 8007c16:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 8007c1a:	f023 0302 	bic.w	r3, r3, #2
 8007c1e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

	// Unlock ITM
	// Source: infineonforums -> 358-ITM-printf-style-debugging-not-working
	ITM->LAR = 0xC5ACCE55;
 8007c22:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007c26:	4a0e      	ldr	r2, [pc, #56]	; (8007c60 <initRetargetSwo+0x84>)
 8007c28:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
	// Source: ARMv7-M Architecture Reference Manual, Sec. C1-7
	// TCR = Trace Control Register
	//       ITMENA ... enable ITM
	ITM->TCR |= ITM_TCR_ITMENA_Msk;
 8007c2c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007c30:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007c34:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8007c38:	f043 0301 	orr.w	r3, r3, #1
 8007c3c:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
	// Source: ARMv7-M Architecture Reference Manual, Sec. C1-7
	// TER = Trace Enable Register
	//       STIMENA ... Stimulus Port #N is enabled when bit STIMENA[N]
	ITM->TER = 0xFFFFFFFF;
 8007c40:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007c44:	f04f 32ff 	mov.w	r2, #4294967295
 8007c48:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
}
 8007c4c:	bf00      	nop
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bc80      	pop	{r7}
 8007c52:	4770      	bx	lr
 8007c54:	48028200 	.word	0x48028200
 8007c58:	e000edf0 	.word	0xe000edf0
 8007c5c:	e0040000 	.word	0xe0040000
 8007c60:	c5acce55 	.word	0xc5acce55

08007c64 <_write>:
 * @brief Retarget the printf() function to output via the ITM Debug module.
 *        This function relies on ITM_SendChar() defined in core_cm4.h of the
 *        CMSIS library.
 */
int _write (int file, char *buf, int nbytes)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b086      	sub	sp, #24
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	607a      	str	r2, [r7, #4]
	int i;

	for (i = 0; i < nbytes; i++) {
 8007c70:	2300      	movs	r3, #0
 8007c72:	617b      	str	r3, [r7, #20]
 8007c74:	e00a      	b.n	8007c8c <_write+0x28>
		ITM_SendChar ( (*buf++));
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	1c5a      	adds	r2, r3, #1
 8007c7a:	60ba      	str	r2, [r7, #8]
 8007c7c:	f993 3000 	ldrsb.w	r3, [r3]
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7ff ff85 	bl	8007b90 <ITM_SendChar>
 */
int _write (int file, char *buf, int nbytes)
{
	int i;

	for (i = 0; i < nbytes; i++) {
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	617b      	str	r3, [r7, #20]
 8007c8c:	697a      	ldr	r2, [r7, #20]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	dbf0      	blt.n	8007c76 <_write+0x12>
		ITM_SendChar ( (*buf++));
	}
	return nbytes;
 8007c94:	687b      	ldr	r3, [r7, #4]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3718      	adds	r7, #24
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop

08007ca0 <CPU_TS_TmrInit>:
 *
 *              See also CPU_TS_TmrRd()
 */
#if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
void  CPU_TS_TmrInit (void)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b082      	sub	sp, #8
 8007ca4:	af00      	add	r7, sp, #0
	CPU_INT32U  fclk_freq;

	fclk_freq = BSP_SysClkFreqGet();
 8007ca6:	f7ff ff03 	bl	8007ab0 <BSP_SysClkFreqGet>
 8007caa:	6078      	str	r0, [r7, #4]

	CPU_BSP_REG_DEMCR  |= DEF_BIT_24;
 8007cac:	4a09      	ldr	r2, [pc, #36]	; (8007cd4 <CPU_TS_TmrInit+0x34>)
 8007cae:	4b09      	ldr	r3, [pc, #36]	; (8007cd4 <CPU_TS_TmrInit+0x34>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007cb6:	6013      	str	r3, [r2, #0]
	CPU_BSP_REG_DWT_CR |= DEF_BIT_00;
 8007cb8:	4a07      	ldr	r2, [pc, #28]	; (8007cd8 <CPU_TS_TmrInit+0x38>)
 8007cba:	4b07      	ldr	r3, [pc, #28]	; (8007cd8 <CPU_TS_TmrInit+0x38>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f043 0301 	orr.w	r3, r3, #1
 8007cc2:	6013      	str	r3, [r2, #0]

	CPU_TS_TmrFreqSet ( (CPU_TS_TMR_FREQ) fclk_freq);
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f7fa fa9d 	bl	8002204 <CPU_TS_TmrFreqSet>
}
 8007cca:	bf00      	nop
 8007ccc:	3708      	adds	r7, #8
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop
 8007cd4:	e000edfc 	.word	0xe000edfc
 8007cd8:	e0001000 	.word	0xe0001000

08007cdc <CPU_TS_TmrRd>:
 *             resolution inadequate to measure desired times.
 *
 */
#if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
CPU_TS_TMR  CPU_TS_TmrRd (void)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
	CPU_TS_TMR  ts_tmr_cnts;


	ts_tmr_cnts = (CPU_TS_TMR) CPU_BSP_REG_DWT_CYCCNT;
 8007ce2:	4b04      	ldr	r3, [pc, #16]	; (8007cf4 <CPU_TS_TmrRd+0x18>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	607b      	str	r3, [r7, #4]

	return (ts_tmr_cnts);
 8007ce8:	687b      	ldr	r3, [r7, #4]
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	370c      	adds	r7, #12
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bc80      	pop	{r7}
 8007cf2:	4770      	bx	lr
 8007cf4:	e0001004 	.word	0xe0001004

08007cf8 <_lseek>:

/*
 * File position seek
 */
__attribute__((weak)) int _lseek(int file, int offset, int whence)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b085      	sub	sp, #20
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	607a      	str	r2, [r7, #4]
 file = file;
 offset = offset;
 whence = whence;
 return -1;
 8007d04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3714      	adds	r7, #20
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bc80      	pop	{r7}
 8007d10:	4770      	bx	lr
 8007d12:	bf00      	nop

08007d14 <_read>:

/*
 * File read
 */
__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b085      	sub	sp, #20
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	60f8      	str	r0, [r7, #12]
 8007d1c:	60b9      	str	r1, [r7, #8]
 8007d1e:	607a      	str	r2, [r7, #4]
 file = file;
 len  = len;
 return 0;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3714      	adds	r7, #20
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bc80      	pop	{r7}
 8007d2a:	4770      	bx	lr

08007d2c <_close>:

/*
 * File close
 */
__attribute__((weak)) int _close(void)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	af00      	add	r7, sp, #0
 return -1;
 8007d30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bc80      	pop	{r7}
 8007d3a:	4770      	bx	lr

08007d3c <_fstat>:

/*
 * File status
 */
__attribute__((weak)) int _fstat(int file, struct stat *st)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
 file = file;
 if(st)
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d002      	beq.n	8007d52 <_fstat+0x16>
  return -1;
 8007d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8007d50:	e001      	b.n	8007d56 <_fstat+0x1a>
 else
  return -2;
 8007d52:	f06f 0301 	mvn.w	r3, #1
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	370c      	adds	r7, #12
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bc80      	pop	{r7}
 8007d5e:	4770      	bx	lr

08007d60 <_sbrk>:
/* ========================================================================= */
/*
 * Heap break (position)
 */
__attribute__((weak)) void *_sbrk(int RequestedSize)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b087      	sub	sp, #28
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 unsigned int  HeapSize;
 static unsigned char *HeapBound;
 static unsigned char * heap= (unsigned char *)NULL;


 HeapSize   = (unsigned int)(&Heap_Bank1_Size);
 8007d68:	4b15      	ldr	r3, [pc, #84]	; (8007dc0 <_sbrk+0x60>)
 8007d6a:	617b      	str	r3, [r7, #20]

 /*
  * If this is the first time malloc() was invoked, we start with the
  * begining of the heap.
  */
 if(heap == (unsigned char *)NULL)
 8007d6c:	4b15      	ldr	r3, [pc, #84]	; (8007dc4 <_sbrk+0x64>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d108      	bne.n	8007d86 <_sbrk+0x26>
  {
   heap = (unsigned char *)&Heap_Bank1_Start;
 8007d74:	4b13      	ldr	r3, [pc, #76]	; (8007dc4 <_sbrk+0x64>)
 8007d76:	4a14      	ldr	r2, [pc, #80]	; (8007dc8 <_sbrk+0x68>)
 8007d78:	601a      	str	r2, [r3, #0]
   HeapBound  = (unsigned char *) (heap + HeapSize);
 8007d7a:	4b12      	ldr	r3, [pc, #72]	; (8007dc4 <_sbrk+0x64>)
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	4413      	add	r3, r2
 8007d82:	4a12      	ldr	r2, [pc, #72]	; (8007dcc <_sbrk+0x6c>)
 8007d84:	6013      	str	r3, [r2, #0]
  }

 /* Super duper algo to find out if we have memory for the latest request */
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;
 8007d86:	4b0f      	ldr	r3, [pc, #60]	; (8007dc4 <_sbrk+0x64>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	613b      	str	r3, [r7, #16]

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
 8007d8c:	4b0d      	ldr	r3, [pc, #52]	; (8007dc4 <_sbrk+0x64>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	461a      	mov	r2, r3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4413      	add	r3, r2
 8007d96:	3307      	adds	r3, #7
                                          & 0xFFFFFFF8);
 8007d98:	f023 0307 	bic.w	r3, r3, #7
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
 8007d9c:	60fb      	str	r3, [r7, #12]
                                          & 0xFFFFFFF8);

 /* Return no memory condition if we sense we are crossing the limit */
 if (NextBreak >=  HeapBound )
 8007d9e:	4b0b      	ldr	r3, [pc, #44]	; (8007dcc <_sbrk+0x6c>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d301      	bcc.n	8007dac <_sbrk+0x4c>
  return ((unsigned char *)NULL);
 8007da8:	2300      	movs	r3, #0
 8007daa:	e003      	b.n	8007db4 <_sbrk+0x54>
 else
 {
  heap = NextBreak;
 8007dac:	4a05      	ldr	r2, [pc, #20]	; (8007dc4 <_sbrk+0x64>)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6013      	str	r3, [r2, #0]
  return CurrBreak;
 8007db2:	693b      	ldr	r3, [r7, #16]
 }
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	371c      	adds	r7, #28
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bc80      	pop	{r7}
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop
 8007dc0:	0000ca58 	.word	0x0000ca58
 8007dc4:	200019f8 	.word	0x200019f8
 8007dc8:	200035a8 	.word	0x200035a8
 8007dcc:	200019fc 	.word	0x200019fc

08007dd0 <_init>:
 while(1){}
}

/* Init */
__attribute__((weak)) void _init(void)
{}
 8007dd0:	b480      	push	{r7}
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	bf00      	nop
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bc80      	pop	{r7}
 8007dda:	4770      	bx	lr

08007ddc <_isatty>:

/*
 * Terminal type evaluation
 */
__attribute__((weak)) int _isatty(int file)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 file = file;
 return -1;
 8007de4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bc80      	pop	{r7}
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop

08007df4 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4a1b      	ldr	r2, [pc, #108]	; (8007e6c <XMC_USIC_CH_Enable+0x78>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d003      	beq.n	8007e0c <XMC_USIC_CH_Enable+0x18>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	4a1a      	ldr	r2, [pc, #104]	; (8007e70 <XMC_USIC_CH_Enable+0x7c>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d103      	bne.n	8007e14 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 8007e0c:	4819      	ldr	r0, [pc, #100]	; (8007e74 <XMC_USIC_CH_Enable+0x80>)
 8007e0e:	f000 f8cd 	bl	8007fac <XMC_USIC_Enable>
 8007e12:	e016      	b.n	8007e42 <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	4a18      	ldr	r2, [pc, #96]	; (8007e78 <XMC_USIC_CH_Enable+0x84>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d003      	beq.n	8007e24 <XMC_USIC_CH_Enable+0x30>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	4a17      	ldr	r2, [pc, #92]	; (8007e7c <XMC_USIC_CH_Enable+0x88>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d103      	bne.n	8007e2c <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 8007e24:	4816      	ldr	r0, [pc, #88]	; (8007e80 <XMC_USIC_CH_Enable+0x8c>)
 8007e26:	f000 f8c1 	bl	8007fac <XMC_USIC_Enable>
 8007e2a:	e00a      	b.n	8007e42 <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4a15      	ldr	r2, [pc, #84]	; (8007e84 <XMC_USIC_CH_Enable+0x90>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d003      	beq.n	8007e3c <XMC_USIC_CH_Enable+0x48>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4a14      	ldr	r2, [pc, #80]	; (8007e88 <XMC_USIC_CH_Enable+0x94>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d102      	bne.n	8007e42 <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 8007e3c:	4813      	ldr	r0, [pc, #76]	; (8007e8c <XMC_USIC_CH_Enable+0x98>)
 8007e3e:	f000 f8b5 	bl	8007fac <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2203      	movs	r2, #3
 8007e46:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8007e48:	bf00      	nop
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	f003 0301 	and.w	r3, r3, #1
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d0f9      	beq.n	8007e4a <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5a:	f023 020f 	bic.w	r2, r3, #15
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	641a      	str	r2, [r3, #64]	; 0x40
}
 8007e62:	bf00      	nop
 8007e64:	3708      	adds	r7, #8
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	40030000 	.word	0x40030000
 8007e70:	40030200 	.word	0x40030200
 8007e74:	40030008 	.word	0x40030008
 8007e78:	48020000 	.word	0x48020000
 8007e7c:	48020200 	.word	0x48020200
 8007e80:	48020008 	.word	0x48020008
 8007e84:	48024000 	.word	0x48024000
 8007e88:	48024200 	.word	0x48024200
 8007e8c:	48024008 	.word	0x48024008

08007e90 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b08e      	sub	sp, #56	; 0x38
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	2b63      	cmp	r3, #99	; 0x63
 8007ea0:	d95a      	bls.n	8007f58 <XMC_USIC_CH_SetBaudrate+0xc8>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d057      	beq.n	8007f58 <XMC_USIC_CH_SetBaudrate+0xc8>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8007ea8:	f000 fa8c 	bl	80083c4 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8007eac:	4602      	mov	r2, r0
 8007eae:	4b2f      	ldr	r3, [pc, #188]	; (8007f6c <XMC_USIC_CH_SetBaudrate+0xdc>)
 8007eb0:	fba3 2302 	umull	r2, r3, r3, r2
 8007eb4:	095b      	lsrs	r3, r3, #5
 8007eb6:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	4a2c      	ldr	r2, [pc, #176]	; (8007f6c <XMC_USIC_CH_SetBaudrate+0xdc>)
 8007ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8007ec0:	095b      	lsrs	r3, r3, #5
 8007ec2:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 8007ecc:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8007ed0:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8007ed2:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8007ed6:	633b      	str	r3, [r7, #48]	; 0x30
 8007ed8:	e022      	b.n	8007f20 <XMC_USIC_CH_SetBaudrate+0x90>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 8007eda:	6a3b      	ldr	r3, [r7, #32]
 8007edc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ede:	fb02 f203 	mul.w	r2, r2, r3
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	6879      	ldr	r1, [r7, #4]
 8007ee6:	fb01 f303 	mul.w	r3, r1, r3
 8007eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eee:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	0a9b      	lsrs	r3, r3, #10
 8007ef4:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007efc:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f04:	d209      	bcs.n	8007f1a <XMC_USIC_CH_SetBaudrate+0x8a>
 8007f06:	697a      	ldr	r2, [r7, #20]
 8007f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d205      	bcs.n	8007f1a <XMC_USIC_CH_SetBaudrate+0x8a>
      {
        pdiv_frac_min = pdiv_frac;
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 8007f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f18:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8007f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1c:	3b01      	subs	r3, #1
 8007f1e:	633b      	str	r3, [r7, #48]	; 0x30
 8007f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d1d9      	bne.n	8007eda <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 8007f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f28:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    /*FHTW: BRG.SCLKCFG[31:30]-Bit (Bit 31:30 auf 01 setzen, damit mit positiver SCLK die Daten (MOSI) anliegen)*/
    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	695a      	ldr	r2, [r3, #20]
 8007f34:	4b0e      	ldr	r3, [pc, #56]	; (8007f70 <XMC_USIC_CH_SetBaudrate+0xe0>)
 8007f36:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	3a01      	subs	r2, #1
 8007f3c:	0292      	lsls	r2, r2, #10

    /*FHTW: BRG.SCLKCFG[31:30]-Bit (Bit 31:30 auf 01 setzen, damit mit positiver SCLK die Daten (MOSI) anliegen)*/
    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8007f3e:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos) |
 8007f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f42:	3b01      	subs	r3, #1
 8007f44:	041b      	lsls	r3, r3, #16
    /*FHTW: BRG.SCLKCFG[31:30]-Bit (Bit 31:30 auf 01 setzen, damit mit positiver SCLK die Daten (MOSI) anliegen)*/
    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8007f46:	4313      	orrs	r3, r2
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos) |
 8007f48:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    /*FHTW: BRG.SCLKCFG[31:30]-Bit (Bit 31:30 auf 01 setzen, damit mit positiver SCLK die Daten (MOSI) anliegen)*/
    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos) |
				   (0x1UL<<USIC_CH_BRG_SCLKCFG_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 8007f50:	2300      	movs	r3, #0
 8007f52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007f56:	e002      	b.n	8007f5e <XMC_USIC_CH_SetBaudrate+0xce>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  return status;
 8007f5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3738      	adds	r7, #56	; 0x38
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	51eb851f 	.word	0x51eb851f
 8007f70:	fc0080ef 	.word	0xfc0080ef

08007f74 <XMC_USIC_CH_SetInterruptNodePointer>:
}

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	607a      	str	r2, [r7, #4]
 8007f80:	72fb      	strb	r3, [r7, #11]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	699a      	ldr	r2, [r3, #24]
 8007f86:	7afb      	ldrb	r3, [r7, #11]
 8007f88:	2107      	movs	r1, #7
 8007f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8007f8e:	43db      	mvns	r3, r3
 8007f90:	401a      	ands	r2, r3
                  (service_request << (uint32_t)interrupt_node));
 8007f92:	7afb      	ldrb	r3, [r7, #11]
 8007f94:	6879      	ldr	r1, [r7, #4]
 8007f96:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8007f9a:	431a      	orrs	r2, r3
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	619a      	str	r2, [r3, #24]
                  (service_request << (uint32_t)interrupt_node));
}
 8007fa0:	bf00      	nop
 8007fa2:	3714      	adds	r7, #20
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bc80      	pop	{r7}
 8007fa8:	4770      	bx	lr
 8007faa:	bf00      	nop

08007fac <XMC_USIC_Enable>:
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
                   (service_request << (uint32_t)interrupt_node));
}

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4a0d      	ldr	r2, [pc, #52]	; (8007fec <XMC_USIC_Enable+0x40>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d104      	bne.n	8007fc6 <XMC_USIC_Enable+0x1a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8007fbc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007fc0:	f000 f9da 	bl	8008378 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8007fc4:	e00e      	b.n	8007fe4 <XMC_USIC_Enable+0x38>
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
#endif	
  }
#if defined(USIC1)  
  else if (usic == USIC1)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4a09      	ldr	r2, [pc, #36]	; (8007ff0 <XMC_USIC_Enable+0x44>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d103      	bne.n	8007fd6 <XMC_USIC_Enable+0x2a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
#endif	
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 8007fce:	4809      	ldr	r0, [pc, #36]	; (8007ff4 <XMC_USIC_Enable+0x48>)
 8007fd0:	f000 f9d2 	bl	8008378 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8007fd4:	e006      	b.n	8007fe4 <XMC_USIC_Enable+0x38>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
#endif	
  }
#endif  
#if defined(USIC2)  
  else if (usic == USIC2)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4a07      	ldr	r2, [pc, #28]	; (8007ff8 <XMC_USIC_Enable+0x4c>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d102      	bne.n	8007fe4 <XMC_USIC_Enable+0x38>
  {
#if defined(CLOCK_GATING_SUPPORTED) 
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 8007fde:	4807      	ldr	r0, [pc, #28]	; (8007ffc <XMC_USIC_Enable+0x50>)
 8007fe0:	f000 f9ca 	bl	8008378 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8007fe4:	bf00      	nop
 8007fe6:	3708      	adds	r7, #8
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	40030008 	.word	0x40030008
 8007ff0:	48020008 	.word	0x48020008
 8007ff4:	10000080 	.word	0x10000080
 8007ff8:	48024008 	.word	0x48024008
 8007ffc:	10000100 	.word	0x10000100

08008000 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	60da      	str	r2, [r3, #12]
}
 8008014:	bf00      	nop
 8008016:	370c      	adds	r7, #12
 8008018:	46bd      	mov	sp, r7
 800801a:	bc80      	pop	{r7}
 800801c:	4770      	bx	lr
 800801e:	bf00      	nop

08008020 <XMC_CCU4_lDeassertReset>:

  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  switch ((uint32_t)module)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	4a12      	ldr	r2, [pc, #72]	; (8008074 <XMC_CCU4_lDeassertReset+0x54>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d011      	beq.n	8008054 <XMC_CCU4_lDeassertReset+0x34>
 8008030:	4a10      	ldr	r2, [pc, #64]	; (8008074 <XMC_CCU4_lDeassertReset+0x54>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d803      	bhi.n	800803e <XMC_CCU4_lDeassertReset+0x1e>
 8008036:	4a10      	ldr	r2, [pc, #64]	; (8008078 <XMC_CCU4_lDeassertReset+0x58>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d007      	beq.n	800804c <XMC_CCU4_lDeassertReset+0x2c>
      break;
#endif

    default:
      XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
      break;   
 800803c:	e016      	b.n	800806c <XMC_CCU4_lDeassertReset+0x4c>
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
  switch ((uint32_t)module)
 800803e:	4a0f      	ldr	r2, [pc, #60]	; (800807c <XMC_CCU4_lDeassertReset+0x5c>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d00b      	beq.n	800805c <XMC_CCU4_lDeassertReset+0x3c>
 8008044:	4a0e      	ldr	r2, [pc, #56]	; (8008080 <XMC_CCU4_lDeassertReset+0x60>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d00c      	beq.n	8008064 <XMC_CCU4_lDeassertReset+0x44>
      break;
#endif

    default:
      XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
      break;   
 800804a:	e00f      	b.n	800806c <XMC_CCU4_lDeassertReset+0x4c>
__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
  switch ((uint32_t)module)
  {
    case (uint32_t)CCU40:
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 800804c:	2004      	movs	r0, #4
 800804e:	f000 f993 	bl	8008378 <XMC_SCU_RESET_DeassertPeripheralReset>
      break;
 8008052:	e00b      	b.n	800806c <XMC_CCU4_lDeassertReset+0x4c>
      
#if defined(CCU41)
    case (uint32_t)CCU41:
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8008054:	2008      	movs	r0, #8
 8008056:	f000 f98f 	bl	8008378 <XMC_SCU_RESET_DeassertPeripheralReset>
      break;
 800805a:	e007      	b.n	800806c <XMC_CCU4_lDeassertReset+0x4c>
#endif

#if defined(CCU42)
    case (uint32_t)CCU42:
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 800805c:	2010      	movs	r0, #16
 800805e:	f000 f98b 	bl	8008378 <XMC_SCU_RESET_DeassertPeripheralReset>
      break;
 8008062:	e003      	b.n	800806c <XMC_CCU4_lDeassertReset+0x4c>
#endif

#if defined(CCU43)
    case (uint32_t)CCU43:
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8008064:	4807      	ldr	r0, [pc, #28]	; (8008084 <XMC_CCU4_lDeassertReset+0x64>)
 8008066:	f000 f987 	bl	8008378 <XMC_SCU_RESET_DeassertPeripheralReset>
      break;
 800806a:	bf00      	nop
    default:
      XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
      break;   

  }
}
 800806c:	bf00      	nop
 800806e:	3708      	adds	r7, #8
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	40010000 	.word	0x40010000
 8008078:	4000c000 	.word	0x4000c000
 800807c:	40014000 	.word	0x40014000
 8008080:	48004000 	.word	0x48004000
 8008084:	10000001 	.word	0x10000001

08008088 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8008090:	2010      	movs	r0, #16
 8008092:	f000 f9a7 	bl	80083e4 <XMC_SCU_CLOCK_EnableClock>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f7ff ffc2 	bl	8008020 <XMC_CCU4_lDeassertReset>
#endif
}
 800809c:	bf00      	nop
 800809e:	3708      	adds	r7, #8
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	460b      	mov	r3, r1
 80080ae:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f7ff ffe9 	bl	8008088 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f7ff ffa2 	bl	8008000 <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80080c8:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 80080ca:	78fb      	ldrb	r3, [r7, #3]
 80080cc:	039b      	lsls	r3, r3, #14
 80080ce:	68fa      	ldr	r2, [r7, #12]
 80080d0:	4313      	orrs	r3, r2
 80080d2:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	68fa      	ldr	r2, [r7, #12]
 80080d8:	601a      	str	r2, [r3, #0]
}
 80080da:	bf00      	nop
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop

080080e4 <XMC_CCU4_SetModuleClock>:

/* API to select CCU4 module clock */
void XMC_CCU4_SetModuleClock(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_CLOCK_t clock)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b085      	sub	sp, #20
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	460b      	mov	r3, r1
 80080ee:	70fb      	strb	r3, [r7, #3]
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Clock", XMC_CCU4_SLICE_CHECK_CLOCK(clock));

  gctrl = module->GCTRL;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_PCIS_Msk);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80080fc:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) clock) << CCU4_GCTRL_PCIS_Pos;
 80080fe:	78fb      	ldrb	r3, [r7, #3]
 8008100:	011b      	lsls	r3, r3, #4
 8008102:	68fa      	ldr	r2, [r7, #12]
 8008104:	4313      	orrs	r3, r2
 8008106:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	68fa      	ldr	r2, [r7, #12]
 800810c:	601a      	str	r2, [r3, #0]
}
 800810e:	bf00      	nop
 8008110:	3714      	adds	r7, #20
 8008112:	46bd      	mov	sp, r7
 8008114:	bc80      	pop	{r7}
 8008116:	4770      	bx	lr

08008118 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
		                            const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	795b      	ldrb	r3, [r3, #5]
 800812e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008132:	b2db      	uxtb	r3, r3
 8008134:	051a      	lsls	r2, r3, #20
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	791b      	ldrb	r3, [r3, #4]
 800813e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008142:	b2db      	uxtb	r3, r3
 8008144:	461a      	mov	r2, r3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	795b      	ldrb	r3, [r3, #5]
 800814e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008152:	b2db      	uxtb	r3, r3
 8008154:	461a      	mov	r2, r3
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	795b      	ldrb	r3, [r3, #5]
 800815e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008162:	b2db      	uxtb	r3, r3
 8008164:	461a      	mov	r2, r3
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	791b      	ldrb	r3, [r3, #4]
 800816e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008172:	b2db      	uxtb	r3, r3
 8008174:	461a      	mov	r2, r3
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800817a:	bf00      	nop
 800817c:	370c      	adds	r7, #12
 800817e:	46bd      	mov	sp, r7
 8008180:	bc80      	pop	{r7}
 8008182:	4770      	bx	lr

08008184 <XMC_CCU4_SLICE_StartConfig>:

/* API to configure the Start trigger function of a slice */
void XMC_CCU4_SLICE_StartConfig(XMC_CCU4_SLICE_t *const slice,
		                        const XMC_CCU4_SLICE_EVENT_t event,
                                const XMC_CCU4_SLICE_START_MODE_t start_mode)
{
 8008184:	b480      	push	{r7}
 8008186:	b085      	sub	sp, #20
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	460b      	mov	r3, r1
 800818e:	70fb      	strb	r3, [r7, #3]
 8008190:	4613      	mov	r3, r2
 8008192:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Start Mode", 
             ((start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR) ||\
		          (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START)));
  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	60bb      	str	r3, [r7, #8]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_STRTS_Msk);
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	f023 0303 	bic.w	r3, r3, #3
 80081a0:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_STRTS_Pos;
 80081a2:	78fb      	ldrb	r3, [r7, #3]
 80081a4:	68ba      	ldr	r2, [r7, #8]
 80081a6:	4313      	orrs	r3, r2
 80081a8:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	68ba      	ldr	r2, [r7, #8]
 80081ae:	605a      	str	r2, [r3, #4]
  
  tc  = slice->TC;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	695b      	ldr	r3, [r3, #20]
 80081b4:	60fb      	str	r3, [r7, #12]
  /* Next, Configure the start mode */
  if (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR)
 80081b6:	78bb      	ldrb	r3, [r7, #2]
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d104      	bne.n	80081c6 <XMC_CCU4_SLICE_StartConfig+0x42>
  {
    tc |= (uint32_t)CCU4_CC4_TC_STRM_Msk;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80081c2:	60fb      	str	r3, [r7, #12]
 80081c4:	e003      	b.n	80081ce <XMC_CCU4_SLICE_StartConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t)CCU4_CC4_TC_STRM_Msk);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80081cc:	60fb      	str	r3, [r7, #12]
  }
  
  slice->TC = tc;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	68fa      	ldr	r2, [r7, #12]
 80081d2:	615a      	str	r2, [r3, #20]
}
 80081d4:	bf00      	nop
 80081d6:	3714      	adds	r7, #20
 80081d8:	46bd      	mov	sp, r7
 80081da:	bc80      	pop	{r7}
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop

080081e0 <XMC_CCU4_SLICE_ConfigureEvent>:

/* API to configure a slice trigger event */
void XMC_CCU4_SLICE_ConfigureEvent(XMC_CCU4_SLICE_t *const slice,
		                               const XMC_CCU4_SLICE_EVENT_t event,
                                   const XMC_CCU4_SLICE_EVENT_CONFIG_t *const config)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b089      	sub	sp, #36	; 0x24
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	460b      	mov	r3, r1
 80081ea:	607a      	str	r2, [r7, #4]
 80081ec:	72fb      	strb	r3, [r7, #11]
             ((config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
              (config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Debounce Period", 
             XMC_CCU4_SLICE_CHECK_EVENT_FILTER(config->duration));
  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
 80081ee:	7afb      	ldrb	r3, [r7, #11]
 80081f0:	3b01      	subs	r3, #1
 80081f2:	77fb      	strb	r3, [r7, #31]
  ins |= ((uint32_t) config->mapped_input) << pos;

  slice->INS1 = ins;

#else
  ins = slice->INS;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	61bb      	str	r3, [r7, #24]
  
  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU4_CC4_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
 80081fa:	7ffb      	ldrb	r3, [r7, #31]
 80081fc:	005b      	lsls	r3, r3, #1
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	3310      	adds	r3, #16
 8008202:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 8008204:	7dfb      	ldrb	r3, [r7, #23]
 8008206:	2203      	movs	r2, #3
 8008208:	fa02 f303 	lsl.w	r3, r2, r3
 800820c:	43db      	mvns	r3, r3
 800820e:	69ba      	ldr	r2, [r7, #24]
 8008210:	4013      	ands	r3, r2
 8008212:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->edge) << pos;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	785b      	ldrb	r3, [r3, #1]
 8008218:	461a      	mov	r2, r3
 800821a:	7dfb      	ldrb	r3, [r7, #23]
 800821c:	fa02 f303 	lsl.w	r3, r2, r3
 8008220:	69ba      	ldr	r2, [r7, #24]
 8008222:	4313      	orrs	r3, r2
 8008224:	61bb      	str	r3, [r7, #24]
  
  /* Next, the level */
  pos = ((uint8_t) CCU4_CC4_INS_EV0LM_Pos) + offset;
 8008226:	7ffb      	ldrb	r3, [r7, #31]
 8008228:	3316      	adds	r3, #22
 800822a:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 800822c:	7dfb      	ldrb	r3, [r7, #23]
 800822e:	2201      	movs	r2, #1
 8008230:	fa02 f303 	lsl.w	r3, r2, r3
 8008234:	43db      	mvns	r3, r3
 8008236:	69ba      	ldr	r2, [r7, #24]
 8008238:	4013      	ands	r3, r2
 800823a:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->level) << pos;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	789b      	ldrb	r3, [r3, #2]
 8008240:	461a      	mov	r2, r3
 8008242:	7dfb      	ldrb	r3, [r7, #23]
 8008244:	fa02 f303 	lsl.w	r3, r2, r3
 8008248:	69ba      	ldr	r2, [r7, #24]
 800824a:	4313      	orrs	r3, r2
 800824c:	61bb      	str	r3, [r7, #24]
  
  /* Next, the debounce filter */
  pos = ((uint8_t) CCU4_CC4_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
 800824e:	7ffb      	ldrb	r3, [r7, #31]
 8008250:	005b      	lsls	r3, r3, #1
 8008252:	b2db      	uxtb	r3, r3
 8008254:	3319      	adds	r3, #25
 8008256:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 8008258:	7dfb      	ldrb	r3, [r7, #23]
 800825a:	2203      	movs	r2, #3
 800825c:	fa02 f303 	lsl.w	r3, r2, r3
 8008260:	43db      	mvns	r3, r3
 8008262:	69ba      	ldr	r2, [r7, #24]
 8008264:	4013      	ands	r3, r2
 8008266:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->duration) << pos;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	78db      	ldrb	r3, [r3, #3]
 800826c:	461a      	mov	r2, r3
 800826e:	7dfb      	ldrb	r3, [r7, #23]
 8008270:	fa02 f303 	lsl.w	r3, r2, r3
 8008274:	69ba      	ldr	r2, [r7, #24]
 8008276:	4313      	orrs	r3, r2
 8008278:	61bb      	str	r3, [r7, #24]

  /* Finally the input */
  pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
 800827a:	7ffb      	ldrb	r3, [r7, #31]
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 8008280:	7dfb      	ldrb	r3, [r7, #23]
 8008282:	220f      	movs	r2, #15
 8008284:	fa02 f303 	lsl.w	r3, r2, r3
 8008288:	43db      	mvns	r3, r3
 800828a:	69ba      	ldr	r2, [r7, #24]
 800828c:	4013      	ands	r3, r2
 800828e:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->mapped_input) << pos;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	461a      	mov	r2, r3
 8008296:	7dfb      	ldrb	r3, [r7, #23]
 8008298:	fa02 f303 	lsl.w	r3, r2, r3
 800829c:	69ba      	ldr	r2, [r7, #24]
 800829e:	4313      	orrs	r3, r2
 80082a0:	61bb      	str	r3, [r7, #24]

  slice->INS = ins;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	69ba      	ldr	r2, [r7, #24]
 80082a6:	601a      	str	r2, [r3, #0]
#endif
}
 80082a8:	bf00      	nop
 80082aa:	3724      	adds	r7, #36	; 0x24
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bc80      	pop	{r7}
 80082b0:	4770      	bx	lr
 80082b2:	bf00      	nop

080082b4 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b087      	sub	sp, #28
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	460b      	mov	r3, r1
 80082be:	70fb      	strb	r3, [r7, #3]
 80082c0:	4613      	mov	r3, r2
 80082c2:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80082ca:	60fb      	str	r3, [r7, #12]
  
  switch(event)
 80082cc:	78fb      	ldrb	r3, [r7, #3]
 80082ce:	2b09      	cmp	r3, #9
 80082d0:	d82c      	bhi.n	800832c <XMC_CCU4_SLICE_SetInterruptNode+0x78>
 80082d2:	a201      	add	r2, pc, #4	; (adr r2, 80082d8 <XMC_CCU4_SLICE_SetInterruptNode+0x24>)
 80082d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d8:	08008301 	.word	0x08008301
 80082dc:	08008301 	.word	0x08008301
 80082e0:	0800830b 	.word	0x0800830b
 80082e4:	0800830b 	.word	0x0800830b
 80082e8:	0800832d 	.word	0x0800832d
 80082ec:	0800832d 	.word	0x0800832d
 80082f0:	0800832d 	.word	0x0800832d
 80082f4:	0800832d 	.word	0x0800832d
 80082f8:	08008315 	.word	0x08008315
 80082fc:	08008321 	.word	0x08008321
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 8008300:	2303      	movs	r3, #3
 8008302:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 8008304:	2300      	movs	r3, #0
 8008306:	617b      	str	r3, [r7, #20]
      break;
 8008308:	e016      	b.n	8008338 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 800830a:	230c      	movs	r3, #12
 800830c:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 800830e:	2302      	movs	r3, #2
 8008310:	617b      	str	r3, [r7, #20]
      break;
 8008312:	e011      	b.n	8008338 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 8008314:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008318:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 800831a:	2308      	movs	r3, #8
 800831c:	617b      	str	r3, [r7, #20]
      break;
 800831e:	e00b      	b.n	8008338 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 8008320:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008324:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 8008326:	230a      	movs	r3, #10
 8008328:	617b      	str	r3, [r7, #20]
      break;
 800832a:	e005      	b.n	8008338 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 800832c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8008330:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 8008332:	230c      	movs	r3, #12
 8008334:	617b      	str	r3, [r7, #20]
      break;
 8008336:	bf00      	nop
  }
  
  srs &= ~mask; 
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	43db      	mvns	r3, r3
 800833c:	68fa      	ldr	r2, [r7, #12]
 800833e:	4013      	ands	r3, r2
 8008340:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 8008342:	78ba      	ldrb	r2, [r7, #2]
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	fa02 f303 	lsl.w	r3, r2, r3
 800834a:	68fa      	ldr	r2, [r7, #12]
 800834c:	4313      	orrs	r3, r2
 800834e:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8008358:	bf00      	nop
 800835a:	371c      	adds	r7, #28
 800835c:	46bd      	mov	sp, r7
 800835e:	bc80      	pop	{r7}
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop

08008364 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8008364:	b480      	push	{r7}
 8008366:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008368:	4b02      	ldr	r3, [pc, #8]	; (8008374 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x10>)
 800836a:	681b      	ldr	r3, [r3, #0]
}
 800836c:	4618      	mov	r0, r3
 800836e:	46bd      	mov	sp, r7
 8008370:	bc80      	pop	{r7}
 8008372:	4770      	bx	lr
 8008374:	20000030 	.word	0x20000030

08008378 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) |= (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8008378:	b480      	push	{r7}
 800837a:	b085      	sub	sp, #20
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	0f1b      	lsrs	r3, r3, #28
 8008384:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800838c:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) |= (uint32_t)mask;
 800838e:	68fa      	ldr	r2, [r7, #12]
 8008390:	4613      	mov	r3, r2
 8008392:	005b      	lsls	r3, r3, #1
 8008394:	4413      	add	r3, r2
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	4a09      	ldr	r2, [pc, #36]	; (80083c0 <XMC_SCU_RESET_DeassertPeripheralReset+0x48>)
 800839a:	441a      	add	r2, r3
 800839c:	68f9      	ldr	r1, [r7, #12]
 800839e:	460b      	mov	r3, r1
 80083a0:	005b      	lsls	r3, r3, #1
 80083a2:	440b      	add	r3, r1
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	4619      	mov	r1, r3
 80083a8:	4b05      	ldr	r3, [pc, #20]	; (80083c0 <XMC_SCU_RESET_DeassertPeripheralReset+0x48>)
 80083aa:	440b      	add	r3, r1
 80083ac:	6819      	ldr	r1, [r3, #0]
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	430b      	orrs	r3, r1
 80083b2:	6013      	str	r3, [r2, #0]
}
 80083b4:	bf00      	nop
 80083b6:	3714      	adds	r7, #20
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bc80      	pop	{r7}
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop
 80083c0:	50004414 	.word	0x50004414

080083c4 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80083c8:	f7ff ffcc 	bl	8008364 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 80083cc:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 80083ce:	4b04      	ldr	r3, [pc, #16]	; (80083e0 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 80083d0:	695b      	ldr	r3, [r3, #20]
 80083d2:	f003 0301 	and.w	r3, r3, #1
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80083d6:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 80083da:	4618      	mov	r0, r3
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop
 80083e0:	50004600 	.word	0x50004600

080083e4 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	4603      	mov	r3, r0
 80083ec:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 80083ee:	4a04      	ldr	r2, [pc, #16]	; (8008400 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 80083f0:	79fb      	ldrb	r3, [r7, #7]
 80083f2:	6053      	str	r3, [r2, #4]
}
 80083f4:	bf00      	nop
 80083f6:	370c      	adds	r7, #12
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bc80      	pop	{r7}
 80083fc:	4770      	bx	lr
 80083fe:	bf00      	nop
 8008400:	50004600 	.word	0x50004600

08008404 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008410:	b2db      	uxtb	r3, r3
 8008412:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008416:	b2db      	uxtb	r3, r3
}
 8008418:	4618      	mov	r0, r3
 800841a:	370c      	adds	r7, #12
 800841c:	46bd      	mov	sp, r7
 800841e:	bc80      	pop	{r7}
 8008420:	4770      	bx	lr
 8008422:	bf00      	nop

08008424 <XMC_USIC_CH_GetReceiveBufferStatus>:
 * can be read from RBUF.
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
{
 8008424:	b480      	push	{r7}
 8008426:	b083      	sub	sp, #12
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008430:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
}
 8008434:	4618      	mov	r0, r3
 8008436:	370c      	adds	r7, #12
 8008438:	46bd      	mov	sp, r7
 800843a:	bc80      	pop	{r7}
 800843c:	4770      	bx	lr
 800843e:	bf00      	nop

08008440 <XMC_SPI_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_GetStatusFlag()
 */
__STATIC_INLINE void XMC_SPI_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	431a      	orrs	r2, r3
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8008456:	bf00      	nop
 8008458:	370c      	adds	r7, #12
 800845a:	46bd      	mov	sp, r7
 800845c:	bc80      	pop	{r7}
 800845e:	4770      	bx	lr

08008460 <XMC_SPI_CH_Init>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/
 
/* Initializes the selected SPI channel with the config structure. */
void XMC_SPI_CH_Init(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  XMC_USIC_CH_Enable(channel);
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f7ff fcc2 	bl	8007df4 <XMC_USIC_CH_Enable>
  
  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	791b      	ldrb	r3, [r3, #4]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d106      	bne.n	8008486 <XMC_SPI_CH_Init+0x26>
  {
    /* Configure baud rate */
    (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING); 
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2202      	movs	r2, #2
 800847e:	4619      	mov	r1, r3
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f7ff fd05 	bl	8007e90 <XMC_USIC_CH_SetBaudrate>
  
  /* Configuration of USIC Shift Control */
  /* Transmission Mode (TRM) = 1  */
  /* Passive Data Level (PDL) = 1 */
  /* FHTW: SDIR-Bit (Bit 0 of SCTR) to 1 in order to send MSB first */
  channel->SCTR = USIC_CH_SCTR_PDL_Msk |
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	4a0f      	ldr	r2, [pc, #60]	; (80084c8 <XMC_SPI_CH_Init+0x68>)
 800848a:	635a      	str	r2, [r3, #52]	; 0x34
				  (0x1UL << USIC_CH_SCTR_SDIR_Pos);

  /* Configuration of USIC Transmit Control/Status Register */
  /* TBUF Data Enable (TDEN) = 1 */
  /* TBUF Data Single Shot Mode (TDSSM) = 1 */
  channel->TCSR = (uint32_t)(USIC_CH_TCSR_HPCMD_Msk |
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 8008492:	639a      	str	r2, [r3, #56]	; 0x38
                  (0x01UL  << USIC_CH_TCSR_TDEN_Pos) |
                  USIC_CH_TCSR_TDSSM_Msk);

  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	791b      	ldrb	r3, [r3, #4]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d107      	bne.n	80084ac <XMC_SPI_CH_Init+0x4c>
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
                           USIC_CH_PCR_SSCMode_SELCTR_Msk |
                           (uint32_t)config->selo_inversion |
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	795b      	ldrb	r3, [r3, #5]
                  USIC_CH_TCSR_TDSSM_Msk);

  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
 80084a0:	f043 030b 	orr.w	r3, r3, #11
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	461a      	mov	r2, r3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	63da      	str	r2, [r3, #60]	; 0x3c
                           (uint32_t)config->selo_inversion |
                           USIC_CH_PCR_SSCMode_FEM_Msk);
  }

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f04f 32ff 	mov.w	r2, #4294967295
 80084b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	88db      	ldrh	r3, [r3, #6]
 80084b8:	461a      	mov	r2, r3
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	641a      	str	r2, [r3, #64]	; 0x40
}
 80084be:	bf00      	nop
 80084c0:	3708      	adds	r7, #8
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	073f0103 	.word	0x073f0103

080084cc <XMC_SPI_CH_Transmit>:
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SELO_Msk;
}

/* Puts the data into FIFO if FIFO mode is enabled or else into standard buffers, by setting the proper mode. */
void XMC_SPI_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data, const XMC_SPI_CH_MODE_t mode)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	460b      	mov	r3, r1
 80084d6:	807b      	strh	r3, [r7, #2]
 80084d8:	4613      	mov	r3, r2
 80084da:	707b      	strb	r3, [r7, #1]

  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
                 (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 80084e4:	787b      	ldrb	r3, [r7, #1]
 80084e6:	019b      	lsls	r3, r3, #6
 80084e8:	b2db      	uxtb	r3, r3

/* Puts the data into FIFO if FIFO mode is enabled or else into standard buffers, by setting the proper mode. */
void XMC_SPI_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data, const XMC_SPI_CH_MODE_t mode)
{

  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 80084ea:	431a      	orrs	r2, r3
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	641a      	str	r2, [r3, #64]	; 0x40
                 (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);


  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80084f6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d112      	bne.n	8008524 <XMC_SPI_CH_Transmit+0x58>
  {
    while((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(channel) == (uint32_t)XMC_USIC_CH_TBUF_STATUS_BUSY)
 80084fe:	bf00      	nop
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f7ff ff7f 	bl	8008404 <XMC_USIC_CH_GetTransmitBufferStatus>
 8008506:	4603      	mov	r3, r0
 8008508:	2b80      	cmp	r3, #128	; 0x80
 800850a:	d0f9      	beq.n	8008500 <XMC_SPI_CH_Transmit+0x34>
    {
    }
  
    XMC_SPI_CH_ClearStatusFlag(channel, (uint32_t)XMC_SPI_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 800850c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f7ff ff95 	bl	8008440 <XMC_SPI_CH_ClearStatusFlag>
  
    channel->TBUF[mode] = data;
 8008516:	787a      	ldrb	r2, [r7, #1]
 8008518:	8879      	ldrh	r1, [r7, #2]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	3220      	adds	r2, #32
 800851e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  else
  {
    channel->IN[mode] = data;
  }
}
 8008522:	e005      	b.n	8008530 <XMC_SPI_CH_Transmit+0x64>
  
    channel->TBUF[mode] = data;
  }
  else
  {
    channel->IN[mode] = data;
 8008524:	787a      	ldrb	r2, [r7, #1]
 8008526:	8879      	ldrh	r1, [r7, #2]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	3260      	adds	r2, #96	; 0x60
 800852c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
}
 8008530:	bf00      	nop
 8008532:	3708      	adds	r7, #8
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <XMC_SPI_CH_GetReceivedData>:

/* Reads the data from the buffers based on the FIFO mode selection. */
uint16_t XMC_SPI_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8008546:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800854a:	2b00      	cmp	r3, #0
 800854c:	d112      	bne.n	8008574 <XMC_SPI_CH_GetReceivedData+0x3c>
  {
	/*FHTW: check ReceiveBuffer Status added */
	while(((uint32_t)XMC_USIC_CH_GetReceiveBufferStatus(channel) != (uint32_t)XMC_USIC_CH_RBUF_STATUS_DATA_VALID1)&&((uint32_t)XMC_USIC_CH_GetReceiveBufferStatus(channel) != (uint32_t)XMC_USIC_CH_RBUF_STATUS_DATA_VALID0))
 800854e:	bf00      	nop
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f7ff ff67 	bl	8008424 <XMC_USIC_CH_GetReceiveBufferStatus>
 8008556:	4603      	mov	r3, r0
 8008558:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800855c:	d006      	beq.n	800856c <XMC_SPI_CH_GetReceivedData+0x34>
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f7ff ff60 	bl	8008424 <XMC_USIC_CH_GetReceiveBufferStatus>
 8008564:	4603      	mov	r3, r0
 8008566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800856a:	d1f1      	bne.n	8008550 <XMC_SPI_CH_GetReceivedData+0x18>
	{
	}
    retval = (uint16_t)channel->RBUF;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008570:	81fb      	strh	r3, [r7, #14]
 8008572:	e003      	b.n	800857c <XMC_SPI_CH_GetReceivedData+0x44>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800857a:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 800857c:	89fb      	ldrh	r3, [r7, #14]
}
 800857e:	4618      	mov	r0, r3
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop

08008588 <XMC_SPI_CH_EnableEvent>:

  return status;
}

void XMC_SPI_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
  channel->CCR |= (event&0x1fc00U);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	f403 33fe 	and.w	r3, r3, #130048	; 0x1fc00
 800859c:	431a      	orrs	r2, r3
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_SSCMode |= ((event << 13U) & 0xe000U);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	035b      	lsls	r3, r3, #13
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	431a      	orrs	r2, r3
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80085b2:	bf00      	nop
 80085b4:	370c      	adds	r7, #12
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bc80      	pop	{r7}
 80085ba:	4770      	bx	lr

080085bc <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 80085bc:	b480      	push	{r7}
 80085be:	b083      	sub	sp, #12
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80085ce:	b2db      	uxtb	r3, r3
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bc80      	pop	{r7}
 80085d8:	4770      	bx	lr
 80085da:	bf00      	nop

080085dc <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	683a      	ldr	r2, [r7, #0]
 80085ea:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80085ec:	bf00      	nop
 80085ee:	370c      	adds	r7, #12
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bc80      	pop	{r7}
 80085f4:	4770      	bx	lr
 80085f6:	bf00      	nop

080085f8 <XMC_UART_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	6039      	str	r1, [r7, #0]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 8008602:	2310      	movs	r3, #16
 8008604:	60fb      	str	r3, [r7, #12]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f7ff fbf4 	bl	8007df4 <XMC_USIC_CH_Enable>
  
  if(config->oversampling != 0U)
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	79db      	ldrb	r3, [r3, #7]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d002      	beq.n	800861a <XMC_UART_CH_Init+0x22>
  {
    oversampling = (uint32_t)config->oversampling;
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	79db      	ldrb	r3, [r3, #7]
 8008618:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure baud rate */
  (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	68fa      	ldr	r2, [r7, #12]
 8008620:	4619      	mov	r1, r3
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f7ff fc34 	bl	8007e90 <XMC_USIC_CH_SetBaudrate>
   * Configure the number of stop bits
   * Pulse length is set to 0 to have standard UART signaling, 
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	799b      	ldrb	r3, [r3, #6]
 800862c:	3b01      	subs	r3, #1
 800862e:	005a      	lsls	r2, r3, #1
			             (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	085b      	lsrs	r3, r3, #1
 8008634:	3301      	adds	r3, #1
 8008636:	021b      	lsls	r3, r3, #8
   * Configure the number of stop bits
   * Pulse length is set to 0 to have standard UART signaling, 
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8008638:	4313      	orrs	r3, r2
 800863a:	f043 0201 	orr.w	r2, r3, #1
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	791b      	ldrb	r3, [r3, #4]
 8008646:	3b01      	subs	r3, #1
 8008648:	061b      	lsls	r3, r3, #24
 800864a:	f443 7281 	orr.w	r2, r3, #258	; 0x102
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	635a      	str	r2, [r3, #52]	; 0x34
		              ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	795b      	ldrb	r3, [r3, #5]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d009      	beq.n	800866e <XMC_UART_CH_Init+0x76>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	795b      	ldrb	r3, [r3, #5]
 8008662:	3b01      	subs	r3, #1
 8008664:	041b      	lsls	r3, r3, #16
 8008666:	431a      	orrs	r2, r3
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	635a      	str	r2, [r3, #52]	; 0x34
 800866c:	e008      	b.n	8008680 <XMC_UART_CH_Init+0x88>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	791b      	ldrb	r3, [r3, #4]
 8008676:	3b01      	subs	r3, #1
 8008678:	041b      	lsls	r3, r3, #16
 800867a:	431a      	orrs	r2, r3
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8008686:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f04f 32ff 	mov.w	r2, #4294967295
 800868e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	891b      	ldrh	r3, [r3, #8]
 8008694:	461a      	mov	r2, r3
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	641a      	str	r2, [r3, #64]	; 0x40
}
 800869a:	bf00      	nop
 800869c:	3710      	adds	r7, #16
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop

080086a4 <XMC_UART_CH_Transmit>:
  } 
  return status;
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b082      	sub	sp, #8
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	460b      	mov	r3, r1
 80086ae:	807b      	strh	r3, [r7, #2]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80086b6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d110      	bne.n	80086e0 <XMC_UART_CH_Transmit+0x3c>
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80086be:	bf00      	nop
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f7ff ff7b 	bl	80085bc <XMC_USIC_CH_GetTransmitBufferStatus>
 80086c6:	4603      	mov	r3, r0
 80086c8:	2b80      	cmp	r3, #128	; 0x80
 80086ca:	d0f9      	beq.n	80086c0 <XMC_UART_CH_Transmit+0x1c>
    {
    }
  
    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80086cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f7ff ff83 	bl	80085dc <XMC_UART_CH_ClearStatusFlag>
  
    /*Transmit data */
    channel->TBUF[0U] = data;
 80086d6:	887a      	ldrh	r2, [r7, #2]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = data;
  }
}
 80086de:	e003      	b.n	80086e8 <XMC_UART_CH_Transmit+0x44>
    /*Transmit data */
    channel->TBUF[0U] = data;
  }
  else
  {
    channel->IN[0U] = data;
 80086e0:	887a      	ldrh	r2, [r7, #2]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 80086e8:	bf00      	nop
 80086ea:	3708      	adds	r7, #8
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <XMC_UART_CH_GetReceivedData>:

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b085      	sub	sp, #20
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80086fe:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008702:	2b00      	cmp	r3, #0
 8008704:	d103      	bne.n	800870e <XMC_UART_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800870a:	81fb      	strh	r3, [r7, #14]
 800870c:	e003      	b.n	8008716 <XMC_UART_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8008714:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 8008716:	89fb      	ldrh	r3, [r7, #14]
}
 8008718:	4618      	mov	r0, r3
 800871a:	3714      	adds	r7, #20
 800871c:	46bd      	mov	sp, r7
 800871e:	bc80      	pop	{r7}
 8008720:	4770      	bx	lr
 8008722:	bf00      	nop

08008724 <XMC_UART_CH_EnableEvent>:
  }
  return status;
}

void XMC_UART_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	6039      	str	r1, [r7, #0]
  channel->CCR |= (event&0x1fc00U);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	f403 33fe 	and.w	r3, r3, #130048	; 0x1fc00
 8008738:	431a      	orrs	r2, r3
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_ASCMode |= (event&0xf8U);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8008748:	431a      	orrs	r2, r3
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800874e:	bf00      	nop
 8008750:	370c      	adds	r7, #12
 8008752:	46bd      	mov	sp, r7
 8008754:	bc80      	pop	{r7}
 8008756:	4770      	bx	lr

08008758 <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 8008758:	b480      	push	{r7}
 800875a:	b083      	sub	sp, #12
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	460b      	mov	r3, r1
 8008762:	70fb      	strb	r3, [r7, #3]
 8008764:	4613      	mov	r3, r2
 8008766:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 8008768:	78fb      	ldrb	r3, [r7, #3]
 800876a:	089b      	lsrs	r3, r3, #2
 800876c:	b2db      	uxtb	r3, r3
 800876e:	4618      	mov	r0, r3
 8008770:	78fb      	ldrb	r3, [r7, #3]
 8008772:	089b      	lsrs	r3, r3, #2
 8008774:	b2db      	uxtb	r3, r3
 8008776:	461a      	mov	r2, r3
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	3204      	adds	r2, #4
 800877c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008780:	78fb      	ldrb	r3, [r7, #3]
 8008782:	f003 0303 	and.w	r3, r3, #3
 8008786:	00db      	lsls	r3, r3, #3
 8008788:	21f8      	movs	r1, #248	; 0xf8
 800878a:	fa01 f303 	lsl.w	r3, r1, r3
 800878e:	43db      	mvns	r3, r3
 8008790:	ea02 0103 	and.w	r1, r2, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	1d02      	adds	r2, r0, #4
 8008798:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 800879c:	78fb      	ldrb	r3, [r7, #3]
 800879e:	089b      	lsrs	r3, r3, #2
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	4618      	mov	r0, r3
 80087a4:	78fb      	ldrb	r3, [r7, #3]
 80087a6:	089b      	lsrs	r3, r3, #2
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	461a      	mov	r2, r3
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	3204      	adds	r2, #4
 80087b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80087b4:	78b9      	ldrb	r1, [r7, #2]
 80087b6:	78fb      	ldrb	r3, [r7, #3]
 80087b8:	f003 0303 	and.w	r3, r3, #3
 80087bc:	00db      	lsls	r3, r3, #3
 80087be:	fa01 f303 	lsl.w	r3, r1, r3
 80087c2:	ea42 0103 	orr.w	r1, r2, r3
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	1d02      	adds	r2, r0, #4
 80087ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80087ce:	bf00      	nop
 80087d0:	370c      	adds	r7, #12
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bc80      	pop	{r7}
 80087d6:	4770      	bx	lr

080087d8 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80087d8:	b480      	push	{r7}
 80087da:	b085      	sub	sp, #20
 80087dc:	af00      	add	r7, sp, #0
 80087de:	60f8      	str	r0, [r7, #12]
 80087e0:	460b      	mov	r3, r1
 80087e2:	607a      	str	r2, [r7, #4]
 80087e4:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80087e6:	7afb      	ldrb	r3, [r7, #11]
 80087e8:	089b      	lsrs	r3, r3, #2
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	4618      	mov	r0, r3
 80087ee:	7afb      	ldrb	r3, [r7, #11]
 80087f0:	089b      	lsrs	r3, r3, #2
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	461a      	mov	r2, r3
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	3204      	adds	r2, #4
 80087fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80087fe:	7afb      	ldrb	r3, [r7, #11]
 8008800:	f003 0303 	and.w	r3, r3, #3
 8008804:	00db      	lsls	r3, r3, #3
 8008806:	21f8      	movs	r1, #248	; 0xf8
 8008808:	fa01 f303 	lsl.w	r3, r1, r3
 800880c:	43db      	mvns	r3, r3
 800880e:	ea02 0103 	and.w	r1, r2, r3
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	1d02      	adds	r2, r0, #4
 8008816:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800881e:	7afb      	ldrb	r3, [r7, #11]
 8008820:	005b      	lsls	r3, r3, #1
 8008822:	2103      	movs	r1, #3
 8008824:	fa01 f303 	lsl.w	r3, r1, r3
 8008828:	43db      	mvns	r3, r3
 800882a:	401a      	ands	r2, r3
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	4a37      	ldr	r2, [pc, #220]	; (8008910 <XMC_GPIO_Init+0x138>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d003      	beq.n	8008840 <XMC_GPIO_Init+0x68>
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	4a36      	ldr	r2, [pc, #216]	; (8008914 <XMC_GPIO_Init+0x13c>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d10a      	bne.n	8008856 <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008844:	7afb      	ldrb	r3, [r7, #11]
 8008846:	2101      	movs	r1, #1
 8008848:	fa01 f303 	lsl.w	r3, r1, r3
 800884c:	43db      	mvns	r3, r3
 800884e:	401a      	ands	r2, r3
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	661a      	str	r2, [r3, #96]	; 0x60
 8008854:	e03c      	b.n	80088d0 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	685a      	ldr	r2, [r3, #4]
 800885a:	7afb      	ldrb	r3, [r7, #11]
 800885c:	409a      	lsls	r2, r3
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8008862:	7afb      	ldrb	r3, [r7, #11]
 8008864:	08db      	lsrs	r3, r3, #3
 8008866:	b2db      	uxtb	r3, r3
 8008868:	4618      	mov	r0, r3
 800886a:	7afb      	ldrb	r3, [r7, #11]
 800886c:	08db      	lsrs	r3, r3, #3
 800886e:	b2db      	uxtb	r3, r3
 8008870:	461a      	mov	r2, r3
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	3210      	adds	r2, #16
 8008876:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800887a:	7afb      	ldrb	r3, [r7, #11]
 800887c:	f003 0307 	and.w	r3, r3, #7
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	2107      	movs	r1, #7
 8008884:	fa01 f303 	lsl.w	r3, r1, r3
 8008888:	43db      	mvns	r3, r3
 800888a:	ea02 0103 	and.w	r1, r2, r3
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f100 0210 	add.w	r2, r0, #16
 8008894:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8008898:	7afb      	ldrb	r3, [r7, #11]
 800889a:	08db      	lsrs	r3, r3, #3
 800889c:	b2db      	uxtb	r3, r3
 800889e:	4618      	mov	r0, r3
 80088a0:	7afb      	ldrb	r3, [r7, #11]
 80088a2:	08db      	lsrs	r3, r3, #3
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	461a      	mov	r2, r3
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	3210      	adds	r2, #16
 80088ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	7a1b      	ldrb	r3, [r3, #8]
 80088b4:	4619      	mov	r1, r3
 80088b6:	7afb      	ldrb	r3, [r7, #11]
 80088b8:	f003 0307 	and.w	r3, r3, #7
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	fa01 f303 	lsl.w	r3, r1, r3
 80088c2:	ea42 0103 	orr.w	r1, r2, r3
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f100 0210 	add.w	r2, r0, #16
 80088cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80088d0:	7afb      	ldrb	r3, [r7, #11]
 80088d2:	089b      	lsrs	r3, r3, #2
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	4618      	mov	r0, r3
 80088d8:	7afb      	ldrb	r3, [r7, #11]
 80088da:	089b      	lsrs	r3, r3, #2
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	461a      	mov	r2, r3
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	3204      	adds	r2, #4
 80088e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	4619      	mov	r1, r3
 80088ee:	7afb      	ldrb	r3, [r7, #11]
 80088f0:	f003 0303 	and.w	r3, r3, #3
 80088f4:	00db      	lsls	r3, r3, #3
 80088f6:	fa01 f303 	lsl.w	r3, r1, r3
 80088fa:	ea42 0103 	orr.w	r1, r2, r3
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	1d02      	adds	r2, r0, #4
 8008902:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8008906:	bf00      	nop
 8008908:	3714      	adds	r7, #20
 800890a:	46bd      	mov	sp, r7
 800890c:	bc80      	pop	{r7}
 800890e:	4770      	bx	lr
 8008910:	48028e00 	.word	0x48028e00
 8008914:	48028f00 	.word	0x48028f00

08008918 <Reset_Handler>:
    .section  .text.Reset_Handler
    .weak  Reset_Handler
    .type  Reset_Handler, %function
Reset_Handler:
                                            @ Disable Branch prediction.
    ldr r0,=PREF_PCON
 8008918:	4817      	ldr	r0, [pc, #92]	; (8008978 <LoopForever+0x2>)
    ldr r1,[r0]
 800891a:	6801      	ldr	r1, [r0, #0]
    orr r1,r1,#0x00010000
 800891c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
    str r1,[r0]
 8008920:	6001      	str	r1, [r0, #0]

                                            @ Clear existing parity errors if any.
    ldr r0,=SCU_GCU_PEFLAG
 8008922:	4816      	ldr	r0, [pc, #88]	; (800897c <LoopForever+0x6>)
    ldr r1,=0xFFFFFFFF
 8008924:	f04f 31ff 	mov.w	r1, #4294967295
    str r1,[r0]
 8008928:	6001      	str	r1, [r0, #0]

                                            @ Disable parity.
    ldr r0,=SCU_GCU_PEEN
 800892a:	4815      	ldr	r0, [pc, #84]	; (8008980 <LoopForever+0xa>)
    mov r1,#0
 800892c:	f04f 0100 	mov.w	r1, #0
    str r1,[R0]
 8008930:	6001      	str	r1, [r0, #0]
    AND     R1,  R1, #(0x3FFFFFFF)          @ Clear the LSPEN and ASPEN bits
    STR     R1, [R0]
    ISB                                     @ Reset pipeline now the FPU is enabled
#endif

    LDR     R1, =0xE000ED14                 @ Load address to CCR register
 8008932:	4914      	ldr	r1, [pc, #80]	; (8008984 <LoopForever+0xe>)
    LDR.W   R0, [R1, #0x0]
 8008934:	f8d1 0000 	ldr.w	r0, [r1]
    BIC     R0,  R0, #0x8                   @ Enable unaligned memory access
 8008938:	f020 0008 	bic.w	r0, r0, #8
    STR.W   R0, [R1, #0x0]
 800893c:	f8c1 0000 	str.w	r0, [r1]

    ldr sp, =_estack                        @ set stack pointer.
 8008940:	f8df d044 	ldr.w	sp, [pc, #68]	; 8008988 <LoopForever+0x12>

                                            @ a) copy .data section (Copy from ROM to RAM).
    movs r1, #0
 8008944:	2100      	movs	r1, #0
    b LoopCopyDataInit
 8008946:	e003      	b.n	8008950 <LoopCopyDataInit>

08008948 <CopyDataInit>:

CopyDataInit:
    ldr r3, =_sidata
 8008948:	4b10      	ldr	r3, [pc, #64]	; (800898c <LoopForever+0x16>)
    ldr r3, [r3, r1]
 800894a:	585b      	ldr	r3, [r3, r1]
    str r3, [r0, r1]
 800894c:	5043      	str	r3, [r0, r1]
    adds r1, r1, #4
 800894e:	3104      	adds	r1, #4

08008950 <LoopCopyDataInit>:

LoopCopyDataInit:
    ldr r0, =_sdata
 8008950:	480f      	ldr	r0, [pc, #60]	; (8008990 <LoopForever+0x1a>)
    ldr r3, =_edata
 8008952:	4b10      	ldr	r3, [pc, #64]	; (8008994 <LoopForever+0x1e>)
    adds r2, r0, r1
 8008954:	1842      	adds	r2, r0, r1
    cmp r2, r3
 8008956:	429a      	cmp	r2, r3
    bcc CopyDataInit
 8008958:	d3f6      	bcc.n	8008948 <CopyDataInit>
    ldr r2, =_sbss
 800895a:	4a0f      	ldr	r2, [pc, #60]	; (8008998 <LoopForever+0x22>)
    b LoopFillZerobss
 800895c:	e002      	b.n	8008964 <LoopFillZerobss>

0800895e <FillZerobss>:

                                            @ b) Clear .bss section (Zero init).
FillZerobss:
    movs r3, #0
 800895e:	2300      	movs	r3, #0
    str r3, [r2], #4
 8008960:	f842 3b04 	str.w	r3, [r2], #4

08008964 <LoopFillZerobss>:

LoopFillZerobss:
    ldr r3, = _ebss
 8008964:	4b0d      	ldr	r3, [pc, #52]	; (800899c <LoopForever+0x26>)
    cmp r2, r3
 8008966:	429a      	cmp	r2, r3
    bcc FillZerobss
 8008968:	d3f9      	bcc.n	800895e <FillZerobss>

    bl BSP_LowLevelInit                     @ c) Call system initialzation routine.
 800896a:	f7fe ff79 	bl	8007860 <BSP_LowLevelInit>

    bl __libc_init_array                    @ d) Run static constructors.
 800896e:	f000 f821 	bl	80089b4 <__libc_init_array>

    bl main                                 @ e) Enter main.
 8008972:	f7f8 fc43 	bl	80011fc <main>

08008976 <LoopForever>:

                                            @ f) Loop forever if returning from main.
LoopForever:
    b LoopForever
 8008976:	e7fe      	b.n	8008976 <LoopForever>
    .section  .text.Reset_Handler
    .weak  Reset_Handler
    .type  Reset_Handler, %function
Reset_Handler:
                                            @ Disable Branch prediction.
    ldr r0,=PREF_PCON
 8008978:	58004000 	.word	0x58004000
    ldr r1,[r0]
    orr r1,r1,#0x00010000
    str r1,[r0]

                                            @ Clear existing parity errors if any.
    ldr r0,=SCU_GCU_PEFLAG
 800897c:	50004150 	.word	0x50004150
    ldr r1,=0xFFFFFFFF
    str r1,[r0]

                                            @ Disable parity.
    ldr r0,=SCU_GCU_PEEN
 8008980:	5000413c 	.word	0x5000413c
    AND     R1,  R1, #(0x3FFFFFFF)          @ Clear the LSPEN and ASPEN bits
    STR     R1, [R0]
    ISB                                     @ Reset pipeline now the FPU is enabled
#endif

    LDR     R1, =0xE000ED14                 @ Load address to CCR register
 8008984:	e000ed14 	.word	0xe000ed14
    LDR.W   R0, [R1, #0x0]
    BIC     R0,  R0, #0x8                   @ Enable unaligned memory access
    STR.W   R0, [R1, #0x0]

    ldr sp, =_estack                        @ set stack pointer.
 8008988:	20010000 	.word	0x20010000
                                            @ a) copy .data section (Copy from ROM to RAM).
    movs r1, #0
    b LoopCopyDataInit

CopyDataInit:
    ldr r3, =_sidata
 800898c:	0800f4e4 	.word	0x0800f4e4
    ldr r3, [r3, r1]
    str r3, [r0, r1]
    adds r1, r1, #4

LoopCopyDataInit:
    ldr r0, =_sdata
 8008990:	20000000 	.word	0x20000000
    ldr r3, =_edata
 8008994:	200009e0 	.word	0x200009e0
    adds r2, r0, r1
    cmp r2, r3
    bcc CopyDataInit
    ldr r2, =_sbss
 8008998:	200009e0 	.word	0x200009e0
FillZerobss:
    movs r3, #0
    str r3, [r2], #4

LoopFillZerobss:
    ldr r3, = _ebss
 800899c:	200033a8 	.word	0x200033a8

080089a0 <App_NMI_ISR>:

@ Dummy Exception Handlers (infinite loops which can be modified)

    .section	.text.App_NMI_ISR
App_NMI_ISR:
	b	App_NMI_ISR
 80089a0:	e7fe      	b.n	80089a0 <App_NMI_ISR>

080089a2 <App_Fault_ISR>:
	.size	App_NMI_ISR, .-App_NMI_ISR


    .section	.text.App_Fault_ISR
App_Fault_ISR:
	b	App_Fault_ISR
 80089a2:	e7fe      	b.n	80089a2 <App_Fault_ISR>

080089a4 <App_MemFault_ISR>:
	.size	App_Fault_ISR, .-App_Fault_ISR


    .section	.text.App_MemFault_ISR
App_MemFault_ISR:
	b	App_MemFault_ISR
 80089a4:	e7fe      	b.n	80089a4 <App_MemFault_ISR>

080089a6 <App_BusFault_ISR>:
	.size	App_MemFault_ISR, .-App_MemFault_ISR


    .section	.text.App_BusFault_ISR
App_BusFault_ISR:
	b	App_BusFault_ISR
 80089a6:	e7fe      	b.n	80089a6 <App_BusFault_ISR>

080089a8 <App_UsageFault_ISR>:
	.size	App_BusFault_ISR, .-App_BusFault_ISR


    .section	.text.App_UsageFault_ISR
App_UsageFault_ISR:
	b	App_UsageFault_ISR
 80089a8:	e7fe      	b.n	80089a8 <App_UsageFault_ISR>

080089aa <App_Spurious_ISR>:
	.size	App_UsageFault_ISR, .-App_UsageFault_ISR

    .section	.text.App_Spurious_ISR
App_Spurious_ISR:
	b	App_Spurious_ISR
 80089aa:	e7fe      	b.n	80089aa <App_Spurious_ISR>

080089ac <atoi>:
 80089ac:	220a      	movs	r2, #10
 80089ae:	2100      	movs	r1, #0
 80089b0:	f000 b988 	b.w	8008cc4 <strtol>

080089b4 <__libc_init_array>:
 80089b4:	b570      	push	{r4, r5, r6, lr}
 80089b6:	4e0f      	ldr	r6, [pc, #60]	; (80089f4 <__libc_init_array+0x40>)
 80089b8:	4d0f      	ldr	r5, [pc, #60]	; (80089f8 <__libc_init_array+0x44>)
 80089ba:	1b76      	subs	r6, r6, r5
 80089bc:	10b6      	asrs	r6, r6, #2
 80089be:	bf18      	it	ne
 80089c0:	2400      	movne	r4, #0
 80089c2:	d005      	beq.n	80089d0 <__libc_init_array+0x1c>
 80089c4:	3401      	adds	r4, #1
 80089c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80089ca:	4798      	blx	r3
 80089cc:	42a6      	cmp	r6, r4
 80089ce:	d1f9      	bne.n	80089c4 <__libc_init_array+0x10>
 80089d0:	4e0a      	ldr	r6, [pc, #40]	; (80089fc <__libc_init_array+0x48>)
 80089d2:	4d0b      	ldr	r5, [pc, #44]	; (8008a00 <__libc_init_array+0x4c>)
 80089d4:	1b76      	subs	r6, r6, r5
 80089d6:	f7ff f9fb 	bl	8007dd0 <_init>
 80089da:	10b6      	asrs	r6, r6, #2
 80089dc:	bf18      	it	ne
 80089de:	2400      	movne	r4, #0
 80089e0:	d006      	beq.n	80089f0 <__libc_init_array+0x3c>
 80089e2:	3401      	adds	r4, #1
 80089e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80089e8:	4798      	blx	r3
 80089ea:	42a6      	cmp	r6, r4
 80089ec:	d1f9      	bne.n	80089e2 <__libc_init_array+0x2e>
 80089ee:	bd70      	pop	{r4, r5, r6, pc}
 80089f0:	bd70      	pop	{r4, r5, r6, pc}
 80089f2:	bf00      	nop
 80089f4:	0800f4e4 	.word	0x0800f4e4
 80089f8:	0800f4e4 	.word	0x0800f4e4
 80089fc:	0800f4e4 	.word	0x0800f4e4
 8008a00:	0800f4e4 	.word	0x0800f4e4

08008a04 <memset>:
 8008a04:	b470      	push	{r4, r5, r6}
 8008a06:	0784      	lsls	r4, r0, #30
 8008a08:	d046      	beq.n	8008a98 <memset+0x94>
 8008a0a:	1e54      	subs	r4, r2, #1
 8008a0c:	2a00      	cmp	r2, #0
 8008a0e:	d041      	beq.n	8008a94 <memset+0x90>
 8008a10:	b2cd      	uxtb	r5, r1
 8008a12:	4603      	mov	r3, r0
 8008a14:	e002      	b.n	8008a1c <memset+0x18>
 8008a16:	1e62      	subs	r2, r4, #1
 8008a18:	b3e4      	cbz	r4, 8008a94 <memset+0x90>
 8008a1a:	4614      	mov	r4, r2
 8008a1c:	f803 5b01 	strb.w	r5, [r3], #1
 8008a20:	079a      	lsls	r2, r3, #30
 8008a22:	d1f8      	bne.n	8008a16 <memset+0x12>
 8008a24:	2c03      	cmp	r4, #3
 8008a26:	d92e      	bls.n	8008a86 <memset+0x82>
 8008a28:	b2cd      	uxtb	r5, r1
 8008a2a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8008a2e:	2c0f      	cmp	r4, #15
 8008a30:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8008a34:	d919      	bls.n	8008a6a <memset+0x66>
 8008a36:	f103 0210 	add.w	r2, r3, #16
 8008a3a:	4626      	mov	r6, r4
 8008a3c:	3e10      	subs	r6, #16
 8008a3e:	2e0f      	cmp	r6, #15
 8008a40:	f842 5c10 	str.w	r5, [r2, #-16]
 8008a44:	f842 5c0c 	str.w	r5, [r2, #-12]
 8008a48:	f842 5c08 	str.w	r5, [r2, #-8]
 8008a4c:	f842 5c04 	str.w	r5, [r2, #-4]
 8008a50:	f102 0210 	add.w	r2, r2, #16
 8008a54:	d8f2      	bhi.n	8008a3c <memset+0x38>
 8008a56:	f1a4 0210 	sub.w	r2, r4, #16
 8008a5a:	f022 020f 	bic.w	r2, r2, #15
 8008a5e:	f004 040f 	and.w	r4, r4, #15
 8008a62:	3210      	adds	r2, #16
 8008a64:	2c03      	cmp	r4, #3
 8008a66:	4413      	add	r3, r2
 8008a68:	d90d      	bls.n	8008a86 <memset+0x82>
 8008a6a:	461e      	mov	r6, r3
 8008a6c:	4622      	mov	r2, r4
 8008a6e:	3a04      	subs	r2, #4
 8008a70:	2a03      	cmp	r2, #3
 8008a72:	f846 5b04 	str.w	r5, [r6], #4
 8008a76:	d8fa      	bhi.n	8008a6e <memset+0x6a>
 8008a78:	1f22      	subs	r2, r4, #4
 8008a7a:	f022 0203 	bic.w	r2, r2, #3
 8008a7e:	3204      	adds	r2, #4
 8008a80:	4413      	add	r3, r2
 8008a82:	f004 0403 	and.w	r4, r4, #3
 8008a86:	b12c      	cbz	r4, 8008a94 <memset+0x90>
 8008a88:	b2c9      	uxtb	r1, r1
 8008a8a:	441c      	add	r4, r3
 8008a8c:	f803 1b01 	strb.w	r1, [r3], #1
 8008a90:	42a3      	cmp	r3, r4
 8008a92:	d1fb      	bne.n	8008a8c <memset+0x88>
 8008a94:	bc70      	pop	{r4, r5, r6}
 8008a96:	4770      	bx	lr
 8008a98:	4614      	mov	r4, r2
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	e7c2      	b.n	8008a24 <memset+0x20>
 8008a9e:	bf00      	nop

08008aa0 <printf>:
 8008aa0:	b40f      	push	{r0, r1, r2, r3}
 8008aa2:	b500      	push	{lr}
 8008aa4:	4907      	ldr	r1, [pc, #28]	; (8008ac4 <printf+0x24>)
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	ab04      	add	r3, sp, #16
 8008aaa:	6808      	ldr	r0, [r1, #0]
 8008aac:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ab0:	6881      	ldr	r1, [r0, #8]
 8008ab2:	9301      	str	r3, [sp, #4]
 8008ab4:	f001 fc74 	bl	800a3a0 <_vfprintf_r>
 8008ab8:	b003      	add	sp, #12
 8008aba:	f85d eb04 	ldr.w	lr, [sp], #4
 8008abe:	b004      	add	sp, #16
 8008ac0:	4770      	bx	lr
 8008ac2:	bf00      	nop
 8008ac4:	20000460 	.word	0x20000460

08008ac8 <_puts_r>:
 8008ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008aca:	4605      	mov	r5, r0
 8008acc:	b089      	sub	sp, #36	; 0x24
 8008ace:	4608      	mov	r0, r1
 8008ad0:	460c      	mov	r4, r1
 8008ad2:	f7f8 fa95 	bl	8001000 <strlen>
 8008ad6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8008ad8:	4f14      	ldr	r7, [pc, #80]	; (8008b2c <_puts_r+0x64>)
 8008ada:	9404      	str	r4, [sp, #16]
 8008adc:	2601      	movs	r6, #1
 8008ade:	1c44      	adds	r4, r0, #1
 8008ae0:	a904      	add	r1, sp, #16
 8008ae2:	2202      	movs	r2, #2
 8008ae4:	9403      	str	r4, [sp, #12]
 8008ae6:	9005      	str	r0, [sp, #20]
 8008ae8:	68ac      	ldr	r4, [r5, #8]
 8008aea:	9706      	str	r7, [sp, #24]
 8008aec:	9607      	str	r6, [sp, #28]
 8008aee:	9101      	str	r1, [sp, #4]
 8008af0:	9202      	str	r2, [sp, #8]
 8008af2:	b1b3      	cbz	r3, 8008b22 <_puts_r+0x5a>
 8008af4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008af8:	049a      	lsls	r2, r3, #18
 8008afa:	d406      	bmi.n	8008b0a <_puts_r+0x42>
 8008afc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008afe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008b02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008b06:	81a3      	strh	r3, [r4, #12]
 8008b08:	6662      	str	r2, [r4, #100]	; 0x64
 8008b0a:	4621      	mov	r1, r4
 8008b0c:	4628      	mov	r0, r5
 8008b0e:	aa01      	add	r2, sp, #4
 8008b10:	f004 fa9a 	bl	800d048 <__sfvwrite_r>
 8008b14:	2800      	cmp	r0, #0
 8008b16:	bf14      	ite	ne
 8008b18:	f04f 30ff 	movne.w	r0, #4294967295
 8008b1c:	200a      	moveq	r0, #10
 8008b1e:	b009      	add	sp, #36	; 0x24
 8008b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b22:	4628      	mov	r0, r5
 8008b24:	f004 f950 	bl	800cdc8 <__sinit>
 8008b28:	e7e4      	b.n	8008af4 <_puts_r+0x2c>
 8008b2a:	bf00      	nop
 8008b2c:	0800f230 	.word	0x0800f230

08008b30 <puts>:
 8008b30:	4b02      	ldr	r3, [pc, #8]	; (8008b3c <puts+0xc>)
 8008b32:	4601      	mov	r1, r0
 8008b34:	6818      	ldr	r0, [r3, #0]
 8008b36:	f7ff bfc7 	b.w	8008ac8 <_puts_r>
 8008b3a:	bf00      	nop
 8008b3c:	20000460 	.word	0x20000460

08008b40 <sprintf>:
 8008b40:	b40e      	push	{r1, r2, r3}
 8008b42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b44:	b09c      	sub	sp, #112	; 0x70
 8008b46:	ab21      	add	r3, sp, #132	; 0x84
 8008b48:	490f      	ldr	r1, [pc, #60]	; (8008b88 <sprintf+0x48>)
 8008b4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b4e:	9301      	str	r3, [sp, #4]
 8008b50:	4605      	mov	r5, r0
 8008b52:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8008b56:	6808      	ldr	r0, [r1, #0]
 8008b58:	9502      	str	r5, [sp, #8]
 8008b5a:	f44f 7702 	mov.w	r7, #520	; 0x208
 8008b5e:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8008b62:	a902      	add	r1, sp, #8
 8008b64:	9506      	str	r5, [sp, #24]
 8008b66:	f8ad 7014 	strh.w	r7, [sp, #20]
 8008b6a:	9404      	str	r4, [sp, #16]
 8008b6c:	9407      	str	r4, [sp, #28]
 8008b6e:	f8ad 6016 	strh.w	r6, [sp, #22]
 8008b72:	f000 f8bd 	bl	8008cf0 <_svfprintf_r>
 8008b76:	9b02      	ldr	r3, [sp, #8]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	701a      	strb	r2, [r3, #0]
 8008b7c:	b01c      	add	sp, #112	; 0x70
 8008b7e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8008b82:	b003      	add	sp, #12
 8008b84:	4770      	bx	lr
 8008b86:	bf00      	nop
 8008b88:	20000460 	.word	0x20000460

08008b8c <_strtol_l.isra.0>:
 8008b8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b90:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8008b94:	460f      	mov	r7, r1
 8008b96:	4680      	mov	r8, r0
 8008b98:	4616      	mov	r6, r2
 8008b9a:	461d      	mov	r5, r3
 8008b9c:	468b      	mov	fp, r1
 8008b9e:	e000      	b.n	8008ba2 <_strtol_l.isra.0+0x16>
 8008ba0:	46a3      	mov	fp, r4
 8008ba2:	465c      	mov	r4, fp
 8008ba4:	4648      	mov	r0, r9
 8008ba6:	f814 ab01 	ldrb.w	sl, [r4], #1
 8008baa:	f004 fc07 	bl	800d3bc <__locale_ctype_ptr_l>
 8008bae:	4450      	add	r0, sl
 8008bb0:	7841      	ldrb	r1, [r0, #1]
 8008bb2:	f001 0108 	and.w	r1, r1, #8
 8008bb6:	f001 0cff 	and.w	ip, r1, #255	; 0xff
 8008bba:	2900      	cmp	r1, #0
 8008bbc:	d1f0      	bne.n	8008ba0 <_strtol_l.isra.0+0x14>
 8008bbe:	4652      	mov	r2, sl
 8008bc0:	2a2d      	cmp	r2, #45	; 0x2d
 8008bc2:	d061      	beq.n	8008c88 <_strtol_l.isra.0+0xfc>
 8008bc4:	2a2b      	cmp	r2, #43	; 0x2b
 8008bc6:	bf04      	itt	eq
 8008bc8:	f89b 2001 	ldrbeq.w	r2, [fp, #1]
 8008bcc:	f10b 0402 	addeq.w	r4, fp, #2
 8008bd0:	2d00      	cmp	r5, #0
 8008bd2:	d043      	beq.n	8008c5c <_strtol_l.isra.0+0xd0>
 8008bd4:	2d10      	cmp	r5, #16
 8008bd6:	d065      	beq.n	8008ca4 <_strtol_l.isra.0+0x118>
 8008bd8:	46a9      	mov	r9, r5
 8008bda:	f1bc 0f00 	cmp.w	ip, #0
 8008bde:	bf0c      	ite	eq
 8008be0:	f06f 4a00 	mvneq.w	sl, #2147483648	; 0x80000000
 8008be4:	f04f 4a00 	movne.w	sl, #2147483648	; 0x80000000
 8008be8:	2100      	movs	r1, #0
 8008bea:	fbba fef9 	udiv	lr, sl, r9
 8008bee:	4608      	mov	r0, r1
 8008bf0:	fb09 aa1e 	mls	sl, r9, lr, sl
 8008bf4:	e005      	b.n	8008c02 <_strtol_l.isra.0+0x76>
 8008bf6:	d029      	beq.n	8008c4c <_strtol_l.isra.0+0xc0>
 8008bf8:	fb09 3000 	mla	r0, r9, r0, r3
 8008bfc:	2101      	movs	r1, #1
 8008bfe:	f814 2b01 	ldrb.w	r2, [r4], #1
 8008c02:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008c06:	2b09      	cmp	r3, #9
 8008c08:	d905      	bls.n	8008c16 <_strtol_l.isra.0+0x8a>
 8008c0a:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 8008c0e:	2b19      	cmp	r3, #25
 8008c10:	d80a      	bhi.n	8008c28 <_strtol_l.isra.0+0x9c>
 8008c12:	f1a2 0337 	sub.w	r3, r2, #55	; 0x37
 8008c16:	429d      	cmp	r5, r3
 8008c18:	dd0e      	ble.n	8008c38 <_strtol_l.isra.0+0xac>
 8008c1a:	1c4a      	adds	r2, r1, #1
 8008c1c:	d0ef      	beq.n	8008bfe <_strtol_l.isra.0+0x72>
 8008c1e:	4586      	cmp	lr, r0
 8008c20:	d2e9      	bcs.n	8008bf6 <_strtol_l.isra.0+0x6a>
 8008c22:	f04f 31ff 	mov.w	r1, #4294967295
 8008c26:	e7ea      	b.n	8008bfe <_strtol_l.isra.0+0x72>
 8008c28:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
 8008c2c:	2b19      	cmp	r3, #25
 8008c2e:	d803      	bhi.n	8008c38 <_strtol_l.isra.0+0xac>
 8008c30:	f1a2 0357 	sub.w	r3, r2, #87	; 0x57
 8008c34:	429d      	cmp	r5, r3
 8008c36:	dcf0      	bgt.n	8008c1a <_strtol_l.isra.0+0x8e>
 8008c38:	1c4b      	adds	r3, r1, #1
 8008c3a:	d015      	beq.n	8008c68 <_strtol_l.isra.0+0xdc>
 8008c3c:	f1bc 0f00 	cmp.w	ip, #0
 8008c40:	d110      	bne.n	8008c64 <_strtol_l.isra.0+0xd8>
 8008c42:	b14e      	cbz	r6, 8008c58 <_strtol_l.isra.0+0xcc>
 8008c44:	b9e1      	cbnz	r1, 8008c80 <_strtol_l.isra.0+0xf4>
 8008c46:	6037      	str	r7, [r6, #0]
 8008c48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c4c:	459a      	cmp	sl, r3
 8008c4e:	dad3      	bge.n	8008bf8 <_strtol_l.isra.0+0x6c>
 8008c50:	4670      	mov	r0, lr
 8008c52:	f04f 31ff 	mov.w	r1, #4294967295
 8008c56:	e7d2      	b.n	8008bfe <_strtol_l.isra.0+0x72>
 8008c58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c5c:	2a30      	cmp	r2, #48	; 0x30
 8008c5e:	d01a      	beq.n	8008c96 <_strtol_l.isra.0+0x10a>
 8008c60:	250a      	movs	r5, #10
 8008c62:	e7b9      	b.n	8008bd8 <_strtol_l.isra.0+0x4c>
 8008c64:	4240      	negs	r0, r0
 8008c66:	e7ec      	b.n	8008c42 <_strtol_l.isra.0+0xb6>
 8008c68:	f1bc 0f00 	cmp.w	ip, #0
 8008c6c:	f04f 0322 	mov.w	r3, #34	; 0x22
 8008c70:	bf0c      	ite	eq
 8008c72:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008c76:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8008c7a:	f8c8 3000 	str.w	r3, [r8]
 8008c7e:	b1f6      	cbz	r6, 8008cbe <_strtol_l.isra.0+0x132>
 8008c80:	1e67      	subs	r7, r4, #1
 8008c82:	6037      	str	r7, [r6, #0]
 8008c84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c88:	f10b 0402 	add.w	r4, fp, #2
 8008c8c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8008c90:	f04f 0c01 	mov.w	ip, #1
 8008c94:	e79c      	b.n	8008bd0 <_strtol_l.isra.0+0x44>
 8008c96:	7823      	ldrb	r3, [r4, #0]
 8008c98:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008c9c:	2b58      	cmp	r3, #88	; 0x58
 8008c9e:	d008      	beq.n	8008cb2 <_strtol_l.isra.0+0x126>
 8008ca0:	2508      	movs	r5, #8
 8008ca2:	e799      	b.n	8008bd8 <_strtol_l.isra.0+0x4c>
 8008ca4:	2a30      	cmp	r2, #48	; 0x30
 8008ca6:	d197      	bne.n	8008bd8 <_strtol_l.isra.0+0x4c>
 8008ca8:	7823      	ldrb	r3, [r4, #0]
 8008caa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008cae:	2b58      	cmp	r3, #88	; 0x58
 8008cb0:	d192      	bne.n	8008bd8 <_strtol_l.isra.0+0x4c>
 8008cb2:	f04f 0910 	mov.w	r9, #16
 8008cb6:	7862      	ldrb	r2, [r4, #1]
 8008cb8:	464d      	mov	r5, r9
 8008cba:	3402      	adds	r4, #2
 8008cbc:	e78d      	b.n	8008bda <_strtol_l.isra.0+0x4e>
 8008cbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cc2:	bf00      	nop

08008cc4 <strtol>:
 8008cc4:	b530      	push	{r4, r5, lr}
 8008cc6:	4c08      	ldr	r4, [pc, #32]	; (8008ce8 <strtol+0x24>)
 8008cc8:	4b08      	ldr	r3, [pc, #32]	; (8008cec <strtol+0x28>)
 8008cca:	6825      	ldr	r5, [r4, #0]
 8008ccc:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8008cce:	b083      	sub	sp, #12
 8008cd0:	2c00      	cmp	r4, #0
 8008cd2:	bf08      	it	eq
 8008cd4:	461c      	moveq	r4, r3
 8008cd6:	9400      	str	r4, [sp, #0]
 8008cd8:	4613      	mov	r3, r2
 8008cda:	460a      	mov	r2, r1
 8008cdc:	4601      	mov	r1, r0
 8008cde:	4628      	mov	r0, r5
 8008ce0:	f7ff ff54 	bl	8008b8c <_strtol_l.isra.0>
 8008ce4:	b003      	add	sp, #12
 8008ce6:	bd30      	pop	{r4, r5, pc}
 8008ce8:	20000460 	.word	0x20000460
 8008cec:	20000464 	.word	0x20000464

08008cf0 <_svfprintf_r>:
 8008cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf4:	b0c1      	sub	sp, #260	; 0x104
 8008cf6:	460c      	mov	r4, r1
 8008cf8:	9109      	str	r1, [sp, #36]	; 0x24
 8008cfa:	4615      	mov	r5, r2
 8008cfc:	930e      	str	r3, [sp, #56]	; 0x38
 8008cfe:	900a      	str	r0, [sp, #40]	; 0x28
 8008d00:	f004 fb60 	bl	800d3c4 <_localeconv_r>
 8008d04:	6803      	ldr	r3, [r0, #0]
 8008d06:	9317      	str	r3, [sp, #92]	; 0x5c
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f7f8 f979 	bl	8001000 <strlen>
 8008d0e:	89a3      	ldrh	r3, [r4, #12]
 8008d10:	9016      	str	r0, [sp, #88]	; 0x58
 8008d12:	061e      	lsls	r6, r3, #24
 8008d14:	d503      	bpl.n	8008d1e <_svfprintf_r+0x2e>
 8008d16:	6923      	ldr	r3, [r4, #16]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	f001 811a 	beq.w	8009f52 <_svfprintf_r+0x1262>
 8008d1e:	2300      	movs	r3, #0
 8008d20:	461a      	mov	r2, r3
 8008d22:	9312      	str	r3, [sp, #72]	; 0x48
 8008d24:	9325      	str	r3, [sp, #148]	; 0x94
 8008d26:	9324      	str	r3, [sp, #144]	; 0x90
 8008d28:	9319      	str	r3, [sp, #100]	; 0x64
 8008d2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d2c:	f8df a464 	ldr.w	sl, [pc, #1124]	; 8009194 <_svfprintf_r+0x4a4>
 8008d30:	9214      	str	r2, [sp, #80]	; 0x50
 8008d32:	ab30      	add	r3, sp, #192	; 0xc0
 8008d34:	9323      	str	r3, [sp, #140]	; 0x8c
 8008d36:	4699      	mov	r9, r3
 8008d38:	9215      	str	r2, [sp, #84]	; 0x54
 8008d3a:	46a8      	mov	r8, r5
 8008d3c:	f898 3000 	ldrb.w	r3, [r8]
 8008d40:	4644      	mov	r4, r8
 8008d42:	b1eb      	cbz	r3, 8008d80 <_svfprintf_r+0x90>
 8008d44:	2b25      	cmp	r3, #37	; 0x25
 8008d46:	d102      	bne.n	8008d4e <_svfprintf_r+0x5e>
 8008d48:	e01a      	b.n	8008d80 <_svfprintf_r+0x90>
 8008d4a:	2b25      	cmp	r3, #37	; 0x25
 8008d4c:	d003      	beq.n	8008d56 <_svfprintf_r+0x66>
 8008d4e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d1f9      	bne.n	8008d4a <_svfprintf_r+0x5a>
 8008d56:	ebc8 0504 	rsb	r5, r8, r4
 8008d5a:	b18d      	cbz	r5, 8008d80 <_svfprintf_r+0x90>
 8008d5c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008d5e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8008d60:	f8c9 8000 	str.w	r8, [r9]
 8008d64:	3301      	adds	r3, #1
 8008d66:	442a      	add	r2, r5
 8008d68:	2b07      	cmp	r3, #7
 8008d6a:	f8c9 5004 	str.w	r5, [r9, #4]
 8008d6e:	9225      	str	r2, [sp, #148]	; 0x94
 8008d70:	9324      	str	r3, [sp, #144]	; 0x90
 8008d72:	f300 80a6 	bgt.w	8008ec2 <_svfprintf_r+0x1d2>
 8008d76:	f109 0908 	add.w	r9, r9, #8
 8008d7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d7c:	442b      	add	r3, r5
 8008d7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d80:	7823      	ldrb	r3, [r4, #0]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	f000 80a6 	beq.w	8008ed4 <_svfprintf_r+0x1e4>
 8008d88:	2300      	movs	r3, #0
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8008d90:	4619      	mov	r1, r3
 8008d92:	930c      	str	r3, [sp, #48]	; 0x30
 8008d94:	9307      	str	r3, [sp, #28]
 8008d96:	f04f 3bff 	mov.w	fp, #4294967295
 8008d9a:	7863      	ldrb	r3, [r4, #1]
 8008d9c:	f104 0801 	add.w	r8, r4, #1
 8008da0:	465d      	mov	r5, fp
 8008da2:	f108 0801 	add.w	r8, r8, #1
 8008da6:	f1a3 0020 	sub.w	r0, r3, #32
 8008daa:	2858      	cmp	r0, #88	; 0x58
 8008dac:	f200 8425 	bhi.w	80095fa <_svfprintf_r+0x90a>
 8008db0:	e8df f010 	tbh	[pc, r0, lsl #1]
 8008db4:	04230388 	.word	0x04230388
 8008db8:	03900423 	.word	0x03900423
 8008dbc:	04230423 	.word	0x04230423
 8008dc0:	04230423 	.word	0x04230423
 8008dc4:	04230423 	.word	0x04230423
 8008dc8:	03a50397 	.word	0x03a50397
 8008dcc:	005d0423 	.word	0x005d0423
 8008dd0:	042300e2 	.word	0x042300e2
 8008dd4:	010500fe 	.word	0x010500fe
 8008dd8:	01050105 	.word	0x01050105
 8008ddc:	01050105 	.word	0x01050105
 8008de0:	01050105 	.word	0x01050105
 8008de4:	01050105 	.word	0x01050105
 8008de8:	04230423 	.word	0x04230423
 8008dec:	04230423 	.word	0x04230423
 8008df0:	04230423 	.word	0x04230423
 8008df4:	04230423 	.word	0x04230423
 8008df8:	04230423 	.word	0x04230423
 8008dfc:	02810115 	.word	0x02810115
 8008e00:	02810423 	.word	0x02810423
 8008e04:	04230423 	.word	0x04230423
 8008e08:	04230423 	.word	0x04230423
 8008e0c:	042302c6 	.word	0x042302c6
 8008e10:	02cd0423 	.word	0x02cd0423
 8008e14:	04230423 	.word	0x04230423
 8008e18:	04230423 	.word	0x04230423
 8008e1c:	02f70423 	.word	0x02f70423
 8008e20:	04230423 	.word	0x04230423
 8008e24:	04230325 	.word	0x04230325
 8008e28:	04230423 	.word	0x04230423
 8008e2c:	04230423 	.word	0x04230423
 8008e30:	04230423 	.word	0x04230423
 8008e34:	04230423 	.word	0x04230423
 8008e38:	03660423 	.word	0x03660423
 8008e3c:	02810379 	.word	0x02810379
 8008e40:	02810281 	.word	0x02810281
 8008e44:	03790381 	.word	0x03790381
 8008e48:	04230423 	.word	0x04230423
 8008e4c:	042303d1 	.word	0x042303d1
 8008e50:	00a303db 	.word	0x00a303db
 8008e54:	03ee0064 	.word	0x03ee0064
 8008e58:	03f50423 	.word	0x03f50423
 8008e5c:	03aa0423 	.word	0x03aa0423
 8008e60:	04230423 	.word	0x04230423
 8008e64:	03bc      	.short	0x03bc
 8008e66:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008e68:	930e      	str	r3, [sp, #56]	; 0x38
 8008e6a:	4240      	negs	r0, r0
 8008e6c:	900c      	str	r0, [sp, #48]	; 0x30
 8008e6e:	9b07      	ldr	r3, [sp, #28]
 8008e70:	f043 0304 	orr.w	r3, r3, #4
 8008e74:	9307      	str	r3, [sp, #28]
 8008e76:	f898 3000 	ldrb.w	r3, [r8]
 8008e7a:	e792      	b.n	8008da2 <_svfprintf_r+0xb2>
 8008e7c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008e7e:	46ab      	mov	fp, r5
 8008e80:	2100      	movs	r1, #0
 8008e82:	6804      	ldr	r4, [r0, #0]
 8008e84:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8008e88:	1d07      	adds	r7, r0, #4
 8008e8a:	9807      	ldr	r0, [sp, #28]
 8008e8c:	2330      	movs	r3, #48	; 0x30
 8008e8e:	2278      	movs	r2, #120	; 0x78
 8008e90:	458b      	cmp	fp, r1
 8008e92:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8008e96:	f04f 0500 	mov.w	r5, #0
 8008e9a:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
 8008e9e:	f040 0302 	orr.w	r3, r0, #2
 8008ea2:	f2c0 83c7 	blt.w	8009634 <_svfprintf_r+0x944>
 8008ea6:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 8008eaa:	f043 0302 	orr.w	r3, r3, #2
 8008eae:	9307      	str	r3, [sp, #28]
 8008eb0:	ea54 0305 	orrs.w	r3, r4, r5
 8008eb4:	970e      	str	r7, [sp, #56]	; 0x38
 8008eb6:	f000 8393 	beq.w	80095e0 <_svfprintf_r+0x8f0>
 8008eba:	460f      	mov	r7, r1
 8008ebc:	9211      	str	r2, [sp, #68]	; 0x44
 8008ebe:	48b3      	ldr	r0, [pc, #716]	; (800918c <_svfprintf_r+0x49c>)
 8008ec0:	e2ce      	b.n	8009460 <_svfprintf_r+0x770>
 8008ec2:	aa23      	add	r2, sp, #140	; 0x8c
 8008ec4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ec6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008ec8:	f005 fb88 	bl	800e5dc <__ssprint_r>
 8008ecc:	b948      	cbnz	r0, 8008ee2 <_svfprintf_r+0x1f2>
 8008ece:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8008ed2:	e752      	b.n	8008d7a <_svfprintf_r+0x8a>
 8008ed4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8008ed6:	b123      	cbz	r3, 8008ee2 <_svfprintf_r+0x1f2>
 8008ed8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008eda:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008edc:	aa23      	add	r2, sp, #140	; 0x8c
 8008ede:	f005 fb7d 	bl	800e5dc <__ssprint_r>
 8008ee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ee4:	899b      	ldrh	r3, [r3, #12]
 8008ee6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008eea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008eec:	bf18      	it	ne
 8008eee:	f04f 33ff 	movne.w	r3, #4294967295
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	b041      	add	sp, #260	; 0x104
 8008ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008efa:	9311      	str	r3, [sp, #68]	; 0x44
 8008efc:	46ab      	mov	fp, r5
 8008efe:	2a00      	cmp	r2, #0
 8008f00:	f041 8233 	bne.w	800a36a <_svfprintf_r+0x167a>
 8008f04:	9a07      	ldr	r2, [sp, #28]
 8008f06:	f012 0320 	ands.w	r3, r2, #32
 8008f0a:	f000 822e 	beq.w	800936a <_svfprintf_r+0x67a>
 8008f0e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8008f10:	3707      	adds	r7, #7
 8008f12:	f027 0307 	bic.w	r3, r7, #7
 8008f16:	2700      	movs	r7, #0
 8008f18:	f103 0108 	add.w	r1, r3, #8
 8008f1c:	45bb      	cmp	fp, r7
 8008f1e:	910e      	str	r1, [sp, #56]	; 0x38
 8008f20:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008f24:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 8008f28:	f2c0 8779 	blt.w	8009e1e <_svfprintf_r+0x112e>
 8008f2c:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8008f30:	9307      	str	r3, [sp, #28]
 8008f32:	ea54 0305 	orrs.w	r3, r4, r5
 8008f36:	f000 8375 	beq.w	8009624 <_svfprintf_r+0x934>
 8008f3a:	ae30      	add	r6, sp, #192	; 0xc0
 8008f3c:	08e2      	lsrs	r2, r4, #3
 8008f3e:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 8008f42:	08e9      	lsrs	r1, r5, #3
 8008f44:	f004 0307 	and.w	r3, r4, #7
 8008f48:	460d      	mov	r5, r1
 8008f4a:	4614      	mov	r4, r2
 8008f4c:	3330      	adds	r3, #48	; 0x30
 8008f4e:	ea54 0205 	orrs.w	r2, r4, r5
 8008f52:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8008f56:	d1f1      	bne.n	8008f3c <_svfprintf_r+0x24c>
 8008f58:	9a07      	ldr	r2, [sp, #28]
 8008f5a:	07d1      	lsls	r1, r2, #31
 8008f5c:	f140 8084 	bpl.w	8009068 <_svfprintf_r+0x378>
 8008f60:	2b30      	cmp	r3, #48	; 0x30
 8008f62:	f000 8081 	beq.w	8009068 <_svfprintf_r+0x378>
 8008f66:	2230      	movs	r2, #48	; 0x30
 8008f68:	1e73      	subs	r3, r6, #1
 8008f6a:	f806 2c01 	strb.w	r2, [r6, #-1]
 8008f6e:	aa30      	add	r2, sp, #192	; 0xc0
 8008f70:	1ad2      	subs	r2, r2, r3
 8008f72:	920d      	str	r2, [sp, #52]	; 0x34
 8008f74:	461e      	mov	r6, r3
 8008f76:	e07a      	b.n	800906e <_svfprintf_r+0x37e>
 8008f78:	f898 3000 	ldrb.w	r3, [r8]
 8008f7c:	2b2a      	cmp	r3, #42	; 0x2a
 8008f7e:	f108 0401 	add.w	r4, r8, #1
 8008f82:	f001 81b9 	beq.w	800a2f8 <_svfprintf_r+0x1608>
 8008f86:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8008f8a:	2809      	cmp	r0, #9
 8008f8c:	bf98      	it	ls
 8008f8e:	2500      	movls	r5, #0
 8008f90:	f201 816c 	bhi.w	800a26c <_svfprintf_r+0x157c>
 8008f94:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008f98:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8008f9c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8008fa0:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8008fa4:	2809      	cmp	r0, #9
 8008fa6:	d9f5      	bls.n	8008f94 <_svfprintf_r+0x2a4>
 8008fa8:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8008fac:	46a0      	mov	r8, r4
 8008fae:	e6fa      	b.n	8008da6 <_svfprintf_r+0xb6>
 8008fb0:	9b07      	ldr	r3, [sp, #28]
 8008fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fb6:	9307      	str	r3, [sp, #28]
 8008fb8:	f898 3000 	ldrb.w	r3, [r8]
 8008fbc:	e6f1      	b.n	8008da2 <_svfprintf_r+0xb2>
 8008fbe:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	461c      	mov	r4, r3
 8008fc6:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008fca:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8008fce:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8008fd2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8008fd6:	2809      	cmp	r0, #9
 8008fd8:	d9f5      	bls.n	8008fc6 <_svfprintf_r+0x2d6>
 8008fda:	940c      	str	r4, [sp, #48]	; 0x30
 8008fdc:	e6e3      	b.n	8008da6 <_svfprintf_r+0xb6>
 8008fde:	9311      	str	r3, [sp, #68]	; 0x44
 8008fe0:	46ab      	mov	fp, r5
 8008fe2:	2a00      	cmp	r2, #0
 8008fe4:	f041 81ab 	bne.w	800a33e <_svfprintf_r+0x164e>
 8008fe8:	9b07      	ldr	r3, [sp, #28]
 8008fea:	f043 0310 	orr.w	r3, r3, #16
 8008fee:	9307      	str	r3, [sp, #28]
 8008ff0:	9b07      	ldr	r3, [sp, #28]
 8008ff2:	0698      	lsls	r0, r3, #26
 8008ff4:	f140 8530 	bpl.w	8009a58 <_svfprintf_r+0xd68>
 8008ff8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8008ffa:	3707      	adds	r7, #7
 8008ffc:	f027 0707 	bic.w	r7, r7, #7
 8009000:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009004:	f107 0108 	add.w	r1, r7, #8
 8009008:	910e      	str	r1, [sp, #56]	; 0x38
 800900a:	4614      	mov	r4, r2
 800900c:	461d      	mov	r5, r3
 800900e:	2a00      	cmp	r2, #0
 8009010:	f173 0300 	sbcs.w	r3, r3, #0
 8009014:	f2c0 855b 	blt.w	8009ace <_svfprintf_r+0xdde>
 8009018:	f1bb 0f00 	cmp.w	fp, #0
 800901c:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 8009020:	f2c0 8538 	blt.w	8009a94 <_svfprintf_r+0xda4>
 8009024:	9b07      	ldr	r3, [sp, #28]
 8009026:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800902a:	9307      	str	r3, [sp, #28]
 800902c:	ea54 0305 	orrs.w	r3, r4, r5
 8009030:	f000 81db 	beq.w	80093ea <_svfprintf_r+0x6fa>
 8009034:	2d00      	cmp	r5, #0
 8009036:	bf08      	it	eq
 8009038:	2c0a      	cmpeq	r4, #10
 800903a:	f0c0 81db 	bcc.w	80093f4 <_svfprintf_r+0x704>
 800903e:	ae30      	add	r6, sp, #192	; 0xc0
 8009040:	4620      	mov	r0, r4
 8009042:	4629      	mov	r1, r5
 8009044:	220a      	movs	r2, #10
 8009046:	2300      	movs	r3, #0
 8009048:	f7f7 fdb2 	bl	8000bb0 <__aeabi_uldivmod>
 800904c:	3230      	adds	r2, #48	; 0x30
 800904e:	f806 2d01 	strb.w	r2, [r6, #-1]!
 8009052:	4620      	mov	r0, r4
 8009054:	4629      	mov	r1, r5
 8009056:	2300      	movs	r3, #0
 8009058:	220a      	movs	r2, #10
 800905a:	f7f7 fda9 	bl	8000bb0 <__aeabi_uldivmod>
 800905e:	4604      	mov	r4, r0
 8009060:	460d      	mov	r5, r1
 8009062:	ea54 0305 	orrs.w	r3, r4, r5
 8009066:	d1eb      	bne.n	8009040 <_svfprintf_r+0x350>
 8009068:	ab30      	add	r3, sp, #192	; 0xc0
 800906a:	1b9b      	subs	r3, r3, r6
 800906c:	930d      	str	r3, [sp, #52]	; 0x34
 800906e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009070:	455b      	cmp	r3, fp
 8009072:	bfb8      	it	lt
 8009074:	465b      	movlt	r3, fp
 8009076:	9308      	str	r3, [sp, #32]
 8009078:	2300      	movs	r3, #0
 800907a:	9313      	str	r3, [sp, #76]	; 0x4c
 800907c:	b117      	cbz	r7, 8009084 <_svfprintf_r+0x394>
 800907e:	9b08      	ldr	r3, [sp, #32]
 8009080:	3301      	adds	r3, #1
 8009082:	9308      	str	r3, [sp, #32]
 8009084:	9b07      	ldr	r3, [sp, #28]
 8009086:	f013 0302 	ands.w	r3, r3, #2
 800908a:	930f      	str	r3, [sp, #60]	; 0x3c
 800908c:	d002      	beq.n	8009094 <_svfprintf_r+0x3a4>
 800908e:	9b08      	ldr	r3, [sp, #32]
 8009090:	3302      	adds	r3, #2
 8009092:	9308      	str	r3, [sp, #32]
 8009094:	9b07      	ldr	r3, [sp, #28]
 8009096:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 800909a:	9310      	str	r3, [sp, #64]	; 0x40
 800909c:	f040 82d7 	bne.w	800964e <_svfprintf_r+0x95e>
 80090a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090a2:	9a08      	ldr	r2, [sp, #32]
 80090a4:	1a9d      	subs	r5, r3, r2
 80090a6:	2d00      	cmp	r5, #0
 80090a8:	f340 82d1 	ble.w	800964e <_svfprintf_r+0x95e>
 80090ac:	2d10      	cmp	r5, #16
 80090ae:	9925      	ldr	r1, [sp, #148]	; 0x94
 80090b0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80090b2:	4f37      	ldr	r7, [pc, #220]	; (8009190 <_svfprintf_r+0x4a0>)
 80090b4:	dd27      	ble.n	8009106 <_svfprintf_r+0x416>
 80090b6:	9618      	str	r6, [sp, #96]	; 0x60
 80090b8:	4648      	mov	r0, r9
 80090ba:	2410      	movs	r4, #16
 80090bc:	46b9      	mov	r9, r7
 80090be:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80090c0:	462f      	mov	r7, r5
 80090c2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80090c4:	e004      	b.n	80090d0 <_svfprintf_r+0x3e0>
 80090c6:	3f10      	subs	r7, #16
 80090c8:	2f10      	cmp	r7, #16
 80090ca:	f100 0008 	add.w	r0, r0, #8
 80090ce:	dd16      	ble.n	80090fe <_svfprintf_r+0x40e>
 80090d0:	3201      	adds	r2, #1
 80090d2:	4b2f      	ldr	r3, [pc, #188]	; (8009190 <_svfprintf_r+0x4a0>)
 80090d4:	9224      	str	r2, [sp, #144]	; 0x90
 80090d6:	3110      	adds	r1, #16
 80090d8:	2a07      	cmp	r2, #7
 80090da:	9125      	str	r1, [sp, #148]	; 0x94
 80090dc:	e880 0018 	stmia.w	r0, {r3, r4}
 80090e0:	ddf1      	ble.n	80090c6 <_svfprintf_r+0x3d6>
 80090e2:	aa23      	add	r2, sp, #140	; 0x8c
 80090e4:	4631      	mov	r1, r6
 80090e6:	4628      	mov	r0, r5
 80090e8:	f005 fa78 	bl	800e5dc <__ssprint_r>
 80090ec:	2800      	cmp	r0, #0
 80090ee:	f47f aef8 	bne.w	8008ee2 <_svfprintf_r+0x1f2>
 80090f2:	3f10      	subs	r7, #16
 80090f4:	2f10      	cmp	r7, #16
 80090f6:	9925      	ldr	r1, [sp, #148]	; 0x94
 80090f8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80090fa:	a830      	add	r0, sp, #192	; 0xc0
 80090fc:	dce8      	bgt.n	80090d0 <_svfprintf_r+0x3e0>
 80090fe:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8009100:	463d      	mov	r5, r7
 8009102:	464f      	mov	r7, r9
 8009104:	4681      	mov	r9, r0
 8009106:	3201      	adds	r2, #1
 8009108:	186c      	adds	r4, r5, r1
 800910a:	2a07      	cmp	r2, #7
 800910c:	9425      	str	r4, [sp, #148]	; 0x94
 800910e:	9224      	str	r2, [sp, #144]	; 0x90
 8009110:	f8c9 7000 	str.w	r7, [r9]
 8009114:	f8c9 5004 	str.w	r5, [r9, #4]
 8009118:	f300 8428 	bgt.w	800996c <_svfprintf_r+0xc7c>
 800911c:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 8009120:	f109 0908 	add.w	r9, r9, #8
 8009124:	b177      	cbz	r7, 8009144 <_svfprintf_r+0x454>
 8009126:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009128:	3301      	adds	r3, #1
 800912a:	3401      	adds	r4, #1
 800912c:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
 8009130:	2201      	movs	r2, #1
 8009132:	2b07      	cmp	r3, #7
 8009134:	9425      	str	r4, [sp, #148]	; 0x94
 8009136:	9324      	str	r3, [sp, #144]	; 0x90
 8009138:	e889 0006 	stmia.w	r9, {r1, r2}
 800913c:	f300 83a0 	bgt.w	8009880 <_svfprintf_r+0xb90>
 8009140:	f109 0908 	add.w	r9, r9, #8
 8009144:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009146:	b16b      	cbz	r3, 8009164 <_svfprintf_r+0x474>
 8009148:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800914a:	3301      	adds	r3, #1
 800914c:	3402      	adds	r4, #2
 800914e:	a91c      	add	r1, sp, #112	; 0x70
 8009150:	2202      	movs	r2, #2
 8009152:	2b07      	cmp	r3, #7
 8009154:	9425      	str	r4, [sp, #148]	; 0x94
 8009156:	9324      	str	r3, [sp, #144]	; 0x90
 8009158:	e889 0006 	stmia.w	r9, {r1, r2}
 800915c:	f300 839c 	bgt.w	8009898 <_svfprintf_r+0xba8>
 8009160:	f109 0908 	add.w	r9, r9, #8
 8009164:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009166:	2b80      	cmp	r3, #128	; 0x80
 8009168:	f000 82d5 	beq.w	8009716 <_svfprintf_r+0xa26>
 800916c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800916e:	ebc3 070b 	rsb	r7, r3, fp
 8009172:	2f00      	cmp	r7, #0
 8009174:	dd39      	ble.n	80091ea <_svfprintf_r+0x4fa>
 8009176:	4a07      	ldr	r2, [pc, #28]	; (8009194 <_svfprintf_r+0x4a4>)
 8009178:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800917a:	920f      	str	r2, [sp, #60]	; 0x3c
 800917c:	2f10      	cmp	r7, #16
 800917e:	dd28      	ble.n	80091d2 <_svfprintf_r+0x4e2>
 8009180:	4622      	mov	r2, r4
 8009182:	f04f 0b10 	mov.w	fp, #16
 8009186:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009188:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800918a:	e00a      	b.n	80091a2 <_svfprintf_r+0x4b2>
 800918c:	0800f268 	.word	0x0800f268
 8009190:	0800f288 	.word	0x0800f288
 8009194:	0800f234 	.word	0x0800f234
 8009198:	3f10      	subs	r7, #16
 800919a:	2f10      	cmp	r7, #16
 800919c:	f109 0908 	add.w	r9, r9, #8
 80091a0:	dd16      	ble.n	80091d0 <_svfprintf_r+0x4e0>
 80091a2:	3301      	adds	r3, #1
 80091a4:	3210      	adds	r2, #16
 80091a6:	2b07      	cmp	r3, #7
 80091a8:	9225      	str	r2, [sp, #148]	; 0x94
 80091aa:	9324      	str	r3, [sp, #144]	; 0x90
 80091ac:	e889 0c00 	stmia.w	r9, {sl, fp}
 80091b0:	ddf2      	ble.n	8009198 <_svfprintf_r+0x4a8>
 80091b2:	aa23      	add	r2, sp, #140	; 0x8c
 80091b4:	4621      	mov	r1, r4
 80091b6:	4628      	mov	r0, r5
 80091b8:	f005 fa10 	bl	800e5dc <__ssprint_r>
 80091bc:	2800      	cmp	r0, #0
 80091be:	f47f ae90 	bne.w	8008ee2 <_svfprintf_r+0x1f2>
 80091c2:	3f10      	subs	r7, #16
 80091c4:	2f10      	cmp	r7, #16
 80091c6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80091c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80091ca:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 80091ce:	dce8      	bgt.n	80091a2 <_svfprintf_r+0x4b2>
 80091d0:	4614      	mov	r4, r2
 80091d2:	3301      	adds	r3, #1
 80091d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80091d6:	9324      	str	r3, [sp, #144]	; 0x90
 80091d8:	443c      	add	r4, r7
 80091da:	2b07      	cmp	r3, #7
 80091dc:	9425      	str	r4, [sp, #148]	; 0x94
 80091de:	e889 0084 	stmia.w	r9, {r2, r7}
 80091e2:	f300 8341 	bgt.w	8009868 <_svfprintf_r+0xb78>
 80091e6:	f109 0908 	add.w	r9, r9, #8
 80091ea:	9b07      	ldr	r3, [sp, #28]
 80091ec:	05da      	lsls	r2, r3, #23
 80091ee:	f100 8230 	bmi.w	8009652 <_svfprintf_r+0x962>
 80091f2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80091f4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80091f6:	f8c9 6000 	str.w	r6, [r9]
 80091fa:	3301      	adds	r3, #1
 80091fc:	440c      	add	r4, r1
 80091fe:	2b07      	cmp	r3, #7
 8009200:	9425      	str	r4, [sp, #148]	; 0x94
 8009202:	f8c9 1004 	str.w	r1, [r9, #4]
 8009206:	9324      	str	r3, [sp, #144]	; 0x90
 8009208:	f300 8318 	bgt.w	800983c <_svfprintf_r+0xb4c>
 800920c:	f109 0908 	add.w	r9, r9, #8
 8009210:	9b07      	ldr	r3, [sp, #28]
 8009212:	0759      	lsls	r1, r3, #29
 8009214:	d53f      	bpl.n	8009296 <_svfprintf_r+0x5a6>
 8009216:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009218:	9a08      	ldr	r2, [sp, #32]
 800921a:	1a9d      	subs	r5, r3, r2
 800921c:	2d00      	cmp	r5, #0
 800921e:	dd3a      	ble.n	8009296 <_svfprintf_r+0x5a6>
 8009220:	2d10      	cmp	r5, #16
 8009222:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009224:	4fbc      	ldr	r7, [pc, #752]	; (8009518 <_svfprintf_r+0x828>)
 8009226:	dd23      	ble.n	8009270 <_svfprintf_r+0x580>
 8009228:	4622      	mov	r2, r4
 800922a:	2610      	movs	r6, #16
 800922c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8009230:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009232:	e004      	b.n	800923e <_svfprintf_r+0x54e>
 8009234:	3d10      	subs	r5, #16
 8009236:	2d10      	cmp	r5, #16
 8009238:	f109 0908 	add.w	r9, r9, #8
 800923c:	dd17      	ble.n	800926e <_svfprintf_r+0x57e>
 800923e:	3301      	adds	r3, #1
 8009240:	49b5      	ldr	r1, [pc, #724]	; (8009518 <_svfprintf_r+0x828>)
 8009242:	9324      	str	r3, [sp, #144]	; 0x90
 8009244:	3210      	adds	r2, #16
 8009246:	2b07      	cmp	r3, #7
 8009248:	9225      	str	r2, [sp, #148]	; 0x94
 800924a:	e889 0042 	stmia.w	r9, {r1, r6}
 800924e:	ddf1      	ble.n	8009234 <_svfprintf_r+0x544>
 8009250:	aa23      	add	r2, sp, #140	; 0x8c
 8009252:	4621      	mov	r1, r4
 8009254:	4658      	mov	r0, fp
 8009256:	f005 f9c1 	bl	800e5dc <__ssprint_r>
 800925a:	2800      	cmp	r0, #0
 800925c:	f47f ae41 	bne.w	8008ee2 <_svfprintf_r+0x1f2>
 8009260:	3d10      	subs	r5, #16
 8009262:	2d10      	cmp	r5, #16
 8009264:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8009266:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009268:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800926c:	dce7      	bgt.n	800923e <_svfprintf_r+0x54e>
 800926e:	4614      	mov	r4, r2
 8009270:	3301      	adds	r3, #1
 8009272:	442c      	add	r4, r5
 8009274:	2b07      	cmp	r3, #7
 8009276:	9425      	str	r4, [sp, #148]	; 0x94
 8009278:	9324      	str	r3, [sp, #144]	; 0x90
 800927a:	f8c9 7000 	str.w	r7, [r9]
 800927e:	f8c9 5004 	str.w	r5, [r9, #4]
 8009282:	dd08      	ble.n	8009296 <_svfprintf_r+0x5a6>
 8009284:	aa23      	add	r2, sp, #140	; 0x8c
 8009286:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009288:	980a      	ldr	r0, [sp, #40]	; 0x28
 800928a:	f005 f9a7 	bl	800e5dc <__ssprint_r>
 800928e:	2800      	cmp	r0, #0
 8009290:	f47f ae27 	bne.w	8008ee2 <_svfprintf_r+0x1f2>
 8009294:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8009296:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009298:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800929a:	9908      	ldr	r1, [sp, #32]
 800929c:	428a      	cmp	r2, r1
 800929e:	bfac      	ite	ge
 80092a0:	189b      	addge	r3, r3, r2
 80092a2:	185b      	addlt	r3, r3, r1
 80092a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80092a6:	2c00      	cmp	r4, #0
 80092a8:	f040 82d4 	bne.w	8009854 <_svfprintf_r+0xb64>
 80092ac:	2300      	movs	r3, #0
 80092ae:	9324      	str	r3, [sp, #144]	; 0x90
 80092b0:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 80092b4:	e542      	b.n	8008d3c <_svfprintf_r+0x4c>
 80092b6:	9311      	str	r3, [sp, #68]	; 0x44
 80092b8:	46ab      	mov	fp, r5
 80092ba:	2a00      	cmp	r2, #0
 80092bc:	f041 8051 	bne.w	800a362 <_svfprintf_r+0x1672>
 80092c0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80092c2:	3707      	adds	r7, #7
 80092c4:	f027 0307 	bic.w	r3, r7, #7
 80092c8:	f103 0208 	add.w	r2, r3, #8
 80092cc:	920e      	str	r2, [sp, #56]	; 0x38
 80092ce:	681a      	ldr	r2, [r3, #0]
 80092d0:	9214      	str	r2, [sp, #80]	; 0x50
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	9315      	str	r3, [sp, #84]	; 0x54
 80092d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80092d8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80092da:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80092de:	4628      	mov	r0, r5
 80092e0:	4621      	mov	r1, r4
 80092e2:	f04f 32ff 	mov.w	r2, #4294967295
 80092e6:	4b8d      	ldr	r3, [pc, #564]	; (800951c <_svfprintf_r+0x82c>)
 80092e8:	f7f7 ff4a 	bl	8001180 <__aeabi_dcmpun>
 80092ec:	2800      	cmp	r0, #0
 80092ee:	f040 84c2 	bne.w	8009c76 <_svfprintf_r+0xf86>
 80092f2:	4628      	mov	r0, r5
 80092f4:	4621      	mov	r1, r4
 80092f6:	f04f 32ff 	mov.w	r2, #4294967295
 80092fa:	4b88      	ldr	r3, [pc, #544]	; (800951c <_svfprintf_r+0x82c>)
 80092fc:	f7f7 fc3a 	bl	8000b74 <__aeabi_dcmple>
 8009300:	2800      	cmp	r0, #0
 8009302:	f040 84b8 	bne.w	8009c76 <_svfprintf_r+0xf86>
 8009306:	9814      	ldr	r0, [sp, #80]	; 0x50
 8009308:	9915      	ldr	r1, [sp, #84]	; 0x54
 800930a:	2200      	movs	r2, #0
 800930c:	2300      	movs	r3, #0
 800930e:	f7f7 fc27 	bl	8000b60 <__aeabi_dcmplt>
 8009312:	2800      	cmp	r0, #0
 8009314:	f040 874f 	bne.w	800a1b6 <_svfprintf_r+0x14c6>
 8009318:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800931c:	4e80      	ldr	r6, [pc, #512]	; (8009520 <_svfprintf_r+0x830>)
 800931e:	4b81      	ldr	r3, [pc, #516]	; (8009524 <_svfprintf_r+0x834>)
 8009320:	9907      	ldr	r1, [sp, #28]
 8009322:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009326:	9107      	str	r1, [sp, #28]
 8009328:	9911      	ldr	r1, [sp, #68]	; 0x44
 800932a:	2203      	movs	r2, #3
 800932c:	f04f 0b00 	mov.w	fp, #0
 8009330:	9208      	str	r2, [sp, #32]
 8009332:	2947      	cmp	r1, #71	; 0x47
 8009334:	bfd8      	it	le
 8009336:	461e      	movle	r6, r3
 8009338:	920d      	str	r2, [sp, #52]	; 0x34
 800933a:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 800933e:	e69d      	b.n	800907c <_svfprintf_r+0x38c>
 8009340:	9b07      	ldr	r3, [sp, #28]
 8009342:	f043 0308 	orr.w	r3, r3, #8
 8009346:	9307      	str	r3, [sp, #28]
 8009348:	f898 3000 	ldrb.w	r3, [r8]
 800934c:	e529      	b.n	8008da2 <_svfprintf_r+0xb2>
 800934e:	9311      	str	r3, [sp, #68]	; 0x44
 8009350:	46ab      	mov	fp, r5
 8009352:	2a00      	cmp	r2, #0
 8009354:	f041 8011 	bne.w	800a37a <_svfprintf_r+0x168a>
 8009358:	9b07      	ldr	r3, [sp, #28]
 800935a:	f043 0310 	orr.w	r3, r3, #16
 800935e:	9307      	str	r3, [sp, #28]
 8009360:	9a07      	ldr	r2, [sp, #28]
 8009362:	f012 0320 	ands.w	r3, r2, #32
 8009366:	f47f add2 	bne.w	8008f0e <_svfprintf_r+0x21e>
 800936a:	9907      	ldr	r1, [sp, #28]
 800936c:	f011 0210 	ands.w	r2, r1, #16
 8009370:	f000 852c 	beq.w	8009dcc <_svfprintf_r+0x10dc>
 8009374:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009376:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800937a:	f1bb 0f00 	cmp.w	fp, #0
 800937e:	6804      	ldr	r4, [r0, #0]
 8009380:	f100 0704 	add.w	r7, r0, #4
 8009384:	f04f 0500 	mov.w	r5, #0
 8009388:	f2c0 8548 	blt.w	8009e1c <_svfprintf_r+0x112c>
 800938c:	460a      	mov	r2, r1
 800938e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009392:	9207      	str	r2, [sp, #28]
 8009394:	ea54 0205 	orrs.w	r2, r4, r5
 8009398:	970e      	str	r7, [sp, #56]	; 0x38
 800939a:	f000 8143 	beq.w	8009624 <_svfprintf_r+0x934>
 800939e:	461f      	mov	r7, r3
 80093a0:	e5cb      	b.n	8008f3a <_svfprintf_r+0x24a>
 80093a2:	9311      	str	r3, [sp, #68]	; 0x44
 80093a4:	46ab      	mov	fp, r5
 80093a6:	2a00      	cmp	r2, #0
 80093a8:	f040 87e3 	bne.w	800a372 <_svfprintf_r+0x1682>
 80093ac:	9b07      	ldr	r3, [sp, #28]
 80093ae:	f043 0310 	orr.w	r3, r3, #16
 80093b2:	9307      	str	r3, [sp, #28]
 80093b4:	9a07      	ldr	r2, [sp, #28]
 80093b6:	f012 0320 	ands.w	r3, r2, #32
 80093ba:	f000 8332 	beq.w	8009a22 <_svfprintf_r+0xd32>
 80093be:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80093c0:	3707      	adds	r7, #7
 80093c2:	f027 0307 	bic.w	r3, r7, #7
 80093c6:	2700      	movs	r7, #0
 80093c8:	f103 0108 	add.w	r1, r3, #8
 80093cc:	45bb      	cmp	fp, r7
 80093ce:	910e      	str	r1, [sp, #56]	; 0x38
 80093d0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80093d4:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 80093d8:	f2c0 835c 	blt.w	8009a94 <_svfprintf_r+0xda4>
 80093dc:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 80093e0:	9307      	str	r3, [sp, #28]
 80093e2:	ea54 0305 	orrs.w	r3, r4, r5
 80093e6:	f47f ae25 	bne.w	8009034 <_svfprintf_r+0x344>
 80093ea:	f1bb 0f00 	cmp.w	fp, #0
 80093ee:	f000 80fe 	beq.w	80095ee <_svfprintf_r+0x8fe>
 80093f2:	2400      	movs	r4, #0
 80093f4:	ae40      	add	r6, sp, #256	; 0x100
 80093f6:	3430      	adds	r4, #48	; 0x30
 80093f8:	f806 4d41 	strb.w	r4, [r6, #-65]!
 80093fc:	e634      	b.n	8009068 <_svfprintf_r+0x378>
 80093fe:	9311      	str	r3, [sp, #68]	; 0x44
 8009400:	46ab      	mov	fp, r5
 8009402:	2a00      	cmp	r2, #0
 8009404:	f040 8797 	bne.w	800a336 <_svfprintf_r+0x1646>
 8009408:	9b07      	ldr	r3, [sp, #28]
 800940a:	4847      	ldr	r0, [pc, #284]	; (8009528 <_svfprintf_r+0x838>)
 800940c:	069d      	lsls	r5, r3, #26
 800940e:	f140 8097 	bpl.w	8009540 <_svfprintf_r+0x850>
 8009412:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8009414:	3707      	adds	r7, #7
 8009416:	f027 0307 	bic.w	r3, r7, #7
 800941a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800941e:	f103 0208 	add.w	r2, r3, #8
 8009422:	920e      	str	r2, [sp, #56]	; 0x38
 8009424:	9a07      	ldr	r2, [sp, #28]
 8009426:	f012 0701 	ands.w	r7, r2, #1
 800942a:	f000 8241 	beq.w	80098b0 <_svfprintf_r+0xbc0>
 800942e:	ea54 0305 	orrs.w	r3, r4, r5
 8009432:	f000 8505 	beq.w	8009e40 <_svfprintf_r+0x1150>
 8009436:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800943a:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
 800943e:	2700      	movs	r7, #0
 8009440:	9a07      	ldr	r2, [sp, #28]
 8009442:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 8009446:	2330      	movs	r3, #48	; 0x30
 8009448:	45bb      	cmp	fp, r7
 800944a:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 800944e:	f042 0302 	orr.w	r3, r2, #2
 8009452:	f2c0 86b5 	blt.w	800a1c0 <_svfprintf_r+0x14d0>
 8009456:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 800945a:	f043 0302 	orr.w	r3, r3, #2
 800945e:	9307      	str	r3, [sp, #28]
 8009460:	ae30      	add	r6, sp, #192	; 0xc0
 8009462:	0923      	lsrs	r3, r4, #4
 8009464:	f004 010f 	and.w	r1, r4, #15
 8009468:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 800946c:	092a      	lsrs	r2, r5, #4
 800946e:	461c      	mov	r4, r3
 8009470:	4615      	mov	r5, r2
 8009472:	5c43      	ldrb	r3, [r0, r1]
 8009474:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8009478:	ea54 0305 	orrs.w	r3, r4, r5
 800947c:	d1f1      	bne.n	8009462 <_svfprintf_r+0x772>
 800947e:	e5f3      	b.n	8009068 <_svfprintf_r+0x378>
 8009480:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009482:	9311      	str	r3, [sp, #68]	; 0x44
 8009484:	680a      	ldr	r2, [r1, #0]
 8009486:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 800948a:	2300      	movs	r3, #0
 800948c:	460a      	mov	r2, r1
 800948e:	461f      	mov	r7, r3
 8009490:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8009494:	3204      	adds	r2, #4
 8009496:	2301      	movs	r3, #1
 8009498:	9308      	str	r3, [sp, #32]
 800949a:	46bb      	mov	fp, r7
 800949c:	9713      	str	r7, [sp, #76]	; 0x4c
 800949e:	920e      	str	r2, [sp, #56]	; 0x38
 80094a0:	930d      	str	r3, [sp, #52]	; 0x34
 80094a2:	ae26      	add	r6, sp, #152	; 0x98
 80094a4:	e5ee      	b.n	8009084 <_svfprintf_r+0x394>
 80094a6:	9311      	str	r3, [sp, #68]	; 0x44
 80094a8:	46ab      	mov	fp, r5
 80094aa:	2a00      	cmp	r2, #0
 80094ac:	f43f ada0 	beq.w	8008ff0 <_svfprintf_r+0x300>
 80094b0:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 80094b4:	e59c      	b.n	8008ff0 <_svfprintf_r+0x300>
 80094b6:	9b07      	ldr	r3, [sp, #28]
 80094b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094bc:	9307      	str	r3, [sp, #28]
 80094be:	f898 3000 	ldrb.w	r3, [r8]
 80094c2:	e46e      	b.n	8008da2 <_svfprintf_r+0xb2>
 80094c4:	f898 3000 	ldrb.w	r3, [r8]
 80094c8:	2900      	cmp	r1, #0
 80094ca:	f47f ac6a 	bne.w	8008da2 <_svfprintf_r+0xb2>
 80094ce:	2201      	movs	r2, #1
 80094d0:	2120      	movs	r1, #32
 80094d2:	e466      	b.n	8008da2 <_svfprintf_r+0xb2>
 80094d4:	9b07      	ldr	r3, [sp, #28]
 80094d6:	f043 0301 	orr.w	r3, r3, #1
 80094da:	9307      	str	r3, [sp, #28]
 80094dc:	f898 3000 	ldrb.w	r3, [r8]
 80094e0:	e45f      	b.n	8008da2 <_svfprintf_r+0xb2>
 80094e2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80094e4:	6823      	ldr	r3, [r4, #0]
 80094e6:	930c      	str	r3, [sp, #48]	; 0x30
 80094e8:	4618      	mov	r0, r3
 80094ea:	2800      	cmp	r0, #0
 80094ec:	4623      	mov	r3, r4
 80094ee:	f103 0304 	add.w	r3, r3, #4
 80094f2:	f6ff acb8 	blt.w	8008e66 <_svfprintf_r+0x176>
 80094f6:	930e      	str	r3, [sp, #56]	; 0x38
 80094f8:	f898 3000 	ldrb.w	r3, [r8]
 80094fc:	e451      	b.n	8008da2 <_svfprintf_r+0xb2>
 80094fe:	f898 3000 	ldrb.w	r3, [r8]
 8009502:	2201      	movs	r2, #1
 8009504:	212b      	movs	r1, #43	; 0x2b
 8009506:	e44c      	b.n	8008da2 <_svfprintf_r+0xb2>
 8009508:	9311      	str	r3, [sp, #68]	; 0x44
 800950a:	46ab      	mov	fp, r5
 800950c:	2a00      	cmp	r2, #0
 800950e:	f43f af51 	beq.w	80093b4 <_svfprintf_r+0x6c4>
 8009512:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8009516:	e74d      	b.n	80093b4 <_svfprintf_r+0x6c4>
 8009518:	0800f288 	.word	0x0800f288
 800951c:	7fefffff 	.word	0x7fefffff
 8009520:	0800f248 	.word	0x0800f248
 8009524:	0800f244 	.word	0x0800f244
 8009528:	0800f254 	.word	0x0800f254
 800952c:	9311      	str	r3, [sp, #68]	; 0x44
 800952e:	46ab      	mov	fp, r5
 8009530:	2a00      	cmp	r2, #0
 8009532:	f040 872a 	bne.w	800a38a <_svfprintf_r+0x169a>
 8009536:	9b07      	ldr	r3, [sp, #28]
 8009538:	4899      	ldr	r0, [pc, #612]	; (80097a0 <_svfprintf_r+0xab0>)
 800953a:	069d      	lsls	r5, r3, #26
 800953c:	f53f af69 	bmi.w	8009412 <_svfprintf_r+0x722>
 8009540:	9b07      	ldr	r3, [sp, #28]
 8009542:	06dc      	lsls	r4, r3, #27
 8009544:	f140 8435 	bpl.w	8009db2 <_svfprintf_r+0x10c2>
 8009548:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800954a:	4613      	mov	r3, r2
 800954c:	3304      	adds	r3, #4
 800954e:	6814      	ldr	r4, [r2, #0]
 8009550:	930e      	str	r3, [sp, #56]	; 0x38
 8009552:	2500      	movs	r5, #0
 8009554:	e766      	b.n	8009424 <_svfprintf_r+0x734>
 8009556:	f898 3000 	ldrb.w	r3, [r8]
 800955a:	2b6c      	cmp	r3, #108	; 0x6c
 800955c:	f000 84e2 	beq.w	8009f24 <_svfprintf_r+0x1234>
 8009560:	9807      	ldr	r0, [sp, #28]
 8009562:	f040 0010 	orr.w	r0, r0, #16
 8009566:	9007      	str	r0, [sp, #28]
 8009568:	e41b      	b.n	8008da2 <_svfprintf_r+0xb2>
 800956a:	2a00      	cmp	r2, #0
 800956c:	f040 8709 	bne.w	800a382 <_svfprintf_r+0x1692>
 8009570:	9b07      	ldr	r3, [sp, #28]
 8009572:	069b      	lsls	r3, r3, #26
 8009574:	f140 8406 	bpl.w	8009d84 <_svfprintf_r+0x1094>
 8009578:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800957a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800957c:	6813      	ldr	r3, [r2, #0]
 800957e:	17cd      	asrs	r5, r1, #31
 8009580:	4608      	mov	r0, r1
 8009582:	3204      	adds	r2, #4
 8009584:	4629      	mov	r1, r5
 8009586:	920e      	str	r2, [sp, #56]	; 0x38
 8009588:	e9c3 0100 	strd	r0, r1, [r3]
 800958c:	f7ff bbd6 	b.w	8008d3c <_svfprintf_r+0x4c>
 8009590:	9b07      	ldr	r3, [sp, #28]
 8009592:	f043 0320 	orr.w	r3, r3, #32
 8009596:	9307      	str	r3, [sp, #28]
 8009598:	f898 3000 	ldrb.w	r3, [r8]
 800959c:	e401      	b.n	8008da2 <_svfprintf_r+0xb2>
 800959e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095a0:	9311      	str	r3, [sp, #68]	; 0x44
 80095a2:	6816      	ldr	r6, [r2, #0]
 80095a4:	2400      	movs	r4, #0
 80095a6:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
 80095aa:	1d17      	adds	r7, r2, #4
 80095ac:	2e00      	cmp	r6, #0
 80095ae:	f000 85cd 	beq.w	800a14c <_svfprintf_r+0x145c>
 80095b2:	2d00      	cmp	r5, #0
 80095b4:	f2c0 8518 	blt.w	8009fe8 <_svfprintf_r+0x12f8>
 80095b8:	462a      	mov	r2, r5
 80095ba:	4621      	mov	r1, r4
 80095bc:	4630      	mov	r0, r6
 80095be:	f7f7 fd8f 	bl	80010e0 <memchr>
 80095c2:	2800      	cmp	r0, #0
 80095c4:	f000 862a 	beq.w	800a21c <_svfprintf_r+0x152c>
 80095c8:	1b83      	subs	r3, r0, r6
 80095ca:	930d      	str	r3, [sp, #52]	; 0x34
 80095cc:	46a3      	mov	fp, r4
 80095ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80095d2:	970e      	str	r7, [sp, #56]	; 0x38
 80095d4:	9308      	str	r3, [sp, #32]
 80095d6:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 80095da:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 80095de:	e54d      	b.n	800907c <_svfprintf_r+0x38c>
 80095e0:	486f      	ldr	r0, [pc, #444]	; (80097a0 <_svfprintf_r+0xab0>)
 80095e2:	9211      	str	r2, [sp, #68]	; 0x44
 80095e4:	f1bb 0f00 	cmp.w	fp, #0
 80095e8:	f040 8173 	bne.w	80098d2 <_svfprintf_r+0xbe2>
 80095ec:	465f      	mov	r7, fp
 80095ee:	f04f 0b00 	mov.w	fp, #0
 80095f2:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 80095f6:	ae30      	add	r6, sp, #192	; 0xc0
 80095f8:	e539      	b.n	800906e <_svfprintf_r+0x37e>
 80095fa:	9311      	str	r3, [sp, #68]	; 0x44
 80095fc:	2a00      	cmp	r2, #0
 80095fe:	f040 86ac 	bne.w	800a35a <_svfprintf_r+0x166a>
 8009602:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009604:	2a00      	cmp	r2, #0
 8009606:	f43f ac65 	beq.w	8008ed4 <_svfprintf_r+0x1e4>
 800960a:	2300      	movs	r3, #0
 800960c:	2101      	movs	r1, #1
 800960e:	461f      	mov	r7, r3
 8009610:	9108      	str	r1, [sp, #32]
 8009612:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 8009616:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800961a:	469b      	mov	fp, r3
 800961c:	9313      	str	r3, [sp, #76]	; 0x4c
 800961e:	910d      	str	r1, [sp, #52]	; 0x34
 8009620:	ae26      	add	r6, sp, #152	; 0x98
 8009622:	e52f      	b.n	8009084 <_svfprintf_r+0x394>
 8009624:	f1bb 0f00 	cmp.w	fp, #0
 8009628:	f000 8603 	beq.w	800a232 <_svfprintf_r+0x1542>
 800962c:	2700      	movs	r7, #0
 800962e:	2400      	movs	r4, #0
 8009630:	2500      	movs	r5, #0
 8009632:	e482      	b.n	8008f3a <_svfprintf_r+0x24a>
 8009634:	485a      	ldr	r0, [pc, #360]	; (80097a0 <_svfprintf_r+0xab0>)
 8009636:	9307      	str	r3, [sp, #28]
 8009638:	9211      	str	r2, [sp, #68]	; 0x44
 800963a:	ea54 0305 	orrs.w	r3, r4, r5
 800963e:	970e      	str	r7, [sp, #56]	; 0x38
 8009640:	f04f 0700 	mov.w	r7, #0
 8009644:	f47f af0c 	bne.w	8009460 <_svfprintf_r+0x770>
 8009648:	2400      	movs	r4, #0
 800964a:	2500      	movs	r5, #0
 800964c:	e708      	b.n	8009460 <_svfprintf_r+0x770>
 800964e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8009650:	e568      	b.n	8009124 <_svfprintf_r+0x434>
 8009652:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009654:	2b65      	cmp	r3, #101	; 0x65
 8009656:	f340 80a9 	ble.w	80097ac <_svfprintf_r+0xabc>
 800965a:	9814      	ldr	r0, [sp, #80]	; 0x50
 800965c:	9915      	ldr	r1, [sp, #84]	; 0x54
 800965e:	2200      	movs	r2, #0
 8009660:	2300      	movs	r3, #0
 8009662:	f7f7 fa73 	bl	8000b4c <__aeabi_dcmpeq>
 8009666:	2800      	cmp	r0, #0
 8009668:	f000 8135 	beq.w	80098d6 <_svfprintf_r+0xbe6>
 800966c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800966e:	4a4d      	ldr	r2, [pc, #308]	; (80097a4 <_svfprintf_r+0xab4>)
 8009670:	f8c9 2000 	str.w	r2, [r9]
 8009674:	3301      	adds	r3, #1
 8009676:	3401      	adds	r4, #1
 8009678:	2201      	movs	r2, #1
 800967a:	2b07      	cmp	r3, #7
 800967c:	9425      	str	r4, [sp, #148]	; 0x94
 800967e:	9324      	str	r3, [sp, #144]	; 0x90
 8009680:	f8c9 2004 	str.w	r2, [r9, #4]
 8009684:	f300 83e8 	bgt.w	8009e58 <_svfprintf_r+0x1168>
 8009688:	f109 0908 	add.w	r9, r9, #8
 800968c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800968e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009690:	4293      	cmp	r3, r2
 8009692:	db03      	blt.n	800969c <_svfprintf_r+0x9ac>
 8009694:	9b07      	ldr	r3, [sp, #28]
 8009696:	07db      	lsls	r3, r3, #31
 8009698:	f57f adba 	bpl.w	8009210 <_svfprintf_r+0x520>
 800969c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800969e:	9916      	ldr	r1, [sp, #88]	; 0x58
 80096a0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80096a2:	f8c9 2000 	str.w	r2, [r9]
 80096a6:	3301      	adds	r3, #1
 80096a8:	440c      	add	r4, r1
 80096aa:	2b07      	cmp	r3, #7
 80096ac:	9425      	str	r4, [sp, #148]	; 0x94
 80096ae:	f8c9 1004 	str.w	r1, [r9, #4]
 80096b2:	9324      	str	r3, [sp, #144]	; 0x90
 80096b4:	f300 8440 	bgt.w	8009f38 <_svfprintf_r+0x1248>
 80096b8:	f109 0908 	add.w	r9, r9, #8
 80096bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80096be:	1e5d      	subs	r5, r3, #1
 80096c0:	2d00      	cmp	r5, #0
 80096c2:	f77f ada5 	ble.w	8009210 <_svfprintf_r+0x520>
 80096c6:	4a38      	ldr	r2, [pc, #224]	; (80097a8 <_svfprintf_r+0xab8>)
 80096c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80096ca:	920f      	str	r2, [sp, #60]	; 0x3c
 80096cc:	2d10      	cmp	r5, #16
 80096ce:	f340 81e6 	ble.w	8009a9e <_svfprintf_r+0xdae>
 80096d2:	2610      	movs	r6, #16
 80096d4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80096d6:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80096da:	e005      	b.n	80096e8 <_svfprintf_r+0x9f8>
 80096dc:	f109 0908 	add.w	r9, r9, #8
 80096e0:	3d10      	subs	r5, #16
 80096e2:	2d10      	cmp	r5, #16
 80096e4:	f340 81db 	ble.w	8009a9e <_svfprintf_r+0xdae>
 80096e8:	3301      	adds	r3, #1
 80096ea:	3410      	adds	r4, #16
 80096ec:	2b07      	cmp	r3, #7
 80096ee:	9425      	str	r4, [sp, #148]	; 0x94
 80096f0:	9324      	str	r3, [sp, #144]	; 0x90
 80096f2:	f8c9 a000 	str.w	sl, [r9]
 80096f6:	f8c9 6004 	str.w	r6, [r9, #4]
 80096fa:	ddef      	ble.n	80096dc <_svfprintf_r+0x9ec>
 80096fc:	aa23      	add	r2, sp, #140	; 0x8c
 80096fe:	4659      	mov	r1, fp
 8009700:	4638      	mov	r0, r7
 8009702:	f004 ff6b 	bl	800e5dc <__ssprint_r>
 8009706:	2800      	cmp	r0, #0
 8009708:	f47f abeb 	bne.w	8008ee2 <_svfprintf_r+0x1f2>
 800970c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800970e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009710:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8009714:	e7e4      	b.n	80096e0 <_svfprintf_r+0x9f0>
 8009716:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009718:	9a08      	ldr	r2, [sp, #32]
 800971a:	1a9f      	subs	r7, r3, r2
 800971c:	2f00      	cmp	r7, #0
 800971e:	f77f ad25 	ble.w	800916c <_svfprintf_r+0x47c>
 8009722:	4a21      	ldr	r2, [pc, #132]	; (80097a8 <_svfprintf_r+0xab8>)
 8009724:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009726:	920f      	str	r2, [sp, #60]	; 0x3c
 8009728:	2f10      	cmp	r7, #16
 800972a:	dd2b      	ble.n	8009784 <_svfprintf_r+0xa94>
 800972c:	464a      	mov	r2, r9
 800972e:	4621      	mov	r1, r4
 8009730:	46b9      	mov	r9, r7
 8009732:	2510      	movs	r5, #16
 8009734:	4637      	mov	r7, r6
 8009736:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009738:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800973a:	e006      	b.n	800974a <_svfprintf_r+0xa5a>
 800973c:	f1a9 0910 	sub.w	r9, r9, #16
 8009740:	f1b9 0f10 	cmp.w	r9, #16
 8009744:	f102 0208 	add.w	r2, r2, #8
 8009748:	dd18      	ble.n	800977c <_svfprintf_r+0xa8c>
 800974a:	3301      	adds	r3, #1
 800974c:	3110      	adds	r1, #16
 800974e:	2b07      	cmp	r3, #7
 8009750:	9125      	str	r1, [sp, #148]	; 0x94
 8009752:	9324      	str	r3, [sp, #144]	; 0x90
 8009754:	f8c2 a000 	str.w	sl, [r2]
 8009758:	6055      	str	r5, [r2, #4]
 800975a:	ddef      	ble.n	800973c <_svfprintf_r+0xa4c>
 800975c:	aa23      	add	r2, sp, #140	; 0x8c
 800975e:	4631      	mov	r1, r6
 8009760:	4620      	mov	r0, r4
 8009762:	f004 ff3b 	bl	800e5dc <__ssprint_r>
 8009766:	2800      	cmp	r0, #0
 8009768:	f47f abbb 	bne.w	8008ee2 <_svfprintf_r+0x1f2>
 800976c:	f1a9 0910 	sub.w	r9, r9, #16
 8009770:	f1b9 0f10 	cmp.w	r9, #16
 8009774:	9925      	ldr	r1, [sp, #148]	; 0x94
 8009776:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009778:	aa30      	add	r2, sp, #192	; 0xc0
 800977a:	dce6      	bgt.n	800974a <_svfprintf_r+0xa5a>
 800977c:	463e      	mov	r6, r7
 800977e:	460c      	mov	r4, r1
 8009780:	464f      	mov	r7, r9
 8009782:	4691      	mov	r9, r2
 8009784:	3301      	adds	r3, #1
 8009786:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009788:	9324      	str	r3, [sp, #144]	; 0x90
 800978a:	443c      	add	r4, r7
 800978c:	2b07      	cmp	r3, #7
 800978e:	9425      	str	r4, [sp, #148]	; 0x94
 8009790:	e889 0084 	stmia.w	r9, {r2, r7}
 8009794:	f300 8245 	bgt.w	8009c22 <_svfprintf_r+0xf32>
 8009798:	f109 0908 	add.w	r9, r9, #8
 800979c:	e4e6      	b.n	800916c <_svfprintf_r+0x47c>
 800979e:	bf00      	nop
 80097a0:	0800f268 	.word	0x0800f268
 80097a4:	0800f284 	.word	0x0800f284
 80097a8:	0800f234 	.word	0x0800f234
 80097ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80097ae:	9d24      	ldr	r5, [sp, #144]	; 0x90
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	f340 8208 	ble.w	8009bc6 <_svfprintf_r+0xed6>
 80097b6:	3501      	adds	r5, #1
 80097b8:	3401      	adds	r4, #1
 80097ba:	2301      	movs	r3, #1
 80097bc:	2d07      	cmp	r5, #7
 80097be:	9425      	str	r4, [sp, #148]	; 0x94
 80097c0:	9524      	str	r5, [sp, #144]	; 0x90
 80097c2:	f8c9 6000 	str.w	r6, [r9]
 80097c6:	f8c9 3004 	str.w	r3, [r9, #4]
 80097ca:	f300 820d 	bgt.w	8009be8 <_svfprintf_r+0xef8>
 80097ce:	f109 0908 	add.w	r9, r9, #8
 80097d2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80097d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80097d6:	f8c9 3000 	str.w	r3, [r9]
 80097da:	3501      	adds	r5, #1
 80097dc:	4414      	add	r4, r2
 80097de:	2d07      	cmp	r5, #7
 80097e0:	9425      	str	r4, [sp, #148]	; 0x94
 80097e2:	9524      	str	r5, [sp, #144]	; 0x90
 80097e4:	f8c9 2004 	str.w	r2, [r9, #4]
 80097e8:	f300 820e 	bgt.w	8009c08 <_svfprintf_r+0xf18>
 80097ec:	f109 0908 	add.w	r9, r9, #8
 80097f0:	2300      	movs	r3, #0
 80097f2:	9814      	ldr	r0, [sp, #80]	; 0x50
 80097f4:	9915      	ldr	r1, [sp, #84]	; 0x54
 80097f6:	2200      	movs	r2, #0
 80097f8:	f7f7 f9a8 	bl	8000b4c <__aeabi_dcmpeq>
 80097fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80097fe:	2800      	cmp	r0, #0
 8009800:	f040 80c3 	bne.w	800998a <_svfprintf_r+0xc9a>
 8009804:	3b01      	subs	r3, #1
 8009806:	3501      	adds	r5, #1
 8009808:	3601      	adds	r6, #1
 800980a:	441c      	add	r4, r3
 800980c:	2d07      	cmp	r5, #7
 800980e:	9524      	str	r5, [sp, #144]	; 0x90
 8009810:	9425      	str	r4, [sp, #148]	; 0x94
 8009812:	f8c9 6000 	str.w	r6, [r9]
 8009816:	f8c9 3004 	str.w	r3, [r9, #4]
 800981a:	f300 80f5 	bgt.w	8009a08 <_svfprintf_r+0xd18>
 800981e:	f109 0908 	add.w	r9, r9, #8
 8009822:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009824:	f8c9 2004 	str.w	r2, [r9, #4]
 8009828:	3501      	adds	r5, #1
 800982a:	4414      	add	r4, r2
 800982c:	ab1f      	add	r3, sp, #124	; 0x7c
 800982e:	2d07      	cmp	r5, #7
 8009830:	9425      	str	r4, [sp, #148]	; 0x94
 8009832:	9524      	str	r5, [sp, #144]	; 0x90
 8009834:	f8c9 3000 	str.w	r3, [r9]
 8009838:	f77f ace8 	ble.w	800920c <_svfprintf_r+0x51c>
 800983c:	aa23      	add	r2, sp, #140	; 0x8c
 800983e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009840:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009842:	f004 fecb 	bl	800e5dc <__ssprint_r>
 8009846:	2800      	cmp	r0, #0
 8009848:	f47f ab4b 	bne.w	8008ee2 <_svfprintf_r+0x1f2>
 800984c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800984e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8009852:	e4dd      	b.n	8009210 <_svfprintf_r+0x520>
 8009854:	aa23      	add	r2, sp, #140	; 0x8c
 8009856:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009858:	980a      	ldr	r0, [sp, #40]	; 0x28
 800985a:	f004 febf 	bl	800e5dc <__ssprint_r>
 800985e:	2800      	cmp	r0, #0
 8009860:	f43f ad24 	beq.w	80092ac <_svfprintf_r+0x5bc>
 8009864:	f7ff bb3d 	b.w	8008ee2 <_svfprintf_r+0x1f2>
 8009868:	aa23      	add	r2, sp, #140	; 0x8c
 800986a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800986c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800986e:	f004 feb5 	bl	800e5dc <__ssprint_r>
 8009872:	2800      	cmp	r0, #0
 8009874:	f47f ab35 	bne.w	8008ee2 <_svfprintf_r+0x1f2>
 8009878:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800987a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800987e:	e4b4      	b.n	80091ea <_svfprintf_r+0x4fa>
 8009880:	aa23      	add	r2, sp, #140	; 0x8c
 8009882:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009884:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009886:	f004 fea9 	bl	800e5dc <__ssprint_r>
 800988a:	2800      	cmp	r0, #0
 800988c:	f47f ab29 	bne.w	8008ee2 <_svfprintf_r+0x1f2>
 8009890:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8009892:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8009896:	e455      	b.n	8009144 <_svfprintf_r+0x454>
 8009898:	aa23      	add	r2, sp, #140	; 0x8c
 800989a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800989c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800989e:	f004 fe9d 	bl	800e5dc <__ssprint_r>
 80098a2:	2800      	cmp	r0, #0
 80098a4:	f47f ab1d 	bne.w	8008ee2 <_svfprintf_r+0x1f2>
 80098a8:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80098aa:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 80098ae:	e459      	b.n	8009164 <_svfprintf_r+0x474>
 80098b0:	f1bb 0f00 	cmp.w	fp, #0
 80098b4:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 80098b8:	f2c0 82da 	blt.w	8009e70 <_svfprintf_r+0x1180>
 80098bc:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 80098c0:	9307      	str	r3, [sp, #28]
 80098c2:	ea54 0305 	orrs.w	r3, r4, r5
 80098c6:	f47f adcb 	bne.w	8009460 <_svfprintf_r+0x770>
 80098ca:	f1bb 0f00 	cmp.w	fp, #0
 80098ce:	f43f ae8d 	beq.w	80095ec <_svfprintf_r+0x8fc>
 80098d2:	2700      	movs	r7, #0
 80098d4:	e6b8      	b.n	8009648 <_svfprintf_r+0x958>
 80098d6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80098d8:	2d00      	cmp	r5, #0
 80098da:	f340 82cc 	ble.w	8009e76 <_svfprintf_r+0x1186>
 80098de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80098e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80098e2:	4293      	cmp	r3, r2
 80098e4:	bfa8      	it	ge
 80098e6:	4613      	movge	r3, r2
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	461d      	mov	r5, r3
 80098ec:	dd0d      	ble.n	800990a <_svfprintf_r+0xc1a>
 80098ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80098f0:	f8c9 6000 	str.w	r6, [r9]
 80098f4:	3301      	adds	r3, #1
 80098f6:	442c      	add	r4, r5
 80098f8:	2b07      	cmp	r3, #7
 80098fa:	9425      	str	r4, [sp, #148]	; 0x94
 80098fc:	f8c9 5004 	str.w	r5, [r9, #4]
 8009900:	9324      	str	r3, [sp, #144]	; 0x90
 8009902:	f300 83a3 	bgt.w	800a04c <_svfprintf_r+0x135c>
 8009906:	f109 0908 	add.w	r9, r9, #8
 800990a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800990c:	2d00      	cmp	r5, #0
 800990e:	bfa8      	it	ge
 8009910:	1b5b      	subge	r3, r3, r5
 8009912:	2b00      	cmp	r3, #0
 8009914:	461d      	mov	r5, r3
 8009916:	f340 80f6 	ble.w	8009b06 <_svfprintf_r+0xe16>
 800991a:	4aba      	ldr	r2, [pc, #744]	; (8009c04 <_svfprintf_r+0xf14>)
 800991c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800991e:	920f      	str	r2, [sp, #60]	; 0x3c
 8009920:	2d10      	cmp	r5, #16
 8009922:	f340 8280 	ble.w	8009e26 <_svfprintf_r+0x1136>
 8009926:	4622      	mov	r2, r4
 8009928:	2710      	movs	r7, #16
 800992a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800992e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009930:	e005      	b.n	800993e <_svfprintf_r+0xc4e>
 8009932:	f109 0908 	add.w	r9, r9, #8
 8009936:	3d10      	subs	r5, #16
 8009938:	2d10      	cmp	r5, #16
 800993a:	f340 8273 	ble.w	8009e24 <_svfprintf_r+0x1134>
 800993e:	3301      	adds	r3, #1
 8009940:	3210      	adds	r2, #16
 8009942:	2b07      	cmp	r3, #7
 8009944:	9225      	str	r2, [sp, #148]	; 0x94
 8009946:	9324      	str	r3, [sp, #144]	; 0x90
 8009948:	f8c9 a000 	str.w	sl, [r9]
 800994c:	f8c9 7004 	str.w	r7, [r9, #4]
 8009950:	ddef      	ble.n	8009932 <_svfprintf_r+0xc42>
 8009952:	aa23      	add	r2, sp, #140	; 0x8c
 8009954:	4621      	mov	r1, r4
 8009956:	4658      	mov	r0, fp
 8009958:	f004 fe40 	bl	800e5dc <__ssprint_r>
 800995c:	2800      	cmp	r0, #0
 800995e:	f47f aac0 	bne.w	8008ee2 <_svfprintf_r+0x1f2>
 8009962:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8009964:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009966:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800996a:	e7e4      	b.n	8009936 <_svfprintf_r+0xc46>
 800996c:	aa23      	add	r2, sp, #140	; 0x8c
 800996e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009970:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009972:	f004 fe33 	bl	800e5dc <__ssprint_r>
 8009976:	2800      	cmp	r0, #0
 8009978:	f47f aab3 	bne.w	8008ee2 <_svfprintf_r+0x1f2>
 800997c:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 8009980:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8009982:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8009986:	f7ff bbcd 	b.w	8009124 <_svfprintf_r+0x434>
 800998a:	1e5e      	subs	r6, r3, #1
 800998c:	2e00      	cmp	r6, #0
 800998e:	f77f af48 	ble.w	8009822 <_svfprintf_r+0xb32>
 8009992:	4b9c      	ldr	r3, [pc, #624]	; (8009c04 <_svfprintf_r+0xf14>)
 8009994:	930f      	str	r3, [sp, #60]	; 0x3c
 8009996:	2e10      	cmp	r6, #16
 8009998:	dd2c      	ble.n	80099f4 <_svfprintf_r+0xd04>
 800999a:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 800999e:	2710      	movs	r7, #16
 80099a0:	46b0      	mov	r8, r6
 80099a2:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80099a6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80099a8:	e006      	b.n	80099b8 <_svfprintf_r+0xcc8>
 80099aa:	f1a8 0810 	sub.w	r8, r8, #16
 80099ae:	f1b8 0f10 	cmp.w	r8, #16
 80099b2:	f109 0908 	add.w	r9, r9, #8
 80099b6:	dd1a      	ble.n	80099ee <_svfprintf_r+0xcfe>
 80099b8:	3501      	adds	r5, #1
 80099ba:	3410      	adds	r4, #16
 80099bc:	2d07      	cmp	r5, #7
 80099be:	9425      	str	r4, [sp, #148]	; 0x94
 80099c0:	9524      	str	r5, [sp, #144]	; 0x90
 80099c2:	f8c9 a000 	str.w	sl, [r9]
 80099c6:	f8c9 7004 	str.w	r7, [r9, #4]
 80099ca:	ddee      	ble.n	80099aa <_svfprintf_r+0xcba>
 80099cc:	aa23      	add	r2, sp, #140	; 0x8c
 80099ce:	4631      	mov	r1, r6
 80099d0:	4658      	mov	r0, fp
 80099d2:	f004 fe03 	bl	800e5dc <__ssprint_r>
 80099d6:	2800      	cmp	r0, #0
 80099d8:	f47f aa83 	bne.w	8008ee2 <_svfprintf_r+0x1f2>
 80099dc:	f1a8 0810 	sub.w	r8, r8, #16
 80099e0:	f1b8 0f10 	cmp.w	r8, #16
 80099e4:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80099e6:	9d24      	ldr	r5, [sp, #144]	; 0x90
 80099e8:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 80099ec:	dce4      	bgt.n	80099b8 <_svfprintf_r+0xcc8>
 80099ee:	4646      	mov	r6, r8
 80099f0:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 80099f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80099f6:	3501      	adds	r5, #1
 80099f8:	4434      	add	r4, r6
 80099fa:	2d07      	cmp	r5, #7
 80099fc:	9425      	str	r4, [sp, #148]	; 0x94
 80099fe:	9524      	str	r5, [sp, #144]	; 0x90
 8009a00:	e889 0048 	stmia.w	r9, {r3, r6}
 8009a04:	f77f af0b 	ble.w	800981e <_svfprintf_r+0xb2e>
 8009a08:	aa23      	add	r2, sp, #140	; 0x8c
 8009a0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a0c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009a0e:	f004 fde5 	bl	800e5dc <__ssprint_r>
 8009a12:	2800      	cmp	r0, #0
 8009a14:	f47f aa65 	bne.w	8008ee2 <_svfprintf_r+0x1f2>
 8009a18:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8009a1a:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8009a1c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8009a20:	e6ff      	b.n	8009822 <_svfprintf_r+0xb32>
 8009a22:	9907      	ldr	r1, [sp, #28]
 8009a24:	f011 0210 	ands.w	r2, r1, #16
 8009a28:	f000 8108 	beq.w	8009c3c <_svfprintf_r+0xf4c>
 8009a2c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009a2e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8009a32:	f1bb 0f00 	cmp.w	fp, #0
 8009a36:	6804      	ldr	r4, [r0, #0]
 8009a38:	f100 0704 	add.w	r7, r0, #4
 8009a3c:	f04f 0500 	mov.w	r5, #0
 8009a40:	db26      	blt.n	8009a90 <_svfprintf_r+0xda0>
 8009a42:	460a      	mov	r2, r1
 8009a44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009a48:	9207      	str	r2, [sp, #28]
 8009a4a:	ea54 0205 	orrs.w	r2, r4, r5
 8009a4e:	970e      	str	r7, [sp, #56]	; 0x38
 8009a50:	461f      	mov	r7, r3
 8009a52:	f47f aaef 	bne.w	8009034 <_svfprintf_r+0x344>
 8009a56:	e4c8      	b.n	80093ea <_svfprintf_r+0x6fa>
 8009a58:	9b07      	ldr	r3, [sp, #28]
 8009a5a:	06d9      	lsls	r1, r3, #27
 8009a5c:	d42a      	bmi.n	8009ab4 <_svfprintf_r+0xdc4>
 8009a5e:	9b07      	ldr	r3, [sp, #28]
 8009a60:	065a      	lsls	r2, r3, #25
 8009a62:	d527      	bpl.n	8009ab4 <_svfprintf_r+0xdc4>
 8009a64:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009a66:	f9b1 4000 	ldrsh.w	r4, [r1]
 8009a6a:	3104      	adds	r1, #4
 8009a6c:	17e5      	asrs	r5, r4, #31
 8009a6e:	4622      	mov	r2, r4
 8009a70:	462b      	mov	r3, r5
 8009a72:	910e      	str	r1, [sp, #56]	; 0x38
 8009a74:	f7ff bacb 	b.w	800900e <_svfprintf_r+0x31e>
 8009a78:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009a7a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8009a7e:	f1bb 0f00 	cmp.w	fp, #0
 8009a82:	680c      	ldr	r4, [r1, #0]
 8009a84:	f101 0704 	add.w	r7, r1, #4
 8009a88:	f04f 0500 	mov.w	r5, #0
 8009a8c:	f280 8245 	bge.w	8009f1a <_svfprintf_r+0x122a>
 8009a90:	970e      	str	r7, [sp, #56]	; 0x38
 8009a92:	461f      	mov	r7, r3
 8009a94:	ea54 0305 	orrs.w	r3, r4, r5
 8009a98:	f47f aacc 	bne.w	8009034 <_svfprintf_r+0x344>
 8009a9c:	e4aa      	b.n	80093f4 <_svfprintf_r+0x704>
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009aa2:	9324      	str	r3, [sp, #144]	; 0x90
 8009aa4:	442c      	add	r4, r5
 8009aa6:	2b07      	cmp	r3, #7
 8009aa8:	9425      	str	r4, [sp, #148]	; 0x94
 8009aaa:	e889 0024 	stmia.w	r9, {r2, r5}
 8009aae:	f77f abad 	ble.w	800920c <_svfprintf_r+0x51c>
 8009ab2:	e6c3      	b.n	800983c <_svfprintf_r+0xb4c>
 8009ab4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ab6:	6814      	ldr	r4, [r2, #0]
 8009ab8:	4613      	mov	r3, r2
 8009aba:	3304      	adds	r3, #4
 8009abc:	17e5      	asrs	r5, r4, #31
 8009abe:	4622      	mov	r2, r4
 8009ac0:	930e      	str	r3, [sp, #56]	; 0x38
 8009ac2:	2a00      	cmp	r2, #0
 8009ac4:	462b      	mov	r3, r5
 8009ac6:	f173 0300 	sbcs.w	r3, r3, #0
 8009aca:	f6bf aaa5 	bge.w	8009018 <_svfprintf_r+0x328>
 8009ace:	4264      	negs	r4, r4
 8009ad0:	f04f 072d 	mov.w	r7, #45	; 0x2d
 8009ad4:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8009ad8:	f1bb 0f00 	cmp.w	fp, #0
 8009adc:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 8009ae0:	f6ff aaa8 	blt.w	8009034 <_svfprintf_r+0x344>
 8009ae4:	9b07      	ldr	r3, [sp, #28]
 8009ae6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009aea:	9307      	str	r3, [sp, #28]
 8009aec:	f7ff baa2 	b.w	8009034 <_svfprintf_r+0x344>
 8009af0:	aa23      	add	r2, sp, #140	; 0x8c
 8009af2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009af4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009af6:	f004 fd71 	bl	800e5dc <__ssprint_r>
 8009afa:	2800      	cmp	r0, #0
 8009afc:	f47f a9f1 	bne.w	8008ee2 <_svfprintf_r+0x1f2>
 8009b00:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8009b02:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8009b06:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009b08:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009b0a:	4432      	add	r2, r6
 8009b0c:	4617      	mov	r7, r2
 8009b0e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009b10:	4293      	cmp	r3, r2
 8009b12:	db47      	blt.n	8009ba4 <_svfprintf_r+0xeb4>
 8009b14:	9a07      	ldr	r2, [sp, #28]
 8009b16:	07d5      	lsls	r5, r2, #31
 8009b18:	d444      	bmi.n	8009ba4 <_svfprintf_r+0xeb4>
 8009b1a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009b1c:	440e      	add	r6, r1
 8009b1e:	1bf5      	subs	r5, r6, r7
 8009b20:	1acb      	subs	r3, r1, r3
 8009b22:	429d      	cmp	r5, r3
 8009b24:	bfa8      	it	ge
 8009b26:	461d      	movge	r5, r3
 8009b28:	2d00      	cmp	r5, #0
 8009b2a:	462e      	mov	r6, r5
 8009b2c:	dd0d      	ble.n	8009b4a <_svfprintf_r+0xe5a>
 8009b2e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009b30:	f8c9 7000 	str.w	r7, [r9]
 8009b34:	3201      	adds	r2, #1
 8009b36:	442c      	add	r4, r5
 8009b38:	2a07      	cmp	r2, #7
 8009b3a:	9425      	str	r4, [sp, #148]	; 0x94
 8009b3c:	f8c9 5004 	str.w	r5, [r9, #4]
 8009b40:	9224      	str	r2, [sp, #144]	; 0x90
 8009b42:	f300 8312 	bgt.w	800a16a <_svfprintf_r+0x147a>
 8009b46:	f109 0908 	add.w	r9, r9, #8
 8009b4a:	2e00      	cmp	r6, #0
 8009b4c:	bfac      	ite	ge
 8009b4e:	1b9d      	subge	r5, r3, r6
 8009b50:	461d      	movlt	r5, r3
 8009b52:	2d00      	cmp	r5, #0
 8009b54:	f77f ab5c 	ble.w	8009210 <_svfprintf_r+0x520>
 8009b58:	4a2a      	ldr	r2, [pc, #168]	; (8009c04 <_svfprintf_r+0xf14>)
 8009b5a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009b5c:	920f      	str	r2, [sp, #60]	; 0x3c
 8009b5e:	2d10      	cmp	r5, #16
 8009b60:	dd9d      	ble.n	8009a9e <_svfprintf_r+0xdae>
 8009b62:	2610      	movs	r6, #16
 8009b64:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8009b66:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8009b6a:	e004      	b.n	8009b76 <_svfprintf_r+0xe86>
 8009b6c:	f109 0908 	add.w	r9, r9, #8
 8009b70:	3d10      	subs	r5, #16
 8009b72:	2d10      	cmp	r5, #16
 8009b74:	dd93      	ble.n	8009a9e <_svfprintf_r+0xdae>
 8009b76:	3301      	adds	r3, #1
 8009b78:	3410      	adds	r4, #16
 8009b7a:	2b07      	cmp	r3, #7
 8009b7c:	9425      	str	r4, [sp, #148]	; 0x94
 8009b7e:	9324      	str	r3, [sp, #144]	; 0x90
 8009b80:	f8c9 a000 	str.w	sl, [r9]
 8009b84:	f8c9 6004 	str.w	r6, [r9, #4]
 8009b88:	ddf0      	ble.n	8009b6c <_svfprintf_r+0xe7c>
 8009b8a:	aa23      	add	r2, sp, #140	; 0x8c
 8009b8c:	4659      	mov	r1, fp
 8009b8e:	4638      	mov	r0, r7
 8009b90:	f004 fd24 	bl	800e5dc <__ssprint_r>
 8009b94:	2800      	cmp	r0, #0
 8009b96:	f47f a9a4 	bne.w	8008ee2 <_svfprintf_r+0x1f2>
 8009b9a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8009b9c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009b9e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8009ba2:	e7e5      	b.n	8009b70 <_svfprintf_r+0xe80>
 8009ba4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009ba6:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009ba8:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8009baa:	f8c9 1000 	str.w	r1, [r9]
 8009bae:	3201      	adds	r2, #1
 8009bb0:	4404      	add	r4, r0
 8009bb2:	2a07      	cmp	r2, #7
 8009bb4:	9425      	str	r4, [sp, #148]	; 0x94
 8009bb6:	f8c9 0004 	str.w	r0, [r9, #4]
 8009bba:	9224      	str	r2, [sp, #144]	; 0x90
 8009bbc:	f300 82a5 	bgt.w	800a10a <_svfprintf_r+0x141a>
 8009bc0:	f109 0908 	add.w	r9, r9, #8
 8009bc4:	e7a9      	b.n	8009b1a <_svfprintf_r+0xe2a>
 8009bc6:	9b07      	ldr	r3, [sp, #28]
 8009bc8:	07d8      	lsls	r0, r3, #31
 8009bca:	f53f adf4 	bmi.w	80097b6 <_svfprintf_r+0xac6>
 8009bce:	3501      	adds	r5, #1
 8009bd0:	3401      	adds	r4, #1
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	2d07      	cmp	r5, #7
 8009bd6:	9425      	str	r4, [sp, #148]	; 0x94
 8009bd8:	9524      	str	r5, [sp, #144]	; 0x90
 8009bda:	f8c9 6000 	str.w	r6, [r9]
 8009bde:	f8c9 3004 	str.w	r3, [r9, #4]
 8009be2:	f77f ae1c 	ble.w	800981e <_svfprintf_r+0xb2e>
 8009be6:	e70f      	b.n	8009a08 <_svfprintf_r+0xd18>
 8009be8:	aa23      	add	r2, sp, #140	; 0x8c
 8009bea:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009bec:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009bee:	f004 fcf5 	bl	800e5dc <__ssprint_r>
 8009bf2:	2800      	cmp	r0, #0
 8009bf4:	f47f a975 	bne.w	8008ee2 <_svfprintf_r+0x1f2>
 8009bf8:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8009bfa:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8009bfc:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8009c00:	e5e7      	b.n	80097d2 <_svfprintf_r+0xae2>
 8009c02:	bf00      	nop
 8009c04:	0800f234 	.word	0x0800f234
 8009c08:	aa23      	add	r2, sp, #140	; 0x8c
 8009c0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c0c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009c0e:	f004 fce5 	bl	800e5dc <__ssprint_r>
 8009c12:	2800      	cmp	r0, #0
 8009c14:	f47f a965 	bne.w	8008ee2 <_svfprintf_r+0x1f2>
 8009c18:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8009c1a:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8009c1c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8009c20:	e5e6      	b.n	80097f0 <_svfprintf_r+0xb00>
 8009c22:	aa23      	add	r2, sp, #140	; 0x8c
 8009c24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c26:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009c28:	f004 fcd8 	bl	800e5dc <__ssprint_r>
 8009c2c:	2800      	cmp	r0, #0
 8009c2e:	f47f a958 	bne.w	8008ee2 <_svfprintf_r+0x1f2>
 8009c32:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8009c34:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8009c38:	f7ff ba98 	b.w	800916c <_svfprintf_r+0x47c>
 8009c3c:	9907      	ldr	r1, [sp, #28]
 8009c3e:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 8009c42:	f43f af19 	beq.w	8009a78 <_svfprintf_r+0xd88>
 8009c46:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009c48:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	f1bb 0f00 	cmp.w	fp, #0
 8009c52:	f103 0304 	add.w	r3, r3, #4
 8009c56:	8804      	ldrh	r4, [r0, #0]
 8009c58:	f04f 0500 	mov.w	r5, #0
 8009c5c:	f2c0 81b9 	blt.w	8009fd2 <_svfprintf_r+0x12e2>
 8009c60:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009c64:	9107      	str	r1, [sp, #28]
 8009c66:	ea54 0105 	orrs.w	r1, r4, r5
 8009c6a:	930e      	str	r3, [sp, #56]	; 0x38
 8009c6c:	4617      	mov	r7, r2
 8009c6e:	f47f a9e1 	bne.w	8009034 <_svfprintf_r+0x344>
 8009c72:	f7ff bbba 	b.w	80093ea <_svfprintf_r+0x6fa>
 8009c76:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8009c78:	4622      	mov	r2, r4
 8009c7a:	4620      	mov	r0, r4
 8009c7c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8009c7e:	4623      	mov	r3, r4
 8009c80:	4621      	mov	r1, r4
 8009c82:	f7f7 fa7d 	bl	8001180 <__aeabi_dcmpun>
 8009c86:	2800      	cmp	r0, #0
 8009c88:	f040 8315 	bne.w	800a2b6 <_svfprintf_r+0x15c6>
 8009c8c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c8e:	f1bb 3fff 	cmp.w	fp, #4294967295
 8009c92:	f023 0320 	bic.w	r3, r3, #32
 8009c96:	930d      	str	r3, [sp, #52]	; 0x34
 8009c98:	f000 8276 	beq.w	800a188 <_svfprintf_r+0x1498>
 8009c9c:	2b47      	cmp	r3, #71	; 0x47
 8009c9e:	f000 8192 	beq.w	8009fc6 <_svfprintf_r+0x12d6>
 8009ca2:	9b07      	ldr	r3, [sp, #28]
 8009ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ca8:	9310      	str	r3, [sp, #64]	; 0x40
 8009caa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009cac:	1e1f      	subs	r7, r3, #0
 8009cae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009cb0:	9308      	str	r3, [sp, #32]
 8009cb2:	bfbb      	ittet	lt
 8009cb4:	463b      	movlt	r3, r7
 8009cb6:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
 8009cba:	2300      	movge	r3, #0
 8009cbc:	232d      	movlt	r3, #45	; 0x2d
 8009cbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8009cc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009cc2:	2b66      	cmp	r3, #102	; 0x66
 8009cc4:	f000 8263 	beq.w	800a18e <_svfprintf_r+0x149e>
 8009cc8:	2b46      	cmp	r3, #70	; 0x46
 8009cca:	f000 815e 	beq.w	8009f8a <_svfprintf_r+0x129a>
 8009cce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009cd0:	9a08      	ldr	r2, [sp, #32]
 8009cd2:	2b45      	cmp	r3, #69	; 0x45
 8009cd4:	a821      	add	r0, sp, #132	; 0x84
 8009cd6:	a91e      	add	r1, sp, #120	; 0x78
 8009cd8:	bf0c      	ite	eq
 8009cda:	f10b 0501 	addeq.w	r5, fp, #1
 8009cde:	465d      	movne	r5, fp
 8009ce0:	9004      	str	r0, [sp, #16]
 8009ce2:	9103      	str	r1, [sp, #12]
 8009ce4:	a81d      	add	r0, sp, #116	; 0x74
 8009ce6:	2102      	movs	r1, #2
 8009ce8:	463b      	mov	r3, r7
 8009cea:	9002      	str	r0, [sp, #8]
 8009cec:	9501      	str	r5, [sp, #4]
 8009cee:	9100      	str	r1, [sp, #0]
 8009cf0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009cf2:	f002 f805 	bl	800bd00 <_dtoa_r>
 8009cf6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009cf8:	2b67      	cmp	r3, #103	; 0x67
 8009cfa:	4606      	mov	r6, r0
 8009cfc:	f040 827d 	bne.w	800a1fa <_svfprintf_r+0x150a>
 8009d00:	9b07      	ldr	r3, [sp, #28]
 8009d02:	07da      	lsls	r2, r3, #31
 8009d04:	f140 82bf 	bpl.w	800a286 <_svfprintf_r+0x1596>
 8009d08:	1974      	adds	r4, r6, r5
 8009d0a:	9808      	ldr	r0, [sp, #32]
 8009d0c:	4639      	mov	r1, r7
 8009d0e:	2200      	movs	r2, #0
 8009d10:	2300      	movs	r3, #0
 8009d12:	f7f6 ff1b 	bl	8000b4c <__aeabi_dcmpeq>
 8009d16:	2800      	cmp	r0, #0
 8009d18:	f040 81a4 	bne.w	800a064 <_svfprintf_r+0x1374>
 8009d1c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d1e:	429c      	cmp	r4, r3
 8009d20:	d906      	bls.n	8009d30 <_svfprintf_r+0x1040>
 8009d22:	2130      	movs	r1, #48	; 0x30
 8009d24:	1c5a      	adds	r2, r3, #1
 8009d26:	9221      	str	r2, [sp, #132]	; 0x84
 8009d28:	7019      	strb	r1, [r3, #0]
 8009d2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d2c:	429c      	cmp	r4, r3
 8009d2e:	d8f9      	bhi.n	8009d24 <_svfprintf_r+0x1034>
 8009d30:	1b9b      	subs	r3, r3, r6
 8009d32:	9312      	str	r3, [sp, #72]	; 0x48
 8009d34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d36:	2b47      	cmp	r3, #71	; 0x47
 8009d38:	f000 8181 	beq.w	800a03e <_svfprintf_r+0x134e>
 8009d3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d3e:	2b65      	cmp	r3, #101	; 0x65
 8009d40:	f340 826a 	ble.w	800a218 <_svfprintf_r+0x1528>
 8009d44:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d46:	2b66      	cmp	r3, #102	; 0x66
 8009d48:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009d4a:	9313      	str	r3, [sp, #76]	; 0x4c
 8009d4c:	f000 8247 	beq.w	800a1de <_svfprintf_r+0x14ee>
 8009d50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009d52:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009d54:	428a      	cmp	r2, r1
 8009d56:	f2c0 8236 	blt.w	800a1c6 <_svfprintf_r+0x14d6>
 8009d5a:	9b07      	ldr	r3, [sp, #28]
 8009d5c:	07d9      	lsls	r1, r3, #31
 8009d5e:	f100 8289 	bmi.w	800a274 <_svfprintf_r+0x1584>
 8009d62:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009d66:	920d      	str	r2, [sp, #52]	; 0x34
 8009d68:	2267      	movs	r2, #103	; 0x67
 8009d6a:	9211      	str	r2, [sp, #68]	; 0x44
 8009d6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009d6e:	2a00      	cmp	r2, #0
 8009d70:	f040 815b 	bne.w	800a02a <_svfprintf_r+0x133a>
 8009d74:	9308      	str	r3, [sp, #32]
 8009d76:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009d78:	9307      	str	r3, [sp, #28]
 8009d7a:	4693      	mov	fp, r2
 8009d7c:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 8009d80:	f7ff b97c 	b.w	800907c <_svfprintf_r+0x38c>
 8009d84:	9b07      	ldr	r3, [sp, #28]
 8009d86:	06df      	lsls	r7, r3, #27
 8009d88:	d40b      	bmi.n	8009da2 <_svfprintf_r+0x10b2>
 8009d8a:	9b07      	ldr	r3, [sp, #28]
 8009d8c:	065e      	lsls	r6, r3, #25
 8009d8e:	d508      	bpl.n	8009da2 <_svfprintf_r+0x10b2>
 8009d90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d92:	6813      	ldr	r3, [r2, #0]
 8009d94:	3204      	adds	r2, #4
 8009d96:	920e      	str	r2, [sp, #56]	; 0x38
 8009d98:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8009d9c:	801a      	strh	r2, [r3, #0]
 8009d9e:	f7fe bfcd 	b.w	8008d3c <_svfprintf_r+0x4c>
 8009da2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009da4:	6813      	ldr	r3, [r2, #0]
 8009da6:	3204      	adds	r2, #4
 8009da8:	920e      	str	r2, [sp, #56]	; 0x38
 8009daa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009dac:	601a      	str	r2, [r3, #0]
 8009dae:	f7fe bfc5 	b.w	8008d3c <_svfprintf_r+0x4c>
 8009db2:	9b07      	ldr	r3, [sp, #28]
 8009db4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009db6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009dba:	4613      	mov	r3, r2
 8009dbc:	f000 810e 	beq.w	8009fdc <_svfprintf_r+0x12ec>
 8009dc0:	3304      	adds	r3, #4
 8009dc2:	8814      	ldrh	r4, [r2, #0]
 8009dc4:	930e      	str	r3, [sp, #56]	; 0x38
 8009dc6:	2500      	movs	r5, #0
 8009dc8:	f7ff bb2c 	b.w	8009424 <_svfprintf_r+0x734>
 8009dcc:	9907      	ldr	r1, [sp, #28]
 8009dce:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 8009dd2:	d017      	beq.n	8009e04 <_svfprintf_r+0x1114>
 8009dd4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009dd6:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
 8009dda:	4603      	mov	r3, r0
 8009ddc:	f1bb 0f00 	cmp.w	fp, #0
 8009de0:	f103 0304 	add.w	r3, r3, #4
 8009de4:	8804      	ldrh	r4, [r0, #0]
 8009de6:	f04f 0500 	mov.w	r5, #0
 8009dea:	f2c0 80f5 	blt.w	8009fd8 <_svfprintf_r+0x12e8>
 8009dee:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009df2:	9107      	str	r1, [sp, #28]
 8009df4:	ea54 0105 	orrs.w	r1, r4, r5
 8009df8:	930e      	str	r3, [sp, #56]	; 0x38
 8009dfa:	f43f ac13 	beq.w	8009624 <_svfprintf_r+0x934>
 8009dfe:	4617      	mov	r7, r2
 8009e00:	f7ff b89b 	b.w	8008f3a <_svfprintf_r+0x24a>
 8009e04:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009e06:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8009e0a:	f1bb 0f00 	cmp.w	fp, #0
 8009e0e:	680c      	ldr	r4, [r1, #0]
 8009e10:	f101 0704 	add.w	r7, r1, #4
 8009e14:	f04f 0500 	mov.w	r5, #0
 8009e18:	f280 8081 	bge.w	8009f1e <_svfprintf_r+0x122e>
 8009e1c:	970e      	str	r7, [sp, #56]	; 0x38
 8009e1e:	2700      	movs	r7, #0
 8009e20:	f7ff b88b 	b.w	8008f3a <_svfprintf_r+0x24a>
 8009e24:	4614      	mov	r4, r2
 8009e26:	3301      	adds	r3, #1
 8009e28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009e2a:	9324      	str	r3, [sp, #144]	; 0x90
 8009e2c:	442c      	add	r4, r5
 8009e2e:	2b07      	cmp	r3, #7
 8009e30:	9425      	str	r4, [sp, #148]	; 0x94
 8009e32:	e889 0024 	stmia.w	r9, {r2, r5}
 8009e36:	f73f ae5b 	bgt.w	8009af0 <_svfprintf_r+0xe00>
 8009e3a:	f109 0908 	add.w	r9, r9, #8
 8009e3e:	e662      	b.n	8009b06 <_svfprintf_r+0xe16>
 8009e40:	2700      	movs	r7, #0
 8009e42:	45bb      	cmp	fp, r7
 8009e44:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 8009e48:	f6ff abfe 	blt.w	8009648 <_svfprintf_r+0x958>
 8009e4c:	9b07      	ldr	r3, [sp, #28]
 8009e4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e52:	9307      	str	r3, [sp, #28]
 8009e54:	f7ff bbc6 	b.w	80095e4 <_svfprintf_r+0x8f4>
 8009e58:	aa23      	add	r2, sp, #140	; 0x8c
 8009e5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e5c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009e5e:	f004 fbbd 	bl	800e5dc <__ssprint_r>
 8009e62:	2800      	cmp	r0, #0
 8009e64:	f47f a83d 	bne.w	8008ee2 <_svfprintf_r+0x1f2>
 8009e68:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8009e6a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8009e6e:	e40d      	b.n	800968c <_svfprintf_r+0x99c>
 8009e70:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8009e72:	f7ff bbe2 	b.w	800963a <_svfprintf_r+0x94a>
 8009e76:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009e78:	4ab1      	ldr	r2, [pc, #708]	; (800a140 <_svfprintf_r+0x1450>)
 8009e7a:	f8c9 2000 	str.w	r2, [r9]
 8009e7e:	3301      	adds	r3, #1
 8009e80:	3401      	adds	r4, #1
 8009e82:	2201      	movs	r2, #1
 8009e84:	2b07      	cmp	r3, #7
 8009e86:	9425      	str	r4, [sp, #148]	; 0x94
 8009e88:	9324      	str	r3, [sp, #144]	; 0x90
 8009e8a:	f8c9 2004 	str.w	r2, [r9, #4]
 8009e8e:	dc6f      	bgt.n	8009f70 <_svfprintf_r+0x1280>
 8009e90:	f109 0908 	add.w	r9, r9, #8
 8009e94:	b92d      	cbnz	r5, 8009ea2 <_svfprintf_r+0x11b2>
 8009e96:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e98:	b91b      	cbnz	r3, 8009ea2 <_svfprintf_r+0x11b2>
 8009e9a:	9b07      	ldr	r3, [sp, #28]
 8009e9c:	07df      	lsls	r7, r3, #31
 8009e9e:	f57f a9b7 	bpl.w	8009210 <_svfprintf_r+0x520>
 8009ea2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009ea4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009ea6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009ea8:	f8c9 2000 	str.w	r2, [r9]
 8009eac:	3301      	adds	r3, #1
 8009eae:	440c      	add	r4, r1
 8009eb0:	2b07      	cmp	r3, #7
 8009eb2:	9425      	str	r4, [sp, #148]	; 0x94
 8009eb4:	f8c9 1004 	str.w	r1, [r9, #4]
 8009eb8:	9324      	str	r3, [sp, #144]	; 0x90
 8009eba:	f300 81c9 	bgt.w	800a250 <_svfprintf_r+0x1560>
 8009ebe:	f109 0908 	add.w	r9, r9, #8
 8009ec2:	426d      	negs	r5, r5
 8009ec4:	2d00      	cmp	r5, #0
 8009ec6:	f340 80a3 	ble.w	800a010 <_svfprintf_r+0x1320>
 8009eca:	4a9e      	ldr	r2, [pc, #632]	; (800a144 <_svfprintf_r+0x1454>)
 8009ecc:	920f      	str	r2, [sp, #60]	; 0x3c
 8009ece:	2d10      	cmp	r5, #16
 8009ed0:	f340 8129 	ble.w	800a126 <_svfprintf_r+0x1436>
 8009ed4:	4622      	mov	r2, r4
 8009ed6:	2710      	movs	r7, #16
 8009ed8:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8009edc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009ede:	e005      	b.n	8009eec <_svfprintf_r+0x11fc>
 8009ee0:	f109 0908 	add.w	r9, r9, #8
 8009ee4:	3d10      	subs	r5, #16
 8009ee6:	2d10      	cmp	r5, #16
 8009ee8:	f340 811c 	ble.w	800a124 <_svfprintf_r+0x1434>
 8009eec:	3301      	adds	r3, #1
 8009eee:	3210      	adds	r2, #16
 8009ef0:	2b07      	cmp	r3, #7
 8009ef2:	9225      	str	r2, [sp, #148]	; 0x94
 8009ef4:	9324      	str	r3, [sp, #144]	; 0x90
 8009ef6:	f8c9 a000 	str.w	sl, [r9]
 8009efa:	f8c9 7004 	str.w	r7, [r9, #4]
 8009efe:	ddef      	ble.n	8009ee0 <_svfprintf_r+0x11f0>
 8009f00:	aa23      	add	r2, sp, #140	; 0x8c
 8009f02:	4621      	mov	r1, r4
 8009f04:	4658      	mov	r0, fp
 8009f06:	f004 fb69 	bl	800e5dc <__ssprint_r>
 8009f0a:	2800      	cmp	r0, #0
 8009f0c:	f47e afe9 	bne.w	8008ee2 <_svfprintf_r+0x1f2>
 8009f10:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8009f12:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009f14:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8009f18:	e7e4      	b.n	8009ee4 <_svfprintf_r+0x11f4>
 8009f1a:	9a07      	ldr	r2, [sp, #28]
 8009f1c:	e592      	b.n	8009a44 <_svfprintf_r+0xd54>
 8009f1e:	9a07      	ldr	r2, [sp, #28]
 8009f20:	f7ff ba35 	b.w	800938e <_svfprintf_r+0x69e>
 8009f24:	9b07      	ldr	r3, [sp, #28]
 8009f26:	f043 0320 	orr.w	r3, r3, #32
 8009f2a:	9307      	str	r3, [sp, #28]
 8009f2c:	f108 0801 	add.w	r8, r8, #1
 8009f30:	f898 3000 	ldrb.w	r3, [r8]
 8009f34:	f7fe bf35 	b.w	8008da2 <_svfprintf_r+0xb2>
 8009f38:	aa23      	add	r2, sp, #140	; 0x8c
 8009f3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f3c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009f3e:	f004 fb4d 	bl	800e5dc <__ssprint_r>
 8009f42:	2800      	cmp	r0, #0
 8009f44:	f47e afcd 	bne.w	8008ee2 <_svfprintf_r+0x1f2>
 8009f48:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8009f4a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8009f4e:	f7ff bbb5 	b.w	80096bc <_svfprintf_r+0x9cc>
 8009f52:	2140      	movs	r1, #64	; 0x40
 8009f54:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009f56:	f003 fab7 	bl	800d4c8 <_malloc_r>
 8009f5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f5c:	6010      	str	r0, [r2, #0]
 8009f5e:	6110      	str	r0, [r2, #16]
 8009f60:	2800      	cmp	r0, #0
 8009f62:	f000 81f3 	beq.w	800a34c <_svfprintf_r+0x165c>
 8009f66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f68:	2340      	movs	r3, #64	; 0x40
 8009f6a:	6153      	str	r3, [r2, #20]
 8009f6c:	f7fe bed7 	b.w	8008d1e <_svfprintf_r+0x2e>
 8009f70:	aa23      	add	r2, sp, #140	; 0x8c
 8009f72:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f74:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009f76:	f004 fb31 	bl	800e5dc <__ssprint_r>
 8009f7a:	2800      	cmp	r0, #0
 8009f7c:	f47e afb1 	bne.w	8008ee2 <_svfprintf_r+0x1f2>
 8009f80:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8009f82:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8009f84:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8009f88:	e784      	b.n	8009e94 <_svfprintf_r+0x11a4>
 8009f8a:	a821      	add	r0, sp, #132	; 0x84
 8009f8c:	a91e      	add	r1, sp, #120	; 0x78
 8009f8e:	9004      	str	r0, [sp, #16]
 8009f90:	9103      	str	r1, [sp, #12]
 8009f92:	a81d      	add	r0, sp, #116	; 0x74
 8009f94:	2103      	movs	r1, #3
 8009f96:	9002      	str	r0, [sp, #8]
 8009f98:	9a08      	ldr	r2, [sp, #32]
 8009f9a:	f8cd b004 	str.w	fp, [sp, #4]
 8009f9e:	463b      	mov	r3, r7
 8009fa0:	9100      	str	r1, [sp, #0]
 8009fa2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009fa4:	f001 feac 	bl	800bd00 <_dtoa_r>
 8009fa8:	465d      	mov	r5, fp
 8009faa:	4606      	mov	r6, r0
 8009fac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009fae:	2b46      	cmp	r3, #70	; 0x46
 8009fb0:	eb06 0405 	add.w	r4, r6, r5
 8009fb4:	f47f aea9 	bne.w	8009d0a <_svfprintf_r+0x101a>
 8009fb8:	7833      	ldrb	r3, [r6, #0]
 8009fba:	2b30      	cmp	r3, #48	; 0x30
 8009fbc:	f000 816d 	beq.w	800a29a <_svfprintf_r+0x15aa>
 8009fc0:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8009fc2:	442c      	add	r4, r5
 8009fc4:	e6a1      	b.n	8009d0a <_svfprintf_r+0x101a>
 8009fc6:	f1bb 0f00 	cmp.w	fp, #0
 8009fca:	bf08      	it	eq
 8009fcc:	f04f 0b01 	moveq.w	fp, #1
 8009fd0:	e667      	b.n	8009ca2 <_svfprintf_r+0xfb2>
 8009fd2:	930e      	str	r3, [sp, #56]	; 0x38
 8009fd4:	4617      	mov	r7, r2
 8009fd6:	e55d      	b.n	8009a94 <_svfprintf_r+0xda4>
 8009fd8:	930e      	str	r3, [sp, #56]	; 0x38
 8009fda:	e720      	b.n	8009e1e <_svfprintf_r+0x112e>
 8009fdc:	3304      	adds	r3, #4
 8009fde:	6814      	ldr	r4, [r2, #0]
 8009fe0:	930e      	str	r3, [sp, #56]	; 0x38
 8009fe2:	2500      	movs	r5, #0
 8009fe4:	f7ff ba1e 	b.w	8009424 <_svfprintf_r+0x734>
 8009fe8:	4630      	mov	r0, r6
 8009fea:	f7f7 f809 	bl	8001000 <strlen>
 8009fee:	46a3      	mov	fp, r4
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	900d      	str	r0, [sp, #52]	; 0x34
 8009ff4:	f7ff baeb 	b.w	80095ce <_svfprintf_r+0x8de>
 8009ff8:	aa23      	add	r2, sp, #140	; 0x8c
 8009ffa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ffc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009ffe:	f004 faed 	bl	800e5dc <__ssprint_r>
 800a002:	2800      	cmp	r0, #0
 800a004:	f47e af6d 	bne.w	8008ee2 <_svfprintf_r+0x1f2>
 800a008:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800a00a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a00c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a010:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a012:	f8c9 6000 	str.w	r6, [r9]
 800a016:	3301      	adds	r3, #1
 800a018:	440c      	add	r4, r1
 800a01a:	2b07      	cmp	r3, #7
 800a01c:	9425      	str	r4, [sp, #148]	; 0x94
 800a01e:	9324      	str	r3, [sp, #144]	; 0x90
 800a020:	f8c9 1004 	str.w	r1, [r9, #4]
 800a024:	f77f a8f2 	ble.w	800920c <_svfprintf_r+0x51c>
 800a028:	e408      	b.n	800983c <_svfprintf_r+0xb4c>
 800a02a:	272d      	movs	r7, #45	; 0x2d
 800a02c:	9308      	str	r3, [sp, #32]
 800a02e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a030:	9307      	str	r3, [sp, #28]
 800a032:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800a036:	f04f 0b00 	mov.w	fp, #0
 800a03a:	f7ff b820 	b.w	800907e <_svfprintf_r+0x38e>
 800a03e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a040:	1cdd      	adds	r5, r3, #3
 800a042:	db11      	blt.n	800a068 <_svfprintf_r+0x1378>
 800a044:	459b      	cmp	fp, r3
 800a046:	db0f      	blt.n	800a068 <_svfprintf_r+0x1378>
 800a048:	9313      	str	r3, [sp, #76]	; 0x4c
 800a04a:	e681      	b.n	8009d50 <_svfprintf_r+0x1060>
 800a04c:	aa23      	add	r2, sp, #140	; 0x8c
 800a04e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a050:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a052:	f004 fac3 	bl	800e5dc <__ssprint_r>
 800a056:	2800      	cmp	r0, #0
 800a058:	f47e af43 	bne.w	8008ee2 <_svfprintf_r+0x1f2>
 800a05c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800a05e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a062:	e452      	b.n	800990a <_svfprintf_r+0xc1a>
 800a064:	4623      	mov	r3, r4
 800a066:	e663      	b.n	8009d30 <_svfprintf_r+0x1040>
 800a068:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a06a:	3a02      	subs	r2, #2
 800a06c:	9211      	str	r2, [sp, #68]	; 0x44
 800a06e:	3b01      	subs	r3, #1
 800a070:	2b00      	cmp	r3, #0
 800a072:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800a076:	931d      	str	r3, [sp, #116]	; 0x74
 800a078:	bfb8      	it	lt
 800a07a:	425b      	neglt	r3, r3
 800a07c:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
 800a080:	bfb4      	ite	lt
 800a082:	222d      	movlt	r2, #45	; 0x2d
 800a084:	222b      	movge	r2, #43	; 0x2b
 800a086:	2b09      	cmp	r3, #9
 800a088:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
 800a08c:	f340 80fd 	ble.w	800a28a <_svfprintf_r+0x159a>
 800a090:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
 800a094:	4604      	mov	r4, r0
 800a096:	4a2c      	ldr	r2, [pc, #176]	; (800a148 <_svfprintf_r+0x1458>)
 800a098:	fb82 2103 	smull	r2, r1, r2, r3
 800a09c:	17da      	asrs	r2, r3, #31
 800a09e:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 800a0a2:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800a0a6:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 800a0aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a0ae:	2a09      	cmp	r2, #9
 800a0b0:	4613      	mov	r3, r2
 800a0b2:	f804 1d01 	strb.w	r1, [r4, #-1]!
 800a0b6:	dcee      	bgt.n	800a096 <_svfprintf_r+0x13a6>
 800a0b8:	4621      	mov	r1, r4
 800a0ba:	3330      	adds	r3, #48	; 0x30
 800a0bc:	b2da      	uxtb	r2, r3
 800a0be:	f801 2d01 	strb.w	r2, [r1, #-1]!
 800a0c2:	4288      	cmp	r0, r1
 800a0c4:	f240 813f 	bls.w	800a346 <_svfprintf_r+0x1656>
 800a0c8:	f10d 017e 	add.w	r1, sp, #126	; 0x7e
 800a0cc:	4623      	mov	r3, r4
 800a0ce:	e001      	b.n	800a0d4 <_svfprintf_r+0x13e4>
 800a0d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0d4:	f801 2b01 	strb.w	r2, [r1], #1
 800a0d8:	4298      	cmp	r0, r3
 800a0da:	d1f9      	bne.n	800a0d0 <_svfprintf_r+0x13e0>
 800a0dc:	1c43      	adds	r3, r0, #1
 800a0de:	1b1b      	subs	r3, r3, r4
 800a0e0:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
 800a0e4:	4413      	add	r3, r2
 800a0e6:	aa1f      	add	r2, sp, #124	; 0x7c
 800a0e8:	1a9b      	subs	r3, r3, r2
 800a0ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a0ec:	9319      	str	r3, [sp, #100]	; 0x64
 800a0ee:	2a01      	cmp	r2, #1
 800a0f0:	4413      	add	r3, r2
 800a0f2:	930d      	str	r3, [sp, #52]	; 0x34
 800a0f4:	f340 80f6 	ble.w	800a2e4 <_svfprintf_r+0x15f4>
 800a0f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0fa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a0fc:	4413      	add	r3, r2
 800a0fe:	2200      	movs	r2, #0
 800a100:	930d      	str	r3, [sp, #52]	; 0x34
 800a102:	9213      	str	r2, [sp, #76]	; 0x4c
 800a104:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a108:	e630      	b.n	8009d6c <_svfprintf_r+0x107c>
 800a10a:	aa23      	add	r2, sp, #140	; 0x8c
 800a10c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a10e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a110:	f004 fa64 	bl	800e5dc <__ssprint_r>
 800a114:	2800      	cmp	r0, #0
 800a116:	f47e aee4 	bne.w	8008ee2 <_svfprintf_r+0x1f2>
 800a11a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a11c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800a11e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a122:	e4fa      	b.n	8009b1a <_svfprintf_r+0xe2a>
 800a124:	4614      	mov	r4, r2
 800a126:	3301      	adds	r3, #1
 800a128:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a12a:	9324      	str	r3, [sp, #144]	; 0x90
 800a12c:	442c      	add	r4, r5
 800a12e:	2b07      	cmp	r3, #7
 800a130:	9425      	str	r4, [sp, #148]	; 0x94
 800a132:	e889 0024 	stmia.w	r9, {r2, r5}
 800a136:	f73f af5f 	bgt.w	8009ff8 <_svfprintf_r+0x1308>
 800a13a:	f109 0908 	add.w	r9, r9, #8
 800a13e:	e767      	b.n	800a010 <_svfprintf_r+0x1320>
 800a140:	0800f284 	.word	0x0800f284
 800a144:	0800f234 	.word	0x0800f234
 800a148:	66666667 	.word	0x66666667
 800a14c:	2d06      	cmp	r5, #6
 800a14e:	462b      	mov	r3, r5
 800a150:	bf28      	it	cs
 800a152:	2306      	movcs	r3, #6
 800a154:	930d      	str	r3, [sp, #52]	; 0x34
 800a156:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a15a:	46b3      	mov	fp, r6
 800a15c:	970e      	str	r7, [sp, #56]	; 0x38
 800a15e:	9613      	str	r6, [sp, #76]	; 0x4c
 800a160:	4637      	mov	r7, r6
 800a162:	9308      	str	r3, [sp, #32]
 800a164:	4e8b      	ldr	r6, [pc, #556]	; (800a394 <_svfprintf_r+0x16a4>)
 800a166:	f7fe bf89 	b.w	800907c <_svfprintf_r+0x38c>
 800a16a:	aa23      	add	r2, sp, #140	; 0x8c
 800a16c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a16e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a170:	f004 fa34 	bl	800e5dc <__ssprint_r>
 800a174:	2800      	cmp	r0, #0
 800a176:	f47e aeb4 	bne.w	8008ee2 <_svfprintf_r+0x1f2>
 800a17a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a17c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a17e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800a180:	1ad3      	subs	r3, r2, r3
 800a182:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a186:	e4e0      	b.n	8009b4a <_svfprintf_r+0xe5a>
 800a188:	f04f 0b06 	mov.w	fp, #6
 800a18c:	e589      	b.n	8009ca2 <_svfprintf_r+0xfb2>
 800a18e:	a821      	add	r0, sp, #132	; 0x84
 800a190:	a91e      	add	r1, sp, #120	; 0x78
 800a192:	9004      	str	r0, [sp, #16]
 800a194:	9103      	str	r1, [sp, #12]
 800a196:	a81d      	add	r0, sp, #116	; 0x74
 800a198:	2103      	movs	r1, #3
 800a19a:	9002      	str	r0, [sp, #8]
 800a19c:	9a08      	ldr	r2, [sp, #32]
 800a19e:	f8cd b004 	str.w	fp, [sp, #4]
 800a1a2:	463b      	mov	r3, r7
 800a1a4:	9100      	str	r1, [sp, #0]
 800a1a6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a1a8:	f001 fdaa 	bl	800bd00 <_dtoa_r>
 800a1ac:	465d      	mov	r5, fp
 800a1ae:	4606      	mov	r6, r0
 800a1b0:	eb00 040b 	add.w	r4, r0, fp
 800a1b4:	e700      	b.n	8009fb8 <_svfprintf_r+0x12c8>
 800a1b6:	272d      	movs	r7, #45	; 0x2d
 800a1b8:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800a1bc:	f7ff b8ae 	b.w	800931c <_svfprintf_r+0x62c>
 800a1c0:	9307      	str	r3, [sp, #28]
 800a1c2:	f7ff b94d 	b.w	8009460 <_svfprintf_r+0x770>
 800a1c6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a1c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a1ca:	4413      	add	r3, r2
 800a1cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a1ce:	930d      	str	r3, [sp, #52]	; 0x34
 800a1d0:	2a00      	cmp	r2, #0
 800a1d2:	dd7f      	ble.n	800a2d4 <_svfprintf_r+0x15e4>
 800a1d4:	2267      	movs	r2, #103	; 0x67
 800a1d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a1da:	9211      	str	r2, [sp, #68]	; 0x44
 800a1dc:	e5c6      	b.n	8009d6c <_svfprintf_r+0x107c>
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	f340 8098 	ble.w	800a314 <_svfprintf_r+0x1624>
 800a1e4:	f1bb 0f00 	cmp.w	fp, #0
 800a1e8:	d16b      	bne.n	800a2c2 <_svfprintf_r+0x15d2>
 800a1ea:	9a07      	ldr	r2, [sp, #28]
 800a1ec:	07d4      	lsls	r4, r2, #31
 800a1ee:	d468      	bmi.n	800a2c2 <_svfprintf_r+0x15d2>
 800a1f0:	461a      	mov	r2, r3
 800a1f2:	920d      	str	r2, [sp, #52]	; 0x34
 800a1f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a1f8:	e5b8      	b.n	8009d6c <_svfprintf_r+0x107c>
 800a1fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a1fc:	2b47      	cmp	r3, #71	; 0x47
 800a1fe:	f47f ad83 	bne.w	8009d08 <_svfprintf_r+0x1018>
 800a202:	9b07      	ldr	r3, [sp, #28]
 800a204:	07db      	lsls	r3, r3, #31
 800a206:	f53f aed1 	bmi.w	8009fac <_svfprintf_r+0x12bc>
 800a20a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a20c:	1b9b      	subs	r3, r3, r6
 800a20e:	9312      	str	r3, [sp, #72]	; 0x48
 800a210:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a212:	2b47      	cmp	r3, #71	; 0x47
 800a214:	f43f af13 	beq.w	800a03e <_svfprintf_r+0x134e>
 800a218:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a21a:	e728      	b.n	800a06e <_svfprintf_r+0x137e>
 800a21c:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 800a220:	970e      	str	r7, [sp, #56]	; 0x38
 800a222:	9308      	str	r3, [sp, #32]
 800a224:	950d      	str	r5, [sp, #52]	; 0x34
 800a226:	4683      	mov	fp, r0
 800a228:	9013      	str	r0, [sp, #76]	; 0x4c
 800a22a:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800a22e:	f7fe bf25 	b.w	800907c <_svfprintf_r+0x38c>
 800a232:	9b07      	ldr	r3, [sp, #28]
 800a234:	07db      	lsls	r3, r3, #31
 800a236:	465f      	mov	r7, fp
 800a238:	d505      	bpl.n	800a246 <_svfprintf_r+0x1556>
 800a23a:	ae40      	add	r6, sp, #256	; 0x100
 800a23c:	2330      	movs	r3, #48	; 0x30
 800a23e:	f806 3d41 	strb.w	r3, [r6, #-65]!
 800a242:	f7fe bf11 	b.w	8009068 <_svfprintf_r+0x378>
 800a246:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 800a24a:	ae30      	add	r6, sp, #192	; 0xc0
 800a24c:	f7fe bf0f 	b.w	800906e <_svfprintf_r+0x37e>
 800a250:	aa23      	add	r2, sp, #140	; 0x8c
 800a252:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a254:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a256:	f004 f9c1 	bl	800e5dc <__ssprint_r>
 800a25a:	2800      	cmp	r0, #0
 800a25c:	f47e ae41 	bne.w	8008ee2 <_svfprintf_r+0x1f2>
 800a260:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800a262:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800a264:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a266:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a26a:	e62a      	b.n	8009ec2 <_svfprintf_r+0x11d2>
 800a26c:	46a0      	mov	r8, r4
 800a26e:	2500      	movs	r5, #0
 800a270:	f7fe bd99 	b.w	8008da6 <_svfprintf_r+0xb6>
 800a274:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a276:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a278:	4413      	add	r3, r2
 800a27a:	2267      	movs	r2, #103	; 0x67
 800a27c:	930d      	str	r3, [sp, #52]	; 0x34
 800a27e:	9211      	str	r2, [sp, #68]	; 0x44
 800a280:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a284:	e572      	b.n	8009d6c <_svfprintf_r+0x107c>
 800a286:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a288:	e552      	b.n	8009d30 <_svfprintf_r+0x1040>
 800a28a:	3330      	adds	r3, #48	; 0x30
 800a28c:	2230      	movs	r2, #48	; 0x30
 800a28e:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 800a292:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
 800a296:	ab20      	add	r3, sp, #128	; 0x80
 800a298:	e725      	b.n	800a0e6 <_svfprintf_r+0x13f6>
 800a29a:	9808      	ldr	r0, [sp, #32]
 800a29c:	4639      	mov	r1, r7
 800a29e:	2200      	movs	r2, #0
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	f7f6 fc53 	bl	8000b4c <__aeabi_dcmpeq>
 800a2a6:	2800      	cmp	r0, #0
 800a2a8:	f47f ae8a 	bne.w	8009fc0 <_svfprintf_r+0x12d0>
 800a2ac:	f1c5 0501 	rsb	r5, r5, #1
 800a2b0:	951d      	str	r5, [sp, #116]	; 0x74
 800a2b2:	442c      	add	r4, r5
 800a2b4:	e529      	b.n	8009d0a <_svfprintf_r+0x101a>
 800a2b6:	4e38      	ldr	r6, [pc, #224]	; (800a398 <_svfprintf_r+0x16a8>)
 800a2b8:	4b38      	ldr	r3, [pc, #224]	; (800a39c <_svfprintf_r+0x16ac>)
 800a2ba:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800a2be:	f7ff b82f 	b.w	8009320 <_svfprintf_r+0x630>
 800a2c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a2c4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a2c6:	189d      	adds	r5, r3, r2
 800a2c8:	eb05 030b 	add.w	r3, r5, fp
 800a2cc:	930d      	str	r3, [sp, #52]	; 0x34
 800a2ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a2d2:	e54b      	b.n	8009d6c <_svfprintf_r+0x107c>
 800a2d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a2d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a2d8:	f1c3 0301 	rsb	r3, r3, #1
 800a2dc:	441a      	add	r2, r3
 800a2de:	4613      	mov	r3, r2
 800a2e0:	920d      	str	r2, [sp, #52]	; 0x34
 800a2e2:	e777      	b.n	800a1d4 <_svfprintf_r+0x14e4>
 800a2e4:	9b07      	ldr	r3, [sp, #28]
 800a2e6:	f013 0301 	ands.w	r3, r3, #1
 800a2ea:	f47f af05 	bne.w	800a0f8 <_svfprintf_r+0x1408>
 800a2ee:	9313      	str	r3, [sp, #76]	; 0x4c
 800a2f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a2f6:	e539      	b.n	8009d6c <_svfprintf_r+0x107c>
 800a2f8:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a2fa:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a2fe:	6805      	ldr	r5, [r0, #0]
 800a300:	3004      	adds	r0, #4
 800a302:	2d00      	cmp	r5, #0
 800a304:	900e      	str	r0, [sp, #56]	; 0x38
 800a306:	46a0      	mov	r8, r4
 800a308:	f6be ad4b 	bge.w	8008da2 <_svfprintf_r+0xb2>
 800a30c:	f04f 35ff 	mov.w	r5, #4294967295
 800a310:	f7fe bd47 	b.w	8008da2 <_svfprintf_r+0xb2>
 800a314:	f1bb 0f00 	cmp.w	fp, #0
 800a318:	d102      	bne.n	800a320 <_svfprintf_r+0x1630>
 800a31a:	9b07      	ldr	r3, [sp, #28]
 800a31c:	07d8      	lsls	r0, r3, #31
 800a31e:	d507      	bpl.n	800a330 <_svfprintf_r+0x1640>
 800a320:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a322:	1c5d      	adds	r5, r3, #1
 800a324:	eb05 030b 	add.w	r3, r5, fp
 800a328:	930d      	str	r3, [sp, #52]	; 0x34
 800a32a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a32e:	e51d      	b.n	8009d6c <_svfprintf_r+0x107c>
 800a330:	2301      	movs	r3, #1
 800a332:	930d      	str	r3, [sp, #52]	; 0x34
 800a334:	e51a      	b.n	8009d6c <_svfprintf_r+0x107c>
 800a336:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800a33a:	f7ff b865 	b.w	8009408 <_svfprintf_r+0x718>
 800a33e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800a342:	f7fe be51 	b.w	8008fe8 <_svfprintf_r+0x2f8>
 800a346:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
 800a34a:	e6cc      	b.n	800a0e6 <_svfprintf_r+0x13f6>
 800a34c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a34e:	230c      	movs	r3, #12
 800a350:	6013      	str	r3, [r2, #0]
 800a352:	f04f 30ff 	mov.w	r0, #4294967295
 800a356:	f7fe bdcd 	b.w	8008ef4 <_svfprintf_r+0x204>
 800a35a:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800a35e:	f7ff b950 	b.w	8009602 <_svfprintf_r+0x912>
 800a362:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800a366:	f7fe bfab 	b.w	80092c0 <_svfprintf_r+0x5d0>
 800a36a:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800a36e:	f7fe bdc9 	b.w	8008f04 <_svfprintf_r+0x214>
 800a372:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800a376:	f7ff b819 	b.w	80093ac <_svfprintf_r+0x6bc>
 800a37a:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800a37e:	f7fe bfeb 	b.w	8009358 <_svfprintf_r+0x668>
 800a382:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800a386:	f7ff b8f3 	b.w	8009570 <_svfprintf_r+0x880>
 800a38a:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800a38e:	f7ff b8d2 	b.w	8009536 <_svfprintf_r+0x846>
 800a392:	bf00      	nop
 800a394:	0800f27c 	.word	0x0800f27c
 800a398:	0800f250 	.word	0x0800f250
 800a39c:	0800f24c 	.word	0x0800f24c

0800a3a0 <_vfprintf_r>:
 800a3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3a4:	b0c1      	sub	sp, #260	; 0x104
 800a3a6:	461c      	mov	r4, r3
 800a3a8:	9108      	str	r1, [sp, #32]
 800a3aa:	4616      	mov	r6, r2
 800a3ac:	4605      	mov	r5, r0
 800a3ae:	900a      	str	r0, [sp, #40]	; 0x28
 800a3b0:	f003 f808 	bl	800d3c4 <_localeconv_r>
 800a3b4:	6803      	ldr	r3, [r0, #0]
 800a3b6:	9317      	str	r3, [sp, #92]	; 0x5c
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f7f6 fe21 	bl	8001000 <strlen>
 800a3be:	940e      	str	r4, [sp, #56]	; 0x38
 800a3c0:	9016      	str	r0, [sp, #88]	; 0x58
 800a3c2:	b11d      	cbz	r5, 800a3cc <_vfprintf_r+0x2c>
 800a3c4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	f000 8122 	beq.w	800a610 <_vfprintf_r+0x270>
 800a3cc:	9808      	ldr	r0, [sp, #32]
 800a3ce:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
 800a3d2:	b293      	uxth	r3, r2
 800a3d4:	0499      	lsls	r1, r3, #18
 800a3d6:	d407      	bmi.n	800a3e8 <_vfprintf_r+0x48>
 800a3d8:	6e41      	ldr	r1, [r0, #100]	; 0x64
 800a3da:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 800a3de:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800a3e2:	8183      	strh	r3, [r0, #12]
 800a3e4:	6641      	str	r1, [r0, #100]	; 0x64
 800a3e6:	b29b      	uxth	r3, r3
 800a3e8:	071a      	lsls	r2, r3, #28
 800a3ea:	f140 80dc 	bpl.w	800a5a6 <_vfprintf_r+0x206>
 800a3ee:	9a08      	ldr	r2, [sp, #32]
 800a3f0:	6912      	ldr	r2, [r2, #16]
 800a3f2:	2a00      	cmp	r2, #0
 800a3f4:	f000 80d7 	beq.w	800a5a6 <_vfprintf_r+0x206>
 800a3f8:	f003 031a 	and.w	r3, r3, #26
 800a3fc:	2b0a      	cmp	r3, #10
 800a3fe:	f000 80e0 	beq.w	800a5c2 <_vfprintf_r+0x222>
 800a402:	2300      	movs	r3, #0
 800a404:	461a      	mov	r2, r3
 800a406:	9312      	str	r3, [sp, #72]	; 0x48
 800a408:	9325      	str	r3, [sp, #148]	; 0x94
 800a40a:	9324      	str	r3, [sp, #144]	; 0x90
 800a40c:	9319      	str	r3, [sp, #100]	; 0x64
 800a40e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a410:	f8df a3fc 	ldr.w	sl, [pc, #1020]	; 800a810 <_vfprintf_r+0x470>
 800a414:	9214      	str	r2, [sp, #80]	; 0x50
 800a416:	ab30      	add	r3, sp, #192	; 0xc0
 800a418:	9323      	str	r3, [sp, #140]	; 0x8c
 800a41a:	4699      	mov	r9, r3
 800a41c:	9215      	str	r2, [sp, #84]	; 0x54
 800a41e:	46b0      	mov	r8, r6
 800a420:	f898 3000 	ldrb.w	r3, [r8]
 800a424:	4644      	mov	r4, r8
 800a426:	b1eb      	cbz	r3, 800a464 <_vfprintf_r+0xc4>
 800a428:	2b25      	cmp	r3, #37	; 0x25
 800a42a:	d102      	bne.n	800a432 <_vfprintf_r+0x92>
 800a42c:	e01a      	b.n	800a464 <_vfprintf_r+0xc4>
 800a42e:	2b25      	cmp	r3, #37	; 0x25
 800a430:	d003      	beq.n	800a43a <_vfprintf_r+0x9a>
 800a432:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800a436:	2b00      	cmp	r3, #0
 800a438:	d1f9      	bne.n	800a42e <_vfprintf_r+0x8e>
 800a43a:	ebc8 0504 	rsb	r5, r8, r4
 800a43e:	b18d      	cbz	r5, 800a464 <_vfprintf_r+0xc4>
 800a440:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a442:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800a444:	f8c9 8000 	str.w	r8, [r9]
 800a448:	3301      	adds	r3, #1
 800a44a:	442a      	add	r2, r5
 800a44c:	2b07      	cmp	r3, #7
 800a44e:	f8c9 5004 	str.w	r5, [r9, #4]
 800a452:	9225      	str	r2, [sp, #148]	; 0x94
 800a454:	9324      	str	r3, [sp, #144]	; 0x90
 800a456:	f300 80c2 	bgt.w	800a5de <_vfprintf_r+0x23e>
 800a45a:	f109 0908 	add.w	r9, r9, #8
 800a45e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a460:	442b      	add	r3, r5
 800a462:	930b      	str	r3, [sp, #44]	; 0x2c
 800a464:	7823      	ldrb	r3, [r4, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	f000 80c2 	beq.w	800a5f0 <_vfprintf_r+0x250>
 800a46c:	2300      	movs	r3, #0
 800a46e:	461a      	mov	r2, r3
 800a470:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800a474:	4619      	mov	r1, r3
 800a476:	930c      	str	r3, [sp, #48]	; 0x30
 800a478:	9307      	str	r3, [sp, #28]
 800a47a:	f04f 3bff 	mov.w	fp, #4294967295
 800a47e:	7863      	ldrb	r3, [r4, #1]
 800a480:	f104 0801 	add.w	r8, r4, #1
 800a484:	465d      	mov	r5, fp
 800a486:	f108 0801 	add.w	r8, r8, #1
 800a48a:	f1a3 0020 	sub.w	r0, r3, #32
 800a48e:	2858      	cmp	r0, #88	; 0x58
 800a490:	f200 844b 	bhi.w	800ad2a <_vfprintf_r+0x98a>
 800a494:	e8df f010 	tbh	[pc, r0, lsl #1]
 800a498:	04490401 	.word	0x04490401
 800a49c:	040a0449 	.word	0x040a0449
 800a4a0:	04490449 	.word	0x04490449
 800a4a4:	04490449 	.word	0x04490449
 800a4a8:	04490449 	.word	0x04490449
 800a4ac:	043b035d 	.word	0x043b035d
 800a4b0:	005d0449 	.word	0x005d0449
 800a4b4:	044900fe 	.word	0x044900fe
 800a4b8:	036b011a 	.word	0x036b011a
 800a4bc:	036b036b 	.word	0x036b036b
 800a4c0:	036b036b 	.word	0x036b036b
 800a4c4:	036b036b 	.word	0x036b036b
 800a4c8:	036b036b 	.word	0x036b036b
 800a4cc:	04490449 	.word	0x04490449
 800a4d0:	04490449 	.word	0x04490449
 800a4d4:	04490449 	.word	0x04490449
 800a4d8:	04490449 	.word	0x04490449
 800a4dc:	04490449 	.word	0x04490449
 800a4e0:	0398037b 	.word	0x0398037b
 800a4e4:	03980449 	.word	0x03980449
 800a4e8:	04490449 	.word	0x04490449
 800a4ec:	04490449 	.word	0x04490449
 800a4f0:	044903dd 	.word	0x044903dd
 800a4f4:	01210449 	.word	0x01210449
 800a4f8:	04490449 	.word	0x04490449
 800a4fc:	04490449 	.word	0x04490449
 800a500:	014a0449 	.word	0x014a0449
 800a504:	04490449 	.word	0x04490449
 800a508:	044902b0 	.word	0x044902b0
 800a50c:	04490449 	.word	0x04490449
 800a510:	04490449 	.word	0x04490449
 800a514:	04490449 	.word	0x04490449
 800a518:	04490449 	.word	0x04490449
 800a51c:	02f10449 	.word	0x02f10449
 800a520:	03980304 	.word	0x03980304
 800a524:	03980398 	.word	0x03980398
 800a528:	0304033a 	.word	0x0304033a
 800a52c:	04490449 	.word	0x04490449
 800a530:	04490341 	.word	0x04490341
 800a534:	00c0034b 	.word	0x00c0034b
 800a538:	04120064 	.word	0x04120064
 800a53c:	041a0449 	.word	0x041a0449
 800a540:	03e40449 	.word	0x03e40449
 800a544:	04490449 	.word	0x04490449
 800a548:	03ec      	.short	0x03ec
 800a54a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a54c:	930e      	str	r3, [sp, #56]	; 0x38
 800a54e:	4240      	negs	r0, r0
 800a550:	900c      	str	r0, [sp, #48]	; 0x30
 800a552:	9b07      	ldr	r3, [sp, #28]
 800a554:	f043 0304 	orr.w	r3, r3, #4
 800a558:	9307      	str	r3, [sp, #28]
 800a55a:	f898 3000 	ldrb.w	r3, [r8]
 800a55e:	e792      	b.n	800a486 <_vfprintf_r+0xe6>
 800a560:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a562:	46ab      	mov	fp, r5
 800a564:	2100      	movs	r1, #0
 800a566:	6804      	ldr	r4, [r0, #0]
 800a568:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800a56c:	1d07      	adds	r7, r0, #4
 800a56e:	9807      	ldr	r0, [sp, #28]
 800a570:	2330      	movs	r3, #48	; 0x30
 800a572:	2278      	movs	r2, #120	; 0x78
 800a574:	458b      	cmp	fp, r1
 800a576:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 800a57a:	f04f 0500 	mov.w	r5, #0
 800a57e:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
 800a582:	f040 0302 	orr.w	r3, r0, #2
 800a586:	f2c0 83ed 	blt.w	800ad64 <_vfprintf_r+0x9c4>
 800a58a:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 800a58e:	f043 0302 	orr.w	r3, r3, #2
 800a592:	9307      	str	r3, [sp, #28]
 800a594:	ea54 0305 	orrs.w	r3, r4, r5
 800a598:	970e      	str	r7, [sp, #56]	; 0x38
 800a59a:	f000 83be 	beq.w	800ad1a <_vfprintf_r+0x97a>
 800a59e:	460f      	mov	r7, r1
 800a5a0:	9211      	str	r2, [sp, #68]	; 0x44
 800a5a2:	4899      	ldr	r0, [pc, #612]	; (800a808 <_vfprintf_r+0x468>)
 800a5a4:	e259      	b.n	800aa5a <_vfprintf_r+0x6ba>
 800a5a6:	9908      	ldr	r1, [sp, #32]
 800a5a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a5aa:	f001 faaf 	bl	800bb0c <__swsetup_r>
 800a5ae:	2800      	cmp	r0, #0
 800a5b0:	f041 8015 	bne.w	800b5de <_vfprintf_r+0x123e>
 800a5b4:	9b08      	ldr	r3, [sp, #32]
 800a5b6:	899b      	ldrh	r3, [r3, #12]
 800a5b8:	f003 031a 	and.w	r3, r3, #26
 800a5bc:	2b0a      	cmp	r3, #10
 800a5be:	f47f af20 	bne.w	800a402 <_vfprintf_r+0x62>
 800a5c2:	9908      	ldr	r1, [sp, #32]
 800a5c4:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	f6ff af1a 	blt.w	800a402 <_vfprintf_r+0x62>
 800a5ce:	4623      	mov	r3, r4
 800a5d0:	4632      	mov	r2, r6
 800a5d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a5d4:	f001 fa64 	bl	800baa0 <__sbprintf>
 800a5d8:	b041      	add	sp, #260	; 0x104
 800a5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5de:	aa23      	add	r2, sp, #140	; 0x8c
 800a5e0:	9908      	ldr	r1, [sp, #32]
 800a5e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a5e4:	f004 f8b6 	bl	800e754 <__sprint_r>
 800a5e8:	b948      	cbnz	r0, 800a5fe <_vfprintf_r+0x25e>
 800a5ea:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a5ee:	e736      	b.n	800a45e <_vfprintf_r+0xbe>
 800a5f0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800a5f2:	b123      	cbz	r3, 800a5fe <_vfprintf_r+0x25e>
 800a5f4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a5f6:	9908      	ldr	r1, [sp, #32]
 800a5f8:	aa23      	add	r2, sp, #140	; 0x8c
 800a5fa:	f004 f8ab 	bl	800e754 <__sprint_r>
 800a5fe:	9b08      	ldr	r3, [sp, #32]
 800a600:	899b      	ldrh	r3, [r3, #12]
 800a602:	0659      	lsls	r1, r3, #25
 800a604:	f100 87eb 	bmi.w	800b5de <_vfprintf_r+0x123e>
 800a608:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a60a:	b041      	add	sp, #260	; 0x104
 800a60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a610:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a612:	f002 fbd9 	bl	800cdc8 <__sinit>
 800a616:	e6d9      	b.n	800a3cc <_vfprintf_r+0x2c>
 800a618:	9311      	str	r3, [sp, #68]	; 0x44
 800a61a:	46ab      	mov	fp, r5
 800a61c:	2a00      	cmp	r2, #0
 800a61e:	f041 8221 	bne.w	800ba64 <_vfprintf_r+0x16c4>
 800a622:	9a07      	ldr	r2, [sp, #28]
 800a624:	f012 0320 	ands.w	r3, r2, #32
 800a628:	d064      	beq.n	800a6f4 <_vfprintf_r+0x354>
 800a62a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800a62c:	3707      	adds	r7, #7
 800a62e:	f027 0307 	bic.w	r3, r7, #7
 800a632:	2700      	movs	r7, #0
 800a634:	f103 0108 	add.w	r1, r3, #8
 800a638:	45bb      	cmp	fp, r7
 800a63a:	910e      	str	r1, [sp, #56]	; 0x38
 800a63c:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a640:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800a644:	f2c0 873c 	blt.w	800b4c0 <_vfprintf_r+0x1120>
 800a648:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 800a64c:	9307      	str	r3, [sp, #28]
 800a64e:	ea54 0305 	orrs.w	r3, r4, r5
 800a652:	f000 837f 	beq.w	800ad54 <_vfprintf_r+0x9b4>
 800a656:	ae30      	add	r6, sp, #192	; 0xc0
 800a658:	08e2      	lsrs	r2, r4, #3
 800a65a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 800a65e:	08e9      	lsrs	r1, r5, #3
 800a660:	f004 0307 	and.w	r3, r4, #7
 800a664:	460d      	mov	r5, r1
 800a666:	4614      	mov	r4, r2
 800a668:	3330      	adds	r3, #48	; 0x30
 800a66a:	ea54 0205 	orrs.w	r2, r4, r5
 800a66e:	f806 3d01 	strb.w	r3, [r6, #-1]!
 800a672:	d1f1      	bne.n	800a658 <_vfprintf_r+0x2b8>
 800a674:	9a07      	ldr	r2, [sp, #28]
 800a676:	07d2      	lsls	r2, r2, #31
 800a678:	f140 8096 	bpl.w	800a7a8 <_vfprintf_r+0x408>
 800a67c:	2b30      	cmp	r3, #48	; 0x30
 800a67e:	f000 8093 	beq.w	800a7a8 <_vfprintf_r+0x408>
 800a682:	2230      	movs	r2, #48	; 0x30
 800a684:	1e73      	subs	r3, r6, #1
 800a686:	f806 2c01 	strb.w	r2, [r6, #-1]
 800a68a:	aa30      	add	r2, sp, #192	; 0xc0
 800a68c:	1ad2      	subs	r2, r2, r3
 800a68e:	920d      	str	r2, [sp, #52]	; 0x34
 800a690:	461e      	mov	r6, r3
 800a692:	e08c      	b.n	800a7ae <_vfprintf_r+0x40e>
 800a694:	f898 3000 	ldrb.w	r3, [r8]
 800a698:	2b2a      	cmp	r3, #42	; 0x2a
 800a69a:	f108 0401 	add.w	r4, r8, #1
 800a69e:	f001 81bf 	beq.w	800ba20 <_vfprintf_r+0x1680>
 800a6a2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800a6a6:	2809      	cmp	r0, #9
 800a6a8:	bf98      	it	ls
 800a6aa:	2500      	movls	r5, #0
 800a6ac:	f201 814e 	bhi.w	800b94c <_vfprintf_r+0x15ac>
 800a6b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a6b4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800a6b8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800a6bc:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800a6c0:	2809      	cmp	r0, #9
 800a6c2:	d9f5      	bls.n	800a6b0 <_vfprintf_r+0x310>
 800a6c4:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 800a6c8:	46a0      	mov	r8, r4
 800a6ca:	e6de      	b.n	800a48a <_vfprintf_r+0xea>
 800a6cc:	9b07      	ldr	r3, [sp, #28]
 800a6ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6d2:	9307      	str	r3, [sp, #28]
 800a6d4:	f898 3000 	ldrb.w	r3, [r8]
 800a6d8:	e6d5      	b.n	800a486 <_vfprintf_r+0xe6>
 800a6da:	9311      	str	r3, [sp, #68]	; 0x44
 800a6dc:	46ab      	mov	fp, r5
 800a6de:	2a00      	cmp	r2, #0
 800a6e0:	f041 81c4 	bne.w	800ba6c <_vfprintf_r+0x16cc>
 800a6e4:	9b07      	ldr	r3, [sp, #28]
 800a6e6:	f043 0310 	orr.w	r3, r3, #16
 800a6ea:	9307      	str	r3, [sp, #28]
 800a6ec:	9a07      	ldr	r2, [sp, #28]
 800a6ee:	f012 0320 	ands.w	r3, r2, #32
 800a6f2:	d19a      	bne.n	800a62a <_vfprintf_r+0x28a>
 800a6f4:	9907      	ldr	r1, [sp, #28]
 800a6f6:	f011 0210 	ands.w	r2, r1, #16
 800a6fa:	f000 86d0 	beq.w	800b49e <_vfprintf_r+0x10fe>
 800a6fe:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a700:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800a704:	f1bb 0f00 	cmp.w	fp, #0
 800a708:	6804      	ldr	r4, [r0, #0]
 800a70a:	f100 0704 	add.w	r7, r0, #4
 800a70e:	f04f 0500 	mov.w	r5, #0
 800a712:	f2c0 86d4 	blt.w	800b4be <_vfprintf_r+0x111e>
 800a716:	460a      	mov	r2, r1
 800a718:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a71c:	9207      	str	r2, [sp, #28]
 800a71e:	ea54 0205 	orrs.w	r2, r4, r5
 800a722:	970e      	str	r7, [sp, #56]	; 0x38
 800a724:	f000 8316 	beq.w	800ad54 <_vfprintf_r+0x9b4>
 800a728:	461f      	mov	r7, r3
 800a72a:	e794      	b.n	800a656 <_vfprintf_r+0x2b6>
 800a72c:	9311      	str	r3, [sp, #68]	; 0x44
 800a72e:	46ab      	mov	fp, r5
 800a730:	2a00      	cmp	r2, #0
 800a732:	f041 818f 	bne.w	800ba54 <_vfprintf_r+0x16b4>
 800a736:	9b07      	ldr	r3, [sp, #28]
 800a738:	f043 0310 	orr.w	r3, r3, #16
 800a73c:	9307      	str	r3, [sp, #28]
 800a73e:	9a07      	ldr	r2, [sp, #28]
 800a740:	f012 0320 	ands.w	r3, r2, #32
 800a744:	f000 84f8 	beq.w	800b138 <_vfprintf_r+0xd98>
 800a748:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800a74a:	3707      	adds	r7, #7
 800a74c:	f027 0307 	bic.w	r3, r7, #7
 800a750:	2700      	movs	r7, #0
 800a752:	f103 0108 	add.w	r1, r3, #8
 800a756:	45bb      	cmp	fp, r7
 800a758:	910e      	str	r1, [sp, #56]	; 0x38
 800a75a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a75e:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800a762:	f2c0 8516 	blt.w	800b192 <_vfprintf_r+0xdf2>
 800a766:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 800a76a:	9307      	str	r3, [sp, #28]
 800a76c:	ea54 0305 	orrs.w	r3, r4, r5
 800a770:	f000 81bc 	beq.w	800aaec <_vfprintf_r+0x74c>
 800a774:	2d00      	cmp	r5, #0
 800a776:	bf08      	it	eq
 800a778:	2c0a      	cmpeq	r4, #10
 800a77a:	f0c0 850e 	bcc.w	800b19a <_vfprintf_r+0xdfa>
 800a77e:	ae30      	add	r6, sp, #192	; 0xc0
 800a780:	4620      	mov	r0, r4
 800a782:	4629      	mov	r1, r5
 800a784:	220a      	movs	r2, #10
 800a786:	2300      	movs	r3, #0
 800a788:	f7f6 fa12 	bl	8000bb0 <__aeabi_uldivmod>
 800a78c:	3230      	adds	r2, #48	; 0x30
 800a78e:	f806 2d01 	strb.w	r2, [r6, #-1]!
 800a792:	4620      	mov	r0, r4
 800a794:	4629      	mov	r1, r5
 800a796:	2300      	movs	r3, #0
 800a798:	220a      	movs	r2, #10
 800a79a:	f7f6 fa09 	bl	8000bb0 <__aeabi_uldivmod>
 800a79e:	4604      	mov	r4, r0
 800a7a0:	460d      	mov	r5, r1
 800a7a2:	ea54 0305 	orrs.w	r3, r4, r5
 800a7a6:	d1eb      	bne.n	800a780 <_vfprintf_r+0x3e0>
 800a7a8:	ab30      	add	r3, sp, #192	; 0xc0
 800a7aa:	1b9b      	subs	r3, r3, r6
 800a7ac:	930d      	str	r3, [sp, #52]	; 0x34
 800a7ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7b0:	455b      	cmp	r3, fp
 800a7b2:	bfb8      	it	lt
 800a7b4:	465b      	movlt	r3, fp
 800a7b6:	9309      	str	r3, [sp, #36]	; 0x24
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	9313      	str	r3, [sp, #76]	; 0x4c
 800a7bc:	b117      	cbz	r7, 800a7c4 <_vfprintf_r+0x424>
 800a7be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7c0:	3301      	adds	r3, #1
 800a7c2:	9309      	str	r3, [sp, #36]	; 0x24
 800a7c4:	9b07      	ldr	r3, [sp, #28]
 800a7c6:	f013 0302 	ands.w	r3, r3, #2
 800a7ca:	930f      	str	r3, [sp, #60]	; 0x3c
 800a7cc:	d002      	beq.n	800a7d4 <_vfprintf_r+0x434>
 800a7ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7d0:	3302      	adds	r3, #2
 800a7d2:	9309      	str	r3, [sp, #36]	; 0x24
 800a7d4:	9b07      	ldr	r3, [sp, #28]
 800a7d6:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 800a7da:	9310      	str	r3, [sp, #64]	; 0x40
 800a7dc:	f040 82cf 	bne.w	800ad7e <_vfprintf_r+0x9de>
 800a7e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7e4:	1a9d      	subs	r5, r3, r2
 800a7e6:	2d00      	cmp	r5, #0
 800a7e8:	f340 82c9 	ble.w	800ad7e <_vfprintf_r+0x9de>
 800a7ec:	2d10      	cmp	r5, #16
 800a7ee:	9925      	ldr	r1, [sp, #148]	; 0x94
 800a7f0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a7f2:	4f06      	ldr	r7, [pc, #24]	; (800a80c <_vfprintf_r+0x46c>)
 800a7f4:	dd2e      	ble.n	800a854 <_vfprintf_r+0x4b4>
 800a7f6:	9618      	str	r6, [sp, #96]	; 0x60
 800a7f8:	4648      	mov	r0, r9
 800a7fa:	2410      	movs	r4, #16
 800a7fc:	46b9      	mov	r9, r7
 800a7fe:	9e08      	ldr	r6, [sp, #32]
 800a800:	462f      	mov	r7, r5
 800a802:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a804:	e00b      	b.n	800a81e <_vfprintf_r+0x47e>
 800a806:	bf00      	nop
 800a808:	0800f268 	.word	0x0800f268
 800a80c:	0800f2a8 	.word	0x0800f2a8
 800a810:	0800f298 	.word	0x0800f298
 800a814:	3f10      	subs	r7, #16
 800a816:	2f10      	cmp	r7, #16
 800a818:	f100 0008 	add.w	r0, r0, #8
 800a81c:	dd16      	ble.n	800a84c <_vfprintf_r+0x4ac>
 800a81e:	3201      	adds	r2, #1
 800a820:	4bb7      	ldr	r3, [pc, #732]	; (800ab00 <_vfprintf_r+0x760>)
 800a822:	9224      	str	r2, [sp, #144]	; 0x90
 800a824:	3110      	adds	r1, #16
 800a826:	2a07      	cmp	r2, #7
 800a828:	9125      	str	r1, [sp, #148]	; 0x94
 800a82a:	e880 0018 	stmia.w	r0, {r3, r4}
 800a82e:	ddf1      	ble.n	800a814 <_vfprintf_r+0x474>
 800a830:	aa23      	add	r2, sp, #140	; 0x8c
 800a832:	4631      	mov	r1, r6
 800a834:	4628      	mov	r0, r5
 800a836:	f003 ff8d 	bl	800e754 <__sprint_r>
 800a83a:	2800      	cmp	r0, #0
 800a83c:	f47f aedf 	bne.w	800a5fe <_vfprintf_r+0x25e>
 800a840:	3f10      	subs	r7, #16
 800a842:	2f10      	cmp	r7, #16
 800a844:	9925      	ldr	r1, [sp, #148]	; 0x94
 800a846:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a848:	a830      	add	r0, sp, #192	; 0xc0
 800a84a:	dce8      	bgt.n	800a81e <_vfprintf_r+0x47e>
 800a84c:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800a84e:	463d      	mov	r5, r7
 800a850:	464f      	mov	r7, r9
 800a852:	4681      	mov	r9, r0
 800a854:	3201      	adds	r2, #1
 800a856:	186c      	adds	r4, r5, r1
 800a858:	2a07      	cmp	r2, #7
 800a85a:	9425      	str	r4, [sp, #148]	; 0x94
 800a85c:	9224      	str	r2, [sp, #144]	; 0x90
 800a85e:	f8c9 7000 	str.w	r7, [r9]
 800a862:	f8c9 5004 	str.w	r5, [r9, #4]
 800a866:	f300 841f 	bgt.w	800b0a8 <_vfprintf_r+0xd08>
 800a86a:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800a86e:	f109 0908 	add.w	r9, r9, #8
 800a872:	b177      	cbz	r7, 800a892 <_vfprintf_r+0x4f2>
 800a874:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a876:	3301      	adds	r3, #1
 800a878:	3401      	adds	r4, #1
 800a87a:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
 800a87e:	2201      	movs	r2, #1
 800a880:	2b07      	cmp	r3, #7
 800a882:	9425      	str	r4, [sp, #148]	; 0x94
 800a884:	9324      	str	r3, [sp, #144]	; 0x90
 800a886:	e889 0006 	stmia.w	r9, {r1, r2}
 800a88a:	f300 8397 	bgt.w	800afbc <_vfprintf_r+0xc1c>
 800a88e:	f109 0908 	add.w	r9, r9, #8
 800a892:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a894:	b16b      	cbz	r3, 800a8b2 <_vfprintf_r+0x512>
 800a896:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a898:	3301      	adds	r3, #1
 800a89a:	3402      	adds	r4, #2
 800a89c:	a91c      	add	r1, sp, #112	; 0x70
 800a89e:	2202      	movs	r2, #2
 800a8a0:	2b07      	cmp	r3, #7
 800a8a2:	9425      	str	r4, [sp, #148]	; 0x94
 800a8a4:	9324      	str	r3, [sp, #144]	; 0x90
 800a8a6:	e889 0006 	stmia.w	r9, {r1, r2}
 800a8aa:	f300 8393 	bgt.w	800afd4 <_vfprintf_r+0xc34>
 800a8ae:	f109 0908 	add.w	r9, r9, #8
 800a8b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a8b4:	2b80      	cmp	r3, #128	; 0x80
 800a8b6:	f000 82c6 	beq.w	800ae46 <_vfprintf_r+0xaa6>
 800a8ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8bc:	ebc3 070b 	rsb	r7, r3, fp
 800a8c0:	2f00      	cmp	r7, #0
 800a8c2:	dd33      	ble.n	800a92c <_vfprintf_r+0x58c>
 800a8c4:	4a8f      	ldr	r2, [pc, #572]	; (800ab04 <_vfprintf_r+0x764>)
 800a8c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a8c8:	920f      	str	r2, [sp, #60]	; 0x3c
 800a8ca:	2f10      	cmp	r7, #16
 800a8cc:	dd22      	ble.n	800a914 <_vfprintf_r+0x574>
 800a8ce:	4622      	mov	r2, r4
 800a8d0:	f04f 0b10 	mov.w	fp, #16
 800a8d4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a8d6:	9c08      	ldr	r4, [sp, #32]
 800a8d8:	e004      	b.n	800a8e4 <_vfprintf_r+0x544>
 800a8da:	3f10      	subs	r7, #16
 800a8dc:	2f10      	cmp	r7, #16
 800a8de:	f109 0908 	add.w	r9, r9, #8
 800a8e2:	dd16      	ble.n	800a912 <_vfprintf_r+0x572>
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	3210      	adds	r2, #16
 800a8e8:	2b07      	cmp	r3, #7
 800a8ea:	9225      	str	r2, [sp, #148]	; 0x94
 800a8ec:	9324      	str	r3, [sp, #144]	; 0x90
 800a8ee:	e889 0c00 	stmia.w	r9, {sl, fp}
 800a8f2:	ddf2      	ble.n	800a8da <_vfprintf_r+0x53a>
 800a8f4:	aa23      	add	r2, sp, #140	; 0x8c
 800a8f6:	4621      	mov	r1, r4
 800a8f8:	4628      	mov	r0, r5
 800a8fa:	f003 ff2b 	bl	800e754 <__sprint_r>
 800a8fe:	2800      	cmp	r0, #0
 800a900:	f47f ae7d 	bne.w	800a5fe <_vfprintf_r+0x25e>
 800a904:	3f10      	subs	r7, #16
 800a906:	2f10      	cmp	r7, #16
 800a908:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800a90a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a90c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a910:	dce8      	bgt.n	800a8e4 <_vfprintf_r+0x544>
 800a912:	4614      	mov	r4, r2
 800a914:	3301      	adds	r3, #1
 800a916:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a918:	9324      	str	r3, [sp, #144]	; 0x90
 800a91a:	443c      	add	r4, r7
 800a91c:	2b07      	cmp	r3, #7
 800a91e:	9425      	str	r4, [sp, #148]	; 0x94
 800a920:	e889 0084 	stmia.w	r9, {r2, r7}
 800a924:	f300 833e 	bgt.w	800afa4 <_vfprintf_r+0xc04>
 800a928:	f109 0908 	add.w	r9, r9, #8
 800a92c:	9b07      	ldr	r3, [sp, #28]
 800a92e:	05dd      	lsls	r5, r3, #23
 800a930:	f100 8227 	bmi.w	800ad82 <_vfprintf_r+0x9e2>
 800a934:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a936:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a938:	f8c9 6000 	str.w	r6, [r9]
 800a93c:	3301      	adds	r3, #1
 800a93e:	440c      	add	r4, r1
 800a940:	2b07      	cmp	r3, #7
 800a942:	9425      	str	r4, [sp, #148]	; 0x94
 800a944:	f8c9 1004 	str.w	r1, [r9, #4]
 800a948:	9324      	str	r3, [sp, #144]	; 0x90
 800a94a:	f300 8315 	bgt.w	800af78 <_vfprintf_r+0xbd8>
 800a94e:	f109 0908 	add.w	r9, r9, #8
 800a952:	9b07      	ldr	r3, [sp, #28]
 800a954:	0758      	lsls	r0, r3, #29
 800a956:	d53f      	bpl.n	800a9d8 <_vfprintf_r+0x638>
 800a958:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a95a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a95c:	1a9d      	subs	r5, r3, r2
 800a95e:	2d00      	cmp	r5, #0
 800a960:	dd3a      	ble.n	800a9d8 <_vfprintf_r+0x638>
 800a962:	2d10      	cmp	r5, #16
 800a964:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a966:	4f66      	ldr	r7, [pc, #408]	; (800ab00 <_vfprintf_r+0x760>)
 800a968:	dd23      	ble.n	800a9b2 <_vfprintf_r+0x612>
 800a96a:	4622      	mov	r2, r4
 800a96c:	2610      	movs	r6, #16
 800a96e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800a972:	9c08      	ldr	r4, [sp, #32]
 800a974:	e004      	b.n	800a980 <_vfprintf_r+0x5e0>
 800a976:	3d10      	subs	r5, #16
 800a978:	2d10      	cmp	r5, #16
 800a97a:	f109 0908 	add.w	r9, r9, #8
 800a97e:	dd17      	ble.n	800a9b0 <_vfprintf_r+0x610>
 800a980:	3301      	adds	r3, #1
 800a982:	495f      	ldr	r1, [pc, #380]	; (800ab00 <_vfprintf_r+0x760>)
 800a984:	9324      	str	r3, [sp, #144]	; 0x90
 800a986:	3210      	adds	r2, #16
 800a988:	2b07      	cmp	r3, #7
 800a98a:	9225      	str	r2, [sp, #148]	; 0x94
 800a98c:	e889 0042 	stmia.w	r9, {r1, r6}
 800a990:	ddf1      	ble.n	800a976 <_vfprintf_r+0x5d6>
 800a992:	aa23      	add	r2, sp, #140	; 0x8c
 800a994:	4621      	mov	r1, r4
 800a996:	4658      	mov	r0, fp
 800a998:	f003 fedc 	bl	800e754 <__sprint_r>
 800a99c:	2800      	cmp	r0, #0
 800a99e:	f47f ae2e 	bne.w	800a5fe <_vfprintf_r+0x25e>
 800a9a2:	3d10      	subs	r5, #16
 800a9a4:	2d10      	cmp	r5, #16
 800a9a6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800a9a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a9aa:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a9ae:	dce7      	bgt.n	800a980 <_vfprintf_r+0x5e0>
 800a9b0:	4614      	mov	r4, r2
 800a9b2:	3301      	adds	r3, #1
 800a9b4:	442c      	add	r4, r5
 800a9b6:	2b07      	cmp	r3, #7
 800a9b8:	9425      	str	r4, [sp, #148]	; 0x94
 800a9ba:	9324      	str	r3, [sp, #144]	; 0x90
 800a9bc:	f8c9 7000 	str.w	r7, [r9]
 800a9c0:	f8c9 5004 	str.w	r5, [r9, #4]
 800a9c4:	dd08      	ble.n	800a9d8 <_vfprintf_r+0x638>
 800a9c6:	aa23      	add	r2, sp, #140	; 0x8c
 800a9c8:	9908      	ldr	r1, [sp, #32]
 800a9ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a9cc:	f003 fec2 	bl	800e754 <__sprint_r>
 800a9d0:	2800      	cmp	r0, #0
 800a9d2:	f47f ae14 	bne.w	800a5fe <_vfprintf_r+0x25e>
 800a9d6:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800a9d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a9dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a9de:	428a      	cmp	r2, r1
 800a9e0:	bfac      	ite	ge
 800a9e2:	189b      	addge	r3, r3, r2
 800a9e4:	185b      	addlt	r3, r3, r1
 800a9e6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a9e8:	2c00      	cmp	r4, #0
 800a9ea:	f040 82d1 	bne.w	800af90 <_vfprintf_r+0xbf0>
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	9324      	str	r3, [sp, #144]	; 0x90
 800a9f2:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a9f6:	e513      	b.n	800a420 <_vfprintf_r+0x80>
 800a9f8:	9311      	str	r3, [sp, #68]	; 0x44
 800a9fa:	46ab      	mov	fp, r5
 800a9fc:	2a00      	cmp	r2, #0
 800a9fe:	f041 8025 	bne.w	800ba4c <_vfprintf_r+0x16ac>
 800aa02:	9b07      	ldr	r3, [sp, #28]
 800aa04:	4840      	ldr	r0, [pc, #256]	; (800ab08 <_vfprintf_r+0x768>)
 800aa06:	069c      	lsls	r4, r3, #26
 800aa08:	f140 813c 	bpl.w	800ac84 <_vfprintf_r+0x8e4>
 800aa0c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800aa0e:	3707      	adds	r7, #7
 800aa10:	f027 0307 	bic.w	r3, r7, #7
 800aa14:	e9d3 4500 	ldrd	r4, r5, [r3]
 800aa18:	f103 0208 	add.w	r2, r3, #8
 800aa1c:	920e      	str	r2, [sp, #56]	; 0x38
 800aa1e:	9a07      	ldr	r2, [sp, #28]
 800aa20:	f012 0701 	ands.w	r7, r2, #1
 800aa24:	f000 82e2 	beq.w	800afec <_vfprintf_r+0xc4c>
 800aa28:	ea54 0305 	orrs.w	r3, r4, r5
 800aa2c:	f000 856b 	beq.w	800b506 <_vfprintf_r+0x1166>
 800aa30:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800aa34:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
 800aa38:	2700      	movs	r7, #0
 800aa3a:	9a07      	ldr	r2, [sp, #28]
 800aa3c:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800aa40:	2330      	movs	r3, #48	; 0x30
 800aa42:	45bb      	cmp	fp, r7
 800aa44:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 800aa48:	f042 0302 	orr.w	r3, r2, #2
 800aa4c:	f2c0 872d 	blt.w	800b8aa <_vfprintf_r+0x150a>
 800aa50:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 800aa54:	f043 0302 	orr.w	r3, r3, #2
 800aa58:	9307      	str	r3, [sp, #28]
 800aa5a:	ae30      	add	r6, sp, #192	; 0xc0
 800aa5c:	0923      	lsrs	r3, r4, #4
 800aa5e:	f004 010f 	and.w	r1, r4, #15
 800aa62:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 800aa66:	092a      	lsrs	r2, r5, #4
 800aa68:	461c      	mov	r4, r3
 800aa6a:	4615      	mov	r5, r2
 800aa6c:	5c43      	ldrb	r3, [r0, r1]
 800aa6e:	f806 3d01 	strb.w	r3, [r6, #-1]!
 800aa72:	ea54 0305 	orrs.w	r3, r4, r5
 800aa76:	d1f1      	bne.n	800aa5c <_vfprintf_r+0x6bc>
 800aa78:	e696      	b.n	800a7a8 <_vfprintf_r+0x408>
 800aa7a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800aa7c:	9311      	str	r3, [sp, #68]	; 0x44
 800aa7e:	680a      	ldr	r2, [r1, #0]
 800aa80:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 800aa84:	2300      	movs	r3, #0
 800aa86:	460a      	mov	r2, r1
 800aa88:	461f      	mov	r7, r3
 800aa8a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800aa8e:	3204      	adds	r2, #4
 800aa90:	2301      	movs	r3, #1
 800aa92:	9309      	str	r3, [sp, #36]	; 0x24
 800aa94:	46bb      	mov	fp, r7
 800aa96:	9713      	str	r7, [sp, #76]	; 0x4c
 800aa98:	920e      	str	r2, [sp, #56]	; 0x38
 800aa9a:	930d      	str	r3, [sp, #52]	; 0x34
 800aa9c:	ae26      	add	r6, sp, #152	; 0x98
 800aa9e:	e691      	b.n	800a7c4 <_vfprintf_r+0x424>
 800aaa0:	9311      	str	r3, [sp, #68]	; 0x44
 800aaa2:	46ab      	mov	fp, r5
 800aaa4:	2a00      	cmp	r2, #0
 800aaa6:	f040 87cd 	bne.w	800ba44 <_vfprintf_r+0x16a4>
 800aaaa:	9b07      	ldr	r3, [sp, #28]
 800aaac:	069f      	lsls	r7, r3, #26
 800aaae:	d57a      	bpl.n	800aba6 <_vfprintf_r+0x806>
 800aab0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800aab2:	3707      	adds	r7, #7
 800aab4:	f027 0707 	bic.w	r7, r7, #7
 800aab8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aabc:	f107 0108 	add.w	r1, r7, #8
 800aac0:	910e      	str	r1, [sp, #56]	; 0x38
 800aac2:	4614      	mov	r4, r2
 800aac4:	461d      	mov	r5, r3
 800aac6:	2a00      	cmp	r2, #0
 800aac8:	f173 0300 	sbcs.w	r3, r3, #0
 800aacc:	f2c0 8438 	blt.w	800b340 <_vfprintf_r+0xfa0>
 800aad0:	f1bb 0f00 	cmp.w	fp, #0
 800aad4:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800aad8:	f2c0 835b 	blt.w	800b192 <_vfprintf_r+0xdf2>
 800aadc:	9b07      	ldr	r3, [sp, #28]
 800aade:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aae2:	9307      	str	r3, [sp, #28]
 800aae4:	ea54 0305 	orrs.w	r3, r4, r5
 800aae8:	f47f ae44 	bne.w	800a774 <_vfprintf_r+0x3d4>
 800aaec:	f1bb 0f00 	cmp.w	fp, #0
 800aaf0:	f040 8414 	bne.w	800b31c <_vfprintf_r+0xf7c>
 800aaf4:	f04f 0b00 	mov.w	fp, #0
 800aaf8:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 800aafc:	ae30      	add	r6, sp, #192	; 0xc0
 800aafe:	e656      	b.n	800a7ae <_vfprintf_r+0x40e>
 800ab00:	0800f2a8 	.word	0x0800f2a8
 800ab04:	0800f298 	.word	0x0800f298
 800ab08:	0800f254 	.word	0x0800f254
 800ab0c:	9b07      	ldr	r3, [sp, #28]
 800ab0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab12:	9307      	str	r3, [sp, #28]
 800ab14:	f898 3000 	ldrb.w	r3, [r8]
 800ab18:	e4b5      	b.n	800a486 <_vfprintf_r+0xe6>
 800ab1a:	f898 3000 	ldrb.w	r3, [r8]
 800ab1e:	2b6c      	cmp	r3, #108	; 0x6c
 800ab20:	f000 85c8 	beq.w	800b6b4 <_vfprintf_r+0x1314>
 800ab24:	9807      	ldr	r0, [sp, #28]
 800ab26:	f040 0010 	orr.w	r0, r0, #16
 800ab2a:	9007      	str	r0, [sp, #28]
 800ab2c:	e4ab      	b.n	800a486 <_vfprintf_r+0xe6>
 800ab2e:	2a00      	cmp	r2, #0
 800ab30:	f040 8784 	bne.w	800ba3c <_vfprintf_r+0x169c>
 800ab34:	9b07      	ldr	r3, [sp, #28]
 800ab36:	069f      	lsls	r7, r3, #26
 800ab38:	f140 8413 	bpl.w	800b362 <_vfprintf_r+0xfc2>
 800ab3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ab40:	6813      	ldr	r3, [r2, #0]
 800ab42:	17cd      	asrs	r5, r1, #31
 800ab44:	4608      	mov	r0, r1
 800ab46:	3204      	adds	r2, #4
 800ab48:	4629      	mov	r1, r5
 800ab4a:	920e      	str	r2, [sp, #56]	; 0x38
 800ab4c:	e9c3 0100 	strd	r0, r1, [r3]
 800ab50:	e466      	b.n	800a420 <_vfprintf_r+0x80>
 800ab52:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800ab54:	6823      	ldr	r3, [r4, #0]
 800ab56:	930c      	str	r3, [sp, #48]	; 0x30
 800ab58:	4618      	mov	r0, r3
 800ab5a:	2800      	cmp	r0, #0
 800ab5c:	4623      	mov	r3, r4
 800ab5e:	f103 0304 	add.w	r3, r3, #4
 800ab62:	f6ff acf2 	blt.w	800a54a <_vfprintf_r+0x1aa>
 800ab66:	930e      	str	r3, [sp, #56]	; 0x38
 800ab68:	f898 3000 	ldrb.w	r3, [r8]
 800ab6c:	e48b      	b.n	800a486 <_vfprintf_r+0xe6>
 800ab6e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800ab72:	2300      	movs	r3, #0
 800ab74:	461c      	mov	r4, r3
 800ab76:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ab7a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800ab7e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800ab82:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800ab86:	2809      	cmp	r0, #9
 800ab88:	d9f5      	bls.n	800ab76 <_vfprintf_r+0x7d6>
 800ab8a:	940c      	str	r4, [sp, #48]	; 0x30
 800ab8c:	e47d      	b.n	800a48a <_vfprintf_r+0xea>
 800ab8e:	9311      	str	r3, [sp, #68]	; 0x44
 800ab90:	46ab      	mov	fp, r5
 800ab92:	2a00      	cmp	r2, #0
 800ab94:	f040 8771 	bne.w	800ba7a <_vfprintf_r+0x16da>
 800ab98:	9b07      	ldr	r3, [sp, #28]
 800ab9a:	f043 0310 	orr.w	r3, r3, #16
 800ab9e:	9307      	str	r3, [sp, #28]
 800aba0:	9b07      	ldr	r3, [sp, #28]
 800aba2:	069f      	lsls	r7, r3, #26
 800aba4:	d484      	bmi.n	800aab0 <_vfprintf_r+0x710>
 800aba6:	9b07      	ldr	r3, [sp, #28]
 800aba8:	06de      	lsls	r6, r3, #27
 800abaa:	f100 82bc 	bmi.w	800b126 <_vfprintf_r+0xd86>
 800abae:	9b07      	ldr	r3, [sp, #28]
 800abb0:	065d      	lsls	r5, r3, #25
 800abb2:	f140 82b8 	bpl.w	800b126 <_vfprintf_r+0xd86>
 800abb6:	990e      	ldr	r1, [sp, #56]	; 0x38
 800abb8:	f9b1 4000 	ldrsh.w	r4, [r1]
 800abbc:	3104      	adds	r1, #4
 800abbe:	17e5      	asrs	r5, r4, #31
 800abc0:	4622      	mov	r2, r4
 800abc2:	462b      	mov	r3, r5
 800abc4:	910e      	str	r1, [sp, #56]	; 0x38
 800abc6:	e77e      	b.n	800aac6 <_vfprintf_r+0x726>
 800abc8:	9311      	str	r3, [sp, #68]	; 0x44
 800abca:	46ab      	mov	fp, r5
 800abcc:	2a00      	cmp	r2, #0
 800abce:	f040 8758 	bne.w	800ba82 <_vfprintf_r+0x16e2>
 800abd2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800abd4:	3707      	adds	r7, #7
 800abd6:	f027 0307 	bic.w	r3, r7, #7
 800abda:	f103 0208 	add.w	r2, r3, #8
 800abde:	920e      	str	r2, [sp, #56]	; 0x38
 800abe0:	681a      	ldr	r2, [r3, #0]
 800abe2:	9214      	str	r2, [sp, #80]	; 0x50
 800abe4:	685b      	ldr	r3, [r3, #4]
 800abe6:	9315      	str	r3, [sp, #84]	; 0x54
 800abe8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abea:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800abec:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800abf0:	4628      	mov	r0, r5
 800abf2:	4621      	mov	r1, r4
 800abf4:	f04f 32ff 	mov.w	r2, #4294967295
 800abf8:	4bb5      	ldr	r3, [pc, #724]	; (800aed0 <_vfprintf_r+0xb30>)
 800abfa:	f7f6 fac1 	bl	8001180 <__aeabi_dcmpun>
 800abfe:	2800      	cmp	r0, #0
 800ac00:	f040 83c6 	bne.w	800b390 <_vfprintf_r+0xff0>
 800ac04:	4628      	mov	r0, r5
 800ac06:	4621      	mov	r1, r4
 800ac08:	f04f 32ff 	mov.w	r2, #4294967295
 800ac0c:	4bb0      	ldr	r3, [pc, #704]	; (800aed0 <_vfprintf_r+0xb30>)
 800ac0e:	f7f5 ffb1 	bl	8000b74 <__aeabi_dcmple>
 800ac12:	2800      	cmp	r0, #0
 800ac14:	f040 83bc 	bne.w	800b390 <_vfprintf_r+0xff0>
 800ac18:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ac1a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	2300      	movs	r3, #0
 800ac20:	f7f5 ff9e 	bl	8000b60 <__aeabi_dcmplt>
 800ac24:	2800      	cmp	r0, #0
 800ac26:	f040 8646 	bne.w	800b8b6 <_vfprintf_r+0x1516>
 800ac2a:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800ac2e:	4ea9      	ldr	r6, [pc, #676]	; (800aed4 <_vfprintf_r+0xb34>)
 800ac30:	4ba9      	ldr	r3, [pc, #676]	; (800aed8 <_vfprintf_r+0xb38>)
 800ac32:	9907      	ldr	r1, [sp, #28]
 800ac34:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ac38:	9107      	str	r1, [sp, #28]
 800ac3a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ac3c:	2203      	movs	r2, #3
 800ac3e:	f04f 0b00 	mov.w	fp, #0
 800ac42:	9209      	str	r2, [sp, #36]	; 0x24
 800ac44:	2947      	cmp	r1, #71	; 0x47
 800ac46:	bfd8      	it	le
 800ac48:	461e      	movle	r6, r3
 800ac4a:	920d      	str	r2, [sp, #52]	; 0x34
 800ac4c:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 800ac50:	e5b4      	b.n	800a7bc <_vfprintf_r+0x41c>
 800ac52:	9b07      	ldr	r3, [sp, #28]
 800ac54:	f043 0308 	orr.w	r3, r3, #8
 800ac58:	9307      	str	r3, [sp, #28]
 800ac5a:	f898 3000 	ldrb.w	r3, [r8]
 800ac5e:	e412      	b.n	800a486 <_vfprintf_r+0xe6>
 800ac60:	9311      	str	r3, [sp, #68]	; 0x44
 800ac62:	46ab      	mov	fp, r5
 800ac64:	2a00      	cmp	r2, #0
 800ac66:	f43f ad6a 	beq.w	800a73e <_vfprintf_r+0x39e>
 800ac6a:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800ac6e:	e566      	b.n	800a73e <_vfprintf_r+0x39e>
 800ac70:	9311      	str	r3, [sp, #68]	; 0x44
 800ac72:	46ab      	mov	fp, r5
 800ac74:	2a00      	cmp	r2, #0
 800ac76:	f040 8708 	bne.w	800ba8a <_vfprintf_r+0x16ea>
 800ac7a:	9b07      	ldr	r3, [sp, #28]
 800ac7c:	4897      	ldr	r0, [pc, #604]	; (800aedc <_vfprintf_r+0xb3c>)
 800ac7e:	069c      	lsls	r4, r3, #26
 800ac80:	f53f aec4 	bmi.w	800aa0c <_vfprintf_r+0x66c>
 800ac84:	9b07      	ldr	r3, [sp, #28]
 800ac86:	06d9      	lsls	r1, r3, #27
 800ac88:	f140 841f 	bpl.w	800b4ca <_vfprintf_r+0x112a>
 800ac8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac8e:	4613      	mov	r3, r2
 800ac90:	3304      	adds	r3, #4
 800ac92:	6814      	ldr	r4, [r2, #0]
 800ac94:	930e      	str	r3, [sp, #56]	; 0x38
 800ac96:	2500      	movs	r5, #0
 800ac98:	e6c1      	b.n	800aa1e <_vfprintf_r+0x67e>
 800ac9a:	f898 3000 	ldrb.w	r3, [r8]
 800ac9e:	2900      	cmp	r1, #0
 800aca0:	f47f abf1 	bne.w	800a486 <_vfprintf_r+0xe6>
 800aca4:	2201      	movs	r2, #1
 800aca6:	2120      	movs	r1, #32
 800aca8:	f7ff bbed 	b.w	800a486 <_vfprintf_r+0xe6>
 800acac:	9b07      	ldr	r3, [sp, #28]
 800acae:	f043 0301 	orr.w	r3, r3, #1
 800acb2:	9307      	str	r3, [sp, #28]
 800acb4:	f898 3000 	ldrb.w	r3, [r8]
 800acb8:	f7ff bbe5 	b.w	800a486 <_vfprintf_r+0xe6>
 800acbc:	9b07      	ldr	r3, [sp, #28]
 800acbe:	f043 0320 	orr.w	r3, r3, #32
 800acc2:	9307      	str	r3, [sp, #28]
 800acc4:	f898 3000 	ldrb.w	r3, [r8]
 800acc8:	f7ff bbdd 	b.w	800a486 <_vfprintf_r+0xe6>
 800accc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800acce:	9311      	str	r3, [sp, #68]	; 0x44
 800acd0:	6816      	ldr	r6, [r2, #0]
 800acd2:	2400      	movs	r4, #0
 800acd4:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
 800acd8:	1d17      	adds	r7, r2, #4
 800acda:	2e00      	cmp	r6, #0
 800acdc:	f000 85c2 	beq.w	800b864 <_vfprintf_r+0x14c4>
 800ace0:	2d00      	cmp	r5, #0
 800ace2:	f2c0 84fe 	blt.w	800b6e2 <_vfprintf_r+0x1342>
 800ace6:	462a      	mov	r2, r5
 800ace8:	4621      	mov	r1, r4
 800acea:	4630      	mov	r0, r6
 800acec:	f7f6 f9f8 	bl	80010e0 <memchr>
 800acf0:	2800      	cmp	r0, #0
 800acf2:	f000 8600 	beq.w	800b8f6 <_vfprintf_r+0x1556>
 800acf6:	1b83      	subs	r3, r0, r6
 800acf8:	930d      	str	r3, [sp, #52]	; 0x34
 800acfa:	46a3      	mov	fp, r4
 800acfc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ad00:	970e      	str	r7, [sp, #56]	; 0x38
 800ad02:	9309      	str	r3, [sp, #36]	; 0x24
 800ad04:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 800ad08:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800ad0c:	e556      	b.n	800a7bc <_vfprintf_r+0x41c>
 800ad0e:	f898 3000 	ldrb.w	r3, [r8]
 800ad12:	2201      	movs	r2, #1
 800ad14:	212b      	movs	r1, #43	; 0x2b
 800ad16:	f7ff bbb6 	b.w	800a486 <_vfprintf_r+0xe6>
 800ad1a:	4870      	ldr	r0, [pc, #448]	; (800aedc <_vfprintf_r+0xb3c>)
 800ad1c:	9211      	str	r2, [sp, #68]	; 0x44
 800ad1e:	f1bb 0f00 	cmp.w	fp, #0
 800ad22:	f040 8174 	bne.w	800b00e <_vfprintf_r+0xc6e>
 800ad26:	465f      	mov	r7, fp
 800ad28:	e6e4      	b.n	800aaf4 <_vfprintf_r+0x754>
 800ad2a:	9311      	str	r3, [sp, #68]	; 0x44
 800ad2c:	2a00      	cmp	r2, #0
 800ad2e:	f040 8695 	bne.w	800ba5c <_vfprintf_r+0x16bc>
 800ad32:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ad34:	2a00      	cmp	r2, #0
 800ad36:	f43f ac5b 	beq.w	800a5f0 <_vfprintf_r+0x250>
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	2101      	movs	r1, #1
 800ad3e:	461f      	mov	r7, r3
 800ad40:	9109      	str	r1, [sp, #36]	; 0x24
 800ad42:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 800ad46:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800ad4a:	469b      	mov	fp, r3
 800ad4c:	9313      	str	r3, [sp, #76]	; 0x4c
 800ad4e:	910d      	str	r1, [sp, #52]	; 0x34
 800ad50:	ae26      	add	r6, sp, #152	; 0x98
 800ad52:	e537      	b.n	800a7c4 <_vfprintf_r+0x424>
 800ad54:	f1bb 0f00 	cmp.w	fp, #0
 800ad58:	f000 85d8 	beq.w	800b90c <_vfprintf_r+0x156c>
 800ad5c:	2700      	movs	r7, #0
 800ad5e:	2400      	movs	r4, #0
 800ad60:	2500      	movs	r5, #0
 800ad62:	e478      	b.n	800a656 <_vfprintf_r+0x2b6>
 800ad64:	485d      	ldr	r0, [pc, #372]	; (800aedc <_vfprintf_r+0xb3c>)
 800ad66:	9307      	str	r3, [sp, #28]
 800ad68:	9211      	str	r2, [sp, #68]	; 0x44
 800ad6a:	ea54 0305 	orrs.w	r3, r4, r5
 800ad6e:	970e      	str	r7, [sp, #56]	; 0x38
 800ad70:	f04f 0700 	mov.w	r7, #0
 800ad74:	f47f ae71 	bne.w	800aa5a <_vfprintf_r+0x6ba>
 800ad78:	2400      	movs	r4, #0
 800ad7a:	2500      	movs	r5, #0
 800ad7c:	e66d      	b.n	800aa5a <_vfprintf_r+0x6ba>
 800ad7e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800ad80:	e577      	b.n	800a872 <_vfprintf_r+0x4d2>
 800ad82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad84:	2b65      	cmp	r3, #101	; 0x65
 800ad86:	f340 80af 	ble.w	800aee8 <_vfprintf_r+0xb48>
 800ad8a:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ad8c:	9915      	ldr	r1, [sp, #84]	; 0x54
 800ad8e:	2200      	movs	r2, #0
 800ad90:	2300      	movs	r3, #0
 800ad92:	f7f5 fedb 	bl	8000b4c <__aeabi_dcmpeq>
 800ad96:	2800      	cmp	r0, #0
 800ad98:	f000 813b 	beq.w	800b012 <_vfprintf_r+0xc72>
 800ad9c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ad9e:	4a50      	ldr	r2, [pc, #320]	; (800aee0 <_vfprintf_r+0xb40>)
 800ada0:	f8c9 2000 	str.w	r2, [r9]
 800ada4:	3301      	adds	r3, #1
 800ada6:	3401      	adds	r4, #1
 800ada8:	2201      	movs	r2, #1
 800adaa:	2b07      	cmp	r3, #7
 800adac:	9425      	str	r4, [sp, #148]	; 0x94
 800adae:	9324      	str	r3, [sp, #144]	; 0x90
 800adb0:	f8c9 2004 	str.w	r2, [r9, #4]
 800adb4:	f300 83b2 	bgt.w	800b51c <_vfprintf_r+0x117c>
 800adb8:	f109 0908 	add.w	r9, r9, #8
 800adbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800adbe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800adc0:	4293      	cmp	r3, r2
 800adc2:	db03      	blt.n	800adcc <_vfprintf_r+0xa2c>
 800adc4:	9b07      	ldr	r3, [sp, #28]
 800adc6:	07d8      	lsls	r0, r3, #31
 800adc8:	f57f adc3 	bpl.w	800a952 <_vfprintf_r+0x5b2>
 800adcc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800adce:	9916      	ldr	r1, [sp, #88]	; 0x58
 800add0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800add2:	f8c9 2000 	str.w	r2, [r9]
 800add6:	3301      	adds	r3, #1
 800add8:	440c      	add	r4, r1
 800adda:	2b07      	cmp	r3, #7
 800addc:	9425      	str	r4, [sp, #148]	; 0x94
 800adde:	f8c9 1004 	str.w	r1, [r9, #4]
 800ade2:	9324      	str	r3, [sp, #144]	; 0x90
 800ade4:	f300 8470 	bgt.w	800b6c8 <_vfprintf_r+0x1328>
 800ade8:	f109 0908 	add.w	r9, r9, #8
 800adec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800adee:	1e5d      	subs	r5, r3, #1
 800adf0:	2d00      	cmp	r5, #0
 800adf2:	f77f adae 	ble.w	800a952 <_vfprintf_r+0x5b2>
 800adf6:	4a3b      	ldr	r2, [pc, #236]	; (800aee4 <_vfprintf_r+0xb44>)
 800adf8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800adfa:	920f      	str	r2, [sp, #60]	; 0x3c
 800adfc:	2d10      	cmp	r5, #16
 800adfe:	f340 81d2 	ble.w	800b1a6 <_vfprintf_r+0xe06>
 800ae02:	2610      	movs	r6, #16
 800ae04:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800ae06:	f8dd b020 	ldr.w	fp, [sp, #32]
 800ae0a:	e005      	b.n	800ae18 <_vfprintf_r+0xa78>
 800ae0c:	f109 0908 	add.w	r9, r9, #8
 800ae10:	3d10      	subs	r5, #16
 800ae12:	2d10      	cmp	r5, #16
 800ae14:	f340 81c7 	ble.w	800b1a6 <_vfprintf_r+0xe06>
 800ae18:	3301      	adds	r3, #1
 800ae1a:	3410      	adds	r4, #16
 800ae1c:	2b07      	cmp	r3, #7
 800ae1e:	9425      	str	r4, [sp, #148]	; 0x94
 800ae20:	9324      	str	r3, [sp, #144]	; 0x90
 800ae22:	f8c9 a000 	str.w	sl, [r9]
 800ae26:	f8c9 6004 	str.w	r6, [r9, #4]
 800ae2a:	ddef      	ble.n	800ae0c <_vfprintf_r+0xa6c>
 800ae2c:	aa23      	add	r2, sp, #140	; 0x8c
 800ae2e:	4659      	mov	r1, fp
 800ae30:	4638      	mov	r0, r7
 800ae32:	f003 fc8f 	bl	800e754 <__sprint_r>
 800ae36:	2800      	cmp	r0, #0
 800ae38:	f47f abe1 	bne.w	800a5fe <_vfprintf_r+0x25e>
 800ae3c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800ae3e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ae40:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800ae44:	e7e4      	b.n	800ae10 <_vfprintf_r+0xa70>
 800ae46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae4a:	1a9f      	subs	r7, r3, r2
 800ae4c:	2f00      	cmp	r7, #0
 800ae4e:	f77f ad34 	ble.w	800a8ba <_vfprintf_r+0x51a>
 800ae52:	4a24      	ldr	r2, [pc, #144]	; (800aee4 <_vfprintf_r+0xb44>)
 800ae54:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ae56:	920f      	str	r2, [sp, #60]	; 0x3c
 800ae58:	2f10      	cmp	r7, #16
 800ae5a:	dd2b      	ble.n	800aeb4 <_vfprintf_r+0xb14>
 800ae5c:	464a      	mov	r2, r9
 800ae5e:	4621      	mov	r1, r4
 800ae60:	46b9      	mov	r9, r7
 800ae62:	2510      	movs	r5, #16
 800ae64:	4637      	mov	r7, r6
 800ae66:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ae68:	9e08      	ldr	r6, [sp, #32]
 800ae6a:	e006      	b.n	800ae7a <_vfprintf_r+0xada>
 800ae6c:	f1a9 0910 	sub.w	r9, r9, #16
 800ae70:	f1b9 0f10 	cmp.w	r9, #16
 800ae74:	f102 0208 	add.w	r2, r2, #8
 800ae78:	dd18      	ble.n	800aeac <_vfprintf_r+0xb0c>
 800ae7a:	3301      	adds	r3, #1
 800ae7c:	3110      	adds	r1, #16
 800ae7e:	2b07      	cmp	r3, #7
 800ae80:	9125      	str	r1, [sp, #148]	; 0x94
 800ae82:	9324      	str	r3, [sp, #144]	; 0x90
 800ae84:	f8c2 a000 	str.w	sl, [r2]
 800ae88:	6055      	str	r5, [r2, #4]
 800ae8a:	ddef      	ble.n	800ae6c <_vfprintf_r+0xacc>
 800ae8c:	aa23      	add	r2, sp, #140	; 0x8c
 800ae8e:	4631      	mov	r1, r6
 800ae90:	4620      	mov	r0, r4
 800ae92:	f003 fc5f 	bl	800e754 <__sprint_r>
 800ae96:	2800      	cmp	r0, #0
 800ae98:	f47f abb1 	bne.w	800a5fe <_vfprintf_r+0x25e>
 800ae9c:	f1a9 0910 	sub.w	r9, r9, #16
 800aea0:	f1b9 0f10 	cmp.w	r9, #16
 800aea4:	9925      	ldr	r1, [sp, #148]	; 0x94
 800aea6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800aea8:	aa30      	add	r2, sp, #192	; 0xc0
 800aeaa:	dce6      	bgt.n	800ae7a <_vfprintf_r+0xada>
 800aeac:	463e      	mov	r6, r7
 800aeae:	460c      	mov	r4, r1
 800aeb0:	464f      	mov	r7, r9
 800aeb2:	4691      	mov	r9, r2
 800aeb4:	3301      	adds	r3, #1
 800aeb6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aeb8:	9324      	str	r3, [sp, #144]	; 0x90
 800aeba:	443c      	add	r4, r7
 800aebc:	2b07      	cmp	r3, #7
 800aebe:	9425      	str	r4, [sp, #148]	; 0x94
 800aec0:	e889 0084 	stmia.w	r9, {r2, r7}
 800aec4:	f300 822c 	bgt.w	800b320 <_vfprintf_r+0xf80>
 800aec8:	f109 0908 	add.w	r9, r9, #8
 800aecc:	e4f5      	b.n	800a8ba <_vfprintf_r+0x51a>
 800aece:	bf00      	nop
 800aed0:	7fefffff 	.word	0x7fefffff
 800aed4:	0800f248 	.word	0x0800f248
 800aed8:	0800f244 	.word	0x0800f244
 800aedc:	0800f268 	.word	0x0800f268
 800aee0:	0800f284 	.word	0x0800f284
 800aee4:	0800f298 	.word	0x0800f298
 800aee8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aeea:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800aeec:	2b01      	cmp	r3, #1
 800aeee:	f340 81d0 	ble.w	800b292 <_vfprintf_r+0xef2>
 800aef2:	3501      	adds	r5, #1
 800aef4:	3401      	adds	r4, #1
 800aef6:	2301      	movs	r3, #1
 800aef8:	2d07      	cmp	r5, #7
 800aefa:	9425      	str	r4, [sp, #148]	; 0x94
 800aefc:	9524      	str	r5, [sp, #144]	; 0x90
 800aefe:	f8c9 6000 	str.w	r6, [r9]
 800af02:	f8c9 3004 	str.w	r3, [r9, #4]
 800af06:	f300 81e1 	bgt.w	800b2cc <_vfprintf_r+0xf2c>
 800af0a:	f109 0908 	add.w	r9, r9, #8
 800af0e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800af10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af12:	f8c9 3000 	str.w	r3, [r9]
 800af16:	3501      	adds	r5, #1
 800af18:	4414      	add	r4, r2
 800af1a:	2d07      	cmp	r5, #7
 800af1c:	9425      	str	r4, [sp, #148]	; 0x94
 800af1e:	9524      	str	r5, [sp, #144]	; 0x90
 800af20:	f8c9 2004 	str.w	r2, [r9, #4]
 800af24:	f300 81ed 	bgt.w	800b302 <_vfprintf_r+0xf62>
 800af28:	f109 0908 	add.w	r9, r9, #8
 800af2c:	2300      	movs	r3, #0
 800af2e:	9814      	ldr	r0, [sp, #80]	; 0x50
 800af30:	9915      	ldr	r1, [sp, #84]	; 0x54
 800af32:	2200      	movs	r2, #0
 800af34:	f7f5 fe0a 	bl	8000b4c <__aeabi_dcmpeq>
 800af38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af3a:	2800      	cmp	r0, #0
 800af3c:	f040 80c3 	bne.w	800b0c6 <_vfprintf_r+0xd26>
 800af40:	3b01      	subs	r3, #1
 800af42:	3501      	adds	r5, #1
 800af44:	3601      	adds	r6, #1
 800af46:	441c      	add	r4, r3
 800af48:	2d07      	cmp	r5, #7
 800af4a:	9524      	str	r5, [sp, #144]	; 0x90
 800af4c:	9425      	str	r4, [sp, #148]	; 0x94
 800af4e:	f8c9 6000 	str.w	r6, [r9]
 800af52:	f8c9 3004 	str.w	r3, [r9, #4]
 800af56:	f300 81ac 	bgt.w	800b2b2 <_vfprintf_r+0xf12>
 800af5a:	f109 0908 	add.w	r9, r9, #8
 800af5e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800af60:	f8c9 2004 	str.w	r2, [r9, #4]
 800af64:	3501      	adds	r5, #1
 800af66:	4414      	add	r4, r2
 800af68:	ab1f      	add	r3, sp, #124	; 0x7c
 800af6a:	2d07      	cmp	r5, #7
 800af6c:	9425      	str	r4, [sp, #148]	; 0x94
 800af6e:	9524      	str	r5, [sp, #144]	; 0x90
 800af70:	f8c9 3000 	str.w	r3, [r9]
 800af74:	f77f aceb 	ble.w	800a94e <_vfprintf_r+0x5ae>
 800af78:	aa23      	add	r2, sp, #140	; 0x8c
 800af7a:	9908      	ldr	r1, [sp, #32]
 800af7c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800af7e:	f003 fbe9 	bl	800e754 <__sprint_r>
 800af82:	2800      	cmp	r0, #0
 800af84:	f47f ab3b 	bne.w	800a5fe <_vfprintf_r+0x25e>
 800af88:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800af8a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800af8e:	e4e0      	b.n	800a952 <_vfprintf_r+0x5b2>
 800af90:	aa23      	add	r2, sp, #140	; 0x8c
 800af92:	9908      	ldr	r1, [sp, #32]
 800af94:	980a      	ldr	r0, [sp, #40]	; 0x28
 800af96:	f003 fbdd 	bl	800e754 <__sprint_r>
 800af9a:	2800      	cmp	r0, #0
 800af9c:	f43f ad27 	beq.w	800a9ee <_vfprintf_r+0x64e>
 800afa0:	f7ff bb2d 	b.w	800a5fe <_vfprintf_r+0x25e>
 800afa4:	aa23      	add	r2, sp, #140	; 0x8c
 800afa6:	9908      	ldr	r1, [sp, #32]
 800afa8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800afaa:	f003 fbd3 	bl	800e754 <__sprint_r>
 800afae:	2800      	cmp	r0, #0
 800afb0:	f47f ab25 	bne.w	800a5fe <_vfprintf_r+0x25e>
 800afb4:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800afb6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800afba:	e4b7      	b.n	800a92c <_vfprintf_r+0x58c>
 800afbc:	aa23      	add	r2, sp, #140	; 0x8c
 800afbe:	9908      	ldr	r1, [sp, #32]
 800afc0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800afc2:	f003 fbc7 	bl	800e754 <__sprint_r>
 800afc6:	2800      	cmp	r0, #0
 800afc8:	f47f ab19 	bne.w	800a5fe <_vfprintf_r+0x25e>
 800afcc:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800afce:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800afd2:	e45e      	b.n	800a892 <_vfprintf_r+0x4f2>
 800afd4:	aa23      	add	r2, sp, #140	; 0x8c
 800afd6:	9908      	ldr	r1, [sp, #32]
 800afd8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800afda:	f003 fbbb 	bl	800e754 <__sprint_r>
 800afde:	2800      	cmp	r0, #0
 800afe0:	f47f ab0d 	bne.w	800a5fe <_vfprintf_r+0x25e>
 800afe4:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800afe6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800afea:	e462      	b.n	800a8b2 <_vfprintf_r+0x512>
 800afec:	f1bb 0f00 	cmp.w	fp, #0
 800aff0:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800aff4:	f2c0 829e 	blt.w	800b534 <_vfprintf_r+0x1194>
 800aff8:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 800affc:	9307      	str	r3, [sp, #28]
 800affe:	ea54 0305 	orrs.w	r3, r4, r5
 800b002:	f47f ad2a 	bne.w	800aa5a <_vfprintf_r+0x6ba>
 800b006:	f1bb 0f00 	cmp.w	fp, #0
 800b00a:	f43f ae8c 	beq.w	800ad26 <_vfprintf_r+0x986>
 800b00e:	2700      	movs	r7, #0
 800b010:	e6b2      	b.n	800ad78 <_vfprintf_r+0x9d8>
 800b012:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800b014:	2d00      	cmp	r5, #0
 800b016:	f340 828f 	ble.w	800b538 <_vfprintf_r+0x1198>
 800b01a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b01c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b01e:	4293      	cmp	r3, r2
 800b020:	bfa8      	it	ge
 800b022:	4613      	movge	r3, r2
 800b024:	2b00      	cmp	r3, #0
 800b026:	461d      	mov	r5, r3
 800b028:	dd0d      	ble.n	800b046 <_vfprintf_r+0xca6>
 800b02a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b02c:	f8c9 6000 	str.w	r6, [r9]
 800b030:	3301      	adds	r3, #1
 800b032:	442c      	add	r4, r5
 800b034:	2b07      	cmp	r3, #7
 800b036:	9425      	str	r4, [sp, #148]	; 0x94
 800b038:	f8c9 5004 	str.w	r5, [r9, #4]
 800b03c:	9324      	str	r3, [sp, #144]	; 0x90
 800b03e:	f300 8384 	bgt.w	800b74a <_vfprintf_r+0x13aa>
 800b042:	f109 0908 	add.w	r9, r9, #8
 800b046:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b048:	2d00      	cmp	r5, #0
 800b04a:	bfa8      	it	ge
 800b04c:	1b5b      	subge	r3, r3, r5
 800b04e:	2b00      	cmp	r3, #0
 800b050:	461d      	mov	r5, r3
 800b052:	f340 80be 	ble.w	800b1d2 <_vfprintf_r+0xe32>
 800b056:	4ab9      	ldr	r2, [pc, #740]	; (800b33c <_vfprintf_r+0xf9c>)
 800b058:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b05a:	920f      	str	r2, [sp, #60]	; 0x3c
 800b05c:	2d10      	cmp	r5, #16
 800b05e:	f340 8245 	ble.w	800b4ec <_vfprintf_r+0x114c>
 800b062:	4622      	mov	r2, r4
 800b064:	2710      	movs	r7, #16
 800b066:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800b06a:	9c08      	ldr	r4, [sp, #32]
 800b06c:	e005      	b.n	800b07a <_vfprintf_r+0xcda>
 800b06e:	f109 0908 	add.w	r9, r9, #8
 800b072:	3d10      	subs	r5, #16
 800b074:	2d10      	cmp	r5, #16
 800b076:	f340 8238 	ble.w	800b4ea <_vfprintf_r+0x114a>
 800b07a:	3301      	adds	r3, #1
 800b07c:	3210      	adds	r2, #16
 800b07e:	2b07      	cmp	r3, #7
 800b080:	9225      	str	r2, [sp, #148]	; 0x94
 800b082:	9324      	str	r3, [sp, #144]	; 0x90
 800b084:	f8c9 a000 	str.w	sl, [r9]
 800b088:	f8c9 7004 	str.w	r7, [r9, #4]
 800b08c:	ddef      	ble.n	800b06e <_vfprintf_r+0xcce>
 800b08e:	aa23      	add	r2, sp, #140	; 0x8c
 800b090:	4621      	mov	r1, r4
 800b092:	4658      	mov	r0, fp
 800b094:	f003 fb5e 	bl	800e754 <__sprint_r>
 800b098:	2800      	cmp	r0, #0
 800b09a:	f47f aab0 	bne.w	800a5fe <_vfprintf_r+0x25e>
 800b09e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800b0a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b0a2:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b0a6:	e7e4      	b.n	800b072 <_vfprintf_r+0xcd2>
 800b0a8:	aa23      	add	r2, sp, #140	; 0x8c
 800b0aa:	9908      	ldr	r1, [sp, #32]
 800b0ac:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b0ae:	f003 fb51 	bl	800e754 <__sprint_r>
 800b0b2:	2800      	cmp	r0, #0
 800b0b4:	f47f aaa3 	bne.w	800a5fe <_vfprintf_r+0x25e>
 800b0b8:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800b0bc:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800b0be:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b0c2:	f7ff bbd6 	b.w	800a872 <_vfprintf_r+0x4d2>
 800b0c6:	1e5e      	subs	r6, r3, #1
 800b0c8:	2e00      	cmp	r6, #0
 800b0ca:	f77f af48 	ble.w	800af5e <_vfprintf_r+0xbbe>
 800b0ce:	4b9b      	ldr	r3, [pc, #620]	; (800b33c <_vfprintf_r+0xf9c>)
 800b0d0:	930f      	str	r3, [sp, #60]	; 0x3c
 800b0d2:	2e10      	cmp	r6, #16
 800b0d4:	f340 810a 	ble.w	800b2ec <_vfprintf_r+0xf4c>
 800b0d8:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 800b0dc:	2710      	movs	r7, #16
 800b0de:	46b0      	mov	r8, r6
 800b0e0:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800b0e4:	9e08      	ldr	r6, [sp, #32]
 800b0e6:	e007      	b.n	800b0f8 <_vfprintf_r+0xd58>
 800b0e8:	f109 0908 	add.w	r9, r9, #8
 800b0ec:	f1a8 0810 	sub.w	r8, r8, #16
 800b0f0:	f1b8 0f10 	cmp.w	r8, #16
 800b0f4:	f340 80f7 	ble.w	800b2e6 <_vfprintf_r+0xf46>
 800b0f8:	3501      	adds	r5, #1
 800b0fa:	3410      	adds	r4, #16
 800b0fc:	2d07      	cmp	r5, #7
 800b0fe:	9425      	str	r4, [sp, #148]	; 0x94
 800b100:	9524      	str	r5, [sp, #144]	; 0x90
 800b102:	f8c9 a000 	str.w	sl, [r9]
 800b106:	f8c9 7004 	str.w	r7, [r9, #4]
 800b10a:	dded      	ble.n	800b0e8 <_vfprintf_r+0xd48>
 800b10c:	aa23      	add	r2, sp, #140	; 0x8c
 800b10e:	4631      	mov	r1, r6
 800b110:	4658      	mov	r0, fp
 800b112:	f003 fb1f 	bl	800e754 <__sprint_r>
 800b116:	2800      	cmp	r0, #0
 800b118:	f47f aa71 	bne.w	800a5fe <_vfprintf_r+0x25e>
 800b11c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800b11e:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800b120:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b124:	e7e2      	b.n	800b0ec <_vfprintf_r+0xd4c>
 800b126:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b128:	6814      	ldr	r4, [r2, #0]
 800b12a:	4613      	mov	r3, r2
 800b12c:	3304      	adds	r3, #4
 800b12e:	17e5      	asrs	r5, r4, #31
 800b130:	930e      	str	r3, [sp, #56]	; 0x38
 800b132:	4622      	mov	r2, r4
 800b134:	462b      	mov	r3, r5
 800b136:	e4c6      	b.n	800aac6 <_vfprintf_r+0x726>
 800b138:	9907      	ldr	r1, [sp, #28]
 800b13a:	f011 0210 	ands.w	r2, r1, #16
 800b13e:	d015      	beq.n	800b16c <_vfprintf_r+0xdcc>
 800b140:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b142:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800b146:	f1bb 0f00 	cmp.w	fp, #0
 800b14a:	6804      	ldr	r4, [r0, #0]
 800b14c:	f100 0704 	add.w	r7, r0, #4
 800b150:	f04f 0500 	mov.w	r5, #0
 800b154:	db1b      	blt.n	800b18e <_vfprintf_r+0xdee>
 800b156:	460a      	mov	r2, r1
 800b158:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b15c:	9207      	str	r2, [sp, #28]
 800b15e:	ea54 0205 	orrs.w	r2, r4, r5
 800b162:	970e      	str	r7, [sp, #56]	; 0x38
 800b164:	461f      	mov	r7, r3
 800b166:	f47f ab05 	bne.w	800a774 <_vfprintf_r+0x3d4>
 800b16a:	e4bf      	b.n	800aaec <_vfprintf_r+0x74c>
 800b16c:	9907      	ldr	r1, [sp, #28]
 800b16e:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 800b172:	f040 8256 	bne.w	800b622 <_vfprintf_r+0x1282>
 800b176:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b178:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800b17c:	f1bb 0f00 	cmp.w	fp, #0
 800b180:	680c      	ldr	r4, [r1, #0]
 800b182:	f101 0704 	add.w	r7, r1, #4
 800b186:	f04f 0500 	mov.w	r5, #0
 800b18a:	f280 819c 	bge.w	800b4c6 <_vfprintf_r+0x1126>
 800b18e:	970e      	str	r7, [sp, #56]	; 0x38
 800b190:	461f      	mov	r7, r3
 800b192:	ea54 0305 	orrs.w	r3, r4, r5
 800b196:	f47f aaed 	bne.w	800a774 <_vfprintf_r+0x3d4>
 800b19a:	ae40      	add	r6, sp, #256	; 0x100
 800b19c:	3430      	adds	r4, #48	; 0x30
 800b19e:	f806 4d41 	strb.w	r4, [r6, #-65]!
 800b1a2:	f7ff bb01 	b.w	800a7a8 <_vfprintf_r+0x408>
 800b1a6:	3301      	adds	r3, #1
 800b1a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b1aa:	9324      	str	r3, [sp, #144]	; 0x90
 800b1ac:	442c      	add	r4, r5
 800b1ae:	2b07      	cmp	r3, #7
 800b1b0:	9425      	str	r4, [sp, #148]	; 0x94
 800b1b2:	e889 0024 	stmia.w	r9, {r2, r5}
 800b1b6:	f77f abca 	ble.w	800a94e <_vfprintf_r+0x5ae>
 800b1ba:	e6dd      	b.n	800af78 <_vfprintf_r+0xbd8>
 800b1bc:	aa23      	add	r2, sp, #140	; 0x8c
 800b1be:	9908      	ldr	r1, [sp, #32]
 800b1c0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b1c2:	f003 fac7 	bl	800e754 <__sprint_r>
 800b1c6:	2800      	cmp	r0, #0
 800b1c8:	f47f aa19 	bne.w	800a5fe <_vfprintf_r+0x25e>
 800b1cc:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800b1ce:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b1d2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b1d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b1d6:	4432      	add	r2, r6
 800b1d8:	4617      	mov	r7, r2
 800b1da:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	db47      	blt.n	800b270 <_vfprintf_r+0xed0>
 800b1e0:	9a07      	ldr	r2, [sp, #28]
 800b1e2:	07d2      	lsls	r2, r2, #31
 800b1e4:	d444      	bmi.n	800b270 <_vfprintf_r+0xed0>
 800b1e6:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b1e8:	440e      	add	r6, r1
 800b1ea:	1bf5      	subs	r5, r6, r7
 800b1ec:	1acb      	subs	r3, r1, r3
 800b1ee:	429d      	cmp	r5, r3
 800b1f0:	bfa8      	it	ge
 800b1f2:	461d      	movge	r5, r3
 800b1f4:	2d00      	cmp	r5, #0
 800b1f6:	462e      	mov	r6, r5
 800b1f8:	dd0d      	ble.n	800b216 <_vfprintf_r+0xe76>
 800b1fa:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b1fc:	f8c9 7000 	str.w	r7, [r9]
 800b200:	3201      	adds	r2, #1
 800b202:	442c      	add	r4, r5
 800b204:	2a07      	cmp	r2, #7
 800b206:	9425      	str	r4, [sp, #148]	; 0x94
 800b208:	f8c9 5004 	str.w	r5, [r9, #4]
 800b20c:	9224      	str	r2, [sp, #144]	; 0x90
 800b20e:	f300 831a 	bgt.w	800b846 <_vfprintf_r+0x14a6>
 800b212:	f109 0908 	add.w	r9, r9, #8
 800b216:	2e00      	cmp	r6, #0
 800b218:	bfac      	ite	ge
 800b21a:	1b9d      	subge	r5, r3, r6
 800b21c:	461d      	movlt	r5, r3
 800b21e:	2d00      	cmp	r5, #0
 800b220:	f77f ab97 	ble.w	800a952 <_vfprintf_r+0x5b2>
 800b224:	4a45      	ldr	r2, [pc, #276]	; (800b33c <_vfprintf_r+0xf9c>)
 800b226:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b228:	920f      	str	r2, [sp, #60]	; 0x3c
 800b22a:	2d10      	cmp	r5, #16
 800b22c:	ddbb      	ble.n	800b1a6 <_vfprintf_r+0xe06>
 800b22e:	2610      	movs	r6, #16
 800b230:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800b232:	f8dd b020 	ldr.w	fp, [sp, #32]
 800b236:	e004      	b.n	800b242 <_vfprintf_r+0xea2>
 800b238:	f109 0908 	add.w	r9, r9, #8
 800b23c:	3d10      	subs	r5, #16
 800b23e:	2d10      	cmp	r5, #16
 800b240:	ddb1      	ble.n	800b1a6 <_vfprintf_r+0xe06>
 800b242:	3301      	adds	r3, #1
 800b244:	3410      	adds	r4, #16
 800b246:	2b07      	cmp	r3, #7
 800b248:	9425      	str	r4, [sp, #148]	; 0x94
 800b24a:	9324      	str	r3, [sp, #144]	; 0x90
 800b24c:	f8c9 a000 	str.w	sl, [r9]
 800b250:	f8c9 6004 	str.w	r6, [r9, #4]
 800b254:	ddf0      	ble.n	800b238 <_vfprintf_r+0xe98>
 800b256:	aa23      	add	r2, sp, #140	; 0x8c
 800b258:	4659      	mov	r1, fp
 800b25a:	4638      	mov	r0, r7
 800b25c:	f003 fa7a 	bl	800e754 <__sprint_r>
 800b260:	2800      	cmp	r0, #0
 800b262:	f47f a9cc 	bne.w	800a5fe <_vfprintf_r+0x25e>
 800b266:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800b268:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b26a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b26e:	e7e5      	b.n	800b23c <_vfprintf_r+0xe9c>
 800b270:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b272:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b274:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800b276:	f8c9 1000 	str.w	r1, [r9]
 800b27a:	3201      	adds	r2, #1
 800b27c:	4404      	add	r4, r0
 800b27e:	2a07      	cmp	r2, #7
 800b280:	9425      	str	r4, [sp, #148]	; 0x94
 800b282:	f8c9 0004 	str.w	r0, [r9, #4]
 800b286:	9224      	str	r2, [sp, #144]	; 0x90
 800b288:	f300 8278 	bgt.w	800b77c <_vfprintf_r+0x13dc>
 800b28c:	f109 0908 	add.w	r9, r9, #8
 800b290:	e7a9      	b.n	800b1e6 <_vfprintf_r+0xe46>
 800b292:	9b07      	ldr	r3, [sp, #28]
 800b294:	07df      	lsls	r7, r3, #31
 800b296:	f53f ae2c 	bmi.w	800aef2 <_vfprintf_r+0xb52>
 800b29a:	3501      	adds	r5, #1
 800b29c:	3401      	adds	r4, #1
 800b29e:	2301      	movs	r3, #1
 800b2a0:	2d07      	cmp	r5, #7
 800b2a2:	9425      	str	r4, [sp, #148]	; 0x94
 800b2a4:	9524      	str	r5, [sp, #144]	; 0x90
 800b2a6:	f8c9 6000 	str.w	r6, [r9]
 800b2aa:	f8c9 3004 	str.w	r3, [r9, #4]
 800b2ae:	f77f ae54 	ble.w	800af5a <_vfprintf_r+0xbba>
 800b2b2:	aa23      	add	r2, sp, #140	; 0x8c
 800b2b4:	9908      	ldr	r1, [sp, #32]
 800b2b6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b2b8:	f003 fa4c 	bl	800e754 <__sprint_r>
 800b2bc:	2800      	cmp	r0, #0
 800b2be:	f47f a99e 	bne.w	800a5fe <_vfprintf_r+0x25e>
 800b2c2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800b2c4:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800b2c6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b2ca:	e648      	b.n	800af5e <_vfprintf_r+0xbbe>
 800b2cc:	aa23      	add	r2, sp, #140	; 0x8c
 800b2ce:	9908      	ldr	r1, [sp, #32]
 800b2d0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b2d2:	f003 fa3f 	bl	800e754 <__sprint_r>
 800b2d6:	2800      	cmp	r0, #0
 800b2d8:	f47f a991 	bne.w	800a5fe <_vfprintf_r+0x25e>
 800b2dc:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800b2de:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800b2e0:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b2e4:	e613      	b.n	800af0e <_vfprintf_r+0xb6e>
 800b2e6:	4646      	mov	r6, r8
 800b2e8:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800b2ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b2ee:	3501      	adds	r5, #1
 800b2f0:	4434      	add	r4, r6
 800b2f2:	2d07      	cmp	r5, #7
 800b2f4:	9425      	str	r4, [sp, #148]	; 0x94
 800b2f6:	9524      	str	r5, [sp, #144]	; 0x90
 800b2f8:	e889 0048 	stmia.w	r9, {r3, r6}
 800b2fc:	f77f ae2d 	ble.w	800af5a <_vfprintf_r+0xbba>
 800b300:	e7d7      	b.n	800b2b2 <_vfprintf_r+0xf12>
 800b302:	aa23      	add	r2, sp, #140	; 0x8c
 800b304:	9908      	ldr	r1, [sp, #32]
 800b306:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b308:	f003 fa24 	bl	800e754 <__sprint_r>
 800b30c:	2800      	cmp	r0, #0
 800b30e:	f47f a976 	bne.w	800a5fe <_vfprintf_r+0x25e>
 800b312:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800b314:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800b316:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b31a:	e607      	b.n	800af2c <_vfprintf_r+0xb8c>
 800b31c:	2400      	movs	r4, #0
 800b31e:	e73c      	b.n	800b19a <_vfprintf_r+0xdfa>
 800b320:	aa23      	add	r2, sp, #140	; 0x8c
 800b322:	9908      	ldr	r1, [sp, #32]
 800b324:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b326:	f003 fa15 	bl	800e754 <__sprint_r>
 800b32a:	2800      	cmp	r0, #0
 800b32c:	f47f a967 	bne.w	800a5fe <_vfprintf_r+0x25e>
 800b330:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800b332:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b336:	f7ff bac0 	b.w	800a8ba <_vfprintf_r+0x51a>
 800b33a:	bf00      	nop
 800b33c:	0800f298 	.word	0x0800f298
 800b340:	4264      	negs	r4, r4
 800b342:	f04f 072d 	mov.w	r7, #45	; 0x2d
 800b346:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800b34a:	f1bb 0f00 	cmp.w	fp, #0
 800b34e:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800b352:	f6ff aa0f 	blt.w	800a774 <_vfprintf_r+0x3d4>
 800b356:	9b07      	ldr	r3, [sp, #28]
 800b358:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b35c:	9307      	str	r3, [sp, #28]
 800b35e:	f7ff ba09 	b.w	800a774 <_vfprintf_r+0x3d4>
 800b362:	9b07      	ldr	r3, [sp, #28]
 800b364:	06de      	lsls	r6, r3, #27
 800b366:	d40b      	bmi.n	800b380 <_vfprintf_r+0xfe0>
 800b368:	9b07      	ldr	r3, [sp, #28]
 800b36a:	065d      	lsls	r5, r3, #25
 800b36c:	d508      	bpl.n	800b380 <_vfprintf_r+0xfe0>
 800b36e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b370:	6813      	ldr	r3, [r2, #0]
 800b372:	3204      	adds	r2, #4
 800b374:	920e      	str	r2, [sp, #56]	; 0x38
 800b376:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800b37a:	801a      	strh	r2, [r3, #0]
 800b37c:	f7ff b850 	b.w	800a420 <_vfprintf_r+0x80>
 800b380:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b382:	6813      	ldr	r3, [r2, #0]
 800b384:	3204      	adds	r2, #4
 800b386:	920e      	str	r2, [sp, #56]	; 0x38
 800b388:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b38a:	601a      	str	r2, [r3, #0]
 800b38c:	f7ff b848 	b.w	800a420 <_vfprintf_r+0x80>
 800b390:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800b392:	4622      	mov	r2, r4
 800b394:	4620      	mov	r0, r4
 800b396:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800b398:	4623      	mov	r3, r4
 800b39a:	4621      	mov	r1, r4
 800b39c:	f7f5 fef0 	bl	8001180 <__aeabi_dcmpun>
 800b3a0:	2800      	cmp	r0, #0
 800b3a2:	f040 8306 	bne.w	800b9b2 <_vfprintf_r+0x1612>
 800b3a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b3a8:	f1bb 3fff 	cmp.w	fp, #4294967295
 800b3ac:	f023 0320 	bic.w	r3, r3, #32
 800b3b0:	930d      	str	r3, [sp, #52]	; 0x34
 800b3b2:	f000 827d 	beq.w	800b8b0 <_vfprintf_r+0x1510>
 800b3b6:	2b47      	cmp	r3, #71	; 0x47
 800b3b8:	f000 8176 	beq.w	800b6a8 <_vfprintf_r+0x1308>
 800b3bc:	9b07      	ldr	r3, [sp, #28]
 800b3be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b3c2:	9310      	str	r3, [sp, #64]	; 0x40
 800b3c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b3c6:	1e1f      	subs	r7, r3, #0
 800b3c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b3ca:	9309      	str	r3, [sp, #36]	; 0x24
 800b3cc:	bfbb      	ittet	lt
 800b3ce:	463b      	movlt	r3, r7
 800b3d0:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
 800b3d4:	2300      	movge	r3, #0
 800b3d6:	232d      	movlt	r3, #45	; 0x2d
 800b3d8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b3da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b3dc:	2b66      	cmp	r3, #102	; 0x66
 800b3de:	f000 8250 	beq.w	800b882 <_vfprintf_r+0x14e2>
 800b3e2:	2b46      	cmp	r3, #70	; 0x46
 800b3e4:	f000 8135 	beq.w	800b652 <_vfprintf_r+0x12b2>
 800b3e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3ec:	2b45      	cmp	r3, #69	; 0x45
 800b3ee:	a821      	add	r0, sp, #132	; 0x84
 800b3f0:	a91e      	add	r1, sp, #120	; 0x78
 800b3f2:	bf0c      	ite	eq
 800b3f4:	f10b 0501 	addeq.w	r5, fp, #1
 800b3f8:	465d      	movne	r5, fp
 800b3fa:	9004      	str	r0, [sp, #16]
 800b3fc:	9103      	str	r1, [sp, #12]
 800b3fe:	a81d      	add	r0, sp, #116	; 0x74
 800b400:	2102      	movs	r1, #2
 800b402:	463b      	mov	r3, r7
 800b404:	9002      	str	r0, [sp, #8]
 800b406:	9501      	str	r5, [sp, #4]
 800b408:	9100      	str	r1, [sp, #0]
 800b40a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b40c:	f000 fc78 	bl	800bd00 <_dtoa_r>
 800b410:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b412:	2b67      	cmp	r3, #103	; 0x67
 800b414:	4606      	mov	r6, r0
 800b416:	f040 8288 	bne.w	800b92a <_vfprintf_r+0x158a>
 800b41a:	9b07      	ldr	r3, [sp, #28]
 800b41c:	07da      	lsls	r2, r3, #31
 800b41e:	f140 82bd 	bpl.w	800b99c <_vfprintf_r+0x15fc>
 800b422:	1974      	adds	r4, r6, r5
 800b424:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b426:	4639      	mov	r1, r7
 800b428:	2200      	movs	r2, #0
 800b42a:	2300      	movs	r3, #0
 800b42c:	f7f5 fb8e 	bl	8000b4c <__aeabi_dcmpeq>
 800b430:	2800      	cmp	r0, #0
 800b432:	f040 8188 	bne.w	800b746 <_vfprintf_r+0x13a6>
 800b436:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b438:	429c      	cmp	r4, r3
 800b43a:	d906      	bls.n	800b44a <_vfprintf_r+0x10aa>
 800b43c:	2130      	movs	r1, #48	; 0x30
 800b43e:	1c5a      	adds	r2, r3, #1
 800b440:	9221      	str	r2, [sp, #132]	; 0x84
 800b442:	7019      	strb	r1, [r3, #0]
 800b444:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b446:	429c      	cmp	r4, r3
 800b448:	d8f9      	bhi.n	800b43e <_vfprintf_r+0x109e>
 800b44a:	1b9b      	subs	r3, r3, r6
 800b44c:	9312      	str	r3, [sp, #72]	; 0x48
 800b44e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b450:	2b47      	cmp	r3, #71	; 0x47
 800b452:	f000 8171 	beq.w	800b738 <_vfprintf_r+0x1398>
 800b456:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b458:	2b65      	cmp	r3, #101	; 0x65
 800b45a:	f340 8275 	ble.w	800b948 <_vfprintf_r+0x15a8>
 800b45e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b460:	2b66      	cmp	r3, #102	; 0x66
 800b462:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b464:	9313      	str	r3, [sp, #76]	; 0x4c
 800b466:	f000 8238 	beq.w	800b8da <_vfprintf_r+0x153a>
 800b46a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b46c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b46e:	428a      	cmp	r2, r1
 800b470:	f2c0 8226 	blt.w	800b8c0 <_vfprintf_r+0x1520>
 800b474:	9b07      	ldr	r3, [sp, #28]
 800b476:	07db      	lsls	r3, r3, #31
 800b478:	f100 827d 	bmi.w	800b976 <_vfprintf_r+0x15d6>
 800b47c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b480:	920d      	str	r2, [sp, #52]	; 0x34
 800b482:	2267      	movs	r2, #103	; 0x67
 800b484:	9211      	str	r2, [sp, #68]	; 0x44
 800b486:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b488:	2a00      	cmp	r2, #0
 800b48a:	f040 814b 	bne.w	800b724 <_vfprintf_r+0x1384>
 800b48e:	9309      	str	r3, [sp, #36]	; 0x24
 800b490:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b492:	9307      	str	r3, [sp, #28]
 800b494:	4693      	mov	fp, r2
 800b496:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800b49a:	f7ff b98f 	b.w	800a7bc <_vfprintf_r+0x41c>
 800b49e:	9907      	ldr	r1, [sp, #28]
 800b4a0:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 800b4a4:	f040 809f 	bne.w	800b5e6 <_vfprintf_r+0x1246>
 800b4a8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b4aa:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800b4ae:	f1bb 0f00 	cmp.w	fp, #0
 800b4b2:	680c      	ldr	r4, [r1, #0]
 800b4b4:	f101 0704 	add.w	r7, r1, #4
 800b4b8:	f04f 0500 	mov.w	r5, #0
 800b4bc:	da12      	bge.n	800b4e4 <_vfprintf_r+0x1144>
 800b4be:	970e      	str	r7, [sp, #56]	; 0x38
 800b4c0:	2700      	movs	r7, #0
 800b4c2:	f7ff b8c8 	b.w	800a656 <_vfprintf_r+0x2b6>
 800b4c6:	9a07      	ldr	r2, [sp, #28]
 800b4c8:	e646      	b.n	800b158 <_vfprintf_r+0xdb8>
 800b4ca:	9b07      	ldr	r3, [sp, #28]
 800b4cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b4ce:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b4d2:	4613      	mov	r3, r2
 800b4d4:	f000 809f 	beq.w	800b616 <_vfprintf_r+0x1276>
 800b4d8:	3304      	adds	r3, #4
 800b4da:	8814      	ldrh	r4, [r2, #0]
 800b4dc:	930e      	str	r3, [sp, #56]	; 0x38
 800b4de:	2500      	movs	r5, #0
 800b4e0:	f7ff ba9d 	b.w	800aa1e <_vfprintf_r+0x67e>
 800b4e4:	9a07      	ldr	r2, [sp, #28]
 800b4e6:	f7ff b917 	b.w	800a718 <_vfprintf_r+0x378>
 800b4ea:	4614      	mov	r4, r2
 800b4ec:	3301      	adds	r3, #1
 800b4ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b4f0:	9324      	str	r3, [sp, #144]	; 0x90
 800b4f2:	442c      	add	r4, r5
 800b4f4:	2b07      	cmp	r3, #7
 800b4f6:	9425      	str	r4, [sp, #148]	; 0x94
 800b4f8:	e889 0024 	stmia.w	r9, {r2, r5}
 800b4fc:	f73f ae5e 	bgt.w	800b1bc <_vfprintf_r+0xe1c>
 800b500:	f109 0908 	add.w	r9, r9, #8
 800b504:	e665      	b.n	800b1d2 <_vfprintf_r+0xe32>
 800b506:	2700      	movs	r7, #0
 800b508:	45bb      	cmp	fp, r7
 800b50a:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800b50e:	f6ff ac33 	blt.w	800ad78 <_vfprintf_r+0x9d8>
 800b512:	9b07      	ldr	r3, [sp, #28]
 800b514:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b518:	9307      	str	r3, [sp, #28]
 800b51a:	e400      	b.n	800ad1e <_vfprintf_r+0x97e>
 800b51c:	aa23      	add	r2, sp, #140	; 0x8c
 800b51e:	9908      	ldr	r1, [sp, #32]
 800b520:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b522:	f003 f917 	bl	800e754 <__sprint_r>
 800b526:	2800      	cmp	r0, #0
 800b528:	f47f a869 	bne.w	800a5fe <_vfprintf_r+0x25e>
 800b52c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800b52e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b532:	e443      	b.n	800adbc <_vfprintf_r+0xa1c>
 800b534:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800b536:	e418      	b.n	800ad6a <_vfprintf_r+0x9ca>
 800b538:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b53a:	4ab1      	ldr	r2, [pc, #708]	; (800b800 <_vfprintf_r+0x1460>)
 800b53c:	f8c9 2000 	str.w	r2, [r9]
 800b540:	3301      	adds	r3, #1
 800b542:	3401      	adds	r4, #1
 800b544:	2201      	movs	r2, #1
 800b546:	2b07      	cmp	r3, #7
 800b548:	9425      	str	r4, [sp, #148]	; 0x94
 800b54a:	9324      	str	r3, [sp, #144]	; 0x90
 800b54c:	f8c9 2004 	str.w	r2, [r9, #4]
 800b550:	f300 809d 	bgt.w	800b68e <_vfprintf_r+0x12ee>
 800b554:	f109 0908 	add.w	r9, r9, #8
 800b558:	b92d      	cbnz	r5, 800b566 <_vfprintf_r+0x11c6>
 800b55a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b55c:	b91b      	cbnz	r3, 800b566 <_vfprintf_r+0x11c6>
 800b55e:	9b07      	ldr	r3, [sp, #28]
 800b560:	07d9      	lsls	r1, r3, #31
 800b562:	f57f a9f6 	bpl.w	800a952 <_vfprintf_r+0x5b2>
 800b566:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b568:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b56a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b56c:	f8c9 2000 	str.w	r2, [r9]
 800b570:	3301      	adds	r3, #1
 800b572:	440c      	add	r4, r1
 800b574:	2b07      	cmp	r3, #7
 800b576:	9425      	str	r4, [sp, #148]	; 0x94
 800b578:	f8c9 1004 	str.w	r1, [r9, #4]
 800b57c:	9324      	str	r3, [sp, #144]	; 0x90
 800b57e:	f300 81e9 	bgt.w	800b954 <_vfprintf_r+0x15b4>
 800b582:	f109 0908 	add.w	r9, r9, #8
 800b586:	426d      	negs	r5, r5
 800b588:	2d00      	cmp	r5, #0
 800b58a:	f340 80be 	ble.w	800b70a <_vfprintf_r+0x136a>
 800b58e:	4a9d      	ldr	r2, [pc, #628]	; (800b804 <_vfprintf_r+0x1464>)
 800b590:	920f      	str	r2, [sp, #60]	; 0x3c
 800b592:	2d10      	cmp	r5, #16
 800b594:	f340 80e6 	ble.w	800b764 <_vfprintf_r+0x13c4>
 800b598:	4622      	mov	r2, r4
 800b59a:	2710      	movs	r7, #16
 800b59c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800b5a0:	9c08      	ldr	r4, [sp, #32]
 800b5a2:	e005      	b.n	800b5b0 <_vfprintf_r+0x1210>
 800b5a4:	f109 0908 	add.w	r9, r9, #8
 800b5a8:	3d10      	subs	r5, #16
 800b5aa:	2d10      	cmp	r5, #16
 800b5ac:	f340 80d9 	ble.w	800b762 <_vfprintf_r+0x13c2>
 800b5b0:	3301      	adds	r3, #1
 800b5b2:	3210      	adds	r2, #16
 800b5b4:	2b07      	cmp	r3, #7
 800b5b6:	9225      	str	r2, [sp, #148]	; 0x94
 800b5b8:	9324      	str	r3, [sp, #144]	; 0x90
 800b5ba:	f8c9 a000 	str.w	sl, [r9]
 800b5be:	f8c9 7004 	str.w	r7, [r9, #4]
 800b5c2:	ddef      	ble.n	800b5a4 <_vfprintf_r+0x1204>
 800b5c4:	aa23      	add	r2, sp, #140	; 0x8c
 800b5c6:	4621      	mov	r1, r4
 800b5c8:	4658      	mov	r0, fp
 800b5ca:	f003 f8c3 	bl	800e754 <__sprint_r>
 800b5ce:	2800      	cmp	r0, #0
 800b5d0:	f47f a815 	bne.w	800a5fe <_vfprintf_r+0x25e>
 800b5d4:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800b5d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b5d8:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b5dc:	e7e4      	b.n	800b5a8 <_vfprintf_r+0x1208>
 800b5de:	f04f 30ff 	mov.w	r0, #4294967295
 800b5e2:	f7ff b812 	b.w	800a60a <_vfprintf_r+0x26a>
 800b5e6:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b5e8:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	f1bb 0f00 	cmp.w	fp, #0
 800b5f2:	f103 0304 	add.w	r3, r3, #4
 800b5f6:	8804      	ldrh	r4, [r0, #0]
 800b5f8:	f04f 0500 	mov.w	r5, #0
 800b5fc:	f2c0 81c4 	blt.w	800b988 <_vfprintf_r+0x15e8>
 800b600:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b604:	9107      	str	r1, [sp, #28]
 800b606:	ea54 0105 	orrs.w	r1, r4, r5
 800b60a:	930e      	str	r3, [sp, #56]	; 0x38
 800b60c:	f43f aba2 	beq.w	800ad54 <_vfprintf_r+0x9b4>
 800b610:	4617      	mov	r7, r2
 800b612:	f7ff b820 	b.w	800a656 <_vfprintf_r+0x2b6>
 800b616:	3304      	adds	r3, #4
 800b618:	6814      	ldr	r4, [r2, #0]
 800b61a:	930e      	str	r3, [sp, #56]	; 0x38
 800b61c:	2500      	movs	r5, #0
 800b61e:	f7ff b9fe 	b.w	800aa1e <_vfprintf_r+0x67e>
 800b622:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b624:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
 800b628:	4603      	mov	r3, r0
 800b62a:	f1bb 0f00 	cmp.w	fp, #0
 800b62e:	f103 0304 	add.w	r3, r3, #4
 800b632:	8804      	ldrh	r4, [r0, #0]
 800b634:	f04f 0500 	mov.w	r5, #0
 800b638:	f2c0 819a 	blt.w	800b970 <_vfprintf_r+0x15d0>
 800b63c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b640:	9107      	str	r1, [sp, #28]
 800b642:	ea54 0105 	orrs.w	r1, r4, r5
 800b646:	930e      	str	r3, [sp, #56]	; 0x38
 800b648:	4617      	mov	r7, r2
 800b64a:	f47f a893 	bne.w	800a774 <_vfprintf_r+0x3d4>
 800b64e:	f7ff ba4d 	b.w	800aaec <_vfprintf_r+0x74c>
 800b652:	a821      	add	r0, sp, #132	; 0x84
 800b654:	a91e      	add	r1, sp, #120	; 0x78
 800b656:	9004      	str	r0, [sp, #16]
 800b658:	9103      	str	r1, [sp, #12]
 800b65a:	a81d      	add	r0, sp, #116	; 0x74
 800b65c:	2103      	movs	r1, #3
 800b65e:	9002      	str	r0, [sp, #8]
 800b660:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b662:	f8cd b004 	str.w	fp, [sp, #4]
 800b666:	463b      	mov	r3, r7
 800b668:	9100      	str	r1, [sp, #0]
 800b66a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b66c:	f000 fb48 	bl	800bd00 <_dtoa_r>
 800b670:	465d      	mov	r5, fp
 800b672:	4606      	mov	r6, r0
 800b674:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b676:	2b46      	cmp	r3, #70	; 0x46
 800b678:	eb06 0405 	add.w	r4, r6, r5
 800b67c:	f47f aed2 	bne.w	800b424 <_vfprintf_r+0x1084>
 800b680:	7833      	ldrb	r3, [r6, #0]
 800b682:	2b30      	cmp	r3, #48	; 0x30
 800b684:	f000 819b 	beq.w	800b9be <_vfprintf_r+0x161e>
 800b688:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800b68a:	442c      	add	r4, r5
 800b68c:	e6ca      	b.n	800b424 <_vfprintf_r+0x1084>
 800b68e:	aa23      	add	r2, sp, #140	; 0x8c
 800b690:	9908      	ldr	r1, [sp, #32]
 800b692:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b694:	f003 f85e 	bl	800e754 <__sprint_r>
 800b698:	2800      	cmp	r0, #0
 800b69a:	f47e afb0 	bne.w	800a5fe <_vfprintf_r+0x25e>
 800b69e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800b6a0:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800b6a2:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b6a6:	e757      	b.n	800b558 <_vfprintf_r+0x11b8>
 800b6a8:	f1bb 0f00 	cmp.w	fp, #0
 800b6ac:	bf08      	it	eq
 800b6ae:	f04f 0b01 	moveq.w	fp, #1
 800b6b2:	e683      	b.n	800b3bc <_vfprintf_r+0x101c>
 800b6b4:	9b07      	ldr	r3, [sp, #28]
 800b6b6:	f043 0320 	orr.w	r3, r3, #32
 800b6ba:	9307      	str	r3, [sp, #28]
 800b6bc:	f108 0801 	add.w	r8, r8, #1
 800b6c0:	f898 3000 	ldrb.w	r3, [r8]
 800b6c4:	f7fe bedf 	b.w	800a486 <_vfprintf_r+0xe6>
 800b6c8:	aa23      	add	r2, sp, #140	; 0x8c
 800b6ca:	9908      	ldr	r1, [sp, #32]
 800b6cc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b6ce:	f003 f841 	bl	800e754 <__sprint_r>
 800b6d2:	2800      	cmp	r0, #0
 800b6d4:	f47e af93 	bne.w	800a5fe <_vfprintf_r+0x25e>
 800b6d8:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800b6da:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b6de:	f7ff bb85 	b.w	800adec <_vfprintf_r+0xa4c>
 800b6e2:	4630      	mov	r0, r6
 800b6e4:	f7f5 fc8c 	bl	8001000 <strlen>
 800b6e8:	46a3      	mov	fp, r4
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	900d      	str	r0, [sp, #52]	; 0x34
 800b6ee:	f7ff bb05 	b.w	800acfc <_vfprintf_r+0x95c>
 800b6f2:	aa23      	add	r2, sp, #140	; 0x8c
 800b6f4:	9908      	ldr	r1, [sp, #32]
 800b6f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b6f8:	f003 f82c 	bl	800e754 <__sprint_r>
 800b6fc:	2800      	cmp	r0, #0
 800b6fe:	f47e af7e 	bne.w	800a5fe <_vfprintf_r+0x25e>
 800b702:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800b704:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b706:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b70a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b70c:	f8c9 6000 	str.w	r6, [r9]
 800b710:	3301      	adds	r3, #1
 800b712:	440c      	add	r4, r1
 800b714:	2b07      	cmp	r3, #7
 800b716:	9425      	str	r4, [sp, #148]	; 0x94
 800b718:	9324      	str	r3, [sp, #144]	; 0x90
 800b71a:	f8c9 1004 	str.w	r1, [r9, #4]
 800b71e:	f77f a916 	ble.w	800a94e <_vfprintf_r+0x5ae>
 800b722:	e429      	b.n	800af78 <_vfprintf_r+0xbd8>
 800b724:	272d      	movs	r7, #45	; 0x2d
 800b726:	9309      	str	r3, [sp, #36]	; 0x24
 800b728:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b72a:	9307      	str	r3, [sp, #28]
 800b72c:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800b730:	f04f 0b00 	mov.w	fp, #0
 800b734:	f7ff b843 	b.w	800a7be <_vfprintf_r+0x41e>
 800b738:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b73a:	1cd8      	adds	r0, r3, #3
 800b73c:	db2b      	blt.n	800b796 <_vfprintf_r+0x13f6>
 800b73e:	459b      	cmp	fp, r3
 800b740:	db29      	blt.n	800b796 <_vfprintf_r+0x13f6>
 800b742:	9313      	str	r3, [sp, #76]	; 0x4c
 800b744:	e691      	b.n	800b46a <_vfprintf_r+0x10ca>
 800b746:	4623      	mov	r3, r4
 800b748:	e67f      	b.n	800b44a <_vfprintf_r+0x10aa>
 800b74a:	aa23      	add	r2, sp, #140	; 0x8c
 800b74c:	9908      	ldr	r1, [sp, #32]
 800b74e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b750:	f003 f800 	bl	800e754 <__sprint_r>
 800b754:	2800      	cmp	r0, #0
 800b756:	f47e af52 	bne.w	800a5fe <_vfprintf_r+0x25e>
 800b75a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800b75c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b760:	e471      	b.n	800b046 <_vfprintf_r+0xca6>
 800b762:	4614      	mov	r4, r2
 800b764:	3301      	adds	r3, #1
 800b766:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b768:	9324      	str	r3, [sp, #144]	; 0x90
 800b76a:	442c      	add	r4, r5
 800b76c:	2b07      	cmp	r3, #7
 800b76e:	9425      	str	r4, [sp, #148]	; 0x94
 800b770:	e889 0024 	stmia.w	r9, {r2, r5}
 800b774:	dcbd      	bgt.n	800b6f2 <_vfprintf_r+0x1352>
 800b776:	f109 0908 	add.w	r9, r9, #8
 800b77a:	e7c6      	b.n	800b70a <_vfprintf_r+0x136a>
 800b77c:	aa23      	add	r2, sp, #140	; 0x8c
 800b77e:	9908      	ldr	r1, [sp, #32]
 800b780:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b782:	f002 ffe7 	bl	800e754 <__sprint_r>
 800b786:	2800      	cmp	r0, #0
 800b788:	f47e af39 	bne.w	800a5fe <_vfprintf_r+0x25e>
 800b78c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b78e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800b790:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b794:	e527      	b.n	800b1e6 <_vfprintf_r+0xe46>
 800b796:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b798:	3a02      	subs	r2, #2
 800b79a:	9211      	str	r2, [sp, #68]	; 0x44
 800b79c:	3b01      	subs	r3, #1
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800b7a4:	931d      	str	r3, [sp, #116]	; 0x74
 800b7a6:	bfb8      	it	lt
 800b7a8:	425b      	neglt	r3, r3
 800b7aa:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
 800b7ae:	bfb4      	ite	lt
 800b7b0:	222d      	movlt	r2, #45	; 0x2d
 800b7b2:	222b      	movge	r2, #43	; 0x2b
 800b7b4:	2b09      	cmp	r3, #9
 800b7b6:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
 800b7ba:	f340 80e7 	ble.w	800b98c <_vfprintf_r+0x15ec>
 800b7be:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
 800b7c2:	4604      	mov	r4, r0
 800b7c4:	4a10      	ldr	r2, [pc, #64]	; (800b808 <_vfprintf_r+0x1468>)
 800b7c6:	fb82 2103 	smull	r2, r1, r2, r3
 800b7ca:	17da      	asrs	r2, r3, #31
 800b7cc:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 800b7d0:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800b7d4:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 800b7d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b7dc:	2a09      	cmp	r2, #9
 800b7de:	4613      	mov	r3, r2
 800b7e0:	f804 1d01 	strb.w	r1, [r4, #-1]!
 800b7e4:	dcee      	bgt.n	800b7c4 <_vfprintf_r+0x1424>
 800b7e6:	4621      	mov	r1, r4
 800b7e8:	3330      	adds	r3, #48	; 0x30
 800b7ea:	b2da      	uxtb	r2, r3
 800b7ec:	f801 2d01 	strb.w	r2, [r1, #-1]!
 800b7f0:	4288      	cmp	r0, r1
 800b7f2:	f240 813f 	bls.w	800ba74 <_vfprintf_r+0x16d4>
 800b7f6:	f10d 017e 	add.w	r1, sp, #126	; 0x7e
 800b7fa:	4623      	mov	r3, r4
 800b7fc:	e008      	b.n	800b810 <_vfprintf_r+0x1470>
 800b7fe:	bf00      	nop
 800b800:	0800f284 	.word	0x0800f284
 800b804:	0800f298 	.word	0x0800f298
 800b808:	66666667 	.word	0x66666667
 800b80c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b810:	f801 2b01 	strb.w	r2, [r1], #1
 800b814:	4298      	cmp	r0, r3
 800b816:	d1f9      	bne.n	800b80c <_vfprintf_r+0x146c>
 800b818:	1c43      	adds	r3, r0, #1
 800b81a:	1b1b      	subs	r3, r3, r4
 800b81c:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
 800b820:	4413      	add	r3, r2
 800b822:	aa1f      	add	r2, sp, #124	; 0x7c
 800b824:	1a9b      	subs	r3, r3, r2
 800b826:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b828:	9319      	str	r3, [sp, #100]	; 0x64
 800b82a:	2a01      	cmp	r2, #1
 800b82c:	4413      	add	r3, r2
 800b82e:	930d      	str	r3, [sp, #52]	; 0x34
 800b830:	f340 80db 	ble.w	800b9ea <_vfprintf_r+0x164a>
 800b834:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b836:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b838:	4413      	add	r3, r2
 800b83a:	2200      	movs	r2, #0
 800b83c:	930d      	str	r3, [sp, #52]	; 0x34
 800b83e:	9213      	str	r2, [sp, #76]	; 0x4c
 800b840:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b844:	e61f      	b.n	800b486 <_vfprintf_r+0x10e6>
 800b846:	aa23      	add	r2, sp, #140	; 0x8c
 800b848:	9908      	ldr	r1, [sp, #32]
 800b84a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b84c:	f002 ff82 	bl	800e754 <__sprint_r>
 800b850:	2800      	cmp	r0, #0
 800b852:	f47e aed4 	bne.w	800a5fe <_vfprintf_r+0x25e>
 800b856:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b858:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b85a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800b85c:	1ad3      	subs	r3, r2, r3
 800b85e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b862:	e4d8      	b.n	800b216 <_vfprintf_r+0xe76>
 800b864:	2d06      	cmp	r5, #6
 800b866:	462b      	mov	r3, r5
 800b868:	bf28      	it	cs
 800b86a:	2306      	movcs	r3, #6
 800b86c:	930d      	str	r3, [sp, #52]	; 0x34
 800b86e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b872:	46b3      	mov	fp, r6
 800b874:	970e      	str	r7, [sp, #56]	; 0x38
 800b876:	9613      	str	r6, [sp, #76]	; 0x4c
 800b878:	4637      	mov	r7, r6
 800b87a:	9309      	str	r3, [sp, #36]	; 0x24
 800b87c:	4e85      	ldr	r6, [pc, #532]	; (800ba94 <_vfprintf_r+0x16f4>)
 800b87e:	f7fe bf9d 	b.w	800a7bc <_vfprintf_r+0x41c>
 800b882:	a821      	add	r0, sp, #132	; 0x84
 800b884:	a91e      	add	r1, sp, #120	; 0x78
 800b886:	9004      	str	r0, [sp, #16]
 800b888:	9103      	str	r1, [sp, #12]
 800b88a:	a81d      	add	r0, sp, #116	; 0x74
 800b88c:	2103      	movs	r1, #3
 800b88e:	9002      	str	r0, [sp, #8]
 800b890:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b892:	f8cd b004 	str.w	fp, [sp, #4]
 800b896:	463b      	mov	r3, r7
 800b898:	9100      	str	r1, [sp, #0]
 800b89a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b89c:	f000 fa30 	bl	800bd00 <_dtoa_r>
 800b8a0:	465d      	mov	r5, fp
 800b8a2:	4606      	mov	r6, r0
 800b8a4:	eb00 040b 	add.w	r4, r0, fp
 800b8a8:	e6ea      	b.n	800b680 <_vfprintf_r+0x12e0>
 800b8aa:	9307      	str	r3, [sp, #28]
 800b8ac:	f7ff b8d5 	b.w	800aa5a <_vfprintf_r+0x6ba>
 800b8b0:	f04f 0b06 	mov.w	fp, #6
 800b8b4:	e582      	b.n	800b3bc <_vfprintf_r+0x101c>
 800b8b6:	272d      	movs	r7, #45	; 0x2d
 800b8b8:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800b8bc:	f7ff b9b7 	b.w	800ac2e <_vfprintf_r+0x88e>
 800b8c0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b8c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b8c4:	4413      	add	r3, r2
 800b8c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b8c8:	930d      	str	r3, [sp, #52]	; 0x34
 800b8ca:	2a00      	cmp	r2, #0
 800b8cc:	f340 8085 	ble.w	800b9da <_vfprintf_r+0x163a>
 800b8d0:	2267      	movs	r2, #103	; 0x67
 800b8d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b8d6:	9211      	str	r2, [sp, #68]	; 0x44
 800b8d8:	e5d5      	b.n	800b486 <_vfprintf_r+0x10e6>
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	f340 808f 	ble.w	800b9fe <_vfprintf_r+0x165e>
 800b8e0:	f1bb 0f00 	cmp.w	fp, #0
 800b8e4:	d15c      	bne.n	800b9a0 <_vfprintf_r+0x1600>
 800b8e6:	9a07      	ldr	r2, [sp, #28]
 800b8e8:	07d1      	lsls	r1, r2, #31
 800b8ea:	d459      	bmi.n	800b9a0 <_vfprintf_r+0x1600>
 800b8ec:	461a      	mov	r2, r3
 800b8ee:	920d      	str	r2, [sp, #52]	; 0x34
 800b8f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b8f4:	e5c7      	b.n	800b486 <_vfprintf_r+0x10e6>
 800b8f6:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 800b8fa:	970e      	str	r7, [sp, #56]	; 0x38
 800b8fc:	9309      	str	r3, [sp, #36]	; 0x24
 800b8fe:	950d      	str	r5, [sp, #52]	; 0x34
 800b900:	4683      	mov	fp, r0
 800b902:	9013      	str	r0, [sp, #76]	; 0x4c
 800b904:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800b908:	f7fe bf58 	b.w	800a7bc <_vfprintf_r+0x41c>
 800b90c:	9b07      	ldr	r3, [sp, #28]
 800b90e:	07db      	lsls	r3, r3, #31
 800b910:	465f      	mov	r7, fp
 800b912:	d505      	bpl.n	800b920 <_vfprintf_r+0x1580>
 800b914:	ae40      	add	r6, sp, #256	; 0x100
 800b916:	2330      	movs	r3, #48	; 0x30
 800b918:	f806 3d41 	strb.w	r3, [r6, #-65]!
 800b91c:	f7fe bf44 	b.w	800a7a8 <_vfprintf_r+0x408>
 800b920:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 800b924:	ae30      	add	r6, sp, #192	; 0xc0
 800b926:	f7fe bf42 	b.w	800a7ae <_vfprintf_r+0x40e>
 800b92a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b92c:	2b47      	cmp	r3, #71	; 0x47
 800b92e:	f47f ad78 	bne.w	800b422 <_vfprintf_r+0x1082>
 800b932:	9b07      	ldr	r3, [sp, #28]
 800b934:	07dc      	lsls	r4, r3, #31
 800b936:	f53f ae9d 	bmi.w	800b674 <_vfprintf_r+0x12d4>
 800b93a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b93c:	1b9b      	subs	r3, r3, r6
 800b93e:	9312      	str	r3, [sp, #72]	; 0x48
 800b940:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b942:	2b47      	cmp	r3, #71	; 0x47
 800b944:	f43f aef8 	beq.w	800b738 <_vfprintf_r+0x1398>
 800b948:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b94a:	e727      	b.n	800b79c <_vfprintf_r+0x13fc>
 800b94c:	46a0      	mov	r8, r4
 800b94e:	2500      	movs	r5, #0
 800b950:	f7fe bd9b 	b.w	800a48a <_vfprintf_r+0xea>
 800b954:	aa23      	add	r2, sp, #140	; 0x8c
 800b956:	9908      	ldr	r1, [sp, #32]
 800b958:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b95a:	f002 fefb 	bl	800e754 <__sprint_r>
 800b95e:	2800      	cmp	r0, #0
 800b960:	f47e ae4d 	bne.w	800a5fe <_vfprintf_r+0x25e>
 800b964:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800b966:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800b968:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b96a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b96e:	e60a      	b.n	800b586 <_vfprintf_r+0x11e6>
 800b970:	930e      	str	r3, [sp, #56]	; 0x38
 800b972:	4617      	mov	r7, r2
 800b974:	e40d      	b.n	800b192 <_vfprintf_r+0xdf2>
 800b976:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b978:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b97a:	4413      	add	r3, r2
 800b97c:	2267      	movs	r2, #103	; 0x67
 800b97e:	930d      	str	r3, [sp, #52]	; 0x34
 800b980:	9211      	str	r2, [sp, #68]	; 0x44
 800b982:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b986:	e57e      	b.n	800b486 <_vfprintf_r+0x10e6>
 800b988:	930e      	str	r3, [sp, #56]	; 0x38
 800b98a:	e599      	b.n	800b4c0 <_vfprintf_r+0x1120>
 800b98c:	3330      	adds	r3, #48	; 0x30
 800b98e:	2230      	movs	r2, #48	; 0x30
 800b990:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 800b994:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
 800b998:	ab20      	add	r3, sp, #128	; 0x80
 800b99a:	e742      	b.n	800b822 <_vfprintf_r+0x1482>
 800b99c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b99e:	e554      	b.n	800b44a <_vfprintf_r+0x10aa>
 800b9a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b9a2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b9a4:	189d      	adds	r5, r3, r2
 800b9a6:	eb05 030b 	add.w	r3, r5, fp
 800b9aa:	930d      	str	r3, [sp, #52]	; 0x34
 800b9ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b9b0:	e569      	b.n	800b486 <_vfprintf_r+0x10e6>
 800b9b2:	4e39      	ldr	r6, [pc, #228]	; (800ba98 <_vfprintf_r+0x16f8>)
 800b9b4:	4b39      	ldr	r3, [pc, #228]	; (800ba9c <_vfprintf_r+0x16fc>)
 800b9b6:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800b9ba:	f7ff b93a 	b.w	800ac32 <_vfprintf_r+0x892>
 800b9be:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9c0:	4639      	mov	r1, r7
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	f7f5 f8c1 	bl	8000b4c <__aeabi_dcmpeq>
 800b9ca:	2800      	cmp	r0, #0
 800b9cc:	f47f ae5c 	bne.w	800b688 <_vfprintf_r+0x12e8>
 800b9d0:	f1c5 0501 	rsb	r5, r5, #1
 800b9d4:	951d      	str	r5, [sp, #116]	; 0x74
 800b9d6:	442c      	add	r4, r5
 800b9d8:	e524      	b.n	800b424 <_vfprintf_r+0x1084>
 800b9da:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b9dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b9de:	f1c3 0301 	rsb	r3, r3, #1
 800b9e2:	441a      	add	r2, r3
 800b9e4:	4613      	mov	r3, r2
 800b9e6:	920d      	str	r2, [sp, #52]	; 0x34
 800b9e8:	e772      	b.n	800b8d0 <_vfprintf_r+0x1530>
 800b9ea:	9b07      	ldr	r3, [sp, #28]
 800b9ec:	f013 0301 	ands.w	r3, r3, #1
 800b9f0:	f47f af20 	bne.w	800b834 <_vfprintf_r+0x1494>
 800b9f4:	9313      	str	r3, [sp, #76]	; 0x4c
 800b9f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b9f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b9fc:	e543      	b.n	800b486 <_vfprintf_r+0x10e6>
 800b9fe:	f1bb 0f00 	cmp.w	fp, #0
 800ba02:	d102      	bne.n	800ba0a <_vfprintf_r+0x166a>
 800ba04:	9b07      	ldr	r3, [sp, #28]
 800ba06:	07da      	lsls	r2, r3, #31
 800ba08:	d507      	bpl.n	800ba1a <_vfprintf_r+0x167a>
 800ba0a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ba0c:	1c5d      	adds	r5, r3, #1
 800ba0e:	eb05 030b 	add.w	r3, r5, fp
 800ba12:	930d      	str	r3, [sp, #52]	; 0x34
 800ba14:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ba18:	e535      	b.n	800b486 <_vfprintf_r+0x10e6>
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	930d      	str	r3, [sp, #52]	; 0x34
 800ba1e:	e532      	b.n	800b486 <_vfprintf_r+0x10e6>
 800ba20:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ba22:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ba26:	6805      	ldr	r5, [r0, #0]
 800ba28:	3004      	adds	r0, #4
 800ba2a:	2d00      	cmp	r5, #0
 800ba2c:	900e      	str	r0, [sp, #56]	; 0x38
 800ba2e:	46a0      	mov	r8, r4
 800ba30:	f6be ad29 	bge.w	800a486 <_vfprintf_r+0xe6>
 800ba34:	f04f 35ff 	mov.w	r5, #4294967295
 800ba38:	f7fe bd25 	b.w	800a486 <_vfprintf_r+0xe6>
 800ba3c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800ba40:	f7ff b878 	b.w	800ab34 <_vfprintf_r+0x794>
 800ba44:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800ba48:	f7ff b82f 	b.w	800aaaa <_vfprintf_r+0x70a>
 800ba4c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800ba50:	f7fe bfd7 	b.w	800aa02 <_vfprintf_r+0x662>
 800ba54:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800ba58:	f7fe be6d 	b.w	800a736 <_vfprintf_r+0x396>
 800ba5c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800ba60:	f7ff b967 	b.w	800ad32 <_vfprintf_r+0x992>
 800ba64:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800ba68:	f7fe bddb 	b.w	800a622 <_vfprintf_r+0x282>
 800ba6c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800ba70:	f7fe be38 	b.w	800a6e4 <_vfprintf_r+0x344>
 800ba74:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
 800ba78:	e6d3      	b.n	800b822 <_vfprintf_r+0x1482>
 800ba7a:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800ba7e:	f7ff b88b 	b.w	800ab98 <_vfprintf_r+0x7f8>
 800ba82:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800ba86:	f7ff b8a4 	b.w	800abd2 <_vfprintf_r+0x832>
 800ba8a:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800ba8e:	f7ff b8f4 	b.w	800ac7a <_vfprintf_r+0x8da>
 800ba92:	bf00      	nop
 800ba94:	0800f27c 	.word	0x0800f27c
 800ba98:	0800f250 	.word	0x0800f250
 800ba9c:	0800f24c 	.word	0x0800f24c

0800baa0 <__sbprintf>:
 800baa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800baa2:	460c      	mov	r4, r1
 800baa4:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 800baa8:	8989      	ldrh	r1, [r1, #12]
 800baaa:	6e66      	ldr	r6, [r4, #100]	; 0x64
 800baac:	89e5      	ldrh	r5, [r4, #14]
 800baae:	9619      	str	r6, [sp, #100]	; 0x64
 800bab0:	f021 0102 	bic.w	r1, r1, #2
 800bab4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bab6:	f8ad 500e 	strh.w	r5, [sp, #14]
 800baba:	2500      	movs	r5, #0
 800babc:	69e7      	ldr	r7, [r4, #28]
 800babe:	f8ad 100c 	strh.w	r1, [sp, #12]
 800bac2:	9609      	str	r6, [sp, #36]	; 0x24
 800bac4:	9506      	str	r5, [sp, #24]
 800bac6:	ae1a      	add	r6, sp, #104	; 0x68
 800bac8:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800bacc:	4669      	mov	r1, sp
 800bace:	9600      	str	r6, [sp, #0]
 800bad0:	9604      	str	r6, [sp, #16]
 800bad2:	9502      	str	r5, [sp, #8]
 800bad4:	9505      	str	r5, [sp, #20]
 800bad6:	9707      	str	r7, [sp, #28]
 800bad8:	4606      	mov	r6, r0
 800bada:	f7fe fc61 	bl	800a3a0 <_vfprintf_r>
 800bade:	1e05      	subs	r5, r0, #0
 800bae0:	db07      	blt.n	800baf2 <__sbprintf+0x52>
 800bae2:	4630      	mov	r0, r6
 800bae4:	4669      	mov	r1, sp
 800bae6:	f001 f8db 	bl	800cca0 <_fflush_r>
 800baea:	2800      	cmp	r0, #0
 800baec:	bf18      	it	ne
 800baee:	f04f 35ff 	movne.w	r5, #4294967295
 800baf2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800baf6:	065b      	lsls	r3, r3, #25
 800baf8:	d503      	bpl.n	800bb02 <__sbprintf+0x62>
 800bafa:	89a3      	ldrh	r3, [r4, #12]
 800bafc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb00:	81a3      	strh	r3, [r4, #12]
 800bb02:	4628      	mov	r0, r5
 800bb04:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 800bb08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb0a:	bf00      	nop

0800bb0c <__swsetup_r>:
 800bb0c:	b538      	push	{r3, r4, r5, lr}
 800bb0e:	4b30      	ldr	r3, [pc, #192]	; (800bbd0 <__swsetup_r+0xc4>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	4605      	mov	r5, r0
 800bb14:	460c      	mov	r4, r1
 800bb16:	b113      	cbz	r3, 800bb1e <__swsetup_r+0x12>
 800bb18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb1a:	2a00      	cmp	r2, #0
 800bb1c:	d038      	beq.n	800bb90 <__swsetup_r+0x84>
 800bb1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb22:	b293      	uxth	r3, r2
 800bb24:	0718      	lsls	r0, r3, #28
 800bb26:	d50c      	bpl.n	800bb42 <__swsetup_r+0x36>
 800bb28:	6920      	ldr	r0, [r4, #16]
 800bb2a:	b1a8      	cbz	r0, 800bb58 <__swsetup_r+0x4c>
 800bb2c:	f013 0201 	ands.w	r2, r3, #1
 800bb30:	d01e      	beq.n	800bb70 <__swsetup_r+0x64>
 800bb32:	6963      	ldr	r3, [r4, #20]
 800bb34:	2200      	movs	r2, #0
 800bb36:	425b      	negs	r3, r3
 800bb38:	61a3      	str	r3, [r4, #24]
 800bb3a:	60a2      	str	r2, [r4, #8]
 800bb3c:	b1f0      	cbz	r0, 800bb7c <__swsetup_r+0x70>
 800bb3e:	2000      	movs	r0, #0
 800bb40:	bd38      	pop	{r3, r4, r5, pc}
 800bb42:	06d9      	lsls	r1, r3, #27
 800bb44:	d53c      	bpl.n	800bbc0 <__swsetup_r+0xb4>
 800bb46:	0758      	lsls	r0, r3, #29
 800bb48:	d426      	bmi.n	800bb98 <__swsetup_r+0x8c>
 800bb4a:	6920      	ldr	r0, [r4, #16]
 800bb4c:	f042 0308 	orr.w	r3, r2, #8
 800bb50:	81a3      	strh	r3, [r4, #12]
 800bb52:	b29b      	uxth	r3, r3
 800bb54:	2800      	cmp	r0, #0
 800bb56:	d1e9      	bne.n	800bb2c <__swsetup_r+0x20>
 800bb58:	f403 7220 	and.w	r2, r3, #640	; 0x280
 800bb5c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800bb60:	d0e4      	beq.n	800bb2c <__swsetup_r+0x20>
 800bb62:	4628      	mov	r0, r5
 800bb64:	4621      	mov	r1, r4
 800bb66:	f001 fc6b 	bl	800d440 <__smakebuf_r>
 800bb6a:	89a3      	ldrh	r3, [r4, #12]
 800bb6c:	6920      	ldr	r0, [r4, #16]
 800bb6e:	e7dd      	b.n	800bb2c <__swsetup_r+0x20>
 800bb70:	0799      	lsls	r1, r3, #30
 800bb72:	bf58      	it	pl
 800bb74:	6962      	ldrpl	r2, [r4, #20]
 800bb76:	60a2      	str	r2, [r4, #8]
 800bb78:	2800      	cmp	r0, #0
 800bb7a:	d1e0      	bne.n	800bb3e <__swsetup_r+0x32>
 800bb7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb80:	061a      	lsls	r2, r3, #24
 800bb82:	d5dd      	bpl.n	800bb40 <__swsetup_r+0x34>
 800bb84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb88:	81a3      	strh	r3, [r4, #12]
 800bb8a:	f04f 30ff 	mov.w	r0, #4294967295
 800bb8e:	bd38      	pop	{r3, r4, r5, pc}
 800bb90:	4618      	mov	r0, r3
 800bb92:	f001 f919 	bl	800cdc8 <__sinit>
 800bb96:	e7c2      	b.n	800bb1e <__swsetup_r+0x12>
 800bb98:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bb9a:	b151      	cbz	r1, 800bbb2 <__swsetup_r+0xa6>
 800bb9c:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800bba0:	4299      	cmp	r1, r3
 800bba2:	d004      	beq.n	800bbae <__swsetup_r+0xa2>
 800bba4:	4628      	mov	r0, r5
 800bba6:	f001 f967 	bl	800ce78 <_free_r>
 800bbaa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bbae:	2300      	movs	r3, #0
 800bbb0:	6323      	str	r3, [r4, #48]	; 0x30
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	6920      	ldr	r0, [r4, #16]
 800bbb6:	6063      	str	r3, [r4, #4]
 800bbb8:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 800bbbc:	6020      	str	r0, [r4, #0]
 800bbbe:	e7c5      	b.n	800bb4c <__swsetup_r+0x40>
 800bbc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bbc4:	2309      	movs	r3, #9
 800bbc6:	602b      	str	r3, [r5, #0]
 800bbc8:	f04f 30ff 	mov.w	r0, #4294967295
 800bbcc:	81a2      	strh	r2, [r4, #12]
 800bbce:	bd38      	pop	{r3, r4, r5, pc}
 800bbd0:	20000460 	.word	0x20000460

0800bbd4 <quorem>:
 800bbd4:	6902      	ldr	r2, [r0, #16]
 800bbd6:	690b      	ldr	r3, [r1, #16]
 800bbd8:	4293      	cmp	r3, r2
 800bbda:	f300 808d 	bgt.w	800bcf8 <quorem+0x124>
 800bbde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbe2:	f103 38ff 	add.w	r8, r3, #4294967295
 800bbe6:	f101 0714 	add.w	r7, r1, #20
 800bbea:	f100 0b14 	add.w	fp, r0, #20
 800bbee:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 800bbf2:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 800bbf6:	ea4f 0488 	mov.w	r4, r8, lsl #2
 800bbfa:	b083      	sub	sp, #12
 800bbfc:	3201      	adds	r2, #1
 800bbfe:	fbb3 f9f2 	udiv	r9, r3, r2
 800bc02:	eb0b 0304 	add.w	r3, fp, r4
 800bc06:	9400      	str	r4, [sp, #0]
 800bc08:	eb07 0a04 	add.w	sl, r7, r4
 800bc0c:	9301      	str	r3, [sp, #4]
 800bc0e:	f1b9 0f00 	cmp.w	r9, #0
 800bc12:	d039      	beq.n	800bc88 <quorem+0xb4>
 800bc14:	2500      	movs	r5, #0
 800bc16:	46bc      	mov	ip, r7
 800bc18:	46de      	mov	lr, fp
 800bc1a:	462b      	mov	r3, r5
 800bc1c:	f85c 6b04 	ldr.w	r6, [ip], #4
 800bc20:	f8de 2000 	ldr.w	r2, [lr]
 800bc24:	b2b4      	uxth	r4, r6
 800bc26:	fb09 5504 	mla	r5, r9, r4, r5
 800bc2a:	0c36      	lsrs	r6, r6, #16
 800bc2c:	0c2c      	lsrs	r4, r5, #16
 800bc2e:	fb09 4406 	mla	r4, r9, r6, r4
 800bc32:	b2ad      	uxth	r5, r5
 800bc34:	1b5b      	subs	r3, r3, r5
 800bc36:	b2a6      	uxth	r6, r4
 800bc38:	fa13 f382 	uxtah	r3, r3, r2
 800bc3c:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
 800bc40:	eb06 4623 	add.w	r6, r6, r3, asr #16
 800bc44:	b29b      	uxth	r3, r3
 800bc46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800bc4a:	45e2      	cmp	sl, ip
 800bc4c:	f84e 3b04 	str.w	r3, [lr], #4
 800bc50:	ea4f 4514 	mov.w	r5, r4, lsr #16
 800bc54:	ea4f 4326 	mov.w	r3, r6, asr #16
 800bc58:	d2e0      	bcs.n	800bc1c <quorem+0x48>
 800bc5a:	9b00      	ldr	r3, [sp, #0]
 800bc5c:	f85b 3003 	ldr.w	r3, [fp, r3]
 800bc60:	b993      	cbnz	r3, 800bc88 <quorem+0xb4>
 800bc62:	9c01      	ldr	r4, [sp, #4]
 800bc64:	1f23      	subs	r3, r4, #4
 800bc66:	459b      	cmp	fp, r3
 800bc68:	d20c      	bcs.n	800bc84 <quorem+0xb0>
 800bc6a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800bc6e:	b94b      	cbnz	r3, 800bc84 <quorem+0xb0>
 800bc70:	f1a4 0308 	sub.w	r3, r4, #8
 800bc74:	e002      	b.n	800bc7c <quorem+0xa8>
 800bc76:	681a      	ldr	r2, [r3, #0]
 800bc78:	3b04      	subs	r3, #4
 800bc7a:	b91a      	cbnz	r2, 800bc84 <quorem+0xb0>
 800bc7c:	459b      	cmp	fp, r3
 800bc7e:	f108 38ff 	add.w	r8, r8, #4294967295
 800bc82:	d3f8      	bcc.n	800bc76 <quorem+0xa2>
 800bc84:	f8c0 8010 	str.w	r8, [r0, #16]
 800bc88:	4604      	mov	r4, r0
 800bc8a:	f002 f95b 	bl	800df44 <__mcmp>
 800bc8e:	2800      	cmp	r0, #0
 800bc90:	db2e      	blt.n	800bcf0 <quorem+0x11c>
 800bc92:	f109 0901 	add.w	r9, r9, #1
 800bc96:	465d      	mov	r5, fp
 800bc98:	2300      	movs	r3, #0
 800bc9a:	f857 1b04 	ldr.w	r1, [r7], #4
 800bc9e:	6828      	ldr	r0, [r5, #0]
 800bca0:	b28a      	uxth	r2, r1
 800bca2:	1a9a      	subs	r2, r3, r2
 800bca4:	0c09      	lsrs	r1, r1, #16
 800bca6:	fa12 f280 	uxtah	r2, r2, r0
 800bcaa:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 800bcae:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800bcb2:	b291      	uxth	r1, r2
 800bcb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800bcb8:	45ba      	cmp	sl, r7
 800bcba:	f845 1b04 	str.w	r1, [r5], #4
 800bcbe:	ea4f 4323 	mov.w	r3, r3, asr #16
 800bcc2:	d2ea      	bcs.n	800bc9a <quorem+0xc6>
 800bcc4:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 800bcc8:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 800bccc:	b982      	cbnz	r2, 800bcf0 <quorem+0x11c>
 800bcce:	1f1a      	subs	r2, r3, #4
 800bcd0:	4593      	cmp	fp, r2
 800bcd2:	d20b      	bcs.n	800bcec <quorem+0x118>
 800bcd4:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800bcd8:	b942      	cbnz	r2, 800bcec <quorem+0x118>
 800bcda:	3b08      	subs	r3, #8
 800bcdc:	e002      	b.n	800bce4 <quorem+0x110>
 800bcde:	681a      	ldr	r2, [r3, #0]
 800bce0:	3b04      	subs	r3, #4
 800bce2:	b91a      	cbnz	r2, 800bcec <quorem+0x118>
 800bce4:	459b      	cmp	fp, r3
 800bce6:	f108 38ff 	add.w	r8, r8, #4294967295
 800bcea:	d3f8      	bcc.n	800bcde <quorem+0x10a>
 800bcec:	f8c4 8010 	str.w	r8, [r4, #16]
 800bcf0:	4648      	mov	r0, r9
 800bcf2:	b003      	add	sp, #12
 800bcf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcf8:	2000      	movs	r0, #0
 800bcfa:	4770      	bx	lr
 800bcfc:	0000      	movs	r0, r0
	...

0800bd00 <_dtoa_r>:
 800bd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd04:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800bd06:	b097      	sub	sp, #92	; 0x5c
 800bd08:	4681      	mov	r9, r0
 800bd0a:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800bd0c:	4692      	mov	sl, r2
 800bd0e:	469b      	mov	fp, r3
 800bd10:	b149      	cbz	r1, 800bd26 <_dtoa_r+0x26>
 800bd12:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bd14:	604a      	str	r2, [r1, #4]
 800bd16:	2301      	movs	r3, #1
 800bd18:	4093      	lsls	r3, r2
 800bd1a:	608b      	str	r3, [r1, #8]
 800bd1c:	f001 ff30 	bl	800db80 <_Bfree>
 800bd20:	2300      	movs	r3, #0
 800bd22:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 800bd26:	f1bb 0f00 	cmp.w	fp, #0
 800bd2a:	46d8      	mov	r8, fp
 800bd2c:	db33      	blt.n	800bd96 <_dtoa_r+0x96>
 800bd2e:	2300      	movs	r3, #0
 800bd30:	6023      	str	r3, [r4, #0]
 800bd32:	4ba5      	ldr	r3, [pc, #660]	; (800bfc8 <_dtoa_r+0x2c8>)
 800bd34:	461a      	mov	r2, r3
 800bd36:	ea08 0303 	and.w	r3, r8, r3
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d014      	beq.n	800bd68 <_dtoa_r+0x68>
 800bd3e:	4650      	mov	r0, sl
 800bd40:	4659      	mov	r1, fp
 800bd42:	2200      	movs	r2, #0
 800bd44:	2300      	movs	r3, #0
 800bd46:	f7f4 ff01 	bl	8000b4c <__aeabi_dcmpeq>
 800bd4a:	4605      	mov	r5, r0
 800bd4c:	b348      	cbz	r0, 800bda2 <_dtoa_r+0xa2>
 800bd4e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800bd50:	2301      	movs	r3, #1
 800bd52:	6013      	str	r3, [r2, #0]
 800bd54:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	f000 80c5 	beq.w	800bee6 <_dtoa_r+0x1e6>
 800bd5c:	489b      	ldr	r0, [pc, #620]	; (800bfcc <_dtoa_r+0x2cc>)
 800bd5e:	6018      	str	r0, [r3, #0]
 800bd60:	3801      	subs	r0, #1
 800bd62:	b017      	add	sp, #92	; 0x5c
 800bd64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd68:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800bd6a:	f242 730f 	movw	r3, #9999	; 0x270f
 800bd6e:	6013      	str	r3, [r2, #0]
 800bd70:	f1ba 0f00 	cmp.w	sl, #0
 800bd74:	f000 80a2 	beq.w	800bebc <_dtoa_r+0x1bc>
 800bd78:	4895      	ldr	r0, [pc, #596]	; (800bfd0 <_dtoa_r+0x2d0>)
 800bd7a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d0f0      	beq.n	800bd62 <_dtoa_r+0x62>
 800bd80:	78c3      	ldrb	r3, [r0, #3]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	f000 80b1 	beq.w	800beea <_dtoa_r+0x1ea>
 800bd88:	f100 0308 	add.w	r3, r0, #8
 800bd8c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bd8e:	6013      	str	r3, [r2, #0]
 800bd90:	b017      	add	sp, #92	; 0x5c
 800bd92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd96:	2301      	movs	r3, #1
 800bd98:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
 800bd9c:	6023      	str	r3, [r4, #0]
 800bd9e:	46c3      	mov	fp, r8
 800bda0:	e7c7      	b.n	800bd32 <_dtoa_r+0x32>
 800bda2:	aa14      	add	r2, sp, #80	; 0x50
 800bda4:	ab15      	add	r3, sp, #84	; 0x54
 800bda6:	9201      	str	r2, [sp, #4]
 800bda8:	9300      	str	r3, [sp, #0]
 800bdaa:	4652      	mov	r2, sl
 800bdac:	465b      	mov	r3, fp
 800bdae:	4648      	mov	r0, r9
 800bdb0:	f002 f972 	bl	800e098 <__d2b>
 800bdb4:	ea5f 5418 	movs.w	r4, r8, lsr #20
 800bdb8:	9008      	str	r0, [sp, #32]
 800bdba:	f040 8088 	bne.w	800bece <_dtoa_r+0x1ce>
 800bdbe:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800bdc0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800bdc2:	442c      	add	r4, r5
 800bdc4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800bdc8:	2b20      	cmp	r3, #32
 800bdca:	f340 8291 	ble.w	800c2f0 <_dtoa_r+0x5f0>
 800bdce:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800bdd2:	f204 4012 	addw	r0, r4, #1042	; 0x412
 800bdd6:	fa08 f803 	lsl.w	r8, r8, r3
 800bdda:	fa2a f000 	lsr.w	r0, sl, r0
 800bdde:	ea40 0008 	orr.w	r0, r0, r8
 800bde2:	f7f4 fbd5 	bl	8000590 <__aeabi_ui2d>
 800bde6:	2301      	movs	r3, #1
 800bde8:	3c01      	subs	r4, #1
 800bdea:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800bdee:	9310      	str	r3, [sp, #64]	; 0x40
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	4b78      	ldr	r3, [pc, #480]	; (800bfd4 <_dtoa_r+0x2d4>)
 800bdf4:	f7f4 fa8e 	bl	8000314 <__aeabi_dsub>
 800bdf8:	a36d      	add	r3, pc, #436	; (adr r3, 800bfb0 <_dtoa_r+0x2b0>)
 800bdfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdfe:	f7f4 fc3d 	bl	800067c <__aeabi_dmul>
 800be02:	a36d      	add	r3, pc, #436	; (adr r3, 800bfb8 <_dtoa_r+0x2b8>)
 800be04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be08:	f7f4 fa86 	bl	8000318 <__adddf3>
 800be0c:	4606      	mov	r6, r0
 800be0e:	4620      	mov	r0, r4
 800be10:	460f      	mov	r7, r1
 800be12:	f7f4 fbcd 	bl	80005b0 <__aeabi_i2d>
 800be16:	a36a      	add	r3, pc, #424	; (adr r3, 800bfc0 <_dtoa_r+0x2c0>)
 800be18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be1c:	f7f4 fc2e 	bl	800067c <__aeabi_dmul>
 800be20:	4602      	mov	r2, r0
 800be22:	460b      	mov	r3, r1
 800be24:	4630      	mov	r0, r6
 800be26:	4639      	mov	r1, r7
 800be28:	f7f4 fa76 	bl	8000318 <__adddf3>
 800be2c:	4606      	mov	r6, r0
 800be2e:	460f      	mov	r7, r1
 800be30:	f7f5 f9bc 	bl	80011ac <__aeabi_d2iz>
 800be34:	2200      	movs	r2, #0
 800be36:	9004      	str	r0, [sp, #16]
 800be38:	2300      	movs	r3, #0
 800be3a:	4630      	mov	r0, r6
 800be3c:	4639      	mov	r1, r7
 800be3e:	f7f4 fe8f 	bl	8000b60 <__aeabi_dcmplt>
 800be42:	2800      	cmp	r0, #0
 800be44:	f040 8230 	bne.w	800c2a8 <_dtoa_r+0x5a8>
 800be48:	9e04      	ldr	r6, [sp, #16]
 800be4a:	2e16      	cmp	r6, #22
 800be4c:	f200 8229 	bhi.w	800c2a2 <_dtoa_r+0x5a2>
 800be50:	4b61      	ldr	r3, [pc, #388]	; (800bfd8 <_dtoa_r+0x2d8>)
 800be52:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800be56:	e9d3 0100 	ldrd	r0, r1, [r3]
 800be5a:	4652      	mov	r2, sl
 800be5c:	465b      	mov	r3, fp
 800be5e:	f7f4 fe9d 	bl	8000b9c <__aeabi_dcmpgt>
 800be62:	2800      	cmp	r0, #0
 800be64:	f000 8249 	beq.w	800c2fa <_dtoa_r+0x5fa>
 800be68:	1e73      	subs	r3, r6, #1
 800be6a:	9304      	str	r3, [sp, #16]
 800be6c:	2300      	movs	r3, #0
 800be6e:	930c      	str	r3, [sp, #48]	; 0x30
 800be70:	1b2c      	subs	r4, r5, r4
 800be72:	1e63      	subs	r3, r4, #1
 800be74:	9302      	str	r3, [sp, #8]
 800be76:	f100 8232 	bmi.w	800c2de <_dtoa_r+0x5de>
 800be7a:	2300      	movs	r3, #0
 800be7c:	9305      	str	r3, [sp, #20]
 800be7e:	9b04      	ldr	r3, [sp, #16]
 800be80:	2b00      	cmp	r3, #0
 800be82:	f2c0 8223 	blt.w	800c2cc <_dtoa_r+0x5cc>
 800be86:	9a02      	ldr	r2, [sp, #8]
 800be88:	930b      	str	r3, [sp, #44]	; 0x2c
 800be8a:	4611      	mov	r1, r2
 800be8c:	4419      	add	r1, r3
 800be8e:	2300      	movs	r3, #0
 800be90:	9102      	str	r1, [sp, #8]
 800be92:	930a      	str	r3, [sp, #40]	; 0x28
 800be94:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800be96:	2b09      	cmp	r3, #9
 800be98:	d829      	bhi.n	800beee <_dtoa_r+0x1ee>
 800be9a:	2b05      	cmp	r3, #5
 800be9c:	f340 8658 	ble.w	800cb50 <_dtoa_r+0xe50>
 800bea0:	3b04      	subs	r3, #4
 800bea2:	9320      	str	r3, [sp, #128]	; 0x80
 800bea4:	2500      	movs	r5, #0
 800bea6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800bea8:	3b02      	subs	r3, #2
 800beaa:	2b03      	cmp	r3, #3
 800beac:	f200 8635 	bhi.w	800cb1a <_dtoa_r+0xe1a>
 800beb0:	e8df f013 	tbh	[pc, r3, lsl #1]
 800beb4:	0228032c 	.word	0x0228032c
 800beb8:	04590337 	.word	0x04590337
 800bebc:	4b44      	ldr	r3, [pc, #272]	; (800bfd0 <_dtoa_r+0x2d0>)
 800bebe:	4a47      	ldr	r2, [pc, #284]	; (800bfdc <_dtoa_r+0x2dc>)
 800bec0:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800bec4:	2800      	cmp	r0, #0
 800bec6:	bf14      	ite	ne
 800bec8:	4618      	movne	r0, r3
 800beca:	4610      	moveq	r0, r2
 800becc:	e755      	b.n	800bd7a <_dtoa_r+0x7a>
 800bece:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bed2:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800bed6:	9510      	str	r5, [sp, #64]	; 0x40
 800bed8:	4650      	mov	r0, sl
 800beda:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800bede:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800bee2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800bee4:	e784      	b.n	800bdf0 <_dtoa_r+0xf0>
 800bee6:	483e      	ldr	r0, [pc, #248]	; (800bfe0 <_dtoa_r+0x2e0>)
 800bee8:	e73b      	b.n	800bd62 <_dtoa_r+0x62>
 800beea:	1cc3      	adds	r3, r0, #3
 800beec:	e74e      	b.n	800bd8c <_dtoa_r+0x8c>
 800beee:	2100      	movs	r1, #0
 800bef0:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800bef4:	4648      	mov	r0, r9
 800bef6:	9120      	str	r1, [sp, #128]	; 0x80
 800bef8:	f001 fe1c 	bl	800db34 <_Balloc>
 800befc:	f04f 33ff 	mov.w	r3, #4294967295
 800bf00:	9306      	str	r3, [sp, #24]
 800bf02:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bf04:	930d      	str	r3, [sp, #52]	; 0x34
 800bf06:	2301      	movs	r3, #1
 800bf08:	9007      	str	r0, [sp, #28]
 800bf0a:	9221      	str	r2, [sp, #132]	; 0x84
 800bf0c:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800bf10:	9309      	str	r3, [sp, #36]	; 0x24
 800bf12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	f2c0 80d1 	blt.w	800c0bc <_dtoa_r+0x3bc>
 800bf1a:	9a04      	ldr	r2, [sp, #16]
 800bf1c:	2a0e      	cmp	r2, #14
 800bf1e:	f300 80cd 	bgt.w	800c0bc <_dtoa_r+0x3bc>
 800bf22:	4b2d      	ldr	r3, [pc, #180]	; (800bfd8 <_dtoa_r+0x2d8>)
 800bf24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf28:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bf2c:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bf30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	f2c0 8300 	blt.w	800c538 <_dtoa_r+0x838>
 800bf38:	4656      	mov	r6, sl
 800bf3a:	465f      	mov	r7, fp
 800bf3c:	4650      	mov	r0, sl
 800bf3e:	4659      	mov	r1, fp
 800bf40:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 800bf44:	4652      	mov	r2, sl
 800bf46:	465b      	mov	r3, fp
 800bf48:	f7f4 fcc2 	bl	80008d0 <__aeabi_ddiv>
 800bf4c:	f7f5 f92e 	bl	80011ac <__aeabi_d2iz>
 800bf50:	4604      	mov	r4, r0
 800bf52:	f7f4 fb2d 	bl	80005b0 <__aeabi_i2d>
 800bf56:	4652      	mov	r2, sl
 800bf58:	465b      	mov	r3, fp
 800bf5a:	f7f4 fb8f 	bl	800067c <__aeabi_dmul>
 800bf5e:	460b      	mov	r3, r1
 800bf60:	4602      	mov	r2, r0
 800bf62:	4639      	mov	r1, r7
 800bf64:	4630      	mov	r0, r6
 800bf66:	f7f4 f9d5 	bl	8000314 <__aeabi_dsub>
 800bf6a:	9d07      	ldr	r5, [sp, #28]
 800bf6c:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800bf70:	702b      	strb	r3, [r5, #0]
 800bf72:	9b06      	ldr	r3, [sp, #24]
 800bf74:	2b01      	cmp	r3, #1
 800bf76:	4606      	mov	r6, r0
 800bf78:	460f      	mov	r7, r1
 800bf7a:	f105 0501 	add.w	r5, r5, #1
 800bf7e:	d062      	beq.n	800c046 <_dtoa_r+0x346>
 800bf80:	2200      	movs	r2, #0
 800bf82:	4b18      	ldr	r3, [pc, #96]	; (800bfe4 <_dtoa_r+0x2e4>)
 800bf84:	f7f4 fb7a 	bl	800067c <__aeabi_dmul>
 800bf88:	2200      	movs	r2, #0
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	4606      	mov	r6, r0
 800bf8e:	460f      	mov	r7, r1
 800bf90:	f7f4 fddc 	bl	8000b4c <__aeabi_dcmpeq>
 800bf94:	2800      	cmp	r0, #0
 800bf96:	d17e      	bne.n	800c096 <_dtoa_r+0x396>
 800bf98:	f8cd 9014 	str.w	r9, [sp, #20]
 800bf9c:	f8dd a018 	ldr.w	sl, [sp, #24]
 800bfa0:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800bfa4:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bfa8:	e029      	b.n	800bffe <_dtoa_r+0x2fe>
 800bfaa:	bf00      	nop
 800bfac:	f3af 8000 	nop.w
 800bfb0:	636f4361 	.word	0x636f4361
 800bfb4:	3fd287a7 	.word	0x3fd287a7
 800bfb8:	8b60c8b3 	.word	0x8b60c8b3
 800bfbc:	3fc68a28 	.word	0x3fc68a28
 800bfc0:	509f79fb 	.word	0x509f79fb
 800bfc4:	3fd34413 	.word	0x3fd34413
 800bfc8:	7ff00000 	.word	0x7ff00000
 800bfcc:	0800f285 	.word	0x0800f285
 800bfd0:	0800f2c4 	.word	0x0800f2c4
 800bfd4:	3ff80000 	.word	0x3ff80000
 800bfd8:	0800f2d8 	.word	0x0800f2d8
 800bfdc:	0800f2b8 	.word	0x0800f2b8
 800bfe0:	0800f284 	.word	0x0800f284
 800bfe4:	40240000 	.word	0x40240000
 800bfe8:	f7f4 fb48 	bl	800067c <__aeabi_dmul>
 800bfec:	2200      	movs	r2, #0
 800bfee:	2300      	movs	r3, #0
 800bff0:	4606      	mov	r6, r0
 800bff2:	460f      	mov	r7, r1
 800bff4:	f7f4 fdaa 	bl	8000b4c <__aeabi_dcmpeq>
 800bff8:	2800      	cmp	r0, #0
 800bffa:	f040 83b7 	bne.w	800c76c <_dtoa_r+0xa6c>
 800bffe:	4642      	mov	r2, r8
 800c000:	464b      	mov	r3, r9
 800c002:	4630      	mov	r0, r6
 800c004:	4639      	mov	r1, r7
 800c006:	f7f4 fc63 	bl	80008d0 <__aeabi_ddiv>
 800c00a:	f7f5 f8cf 	bl	80011ac <__aeabi_d2iz>
 800c00e:	4604      	mov	r4, r0
 800c010:	f7f4 face 	bl	80005b0 <__aeabi_i2d>
 800c014:	4642      	mov	r2, r8
 800c016:	464b      	mov	r3, r9
 800c018:	f7f4 fb30 	bl	800067c <__aeabi_dmul>
 800c01c:	4602      	mov	r2, r0
 800c01e:	460b      	mov	r3, r1
 800c020:	4630      	mov	r0, r6
 800c022:	4639      	mov	r1, r7
 800c024:	f7f4 f976 	bl	8000314 <__aeabi_dsub>
 800c028:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800c02c:	f805 eb01 	strb.w	lr, [r5], #1
 800c030:	ebcb 0e05 	rsb	lr, fp, r5
 800c034:	45d6      	cmp	lr, sl
 800c036:	4606      	mov	r6, r0
 800c038:	460f      	mov	r7, r1
 800c03a:	f04f 0200 	mov.w	r2, #0
 800c03e:	4bb0      	ldr	r3, [pc, #704]	; (800c300 <_dtoa_r+0x600>)
 800c040:	d1d2      	bne.n	800bfe8 <_dtoa_r+0x2e8>
 800c042:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800c046:	4632      	mov	r2, r6
 800c048:	463b      	mov	r3, r7
 800c04a:	4630      	mov	r0, r6
 800c04c:	4639      	mov	r1, r7
 800c04e:	f7f4 f963 	bl	8000318 <__adddf3>
 800c052:	4606      	mov	r6, r0
 800c054:	460f      	mov	r7, r1
 800c056:	4602      	mov	r2, r0
 800c058:	460b      	mov	r3, r1
 800c05a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c05e:	f7f4 fd7f 	bl	8000b60 <__aeabi_dcmplt>
 800c062:	b940      	cbnz	r0, 800c076 <_dtoa_r+0x376>
 800c064:	4632      	mov	r2, r6
 800c066:	463b      	mov	r3, r7
 800c068:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c06c:	f7f4 fd6e 	bl	8000b4c <__aeabi_dcmpeq>
 800c070:	b188      	cbz	r0, 800c096 <_dtoa_r+0x396>
 800c072:	07e3      	lsls	r3, r4, #31
 800c074:	d50f      	bpl.n	800c096 <_dtoa_r+0x396>
 800c076:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 800c07a:	9a07      	ldr	r2, [sp, #28]
 800c07c:	1e6b      	subs	r3, r5, #1
 800c07e:	e004      	b.n	800c08a <_dtoa_r+0x38a>
 800c080:	429a      	cmp	r2, r3
 800c082:	f000 842c 	beq.w	800c8de <_dtoa_r+0xbde>
 800c086:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c08a:	2c39      	cmp	r4, #57	; 0x39
 800c08c:	f103 0501 	add.w	r5, r3, #1
 800c090:	d0f6      	beq.n	800c080 <_dtoa_r+0x380>
 800c092:	3401      	adds	r4, #1
 800c094:	701c      	strb	r4, [r3, #0]
 800c096:	9908      	ldr	r1, [sp, #32]
 800c098:	4648      	mov	r0, r9
 800c09a:	f001 fd71 	bl	800db80 <_Bfree>
 800c09e:	2200      	movs	r2, #0
 800c0a0:	9b04      	ldr	r3, [sp, #16]
 800c0a2:	702a      	strb	r2, [r5, #0]
 800c0a4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c0a6:	3301      	adds	r3, #1
 800c0a8:	6013      	str	r3, [r2, #0]
 800c0aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	f000 83a7 	beq.w	800c800 <_dtoa_r+0xb00>
 800c0b2:	9807      	ldr	r0, [sp, #28]
 800c0b4:	601d      	str	r5, [r3, #0]
 800c0b6:	b017      	add	sp, #92	; 0x5c
 800c0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0be:	2a00      	cmp	r2, #0
 800c0c0:	f000 8112 	beq.w	800c2e8 <_dtoa_r+0x5e8>
 800c0c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c0c6:	2a01      	cmp	r2, #1
 800c0c8:	f340 8258 	ble.w	800c57c <_dtoa_r+0x87c>
 800c0cc:	9b06      	ldr	r3, [sp, #24]
 800c0ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c0d0:	1e5f      	subs	r7, r3, #1
 800c0d2:	42ba      	cmp	r2, r7
 800c0d4:	f2c0 8397 	blt.w	800c806 <_dtoa_r+0xb06>
 800c0d8:	1bd7      	subs	r7, r2, r7
 800c0da:	9b06      	ldr	r3, [sp, #24]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	f2c0 848a 	blt.w	800c9f6 <_dtoa_r+0xcf6>
 800c0e2:	9d05      	ldr	r5, [sp, #20]
 800c0e4:	9b06      	ldr	r3, [sp, #24]
 800c0e6:	9a05      	ldr	r2, [sp, #20]
 800c0e8:	441a      	add	r2, r3
 800c0ea:	9205      	str	r2, [sp, #20]
 800c0ec:	9a02      	ldr	r2, [sp, #8]
 800c0ee:	2101      	movs	r1, #1
 800c0f0:	441a      	add	r2, r3
 800c0f2:	4648      	mov	r0, r9
 800c0f4:	9202      	str	r2, [sp, #8]
 800c0f6:	f001 fddb 	bl	800dcb0 <__i2b>
 800c0fa:	4606      	mov	r6, r0
 800c0fc:	b165      	cbz	r5, 800c118 <_dtoa_r+0x418>
 800c0fe:	9902      	ldr	r1, [sp, #8]
 800c100:	2900      	cmp	r1, #0
 800c102:	460b      	mov	r3, r1
 800c104:	dd08      	ble.n	800c118 <_dtoa_r+0x418>
 800c106:	42a9      	cmp	r1, r5
 800c108:	9a05      	ldr	r2, [sp, #20]
 800c10a:	bfa8      	it	ge
 800c10c:	462b      	movge	r3, r5
 800c10e:	1ad2      	subs	r2, r2, r3
 800c110:	1aed      	subs	r5, r5, r3
 800c112:	1acb      	subs	r3, r1, r3
 800c114:	9205      	str	r2, [sp, #20]
 800c116:	9302      	str	r3, [sp, #8]
 800c118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	f340 82fc 	ble.w	800c718 <_dtoa_r+0xa18>
 800c120:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c122:	2a00      	cmp	r2, #0
 800c124:	f000 8201 	beq.w	800c52a <_dtoa_r+0x82a>
 800c128:	2f00      	cmp	r7, #0
 800c12a:	f000 81fe 	beq.w	800c52a <_dtoa_r+0x82a>
 800c12e:	4631      	mov	r1, r6
 800c130:	463a      	mov	r2, r7
 800c132:	4648      	mov	r0, r9
 800c134:	f001 fe5e 	bl	800ddf4 <__pow5mult>
 800c138:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c13c:	4601      	mov	r1, r0
 800c13e:	4642      	mov	r2, r8
 800c140:	4606      	mov	r6, r0
 800c142:	4648      	mov	r0, r9
 800c144:	f001 fdbe 	bl	800dcc4 <__multiply>
 800c148:	4641      	mov	r1, r8
 800c14a:	4604      	mov	r4, r0
 800c14c:	4648      	mov	r0, r9
 800c14e:	f001 fd17 	bl	800db80 <_Bfree>
 800c152:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c154:	1bdb      	subs	r3, r3, r7
 800c156:	930a      	str	r3, [sp, #40]	; 0x28
 800c158:	f040 81e6 	bne.w	800c528 <_dtoa_r+0x828>
 800c15c:	2101      	movs	r1, #1
 800c15e:	4648      	mov	r0, r9
 800c160:	f001 fda6 	bl	800dcb0 <__i2b>
 800c164:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c166:	4680      	mov	r8, r0
 800c168:	2b00      	cmp	r3, #0
 800c16a:	f000 8219 	beq.w	800c5a0 <_dtoa_r+0x8a0>
 800c16e:	4601      	mov	r1, r0
 800c170:	461a      	mov	r2, r3
 800c172:	4648      	mov	r0, r9
 800c174:	f001 fe3e 	bl	800ddf4 <__pow5mult>
 800c178:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c17a:	2b01      	cmp	r3, #1
 800c17c:	4680      	mov	r8, r0
 800c17e:	f340 82f8 	ble.w	800c772 <_dtoa_r+0xa72>
 800c182:	2700      	movs	r7, #0
 800c184:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c188:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800c18c:	6918      	ldr	r0, [r3, #16]
 800c18e:	f001 fd41 	bl	800dc14 <__hi0bits>
 800c192:	f1c0 0020 	rsb	r0, r0, #32
 800c196:	9a02      	ldr	r2, [sp, #8]
 800c198:	4410      	add	r0, r2
 800c19a:	f010 001f 	ands.w	r0, r0, #31
 800c19e:	f000 81f6 	beq.w	800c58e <_dtoa_r+0x88e>
 800c1a2:	f1c0 0320 	rsb	r3, r0, #32
 800c1a6:	2b04      	cmp	r3, #4
 800c1a8:	f340 84ca 	ble.w	800cb40 <_dtoa_r+0xe40>
 800c1ac:	9b05      	ldr	r3, [sp, #20]
 800c1ae:	f1c0 001c 	rsb	r0, r0, #28
 800c1b2:	4403      	add	r3, r0
 800c1b4:	9305      	str	r3, [sp, #20]
 800c1b6:	4613      	mov	r3, r2
 800c1b8:	4403      	add	r3, r0
 800c1ba:	4405      	add	r5, r0
 800c1bc:	9302      	str	r3, [sp, #8]
 800c1be:	9b05      	ldr	r3, [sp, #20]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	dd05      	ble.n	800c1d0 <_dtoa_r+0x4d0>
 800c1c4:	4621      	mov	r1, r4
 800c1c6:	461a      	mov	r2, r3
 800c1c8:	4648      	mov	r0, r9
 800c1ca:	f001 fe63 	bl	800de94 <__lshift>
 800c1ce:	4604      	mov	r4, r0
 800c1d0:	9b02      	ldr	r3, [sp, #8]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	dd05      	ble.n	800c1e2 <_dtoa_r+0x4e2>
 800c1d6:	4641      	mov	r1, r8
 800c1d8:	461a      	mov	r2, r3
 800c1da:	4648      	mov	r0, r9
 800c1dc:	f001 fe5a 	bl	800de94 <__lshift>
 800c1e0:	4680      	mov	r8, r0
 800c1e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	f040 827c 	bne.w	800c6e2 <_dtoa_r+0x9e2>
 800c1ea:	9b06      	ldr	r3, [sp, #24]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	f340 8295 	ble.w	800c71c <_dtoa_r+0xa1c>
 800c1f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	f040 81f5 	bne.w	800c5e4 <_dtoa_r+0x8e4>
 800c1fa:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800c1fe:	9f06      	ldr	r7, [sp, #24]
 800c200:	465d      	mov	r5, fp
 800c202:	e002      	b.n	800c20a <_dtoa_r+0x50a>
 800c204:	f001 fcc6 	bl	800db94 <__multadd>
 800c208:	4604      	mov	r4, r0
 800c20a:	4641      	mov	r1, r8
 800c20c:	4620      	mov	r0, r4
 800c20e:	f7ff fce1 	bl	800bbd4 <quorem>
 800c212:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c216:	f805 ab01 	strb.w	sl, [r5], #1
 800c21a:	ebcb 0305 	rsb	r3, fp, r5
 800c21e:	42bb      	cmp	r3, r7
 800c220:	f04f 020a 	mov.w	r2, #10
 800c224:	f04f 0300 	mov.w	r3, #0
 800c228:	4621      	mov	r1, r4
 800c22a:	4648      	mov	r0, r9
 800c22c:	dbea      	blt.n	800c204 <_dtoa_r+0x504>
 800c22e:	9b07      	ldr	r3, [sp, #28]
 800c230:	9a06      	ldr	r2, [sp, #24]
 800c232:	2a01      	cmp	r2, #1
 800c234:	bfac      	ite	ge
 800c236:	189b      	addge	r3, r3, r2
 800c238:	3301      	addlt	r3, #1
 800c23a:	461d      	mov	r5, r3
 800c23c:	f04f 0b00 	mov.w	fp, #0
 800c240:	4621      	mov	r1, r4
 800c242:	2201      	movs	r2, #1
 800c244:	4648      	mov	r0, r9
 800c246:	f001 fe25 	bl	800de94 <__lshift>
 800c24a:	4641      	mov	r1, r8
 800c24c:	9008      	str	r0, [sp, #32]
 800c24e:	f001 fe79 	bl	800df44 <__mcmp>
 800c252:	2800      	cmp	r0, #0
 800c254:	f340 830d 	ble.w	800c872 <_dtoa_r+0xb72>
 800c258:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c25c:	9907      	ldr	r1, [sp, #28]
 800c25e:	1e6b      	subs	r3, r5, #1
 800c260:	e004      	b.n	800c26c <_dtoa_r+0x56c>
 800c262:	428b      	cmp	r3, r1
 800c264:	f000 8278 	beq.w	800c758 <_dtoa_r+0xa58>
 800c268:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c26c:	2a39      	cmp	r2, #57	; 0x39
 800c26e:	f103 0501 	add.w	r5, r3, #1
 800c272:	d0f6      	beq.n	800c262 <_dtoa_r+0x562>
 800c274:	3201      	adds	r2, #1
 800c276:	701a      	strb	r2, [r3, #0]
 800c278:	4641      	mov	r1, r8
 800c27a:	4648      	mov	r0, r9
 800c27c:	f001 fc80 	bl	800db80 <_Bfree>
 800c280:	2e00      	cmp	r6, #0
 800c282:	f43f af08 	beq.w	800c096 <_dtoa_r+0x396>
 800c286:	f1bb 0f00 	cmp.w	fp, #0
 800c28a:	d005      	beq.n	800c298 <_dtoa_r+0x598>
 800c28c:	45b3      	cmp	fp, r6
 800c28e:	d003      	beq.n	800c298 <_dtoa_r+0x598>
 800c290:	4659      	mov	r1, fp
 800c292:	4648      	mov	r0, r9
 800c294:	f001 fc74 	bl	800db80 <_Bfree>
 800c298:	4631      	mov	r1, r6
 800c29a:	4648      	mov	r0, r9
 800c29c:	f001 fc70 	bl	800db80 <_Bfree>
 800c2a0:	e6f9      	b.n	800c096 <_dtoa_r+0x396>
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	930c      	str	r3, [sp, #48]	; 0x30
 800c2a6:	e5e3      	b.n	800be70 <_dtoa_r+0x170>
 800c2a8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c2ac:	4640      	mov	r0, r8
 800c2ae:	f7f4 f97f 	bl	80005b0 <__aeabi_i2d>
 800c2b2:	4602      	mov	r2, r0
 800c2b4:	460b      	mov	r3, r1
 800c2b6:	4630      	mov	r0, r6
 800c2b8:	4639      	mov	r1, r7
 800c2ba:	f7f4 fc47 	bl	8000b4c <__aeabi_dcmpeq>
 800c2be:	2800      	cmp	r0, #0
 800c2c0:	f47f adc2 	bne.w	800be48 <_dtoa_r+0x148>
 800c2c4:	f108 33ff 	add.w	r3, r8, #4294967295
 800c2c8:	9304      	str	r3, [sp, #16]
 800c2ca:	e5bd      	b.n	800be48 <_dtoa_r+0x148>
 800c2cc:	9a05      	ldr	r2, [sp, #20]
 800c2ce:	9b04      	ldr	r3, [sp, #16]
 800c2d0:	1ad2      	subs	r2, r2, r3
 800c2d2:	425b      	negs	r3, r3
 800c2d4:	930a      	str	r3, [sp, #40]	; 0x28
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	9205      	str	r2, [sp, #20]
 800c2da:	930b      	str	r3, [sp, #44]	; 0x2c
 800c2dc:	e5da      	b.n	800be94 <_dtoa_r+0x194>
 800c2de:	425b      	negs	r3, r3
 800c2e0:	9305      	str	r3, [sp, #20]
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	9302      	str	r3, [sp, #8]
 800c2e6:	e5ca      	b.n	800be7e <_dtoa_r+0x17e>
 800c2e8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c2ea:	9d05      	ldr	r5, [sp, #20]
 800c2ec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c2ee:	e705      	b.n	800c0fc <_dtoa_r+0x3fc>
 800c2f0:	f1c3 0820 	rsb	r8, r3, #32
 800c2f4:	fa0a f008 	lsl.w	r0, sl, r8
 800c2f8:	e573      	b.n	800bde2 <_dtoa_r+0xe2>
 800c2fa:	900c      	str	r0, [sp, #48]	; 0x30
 800c2fc:	e5b8      	b.n	800be70 <_dtoa_r+0x170>
 800c2fe:	bf00      	nop
 800c300:	40240000 	.word	0x40240000
 800c304:	2300      	movs	r3, #0
 800c306:	9309      	str	r3, [sp, #36]	; 0x24
 800c308:	9b04      	ldr	r3, [sp, #16]
 800c30a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c30c:	4413      	add	r3, r2
 800c30e:	930d      	str	r3, [sp, #52]	; 0x34
 800c310:	3301      	adds	r3, #1
 800c312:	2b00      	cmp	r3, #0
 800c314:	9306      	str	r3, [sp, #24]
 800c316:	f340 8283 	ble.w	800c820 <_dtoa_r+0xb20>
 800c31a:	9c06      	ldr	r4, [sp, #24]
 800c31c:	4626      	mov	r6, r4
 800c31e:	2100      	movs	r1, #0
 800c320:	2e17      	cmp	r6, #23
 800c322:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800c326:	d90b      	bls.n	800c340 <_dtoa_r+0x640>
 800c328:	2201      	movs	r2, #1
 800c32a:	2304      	movs	r3, #4
 800c32c:	005b      	lsls	r3, r3, #1
 800c32e:	f103 0014 	add.w	r0, r3, #20
 800c332:	42b0      	cmp	r0, r6
 800c334:	4611      	mov	r1, r2
 800c336:	f102 0201 	add.w	r2, r2, #1
 800c33a:	d9f7      	bls.n	800c32c <_dtoa_r+0x62c>
 800c33c:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800c340:	4648      	mov	r0, r9
 800c342:	f001 fbf7 	bl	800db34 <_Balloc>
 800c346:	2c0e      	cmp	r4, #14
 800c348:	9007      	str	r0, [sp, #28]
 800c34a:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800c34e:	f63f ade0 	bhi.w	800bf12 <_dtoa_r+0x212>
 800c352:	2d00      	cmp	r5, #0
 800c354:	f43f addd 	beq.w	800bf12 <_dtoa_r+0x212>
 800c358:	9904      	ldr	r1, [sp, #16]
 800c35a:	4657      	mov	r7, sl
 800c35c:	46d8      	mov	r8, fp
 800c35e:	2900      	cmp	r1, #0
 800c360:	e9cd 780e 	strd	r7, r8, [sp, #56]	; 0x38
 800c364:	f340 8292 	ble.w	800c88c <_dtoa_r+0xb8c>
 800c368:	4b91      	ldr	r3, [pc, #580]	; (800c5b0 <_dtoa_r+0x8b0>)
 800c36a:	f001 020f 	and.w	r2, r1, #15
 800c36e:	110e      	asrs	r6, r1, #4
 800c370:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c374:	06f0      	lsls	r0, r6, #27
 800c376:	e9d3 4500 	ldrd	r4, r5, [r3]
 800c37a:	f140 824c 	bpl.w	800c816 <_dtoa_r+0xb16>
 800c37e:	4b8d      	ldr	r3, [pc, #564]	; (800c5b4 <_dtoa_r+0x8b4>)
 800c380:	4650      	mov	r0, sl
 800c382:	4659      	mov	r1, fp
 800c384:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c388:	f7f4 faa2 	bl	80008d0 <__aeabi_ddiv>
 800c38c:	f006 060f 	and.w	r6, r6, #15
 800c390:	4682      	mov	sl, r0
 800c392:	468b      	mov	fp, r1
 800c394:	f04f 0803 	mov.w	r8, #3
 800c398:	b186      	cbz	r6, 800c3bc <_dtoa_r+0x6bc>
 800c39a:	4f86      	ldr	r7, [pc, #536]	; (800c5b4 <_dtoa_r+0x8b4>)
 800c39c:	07f1      	lsls	r1, r6, #31
 800c39e:	d509      	bpl.n	800c3b4 <_dtoa_r+0x6b4>
 800c3a0:	4620      	mov	r0, r4
 800c3a2:	4629      	mov	r1, r5
 800c3a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3a8:	f7f4 f968 	bl	800067c <__aeabi_dmul>
 800c3ac:	f108 0801 	add.w	r8, r8, #1
 800c3b0:	4604      	mov	r4, r0
 800c3b2:	460d      	mov	r5, r1
 800c3b4:	1076      	asrs	r6, r6, #1
 800c3b6:	f107 0708 	add.w	r7, r7, #8
 800c3ba:	d1ef      	bne.n	800c39c <_dtoa_r+0x69c>
 800c3bc:	4622      	mov	r2, r4
 800c3be:	462b      	mov	r3, r5
 800c3c0:	4650      	mov	r0, sl
 800c3c2:	4659      	mov	r1, fp
 800c3c4:	f7f4 fa84 	bl	80008d0 <__aeabi_ddiv>
 800c3c8:	4606      	mov	r6, r0
 800c3ca:	460f      	mov	r7, r1
 800c3cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c3ce:	b143      	cbz	r3, 800c3e2 <_dtoa_r+0x6e2>
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	4b79      	ldr	r3, [pc, #484]	; (800c5b8 <_dtoa_r+0x8b8>)
 800c3d4:	4630      	mov	r0, r6
 800c3d6:	4639      	mov	r1, r7
 800c3d8:	f7f4 fbc2 	bl	8000b60 <__aeabi_dcmplt>
 800c3dc:	2800      	cmp	r0, #0
 800c3de:	f040 8320 	bne.w	800ca22 <_dtoa_r+0xd22>
 800c3e2:	4640      	mov	r0, r8
 800c3e4:	f7f4 f8e4 	bl	80005b0 <__aeabi_i2d>
 800c3e8:	4632      	mov	r2, r6
 800c3ea:	463b      	mov	r3, r7
 800c3ec:	f7f4 f946 	bl	800067c <__aeabi_dmul>
 800c3f0:	4b72      	ldr	r3, [pc, #456]	; (800c5bc <_dtoa_r+0x8bc>)
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	f7f3 ff90 	bl	8000318 <__adddf3>
 800c3f8:	9b06      	ldr	r3, [sp, #24]
 800c3fa:	4604      	mov	r4, r0
 800c3fc:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800c400:	2b00      	cmp	r3, #0
 800c402:	f000 81df 	beq.w	800c7c4 <_dtoa_r+0xac4>
 800c406:	9b04      	ldr	r3, [sp, #16]
 800c408:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800c40c:	9311      	str	r3, [sp, #68]	; 0x44
 800c40e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c410:	2b00      	cmp	r3, #0
 800c412:	f000 8297 	beq.w	800c944 <_dtoa_r+0xc44>
 800c416:	4b66      	ldr	r3, [pc, #408]	; (800c5b0 <_dtoa_r+0x8b0>)
 800c418:	4969      	ldr	r1, [pc, #420]	; (800c5c0 <_dtoa_r+0x8c0>)
 800c41a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c41e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c422:	2000      	movs	r0, #0
 800c424:	f7f4 fa54 	bl	80008d0 <__aeabi_ddiv>
 800c428:	4622      	mov	r2, r4
 800c42a:	462b      	mov	r3, r5
 800c42c:	f7f3 ff72 	bl	8000314 <__aeabi_dsub>
 800c430:	4682      	mov	sl, r0
 800c432:	468b      	mov	fp, r1
 800c434:	4630      	mov	r0, r6
 800c436:	4639      	mov	r1, r7
 800c438:	f7f4 feb8 	bl	80011ac <__aeabi_d2iz>
 800c43c:	4604      	mov	r4, r0
 800c43e:	f7f4 f8b7 	bl	80005b0 <__aeabi_i2d>
 800c442:	4602      	mov	r2, r0
 800c444:	460b      	mov	r3, r1
 800c446:	4630      	mov	r0, r6
 800c448:	4639      	mov	r1, r7
 800c44a:	f7f3 ff63 	bl	8000314 <__aeabi_dsub>
 800c44e:	3430      	adds	r4, #48	; 0x30
 800c450:	9d07      	ldr	r5, [sp, #28]
 800c452:	b2e4      	uxtb	r4, r4
 800c454:	4606      	mov	r6, r0
 800c456:	460f      	mov	r7, r1
 800c458:	702c      	strb	r4, [r5, #0]
 800c45a:	4602      	mov	r2, r0
 800c45c:	460b      	mov	r3, r1
 800c45e:	4650      	mov	r0, sl
 800c460:	4659      	mov	r1, fp
 800c462:	3501      	adds	r5, #1
 800c464:	f7f4 fb9a 	bl	8000b9c <__aeabi_dcmpgt>
 800c468:	2800      	cmp	r0, #0
 800c46a:	d14c      	bne.n	800c506 <_dtoa_r+0x806>
 800c46c:	4632      	mov	r2, r6
 800c46e:	463b      	mov	r3, r7
 800c470:	2000      	movs	r0, #0
 800c472:	4951      	ldr	r1, [pc, #324]	; (800c5b8 <_dtoa_r+0x8b8>)
 800c474:	f7f3 ff4e 	bl	8000314 <__aeabi_dsub>
 800c478:	4602      	mov	r2, r0
 800c47a:	460b      	mov	r3, r1
 800c47c:	4650      	mov	r0, sl
 800c47e:	4659      	mov	r1, fp
 800c480:	f7f4 fb8c 	bl	8000b9c <__aeabi_dcmpgt>
 800c484:	2800      	cmp	r0, #0
 800c486:	f040 830d 	bne.w	800caa4 <_dtoa_r+0xda4>
 800c48a:	f1b8 0f01 	cmp.w	r8, #1
 800c48e:	f340 81b3 	ble.w	800c7f8 <_dtoa_r+0xaf8>
 800c492:	9b07      	ldr	r3, [sp, #28]
 800c494:	4498      	add	r8, r3
 800c496:	e00d      	b.n	800c4b4 <_dtoa_r+0x7b4>
 800c498:	2000      	movs	r0, #0
 800c49a:	4947      	ldr	r1, [pc, #284]	; (800c5b8 <_dtoa_r+0x8b8>)
 800c49c:	f7f3 ff3a 	bl	8000314 <__aeabi_dsub>
 800c4a0:	4652      	mov	r2, sl
 800c4a2:	465b      	mov	r3, fp
 800c4a4:	f7f4 fb5c 	bl	8000b60 <__aeabi_dcmplt>
 800c4a8:	2800      	cmp	r0, #0
 800c4aa:	f040 82fb 	bne.w	800caa4 <_dtoa_r+0xda4>
 800c4ae:	4545      	cmp	r5, r8
 800c4b0:	f000 81a2 	beq.w	800c7f8 <_dtoa_r+0xaf8>
 800c4b4:	4650      	mov	r0, sl
 800c4b6:	4659      	mov	r1, fp
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	4b42      	ldr	r3, [pc, #264]	; (800c5c4 <_dtoa_r+0x8c4>)
 800c4bc:	f7f4 f8de 	bl	800067c <__aeabi_dmul>
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	4b40      	ldr	r3, [pc, #256]	; (800c5c4 <_dtoa_r+0x8c4>)
 800c4c4:	4682      	mov	sl, r0
 800c4c6:	468b      	mov	fp, r1
 800c4c8:	4630      	mov	r0, r6
 800c4ca:	4639      	mov	r1, r7
 800c4cc:	f7f4 f8d6 	bl	800067c <__aeabi_dmul>
 800c4d0:	460f      	mov	r7, r1
 800c4d2:	4606      	mov	r6, r0
 800c4d4:	f7f4 fe6a 	bl	80011ac <__aeabi_d2iz>
 800c4d8:	4604      	mov	r4, r0
 800c4da:	f7f4 f869 	bl	80005b0 <__aeabi_i2d>
 800c4de:	4602      	mov	r2, r0
 800c4e0:	460b      	mov	r3, r1
 800c4e2:	4630      	mov	r0, r6
 800c4e4:	4639      	mov	r1, r7
 800c4e6:	f7f3 ff15 	bl	8000314 <__aeabi_dsub>
 800c4ea:	3430      	adds	r4, #48	; 0x30
 800c4ec:	b2e4      	uxtb	r4, r4
 800c4ee:	4652      	mov	r2, sl
 800c4f0:	465b      	mov	r3, fp
 800c4f2:	f805 4b01 	strb.w	r4, [r5], #1
 800c4f6:	4606      	mov	r6, r0
 800c4f8:	460f      	mov	r7, r1
 800c4fa:	f7f4 fb31 	bl	8000b60 <__aeabi_dcmplt>
 800c4fe:	4632      	mov	r2, r6
 800c500:	463b      	mov	r3, r7
 800c502:	2800      	cmp	r0, #0
 800c504:	d0c8      	beq.n	800c498 <_dtoa_r+0x798>
 800c506:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c508:	9304      	str	r3, [sp, #16]
 800c50a:	e5c4      	b.n	800c096 <_dtoa_r+0x396>
 800c50c:	2300      	movs	r3, #0
 800c50e:	9309      	str	r3, [sp, #36]	; 0x24
 800c510:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c512:	2b00      	cmp	r3, #0
 800c514:	f340 8189 	ble.w	800c82a <_dtoa_r+0xb2a>
 800c518:	461e      	mov	r6, r3
 800c51a:	461c      	mov	r4, r3
 800c51c:	930d      	str	r3, [sp, #52]	; 0x34
 800c51e:	9306      	str	r3, [sp, #24]
 800c520:	e6fd      	b.n	800c31e <_dtoa_r+0x61e>
 800c522:	2301      	movs	r3, #1
 800c524:	9309      	str	r3, [sp, #36]	; 0x24
 800c526:	e7f3      	b.n	800c510 <_dtoa_r+0x810>
 800c528:	9408      	str	r4, [sp, #32]
 800c52a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c52c:	9908      	ldr	r1, [sp, #32]
 800c52e:	4648      	mov	r0, r9
 800c530:	f001 fc60 	bl	800ddf4 <__pow5mult>
 800c534:	4604      	mov	r4, r0
 800c536:	e611      	b.n	800c15c <_dtoa_r+0x45c>
 800c538:	9b06      	ldr	r3, [sp, #24]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	f73f acfc 	bgt.w	800bf38 <_dtoa_r+0x238>
 800c540:	f040 82da 	bne.w	800caf8 <_dtoa_r+0xdf8>
 800c544:	2200      	movs	r2, #0
 800c546:	4b20      	ldr	r3, [pc, #128]	; (800c5c8 <_dtoa_r+0x8c8>)
 800c548:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c54c:	f7f4 f896 	bl	800067c <__aeabi_dmul>
 800c550:	4652      	mov	r2, sl
 800c552:	465b      	mov	r3, fp
 800c554:	f7f4 fb18 	bl	8000b88 <__aeabi_dcmpge>
 800c558:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800c55c:	4646      	mov	r6, r8
 800c55e:	2800      	cmp	r0, #0
 800c560:	f000 80f2 	beq.w	800c748 <_dtoa_r+0xa48>
 800c564:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c566:	9d07      	ldr	r5, [sp, #28]
 800c568:	43db      	mvns	r3, r3
 800c56a:	9304      	str	r3, [sp, #16]
 800c56c:	4641      	mov	r1, r8
 800c56e:	4648      	mov	r0, r9
 800c570:	f001 fb06 	bl	800db80 <_Bfree>
 800c574:	2e00      	cmp	r6, #0
 800c576:	f43f ad8e 	beq.w	800c096 <_dtoa_r+0x396>
 800c57a:	e68d      	b.n	800c298 <_dtoa_r+0x598>
 800c57c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c57e:	2a00      	cmp	r2, #0
 800c580:	f000 8241 	beq.w	800ca06 <_dtoa_r+0xd06>
 800c584:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c588:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c58a:	9d05      	ldr	r5, [sp, #20]
 800c58c:	e5ab      	b.n	800c0e6 <_dtoa_r+0x3e6>
 800c58e:	201c      	movs	r0, #28
 800c590:	9b05      	ldr	r3, [sp, #20]
 800c592:	4403      	add	r3, r0
 800c594:	9305      	str	r3, [sp, #20]
 800c596:	9b02      	ldr	r3, [sp, #8]
 800c598:	4403      	add	r3, r0
 800c59a:	4405      	add	r5, r0
 800c59c:	9302      	str	r3, [sp, #8]
 800c59e:	e60e      	b.n	800c1be <_dtoa_r+0x4be>
 800c5a0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c5a2:	2b01      	cmp	r3, #1
 800c5a4:	f340 8282 	ble.w	800caac <_dtoa_r+0xdac>
 800c5a8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800c5aa:	2001      	movs	r0, #1
 800c5ac:	e5f3      	b.n	800c196 <_dtoa_r+0x496>
 800c5ae:	bf00      	nop
 800c5b0:	0800f2d8 	.word	0x0800f2d8
 800c5b4:	0800f3b0 	.word	0x0800f3b0
 800c5b8:	3ff00000 	.word	0x3ff00000
 800c5bc:	401c0000 	.word	0x401c0000
 800c5c0:	3fe00000 	.word	0x3fe00000
 800c5c4:	40240000 	.word	0x40240000
 800c5c8:	40140000 	.word	0x40140000
 800c5cc:	4631      	mov	r1, r6
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	220a      	movs	r2, #10
 800c5d2:	4648      	mov	r0, r9
 800c5d4:	f001 fade 	bl	800db94 <__multadd>
 800c5d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	4606      	mov	r6, r0
 800c5de:	f340 8297 	ble.w	800cb10 <_dtoa_r+0xe10>
 800c5e2:	9306      	str	r3, [sp, #24]
 800c5e4:	2d00      	cmp	r5, #0
 800c5e6:	dd05      	ble.n	800c5f4 <_dtoa_r+0x8f4>
 800c5e8:	4631      	mov	r1, r6
 800c5ea:	462a      	mov	r2, r5
 800c5ec:	4648      	mov	r0, r9
 800c5ee:	f001 fc51 	bl	800de94 <__lshift>
 800c5f2:	4606      	mov	r6, r0
 800c5f4:	2f00      	cmp	r7, #0
 800c5f6:	f040 817c 	bne.w	800c8f2 <_dtoa_r+0xbf2>
 800c5fa:	9605      	str	r6, [sp, #20]
 800c5fc:	9b06      	ldr	r3, [sp, #24]
 800c5fe:	9a07      	ldr	r2, [sp, #28]
 800c600:	f8dd b014 	ldr.w	fp, [sp, #20]
 800c604:	3b01      	subs	r3, #1
 800c606:	18d3      	adds	r3, r2, r3
 800c608:	9308      	str	r3, [sp, #32]
 800c60a:	f00a 0301 	and.w	r3, sl, #1
 800c60e:	9309      	str	r3, [sp, #36]	; 0x24
 800c610:	4617      	mov	r7, r2
 800c612:	46c2      	mov	sl, r8
 800c614:	4651      	mov	r1, sl
 800c616:	4620      	mov	r0, r4
 800c618:	f7ff fadc 	bl	800bbd4 <quorem>
 800c61c:	4631      	mov	r1, r6
 800c61e:	4605      	mov	r5, r0
 800c620:	4620      	mov	r0, r4
 800c622:	f001 fc8f 	bl	800df44 <__mcmp>
 800c626:	465a      	mov	r2, fp
 800c628:	9002      	str	r0, [sp, #8]
 800c62a:	4651      	mov	r1, sl
 800c62c:	4648      	mov	r0, r9
 800c62e:	f001 fca9 	bl	800df84 <__mdiff>
 800c632:	68c2      	ldr	r2, [r0, #12]
 800c634:	4680      	mov	r8, r0
 800c636:	f105 0330 	add.w	r3, r5, #48	; 0x30
 800c63a:	2a00      	cmp	r2, #0
 800c63c:	d149      	bne.n	800c6d2 <_dtoa_r+0x9d2>
 800c63e:	4601      	mov	r1, r0
 800c640:	4620      	mov	r0, r4
 800c642:	9306      	str	r3, [sp, #24]
 800c644:	f001 fc7e 	bl	800df44 <__mcmp>
 800c648:	4641      	mov	r1, r8
 800c64a:	9005      	str	r0, [sp, #20]
 800c64c:	4648      	mov	r0, r9
 800c64e:	f001 fa97 	bl	800db80 <_Bfree>
 800c652:	9a05      	ldr	r2, [sp, #20]
 800c654:	9b06      	ldr	r3, [sp, #24]
 800c656:	b92a      	cbnz	r2, 800c664 <_dtoa_r+0x964>
 800c658:	9920      	ldr	r1, [sp, #128]	; 0x80
 800c65a:	b919      	cbnz	r1, 800c664 <_dtoa_r+0x964>
 800c65c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c65e:	2900      	cmp	r1, #0
 800c660:	f000 8236 	beq.w	800cad0 <_dtoa_r+0xdd0>
 800c664:	9902      	ldr	r1, [sp, #8]
 800c666:	2900      	cmp	r1, #0
 800c668:	f2c0 80e4 	blt.w	800c834 <_dtoa_r+0xb34>
 800c66c:	d105      	bne.n	800c67a <_dtoa_r+0x97a>
 800c66e:	9920      	ldr	r1, [sp, #128]	; 0x80
 800c670:	b919      	cbnz	r1, 800c67a <_dtoa_r+0x97a>
 800c672:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c674:	2900      	cmp	r1, #0
 800c676:	f000 80dd 	beq.w	800c834 <_dtoa_r+0xb34>
 800c67a:	2a00      	cmp	r2, #0
 800c67c:	f300 814d 	bgt.w	800c91a <_dtoa_r+0xc1a>
 800c680:	9a08      	ldr	r2, [sp, #32]
 800c682:	703b      	strb	r3, [r7, #0]
 800c684:	f107 0801 	add.w	r8, r7, #1
 800c688:	4297      	cmp	r7, r2
 800c68a:	4645      	mov	r5, r8
 800c68c:	f000 8154 	beq.w	800c938 <_dtoa_r+0xc38>
 800c690:	4621      	mov	r1, r4
 800c692:	2300      	movs	r3, #0
 800c694:	220a      	movs	r2, #10
 800c696:	4648      	mov	r0, r9
 800c698:	f001 fa7c 	bl	800db94 <__multadd>
 800c69c:	455e      	cmp	r6, fp
 800c69e:	4604      	mov	r4, r0
 800c6a0:	4631      	mov	r1, r6
 800c6a2:	f04f 0300 	mov.w	r3, #0
 800c6a6:	f04f 020a 	mov.w	r2, #10
 800c6aa:	4648      	mov	r0, r9
 800c6ac:	d00b      	beq.n	800c6c6 <_dtoa_r+0x9c6>
 800c6ae:	f001 fa71 	bl	800db94 <__multadd>
 800c6b2:	4659      	mov	r1, fp
 800c6b4:	4606      	mov	r6, r0
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	220a      	movs	r2, #10
 800c6ba:	4648      	mov	r0, r9
 800c6bc:	f001 fa6a 	bl	800db94 <__multadd>
 800c6c0:	4647      	mov	r7, r8
 800c6c2:	4683      	mov	fp, r0
 800c6c4:	e7a6      	b.n	800c614 <_dtoa_r+0x914>
 800c6c6:	f001 fa65 	bl	800db94 <__multadd>
 800c6ca:	4647      	mov	r7, r8
 800c6cc:	4606      	mov	r6, r0
 800c6ce:	4683      	mov	fp, r0
 800c6d0:	e7a0      	b.n	800c614 <_dtoa_r+0x914>
 800c6d2:	4601      	mov	r1, r0
 800c6d4:	4648      	mov	r0, r9
 800c6d6:	9305      	str	r3, [sp, #20]
 800c6d8:	f001 fa52 	bl	800db80 <_Bfree>
 800c6dc:	2201      	movs	r2, #1
 800c6de:	9b05      	ldr	r3, [sp, #20]
 800c6e0:	e7c0      	b.n	800c664 <_dtoa_r+0x964>
 800c6e2:	4641      	mov	r1, r8
 800c6e4:	4620      	mov	r0, r4
 800c6e6:	f001 fc2d 	bl	800df44 <__mcmp>
 800c6ea:	2800      	cmp	r0, #0
 800c6ec:	f6bf ad7d 	bge.w	800c1ea <_dtoa_r+0x4ea>
 800c6f0:	4621      	mov	r1, r4
 800c6f2:	9c04      	ldr	r4, [sp, #16]
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	3c01      	subs	r4, #1
 800c6f8:	220a      	movs	r2, #10
 800c6fa:	4648      	mov	r0, r9
 800c6fc:	9404      	str	r4, [sp, #16]
 800c6fe:	f001 fa49 	bl	800db94 <__multadd>
 800c702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c704:	4604      	mov	r4, r0
 800c706:	2b00      	cmp	r3, #0
 800c708:	f47f af60 	bne.w	800c5cc <_dtoa_r+0x8cc>
 800c70c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c70e:	2b00      	cmp	r3, #0
 800c710:	f340 81f6 	ble.w	800cb00 <_dtoa_r+0xe00>
 800c714:	9306      	str	r3, [sp, #24]
 800c716:	e570      	b.n	800c1fa <_dtoa_r+0x4fa>
 800c718:	9c08      	ldr	r4, [sp, #32]
 800c71a:	e51f      	b.n	800c15c <_dtoa_r+0x45c>
 800c71c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c71e:	2b02      	cmp	r3, #2
 800c720:	f77f ad67 	ble.w	800c1f2 <_dtoa_r+0x4f2>
 800c724:	9b06      	ldr	r3, [sp, #24]
 800c726:	2b00      	cmp	r3, #0
 800c728:	f040 8179 	bne.w	800ca1e <_dtoa_r+0xd1e>
 800c72c:	4641      	mov	r1, r8
 800c72e:	2205      	movs	r2, #5
 800c730:	4648      	mov	r0, r9
 800c732:	f001 fa2f 	bl	800db94 <__multadd>
 800c736:	4601      	mov	r1, r0
 800c738:	4680      	mov	r8, r0
 800c73a:	4620      	mov	r0, r4
 800c73c:	f001 fc02 	bl	800df44 <__mcmp>
 800c740:	2800      	cmp	r0, #0
 800c742:	9408      	str	r4, [sp, #32]
 800c744:	f77f af0e 	ble.w	800c564 <_dtoa_r+0x864>
 800c748:	9a04      	ldr	r2, [sp, #16]
 800c74a:	9907      	ldr	r1, [sp, #28]
 800c74c:	2331      	movs	r3, #49	; 0x31
 800c74e:	3201      	adds	r2, #1
 800c750:	9204      	str	r2, [sp, #16]
 800c752:	700b      	strb	r3, [r1, #0]
 800c754:	1c4d      	adds	r5, r1, #1
 800c756:	e709      	b.n	800c56c <_dtoa_r+0x86c>
 800c758:	9a04      	ldr	r2, [sp, #16]
 800c75a:	3201      	adds	r2, #1
 800c75c:	9204      	str	r2, [sp, #16]
 800c75e:	9a07      	ldr	r2, [sp, #28]
 800c760:	2331      	movs	r3, #49	; 0x31
 800c762:	7013      	strb	r3, [r2, #0]
 800c764:	e588      	b.n	800c278 <_dtoa_r+0x578>
 800c766:	2301      	movs	r3, #1
 800c768:	9309      	str	r3, [sp, #36]	; 0x24
 800c76a:	e5cd      	b.n	800c308 <_dtoa_r+0x608>
 800c76c:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800c770:	e491      	b.n	800c096 <_dtoa_r+0x396>
 800c772:	f1ba 0f00 	cmp.w	sl, #0
 800c776:	f47f ad04 	bne.w	800c182 <_dtoa_r+0x482>
 800c77a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c77e:	2b00      	cmp	r3, #0
 800c780:	f040 813f 	bne.w	800ca02 <_dtoa_r+0xd02>
 800c784:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800c788:	0d3f      	lsrs	r7, r7, #20
 800c78a:	053f      	lsls	r7, r7, #20
 800c78c:	b137      	cbz	r7, 800c79c <_dtoa_r+0xa9c>
 800c78e:	9b05      	ldr	r3, [sp, #20]
 800c790:	3301      	adds	r3, #1
 800c792:	9305      	str	r3, [sp, #20]
 800c794:	9b02      	ldr	r3, [sp, #8]
 800c796:	3301      	adds	r3, #1
 800c798:	9302      	str	r3, [sp, #8]
 800c79a:	2701      	movs	r7, #1
 800c79c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c79e:	2001      	movs	r0, #1
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	f43f acf8 	beq.w	800c196 <_dtoa_r+0x496>
 800c7a6:	e4ed      	b.n	800c184 <_dtoa_r+0x484>
 800c7a8:	4640      	mov	r0, r8
 800c7aa:	f7f3 ff01 	bl	80005b0 <__aeabi_i2d>
 800c7ae:	4632      	mov	r2, r6
 800c7b0:	463b      	mov	r3, r7
 800c7b2:	f7f3 ff63 	bl	800067c <__aeabi_dmul>
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	4bbf      	ldr	r3, [pc, #764]	; (800cab8 <_dtoa_r+0xdb8>)
 800c7ba:	f7f3 fdad 	bl	8000318 <__adddf3>
 800c7be:	4604      	mov	r4, r0
 800c7c0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800c7c4:	4630      	mov	r0, r6
 800c7c6:	4639      	mov	r1, r7
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	4bbc      	ldr	r3, [pc, #752]	; (800cabc <_dtoa_r+0xdbc>)
 800c7cc:	f7f3 fda2 	bl	8000314 <__aeabi_dsub>
 800c7d0:	4622      	mov	r2, r4
 800c7d2:	462b      	mov	r3, r5
 800c7d4:	4606      	mov	r6, r0
 800c7d6:	460f      	mov	r7, r1
 800c7d8:	f7f4 f9e0 	bl	8000b9c <__aeabi_dcmpgt>
 800c7dc:	4680      	mov	r8, r0
 800c7de:	2800      	cmp	r0, #0
 800c7e0:	f040 8105 	bne.w	800c9ee <_dtoa_r+0xcee>
 800c7e4:	4622      	mov	r2, r4
 800c7e6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800c7ea:	4630      	mov	r0, r6
 800c7ec:	4639      	mov	r1, r7
 800c7ee:	f7f4 f9b7 	bl	8000b60 <__aeabi_dcmplt>
 800c7f2:	b108      	cbz	r0, 800c7f8 <_dtoa_r+0xaf8>
 800c7f4:	4646      	mov	r6, r8
 800c7f6:	e6b5      	b.n	800c564 <_dtoa_r+0x864>
 800c7f8:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
 800c7fc:	f7ff bb89 	b.w	800bf12 <_dtoa_r+0x212>
 800c800:	9807      	ldr	r0, [sp, #28]
 800c802:	f7ff baae 	b.w	800bd62 <_dtoa_r+0x62>
 800c806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c808:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c80a:	970a      	str	r7, [sp, #40]	; 0x28
 800c80c:	1afb      	subs	r3, r7, r3
 800c80e:	441a      	add	r2, r3
 800c810:	920b      	str	r2, [sp, #44]	; 0x2c
 800c812:	2700      	movs	r7, #0
 800c814:	e461      	b.n	800c0da <_dtoa_r+0x3da>
 800c816:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
 800c81a:	f04f 0802 	mov.w	r8, #2
 800c81e:	e5bb      	b.n	800c398 <_dtoa_r+0x698>
 800c820:	461c      	mov	r4, r3
 800c822:	2100      	movs	r1, #0
 800c824:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800c828:	e58a      	b.n	800c340 <_dtoa_r+0x640>
 800c82a:	2401      	movs	r4, #1
 800c82c:	9421      	str	r4, [sp, #132]	; 0x84
 800c82e:	940d      	str	r4, [sp, #52]	; 0x34
 800c830:	9406      	str	r4, [sp, #24]
 800c832:	e7f6      	b.n	800c822 <_dtoa_r+0xb22>
 800c834:	2a00      	cmp	r2, #0
 800c836:	46d0      	mov	r8, sl
 800c838:	f8cd b014 	str.w	fp, [sp, #20]
 800c83c:	469a      	mov	sl, r3
 800c83e:	dd11      	ble.n	800c864 <_dtoa_r+0xb64>
 800c840:	4621      	mov	r1, r4
 800c842:	2201      	movs	r2, #1
 800c844:	4648      	mov	r0, r9
 800c846:	f001 fb25 	bl	800de94 <__lshift>
 800c84a:	4641      	mov	r1, r8
 800c84c:	4604      	mov	r4, r0
 800c84e:	f001 fb79 	bl	800df44 <__mcmp>
 800c852:	2800      	cmp	r0, #0
 800c854:	f340 8149 	ble.w	800caea <_dtoa_r+0xdea>
 800c858:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c85c:	f000 8106 	beq.w	800ca6c <_dtoa_r+0xd6c>
 800c860:	f105 0a31 	add.w	sl, r5, #49	; 0x31
 800c864:	46b3      	mov	fp, r6
 800c866:	f887 a000 	strb.w	sl, [r7]
 800c86a:	1c7d      	adds	r5, r7, #1
 800c86c:	9e05      	ldr	r6, [sp, #20]
 800c86e:	9408      	str	r4, [sp, #32]
 800c870:	e502      	b.n	800c278 <_dtoa_r+0x578>
 800c872:	d104      	bne.n	800c87e <_dtoa_r+0xb7e>
 800c874:	f01a 0f01 	tst.w	sl, #1
 800c878:	d001      	beq.n	800c87e <_dtoa_r+0xb7e>
 800c87a:	e4ed      	b.n	800c258 <_dtoa_r+0x558>
 800c87c:	4615      	mov	r5, r2
 800c87e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c882:	2b30      	cmp	r3, #48	; 0x30
 800c884:	f105 32ff 	add.w	r2, r5, #4294967295
 800c888:	d0f8      	beq.n	800c87c <_dtoa_r+0xb7c>
 800c88a:	e4f5      	b.n	800c278 <_dtoa_r+0x578>
 800c88c:	9b04      	ldr	r3, [sp, #16]
 800c88e:	425c      	negs	r4, r3
 800c890:	2c00      	cmp	r4, #0
 800c892:	f000 80bf 	beq.w	800ca14 <_dtoa_r+0xd14>
 800c896:	4b8a      	ldr	r3, [pc, #552]	; (800cac0 <_dtoa_r+0xdc0>)
 800c898:	f004 020f 	and.w	r2, r4, #15
 800c89c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c8a8:	f7f3 fee8 	bl	800067c <__aeabi_dmul>
 800c8ac:	1124      	asrs	r4, r4, #4
 800c8ae:	4606      	mov	r6, r0
 800c8b0:	460f      	mov	r7, r1
 800c8b2:	f000 812a 	beq.w	800cb0a <_dtoa_r+0xe0a>
 800c8b6:	4d83      	ldr	r5, [pc, #524]	; (800cac4 <_dtoa_r+0xdc4>)
 800c8b8:	f04f 0802 	mov.w	r8, #2
 800c8bc:	07e2      	lsls	r2, r4, #31
 800c8be:	d509      	bpl.n	800c8d4 <_dtoa_r+0xbd4>
 800c8c0:	4630      	mov	r0, r6
 800c8c2:	4639      	mov	r1, r7
 800c8c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c8c8:	f7f3 fed8 	bl	800067c <__aeabi_dmul>
 800c8cc:	f108 0801 	add.w	r8, r8, #1
 800c8d0:	4606      	mov	r6, r0
 800c8d2:	460f      	mov	r7, r1
 800c8d4:	1064      	asrs	r4, r4, #1
 800c8d6:	f105 0508 	add.w	r5, r5, #8
 800c8da:	d1ef      	bne.n	800c8bc <_dtoa_r+0xbbc>
 800c8dc:	e576      	b.n	800c3cc <_dtoa_r+0x6cc>
 800c8de:	9907      	ldr	r1, [sp, #28]
 800c8e0:	2230      	movs	r2, #48	; 0x30
 800c8e2:	700a      	strb	r2, [r1, #0]
 800c8e4:	9a04      	ldr	r2, [sp, #16]
 800c8e6:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 800c8ea:	3201      	adds	r2, #1
 800c8ec:	9204      	str	r2, [sp, #16]
 800c8ee:	f7ff bbd0 	b.w	800c092 <_dtoa_r+0x392>
 800c8f2:	6871      	ldr	r1, [r6, #4]
 800c8f4:	4648      	mov	r0, r9
 800c8f6:	f001 f91d 	bl	800db34 <_Balloc>
 800c8fa:	6933      	ldr	r3, [r6, #16]
 800c8fc:	1c9a      	adds	r2, r3, #2
 800c8fe:	4605      	mov	r5, r0
 800c900:	0092      	lsls	r2, r2, #2
 800c902:	f106 010c 	add.w	r1, r6, #12
 800c906:	300c      	adds	r0, #12
 800c908:	f7f4 fade 	bl	8000ec8 <memcpy>
 800c90c:	4629      	mov	r1, r5
 800c90e:	2201      	movs	r2, #1
 800c910:	4648      	mov	r0, r9
 800c912:	f001 fabf 	bl	800de94 <__lshift>
 800c916:	9005      	str	r0, [sp, #20]
 800c918:	e670      	b.n	800c5fc <_dtoa_r+0x8fc>
 800c91a:	2b39      	cmp	r3, #57	; 0x39
 800c91c:	f8cd b014 	str.w	fp, [sp, #20]
 800c920:	46d0      	mov	r8, sl
 800c922:	f000 80a3 	beq.w	800ca6c <_dtoa_r+0xd6c>
 800c926:	f103 0a01 	add.w	sl, r3, #1
 800c92a:	46b3      	mov	fp, r6
 800c92c:	f887 a000 	strb.w	sl, [r7]
 800c930:	1c7d      	adds	r5, r7, #1
 800c932:	9e05      	ldr	r6, [sp, #20]
 800c934:	9408      	str	r4, [sp, #32]
 800c936:	e49f      	b.n	800c278 <_dtoa_r+0x578>
 800c938:	465a      	mov	r2, fp
 800c93a:	46d0      	mov	r8, sl
 800c93c:	46b3      	mov	fp, r6
 800c93e:	469a      	mov	sl, r3
 800c940:	4616      	mov	r6, r2
 800c942:	e47d      	b.n	800c240 <_dtoa_r+0x540>
 800c944:	495e      	ldr	r1, [pc, #376]	; (800cac0 <_dtoa_r+0xdc0>)
 800c946:	f108 3aff 	add.w	sl, r8, #4294967295
 800c94a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c94e:	4622      	mov	r2, r4
 800c950:	462b      	mov	r3, r5
 800c952:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c956:	f7f3 fe91 	bl	800067c <__aeabi_dmul>
 800c95a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800c95e:	4639      	mov	r1, r7
 800c960:	4630      	mov	r0, r6
 800c962:	f7f4 fc23 	bl	80011ac <__aeabi_d2iz>
 800c966:	4604      	mov	r4, r0
 800c968:	f7f3 fe22 	bl	80005b0 <__aeabi_i2d>
 800c96c:	4602      	mov	r2, r0
 800c96e:	460b      	mov	r3, r1
 800c970:	4630      	mov	r0, r6
 800c972:	4639      	mov	r1, r7
 800c974:	f7f3 fcce 	bl	8000314 <__aeabi_dsub>
 800c978:	9a07      	ldr	r2, [sp, #28]
 800c97a:	3430      	adds	r4, #48	; 0x30
 800c97c:	f1b8 0f01 	cmp.w	r8, #1
 800c980:	4606      	mov	r6, r0
 800c982:	460f      	mov	r7, r1
 800c984:	7014      	strb	r4, [r2, #0]
 800c986:	f102 0501 	add.w	r5, r2, #1
 800c98a:	d01e      	beq.n	800c9ca <_dtoa_r+0xcca>
 800c98c:	9b07      	ldr	r3, [sp, #28]
 800c98e:	eb03 0b08 	add.w	fp, r3, r8
 800c992:	46a8      	mov	r8, r5
 800c994:	2200      	movs	r2, #0
 800c996:	4b4c      	ldr	r3, [pc, #304]	; (800cac8 <_dtoa_r+0xdc8>)
 800c998:	4630      	mov	r0, r6
 800c99a:	4639      	mov	r1, r7
 800c99c:	f7f3 fe6e 	bl	800067c <__aeabi_dmul>
 800c9a0:	460f      	mov	r7, r1
 800c9a2:	4606      	mov	r6, r0
 800c9a4:	f7f4 fc02 	bl	80011ac <__aeabi_d2iz>
 800c9a8:	4604      	mov	r4, r0
 800c9aa:	f7f3 fe01 	bl	80005b0 <__aeabi_i2d>
 800c9ae:	3430      	adds	r4, #48	; 0x30
 800c9b0:	4602      	mov	r2, r0
 800c9b2:	460b      	mov	r3, r1
 800c9b4:	4630      	mov	r0, r6
 800c9b6:	4639      	mov	r1, r7
 800c9b8:	f7f3 fcac 	bl	8000314 <__aeabi_dsub>
 800c9bc:	f808 4b01 	strb.w	r4, [r8], #1
 800c9c0:	45c3      	cmp	fp, r8
 800c9c2:	4606      	mov	r6, r0
 800c9c4:	460f      	mov	r7, r1
 800c9c6:	d1e5      	bne.n	800c994 <_dtoa_r+0xc94>
 800c9c8:	4455      	add	r5, sl
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	4b3f      	ldr	r3, [pc, #252]	; (800cacc <_dtoa_r+0xdcc>)
 800c9ce:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800c9d2:	f7f3 fca1 	bl	8000318 <__adddf3>
 800c9d6:	4632      	mov	r2, r6
 800c9d8:	463b      	mov	r3, r7
 800c9da:	f7f4 f8c1 	bl	8000b60 <__aeabi_dcmplt>
 800c9de:	2800      	cmp	r0, #0
 800c9e0:	d04c      	beq.n	800ca7c <_dtoa_r+0xd7c>
 800c9e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c9e4:	9304      	str	r3, [sp, #16]
 800c9e6:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 800c9ea:	f7ff bb46 	b.w	800c07a <_dtoa_r+0x37a>
 800c9ee:	f04f 0800 	mov.w	r8, #0
 800c9f2:	4646      	mov	r6, r8
 800c9f4:	e6a8      	b.n	800c748 <_dtoa_r+0xa48>
 800c9f6:	9b05      	ldr	r3, [sp, #20]
 800c9f8:	9a06      	ldr	r2, [sp, #24]
 800c9fa:	1a9d      	subs	r5, r3, r2
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	f7ff bb72 	b.w	800c0e6 <_dtoa_r+0x3e6>
 800ca02:	2700      	movs	r7, #0
 800ca04:	e6ca      	b.n	800c79c <_dtoa_r+0xa9c>
 800ca06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ca08:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800ca0a:	9d05      	ldr	r5, [sp, #20]
 800ca0c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ca10:	f7ff bb69 	b.w	800c0e6 <_dtoa_r+0x3e6>
 800ca14:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 800ca18:	f04f 0802 	mov.w	r8, #2
 800ca1c:	e4d6      	b.n	800c3cc <_dtoa_r+0x6cc>
 800ca1e:	9408      	str	r4, [sp, #32]
 800ca20:	e5a0      	b.n	800c564 <_dtoa_r+0x864>
 800ca22:	9b06      	ldr	r3, [sp, #24]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	f43f aebf 	beq.w	800c7a8 <_dtoa_r+0xaa8>
 800ca2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	f77f aee3 	ble.w	800c7f8 <_dtoa_r+0xaf8>
 800ca32:	2200      	movs	r2, #0
 800ca34:	4b24      	ldr	r3, [pc, #144]	; (800cac8 <_dtoa_r+0xdc8>)
 800ca36:	4630      	mov	r0, r6
 800ca38:	4639      	mov	r1, r7
 800ca3a:	f7f3 fe1f 	bl	800067c <__aeabi_dmul>
 800ca3e:	4606      	mov	r6, r0
 800ca40:	460f      	mov	r7, r1
 800ca42:	f108 0001 	add.w	r0, r8, #1
 800ca46:	f7f3 fdb3 	bl	80005b0 <__aeabi_i2d>
 800ca4a:	4632      	mov	r2, r6
 800ca4c:	463b      	mov	r3, r7
 800ca4e:	f7f3 fe15 	bl	800067c <__aeabi_dmul>
 800ca52:	2200      	movs	r2, #0
 800ca54:	4b18      	ldr	r3, [pc, #96]	; (800cab8 <_dtoa_r+0xdb8>)
 800ca56:	f7f3 fc5f 	bl	8000318 <__adddf3>
 800ca5a:	9a04      	ldr	r2, [sp, #16]
 800ca5c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800ca60:	3a01      	subs	r2, #1
 800ca62:	4604      	mov	r4, r0
 800ca64:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800ca68:	9211      	str	r2, [sp, #68]	; 0x44
 800ca6a:	e4d0      	b.n	800c40e <_dtoa_r+0x70e>
 800ca6c:	2239      	movs	r2, #57	; 0x39
 800ca6e:	46b3      	mov	fp, r6
 800ca70:	9408      	str	r4, [sp, #32]
 800ca72:	9e05      	ldr	r6, [sp, #20]
 800ca74:	703a      	strb	r2, [r7, #0]
 800ca76:	1c7d      	adds	r5, r7, #1
 800ca78:	f7ff bbf0 	b.w	800c25c <_dtoa_r+0x55c>
 800ca7c:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800ca80:	2000      	movs	r0, #0
 800ca82:	4912      	ldr	r1, [pc, #72]	; (800cacc <_dtoa_r+0xdcc>)
 800ca84:	f7f3 fc46 	bl	8000314 <__aeabi_dsub>
 800ca88:	4632      	mov	r2, r6
 800ca8a:	463b      	mov	r3, r7
 800ca8c:	f7f4 f886 	bl	8000b9c <__aeabi_dcmpgt>
 800ca90:	b908      	cbnz	r0, 800ca96 <_dtoa_r+0xd96>
 800ca92:	e6b1      	b.n	800c7f8 <_dtoa_r+0xaf8>
 800ca94:	4615      	mov	r5, r2
 800ca96:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ca9a:	2b30      	cmp	r3, #48	; 0x30
 800ca9c:	f105 32ff 	add.w	r2, r5, #4294967295
 800caa0:	d0f8      	beq.n	800ca94 <_dtoa_r+0xd94>
 800caa2:	e530      	b.n	800c506 <_dtoa_r+0x806>
 800caa4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800caa6:	9304      	str	r3, [sp, #16]
 800caa8:	f7ff bae7 	b.w	800c07a <_dtoa_r+0x37a>
 800caac:	f1ba 0f00 	cmp.w	sl, #0
 800cab0:	f47f ad7a 	bne.w	800c5a8 <_dtoa_r+0x8a8>
 800cab4:	e661      	b.n	800c77a <_dtoa_r+0xa7a>
 800cab6:	bf00      	nop
 800cab8:	401c0000 	.word	0x401c0000
 800cabc:	40140000 	.word	0x40140000
 800cac0:	0800f2d8 	.word	0x0800f2d8
 800cac4:	0800f3b0 	.word	0x0800f3b0
 800cac8:	40240000 	.word	0x40240000
 800cacc:	3fe00000 	.word	0x3fe00000
 800cad0:	2b39      	cmp	r3, #57	; 0x39
 800cad2:	f8cd b014 	str.w	fp, [sp, #20]
 800cad6:	46d0      	mov	r8, sl
 800cad8:	f8dd b008 	ldr.w	fp, [sp, #8]
 800cadc:	469a      	mov	sl, r3
 800cade:	d0c5      	beq.n	800ca6c <_dtoa_r+0xd6c>
 800cae0:	f1bb 0f00 	cmp.w	fp, #0
 800cae4:	f73f aebc 	bgt.w	800c860 <_dtoa_r+0xb60>
 800cae8:	e6bc      	b.n	800c864 <_dtoa_r+0xb64>
 800caea:	f47f aebb 	bne.w	800c864 <_dtoa_r+0xb64>
 800caee:	f01a 0f01 	tst.w	sl, #1
 800caf2:	f43f aeb7 	beq.w	800c864 <_dtoa_r+0xb64>
 800caf6:	e6af      	b.n	800c858 <_dtoa_r+0xb58>
 800caf8:	f04f 0800 	mov.w	r8, #0
 800cafc:	4646      	mov	r6, r8
 800cafe:	e531      	b.n	800c564 <_dtoa_r+0x864>
 800cb00:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800cb02:	2b02      	cmp	r3, #2
 800cb04:	dc21      	bgt.n	800cb4a <_dtoa_r+0xe4a>
 800cb06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb08:	e604      	b.n	800c714 <_dtoa_r+0xa14>
 800cb0a:	f04f 0802 	mov.w	r8, #2
 800cb0e:	e45d      	b.n	800c3cc <_dtoa_r+0x6cc>
 800cb10:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800cb12:	2b02      	cmp	r3, #2
 800cb14:	dc19      	bgt.n	800cb4a <_dtoa_r+0xe4a>
 800cb16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb18:	e563      	b.n	800c5e2 <_dtoa_r+0x8e2>
 800cb1a:	2400      	movs	r4, #0
 800cb1c:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 800cb20:	4621      	mov	r1, r4
 800cb22:	4648      	mov	r0, r9
 800cb24:	f001 f806 	bl	800db34 <_Balloc>
 800cb28:	f04f 33ff 	mov.w	r3, #4294967295
 800cb2c:	9306      	str	r3, [sp, #24]
 800cb2e:	930d      	str	r3, [sp, #52]	; 0x34
 800cb30:	2301      	movs	r3, #1
 800cb32:	9007      	str	r0, [sp, #28]
 800cb34:	9421      	str	r4, [sp, #132]	; 0x84
 800cb36:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800cb3a:	9309      	str	r3, [sp, #36]	; 0x24
 800cb3c:	f7ff b9e9 	b.w	800bf12 <_dtoa_r+0x212>
 800cb40:	f43f ab3d 	beq.w	800c1be <_dtoa_r+0x4be>
 800cb44:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 800cb48:	e522      	b.n	800c590 <_dtoa_r+0x890>
 800cb4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb4c:	9306      	str	r3, [sp, #24]
 800cb4e:	e5e9      	b.n	800c724 <_dtoa_r+0xa24>
 800cb50:	2501      	movs	r5, #1
 800cb52:	f7ff b9a8 	b.w	800bea6 <_dtoa_r+0x1a6>
 800cb56:	bf00      	nop

0800cb58 <__sflush_r>:
 800cb58:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 800cb5c:	b29a      	uxth	r2, r3
 800cb5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb62:	460d      	mov	r5, r1
 800cb64:	0711      	lsls	r1, r2, #28
 800cb66:	4680      	mov	r8, r0
 800cb68:	d43c      	bmi.n	800cbe4 <__sflush_r+0x8c>
 800cb6a:	686a      	ldr	r2, [r5, #4]
 800cb6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800cb70:	2a00      	cmp	r2, #0
 800cb72:	81ab      	strh	r3, [r5, #12]
 800cb74:	dd73      	ble.n	800cc5e <__sflush_r+0x106>
 800cb76:	6aac      	ldr	r4, [r5, #40]	; 0x28
 800cb78:	2c00      	cmp	r4, #0
 800cb7a:	d04b      	beq.n	800cc14 <__sflush_r+0xbc>
 800cb7c:	b29b      	uxth	r3, r3
 800cb7e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800cb82:	2100      	movs	r1, #0
 800cb84:	b292      	uxth	r2, r2
 800cb86:	f8d8 6000 	ldr.w	r6, [r8]
 800cb8a:	f8c8 1000 	str.w	r1, [r8]
 800cb8e:	2a00      	cmp	r2, #0
 800cb90:	d069      	beq.n	800cc66 <__sflush_r+0x10e>
 800cb92:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800cb94:	075f      	lsls	r7, r3, #29
 800cb96:	d505      	bpl.n	800cba4 <__sflush_r+0x4c>
 800cb98:	6869      	ldr	r1, [r5, #4]
 800cb9a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800cb9c:	1a52      	subs	r2, r2, r1
 800cb9e:	b10b      	cbz	r3, 800cba4 <__sflush_r+0x4c>
 800cba0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800cba2:	1ad2      	subs	r2, r2, r3
 800cba4:	2300      	movs	r3, #0
 800cba6:	69e9      	ldr	r1, [r5, #28]
 800cba8:	4640      	mov	r0, r8
 800cbaa:	47a0      	blx	r4
 800cbac:	1c44      	adds	r4, r0, #1
 800cbae:	d03c      	beq.n	800cc2a <__sflush_r+0xd2>
 800cbb0:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 800cbb4:	692a      	ldr	r2, [r5, #16]
 800cbb6:	602a      	str	r2, [r5, #0]
 800cbb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	81ab      	strh	r3, [r5, #12]
 800cbc0:	04db      	lsls	r3, r3, #19
 800cbc2:	606a      	str	r2, [r5, #4]
 800cbc4:	d449      	bmi.n	800cc5a <__sflush_r+0x102>
 800cbc6:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800cbc8:	f8c8 6000 	str.w	r6, [r8]
 800cbcc:	b311      	cbz	r1, 800cc14 <__sflush_r+0xbc>
 800cbce:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800cbd2:	4299      	cmp	r1, r3
 800cbd4:	d002      	beq.n	800cbdc <__sflush_r+0x84>
 800cbd6:	4640      	mov	r0, r8
 800cbd8:	f000 f94e 	bl	800ce78 <_free_r>
 800cbdc:	2000      	movs	r0, #0
 800cbde:	6328      	str	r0, [r5, #48]	; 0x30
 800cbe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbe4:	692e      	ldr	r6, [r5, #16]
 800cbe6:	b1ae      	cbz	r6, 800cc14 <__sflush_r+0xbc>
 800cbe8:	682c      	ldr	r4, [r5, #0]
 800cbea:	602e      	str	r6, [r5, #0]
 800cbec:	0790      	lsls	r0, r2, #30
 800cbee:	bf0c      	ite	eq
 800cbf0:	696b      	ldreq	r3, [r5, #20]
 800cbf2:	2300      	movne	r3, #0
 800cbf4:	1ba4      	subs	r4, r4, r6
 800cbf6:	60ab      	str	r3, [r5, #8]
 800cbf8:	e00a      	b.n	800cc10 <__sflush_r+0xb8>
 800cbfa:	4623      	mov	r3, r4
 800cbfc:	4632      	mov	r2, r6
 800cbfe:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800cc00:	69e9      	ldr	r1, [r5, #28]
 800cc02:	4640      	mov	r0, r8
 800cc04:	47b8      	blx	r7
 800cc06:	2800      	cmp	r0, #0
 800cc08:	eba4 0400 	sub.w	r4, r4, r0
 800cc0c:	4406      	add	r6, r0
 800cc0e:	dd04      	ble.n	800cc1a <__sflush_r+0xc2>
 800cc10:	2c00      	cmp	r4, #0
 800cc12:	dcf2      	bgt.n	800cbfa <__sflush_r+0xa2>
 800cc14:	2000      	movs	r0, #0
 800cc16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc1a:	89ab      	ldrh	r3, [r5, #12]
 800cc1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc20:	81ab      	strh	r3, [r5, #12]
 800cc22:	f04f 30ff 	mov.w	r0, #4294967295
 800cc26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc2a:	f8d8 2000 	ldr.w	r2, [r8]
 800cc2e:	2a1d      	cmp	r2, #29
 800cc30:	d8f3      	bhi.n	800cc1a <__sflush_r+0xc2>
 800cc32:	4b1a      	ldr	r3, [pc, #104]	; (800cc9c <__sflush_r+0x144>)
 800cc34:	40d3      	lsrs	r3, r2
 800cc36:	f003 0301 	and.w	r3, r3, #1
 800cc3a:	f083 0401 	eor.w	r4, r3, #1
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d0eb      	beq.n	800cc1a <__sflush_r+0xc2>
 800cc42:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 800cc46:	6929      	ldr	r1, [r5, #16]
 800cc48:	6029      	str	r1, [r5, #0]
 800cc4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cc4e:	04d9      	lsls	r1, r3, #19
 800cc50:	606c      	str	r4, [r5, #4]
 800cc52:	81ab      	strh	r3, [r5, #12]
 800cc54:	d5b7      	bpl.n	800cbc6 <__sflush_r+0x6e>
 800cc56:	2a00      	cmp	r2, #0
 800cc58:	d1b5      	bne.n	800cbc6 <__sflush_r+0x6e>
 800cc5a:	6528      	str	r0, [r5, #80]	; 0x50
 800cc5c:	e7b3      	b.n	800cbc6 <__sflush_r+0x6e>
 800cc5e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800cc60:	2a00      	cmp	r2, #0
 800cc62:	dc88      	bgt.n	800cb76 <__sflush_r+0x1e>
 800cc64:	e7d6      	b.n	800cc14 <__sflush_r+0xbc>
 800cc66:	2301      	movs	r3, #1
 800cc68:	69e9      	ldr	r1, [r5, #28]
 800cc6a:	4640      	mov	r0, r8
 800cc6c:	47a0      	blx	r4
 800cc6e:	1c43      	adds	r3, r0, #1
 800cc70:	4602      	mov	r2, r0
 800cc72:	d002      	beq.n	800cc7a <__sflush_r+0x122>
 800cc74:	89ab      	ldrh	r3, [r5, #12]
 800cc76:	6aac      	ldr	r4, [r5, #40]	; 0x28
 800cc78:	e78c      	b.n	800cb94 <__sflush_r+0x3c>
 800cc7a:	f8d8 3000 	ldr.w	r3, [r8]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d0f8      	beq.n	800cc74 <__sflush_r+0x11c>
 800cc82:	2b1d      	cmp	r3, #29
 800cc84:	d001      	beq.n	800cc8a <__sflush_r+0x132>
 800cc86:	2b16      	cmp	r3, #22
 800cc88:	d102      	bne.n	800cc90 <__sflush_r+0x138>
 800cc8a:	f8c8 6000 	str.w	r6, [r8]
 800cc8e:	e7c1      	b.n	800cc14 <__sflush_r+0xbc>
 800cc90:	89ab      	ldrh	r3, [r5, #12]
 800cc92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc96:	81ab      	strh	r3, [r5, #12]
 800cc98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc9c:	20400001 	.word	0x20400001

0800cca0 <_fflush_r>:
 800cca0:	b510      	push	{r4, lr}
 800cca2:	4604      	mov	r4, r0
 800cca4:	b082      	sub	sp, #8
 800cca6:	b108      	cbz	r0, 800ccac <_fflush_r+0xc>
 800cca8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ccaa:	b153      	cbz	r3, 800ccc2 <_fflush_r+0x22>
 800ccac:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 800ccb0:	b908      	cbnz	r0, 800ccb6 <_fflush_r+0x16>
 800ccb2:	b002      	add	sp, #8
 800ccb4:	bd10      	pop	{r4, pc}
 800ccb6:	4620      	mov	r0, r4
 800ccb8:	b002      	add	sp, #8
 800ccba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccbe:	f7ff bf4b 	b.w	800cb58 <__sflush_r>
 800ccc2:	9101      	str	r1, [sp, #4]
 800ccc4:	f000 f880 	bl	800cdc8 <__sinit>
 800ccc8:	9901      	ldr	r1, [sp, #4]
 800ccca:	e7ef      	b.n	800ccac <_fflush_r+0xc>

0800cccc <_cleanup_r>:
 800cccc:	4901      	ldr	r1, [pc, #4]	; (800ccd4 <_cleanup_r+0x8>)
 800ccce:	f000 bb3d 	b.w	800d34c <_fwalk_reent>
 800ccd2:	bf00      	nop
 800ccd4:	0800e835 	.word	0x0800e835

0800ccd8 <__sinit.part.1>:
 800ccd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccdc:	4b35      	ldr	r3, [pc, #212]	; (800cdb4 <__sinit.part.1+0xdc>)
 800ccde:	6845      	ldr	r5, [r0, #4]
 800cce0:	63c3      	str	r3, [r0, #60]	; 0x3c
 800cce2:	2400      	movs	r4, #0
 800cce4:	4607      	mov	r7, r0
 800cce6:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 800ccea:	2304      	movs	r3, #4
 800ccec:	2103      	movs	r1, #3
 800ccee:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
 800ccf2:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 800ccf6:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 800ccfa:	b083      	sub	sp, #12
 800ccfc:	602c      	str	r4, [r5, #0]
 800ccfe:	606c      	str	r4, [r5, #4]
 800cd00:	60ac      	str	r4, [r5, #8]
 800cd02:	666c      	str	r4, [r5, #100]	; 0x64
 800cd04:	81ec      	strh	r4, [r5, #14]
 800cd06:	612c      	str	r4, [r5, #16]
 800cd08:	616c      	str	r4, [r5, #20]
 800cd0a:	61ac      	str	r4, [r5, #24]
 800cd0c:	81ab      	strh	r3, [r5, #12]
 800cd0e:	4621      	mov	r1, r4
 800cd10:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 800cd14:	2208      	movs	r2, #8
 800cd16:	f7fb fe75 	bl	8008a04 <memset>
 800cd1a:	68be      	ldr	r6, [r7, #8]
 800cd1c:	f8df b098 	ldr.w	fp, [pc, #152]	; 800cdb8 <__sinit.part.1+0xe0>
 800cd20:	f8df a098 	ldr.w	sl, [pc, #152]	; 800cdbc <__sinit.part.1+0xe4>
 800cd24:	f8df 9098 	ldr.w	r9, [pc, #152]	; 800cdc0 <__sinit.part.1+0xe8>
 800cd28:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800cdc4 <__sinit.part.1+0xec>
 800cd2c:	f8c5 b020 	str.w	fp, [r5, #32]
 800cd30:	2301      	movs	r3, #1
 800cd32:	2209      	movs	r2, #9
 800cd34:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 800cd38:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 800cd3c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 800cd40:	61ed      	str	r5, [r5, #28]
 800cd42:	4621      	mov	r1, r4
 800cd44:	81f3      	strh	r3, [r6, #14]
 800cd46:	81b2      	strh	r2, [r6, #12]
 800cd48:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 800cd4c:	6034      	str	r4, [r6, #0]
 800cd4e:	6074      	str	r4, [r6, #4]
 800cd50:	60b4      	str	r4, [r6, #8]
 800cd52:	6674      	str	r4, [r6, #100]	; 0x64
 800cd54:	6134      	str	r4, [r6, #16]
 800cd56:	6174      	str	r4, [r6, #20]
 800cd58:	61b4      	str	r4, [r6, #24]
 800cd5a:	2208      	movs	r2, #8
 800cd5c:	9301      	str	r3, [sp, #4]
 800cd5e:	f7fb fe51 	bl	8008a04 <memset>
 800cd62:	68fd      	ldr	r5, [r7, #12]
 800cd64:	61f6      	str	r6, [r6, #28]
 800cd66:	2012      	movs	r0, #18
 800cd68:	2202      	movs	r2, #2
 800cd6a:	f8c6 b020 	str.w	fp, [r6, #32]
 800cd6e:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 800cd72:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 800cd76:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 800cd7a:	4621      	mov	r1, r4
 800cd7c:	81a8      	strh	r0, [r5, #12]
 800cd7e:	81ea      	strh	r2, [r5, #14]
 800cd80:	602c      	str	r4, [r5, #0]
 800cd82:	606c      	str	r4, [r5, #4]
 800cd84:	60ac      	str	r4, [r5, #8]
 800cd86:	666c      	str	r4, [r5, #100]	; 0x64
 800cd88:	612c      	str	r4, [r5, #16]
 800cd8a:	616c      	str	r4, [r5, #20]
 800cd8c:	61ac      	str	r4, [r5, #24]
 800cd8e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 800cd92:	2208      	movs	r2, #8
 800cd94:	f7fb fe36 	bl	8008a04 <memset>
 800cd98:	9b01      	ldr	r3, [sp, #4]
 800cd9a:	61ed      	str	r5, [r5, #28]
 800cd9c:	f8c5 b020 	str.w	fp, [r5, #32]
 800cda0:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 800cda4:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 800cda8:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 800cdac:	63bb      	str	r3, [r7, #56]	; 0x38
 800cdae:	b003      	add	sp, #12
 800cdb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdb4:	0800cccd 	.word	0x0800cccd
 800cdb8:	0800e555 	.word	0x0800e555
 800cdbc:	0800e579 	.word	0x0800e579
 800cdc0:	0800e5b5 	.word	0x0800e5b5
 800cdc4:	0800e5d5 	.word	0x0800e5d5

0800cdc8 <__sinit>:
 800cdc8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800cdca:	b103      	cbz	r3, 800cdce <__sinit+0x6>
 800cdcc:	4770      	bx	lr
 800cdce:	f7ff bf83 	b.w	800ccd8 <__sinit.part.1>
 800cdd2:	bf00      	nop

0800cdd4 <__sfp_lock_acquire>:
 800cdd4:	4770      	bx	lr
 800cdd6:	bf00      	nop

0800cdd8 <__sfp_lock_release>:
 800cdd8:	4770      	bx	lr
 800cdda:	bf00      	nop

0800cddc <_malloc_trim_r>:
 800cddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdde:	4f23      	ldr	r7, [pc, #140]	; (800ce6c <_malloc_trim_r+0x90>)
 800cde0:	460c      	mov	r4, r1
 800cde2:	4606      	mov	r6, r0
 800cde4:	f000 fea2 	bl	800db2c <__malloc_lock>
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	685d      	ldr	r5, [r3, #4]
 800cdec:	f025 0503 	bic.w	r5, r5, #3
 800cdf0:	1b29      	subs	r1, r5, r4
 800cdf2:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 800cdf6:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 800cdfa:	f021 010f 	bic.w	r1, r1, #15
 800cdfe:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 800ce02:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800ce06:	db07      	blt.n	800ce18 <_malloc_trim_r+0x3c>
 800ce08:	2100      	movs	r1, #0
 800ce0a:	4630      	mov	r0, r6
 800ce0c:	f001 fb90 	bl	800e530 <_sbrk_r>
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	442b      	add	r3, r5
 800ce14:	4298      	cmp	r0, r3
 800ce16:	d004      	beq.n	800ce22 <_malloc_trim_r+0x46>
 800ce18:	4630      	mov	r0, r6
 800ce1a:	f000 fe89 	bl	800db30 <__malloc_unlock>
 800ce1e:	2000      	movs	r0, #0
 800ce20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce22:	4261      	negs	r1, r4
 800ce24:	4630      	mov	r0, r6
 800ce26:	f001 fb83 	bl	800e530 <_sbrk_r>
 800ce2a:	3001      	adds	r0, #1
 800ce2c:	d00d      	beq.n	800ce4a <_malloc_trim_r+0x6e>
 800ce2e:	4b10      	ldr	r3, [pc, #64]	; (800ce70 <_malloc_trim_r+0x94>)
 800ce30:	68ba      	ldr	r2, [r7, #8]
 800ce32:	6819      	ldr	r1, [r3, #0]
 800ce34:	1b2d      	subs	r5, r5, r4
 800ce36:	f045 0501 	orr.w	r5, r5, #1
 800ce3a:	4630      	mov	r0, r6
 800ce3c:	1b09      	subs	r1, r1, r4
 800ce3e:	6055      	str	r5, [r2, #4]
 800ce40:	6019      	str	r1, [r3, #0]
 800ce42:	f000 fe75 	bl	800db30 <__malloc_unlock>
 800ce46:	2001      	movs	r0, #1
 800ce48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce4a:	2100      	movs	r1, #0
 800ce4c:	4630      	mov	r0, r6
 800ce4e:	f001 fb6f 	bl	800e530 <_sbrk_r>
 800ce52:	68ba      	ldr	r2, [r7, #8]
 800ce54:	1a83      	subs	r3, r0, r2
 800ce56:	2b0f      	cmp	r3, #15
 800ce58:	ddde      	ble.n	800ce18 <_malloc_trim_r+0x3c>
 800ce5a:	4c06      	ldr	r4, [pc, #24]	; (800ce74 <_malloc_trim_r+0x98>)
 800ce5c:	4904      	ldr	r1, [pc, #16]	; (800ce70 <_malloc_trim_r+0x94>)
 800ce5e:	6824      	ldr	r4, [r4, #0]
 800ce60:	f043 0301 	orr.w	r3, r3, #1
 800ce64:	1b00      	subs	r0, r0, r4
 800ce66:	6053      	str	r3, [r2, #4]
 800ce68:	6008      	str	r0, [r1, #0]
 800ce6a:	e7d5      	b.n	800ce18 <_malloc_trim_r+0x3c>
 800ce6c:	200005d0 	.word	0x200005d0
 800ce70:	20001a0c 	.word	0x20001a0c
 800ce74:	200009dc 	.word	0x200009dc

0800ce78 <_free_r>:
 800ce78:	2900      	cmp	r1, #0
 800ce7a:	d045      	beq.n	800cf08 <_free_r+0x90>
 800ce7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce80:	460d      	mov	r5, r1
 800ce82:	4680      	mov	r8, r0
 800ce84:	f000 fe52 	bl	800db2c <__malloc_lock>
 800ce88:	f855 7c04 	ldr.w	r7, [r5, #-4]
 800ce8c:	496a      	ldr	r1, [pc, #424]	; (800d038 <_free_r+0x1c0>)
 800ce8e:	f027 0301 	bic.w	r3, r7, #1
 800ce92:	f1a5 0408 	sub.w	r4, r5, #8
 800ce96:	18e2      	adds	r2, r4, r3
 800ce98:	688e      	ldr	r6, [r1, #8]
 800ce9a:	6850      	ldr	r0, [r2, #4]
 800ce9c:	42b2      	cmp	r2, r6
 800ce9e:	f020 0003 	bic.w	r0, r0, #3
 800cea2:	d062      	beq.n	800cf6a <_free_r+0xf2>
 800cea4:	07fe      	lsls	r6, r7, #31
 800cea6:	6050      	str	r0, [r2, #4]
 800cea8:	d40b      	bmi.n	800cec2 <_free_r+0x4a>
 800ceaa:	f855 7c08 	ldr.w	r7, [r5, #-8]
 800ceae:	1be4      	subs	r4, r4, r7
 800ceb0:	f101 0e08 	add.w	lr, r1, #8
 800ceb4:	68a5      	ldr	r5, [r4, #8]
 800ceb6:	4575      	cmp	r5, lr
 800ceb8:	443b      	add	r3, r7
 800ceba:	d06f      	beq.n	800cf9c <_free_r+0x124>
 800cebc:	68e7      	ldr	r7, [r4, #12]
 800cebe:	60ef      	str	r7, [r5, #12]
 800cec0:	60bd      	str	r5, [r7, #8]
 800cec2:	1815      	adds	r5, r2, r0
 800cec4:	686d      	ldr	r5, [r5, #4]
 800cec6:	07ed      	lsls	r5, r5, #31
 800cec8:	d542      	bpl.n	800cf50 <_free_r+0xd8>
 800ceca:	f043 0201 	orr.w	r2, r3, #1
 800cece:	6062      	str	r2, [r4, #4]
 800ced0:	50e3      	str	r3, [r4, r3]
 800ced2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ced6:	d218      	bcs.n	800cf0a <_free_r+0x92>
 800ced8:	08db      	lsrs	r3, r3, #3
 800ceda:	1c5a      	adds	r2, r3, #1
 800cedc:	684d      	ldr	r5, [r1, #4]
 800cede:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
 800cee2:	60a7      	str	r7, [r4, #8]
 800cee4:	2001      	movs	r0, #1
 800cee6:	109b      	asrs	r3, r3, #2
 800cee8:	fa00 f303 	lsl.w	r3, r0, r3
 800ceec:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
 800cef0:	431d      	orrs	r5, r3
 800cef2:	3808      	subs	r0, #8
 800cef4:	60e0      	str	r0, [r4, #12]
 800cef6:	604d      	str	r5, [r1, #4]
 800cef8:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
 800cefc:	60fc      	str	r4, [r7, #12]
 800cefe:	4640      	mov	r0, r8
 800cf00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf04:	f000 be14 	b.w	800db30 <__malloc_unlock>
 800cf08:	4770      	bx	lr
 800cf0a:	0a5a      	lsrs	r2, r3, #9
 800cf0c:	2a04      	cmp	r2, #4
 800cf0e:	d853      	bhi.n	800cfb8 <_free_r+0x140>
 800cf10:	099a      	lsrs	r2, r3, #6
 800cf12:	f102 0739 	add.w	r7, r2, #57	; 0x39
 800cf16:	007f      	lsls	r7, r7, #1
 800cf18:	f102 0538 	add.w	r5, r2, #56	; 0x38
 800cf1c:	eb01 0087 	add.w	r0, r1, r7, lsl #2
 800cf20:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
 800cf24:	4944      	ldr	r1, [pc, #272]	; (800d038 <_free_r+0x1c0>)
 800cf26:	3808      	subs	r0, #8
 800cf28:	4290      	cmp	r0, r2
 800cf2a:	d04d      	beq.n	800cfc8 <_free_r+0x150>
 800cf2c:	6851      	ldr	r1, [r2, #4]
 800cf2e:	f021 0103 	bic.w	r1, r1, #3
 800cf32:	428b      	cmp	r3, r1
 800cf34:	d202      	bcs.n	800cf3c <_free_r+0xc4>
 800cf36:	6892      	ldr	r2, [r2, #8]
 800cf38:	4290      	cmp	r0, r2
 800cf3a:	d1f7      	bne.n	800cf2c <_free_r+0xb4>
 800cf3c:	68d0      	ldr	r0, [r2, #12]
 800cf3e:	60e0      	str	r0, [r4, #12]
 800cf40:	60a2      	str	r2, [r4, #8]
 800cf42:	6084      	str	r4, [r0, #8]
 800cf44:	60d4      	str	r4, [r2, #12]
 800cf46:	4640      	mov	r0, r8
 800cf48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf4c:	f000 bdf0 	b.w	800db30 <__malloc_unlock>
 800cf50:	6895      	ldr	r5, [r2, #8]
 800cf52:	4f3a      	ldr	r7, [pc, #232]	; (800d03c <_free_r+0x1c4>)
 800cf54:	42bd      	cmp	r5, r7
 800cf56:	4403      	add	r3, r0
 800cf58:	d03f      	beq.n	800cfda <_free_r+0x162>
 800cf5a:	68d0      	ldr	r0, [r2, #12]
 800cf5c:	60e8      	str	r0, [r5, #12]
 800cf5e:	f043 0201 	orr.w	r2, r3, #1
 800cf62:	6085      	str	r5, [r0, #8]
 800cf64:	6062      	str	r2, [r4, #4]
 800cf66:	50e3      	str	r3, [r4, r3]
 800cf68:	e7b3      	b.n	800ced2 <_free_r+0x5a>
 800cf6a:	07ff      	lsls	r7, r7, #31
 800cf6c:	4403      	add	r3, r0
 800cf6e:	d407      	bmi.n	800cf80 <_free_r+0x108>
 800cf70:	f855 2c08 	ldr.w	r2, [r5, #-8]
 800cf74:	1aa4      	subs	r4, r4, r2
 800cf76:	4413      	add	r3, r2
 800cf78:	68a0      	ldr	r0, [r4, #8]
 800cf7a:	68e2      	ldr	r2, [r4, #12]
 800cf7c:	60c2      	str	r2, [r0, #12]
 800cf7e:	6090      	str	r0, [r2, #8]
 800cf80:	4a2f      	ldr	r2, [pc, #188]	; (800d040 <_free_r+0x1c8>)
 800cf82:	6812      	ldr	r2, [r2, #0]
 800cf84:	f043 0001 	orr.w	r0, r3, #1
 800cf88:	4293      	cmp	r3, r2
 800cf8a:	6060      	str	r0, [r4, #4]
 800cf8c:	608c      	str	r4, [r1, #8]
 800cf8e:	d3b6      	bcc.n	800cefe <_free_r+0x86>
 800cf90:	4b2c      	ldr	r3, [pc, #176]	; (800d044 <_free_r+0x1cc>)
 800cf92:	4640      	mov	r0, r8
 800cf94:	6819      	ldr	r1, [r3, #0]
 800cf96:	f7ff ff21 	bl	800cddc <_malloc_trim_r>
 800cf9a:	e7b0      	b.n	800cefe <_free_r+0x86>
 800cf9c:	1811      	adds	r1, r2, r0
 800cf9e:	6849      	ldr	r1, [r1, #4]
 800cfa0:	07c9      	lsls	r1, r1, #31
 800cfa2:	d444      	bmi.n	800d02e <_free_r+0x1b6>
 800cfa4:	6891      	ldr	r1, [r2, #8]
 800cfa6:	68d2      	ldr	r2, [r2, #12]
 800cfa8:	60ca      	str	r2, [r1, #12]
 800cfaa:	4403      	add	r3, r0
 800cfac:	f043 0001 	orr.w	r0, r3, #1
 800cfb0:	6091      	str	r1, [r2, #8]
 800cfb2:	6060      	str	r0, [r4, #4]
 800cfb4:	50e3      	str	r3, [r4, r3]
 800cfb6:	e7a2      	b.n	800cefe <_free_r+0x86>
 800cfb8:	2a14      	cmp	r2, #20
 800cfba:	d817      	bhi.n	800cfec <_free_r+0x174>
 800cfbc:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 800cfc0:	007f      	lsls	r7, r7, #1
 800cfc2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 800cfc6:	e7a9      	b.n	800cf1c <_free_r+0xa4>
 800cfc8:	10aa      	asrs	r2, r5, #2
 800cfca:	684b      	ldr	r3, [r1, #4]
 800cfcc:	2501      	movs	r5, #1
 800cfce:	fa05 f202 	lsl.w	r2, r5, r2
 800cfd2:	4313      	orrs	r3, r2
 800cfd4:	604b      	str	r3, [r1, #4]
 800cfd6:	4602      	mov	r2, r0
 800cfd8:	e7b1      	b.n	800cf3e <_free_r+0xc6>
 800cfda:	f043 0201 	orr.w	r2, r3, #1
 800cfde:	614c      	str	r4, [r1, #20]
 800cfe0:	610c      	str	r4, [r1, #16]
 800cfe2:	60e5      	str	r5, [r4, #12]
 800cfe4:	60a5      	str	r5, [r4, #8]
 800cfe6:	6062      	str	r2, [r4, #4]
 800cfe8:	50e3      	str	r3, [r4, r3]
 800cfea:	e788      	b.n	800cefe <_free_r+0x86>
 800cfec:	2a54      	cmp	r2, #84	; 0x54
 800cfee:	d806      	bhi.n	800cffe <_free_r+0x186>
 800cff0:	0b1a      	lsrs	r2, r3, #12
 800cff2:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 800cff6:	007f      	lsls	r7, r7, #1
 800cff8:	f102 056e 	add.w	r5, r2, #110	; 0x6e
 800cffc:	e78e      	b.n	800cf1c <_free_r+0xa4>
 800cffe:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800d002:	d806      	bhi.n	800d012 <_free_r+0x19a>
 800d004:	0bda      	lsrs	r2, r3, #15
 800d006:	f102 0778 	add.w	r7, r2, #120	; 0x78
 800d00a:	007f      	lsls	r7, r7, #1
 800d00c:	f102 0577 	add.w	r5, r2, #119	; 0x77
 800d010:	e784      	b.n	800cf1c <_free_r+0xa4>
 800d012:	f240 5054 	movw	r0, #1364	; 0x554
 800d016:	4282      	cmp	r2, r0
 800d018:	d806      	bhi.n	800d028 <_free_r+0x1b0>
 800d01a:	0c9a      	lsrs	r2, r3, #18
 800d01c:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 800d020:	007f      	lsls	r7, r7, #1
 800d022:	f102 057c 	add.w	r5, r2, #124	; 0x7c
 800d026:	e779      	b.n	800cf1c <_free_r+0xa4>
 800d028:	27fe      	movs	r7, #254	; 0xfe
 800d02a:	257e      	movs	r5, #126	; 0x7e
 800d02c:	e776      	b.n	800cf1c <_free_r+0xa4>
 800d02e:	f043 0201 	orr.w	r2, r3, #1
 800d032:	6062      	str	r2, [r4, #4]
 800d034:	50e3      	str	r3, [r4, r3]
 800d036:	e762      	b.n	800cefe <_free_r+0x86>
 800d038:	200005d0 	.word	0x200005d0
 800d03c:	200005d8 	.word	0x200005d8
 800d040:	200009d8 	.word	0x200009d8
 800d044:	20001a08 	.word	0x20001a08

0800d048 <__sfvwrite_r>:
 800d048:	6893      	ldr	r3, [r2, #8]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d076      	beq.n	800d13c <__sfvwrite_r+0xf4>
 800d04e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d052:	898b      	ldrh	r3, [r1, #12]
 800d054:	b085      	sub	sp, #20
 800d056:	460c      	mov	r4, r1
 800d058:	0719      	lsls	r1, r3, #28
 800d05a:	9001      	str	r0, [sp, #4]
 800d05c:	4616      	mov	r6, r2
 800d05e:	d529      	bpl.n	800d0b4 <__sfvwrite_r+0x6c>
 800d060:	6922      	ldr	r2, [r4, #16]
 800d062:	b33a      	cbz	r2, 800d0b4 <__sfvwrite_r+0x6c>
 800d064:	f003 0802 	and.w	r8, r3, #2
 800d068:	fa1f f088 	uxth.w	r0, r8
 800d06c:	6835      	ldr	r5, [r6, #0]
 800d06e:	2800      	cmp	r0, #0
 800d070:	d02f      	beq.n	800d0d2 <__sfvwrite_r+0x8a>
 800d072:	f04f 0900 	mov.w	r9, #0
 800d076:	4fb4      	ldr	r7, [pc, #720]	; (800d348 <__sfvwrite_r+0x300>)
 800d078:	46c8      	mov	r8, r9
 800d07a:	46b2      	mov	sl, r6
 800d07c:	45b8      	cmp	r8, r7
 800d07e:	4643      	mov	r3, r8
 800d080:	464a      	mov	r2, r9
 800d082:	bf28      	it	cs
 800d084:	463b      	movcs	r3, r7
 800d086:	9801      	ldr	r0, [sp, #4]
 800d088:	f1b8 0f00 	cmp.w	r8, #0
 800d08c:	d050      	beq.n	800d130 <__sfvwrite_r+0xe8>
 800d08e:	69e1      	ldr	r1, [r4, #28]
 800d090:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d092:	47b0      	blx	r6
 800d094:	2800      	cmp	r0, #0
 800d096:	dd71      	ble.n	800d17c <__sfvwrite_r+0x134>
 800d098:	f8da 3008 	ldr.w	r3, [sl, #8]
 800d09c:	1a1b      	subs	r3, r3, r0
 800d09e:	4481      	add	r9, r0
 800d0a0:	ebc0 0808 	rsb	r8, r0, r8
 800d0a4:	f8ca 3008 	str.w	r3, [sl, #8]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d1e7      	bne.n	800d07c <__sfvwrite_r+0x34>
 800d0ac:	2000      	movs	r0, #0
 800d0ae:	b005      	add	sp, #20
 800d0b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0b4:	4621      	mov	r1, r4
 800d0b6:	9801      	ldr	r0, [sp, #4]
 800d0b8:	f7fe fd28 	bl	800bb0c <__swsetup_r>
 800d0bc:	2800      	cmp	r0, #0
 800d0be:	f040 813a 	bne.w	800d336 <__sfvwrite_r+0x2ee>
 800d0c2:	89a3      	ldrh	r3, [r4, #12]
 800d0c4:	6835      	ldr	r5, [r6, #0]
 800d0c6:	f003 0802 	and.w	r8, r3, #2
 800d0ca:	fa1f f088 	uxth.w	r0, r8
 800d0ce:	2800      	cmp	r0, #0
 800d0d0:	d1cf      	bne.n	800d072 <__sfvwrite_r+0x2a>
 800d0d2:	f013 0901 	ands.w	r9, r3, #1
 800d0d6:	d15b      	bne.n	800d190 <__sfvwrite_r+0x148>
 800d0d8:	464f      	mov	r7, r9
 800d0da:	9602      	str	r6, [sp, #8]
 800d0dc:	b31f      	cbz	r7, 800d126 <__sfvwrite_r+0xde>
 800d0de:	059a      	lsls	r2, r3, #22
 800d0e0:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800d0e4:	d52c      	bpl.n	800d140 <__sfvwrite_r+0xf8>
 800d0e6:	4547      	cmp	r7, r8
 800d0e8:	46c2      	mov	sl, r8
 800d0ea:	f0c0 80a4 	bcc.w	800d236 <__sfvwrite_r+0x1ee>
 800d0ee:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800d0f2:	f040 80b1 	bne.w	800d258 <__sfvwrite_r+0x210>
 800d0f6:	6820      	ldr	r0, [r4, #0]
 800d0f8:	4652      	mov	r2, sl
 800d0fa:	4649      	mov	r1, r9
 800d0fc:	f000 fcb2 	bl	800da64 <memmove>
 800d100:	68a0      	ldr	r0, [r4, #8]
 800d102:	6823      	ldr	r3, [r4, #0]
 800d104:	ebc8 0000 	rsb	r0, r8, r0
 800d108:	4453      	add	r3, sl
 800d10a:	60a0      	str	r0, [r4, #8]
 800d10c:	6023      	str	r3, [r4, #0]
 800d10e:	4638      	mov	r0, r7
 800d110:	9a02      	ldr	r2, [sp, #8]
 800d112:	6893      	ldr	r3, [r2, #8]
 800d114:	1a1b      	subs	r3, r3, r0
 800d116:	4481      	add	r9, r0
 800d118:	1a3f      	subs	r7, r7, r0
 800d11a:	6093      	str	r3, [r2, #8]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d0c5      	beq.n	800d0ac <__sfvwrite_r+0x64>
 800d120:	89a3      	ldrh	r3, [r4, #12]
 800d122:	2f00      	cmp	r7, #0
 800d124:	d1db      	bne.n	800d0de <__sfvwrite_r+0x96>
 800d126:	f8d5 9000 	ldr.w	r9, [r5]
 800d12a:	686f      	ldr	r7, [r5, #4]
 800d12c:	3508      	adds	r5, #8
 800d12e:	e7d5      	b.n	800d0dc <__sfvwrite_r+0x94>
 800d130:	f8d5 9000 	ldr.w	r9, [r5]
 800d134:	f8d5 8004 	ldr.w	r8, [r5, #4]
 800d138:	3508      	adds	r5, #8
 800d13a:	e79f      	b.n	800d07c <__sfvwrite_r+0x34>
 800d13c:	2000      	movs	r0, #0
 800d13e:	4770      	bx	lr
 800d140:	6820      	ldr	r0, [r4, #0]
 800d142:	6923      	ldr	r3, [r4, #16]
 800d144:	4298      	cmp	r0, r3
 800d146:	d803      	bhi.n	800d150 <__sfvwrite_r+0x108>
 800d148:	6961      	ldr	r1, [r4, #20]
 800d14a:	428f      	cmp	r7, r1
 800d14c:	f080 80b7 	bcs.w	800d2be <__sfvwrite_r+0x276>
 800d150:	45b8      	cmp	r8, r7
 800d152:	bf28      	it	cs
 800d154:	46b8      	movcs	r8, r7
 800d156:	4642      	mov	r2, r8
 800d158:	4649      	mov	r1, r9
 800d15a:	f000 fc83 	bl	800da64 <memmove>
 800d15e:	68a3      	ldr	r3, [r4, #8]
 800d160:	6822      	ldr	r2, [r4, #0]
 800d162:	ebc8 0303 	rsb	r3, r8, r3
 800d166:	4442      	add	r2, r8
 800d168:	60a3      	str	r3, [r4, #8]
 800d16a:	6022      	str	r2, [r4, #0]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d149      	bne.n	800d204 <__sfvwrite_r+0x1bc>
 800d170:	4621      	mov	r1, r4
 800d172:	9801      	ldr	r0, [sp, #4]
 800d174:	f7ff fd94 	bl	800cca0 <_fflush_r>
 800d178:	2800      	cmp	r0, #0
 800d17a:	d043      	beq.n	800d204 <__sfvwrite_r+0x1bc>
 800d17c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d184:	f04f 30ff 	mov.w	r0, #4294967295
 800d188:	81a3      	strh	r3, [r4, #12]
 800d18a:	b005      	add	sp, #20
 800d18c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d190:	4680      	mov	r8, r0
 800d192:	9002      	str	r0, [sp, #8]
 800d194:	4682      	mov	sl, r0
 800d196:	4681      	mov	r9, r0
 800d198:	f1b9 0f00 	cmp.w	r9, #0
 800d19c:	d02a      	beq.n	800d1f4 <__sfvwrite_r+0x1ac>
 800d19e:	9b02      	ldr	r3, [sp, #8]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d04c      	beq.n	800d23e <__sfvwrite_r+0x1f6>
 800d1a4:	6820      	ldr	r0, [r4, #0]
 800d1a6:	6923      	ldr	r3, [r4, #16]
 800d1a8:	6962      	ldr	r2, [r4, #20]
 800d1aa:	45c8      	cmp	r8, r9
 800d1ac:	46c3      	mov	fp, r8
 800d1ae:	bf28      	it	cs
 800d1b0:	46cb      	movcs	fp, r9
 800d1b2:	4298      	cmp	r0, r3
 800d1b4:	465f      	mov	r7, fp
 800d1b6:	d904      	bls.n	800d1c2 <__sfvwrite_r+0x17a>
 800d1b8:	68a3      	ldr	r3, [r4, #8]
 800d1ba:	4413      	add	r3, r2
 800d1bc:	459b      	cmp	fp, r3
 800d1be:	f300 8090 	bgt.w	800d2e2 <__sfvwrite_r+0x29a>
 800d1c2:	4593      	cmp	fp, r2
 800d1c4:	db20      	blt.n	800d208 <__sfvwrite_r+0x1c0>
 800d1c6:	4613      	mov	r3, r2
 800d1c8:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800d1ca:	69e1      	ldr	r1, [r4, #28]
 800d1cc:	9801      	ldr	r0, [sp, #4]
 800d1ce:	4652      	mov	r2, sl
 800d1d0:	47b8      	blx	r7
 800d1d2:	1e07      	subs	r7, r0, #0
 800d1d4:	ddd2      	ble.n	800d17c <__sfvwrite_r+0x134>
 800d1d6:	ebb8 0807 	subs.w	r8, r8, r7
 800d1da:	d023      	beq.n	800d224 <__sfvwrite_r+0x1dc>
 800d1dc:	68b3      	ldr	r3, [r6, #8]
 800d1de:	1bdb      	subs	r3, r3, r7
 800d1e0:	44ba      	add	sl, r7
 800d1e2:	ebc7 0909 	rsb	r9, r7, r9
 800d1e6:	60b3      	str	r3, [r6, #8]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	f43f af5f 	beq.w	800d0ac <__sfvwrite_r+0x64>
 800d1ee:	f1b9 0f00 	cmp.w	r9, #0
 800d1f2:	d1d4      	bne.n	800d19e <__sfvwrite_r+0x156>
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	f8d5 a000 	ldr.w	sl, [r5]
 800d1fa:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800d1fe:	9302      	str	r3, [sp, #8]
 800d200:	3508      	adds	r5, #8
 800d202:	e7c9      	b.n	800d198 <__sfvwrite_r+0x150>
 800d204:	4640      	mov	r0, r8
 800d206:	e783      	b.n	800d110 <__sfvwrite_r+0xc8>
 800d208:	465a      	mov	r2, fp
 800d20a:	4651      	mov	r1, sl
 800d20c:	f000 fc2a 	bl	800da64 <memmove>
 800d210:	68a2      	ldr	r2, [r4, #8]
 800d212:	6823      	ldr	r3, [r4, #0]
 800d214:	ebcb 0202 	rsb	r2, fp, r2
 800d218:	445b      	add	r3, fp
 800d21a:	ebb8 0807 	subs.w	r8, r8, r7
 800d21e:	60a2      	str	r2, [r4, #8]
 800d220:	6023      	str	r3, [r4, #0]
 800d222:	d1db      	bne.n	800d1dc <__sfvwrite_r+0x194>
 800d224:	4621      	mov	r1, r4
 800d226:	9801      	ldr	r0, [sp, #4]
 800d228:	f7ff fd3a 	bl	800cca0 <_fflush_r>
 800d22c:	2800      	cmp	r0, #0
 800d22e:	d1a5      	bne.n	800d17c <__sfvwrite_r+0x134>
 800d230:	f8cd 8008 	str.w	r8, [sp, #8]
 800d234:	e7d2      	b.n	800d1dc <__sfvwrite_r+0x194>
 800d236:	6820      	ldr	r0, [r4, #0]
 800d238:	46b8      	mov	r8, r7
 800d23a:	46ba      	mov	sl, r7
 800d23c:	e75c      	b.n	800d0f8 <__sfvwrite_r+0xb0>
 800d23e:	464a      	mov	r2, r9
 800d240:	210a      	movs	r1, #10
 800d242:	4650      	mov	r0, sl
 800d244:	f7f3 ff4c 	bl	80010e0 <memchr>
 800d248:	2800      	cmp	r0, #0
 800d24a:	d06f      	beq.n	800d32c <__sfvwrite_r+0x2e4>
 800d24c:	3001      	adds	r0, #1
 800d24e:	2301      	movs	r3, #1
 800d250:	ebca 0800 	rsb	r8, sl, r0
 800d254:	9302      	str	r3, [sp, #8]
 800d256:	e7a5      	b.n	800d1a4 <__sfvwrite_r+0x15c>
 800d258:	6962      	ldr	r2, [r4, #20]
 800d25a:	6820      	ldr	r0, [r4, #0]
 800d25c:	6921      	ldr	r1, [r4, #16]
 800d25e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
 800d262:	ebc1 0a00 	rsb	sl, r1, r0
 800d266:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
 800d26a:	f10a 0001 	add.w	r0, sl, #1
 800d26e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d272:	4438      	add	r0, r7
 800d274:	4540      	cmp	r0, r8
 800d276:	4642      	mov	r2, r8
 800d278:	bf84      	itt	hi
 800d27a:	4680      	movhi	r8, r0
 800d27c:	4642      	movhi	r2, r8
 800d27e:	055b      	lsls	r3, r3, #21
 800d280:	d542      	bpl.n	800d308 <__sfvwrite_r+0x2c0>
 800d282:	4611      	mov	r1, r2
 800d284:	9801      	ldr	r0, [sp, #4]
 800d286:	f000 f91f 	bl	800d4c8 <_malloc_r>
 800d28a:	4683      	mov	fp, r0
 800d28c:	2800      	cmp	r0, #0
 800d28e:	d055      	beq.n	800d33c <__sfvwrite_r+0x2f4>
 800d290:	4652      	mov	r2, sl
 800d292:	6921      	ldr	r1, [r4, #16]
 800d294:	f7f3 fe18 	bl	8000ec8 <memcpy>
 800d298:	89a3      	ldrh	r3, [r4, #12]
 800d29a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d29e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2a2:	81a3      	strh	r3, [r4, #12]
 800d2a4:	ebca 0308 	rsb	r3, sl, r8
 800d2a8:	eb0b 000a 	add.w	r0, fp, sl
 800d2ac:	f8c4 8014 	str.w	r8, [r4, #20]
 800d2b0:	f8c4 b010 	str.w	fp, [r4, #16]
 800d2b4:	6020      	str	r0, [r4, #0]
 800d2b6:	60a3      	str	r3, [r4, #8]
 800d2b8:	46b8      	mov	r8, r7
 800d2ba:	46ba      	mov	sl, r7
 800d2bc:	e71c      	b.n	800d0f8 <__sfvwrite_r+0xb0>
 800d2be:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d2c2:	42bb      	cmp	r3, r7
 800d2c4:	bf28      	it	cs
 800d2c6:	463b      	movcs	r3, r7
 800d2c8:	464a      	mov	r2, r9
 800d2ca:	fb93 f3f1 	sdiv	r3, r3, r1
 800d2ce:	9801      	ldr	r0, [sp, #4]
 800d2d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d2d2:	fb01 f303 	mul.w	r3, r1, r3
 800d2d6:	69e1      	ldr	r1, [r4, #28]
 800d2d8:	47b0      	blx	r6
 800d2da:	2800      	cmp	r0, #0
 800d2dc:	f73f af18 	bgt.w	800d110 <__sfvwrite_r+0xc8>
 800d2e0:	e74c      	b.n	800d17c <__sfvwrite_r+0x134>
 800d2e2:	461a      	mov	r2, r3
 800d2e4:	4651      	mov	r1, sl
 800d2e6:	9303      	str	r3, [sp, #12]
 800d2e8:	f000 fbbc 	bl	800da64 <memmove>
 800d2ec:	6822      	ldr	r2, [r4, #0]
 800d2ee:	9b03      	ldr	r3, [sp, #12]
 800d2f0:	9801      	ldr	r0, [sp, #4]
 800d2f2:	441a      	add	r2, r3
 800d2f4:	6022      	str	r2, [r4, #0]
 800d2f6:	4621      	mov	r1, r4
 800d2f8:	f7ff fcd2 	bl	800cca0 <_fflush_r>
 800d2fc:	9b03      	ldr	r3, [sp, #12]
 800d2fe:	2800      	cmp	r0, #0
 800d300:	f47f af3c 	bne.w	800d17c <__sfvwrite_r+0x134>
 800d304:	461f      	mov	r7, r3
 800d306:	e766      	b.n	800d1d6 <__sfvwrite_r+0x18e>
 800d308:	9801      	ldr	r0, [sp, #4]
 800d30a:	f000 ff21 	bl	800e150 <_realloc_r>
 800d30e:	4683      	mov	fp, r0
 800d310:	2800      	cmp	r0, #0
 800d312:	d1c7      	bne.n	800d2a4 <__sfvwrite_r+0x25c>
 800d314:	9d01      	ldr	r5, [sp, #4]
 800d316:	6921      	ldr	r1, [r4, #16]
 800d318:	4628      	mov	r0, r5
 800d31a:	f7ff fdad 	bl	800ce78 <_free_r>
 800d31e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d322:	220c      	movs	r2, #12
 800d324:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d328:	602a      	str	r2, [r5, #0]
 800d32a:	e729      	b.n	800d180 <__sfvwrite_r+0x138>
 800d32c:	2301      	movs	r3, #1
 800d32e:	f109 0801 	add.w	r8, r9, #1
 800d332:	9302      	str	r3, [sp, #8]
 800d334:	e736      	b.n	800d1a4 <__sfvwrite_r+0x15c>
 800d336:	f04f 30ff 	mov.w	r0, #4294967295
 800d33a:	e6b8      	b.n	800d0ae <__sfvwrite_r+0x66>
 800d33c:	9a01      	ldr	r2, [sp, #4]
 800d33e:	230c      	movs	r3, #12
 800d340:	6013      	str	r3, [r2, #0]
 800d342:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d346:	e71b      	b.n	800d180 <__sfvwrite_r+0x138>
 800d348:	7ffffc00 	.word	0x7ffffc00

0800d34c <_fwalk_reent>:
 800d34c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d350:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 800d354:	d01f      	beq.n	800d396 <_fwalk_reent+0x4a>
 800d356:	4688      	mov	r8, r1
 800d358:	4606      	mov	r6, r0
 800d35a:	f04f 0900 	mov.w	r9, #0
 800d35e:	687d      	ldr	r5, [r7, #4]
 800d360:	68bc      	ldr	r4, [r7, #8]
 800d362:	3d01      	subs	r5, #1
 800d364:	d411      	bmi.n	800d38a <_fwalk_reent+0x3e>
 800d366:	89a3      	ldrh	r3, [r4, #12]
 800d368:	2b01      	cmp	r3, #1
 800d36a:	f105 35ff 	add.w	r5, r5, #4294967295
 800d36e:	d908      	bls.n	800d382 <_fwalk_reent+0x36>
 800d370:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800d374:	3301      	adds	r3, #1
 800d376:	4621      	mov	r1, r4
 800d378:	4630      	mov	r0, r6
 800d37a:	d002      	beq.n	800d382 <_fwalk_reent+0x36>
 800d37c:	47c0      	blx	r8
 800d37e:	ea49 0900 	orr.w	r9, r9, r0
 800d382:	1c6b      	adds	r3, r5, #1
 800d384:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800d388:	d1ed      	bne.n	800d366 <_fwalk_reent+0x1a>
 800d38a:	683f      	ldr	r7, [r7, #0]
 800d38c:	2f00      	cmp	r7, #0
 800d38e:	d1e6      	bne.n	800d35e <_fwalk_reent+0x12>
 800d390:	4648      	mov	r0, r9
 800d392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d396:	46b9      	mov	r9, r7
 800d398:	4648      	mov	r0, r9
 800d39a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d39e:	bf00      	nop

0800d3a0 <__locale_mb_cur_max>:
 800d3a0:	4b04      	ldr	r3, [pc, #16]	; (800d3b4 <__locale_mb_cur_max+0x14>)
 800d3a2:	4a05      	ldr	r2, [pc, #20]	; (800d3b8 <__locale_mb_cur_max+0x18>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	bf08      	it	eq
 800d3ac:	4613      	moveq	r3, r2
 800d3ae:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800d3b2:	4770      	bx	lr
 800d3b4:	20000460 	.word	0x20000460
 800d3b8:	20000464 	.word	0x20000464

0800d3bc <__locale_ctype_ptr_l>:
 800d3bc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800d3c0:	4770      	bx	lr
 800d3c2:	bf00      	nop

0800d3c4 <_localeconv_r>:
 800d3c4:	4a04      	ldr	r2, [pc, #16]	; (800d3d8 <_localeconv_r+0x14>)
 800d3c6:	4b05      	ldr	r3, [pc, #20]	; (800d3dc <_localeconv_r+0x18>)
 800d3c8:	6812      	ldr	r2, [r2, #0]
 800d3ca:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800d3cc:	2800      	cmp	r0, #0
 800d3ce:	bf08      	it	eq
 800d3d0:	4618      	moveq	r0, r3
 800d3d2:	30f0      	adds	r0, #240	; 0xf0
 800d3d4:	4770      	bx	lr
 800d3d6:	bf00      	nop
 800d3d8:	20000460 	.word	0x20000460
 800d3dc:	20000464 	.word	0x20000464

0800d3e0 <__swhatbuf_r>:
 800d3e0:	b570      	push	{r4, r5, r6, lr}
 800d3e2:	460d      	mov	r5, r1
 800d3e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3e8:	2900      	cmp	r1, #0
 800d3ea:	b090      	sub	sp, #64	; 0x40
 800d3ec:	4614      	mov	r4, r2
 800d3ee:	461e      	mov	r6, r3
 800d3f0:	db14      	blt.n	800d41c <__swhatbuf_r+0x3c>
 800d3f2:	aa01      	add	r2, sp, #4
 800d3f4:	f001 fabe 	bl	800e974 <_fstat_r>
 800d3f8:	2800      	cmp	r0, #0
 800d3fa:	db0f      	blt.n	800d41c <__swhatbuf_r+0x3c>
 800d3fc:	9a02      	ldr	r2, [sp, #8]
 800d3fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d402:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
 800d406:	fab2 f282 	clz	r2, r2
 800d40a:	0952      	lsrs	r2, r2, #5
 800d40c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d410:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800d414:	6032      	str	r2, [r6, #0]
 800d416:	6023      	str	r3, [r4, #0]
 800d418:	b010      	add	sp, #64	; 0x40
 800d41a:	bd70      	pop	{r4, r5, r6, pc}
 800d41c:	89a8      	ldrh	r0, [r5, #12]
 800d41e:	f000 0080 	and.w	r0, r0, #128	; 0x80
 800d422:	b282      	uxth	r2, r0
 800d424:	2000      	movs	r0, #0
 800d426:	6030      	str	r0, [r6, #0]
 800d428:	b11a      	cbz	r2, 800d432 <__swhatbuf_r+0x52>
 800d42a:	2340      	movs	r3, #64	; 0x40
 800d42c:	6023      	str	r3, [r4, #0]
 800d42e:	b010      	add	sp, #64	; 0x40
 800d430:	bd70      	pop	{r4, r5, r6, pc}
 800d432:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d436:	4610      	mov	r0, r2
 800d438:	6023      	str	r3, [r4, #0]
 800d43a:	b010      	add	sp, #64	; 0x40
 800d43c:	bd70      	pop	{r4, r5, r6, pc}
 800d43e:	bf00      	nop

0800d440 <__smakebuf_r>:
 800d440:	898a      	ldrh	r2, [r1, #12]
 800d442:	0792      	lsls	r2, r2, #30
 800d444:	460b      	mov	r3, r1
 800d446:	d506      	bpl.n	800d456 <__smakebuf_r+0x16>
 800d448:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d44c:	2101      	movs	r1, #1
 800d44e:	601a      	str	r2, [r3, #0]
 800d450:	611a      	str	r2, [r3, #16]
 800d452:	6159      	str	r1, [r3, #20]
 800d454:	4770      	bx	lr
 800d456:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d458:	b083      	sub	sp, #12
 800d45a:	ab01      	add	r3, sp, #4
 800d45c:	466a      	mov	r2, sp
 800d45e:	460c      	mov	r4, r1
 800d460:	4605      	mov	r5, r0
 800d462:	f7ff ffbd 	bl	800d3e0 <__swhatbuf_r>
 800d466:	9900      	ldr	r1, [sp, #0]
 800d468:	4606      	mov	r6, r0
 800d46a:	4628      	mov	r0, r5
 800d46c:	f000 f82c 	bl	800d4c8 <_malloc_r>
 800d470:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d474:	b1d0      	cbz	r0, 800d4ac <__smakebuf_r+0x6c>
 800d476:	9a01      	ldr	r2, [sp, #4]
 800d478:	4f12      	ldr	r7, [pc, #72]	; (800d4c4 <__smakebuf_r+0x84>)
 800d47a:	9900      	ldr	r1, [sp, #0]
 800d47c:	63ef      	str	r7, [r5, #60]	; 0x3c
 800d47e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d482:	81a3      	strh	r3, [r4, #12]
 800d484:	6020      	str	r0, [r4, #0]
 800d486:	6120      	str	r0, [r4, #16]
 800d488:	6161      	str	r1, [r4, #20]
 800d48a:	b91a      	cbnz	r2, 800d494 <__smakebuf_r+0x54>
 800d48c:	4333      	orrs	r3, r6
 800d48e:	81a3      	strh	r3, [r4, #12]
 800d490:	b003      	add	sp, #12
 800d492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d494:	4628      	mov	r0, r5
 800d496:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d49a:	f001 fa7f 	bl	800e99c <_isatty_r>
 800d49e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4a2:	2800      	cmp	r0, #0
 800d4a4:	d0f2      	beq.n	800d48c <__smakebuf_r+0x4c>
 800d4a6:	f043 0301 	orr.w	r3, r3, #1
 800d4aa:	e7ef      	b.n	800d48c <__smakebuf_r+0x4c>
 800d4ac:	059a      	lsls	r2, r3, #22
 800d4ae:	d4ef      	bmi.n	800d490 <__smakebuf_r+0x50>
 800d4b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d4b4:	f043 0302 	orr.w	r3, r3, #2
 800d4b8:	2101      	movs	r1, #1
 800d4ba:	81a3      	strh	r3, [r4, #12]
 800d4bc:	6022      	str	r2, [r4, #0]
 800d4be:	6122      	str	r2, [r4, #16]
 800d4c0:	6161      	str	r1, [r4, #20]
 800d4c2:	e7e5      	b.n	800d490 <__smakebuf_r+0x50>
 800d4c4:	0800cccd 	.word	0x0800cccd

0800d4c8 <_malloc_r>:
 800d4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4cc:	f101 050b 	add.w	r5, r1, #11
 800d4d0:	2d16      	cmp	r5, #22
 800d4d2:	b083      	sub	sp, #12
 800d4d4:	4606      	mov	r6, r0
 800d4d6:	f240 809f 	bls.w	800d618 <_malloc_r+0x150>
 800d4da:	f035 0507 	bics.w	r5, r5, #7
 800d4de:	f100 80bf 	bmi.w	800d660 <_malloc_r+0x198>
 800d4e2:	42a9      	cmp	r1, r5
 800d4e4:	f200 80bc 	bhi.w	800d660 <_malloc_r+0x198>
 800d4e8:	f000 fb20 	bl	800db2c <__malloc_lock>
 800d4ec:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 800d4f0:	f0c0 829c 	bcc.w	800da2c <_malloc_r+0x564>
 800d4f4:	0a6b      	lsrs	r3, r5, #9
 800d4f6:	f000 80ba 	beq.w	800d66e <_malloc_r+0x1a6>
 800d4fa:	2b04      	cmp	r3, #4
 800d4fc:	f200 8183 	bhi.w	800d806 <_malloc_r+0x33e>
 800d500:	09a8      	lsrs	r0, r5, #6
 800d502:	f100 0e39 	add.w	lr, r0, #57	; 0x39
 800d506:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800d50a:	3038      	adds	r0, #56	; 0x38
 800d50c:	4fc4      	ldr	r7, [pc, #784]	; (800d820 <_malloc_r+0x358>)
 800d50e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800d512:	f1a3 0108 	sub.w	r1, r3, #8
 800d516:	685c      	ldr	r4, [r3, #4]
 800d518:	42a1      	cmp	r1, r4
 800d51a:	d107      	bne.n	800d52c <_malloc_r+0x64>
 800d51c:	e0ac      	b.n	800d678 <_malloc_r+0x1b0>
 800d51e:	2a00      	cmp	r2, #0
 800d520:	f280 80ac 	bge.w	800d67c <_malloc_r+0x1b4>
 800d524:	68e4      	ldr	r4, [r4, #12]
 800d526:	42a1      	cmp	r1, r4
 800d528:	f000 80a6 	beq.w	800d678 <_malloc_r+0x1b0>
 800d52c:	6863      	ldr	r3, [r4, #4]
 800d52e:	f023 0303 	bic.w	r3, r3, #3
 800d532:	1b5a      	subs	r2, r3, r5
 800d534:	2a0f      	cmp	r2, #15
 800d536:	ddf2      	ble.n	800d51e <_malloc_r+0x56>
 800d538:	49b9      	ldr	r1, [pc, #740]	; (800d820 <_malloc_r+0x358>)
 800d53a:	693c      	ldr	r4, [r7, #16]
 800d53c:	f101 0e08 	add.w	lr, r1, #8
 800d540:	4574      	cmp	r4, lr
 800d542:	f000 81b3 	beq.w	800d8ac <_malloc_r+0x3e4>
 800d546:	6863      	ldr	r3, [r4, #4]
 800d548:	f023 0303 	bic.w	r3, r3, #3
 800d54c:	1b5a      	subs	r2, r3, r5
 800d54e:	2a0f      	cmp	r2, #15
 800d550:	f300 8199 	bgt.w	800d886 <_malloc_r+0x3be>
 800d554:	2a00      	cmp	r2, #0
 800d556:	f8c1 e014 	str.w	lr, [r1, #20]
 800d55a:	f8c1 e010 	str.w	lr, [r1, #16]
 800d55e:	f280 809e 	bge.w	800d69e <_malloc_r+0x1d6>
 800d562:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d566:	f080 8167 	bcs.w	800d838 <_malloc_r+0x370>
 800d56a:	08db      	lsrs	r3, r3, #3
 800d56c:	f103 0c01 	add.w	ip, r3, #1
 800d570:	2201      	movs	r2, #1
 800d572:	109b      	asrs	r3, r3, #2
 800d574:	fa02 f303 	lsl.w	r3, r2, r3
 800d578:	684a      	ldr	r2, [r1, #4]
 800d57a:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
 800d57e:	f8c4 8008 	str.w	r8, [r4, #8]
 800d582:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
 800d586:	431a      	orrs	r2, r3
 800d588:	f1a9 0308 	sub.w	r3, r9, #8
 800d58c:	60e3      	str	r3, [r4, #12]
 800d58e:	604a      	str	r2, [r1, #4]
 800d590:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
 800d594:	f8c8 400c 	str.w	r4, [r8, #12]
 800d598:	1083      	asrs	r3, r0, #2
 800d59a:	2401      	movs	r4, #1
 800d59c:	409c      	lsls	r4, r3
 800d59e:	4294      	cmp	r4, r2
 800d5a0:	f200 808a 	bhi.w	800d6b8 <_malloc_r+0x1f0>
 800d5a4:	4214      	tst	r4, r2
 800d5a6:	d106      	bne.n	800d5b6 <_malloc_r+0xee>
 800d5a8:	f020 0003 	bic.w	r0, r0, #3
 800d5ac:	0064      	lsls	r4, r4, #1
 800d5ae:	4214      	tst	r4, r2
 800d5b0:	f100 0004 	add.w	r0, r0, #4
 800d5b4:	d0fa      	beq.n	800d5ac <_malloc_r+0xe4>
 800d5b6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 800d5ba:	46cc      	mov	ip, r9
 800d5bc:	4680      	mov	r8, r0
 800d5be:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800d5c2:	458c      	cmp	ip, r1
 800d5c4:	d107      	bne.n	800d5d6 <_malloc_r+0x10e>
 800d5c6:	e173      	b.n	800d8b0 <_malloc_r+0x3e8>
 800d5c8:	2a00      	cmp	r2, #0
 800d5ca:	f280 8181 	bge.w	800d8d0 <_malloc_r+0x408>
 800d5ce:	68c9      	ldr	r1, [r1, #12]
 800d5d0:	458c      	cmp	ip, r1
 800d5d2:	f000 816d 	beq.w	800d8b0 <_malloc_r+0x3e8>
 800d5d6:	684b      	ldr	r3, [r1, #4]
 800d5d8:	f023 0303 	bic.w	r3, r3, #3
 800d5dc:	1b5a      	subs	r2, r3, r5
 800d5de:	2a0f      	cmp	r2, #15
 800d5e0:	ddf2      	ble.n	800d5c8 <_malloc_r+0x100>
 800d5e2:	460c      	mov	r4, r1
 800d5e4:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800d5e8:	f854 8f08 	ldr.w	r8, [r4, #8]!
 800d5ec:	194b      	adds	r3, r1, r5
 800d5ee:	f045 0501 	orr.w	r5, r5, #1
 800d5f2:	604d      	str	r5, [r1, #4]
 800d5f4:	f042 0101 	orr.w	r1, r2, #1
 800d5f8:	f8c8 c00c 	str.w	ip, [r8, #12]
 800d5fc:	4630      	mov	r0, r6
 800d5fe:	f8cc 8008 	str.w	r8, [ip, #8]
 800d602:	617b      	str	r3, [r7, #20]
 800d604:	613b      	str	r3, [r7, #16]
 800d606:	f8c3 e00c 	str.w	lr, [r3, #12]
 800d60a:	f8c3 e008 	str.w	lr, [r3, #8]
 800d60e:	6059      	str	r1, [r3, #4]
 800d610:	509a      	str	r2, [r3, r2]
 800d612:	f000 fa8d 	bl	800db30 <__malloc_unlock>
 800d616:	e01f      	b.n	800d658 <_malloc_r+0x190>
 800d618:	2910      	cmp	r1, #16
 800d61a:	d821      	bhi.n	800d660 <_malloc_r+0x198>
 800d61c:	f000 fa86 	bl	800db2c <__malloc_lock>
 800d620:	2510      	movs	r5, #16
 800d622:	2306      	movs	r3, #6
 800d624:	2002      	movs	r0, #2
 800d626:	4f7e      	ldr	r7, [pc, #504]	; (800d820 <_malloc_r+0x358>)
 800d628:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800d62c:	f1a3 0208 	sub.w	r2, r3, #8
 800d630:	685c      	ldr	r4, [r3, #4]
 800d632:	4294      	cmp	r4, r2
 800d634:	f000 8145 	beq.w	800d8c2 <_malloc_r+0x3fa>
 800d638:	6863      	ldr	r3, [r4, #4]
 800d63a:	68e1      	ldr	r1, [r4, #12]
 800d63c:	68a5      	ldr	r5, [r4, #8]
 800d63e:	f023 0303 	bic.w	r3, r3, #3
 800d642:	4423      	add	r3, r4
 800d644:	4630      	mov	r0, r6
 800d646:	685a      	ldr	r2, [r3, #4]
 800d648:	60e9      	str	r1, [r5, #12]
 800d64a:	f042 0201 	orr.w	r2, r2, #1
 800d64e:	608d      	str	r5, [r1, #8]
 800d650:	605a      	str	r2, [r3, #4]
 800d652:	f000 fa6d 	bl	800db30 <__malloc_unlock>
 800d656:	3408      	adds	r4, #8
 800d658:	4620      	mov	r0, r4
 800d65a:	b003      	add	sp, #12
 800d65c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d660:	2400      	movs	r4, #0
 800d662:	230c      	movs	r3, #12
 800d664:	4620      	mov	r0, r4
 800d666:	6033      	str	r3, [r6, #0]
 800d668:	b003      	add	sp, #12
 800d66a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d66e:	2380      	movs	r3, #128	; 0x80
 800d670:	f04f 0e40 	mov.w	lr, #64	; 0x40
 800d674:	203f      	movs	r0, #63	; 0x3f
 800d676:	e749      	b.n	800d50c <_malloc_r+0x44>
 800d678:	4670      	mov	r0, lr
 800d67a:	e75d      	b.n	800d538 <_malloc_r+0x70>
 800d67c:	4423      	add	r3, r4
 800d67e:	68e1      	ldr	r1, [r4, #12]
 800d680:	685a      	ldr	r2, [r3, #4]
 800d682:	68a5      	ldr	r5, [r4, #8]
 800d684:	f042 0201 	orr.w	r2, r2, #1
 800d688:	60e9      	str	r1, [r5, #12]
 800d68a:	4630      	mov	r0, r6
 800d68c:	608d      	str	r5, [r1, #8]
 800d68e:	605a      	str	r2, [r3, #4]
 800d690:	f000 fa4e 	bl	800db30 <__malloc_unlock>
 800d694:	3408      	adds	r4, #8
 800d696:	4620      	mov	r0, r4
 800d698:	b003      	add	sp, #12
 800d69a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d69e:	4423      	add	r3, r4
 800d6a0:	4630      	mov	r0, r6
 800d6a2:	685a      	ldr	r2, [r3, #4]
 800d6a4:	f042 0201 	orr.w	r2, r2, #1
 800d6a8:	605a      	str	r2, [r3, #4]
 800d6aa:	f000 fa41 	bl	800db30 <__malloc_unlock>
 800d6ae:	3408      	adds	r4, #8
 800d6b0:	4620      	mov	r0, r4
 800d6b2:	b003      	add	sp, #12
 800d6b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6b8:	68bc      	ldr	r4, [r7, #8]
 800d6ba:	6863      	ldr	r3, [r4, #4]
 800d6bc:	f023 0803 	bic.w	r8, r3, #3
 800d6c0:	45a8      	cmp	r8, r5
 800d6c2:	d304      	bcc.n	800d6ce <_malloc_r+0x206>
 800d6c4:	ebc5 0308 	rsb	r3, r5, r8
 800d6c8:	2b0f      	cmp	r3, #15
 800d6ca:	f300 808c 	bgt.w	800d7e6 <_malloc_r+0x31e>
 800d6ce:	4b55      	ldr	r3, [pc, #340]	; (800d824 <_malloc_r+0x35c>)
 800d6d0:	f8df 9160 	ldr.w	r9, [pc, #352]	; 800d834 <_malloc_r+0x36c>
 800d6d4:	681a      	ldr	r2, [r3, #0]
 800d6d6:	f8d9 3000 	ldr.w	r3, [r9]
 800d6da:	3301      	adds	r3, #1
 800d6dc:	442a      	add	r2, r5
 800d6de:	eb04 0a08 	add.w	sl, r4, r8
 800d6e2:	f000 8160 	beq.w	800d9a6 <_malloc_r+0x4de>
 800d6e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d6ea:	320f      	adds	r2, #15
 800d6ec:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800d6f0:	f022 020f 	bic.w	r2, r2, #15
 800d6f4:	4611      	mov	r1, r2
 800d6f6:	4630      	mov	r0, r6
 800d6f8:	9201      	str	r2, [sp, #4]
 800d6fa:	f000 ff19 	bl	800e530 <_sbrk_r>
 800d6fe:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d702:	4683      	mov	fp, r0
 800d704:	9a01      	ldr	r2, [sp, #4]
 800d706:	f000 8158 	beq.w	800d9ba <_malloc_r+0x4f2>
 800d70a:	4582      	cmp	sl, r0
 800d70c:	f200 80fc 	bhi.w	800d908 <_malloc_r+0x440>
 800d710:	4b45      	ldr	r3, [pc, #276]	; (800d828 <_malloc_r+0x360>)
 800d712:	6819      	ldr	r1, [r3, #0]
 800d714:	45da      	cmp	sl, fp
 800d716:	4411      	add	r1, r2
 800d718:	6019      	str	r1, [r3, #0]
 800d71a:	f000 8153 	beq.w	800d9c4 <_malloc_r+0x4fc>
 800d71e:	f8d9 0000 	ldr.w	r0, [r9]
 800d722:	f8df e110 	ldr.w	lr, [pc, #272]	; 800d834 <_malloc_r+0x36c>
 800d726:	3001      	adds	r0, #1
 800d728:	bf1b      	ittet	ne
 800d72a:	ebca 0a0b 	rsbne	sl, sl, fp
 800d72e:	4451      	addne	r1, sl
 800d730:	f8ce b000 	streq.w	fp, [lr]
 800d734:	6019      	strne	r1, [r3, #0]
 800d736:	f01b 0107 	ands.w	r1, fp, #7
 800d73a:	f000 8117 	beq.w	800d96c <_malloc_r+0x4a4>
 800d73e:	f1c1 0008 	rsb	r0, r1, #8
 800d742:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 800d746:	4483      	add	fp, r0
 800d748:	3108      	adds	r1, #8
 800d74a:	445a      	add	r2, fp
 800d74c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800d750:	ebc2 0901 	rsb	r9, r2, r1
 800d754:	4649      	mov	r1, r9
 800d756:	4630      	mov	r0, r6
 800d758:	9301      	str	r3, [sp, #4]
 800d75a:	f000 fee9 	bl	800e530 <_sbrk_r>
 800d75e:	1c43      	adds	r3, r0, #1
 800d760:	9b01      	ldr	r3, [sp, #4]
 800d762:	f000 813f 	beq.w	800d9e4 <_malloc_r+0x51c>
 800d766:	ebcb 0200 	rsb	r2, fp, r0
 800d76a:	444a      	add	r2, r9
 800d76c:	f042 0201 	orr.w	r2, r2, #1
 800d770:	6819      	ldr	r1, [r3, #0]
 800d772:	f8c7 b008 	str.w	fp, [r7, #8]
 800d776:	4449      	add	r1, r9
 800d778:	42bc      	cmp	r4, r7
 800d77a:	f8cb 2004 	str.w	r2, [fp, #4]
 800d77e:	6019      	str	r1, [r3, #0]
 800d780:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 800d828 <_malloc_r+0x360>
 800d784:	d016      	beq.n	800d7b4 <_malloc_r+0x2ec>
 800d786:	f1b8 0f0f 	cmp.w	r8, #15
 800d78a:	f240 80fd 	bls.w	800d988 <_malloc_r+0x4c0>
 800d78e:	6862      	ldr	r2, [r4, #4]
 800d790:	f1a8 030c 	sub.w	r3, r8, #12
 800d794:	f023 0307 	bic.w	r3, r3, #7
 800d798:	18e0      	adds	r0, r4, r3
 800d79a:	f002 0201 	and.w	r2, r2, #1
 800d79e:	f04f 0e05 	mov.w	lr, #5
 800d7a2:	431a      	orrs	r2, r3
 800d7a4:	2b0f      	cmp	r3, #15
 800d7a6:	6062      	str	r2, [r4, #4]
 800d7a8:	f8c0 e004 	str.w	lr, [r0, #4]
 800d7ac:	f8c0 e008 	str.w	lr, [r0, #8]
 800d7b0:	f200 811c 	bhi.w	800d9ec <_malloc_r+0x524>
 800d7b4:	4b1d      	ldr	r3, [pc, #116]	; (800d82c <_malloc_r+0x364>)
 800d7b6:	68bc      	ldr	r4, [r7, #8]
 800d7b8:	681a      	ldr	r2, [r3, #0]
 800d7ba:	4291      	cmp	r1, r2
 800d7bc:	bf88      	it	hi
 800d7be:	6019      	strhi	r1, [r3, #0]
 800d7c0:	4b1b      	ldr	r3, [pc, #108]	; (800d830 <_malloc_r+0x368>)
 800d7c2:	681a      	ldr	r2, [r3, #0]
 800d7c4:	4291      	cmp	r1, r2
 800d7c6:	6862      	ldr	r2, [r4, #4]
 800d7c8:	bf88      	it	hi
 800d7ca:	6019      	strhi	r1, [r3, #0]
 800d7cc:	f022 0203 	bic.w	r2, r2, #3
 800d7d0:	4295      	cmp	r5, r2
 800d7d2:	eba2 0305 	sub.w	r3, r2, r5
 800d7d6:	d801      	bhi.n	800d7dc <_malloc_r+0x314>
 800d7d8:	2b0f      	cmp	r3, #15
 800d7da:	dc04      	bgt.n	800d7e6 <_malloc_r+0x31e>
 800d7dc:	4630      	mov	r0, r6
 800d7de:	f000 f9a7 	bl	800db30 <__malloc_unlock>
 800d7e2:	2400      	movs	r4, #0
 800d7e4:	e738      	b.n	800d658 <_malloc_r+0x190>
 800d7e6:	1962      	adds	r2, r4, r5
 800d7e8:	f043 0301 	orr.w	r3, r3, #1
 800d7ec:	f045 0501 	orr.w	r5, r5, #1
 800d7f0:	6065      	str	r5, [r4, #4]
 800d7f2:	4630      	mov	r0, r6
 800d7f4:	60ba      	str	r2, [r7, #8]
 800d7f6:	6053      	str	r3, [r2, #4]
 800d7f8:	f000 f99a 	bl	800db30 <__malloc_unlock>
 800d7fc:	3408      	adds	r4, #8
 800d7fe:	4620      	mov	r0, r4
 800d800:	b003      	add	sp, #12
 800d802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d806:	2b14      	cmp	r3, #20
 800d808:	d971      	bls.n	800d8ee <_malloc_r+0x426>
 800d80a:	2b54      	cmp	r3, #84	; 0x54
 800d80c:	f200 80a4 	bhi.w	800d958 <_malloc_r+0x490>
 800d810:	0b28      	lsrs	r0, r5, #12
 800d812:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
 800d816:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800d81a:	306e      	adds	r0, #110	; 0x6e
 800d81c:	e676      	b.n	800d50c <_malloc_r+0x44>
 800d81e:	bf00      	nop
 800d820:	200005d0 	.word	0x200005d0
 800d824:	20001a08 	.word	0x20001a08
 800d828:	20001a0c 	.word	0x20001a0c
 800d82c:	20001a04 	.word	0x20001a04
 800d830:	20001a00 	.word	0x20001a00
 800d834:	200009dc 	.word	0x200009dc
 800d838:	0a5a      	lsrs	r2, r3, #9
 800d83a:	2a04      	cmp	r2, #4
 800d83c:	d95e      	bls.n	800d8fc <_malloc_r+0x434>
 800d83e:	2a14      	cmp	r2, #20
 800d840:	f200 80b3 	bhi.w	800d9aa <_malloc_r+0x4e2>
 800d844:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 800d848:	0049      	lsls	r1, r1, #1
 800d84a:	325b      	adds	r2, #91	; 0x5b
 800d84c:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
 800d850:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800d854:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 800da34 <_malloc_r+0x56c>
 800d858:	f1ac 0c08 	sub.w	ip, ip, #8
 800d85c:	458c      	cmp	ip, r1
 800d85e:	f000 8088 	beq.w	800d972 <_malloc_r+0x4aa>
 800d862:	684a      	ldr	r2, [r1, #4]
 800d864:	f022 0203 	bic.w	r2, r2, #3
 800d868:	4293      	cmp	r3, r2
 800d86a:	d202      	bcs.n	800d872 <_malloc_r+0x3aa>
 800d86c:	6889      	ldr	r1, [r1, #8]
 800d86e:	458c      	cmp	ip, r1
 800d870:	d1f7      	bne.n	800d862 <_malloc_r+0x39a>
 800d872:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800d876:	687a      	ldr	r2, [r7, #4]
 800d878:	f8c4 c00c 	str.w	ip, [r4, #12]
 800d87c:	60a1      	str	r1, [r4, #8]
 800d87e:	f8cc 4008 	str.w	r4, [ip, #8]
 800d882:	60cc      	str	r4, [r1, #12]
 800d884:	e688      	b.n	800d598 <_malloc_r+0xd0>
 800d886:	1963      	adds	r3, r4, r5
 800d888:	f042 0701 	orr.w	r7, r2, #1
 800d88c:	f045 0501 	orr.w	r5, r5, #1
 800d890:	6065      	str	r5, [r4, #4]
 800d892:	4630      	mov	r0, r6
 800d894:	614b      	str	r3, [r1, #20]
 800d896:	610b      	str	r3, [r1, #16]
 800d898:	f8c3 e00c 	str.w	lr, [r3, #12]
 800d89c:	f8c3 e008 	str.w	lr, [r3, #8]
 800d8a0:	605f      	str	r7, [r3, #4]
 800d8a2:	509a      	str	r2, [r3, r2]
 800d8a4:	3408      	adds	r4, #8
 800d8a6:	f000 f943 	bl	800db30 <__malloc_unlock>
 800d8aa:	e6d5      	b.n	800d658 <_malloc_r+0x190>
 800d8ac:	684a      	ldr	r2, [r1, #4]
 800d8ae:	e673      	b.n	800d598 <_malloc_r+0xd0>
 800d8b0:	f108 0801 	add.w	r8, r8, #1
 800d8b4:	f018 0f03 	tst.w	r8, #3
 800d8b8:	f10c 0c08 	add.w	ip, ip, #8
 800d8bc:	f47f ae7f 	bne.w	800d5be <_malloc_r+0xf6>
 800d8c0:	e030      	b.n	800d924 <_malloc_r+0x45c>
 800d8c2:	68dc      	ldr	r4, [r3, #12]
 800d8c4:	42a3      	cmp	r3, r4
 800d8c6:	bf08      	it	eq
 800d8c8:	3002      	addeq	r0, #2
 800d8ca:	f43f ae35 	beq.w	800d538 <_malloc_r+0x70>
 800d8ce:	e6b3      	b.n	800d638 <_malloc_r+0x170>
 800d8d0:	440b      	add	r3, r1
 800d8d2:	460c      	mov	r4, r1
 800d8d4:	685a      	ldr	r2, [r3, #4]
 800d8d6:	68c9      	ldr	r1, [r1, #12]
 800d8d8:	f854 5f08 	ldr.w	r5, [r4, #8]!
 800d8dc:	f042 0201 	orr.w	r2, r2, #1
 800d8e0:	605a      	str	r2, [r3, #4]
 800d8e2:	4630      	mov	r0, r6
 800d8e4:	60e9      	str	r1, [r5, #12]
 800d8e6:	608d      	str	r5, [r1, #8]
 800d8e8:	f000 f922 	bl	800db30 <__malloc_unlock>
 800d8ec:	e6b4      	b.n	800d658 <_malloc_r+0x190>
 800d8ee:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
 800d8f2:	f103 005b 	add.w	r0, r3, #91	; 0x5b
 800d8f6:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800d8fa:	e607      	b.n	800d50c <_malloc_r+0x44>
 800d8fc:	099a      	lsrs	r2, r3, #6
 800d8fe:	f102 0139 	add.w	r1, r2, #57	; 0x39
 800d902:	0049      	lsls	r1, r1, #1
 800d904:	3238      	adds	r2, #56	; 0x38
 800d906:	e7a1      	b.n	800d84c <_malloc_r+0x384>
 800d908:	42bc      	cmp	r4, r7
 800d90a:	4b4a      	ldr	r3, [pc, #296]	; (800da34 <_malloc_r+0x56c>)
 800d90c:	f43f af00 	beq.w	800d710 <_malloc_r+0x248>
 800d910:	689c      	ldr	r4, [r3, #8]
 800d912:	6862      	ldr	r2, [r4, #4]
 800d914:	f022 0203 	bic.w	r2, r2, #3
 800d918:	e75a      	b.n	800d7d0 <_malloc_r+0x308>
 800d91a:	f859 3908 	ldr.w	r3, [r9], #-8
 800d91e:	4599      	cmp	r9, r3
 800d920:	f040 8082 	bne.w	800da28 <_malloc_r+0x560>
 800d924:	f010 0f03 	tst.w	r0, #3
 800d928:	f100 30ff 	add.w	r0, r0, #4294967295
 800d92c:	d1f5      	bne.n	800d91a <_malloc_r+0x452>
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	ea23 0304 	bic.w	r3, r3, r4
 800d934:	607b      	str	r3, [r7, #4]
 800d936:	0064      	lsls	r4, r4, #1
 800d938:	429c      	cmp	r4, r3
 800d93a:	f63f aebd 	bhi.w	800d6b8 <_malloc_r+0x1f0>
 800d93e:	2c00      	cmp	r4, #0
 800d940:	f43f aeba 	beq.w	800d6b8 <_malloc_r+0x1f0>
 800d944:	421c      	tst	r4, r3
 800d946:	4640      	mov	r0, r8
 800d948:	f47f ae35 	bne.w	800d5b6 <_malloc_r+0xee>
 800d94c:	0064      	lsls	r4, r4, #1
 800d94e:	421c      	tst	r4, r3
 800d950:	f100 0004 	add.w	r0, r0, #4
 800d954:	d0fa      	beq.n	800d94c <_malloc_r+0x484>
 800d956:	e62e      	b.n	800d5b6 <_malloc_r+0xee>
 800d958:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800d95c:	d818      	bhi.n	800d990 <_malloc_r+0x4c8>
 800d95e:	0be8      	lsrs	r0, r5, #15
 800d960:	f100 0e78 	add.w	lr, r0, #120	; 0x78
 800d964:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800d968:	3077      	adds	r0, #119	; 0x77
 800d96a:	e5cf      	b.n	800d50c <_malloc_r+0x44>
 800d96c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d970:	e6eb      	b.n	800d74a <_malloc_r+0x282>
 800d972:	2101      	movs	r1, #1
 800d974:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d978:	1092      	asrs	r2, r2, #2
 800d97a:	fa01 f202 	lsl.w	r2, r1, r2
 800d97e:	431a      	orrs	r2, r3
 800d980:	f8c8 2004 	str.w	r2, [r8, #4]
 800d984:	4661      	mov	r1, ip
 800d986:	e777      	b.n	800d878 <_malloc_r+0x3b0>
 800d988:	2301      	movs	r3, #1
 800d98a:	f8cb 3004 	str.w	r3, [fp, #4]
 800d98e:	e725      	b.n	800d7dc <_malloc_r+0x314>
 800d990:	f240 5254 	movw	r2, #1364	; 0x554
 800d994:	4293      	cmp	r3, r2
 800d996:	d820      	bhi.n	800d9da <_malloc_r+0x512>
 800d998:	0ca8      	lsrs	r0, r5, #18
 800d99a:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
 800d99e:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800d9a2:	307c      	adds	r0, #124	; 0x7c
 800d9a4:	e5b2      	b.n	800d50c <_malloc_r+0x44>
 800d9a6:	3210      	adds	r2, #16
 800d9a8:	e6a4      	b.n	800d6f4 <_malloc_r+0x22c>
 800d9aa:	2a54      	cmp	r2, #84	; 0x54
 800d9ac:	d826      	bhi.n	800d9fc <_malloc_r+0x534>
 800d9ae:	0b1a      	lsrs	r2, r3, #12
 800d9b0:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 800d9b4:	0049      	lsls	r1, r1, #1
 800d9b6:	326e      	adds	r2, #110	; 0x6e
 800d9b8:	e748      	b.n	800d84c <_malloc_r+0x384>
 800d9ba:	68bc      	ldr	r4, [r7, #8]
 800d9bc:	6862      	ldr	r2, [r4, #4]
 800d9be:	f022 0203 	bic.w	r2, r2, #3
 800d9c2:	e705      	b.n	800d7d0 <_malloc_r+0x308>
 800d9c4:	f3ca 000b 	ubfx	r0, sl, #0, #12
 800d9c8:	2800      	cmp	r0, #0
 800d9ca:	f47f aea8 	bne.w	800d71e <_malloc_r+0x256>
 800d9ce:	4442      	add	r2, r8
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	f042 0201 	orr.w	r2, r2, #1
 800d9d6:	605a      	str	r2, [r3, #4]
 800d9d8:	e6ec      	b.n	800d7b4 <_malloc_r+0x2ec>
 800d9da:	23fe      	movs	r3, #254	; 0xfe
 800d9dc:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
 800d9e0:	207e      	movs	r0, #126	; 0x7e
 800d9e2:	e593      	b.n	800d50c <_malloc_r+0x44>
 800d9e4:	2201      	movs	r2, #1
 800d9e6:	f04f 0900 	mov.w	r9, #0
 800d9ea:	e6c1      	b.n	800d770 <_malloc_r+0x2a8>
 800d9ec:	f104 0108 	add.w	r1, r4, #8
 800d9f0:	4630      	mov	r0, r6
 800d9f2:	f7ff fa41 	bl	800ce78 <_free_r>
 800d9f6:	f8d9 1000 	ldr.w	r1, [r9]
 800d9fa:	e6db      	b.n	800d7b4 <_malloc_r+0x2ec>
 800d9fc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800da00:	d805      	bhi.n	800da0e <_malloc_r+0x546>
 800da02:	0bda      	lsrs	r2, r3, #15
 800da04:	f102 0178 	add.w	r1, r2, #120	; 0x78
 800da08:	0049      	lsls	r1, r1, #1
 800da0a:	3277      	adds	r2, #119	; 0x77
 800da0c:	e71e      	b.n	800d84c <_malloc_r+0x384>
 800da0e:	f240 5154 	movw	r1, #1364	; 0x554
 800da12:	428a      	cmp	r2, r1
 800da14:	d805      	bhi.n	800da22 <_malloc_r+0x55a>
 800da16:	0c9a      	lsrs	r2, r3, #18
 800da18:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 800da1c:	0049      	lsls	r1, r1, #1
 800da1e:	327c      	adds	r2, #124	; 0x7c
 800da20:	e714      	b.n	800d84c <_malloc_r+0x384>
 800da22:	21fe      	movs	r1, #254	; 0xfe
 800da24:	227e      	movs	r2, #126	; 0x7e
 800da26:	e711      	b.n	800d84c <_malloc_r+0x384>
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	e784      	b.n	800d936 <_malloc_r+0x46e>
 800da2c:	08e8      	lsrs	r0, r5, #3
 800da2e:	1c43      	adds	r3, r0, #1
 800da30:	005b      	lsls	r3, r3, #1
 800da32:	e5f8      	b.n	800d626 <_malloc_r+0x15e>
 800da34:	200005d0 	.word	0x200005d0

0800da38 <__ascii_mbtowc>:
 800da38:	b082      	sub	sp, #8
 800da3a:	b149      	cbz	r1, 800da50 <__ascii_mbtowc+0x18>
 800da3c:	b15a      	cbz	r2, 800da56 <__ascii_mbtowc+0x1e>
 800da3e:	b16b      	cbz	r3, 800da5c <__ascii_mbtowc+0x24>
 800da40:	7813      	ldrb	r3, [r2, #0]
 800da42:	600b      	str	r3, [r1, #0]
 800da44:	7812      	ldrb	r2, [r2, #0]
 800da46:	1c10      	adds	r0, r2, #0
 800da48:	bf18      	it	ne
 800da4a:	2001      	movne	r0, #1
 800da4c:	b002      	add	sp, #8
 800da4e:	4770      	bx	lr
 800da50:	a901      	add	r1, sp, #4
 800da52:	2a00      	cmp	r2, #0
 800da54:	d1f3      	bne.n	800da3e <__ascii_mbtowc+0x6>
 800da56:	4610      	mov	r0, r2
 800da58:	b002      	add	sp, #8
 800da5a:	4770      	bx	lr
 800da5c:	f06f 0001 	mvn.w	r0, #1
 800da60:	e7f4      	b.n	800da4c <__ascii_mbtowc+0x14>
 800da62:	bf00      	nop

0800da64 <memmove>:
 800da64:	4288      	cmp	r0, r1
 800da66:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da68:	d90d      	bls.n	800da86 <memmove+0x22>
 800da6a:	188b      	adds	r3, r1, r2
 800da6c:	4298      	cmp	r0, r3
 800da6e:	d20a      	bcs.n	800da86 <memmove+0x22>
 800da70:	1881      	adds	r1, r0, r2
 800da72:	2a00      	cmp	r2, #0
 800da74:	d051      	beq.n	800db1a <memmove+0xb6>
 800da76:	1a9a      	subs	r2, r3, r2
 800da78:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800da7c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800da80:	4293      	cmp	r3, r2
 800da82:	d1f9      	bne.n	800da78 <memmove+0x14>
 800da84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da86:	2a0f      	cmp	r2, #15
 800da88:	d948      	bls.n	800db1c <memmove+0xb8>
 800da8a:	ea41 0300 	orr.w	r3, r1, r0
 800da8e:	079b      	lsls	r3, r3, #30
 800da90:	d146      	bne.n	800db20 <memmove+0xbc>
 800da92:	f100 0410 	add.w	r4, r0, #16
 800da96:	f101 0310 	add.w	r3, r1, #16
 800da9a:	4615      	mov	r5, r2
 800da9c:	f853 6c10 	ldr.w	r6, [r3, #-16]
 800daa0:	f844 6c10 	str.w	r6, [r4, #-16]
 800daa4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 800daa8:	f844 6c0c 	str.w	r6, [r4, #-12]
 800daac:	f853 6c08 	ldr.w	r6, [r3, #-8]
 800dab0:	f844 6c08 	str.w	r6, [r4, #-8]
 800dab4:	3d10      	subs	r5, #16
 800dab6:	f853 6c04 	ldr.w	r6, [r3, #-4]
 800daba:	f844 6c04 	str.w	r6, [r4, #-4]
 800dabe:	2d0f      	cmp	r5, #15
 800dac0:	f103 0310 	add.w	r3, r3, #16
 800dac4:	f104 0410 	add.w	r4, r4, #16
 800dac8:	d8e8      	bhi.n	800da9c <memmove+0x38>
 800daca:	f1a2 0310 	sub.w	r3, r2, #16
 800dace:	f023 030f 	bic.w	r3, r3, #15
 800dad2:	f002 0e0f 	and.w	lr, r2, #15
 800dad6:	3310      	adds	r3, #16
 800dad8:	f1be 0f03 	cmp.w	lr, #3
 800dadc:	4419      	add	r1, r3
 800dade:	4403      	add	r3, r0
 800dae0:	d921      	bls.n	800db26 <memmove+0xc2>
 800dae2:	1f1e      	subs	r6, r3, #4
 800dae4:	460d      	mov	r5, r1
 800dae6:	4674      	mov	r4, lr
 800dae8:	3c04      	subs	r4, #4
 800daea:	f855 7b04 	ldr.w	r7, [r5], #4
 800daee:	f846 7f04 	str.w	r7, [r6, #4]!
 800daf2:	2c03      	cmp	r4, #3
 800daf4:	d8f8      	bhi.n	800dae8 <memmove+0x84>
 800daf6:	f1ae 0404 	sub.w	r4, lr, #4
 800dafa:	f024 0403 	bic.w	r4, r4, #3
 800dafe:	3404      	adds	r4, #4
 800db00:	4423      	add	r3, r4
 800db02:	4421      	add	r1, r4
 800db04:	f002 0203 	and.w	r2, r2, #3
 800db08:	b162      	cbz	r2, 800db24 <memmove+0xc0>
 800db0a:	3b01      	subs	r3, #1
 800db0c:	440a      	add	r2, r1
 800db0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db12:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db16:	428a      	cmp	r2, r1
 800db18:	d1f9      	bne.n	800db0e <memmove+0xaa>
 800db1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db1c:	4603      	mov	r3, r0
 800db1e:	e7f3      	b.n	800db08 <memmove+0xa4>
 800db20:	4603      	mov	r3, r0
 800db22:	e7f2      	b.n	800db0a <memmove+0xa6>
 800db24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db26:	4672      	mov	r2, lr
 800db28:	e7ee      	b.n	800db08 <memmove+0xa4>
 800db2a:	bf00      	nop

0800db2c <__malloc_lock>:
 800db2c:	4770      	bx	lr
 800db2e:	bf00      	nop

0800db30 <__malloc_unlock>:
 800db30:	4770      	bx	lr
 800db32:	bf00      	nop

0800db34 <_Balloc>:
 800db34:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800db36:	b570      	push	{r4, r5, r6, lr}
 800db38:	4605      	mov	r5, r0
 800db3a:	460c      	mov	r4, r1
 800db3c:	b14b      	cbz	r3, 800db52 <_Balloc+0x1e>
 800db3e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800db42:	b180      	cbz	r0, 800db66 <_Balloc+0x32>
 800db44:	6802      	ldr	r2, [r0, #0]
 800db46:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800db4a:	2300      	movs	r3, #0
 800db4c:	6103      	str	r3, [r0, #16]
 800db4e:	60c3      	str	r3, [r0, #12]
 800db50:	bd70      	pop	{r4, r5, r6, pc}
 800db52:	2221      	movs	r2, #33	; 0x21
 800db54:	2104      	movs	r1, #4
 800db56:	f000 fe2b 	bl	800e7b0 <_calloc_r>
 800db5a:	64e8      	str	r0, [r5, #76]	; 0x4c
 800db5c:	4603      	mov	r3, r0
 800db5e:	2800      	cmp	r0, #0
 800db60:	d1ed      	bne.n	800db3e <_Balloc+0xa>
 800db62:	2000      	movs	r0, #0
 800db64:	bd70      	pop	{r4, r5, r6, pc}
 800db66:	2101      	movs	r1, #1
 800db68:	fa01 f604 	lsl.w	r6, r1, r4
 800db6c:	1d72      	adds	r2, r6, #5
 800db6e:	4628      	mov	r0, r5
 800db70:	0092      	lsls	r2, r2, #2
 800db72:	f000 fe1d 	bl	800e7b0 <_calloc_r>
 800db76:	2800      	cmp	r0, #0
 800db78:	d0f3      	beq.n	800db62 <_Balloc+0x2e>
 800db7a:	6044      	str	r4, [r0, #4]
 800db7c:	6086      	str	r6, [r0, #8]
 800db7e:	e7e4      	b.n	800db4a <_Balloc+0x16>

0800db80 <_Bfree>:
 800db80:	b131      	cbz	r1, 800db90 <_Bfree+0x10>
 800db82:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800db84:	684a      	ldr	r2, [r1, #4]
 800db86:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800db8a:	6008      	str	r0, [r1, #0]
 800db8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800db90:	4770      	bx	lr
 800db92:	bf00      	nop

0800db94 <__multadd>:
 800db94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db96:	690c      	ldr	r4, [r1, #16]
 800db98:	b083      	sub	sp, #12
 800db9a:	460d      	mov	r5, r1
 800db9c:	4606      	mov	r6, r0
 800db9e:	f101 0e14 	add.w	lr, r1, #20
 800dba2:	2700      	movs	r7, #0
 800dba4:	f8de 0000 	ldr.w	r0, [lr]
 800dba8:	b281      	uxth	r1, r0
 800dbaa:	fb02 3101 	mla	r1, r2, r1, r3
 800dbae:	0c0b      	lsrs	r3, r1, #16
 800dbb0:	0c00      	lsrs	r0, r0, #16
 800dbb2:	fb02 3300 	mla	r3, r2, r0, r3
 800dbb6:	b289      	uxth	r1, r1
 800dbb8:	3701      	adds	r7, #1
 800dbba:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dbbe:	42bc      	cmp	r4, r7
 800dbc0:	f84e 1b04 	str.w	r1, [lr], #4
 800dbc4:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800dbc8:	dcec      	bgt.n	800dba4 <__multadd+0x10>
 800dbca:	b13b      	cbz	r3, 800dbdc <__multadd+0x48>
 800dbcc:	68aa      	ldr	r2, [r5, #8]
 800dbce:	4294      	cmp	r4, r2
 800dbd0:	da07      	bge.n	800dbe2 <__multadd+0x4e>
 800dbd2:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 800dbd6:	3401      	adds	r4, #1
 800dbd8:	6153      	str	r3, [r2, #20]
 800dbda:	612c      	str	r4, [r5, #16]
 800dbdc:	4628      	mov	r0, r5
 800dbde:	b003      	add	sp, #12
 800dbe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbe2:	6869      	ldr	r1, [r5, #4]
 800dbe4:	9301      	str	r3, [sp, #4]
 800dbe6:	3101      	adds	r1, #1
 800dbe8:	4630      	mov	r0, r6
 800dbea:	f7ff ffa3 	bl	800db34 <_Balloc>
 800dbee:	692a      	ldr	r2, [r5, #16]
 800dbf0:	3202      	adds	r2, #2
 800dbf2:	f105 010c 	add.w	r1, r5, #12
 800dbf6:	4607      	mov	r7, r0
 800dbf8:	0092      	lsls	r2, r2, #2
 800dbfa:	300c      	adds	r0, #12
 800dbfc:	f7f3 f964 	bl	8000ec8 <memcpy>
 800dc00:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 800dc02:	6869      	ldr	r1, [r5, #4]
 800dc04:	9b01      	ldr	r3, [sp, #4]
 800dc06:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800dc0a:	6028      	str	r0, [r5, #0]
 800dc0c:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 800dc10:	463d      	mov	r5, r7
 800dc12:	e7de      	b.n	800dbd2 <__multadd+0x3e>

0800dc14 <__hi0bits>:
 800dc14:	0c03      	lsrs	r3, r0, #16
 800dc16:	041b      	lsls	r3, r3, #16
 800dc18:	b9b3      	cbnz	r3, 800dc48 <__hi0bits+0x34>
 800dc1a:	0400      	lsls	r0, r0, #16
 800dc1c:	2310      	movs	r3, #16
 800dc1e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800dc22:	bf04      	itt	eq
 800dc24:	0200      	lsleq	r0, r0, #8
 800dc26:	3308      	addeq	r3, #8
 800dc28:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800dc2c:	bf04      	itt	eq
 800dc2e:	0100      	lsleq	r0, r0, #4
 800dc30:	3304      	addeq	r3, #4
 800dc32:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800dc36:	bf04      	itt	eq
 800dc38:	0080      	lsleq	r0, r0, #2
 800dc3a:	3302      	addeq	r3, #2
 800dc3c:	2800      	cmp	r0, #0
 800dc3e:	db07      	blt.n	800dc50 <__hi0bits+0x3c>
 800dc40:	0042      	lsls	r2, r0, #1
 800dc42:	d403      	bmi.n	800dc4c <__hi0bits+0x38>
 800dc44:	2020      	movs	r0, #32
 800dc46:	4770      	bx	lr
 800dc48:	2300      	movs	r3, #0
 800dc4a:	e7e8      	b.n	800dc1e <__hi0bits+0xa>
 800dc4c:	1c58      	adds	r0, r3, #1
 800dc4e:	4770      	bx	lr
 800dc50:	4618      	mov	r0, r3
 800dc52:	4770      	bx	lr

0800dc54 <__lo0bits>:
 800dc54:	6803      	ldr	r3, [r0, #0]
 800dc56:	f013 0207 	ands.w	r2, r3, #7
 800dc5a:	d007      	beq.n	800dc6c <__lo0bits+0x18>
 800dc5c:	07d9      	lsls	r1, r3, #31
 800dc5e:	d420      	bmi.n	800dca2 <__lo0bits+0x4e>
 800dc60:	079a      	lsls	r2, r3, #30
 800dc62:	d420      	bmi.n	800dca6 <__lo0bits+0x52>
 800dc64:	089b      	lsrs	r3, r3, #2
 800dc66:	6003      	str	r3, [r0, #0]
 800dc68:	2002      	movs	r0, #2
 800dc6a:	4770      	bx	lr
 800dc6c:	b299      	uxth	r1, r3
 800dc6e:	b909      	cbnz	r1, 800dc74 <__lo0bits+0x20>
 800dc70:	0c1b      	lsrs	r3, r3, #16
 800dc72:	2210      	movs	r2, #16
 800dc74:	f013 0fff 	tst.w	r3, #255	; 0xff
 800dc78:	bf04      	itt	eq
 800dc7a:	0a1b      	lsreq	r3, r3, #8
 800dc7c:	3208      	addeq	r2, #8
 800dc7e:	0719      	lsls	r1, r3, #28
 800dc80:	bf04      	itt	eq
 800dc82:	091b      	lsreq	r3, r3, #4
 800dc84:	3204      	addeq	r2, #4
 800dc86:	0799      	lsls	r1, r3, #30
 800dc88:	bf04      	itt	eq
 800dc8a:	089b      	lsreq	r3, r3, #2
 800dc8c:	3202      	addeq	r2, #2
 800dc8e:	07d9      	lsls	r1, r3, #31
 800dc90:	d404      	bmi.n	800dc9c <__lo0bits+0x48>
 800dc92:	085b      	lsrs	r3, r3, #1
 800dc94:	d101      	bne.n	800dc9a <__lo0bits+0x46>
 800dc96:	2020      	movs	r0, #32
 800dc98:	4770      	bx	lr
 800dc9a:	3201      	adds	r2, #1
 800dc9c:	6003      	str	r3, [r0, #0]
 800dc9e:	4610      	mov	r0, r2
 800dca0:	4770      	bx	lr
 800dca2:	2000      	movs	r0, #0
 800dca4:	4770      	bx	lr
 800dca6:	085b      	lsrs	r3, r3, #1
 800dca8:	6003      	str	r3, [r0, #0]
 800dcaa:	2001      	movs	r0, #1
 800dcac:	4770      	bx	lr
 800dcae:	bf00      	nop

0800dcb0 <__i2b>:
 800dcb0:	b510      	push	{r4, lr}
 800dcb2:	460c      	mov	r4, r1
 800dcb4:	2101      	movs	r1, #1
 800dcb6:	f7ff ff3d 	bl	800db34 <_Balloc>
 800dcba:	2201      	movs	r2, #1
 800dcbc:	6144      	str	r4, [r0, #20]
 800dcbe:	6102      	str	r2, [r0, #16]
 800dcc0:	bd10      	pop	{r4, pc}
 800dcc2:	bf00      	nop

0800dcc4 <__multiply>:
 800dcc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcc8:	690d      	ldr	r5, [r1, #16]
 800dcca:	6917      	ldr	r7, [r2, #16]
 800dccc:	42bd      	cmp	r5, r7
 800dcce:	b083      	sub	sp, #12
 800dcd0:	460c      	mov	r4, r1
 800dcd2:	4616      	mov	r6, r2
 800dcd4:	da04      	bge.n	800dce0 <__multiply+0x1c>
 800dcd6:	462a      	mov	r2, r5
 800dcd8:	4634      	mov	r4, r6
 800dcda:	463d      	mov	r5, r7
 800dcdc:	460e      	mov	r6, r1
 800dcde:	4617      	mov	r7, r2
 800dce0:	68a3      	ldr	r3, [r4, #8]
 800dce2:	6861      	ldr	r1, [r4, #4]
 800dce4:	eb05 0807 	add.w	r8, r5, r7
 800dce8:	4598      	cmp	r8, r3
 800dcea:	bfc8      	it	gt
 800dcec:	3101      	addgt	r1, #1
 800dcee:	f7ff ff21 	bl	800db34 <_Balloc>
 800dcf2:	f100 0c14 	add.w	ip, r0, #20
 800dcf6:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 800dcfa:	45cc      	cmp	ip, r9
 800dcfc:	9000      	str	r0, [sp, #0]
 800dcfe:	d205      	bcs.n	800dd0c <__multiply+0x48>
 800dd00:	4663      	mov	r3, ip
 800dd02:	2100      	movs	r1, #0
 800dd04:	f843 1b04 	str.w	r1, [r3], #4
 800dd08:	4599      	cmp	r9, r3
 800dd0a:	d8fb      	bhi.n	800dd04 <__multiply+0x40>
 800dd0c:	f106 0214 	add.w	r2, r6, #20
 800dd10:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 800dd14:	f104 0314 	add.w	r3, r4, #20
 800dd18:	4552      	cmp	r2, sl
 800dd1a:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
 800dd1e:	d254      	bcs.n	800ddca <__multiply+0x106>
 800dd20:	f8cd 9004 	str.w	r9, [sp, #4]
 800dd24:	4699      	mov	r9, r3
 800dd26:	f852 3b04 	ldr.w	r3, [r2], #4
 800dd2a:	fa1f fb83 	uxth.w	fp, r3
 800dd2e:	f1bb 0f00 	cmp.w	fp, #0
 800dd32:	d020      	beq.n	800dd76 <__multiply+0xb2>
 800dd34:	2000      	movs	r0, #0
 800dd36:	464f      	mov	r7, r9
 800dd38:	4666      	mov	r6, ip
 800dd3a:	4605      	mov	r5, r0
 800dd3c:	e000      	b.n	800dd40 <__multiply+0x7c>
 800dd3e:	461e      	mov	r6, r3
 800dd40:	f857 4b04 	ldr.w	r4, [r7], #4
 800dd44:	6830      	ldr	r0, [r6, #0]
 800dd46:	b2a1      	uxth	r1, r4
 800dd48:	b283      	uxth	r3, r0
 800dd4a:	fb0b 3101 	mla	r1, fp, r1, r3
 800dd4e:	0c24      	lsrs	r4, r4, #16
 800dd50:	0c00      	lsrs	r0, r0, #16
 800dd52:	194b      	adds	r3, r1, r5
 800dd54:	fb0b 0004 	mla	r0, fp, r4, r0
 800dd58:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 800dd5c:	b299      	uxth	r1, r3
 800dd5e:	4633      	mov	r3, r6
 800dd60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800dd64:	45be      	cmp	lr, r7
 800dd66:	ea4f 4510 	mov.w	r5, r0, lsr #16
 800dd6a:	f843 1b04 	str.w	r1, [r3], #4
 800dd6e:	d8e6      	bhi.n	800dd3e <__multiply+0x7a>
 800dd70:	6075      	str	r5, [r6, #4]
 800dd72:	f852 3c04 	ldr.w	r3, [r2, #-4]
 800dd76:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 800dd7a:	d020      	beq.n	800ddbe <__multiply+0xfa>
 800dd7c:	f8dc 3000 	ldr.w	r3, [ip]
 800dd80:	4667      	mov	r7, ip
 800dd82:	4618      	mov	r0, r3
 800dd84:	464d      	mov	r5, r9
 800dd86:	2100      	movs	r1, #0
 800dd88:	e000      	b.n	800dd8c <__multiply+0xc8>
 800dd8a:	4637      	mov	r7, r6
 800dd8c:	882c      	ldrh	r4, [r5, #0]
 800dd8e:	0c00      	lsrs	r0, r0, #16
 800dd90:	fb0b 0004 	mla	r0, fp, r4, r0
 800dd94:	4401      	add	r1, r0
 800dd96:	b29c      	uxth	r4, r3
 800dd98:	463e      	mov	r6, r7
 800dd9a:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 800dd9e:	f846 3b04 	str.w	r3, [r6], #4
 800dda2:	6878      	ldr	r0, [r7, #4]
 800dda4:	f855 4b04 	ldr.w	r4, [r5], #4
 800dda8:	b283      	uxth	r3, r0
 800ddaa:	0c24      	lsrs	r4, r4, #16
 800ddac:	fb0b 3404 	mla	r4, fp, r4, r3
 800ddb0:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 800ddb4:	45ae      	cmp	lr, r5
 800ddb6:	ea4f 4113 	mov.w	r1, r3, lsr #16
 800ddba:	d8e6      	bhi.n	800dd8a <__multiply+0xc6>
 800ddbc:	607b      	str	r3, [r7, #4]
 800ddbe:	4592      	cmp	sl, r2
 800ddc0:	f10c 0c04 	add.w	ip, ip, #4
 800ddc4:	d8af      	bhi.n	800dd26 <__multiply+0x62>
 800ddc6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ddca:	f1b8 0f00 	cmp.w	r8, #0
 800ddce:	dd0b      	ble.n	800dde8 <__multiply+0x124>
 800ddd0:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800ddd4:	f1a9 0904 	sub.w	r9, r9, #4
 800ddd8:	b11b      	cbz	r3, 800dde2 <__multiply+0x11e>
 800ddda:	e005      	b.n	800dde8 <__multiply+0x124>
 800dddc:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 800dde0:	b913      	cbnz	r3, 800dde8 <__multiply+0x124>
 800dde2:	f1b8 0801 	subs.w	r8, r8, #1
 800dde6:	d1f9      	bne.n	800dddc <__multiply+0x118>
 800dde8:	9800      	ldr	r0, [sp, #0]
 800ddea:	f8c0 8010 	str.w	r8, [r0, #16]
 800ddee:	b003      	add	sp, #12
 800ddf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ddf4 <__pow5mult>:
 800ddf4:	f012 0303 	ands.w	r3, r2, #3
 800ddf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddfc:	4614      	mov	r4, r2
 800ddfe:	4607      	mov	r7, r0
 800de00:	d12e      	bne.n	800de60 <__pow5mult+0x6c>
 800de02:	460e      	mov	r6, r1
 800de04:	10a4      	asrs	r4, r4, #2
 800de06:	d01c      	beq.n	800de42 <__pow5mult+0x4e>
 800de08:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 800de0a:	b395      	cbz	r5, 800de72 <__pow5mult+0x7e>
 800de0c:	07e3      	lsls	r3, r4, #31
 800de0e:	f04f 0800 	mov.w	r8, #0
 800de12:	d406      	bmi.n	800de22 <__pow5mult+0x2e>
 800de14:	1064      	asrs	r4, r4, #1
 800de16:	d014      	beq.n	800de42 <__pow5mult+0x4e>
 800de18:	6828      	ldr	r0, [r5, #0]
 800de1a:	b1a8      	cbz	r0, 800de48 <__pow5mult+0x54>
 800de1c:	4605      	mov	r5, r0
 800de1e:	07e3      	lsls	r3, r4, #31
 800de20:	d5f8      	bpl.n	800de14 <__pow5mult+0x20>
 800de22:	462a      	mov	r2, r5
 800de24:	4631      	mov	r1, r6
 800de26:	4638      	mov	r0, r7
 800de28:	f7ff ff4c 	bl	800dcc4 <__multiply>
 800de2c:	b1b6      	cbz	r6, 800de5c <__pow5mult+0x68>
 800de2e:	6872      	ldr	r2, [r6, #4]
 800de30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de32:	1064      	asrs	r4, r4, #1
 800de34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800de38:	6031      	str	r1, [r6, #0]
 800de3a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 800de3e:	4606      	mov	r6, r0
 800de40:	d1ea      	bne.n	800de18 <__pow5mult+0x24>
 800de42:	4630      	mov	r0, r6
 800de44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de48:	462a      	mov	r2, r5
 800de4a:	4629      	mov	r1, r5
 800de4c:	4638      	mov	r0, r7
 800de4e:	f7ff ff39 	bl	800dcc4 <__multiply>
 800de52:	6028      	str	r0, [r5, #0]
 800de54:	f8c0 8000 	str.w	r8, [r0]
 800de58:	4605      	mov	r5, r0
 800de5a:	e7e0      	b.n	800de1e <__pow5mult+0x2a>
 800de5c:	4606      	mov	r6, r0
 800de5e:	e7d9      	b.n	800de14 <__pow5mult+0x20>
 800de60:	1e5a      	subs	r2, r3, #1
 800de62:	4d0b      	ldr	r5, [pc, #44]	; (800de90 <__pow5mult+0x9c>)
 800de64:	2300      	movs	r3, #0
 800de66:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800de6a:	f7ff fe93 	bl	800db94 <__multadd>
 800de6e:	4606      	mov	r6, r0
 800de70:	e7c8      	b.n	800de04 <__pow5mult+0x10>
 800de72:	2101      	movs	r1, #1
 800de74:	4638      	mov	r0, r7
 800de76:	f7ff fe5d 	bl	800db34 <_Balloc>
 800de7a:	f240 2171 	movw	r1, #625	; 0x271
 800de7e:	2201      	movs	r2, #1
 800de80:	2300      	movs	r3, #0
 800de82:	6141      	str	r1, [r0, #20]
 800de84:	6102      	str	r2, [r0, #16]
 800de86:	4605      	mov	r5, r0
 800de88:	64b8      	str	r0, [r7, #72]	; 0x48
 800de8a:	6003      	str	r3, [r0, #0]
 800de8c:	e7be      	b.n	800de0c <__pow5mult+0x18>
 800de8e:	bf00      	nop
 800de90:	0800f3a0 	.word	0x0800f3a0

0800de94 <__lshift>:
 800de94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de98:	4691      	mov	r9, r2
 800de9a:	690a      	ldr	r2, [r1, #16]
 800de9c:	688b      	ldr	r3, [r1, #8]
 800de9e:	ea4f 1469 	mov.w	r4, r9, asr #5
 800dea2:	eb04 0802 	add.w	r8, r4, r2
 800dea6:	f108 0501 	add.w	r5, r8, #1
 800deaa:	429d      	cmp	r5, r3
 800deac:	460e      	mov	r6, r1
 800deae:	4682      	mov	sl, r0
 800deb0:	6849      	ldr	r1, [r1, #4]
 800deb2:	dd04      	ble.n	800debe <__lshift+0x2a>
 800deb4:	005b      	lsls	r3, r3, #1
 800deb6:	429d      	cmp	r5, r3
 800deb8:	f101 0101 	add.w	r1, r1, #1
 800debc:	dcfa      	bgt.n	800deb4 <__lshift+0x20>
 800debe:	4650      	mov	r0, sl
 800dec0:	f7ff fe38 	bl	800db34 <_Balloc>
 800dec4:	2c00      	cmp	r4, #0
 800dec6:	f100 0214 	add.w	r2, r0, #20
 800deca:	dd38      	ble.n	800df3e <__lshift+0xaa>
 800decc:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 800ded0:	2100      	movs	r1, #0
 800ded2:	f842 1b04 	str.w	r1, [r2], #4
 800ded6:	4293      	cmp	r3, r2
 800ded8:	d1fb      	bne.n	800ded2 <__lshift+0x3e>
 800deda:	6934      	ldr	r4, [r6, #16]
 800dedc:	f106 0114 	add.w	r1, r6, #20
 800dee0:	f019 091f 	ands.w	r9, r9, #31
 800dee4:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
 800dee8:	d021      	beq.n	800df2e <__lshift+0x9a>
 800deea:	f1c9 0220 	rsb	r2, r9, #32
 800deee:	2400      	movs	r4, #0
 800def0:	680f      	ldr	r7, [r1, #0]
 800def2:	fa07 fc09 	lsl.w	ip, r7, r9
 800def6:	ea4c 0404 	orr.w	r4, ip, r4
 800defa:	469c      	mov	ip, r3
 800defc:	f843 4b04 	str.w	r4, [r3], #4
 800df00:	f851 4b04 	ldr.w	r4, [r1], #4
 800df04:	458e      	cmp	lr, r1
 800df06:	fa24 f402 	lsr.w	r4, r4, r2
 800df0a:	d8f1      	bhi.n	800def0 <__lshift+0x5c>
 800df0c:	f8cc 4004 	str.w	r4, [ip, #4]
 800df10:	b10c      	cbz	r4, 800df16 <__lshift+0x82>
 800df12:	f108 0502 	add.w	r5, r8, #2
 800df16:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 800df1a:	6872      	ldr	r2, [r6, #4]
 800df1c:	3d01      	subs	r5, #1
 800df1e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800df22:	6105      	str	r5, [r0, #16]
 800df24:	6031      	str	r1, [r6, #0]
 800df26:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 800df2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df2e:	3b04      	subs	r3, #4
 800df30:	f851 2b04 	ldr.w	r2, [r1], #4
 800df34:	f843 2f04 	str.w	r2, [r3, #4]!
 800df38:	458e      	cmp	lr, r1
 800df3a:	d8f9      	bhi.n	800df30 <__lshift+0x9c>
 800df3c:	e7eb      	b.n	800df16 <__lshift+0x82>
 800df3e:	4613      	mov	r3, r2
 800df40:	e7cb      	b.n	800deda <__lshift+0x46>
 800df42:	bf00      	nop

0800df44 <__mcmp>:
 800df44:	6902      	ldr	r2, [r0, #16]
 800df46:	690b      	ldr	r3, [r1, #16]
 800df48:	1ad2      	subs	r2, r2, r3
 800df4a:	d112      	bne.n	800df72 <__mcmp+0x2e>
 800df4c:	009b      	lsls	r3, r3, #2
 800df4e:	3014      	adds	r0, #20
 800df50:	3114      	adds	r1, #20
 800df52:	4419      	add	r1, r3
 800df54:	b410      	push	{r4}
 800df56:	4403      	add	r3, r0
 800df58:	e001      	b.n	800df5e <__mcmp+0x1a>
 800df5a:	4298      	cmp	r0, r3
 800df5c:	d20b      	bcs.n	800df76 <__mcmp+0x32>
 800df5e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800df62:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800df66:	4294      	cmp	r4, r2
 800df68:	d0f7      	beq.n	800df5a <__mcmp+0x16>
 800df6a:	d307      	bcc.n	800df7c <__mcmp+0x38>
 800df6c:	2001      	movs	r0, #1
 800df6e:	bc10      	pop	{r4}
 800df70:	4770      	bx	lr
 800df72:	4610      	mov	r0, r2
 800df74:	4770      	bx	lr
 800df76:	2000      	movs	r0, #0
 800df78:	bc10      	pop	{r4}
 800df7a:	4770      	bx	lr
 800df7c:	f04f 30ff 	mov.w	r0, #4294967295
 800df80:	e7f5      	b.n	800df6e <__mcmp+0x2a>
 800df82:	bf00      	nop

0800df84 <__mdiff>:
 800df84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df88:	690b      	ldr	r3, [r1, #16]
 800df8a:	460f      	mov	r7, r1
 800df8c:	6911      	ldr	r1, [r2, #16]
 800df8e:	1a5b      	subs	r3, r3, r1
 800df90:	2b00      	cmp	r3, #0
 800df92:	4690      	mov	r8, r2
 800df94:	d117      	bne.n	800dfc6 <__mdiff+0x42>
 800df96:	0089      	lsls	r1, r1, #2
 800df98:	f107 0214 	add.w	r2, r7, #20
 800df9c:	f108 0514 	add.w	r5, r8, #20
 800dfa0:	1853      	adds	r3, r2, r1
 800dfa2:	4429      	add	r1, r5
 800dfa4:	e001      	b.n	800dfaa <__mdiff+0x26>
 800dfa6:	429a      	cmp	r2, r3
 800dfa8:	d25e      	bcs.n	800e068 <__mdiff+0xe4>
 800dfaa:	f853 6d04 	ldr.w	r6, [r3, #-4]!
 800dfae:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dfb2:	42a6      	cmp	r6, r4
 800dfb4:	d0f7      	beq.n	800dfa6 <__mdiff+0x22>
 800dfb6:	d260      	bcs.n	800e07a <__mdiff+0xf6>
 800dfb8:	463b      	mov	r3, r7
 800dfba:	4614      	mov	r4, r2
 800dfbc:	4647      	mov	r7, r8
 800dfbe:	f04f 0901 	mov.w	r9, #1
 800dfc2:	4698      	mov	r8, r3
 800dfc4:	e006      	b.n	800dfd4 <__mdiff+0x50>
 800dfc6:	db5d      	blt.n	800e084 <__mdiff+0x100>
 800dfc8:	f107 0514 	add.w	r5, r7, #20
 800dfcc:	f102 0414 	add.w	r4, r2, #20
 800dfd0:	f04f 0900 	mov.w	r9, #0
 800dfd4:	6879      	ldr	r1, [r7, #4]
 800dfd6:	f7ff fdad 	bl	800db34 <_Balloc>
 800dfda:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800dfde:	693e      	ldr	r6, [r7, #16]
 800dfe0:	f8c0 900c 	str.w	r9, [r0, #12]
 800dfe4:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 800dfe8:	46a6      	mov	lr, r4
 800dfea:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 800dfee:	f100 0414 	add.w	r4, r0, #20
 800dff2:	2300      	movs	r3, #0
 800dff4:	f85e 1b04 	ldr.w	r1, [lr], #4
 800dff8:	f855 8b04 	ldr.w	r8, [r5], #4
 800dffc:	b28a      	uxth	r2, r1
 800dffe:	fa13 f388 	uxtah	r3, r3, r8
 800e002:	0c09      	lsrs	r1, r1, #16
 800e004:	1a9a      	subs	r2, r3, r2
 800e006:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
 800e00a:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800e00e:	b292      	uxth	r2, r2
 800e010:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e014:	45f4      	cmp	ip, lr
 800e016:	f844 2b04 	str.w	r2, [r4], #4
 800e01a:	ea4f 4323 	mov.w	r3, r3, asr #16
 800e01e:	d8e9      	bhi.n	800dff4 <__mdiff+0x70>
 800e020:	42af      	cmp	r7, r5
 800e022:	d917      	bls.n	800e054 <__mdiff+0xd0>
 800e024:	46a4      	mov	ip, r4
 800e026:	4629      	mov	r1, r5
 800e028:	f851 eb04 	ldr.w	lr, [r1], #4
 800e02c:	fa13 f28e 	uxtah	r2, r3, lr
 800e030:	1413      	asrs	r3, r2, #16
 800e032:	eb03 431e 	add.w	r3, r3, lr, lsr #16
 800e036:	b292      	uxth	r2, r2
 800e038:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e03c:	428f      	cmp	r7, r1
 800e03e:	f84c 2b04 	str.w	r2, [ip], #4
 800e042:	ea4f 4323 	mov.w	r3, r3, asr #16
 800e046:	d8ef      	bhi.n	800e028 <__mdiff+0xa4>
 800e048:	43ed      	mvns	r5, r5
 800e04a:	443d      	add	r5, r7
 800e04c:	f025 0503 	bic.w	r5, r5, #3
 800e050:	3504      	adds	r5, #4
 800e052:	442c      	add	r4, r5
 800e054:	3c04      	subs	r4, #4
 800e056:	b922      	cbnz	r2, 800e062 <__mdiff+0xde>
 800e058:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 800e05c:	3e01      	subs	r6, #1
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d0fa      	beq.n	800e058 <__mdiff+0xd4>
 800e062:	6106      	str	r6, [r0, #16]
 800e064:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e068:	2100      	movs	r1, #0
 800e06a:	f7ff fd63 	bl	800db34 <_Balloc>
 800e06e:	2201      	movs	r2, #1
 800e070:	2300      	movs	r3, #0
 800e072:	6102      	str	r2, [r0, #16]
 800e074:	6143      	str	r3, [r0, #20]
 800e076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e07a:	462c      	mov	r4, r5
 800e07c:	f04f 0900 	mov.w	r9, #0
 800e080:	4615      	mov	r5, r2
 800e082:	e7a7      	b.n	800dfd4 <__mdiff+0x50>
 800e084:	463b      	mov	r3, r7
 800e086:	f107 0414 	add.w	r4, r7, #20
 800e08a:	f108 0514 	add.w	r5, r8, #20
 800e08e:	4647      	mov	r7, r8
 800e090:	f04f 0901 	mov.w	r9, #1
 800e094:	4698      	mov	r8, r3
 800e096:	e79d      	b.n	800dfd4 <__mdiff+0x50>

0800e098 <__d2b>:
 800e098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e09c:	b082      	sub	sp, #8
 800e09e:	2101      	movs	r1, #1
 800e0a0:	461c      	mov	r4, r3
 800e0a2:	f3c3 570a 	ubfx	r7, r3, #20, #11
 800e0a6:	4615      	mov	r5, r2
 800e0a8:	9e08      	ldr	r6, [sp, #32]
 800e0aa:	f7ff fd43 	bl	800db34 <_Balloc>
 800e0ae:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e0b2:	4680      	mov	r8, r0
 800e0b4:	b10f      	cbz	r7, 800e0ba <__d2b+0x22>
 800e0b6:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800e0ba:	9401      	str	r4, [sp, #4]
 800e0bc:	b31d      	cbz	r5, 800e106 <__d2b+0x6e>
 800e0be:	a802      	add	r0, sp, #8
 800e0c0:	f840 5d08 	str.w	r5, [r0, #-8]!
 800e0c4:	f7ff fdc6 	bl	800dc54 <__lo0bits>
 800e0c8:	2800      	cmp	r0, #0
 800e0ca:	d134      	bne.n	800e136 <__d2b+0x9e>
 800e0cc:	e89d 000c 	ldmia.w	sp, {r2, r3}
 800e0d0:	f8c8 2014 	str.w	r2, [r8, #20]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	bf0c      	ite	eq
 800e0d8:	2101      	moveq	r1, #1
 800e0da:	2102      	movne	r1, #2
 800e0dc:	f8c8 3018 	str.w	r3, [r8, #24]
 800e0e0:	f8c8 1010 	str.w	r1, [r8, #16]
 800e0e4:	b9df      	cbnz	r7, 800e11e <__d2b+0x86>
 800e0e6:	eb08 0381 	add.w	r3, r8, r1, lsl #2
 800e0ea:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e0ee:	6030      	str	r0, [r6, #0]
 800e0f0:	6918      	ldr	r0, [r3, #16]
 800e0f2:	f7ff fd8f 	bl	800dc14 <__hi0bits>
 800e0f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0f8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e0fc:	6018      	str	r0, [r3, #0]
 800e0fe:	4640      	mov	r0, r8
 800e100:	b002      	add	sp, #8
 800e102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e106:	a801      	add	r0, sp, #4
 800e108:	f7ff fda4 	bl	800dc54 <__lo0bits>
 800e10c:	9b01      	ldr	r3, [sp, #4]
 800e10e:	f8c8 3014 	str.w	r3, [r8, #20]
 800e112:	2101      	movs	r1, #1
 800e114:	3020      	adds	r0, #32
 800e116:	f8c8 1010 	str.w	r1, [r8, #16]
 800e11a:	2f00      	cmp	r7, #0
 800e11c:	d0e3      	beq.n	800e0e6 <__d2b+0x4e>
 800e11e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e120:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
 800e124:	4407      	add	r7, r0
 800e126:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e12a:	6037      	str	r7, [r6, #0]
 800e12c:	6018      	str	r0, [r3, #0]
 800e12e:	4640      	mov	r0, r8
 800e130:	b002      	add	sp, #8
 800e132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e136:	e89d 000c 	ldmia.w	sp, {r2, r3}
 800e13a:	f1c0 0120 	rsb	r1, r0, #32
 800e13e:	fa03 f101 	lsl.w	r1, r3, r1
 800e142:	430a      	orrs	r2, r1
 800e144:	40c3      	lsrs	r3, r0
 800e146:	9301      	str	r3, [sp, #4]
 800e148:	f8c8 2014 	str.w	r2, [r8, #20]
 800e14c:	e7c2      	b.n	800e0d4 <__d2b+0x3c>
 800e14e:	bf00      	nop

0800e150 <_realloc_r>:
 800e150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e154:	4617      	mov	r7, r2
 800e156:	b083      	sub	sp, #12
 800e158:	2900      	cmp	r1, #0
 800e15a:	f000 80c1 	beq.w	800e2e0 <_realloc_r+0x190>
 800e15e:	460e      	mov	r6, r1
 800e160:	4681      	mov	r9, r0
 800e162:	f107 050b 	add.w	r5, r7, #11
 800e166:	f7ff fce1 	bl	800db2c <__malloc_lock>
 800e16a:	f856 ec04 	ldr.w	lr, [r6, #-4]
 800e16e:	2d16      	cmp	r5, #22
 800e170:	f02e 0403 	bic.w	r4, lr, #3
 800e174:	f1a6 0808 	sub.w	r8, r6, #8
 800e178:	d840      	bhi.n	800e1fc <_realloc_r+0xac>
 800e17a:	2210      	movs	r2, #16
 800e17c:	4615      	mov	r5, r2
 800e17e:	42af      	cmp	r7, r5
 800e180:	d841      	bhi.n	800e206 <_realloc_r+0xb6>
 800e182:	4294      	cmp	r4, r2
 800e184:	da75      	bge.n	800e272 <_realloc_r+0x122>
 800e186:	4bc9      	ldr	r3, [pc, #804]	; (800e4ac <_realloc_r+0x35c>)
 800e188:	6899      	ldr	r1, [r3, #8]
 800e18a:	eb08 0004 	add.w	r0, r8, r4
 800e18e:	4288      	cmp	r0, r1
 800e190:	6841      	ldr	r1, [r0, #4]
 800e192:	f000 80d9 	beq.w	800e348 <_realloc_r+0x1f8>
 800e196:	f021 0301 	bic.w	r3, r1, #1
 800e19a:	4403      	add	r3, r0
 800e19c:	685b      	ldr	r3, [r3, #4]
 800e19e:	07db      	lsls	r3, r3, #31
 800e1a0:	d57d      	bpl.n	800e29e <_realloc_r+0x14e>
 800e1a2:	f01e 0f01 	tst.w	lr, #1
 800e1a6:	d035      	beq.n	800e214 <_realloc_r+0xc4>
 800e1a8:	4639      	mov	r1, r7
 800e1aa:	4648      	mov	r0, r9
 800e1ac:	f7ff f98c 	bl	800d4c8 <_malloc_r>
 800e1b0:	4607      	mov	r7, r0
 800e1b2:	b1e0      	cbz	r0, 800e1ee <_realloc_r+0x9e>
 800e1b4:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e1b8:	f023 0301 	bic.w	r3, r3, #1
 800e1bc:	4443      	add	r3, r8
 800e1be:	f1a0 0208 	sub.w	r2, r0, #8
 800e1c2:	429a      	cmp	r2, r3
 800e1c4:	f000 8144 	beq.w	800e450 <_realloc_r+0x300>
 800e1c8:	1f22      	subs	r2, r4, #4
 800e1ca:	2a24      	cmp	r2, #36	; 0x24
 800e1cc:	f200 8131 	bhi.w	800e432 <_realloc_r+0x2e2>
 800e1d0:	2a13      	cmp	r2, #19
 800e1d2:	f200 8104 	bhi.w	800e3de <_realloc_r+0x28e>
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	4632      	mov	r2, r6
 800e1da:	6811      	ldr	r1, [r2, #0]
 800e1dc:	6019      	str	r1, [r3, #0]
 800e1de:	6851      	ldr	r1, [r2, #4]
 800e1e0:	6059      	str	r1, [r3, #4]
 800e1e2:	6892      	ldr	r2, [r2, #8]
 800e1e4:	609a      	str	r2, [r3, #8]
 800e1e6:	4631      	mov	r1, r6
 800e1e8:	4648      	mov	r0, r9
 800e1ea:	f7fe fe45 	bl	800ce78 <_free_r>
 800e1ee:	4648      	mov	r0, r9
 800e1f0:	f7ff fc9e 	bl	800db30 <__malloc_unlock>
 800e1f4:	4638      	mov	r0, r7
 800e1f6:	b003      	add	sp, #12
 800e1f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1fc:	f025 0507 	bic.w	r5, r5, #7
 800e200:	2d00      	cmp	r5, #0
 800e202:	462a      	mov	r2, r5
 800e204:	dabb      	bge.n	800e17e <_realloc_r+0x2e>
 800e206:	230c      	movs	r3, #12
 800e208:	2000      	movs	r0, #0
 800e20a:	f8c9 3000 	str.w	r3, [r9]
 800e20e:	b003      	add	sp, #12
 800e210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e214:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800e218:	ebc3 0a08 	rsb	sl, r3, r8
 800e21c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e220:	f023 0c03 	bic.w	ip, r3, #3
 800e224:	eb04 030c 	add.w	r3, r4, ip
 800e228:	4293      	cmp	r3, r2
 800e22a:	dbbd      	blt.n	800e1a8 <_realloc_r+0x58>
 800e22c:	4657      	mov	r7, sl
 800e22e:	f8da 100c 	ldr.w	r1, [sl, #12]
 800e232:	f857 0f08 	ldr.w	r0, [r7, #8]!
 800e236:	1f22      	subs	r2, r4, #4
 800e238:	2a24      	cmp	r2, #36	; 0x24
 800e23a:	60c1      	str	r1, [r0, #12]
 800e23c:	6088      	str	r0, [r1, #8]
 800e23e:	f200 8117 	bhi.w	800e470 <_realloc_r+0x320>
 800e242:	2a13      	cmp	r2, #19
 800e244:	f240 8112 	bls.w	800e46c <_realloc_r+0x31c>
 800e248:	6831      	ldr	r1, [r6, #0]
 800e24a:	f8ca 1008 	str.w	r1, [sl, #8]
 800e24e:	6871      	ldr	r1, [r6, #4]
 800e250:	f8ca 100c 	str.w	r1, [sl, #12]
 800e254:	2a1b      	cmp	r2, #27
 800e256:	f200 812b 	bhi.w	800e4b0 <_realloc_r+0x360>
 800e25a:	3608      	adds	r6, #8
 800e25c:	f10a 0210 	add.w	r2, sl, #16
 800e260:	6831      	ldr	r1, [r6, #0]
 800e262:	6011      	str	r1, [r2, #0]
 800e264:	6871      	ldr	r1, [r6, #4]
 800e266:	6051      	str	r1, [r2, #4]
 800e268:	68b1      	ldr	r1, [r6, #8]
 800e26a:	6091      	str	r1, [r2, #8]
 800e26c:	463e      	mov	r6, r7
 800e26e:	461c      	mov	r4, r3
 800e270:	46d0      	mov	r8, sl
 800e272:	1b63      	subs	r3, r4, r5
 800e274:	2b0f      	cmp	r3, #15
 800e276:	d81d      	bhi.n	800e2b4 <_realloc_r+0x164>
 800e278:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e27c:	f003 0301 	and.w	r3, r3, #1
 800e280:	4323      	orrs	r3, r4
 800e282:	4444      	add	r4, r8
 800e284:	f8c8 3004 	str.w	r3, [r8, #4]
 800e288:	6863      	ldr	r3, [r4, #4]
 800e28a:	f043 0301 	orr.w	r3, r3, #1
 800e28e:	6063      	str	r3, [r4, #4]
 800e290:	4648      	mov	r0, r9
 800e292:	f7ff fc4d 	bl	800db30 <__malloc_unlock>
 800e296:	4630      	mov	r0, r6
 800e298:	b003      	add	sp, #12
 800e29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e29e:	f021 0103 	bic.w	r1, r1, #3
 800e2a2:	4421      	add	r1, r4
 800e2a4:	4291      	cmp	r1, r2
 800e2a6:	db21      	blt.n	800e2ec <_realloc_r+0x19c>
 800e2a8:	68c3      	ldr	r3, [r0, #12]
 800e2aa:	6882      	ldr	r2, [r0, #8]
 800e2ac:	460c      	mov	r4, r1
 800e2ae:	60d3      	str	r3, [r2, #12]
 800e2b0:	609a      	str	r2, [r3, #8]
 800e2b2:	e7de      	b.n	800e272 <_realloc_r+0x122>
 800e2b4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800e2b8:	eb08 0105 	add.w	r1, r8, r5
 800e2bc:	f002 0201 	and.w	r2, r2, #1
 800e2c0:	4315      	orrs	r5, r2
 800e2c2:	f043 0201 	orr.w	r2, r3, #1
 800e2c6:	440b      	add	r3, r1
 800e2c8:	f8c8 5004 	str.w	r5, [r8, #4]
 800e2cc:	604a      	str	r2, [r1, #4]
 800e2ce:	685a      	ldr	r2, [r3, #4]
 800e2d0:	f042 0201 	orr.w	r2, r2, #1
 800e2d4:	3108      	adds	r1, #8
 800e2d6:	605a      	str	r2, [r3, #4]
 800e2d8:	4648      	mov	r0, r9
 800e2da:	f7fe fdcd 	bl	800ce78 <_free_r>
 800e2de:	e7d7      	b.n	800e290 <_realloc_r+0x140>
 800e2e0:	4611      	mov	r1, r2
 800e2e2:	b003      	add	sp, #12
 800e2e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2e8:	f7ff b8ee 	b.w	800d4c8 <_malloc_r>
 800e2ec:	f01e 0f01 	tst.w	lr, #1
 800e2f0:	f47f af5a 	bne.w	800e1a8 <_realloc_r+0x58>
 800e2f4:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800e2f8:	ebc3 0a08 	rsb	sl, r3, r8
 800e2fc:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e300:	f023 0c03 	bic.w	ip, r3, #3
 800e304:	eb01 0e0c 	add.w	lr, r1, ip
 800e308:	4596      	cmp	lr, r2
 800e30a:	db8b      	blt.n	800e224 <_realloc_r+0xd4>
 800e30c:	68c3      	ldr	r3, [r0, #12]
 800e30e:	6882      	ldr	r2, [r0, #8]
 800e310:	4657      	mov	r7, sl
 800e312:	60d3      	str	r3, [r2, #12]
 800e314:	609a      	str	r2, [r3, #8]
 800e316:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800e31a:	f8da 300c 	ldr.w	r3, [sl, #12]
 800e31e:	60cb      	str	r3, [r1, #12]
 800e320:	1f22      	subs	r2, r4, #4
 800e322:	2a24      	cmp	r2, #36	; 0x24
 800e324:	6099      	str	r1, [r3, #8]
 800e326:	f200 8099 	bhi.w	800e45c <_realloc_r+0x30c>
 800e32a:	2a13      	cmp	r2, #19
 800e32c:	d962      	bls.n	800e3f4 <_realloc_r+0x2a4>
 800e32e:	6833      	ldr	r3, [r6, #0]
 800e330:	f8ca 3008 	str.w	r3, [sl, #8]
 800e334:	6873      	ldr	r3, [r6, #4]
 800e336:	f8ca 300c 	str.w	r3, [sl, #12]
 800e33a:	2a1b      	cmp	r2, #27
 800e33c:	f200 80a0 	bhi.w	800e480 <_realloc_r+0x330>
 800e340:	3608      	adds	r6, #8
 800e342:	f10a 0310 	add.w	r3, sl, #16
 800e346:	e056      	b.n	800e3f6 <_realloc_r+0x2a6>
 800e348:	f021 0b03 	bic.w	fp, r1, #3
 800e34c:	44a3      	add	fp, r4
 800e34e:	f105 0010 	add.w	r0, r5, #16
 800e352:	4583      	cmp	fp, r0
 800e354:	da59      	bge.n	800e40a <_realloc_r+0x2ba>
 800e356:	f01e 0f01 	tst.w	lr, #1
 800e35a:	f47f af25 	bne.w	800e1a8 <_realloc_r+0x58>
 800e35e:	f856 1c08 	ldr.w	r1, [r6, #-8]
 800e362:	ebc1 0a08 	rsb	sl, r1, r8
 800e366:	f8da 1004 	ldr.w	r1, [sl, #4]
 800e36a:	f021 0c03 	bic.w	ip, r1, #3
 800e36e:	44e3      	add	fp, ip
 800e370:	4558      	cmp	r0, fp
 800e372:	f73f af57 	bgt.w	800e224 <_realloc_r+0xd4>
 800e376:	4657      	mov	r7, sl
 800e378:	f8da 100c 	ldr.w	r1, [sl, #12]
 800e37c:	f857 0f08 	ldr.w	r0, [r7, #8]!
 800e380:	1f22      	subs	r2, r4, #4
 800e382:	2a24      	cmp	r2, #36	; 0x24
 800e384:	60c1      	str	r1, [r0, #12]
 800e386:	6088      	str	r0, [r1, #8]
 800e388:	f200 80b4 	bhi.w	800e4f4 <_realloc_r+0x3a4>
 800e38c:	2a13      	cmp	r2, #19
 800e38e:	f240 80a5 	bls.w	800e4dc <_realloc_r+0x38c>
 800e392:	6831      	ldr	r1, [r6, #0]
 800e394:	f8ca 1008 	str.w	r1, [sl, #8]
 800e398:	6871      	ldr	r1, [r6, #4]
 800e39a:	f8ca 100c 	str.w	r1, [sl, #12]
 800e39e:	2a1b      	cmp	r2, #27
 800e3a0:	f200 80af 	bhi.w	800e502 <_realloc_r+0x3b2>
 800e3a4:	3608      	adds	r6, #8
 800e3a6:	f10a 0210 	add.w	r2, sl, #16
 800e3aa:	6831      	ldr	r1, [r6, #0]
 800e3ac:	6011      	str	r1, [r2, #0]
 800e3ae:	6871      	ldr	r1, [r6, #4]
 800e3b0:	6051      	str	r1, [r2, #4]
 800e3b2:	68b1      	ldr	r1, [r6, #8]
 800e3b4:	6091      	str	r1, [r2, #8]
 800e3b6:	eb0a 0105 	add.w	r1, sl, r5
 800e3ba:	ebc5 020b 	rsb	r2, r5, fp
 800e3be:	f042 0201 	orr.w	r2, r2, #1
 800e3c2:	6099      	str	r1, [r3, #8]
 800e3c4:	604a      	str	r2, [r1, #4]
 800e3c6:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e3ca:	f003 0301 	and.w	r3, r3, #1
 800e3ce:	431d      	orrs	r5, r3
 800e3d0:	4648      	mov	r0, r9
 800e3d2:	f8ca 5004 	str.w	r5, [sl, #4]
 800e3d6:	f7ff fbab 	bl	800db30 <__malloc_unlock>
 800e3da:	4638      	mov	r0, r7
 800e3dc:	e75c      	b.n	800e298 <_realloc_r+0x148>
 800e3de:	6833      	ldr	r3, [r6, #0]
 800e3e0:	6003      	str	r3, [r0, #0]
 800e3e2:	6873      	ldr	r3, [r6, #4]
 800e3e4:	6043      	str	r3, [r0, #4]
 800e3e6:	2a1b      	cmp	r2, #27
 800e3e8:	d827      	bhi.n	800e43a <_realloc_r+0x2ea>
 800e3ea:	f100 0308 	add.w	r3, r0, #8
 800e3ee:	f106 0208 	add.w	r2, r6, #8
 800e3f2:	e6f2      	b.n	800e1da <_realloc_r+0x8a>
 800e3f4:	463b      	mov	r3, r7
 800e3f6:	6832      	ldr	r2, [r6, #0]
 800e3f8:	601a      	str	r2, [r3, #0]
 800e3fa:	6872      	ldr	r2, [r6, #4]
 800e3fc:	605a      	str	r2, [r3, #4]
 800e3fe:	68b2      	ldr	r2, [r6, #8]
 800e400:	609a      	str	r2, [r3, #8]
 800e402:	463e      	mov	r6, r7
 800e404:	4674      	mov	r4, lr
 800e406:	46d0      	mov	r8, sl
 800e408:	e733      	b.n	800e272 <_realloc_r+0x122>
 800e40a:	eb08 0105 	add.w	r1, r8, r5
 800e40e:	ebc5 0b0b 	rsb	fp, r5, fp
 800e412:	f04b 0201 	orr.w	r2, fp, #1
 800e416:	6099      	str	r1, [r3, #8]
 800e418:	604a      	str	r2, [r1, #4]
 800e41a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e41e:	f003 0301 	and.w	r3, r3, #1
 800e422:	431d      	orrs	r5, r3
 800e424:	4648      	mov	r0, r9
 800e426:	f846 5c04 	str.w	r5, [r6, #-4]
 800e42a:	f7ff fb81 	bl	800db30 <__malloc_unlock>
 800e42e:	4630      	mov	r0, r6
 800e430:	e732      	b.n	800e298 <_realloc_r+0x148>
 800e432:	4631      	mov	r1, r6
 800e434:	f7ff fb16 	bl	800da64 <memmove>
 800e438:	e6d5      	b.n	800e1e6 <_realloc_r+0x96>
 800e43a:	68b3      	ldr	r3, [r6, #8]
 800e43c:	6083      	str	r3, [r0, #8]
 800e43e:	68f3      	ldr	r3, [r6, #12]
 800e440:	60c3      	str	r3, [r0, #12]
 800e442:	2a24      	cmp	r2, #36	; 0x24
 800e444:	d028      	beq.n	800e498 <_realloc_r+0x348>
 800e446:	f100 0310 	add.w	r3, r0, #16
 800e44a:	f106 0210 	add.w	r2, r6, #16
 800e44e:	e6c4      	b.n	800e1da <_realloc_r+0x8a>
 800e450:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800e454:	f023 0303 	bic.w	r3, r3, #3
 800e458:	441c      	add	r4, r3
 800e45a:	e70a      	b.n	800e272 <_realloc_r+0x122>
 800e45c:	4631      	mov	r1, r6
 800e45e:	4638      	mov	r0, r7
 800e460:	4674      	mov	r4, lr
 800e462:	46d0      	mov	r8, sl
 800e464:	f7ff fafe 	bl	800da64 <memmove>
 800e468:	463e      	mov	r6, r7
 800e46a:	e702      	b.n	800e272 <_realloc_r+0x122>
 800e46c:	463a      	mov	r2, r7
 800e46e:	e6f7      	b.n	800e260 <_realloc_r+0x110>
 800e470:	4631      	mov	r1, r6
 800e472:	4638      	mov	r0, r7
 800e474:	461c      	mov	r4, r3
 800e476:	46d0      	mov	r8, sl
 800e478:	f7ff faf4 	bl	800da64 <memmove>
 800e47c:	463e      	mov	r6, r7
 800e47e:	e6f8      	b.n	800e272 <_realloc_r+0x122>
 800e480:	68b3      	ldr	r3, [r6, #8]
 800e482:	f8ca 3010 	str.w	r3, [sl, #16]
 800e486:	68f3      	ldr	r3, [r6, #12]
 800e488:	f8ca 3014 	str.w	r3, [sl, #20]
 800e48c:	2a24      	cmp	r2, #36	; 0x24
 800e48e:	d01b      	beq.n	800e4c8 <_realloc_r+0x378>
 800e490:	3610      	adds	r6, #16
 800e492:	f10a 0318 	add.w	r3, sl, #24
 800e496:	e7ae      	b.n	800e3f6 <_realloc_r+0x2a6>
 800e498:	6933      	ldr	r3, [r6, #16]
 800e49a:	6103      	str	r3, [r0, #16]
 800e49c:	6973      	ldr	r3, [r6, #20]
 800e49e:	6143      	str	r3, [r0, #20]
 800e4a0:	f106 0218 	add.w	r2, r6, #24
 800e4a4:	f100 0318 	add.w	r3, r0, #24
 800e4a8:	e697      	b.n	800e1da <_realloc_r+0x8a>
 800e4aa:	bf00      	nop
 800e4ac:	200005d0 	.word	0x200005d0
 800e4b0:	68b1      	ldr	r1, [r6, #8]
 800e4b2:	f8ca 1010 	str.w	r1, [sl, #16]
 800e4b6:	68f1      	ldr	r1, [r6, #12]
 800e4b8:	f8ca 1014 	str.w	r1, [sl, #20]
 800e4bc:	2a24      	cmp	r2, #36	; 0x24
 800e4be:	d00f      	beq.n	800e4e0 <_realloc_r+0x390>
 800e4c0:	3610      	adds	r6, #16
 800e4c2:	f10a 0218 	add.w	r2, sl, #24
 800e4c6:	e6cb      	b.n	800e260 <_realloc_r+0x110>
 800e4c8:	6933      	ldr	r3, [r6, #16]
 800e4ca:	f8ca 3018 	str.w	r3, [sl, #24]
 800e4ce:	6973      	ldr	r3, [r6, #20]
 800e4d0:	f8ca 301c 	str.w	r3, [sl, #28]
 800e4d4:	3618      	adds	r6, #24
 800e4d6:	f10a 0320 	add.w	r3, sl, #32
 800e4da:	e78c      	b.n	800e3f6 <_realloc_r+0x2a6>
 800e4dc:	463a      	mov	r2, r7
 800e4de:	e764      	b.n	800e3aa <_realloc_r+0x25a>
 800e4e0:	6932      	ldr	r2, [r6, #16]
 800e4e2:	f8ca 2018 	str.w	r2, [sl, #24]
 800e4e6:	6972      	ldr	r2, [r6, #20]
 800e4e8:	f8ca 201c 	str.w	r2, [sl, #28]
 800e4ec:	3618      	adds	r6, #24
 800e4ee:	f10a 0220 	add.w	r2, sl, #32
 800e4f2:	e6b5      	b.n	800e260 <_realloc_r+0x110>
 800e4f4:	4631      	mov	r1, r6
 800e4f6:	4638      	mov	r0, r7
 800e4f8:	9301      	str	r3, [sp, #4]
 800e4fa:	f7ff fab3 	bl	800da64 <memmove>
 800e4fe:	9b01      	ldr	r3, [sp, #4]
 800e500:	e759      	b.n	800e3b6 <_realloc_r+0x266>
 800e502:	68b1      	ldr	r1, [r6, #8]
 800e504:	f8ca 1010 	str.w	r1, [sl, #16]
 800e508:	68f1      	ldr	r1, [r6, #12]
 800e50a:	f8ca 1014 	str.w	r1, [sl, #20]
 800e50e:	2a24      	cmp	r2, #36	; 0x24
 800e510:	d003      	beq.n	800e51a <_realloc_r+0x3ca>
 800e512:	3610      	adds	r6, #16
 800e514:	f10a 0218 	add.w	r2, sl, #24
 800e518:	e747      	b.n	800e3aa <_realloc_r+0x25a>
 800e51a:	6932      	ldr	r2, [r6, #16]
 800e51c:	f8ca 2018 	str.w	r2, [sl, #24]
 800e520:	6972      	ldr	r2, [r6, #20]
 800e522:	f8ca 201c 	str.w	r2, [sl, #28]
 800e526:	3618      	adds	r6, #24
 800e528:	f10a 0220 	add.w	r2, sl, #32
 800e52c:	e73d      	b.n	800e3aa <_realloc_r+0x25a>
 800e52e:	bf00      	nop

0800e530 <_sbrk_r>:
 800e530:	b538      	push	{r3, r4, r5, lr}
 800e532:	4c07      	ldr	r4, [pc, #28]	; (800e550 <_sbrk_r+0x20>)
 800e534:	2300      	movs	r3, #0
 800e536:	4605      	mov	r5, r0
 800e538:	4608      	mov	r0, r1
 800e53a:	6023      	str	r3, [r4, #0]
 800e53c:	f7f9 fc10 	bl	8007d60 <_sbrk>
 800e540:	1c43      	adds	r3, r0, #1
 800e542:	d000      	beq.n	800e546 <_sbrk_r+0x16>
 800e544:	bd38      	pop	{r3, r4, r5, pc}
 800e546:	6823      	ldr	r3, [r4, #0]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d0fb      	beq.n	800e544 <_sbrk_r+0x14>
 800e54c:	602b      	str	r3, [r5, #0]
 800e54e:	bd38      	pop	{r3, r4, r5, pc}
 800e550:	200033a4 	.word	0x200033a4

0800e554 <__sread>:
 800e554:	b510      	push	{r4, lr}
 800e556:	460c      	mov	r4, r1
 800e558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e55c:	f000 fa46 	bl	800e9ec <_read_r>
 800e560:	2800      	cmp	r0, #0
 800e562:	db03      	blt.n	800e56c <__sread+0x18>
 800e564:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e566:	4403      	add	r3, r0
 800e568:	6523      	str	r3, [r4, #80]	; 0x50
 800e56a:	bd10      	pop	{r4, pc}
 800e56c:	89a3      	ldrh	r3, [r4, #12]
 800e56e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e572:	81a3      	strh	r3, [r4, #12]
 800e574:	bd10      	pop	{r4, pc}
 800e576:	bf00      	nop

0800e578 <__swrite>:
 800e578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e57c:	4616      	mov	r6, r2
 800e57e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e582:	461f      	mov	r7, r3
 800e584:	05d3      	lsls	r3, r2, #23
 800e586:	460c      	mov	r4, r1
 800e588:	4605      	mov	r5, r0
 800e58a:	d507      	bpl.n	800e59c <__swrite+0x24>
 800e58c:	2200      	movs	r2, #0
 800e58e:	2302      	movs	r3, #2
 800e590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e594:	f000 fa14 	bl	800e9c0 <_lseek_r>
 800e598:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e59c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e5a0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e5a4:	81a2      	strh	r2, [r4, #12]
 800e5a6:	463b      	mov	r3, r7
 800e5a8:	4632      	mov	r2, r6
 800e5aa:	4628      	mov	r0, r5
 800e5ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e5b0:	f000 b8e8 	b.w	800e784 <_write_r>

0800e5b4 <__sseek>:
 800e5b4:	b510      	push	{r4, lr}
 800e5b6:	460c      	mov	r4, r1
 800e5b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5bc:	f000 fa00 	bl	800e9c0 <_lseek_r>
 800e5c0:	89a3      	ldrh	r3, [r4, #12]
 800e5c2:	1c42      	adds	r2, r0, #1
 800e5c4:	bf0e      	itee	eq
 800e5c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e5ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e5ce:	6520      	strne	r0, [r4, #80]	; 0x50
 800e5d0:	81a3      	strh	r3, [r4, #12]
 800e5d2:	bd10      	pop	{r4, pc}

0800e5d4 <__sclose>:
 800e5d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5d8:	f000 b91a 	b.w	800e810 <_close_r>

0800e5dc <__ssprint_r>:
 800e5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5e0:	6893      	ldr	r3, [r2, #8]
 800e5e2:	b083      	sub	sp, #12
 800e5e4:	4690      	mov	r8, r2
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d072      	beq.n	800e6d0 <__ssprint_r+0xf4>
 800e5ea:	4683      	mov	fp, r0
 800e5ec:	f04f 0900 	mov.w	r9, #0
 800e5f0:	6816      	ldr	r6, [r2, #0]
 800e5f2:	6808      	ldr	r0, [r1, #0]
 800e5f4:	688b      	ldr	r3, [r1, #8]
 800e5f6:	460d      	mov	r5, r1
 800e5f8:	464c      	mov	r4, r9
 800e5fa:	2c00      	cmp	r4, #0
 800e5fc:	d045      	beq.n	800e68a <__ssprint_r+0xae>
 800e5fe:	429c      	cmp	r4, r3
 800e600:	461f      	mov	r7, r3
 800e602:	469a      	mov	sl, r3
 800e604:	d346      	bcc.n	800e694 <__ssprint_r+0xb8>
 800e606:	89ab      	ldrh	r3, [r5, #12]
 800e608:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800e60c:	d02d      	beq.n	800e66a <__ssprint_r+0x8e>
 800e60e:	696f      	ldr	r7, [r5, #20]
 800e610:	6929      	ldr	r1, [r5, #16]
 800e612:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800e616:	ebc1 0a00 	rsb	sl, r1, r0
 800e61a:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 800e61e:	1c60      	adds	r0, r4, #1
 800e620:	107f      	asrs	r7, r7, #1
 800e622:	4450      	add	r0, sl
 800e624:	42b8      	cmp	r0, r7
 800e626:	463a      	mov	r2, r7
 800e628:	bf84      	itt	hi
 800e62a:	4607      	movhi	r7, r0
 800e62c:	463a      	movhi	r2, r7
 800e62e:	055b      	lsls	r3, r3, #21
 800e630:	d533      	bpl.n	800e69a <__ssprint_r+0xbe>
 800e632:	4611      	mov	r1, r2
 800e634:	4658      	mov	r0, fp
 800e636:	f7fe ff47 	bl	800d4c8 <_malloc_r>
 800e63a:	2800      	cmp	r0, #0
 800e63c:	d037      	beq.n	800e6ae <__ssprint_r+0xd2>
 800e63e:	4652      	mov	r2, sl
 800e640:	6929      	ldr	r1, [r5, #16]
 800e642:	9001      	str	r0, [sp, #4]
 800e644:	f7f2 fc40 	bl	8000ec8 <memcpy>
 800e648:	89aa      	ldrh	r2, [r5, #12]
 800e64a:	9b01      	ldr	r3, [sp, #4]
 800e64c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800e650:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e654:	81aa      	strh	r2, [r5, #12]
 800e656:	ebca 0207 	rsb	r2, sl, r7
 800e65a:	eb03 000a 	add.w	r0, r3, sl
 800e65e:	616f      	str	r7, [r5, #20]
 800e660:	612b      	str	r3, [r5, #16]
 800e662:	6028      	str	r0, [r5, #0]
 800e664:	60aa      	str	r2, [r5, #8]
 800e666:	4627      	mov	r7, r4
 800e668:	46a2      	mov	sl, r4
 800e66a:	4652      	mov	r2, sl
 800e66c:	4649      	mov	r1, r9
 800e66e:	f7ff f9f9 	bl	800da64 <memmove>
 800e672:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800e676:	68ab      	ldr	r3, [r5, #8]
 800e678:	6828      	ldr	r0, [r5, #0]
 800e67a:	1bdb      	subs	r3, r3, r7
 800e67c:	4450      	add	r0, sl
 800e67e:	1b14      	subs	r4, r2, r4
 800e680:	60ab      	str	r3, [r5, #8]
 800e682:	6028      	str	r0, [r5, #0]
 800e684:	f8c8 4008 	str.w	r4, [r8, #8]
 800e688:	b314      	cbz	r4, 800e6d0 <__ssprint_r+0xf4>
 800e68a:	f8d6 9000 	ldr.w	r9, [r6]
 800e68e:	6874      	ldr	r4, [r6, #4]
 800e690:	3608      	adds	r6, #8
 800e692:	e7b2      	b.n	800e5fa <__ssprint_r+0x1e>
 800e694:	4627      	mov	r7, r4
 800e696:	46a2      	mov	sl, r4
 800e698:	e7e7      	b.n	800e66a <__ssprint_r+0x8e>
 800e69a:	4658      	mov	r0, fp
 800e69c:	f7ff fd58 	bl	800e150 <_realloc_r>
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	2800      	cmp	r0, #0
 800e6a4:	d1d7      	bne.n	800e656 <__ssprint_r+0x7a>
 800e6a6:	6929      	ldr	r1, [r5, #16]
 800e6a8:	4658      	mov	r0, fp
 800e6aa:	f7fe fbe5 	bl	800ce78 <_free_r>
 800e6ae:	230c      	movs	r3, #12
 800e6b0:	f8cb 3000 	str.w	r3, [fp]
 800e6b4:	89ab      	ldrh	r3, [r5, #12]
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6bc:	f04f 30ff 	mov.w	r0, #4294967295
 800e6c0:	81ab      	strh	r3, [r5, #12]
 800e6c2:	f8c8 2008 	str.w	r2, [r8, #8]
 800e6c6:	f8c8 2004 	str.w	r2, [r8, #4]
 800e6ca:	b003      	add	sp, #12
 800e6cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6d0:	2000      	movs	r0, #0
 800e6d2:	f8c8 0004 	str.w	r0, [r8, #4]
 800e6d6:	b003      	add	sp, #12
 800e6d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e6dc <__sprint_r.part.0>:
 800e6dc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800e6de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6e2:	049c      	lsls	r4, r3, #18
 800e6e4:	4692      	mov	sl, r2
 800e6e6:	d52c      	bpl.n	800e742 <__sprint_r.part.0+0x66>
 800e6e8:	6893      	ldr	r3, [r2, #8]
 800e6ea:	6812      	ldr	r2, [r2, #0]
 800e6ec:	b33b      	cbz	r3, 800e73e <__sprint_r.part.0+0x62>
 800e6ee:	460f      	mov	r7, r1
 800e6f0:	4680      	mov	r8, r0
 800e6f2:	f102 0908 	add.w	r9, r2, #8
 800e6f6:	e919 0060 	ldmdb	r9, {r5, r6}
 800e6fa:	08b6      	lsrs	r6, r6, #2
 800e6fc:	d017      	beq.n	800e72e <__sprint_r.part.0+0x52>
 800e6fe:	3d04      	subs	r5, #4
 800e700:	2400      	movs	r4, #0
 800e702:	e001      	b.n	800e708 <__sprint_r.part.0+0x2c>
 800e704:	42a6      	cmp	r6, r4
 800e706:	d010      	beq.n	800e72a <__sprint_r.part.0+0x4e>
 800e708:	463a      	mov	r2, r7
 800e70a:	f855 1f04 	ldr.w	r1, [r5, #4]!
 800e70e:	4640      	mov	r0, r8
 800e710:	f000 f91e 	bl	800e950 <_fputwc_r>
 800e714:	1c43      	adds	r3, r0, #1
 800e716:	f104 0401 	add.w	r4, r4, #1
 800e71a:	d1f3      	bne.n	800e704 <__sprint_r.part.0+0x28>
 800e71c:	2300      	movs	r3, #0
 800e71e:	f8ca 3008 	str.w	r3, [sl, #8]
 800e722:	f8ca 3004 	str.w	r3, [sl, #4]
 800e726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e72a:	f8da 3008 	ldr.w	r3, [sl, #8]
 800e72e:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
 800e732:	f8ca 3008 	str.w	r3, [sl, #8]
 800e736:	f109 0908 	add.w	r9, r9, #8
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d1db      	bne.n	800e6f6 <__sprint_r.part.0+0x1a>
 800e73e:	2000      	movs	r0, #0
 800e740:	e7ec      	b.n	800e71c <__sprint_r.part.0+0x40>
 800e742:	f7fe fc81 	bl	800d048 <__sfvwrite_r>
 800e746:	2300      	movs	r3, #0
 800e748:	f8ca 3008 	str.w	r3, [sl, #8]
 800e74c:	f8ca 3004 	str.w	r3, [sl, #4]
 800e750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e754 <__sprint_r>:
 800e754:	6893      	ldr	r3, [r2, #8]
 800e756:	b10b      	cbz	r3, 800e75c <__sprint_r+0x8>
 800e758:	f7ff bfc0 	b.w	800e6dc <__sprint_r.part.0>
 800e75c:	b410      	push	{r4}
 800e75e:	4618      	mov	r0, r3
 800e760:	6053      	str	r3, [r2, #4]
 800e762:	bc10      	pop	{r4}
 800e764:	4770      	bx	lr
 800e766:	bf00      	nop

0800e768 <__ascii_wctomb>:
 800e768:	b121      	cbz	r1, 800e774 <__ascii_wctomb+0xc>
 800e76a:	2aff      	cmp	r2, #255	; 0xff
 800e76c:	d804      	bhi.n	800e778 <__ascii_wctomb+0x10>
 800e76e:	700a      	strb	r2, [r1, #0]
 800e770:	2001      	movs	r0, #1
 800e772:	4770      	bx	lr
 800e774:	4608      	mov	r0, r1
 800e776:	4770      	bx	lr
 800e778:	238a      	movs	r3, #138	; 0x8a
 800e77a:	6003      	str	r3, [r0, #0]
 800e77c:	f04f 30ff 	mov.w	r0, #4294967295
 800e780:	4770      	bx	lr
 800e782:	bf00      	nop

0800e784 <_write_r>:
 800e784:	b570      	push	{r4, r5, r6, lr}
 800e786:	460d      	mov	r5, r1
 800e788:	4c08      	ldr	r4, [pc, #32]	; (800e7ac <_write_r+0x28>)
 800e78a:	4611      	mov	r1, r2
 800e78c:	4606      	mov	r6, r0
 800e78e:	461a      	mov	r2, r3
 800e790:	4628      	mov	r0, r5
 800e792:	2300      	movs	r3, #0
 800e794:	6023      	str	r3, [r4, #0]
 800e796:	f7f9 fa65 	bl	8007c64 <_write>
 800e79a:	1c43      	adds	r3, r0, #1
 800e79c:	d000      	beq.n	800e7a0 <_write_r+0x1c>
 800e79e:	bd70      	pop	{r4, r5, r6, pc}
 800e7a0:	6823      	ldr	r3, [r4, #0]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d0fb      	beq.n	800e79e <_write_r+0x1a>
 800e7a6:	6033      	str	r3, [r6, #0]
 800e7a8:	bd70      	pop	{r4, r5, r6, pc}
 800e7aa:	bf00      	nop
 800e7ac:	200033a4 	.word	0x200033a4

0800e7b0 <_calloc_r>:
 800e7b0:	b510      	push	{r4, lr}
 800e7b2:	fb02 f101 	mul.w	r1, r2, r1
 800e7b6:	f7fe fe87 	bl	800d4c8 <_malloc_r>
 800e7ba:	4604      	mov	r4, r0
 800e7bc:	b1d8      	cbz	r0, 800e7f6 <_calloc_r+0x46>
 800e7be:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800e7c2:	f022 0203 	bic.w	r2, r2, #3
 800e7c6:	3a04      	subs	r2, #4
 800e7c8:	2a24      	cmp	r2, #36	; 0x24
 800e7ca:	d818      	bhi.n	800e7fe <_calloc_r+0x4e>
 800e7cc:	2a13      	cmp	r2, #19
 800e7ce:	d914      	bls.n	800e7fa <_calloc_r+0x4a>
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	2a1b      	cmp	r2, #27
 800e7d4:	6003      	str	r3, [r0, #0]
 800e7d6:	6043      	str	r3, [r0, #4]
 800e7d8:	d916      	bls.n	800e808 <_calloc_r+0x58>
 800e7da:	2a24      	cmp	r2, #36	; 0x24
 800e7dc:	6083      	str	r3, [r0, #8]
 800e7de:	60c3      	str	r3, [r0, #12]
 800e7e0:	bf11      	iteee	ne
 800e7e2:	f100 0210 	addne.w	r2, r0, #16
 800e7e6:	6103      	streq	r3, [r0, #16]
 800e7e8:	6143      	streq	r3, [r0, #20]
 800e7ea:	f100 0218 	addeq.w	r2, r0, #24
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	6013      	str	r3, [r2, #0]
 800e7f2:	6053      	str	r3, [r2, #4]
 800e7f4:	6093      	str	r3, [r2, #8]
 800e7f6:	4620      	mov	r0, r4
 800e7f8:	bd10      	pop	{r4, pc}
 800e7fa:	4602      	mov	r2, r0
 800e7fc:	e7f7      	b.n	800e7ee <_calloc_r+0x3e>
 800e7fe:	2100      	movs	r1, #0
 800e800:	f7fa f900 	bl	8008a04 <memset>
 800e804:	4620      	mov	r0, r4
 800e806:	bd10      	pop	{r4, pc}
 800e808:	f100 0208 	add.w	r2, r0, #8
 800e80c:	e7ef      	b.n	800e7ee <_calloc_r+0x3e>
 800e80e:	bf00      	nop

0800e810 <_close_r>:
 800e810:	b538      	push	{r3, r4, r5, lr}
 800e812:	4c07      	ldr	r4, [pc, #28]	; (800e830 <_close_r+0x20>)
 800e814:	2300      	movs	r3, #0
 800e816:	4605      	mov	r5, r0
 800e818:	4608      	mov	r0, r1
 800e81a:	6023      	str	r3, [r4, #0]
 800e81c:	f7f9 fa86 	bl	8007d2c <_close>
 800e820:	1c43      	adds	r3, r0, #1
 800e822:	d000      	beq.n	800e826 <_close_r+0x16>
 800e824:	bd38      	pop	{r3, r4, r5, pc}
 800e826:	6823      	ldr	r3, [r4, #0]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d0fb      	beq.n	800e824 <_close_r+0x14>
 800e82c:	602b      	str	r3, [r5, #0]
 800e82e:	bd38      	pop	{r3, r4, r5, pc}
 800e830:	200033a4 	.word	0x200033a4

0800e834 <_fclose_r>:
 800e834:	2900      	cmp	r1, #0
 800e836:	d03d      	beq.n	800e8b4 <_fclose_r+0x80>
 800e838:	b570      	push	{r4, r5, r6, lr}
 800e83a:	4605      	mov	r5, r0
 800e83c:	460c      	mov	r4, r1
 800e83e:	b108      	cbz	r0, 800e844 <_fclose_r+0x10>
 800e840:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e842:	b37b      	cbz	r3, 800e8a4 <_fclose_r+0x70>
 800e844:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e848:	b90b      	cbnz	r3, 800e84e <_fclose_r+0x1a>
 800e84a:	2000      	movs	r0, #0
 800e84c:	bd70      	pop	{r4, r5, r6, pc}
 800e84e:	4621      	mov	r1, r4
 800e850:	4628      	mov	r0, r5
 800e852:	f7fe f981 	bl	800cb58 <__sflush_r>
 800e856:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e858:	4606      	mov	r6, r0
 800e85a:	b133      	cbz	r3, 800e86a <_fclose_r+0x36>
 800e85c:	69e1      	ldr	r1, [r4, #28]
 800e85e:	4628      	mov	r0, r5
 800e860:	4798      	blx	r3
 800e862:	2800      	cmp	r0, #0
 800e864:	bfb8      	it	lt
 800e866:	f04f 36ff 	movlt.w	r6, #4294967295
 800e86a:	89a3      	ldrh	r3, [r4, #12]
 800e86c:	061b      	lsls	r3, r3, #24
 800e86e:	d41c      	bmi.n	800e8aa <_fclose_r+0x76>
 800e870:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e872:	b141      	cbz	r1, 800e886 <_fclose_r+0x52>
 800e874:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800e878:	4299      	cmp	r1, r3
 800e87a:	d002      	beq.n	800e882 <_fclose_r+0x4e>
 800e87c:	4628      	mov	r0, r5
 800e87e:	f7fe fafb 	bl	800ce78 <_free_r>
 800e882:	2300      	movs	r3, #0
 800e884:	6323      	str	r3, [r4, #48]	; 0x30
 800e886:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e888:	b121      	cbz	r1, 800e894 <_fclose_r+0x60>
 800e88a:	4628      	mov	r0, r5
 800e88c:	f7fe faf4 	bl	800ce78 <_free_r>
 800e890:	2300      	movs	r3, #0
 800e892:	6463      	str	r3, [r4, #68]	; 0x44
 800e894:	f7fe fa9e 	bl	800cdd4 <__sfp_lock_acquire>
 800e898:	2300      	movs	r3, #0
 800e89a:	81a3      	strh	r3, [r4, #12]
 800e89c:	f7fe fa9c 	bl	800cdd8 <__sfp_lock_release>
 800e8a0:	4630      	mov	r0, r6
 800e8a2:	bd70      	pop	{r4, r5, r6, pc}
 800e8a4:	f7fe fa90 	bl	800cdc8 <__sinit>
 800e8a8:	e7cc      	b.n	800e844 <_fclose_r+0x10>
 800e8aa:	6921      	ldr	r1, [r4, #16]
 800e8ac:	4628      	mov	r0, r5
 800e8ae:	f7fe fae3 	bl	800ce78 <_free_r>
 800e8b2:	e7dd      	b.n	800e870 <_fclose_r+0x3c>
 800e8b4:	2000      	movs	r0, #0
 800e8b6:	4770      	bx	lr

0800e8b8 <__fputwc>:
 800e8b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8bc:	b082      	sub	sp, #8
 800e8be:	4680      	mov	r8, r0
 800e8c0:	4689      	mov	r9, r1
 800e8c2:	4614      	mov	r4, r2
 800e8c4:	f7fe fd6c 	bl	800d3a0 <__locale_mb_cur_max>
 800e8c8:	2801      	cmp	r0, #1
 800e8ca:	d033      	beq.n	800e934 <__fputwc+0x7c>
 800e8cc:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800e8d0:	464a      	mov	r2, r9
 800e8d2:	a901      	add	r1, sp, #4
 800e8d4:	4640      	mov	r0, r8
 800e8d6:	f000 f8f5 	bl	800eac4 <_wcrtomb_r>
 800e8da:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e8de:	4682      	mov	sl, r0
 800e8e0:	d021      	beq.n	800e926 <__fputwc+0x6e>
 800e8e2:	b388      	cbz	r0, 800e948 <__fputwc+0x90>
 800e8e4:	f89d 6004 	ldrb.w	r6, [sp, #4]
 800e8e8:	2500      	movs	r5, #0
 800e8ea:	e008      	b.n	800e8fe <__fputwc+0x46>
 800e8ec:	6823      	ldr	r3, [r4, #0]
 800e8ee:	1c5a      	adds	r2, r3, #1
 800e8f0:	6022      	str	r2, [r4, #0]
 800e8f2:	701e      	strb	r6, [r3, #0]
 800e8f4:	3501      	adds	r5, #1
 800e8f6:	4555      	cmp	r5, sl
 800e8f8:	d226      	bcs.n	800e948 <__fputwc+0x90>
 800e8fa:	ab01      	add	r3, sp, #4
 800e8fc:	5d5e      	ldrb	r6, [r3, r5]
 800e8fe:	68a3      	ldr	r3, [r4, #8]
 800e900:	3b01      	subs	r3, #1
 800e902:	2b00      	cmp	r3, #0
 800e904:	60a3      	str	r3, [r4, #8]
 800e906:	daf1      	bge.n	800e8ec <__fputwc+0x34>
 800e908:	69a7      	ldr	r7, [r4, #24]
 800e90a:	42bb      	cmp	r3, r7
 800e90c:	4631      	mov	r1, r6
 800e90e:	4622      	mov	r2, r4
 800e910:	4640      	mov	r0, r8
 800e912:	db01      	blt.n	800e918 <__fputwc+0x60>
 800e914:	2e0a      	cmp	r6, #10
 800e916:	d1e9      	bne.n	800e8ec <__fputwc+0x34>
 800e918:	f000 f87e 	bl	800ea18 <__swbuf_r>
 800e91c:	1c43      	adds	r3, r0, #1
 800e91e:	d1e9      	bne.n	800e8f4 <__fputwc+0x3c>
 800e920:	b002      	add	sp, #8
 800e922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e926:	89a3      	ldrh	r3, [r4, #12]
 800e928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e92c:	81a3      	strh	r3, [r4, #12]
 800e92e:	b002      	add	sp, #8
 800e930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e934:	f109 33ff 	add.w	r3, r9, #4294967295
 800e938:	2bfe      	cmp	r3, #254	; 0xfe
 800e93a:	d8c7      	bhi.n	800e8cc <__fputwc+0x14>
 800e93c:	fa5f f689 	uxtb.w	r6, r9
 800e940:	4682      	mov	sl, r0
 800e942:	f88d 6004 	strb.w	r6, [sp, #4]
 800e946:	e7cf      	b.n	800e8e8 <__fputwc+0x30>
 800e948:	4648      	mov	r0, r9
 800e94a:	b002      	add	sp, #8
 800e94c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e950 <_fputwc_r>:
 800e950:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 800e954:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800e958:	d10a      	bne.n	800e970 <_fputwc_r+0x20>
 800e95a:	b410      	push	{r4}
 800e95c:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800e95e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e962:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 800e966:	6654      	str	r4, [r2, #100]	; 0x64
 800e968:	8193      	strh	r3, [r2, #12]
 800e96a:	bc10      	pop	{r4}
 800e96c:	f7ff bfa4 	b.w	800e8b8 <__fputwc>
 800e970:	f7ff bfa2 	b.w	800e8b8 <__fputwc>

0800e974 <_fstat_r>:
 800e974:	b538      	push	{r3, r4, r5, lr}
 800e976:	460b      	mov	r3, r1
 800e978:	4c07      	ldr	r4, [pc, #28]	; (800e998 <_fstat_r+0x24>)
 800e97a:	4605      	mov	r5, r0
 800e97c:	4611      	mov	r1, r2
 800e97e:	4618      	mov	r0, r3
 800e980:	2300      	movs	r3, #0
 800e982:	6023      	str	r3, [r4, #0]
 800e984:	f7f9 f9da 	bl	8007d3c <_fstat>
 800e988:	1c43      	adds	r3, r0, #1
 800e98a:	d000      	beq.n	800e98e <_fstat_r+0x1a>
 800e98c:	bd38      	pop	{r3, r4, r5, pc}
 800e98e:	6823      	ldr	r3, [r4, #0]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d0fb      	beq.n	800e98c <_fstat_r+0x18>
 800e994:	602b      	str	r3, [r5, #0]
 800e996:	bd38      	pop	{r3, r4, r5, pc}
 800e998:	200033a4 	.word	0x200033a4

0800e99c <_isatty_r>:
 800e99c:	b538      	push	{r3, r4, r5, lr}
 800e99e:	4c07      	ldr	r4, [pc, #28]	; (800e9bc <_isatty_r+0x20>)
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	4605      	mov	r5, r0
 800e9a4:	4608      	mov	r0, r1
 800e9a6:	6023      	str	r3, [r4, #0]
 800e9a8:	f7f9 fa18 	bl	8007ddc <_isatty>
 800e9ac:	1c43      	adds	r3, r0, #1
 800e9ae:	d000      	beq.n	800e9b2 <_isatty_r+0x16>
 800e9b0:	bd38      	pop	{r3, r4, r5, pc}
 800e9b2:	6823      	ldr	r3, [r4, #0]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d0fb      	beq.n	800e9b0 <_isatty_r+0x14>
 800e9b8:	602b      	str	r3, [r5, #0]
 800e9ba:	bd38      	pop	{r3, r4, r5, pc}
 800e9bc:	200033a4 	.word	0x200033a4

0800e9c0 <_lseek_r>:
 800e9c0:	b570      	push	{r4, r5, r6, lr}
 800e9c2:	460d      	mov	r5, r1
 800e9c4:	4c08      	ldr	r4, [pc, #32]	; (800e9e8 <_lseek_r+0x28>)
 800e9c6:	4611      	mov	r1, r2
 800e9c8:	4606      	mov	r6, r0
 800e9ca:	461a      	mov	r2, r3
 800e9cc:	4628      	mov	r0, r5
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	6023      	str	r3, [r4, #0]
 800e9d2:	f7f9 f991 	bl	8007cf8 <_lseek>
 800e9d6:	1c43      	adds	r3, r0, #1
 800e9d8:	d000      	beq.n	800e9dc <_lseek_r+0x1c>
 800e9da:	bd70      	pop	{r4, r5, r6, pc}
 800e9dc:	6823      	ldr	r3, [r4, #0]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d0fb      	beq.n	800e9da <_lseek_r+0x1a>
 800e9e2:	6033      	str	r3, [r6, #0]
 800e9e4:	bd70      	pop	{r4, r5, r6, pc}
 800e9e6:	bf00      	nop
 800e9e8:	200033a4 	.word	0x200033a4

0800e9ec <_read_r>:
 800e9ec:	b570      	push	{r4, r5, r6, lr}
 800e9ee:	460d      	mov	r5, r1
 800e9f0:	4c08      	ldr	r4, [pc, #32]	; (800ea14 <_read_r+0x28>)
 800e9f2:	4611      	mov	r1, r2
 800e9f4:	4606      	mov	r6, r0
 800e9f6:	461a      	mov	r2, r3
 800e9f8:	4628      	mov	r0, r5
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	6023      	str	r3, [r4, #0]
 800e9fe:	f7f9 f989 	bl	8007d14 <_read>
 800ea02:	1c43      	adds	r3, r0, #1
 800ea04:	d000      	beq.n	800ea08 <_read_r+0x1c>
 800ea06:	bd70      	pop	{r4, r5, r6, pc}
 800ea08:	6823      	ldr	r3, [r4, #0]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d0fb      	beq.n	800ea06 <_read_r+0x1a>
 800ea0e:	6033      	str	r3, [r6, #0]
 800ea10:	bd70      	pop	{r4, r5, r6, pc}
 800ea12:	bf00      	nop
 800ea14:	200033a4 	.word	0x200033a4

0800ea18 <__swbuf_r>:
 800ea18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea1a:	460d      	mov	r5, r1
 800ea1c:	4614      	mov	r4, r2
 800ea1e:	4606      	mov	r6, r0
 800ea20:	b110      	cbz	r0, 800ea28 <__swbuf_r+0x10>
 800ea22:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d04a      	beq.n	800eabe <__swbuf_r+0xa6>
 800ea28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ea2c:	69a3      	ldr	r3, [r4, #24]
 800ea2e:	60a3      	str	r3, [r4, #8]
 800ea30:	b291      	uxth	r1, r2
 800ea32:	0708      	lsls	r0, r1, #28
 800ea34:	d538      	bpl.n	800eaa8 <__swbuf_r+0x90>
 800ea36:	6923      	ldr	r3, [r4, #16]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d035      	beq.n	800eaa8 <__swbuf_r+0x90>
 800ea3c:	0489      	lsls	r1, r1, #18
 800ea3e:	b2ef      	uxtb	r7, r5
 800ea40:	d515      	bpl.n	800ea6e <__swbuf_r+0x56>
 800ea42:	6822      	ldr	r2, [r4, #0]
 800ea44:	6961      	ldr	r1, [r4, #20]
 800ea46:	1ad3      	subs	r3, r2, r3
 800ea48:	428b      	cmp	r3, r1
 800ea4a:	da1c      	bge.n	800ea86 <__swbuf_r+0x6e>
 800ea4c:	3301      	adds	r3, #1
 800ea4e:	68a1      	ldr	r1, [r4, #8]
 800ea50:	1c50      	adds	r0, r2, #1
 800ea52:	3901      	subs	r1, #1
 800ea54:	60a1      	str	r1, [r4, #8]
 800ea56:	6020      	str	r0, [r4, #0]
 800ea58:	7015      	strb	r5, [r2, #0]
 800ea5a:	6962      	ldr	r2, [r4, #20]
 800ea5c:	429a      	cmp	r2, r3
 800ea5e:	d01a      	beq.n	800ea96 <__swbuf_r+0x7e>
 800ea60:	89a3      	ldrh	r3, [r4, #12]
 800ea62:	07db      	lsls	r3, r3, #31
 800ea64:	d501      	bpl.n	800ea6a <__swbuf_r+0x52>
 800ea66:	2f0a      	cmp	r7, #10
 800ea68:	d015      	beq.n	800ea96 <__swbuf_r+0x7e>
 800ea6a:	4638      	mov	r0, r7
 800ea6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea6e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800ea70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ea74:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800ea78:	81a2      	strh	r2, [r4, #12]
 800ea7a:	6822      	ldr	r2, [r4, #0]
 800ea7c:	6661      	str	r1, [r4, #100]	; 0x64
 800ea7e:	6961      	ldr	r1, [r4, #20]
 800ea80:	1ad3      	subs	r3, r2, r3
 800ea82:	428b      	cmp	r3, r1
 800ea84:	dbe2      	blt.n	800ea4c <__swbuf_r+0x34>
 800ea86:	4621      	mov	r1, r4
 800ea88:	4630      	mov	r0, r6
 800ea8a:	f7fe f909 	bl	800cca0 <_fflush_r>
 800ea8e:	b940      	cbnz	r0, 800eaa2 <__swbuf_r+0x8a>
 800ea90:	6822      	ldr	r2, [r4, #0]
 800ea92:	2301      	movs	r3, #1
 800ea94:	e7db      	b.n	800ea4e <__swbuf_r+0x36>
 800ea96:	4621      	mov	r1, r4
 800ea98:	4630      	mov	r0, r6
 800ea9a:	f7fe f901 	bl	800cca0 <_fflush_r>
 800ea9e:	2800      	cmp	r0, #0
 800eaa0:	d0e3      	beq.n	800ea6a <__swbuf_r+0x52>
 800eaa2:	f04f 37ff 	mov.w	r7, #4294967295
 800eaa6:	e7e0      	b.n	800ea6a <__swbuf_r+0x52>
 800eaa8:	4621      	mov	r1, r4
 800eaaa:	4630      	mov	r0, r6
 800eaac:	f7fd f82e 	bl	800bb0c <__swsetup_r>
 800eab0:	2800      	cmp	r0, #0
 800eab2:	d1f6      	bne.n	800eaa2 <__swbuf_r+0x8a>
 800eab4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eab8:	6923      	ldr	r3, [r4, #16]
 800eaba:	b291      	uxth	r1, r2
 800eabc:	e7be      	b.n	800ea3c <__swbuf_r+0x24>
 800eabe:	f7fe f983 	bl	800cdc8 <__sinit>
 800eac2:	e7b1      	b.n	800ea28 <__swbuf_r+0x10>

0800eac4 <_wcrtomb_r>:
 800eac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eac6:	4606      	mov	r6, r0
 800eac8:	b085      	sub	sp, #20
 800eaca:	461f      	mov	r7, r3
 800eacc:	b189      	cbz	r1, 800eaf2 <_wcrtomb_r+0x2e>
 800eace:	4c10      	ldr	r4, [pc, #64]	; (800eb10 <_wcrtomb_r+0x4c>)
 800ead0:	4d10      	ldr	r5, [pc, #64]	; (800eb14 <_wcrtomb_r+0x50>)
 800ead2:	6824      	ldr	r4, [r4, #0]
 800ead4:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800ead6:	2c00      	cmp	r4, #0
 800ead8:	bf08      	it	eq
 800eada:	462c      	moveq	r4, r5
 800eadc:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 800eae0:	47a0      	blx	r4
 800eae2:	1c43      	adds	r3, r0, #1
 800eae4:	d103      	bne.n	800eaee <_wcrtomb_r+0x2a>
 800eae6:	2200      	movs	r2, #0
 800eae8:	238a      	movs	r3, #138	; 0x8a
 800eaea:	603a      	str	r2, [r7, #0]
 800eaec:	6033      	str	r3, [r6, #0]
 800eaee:	b005      	add	sp, #20
 800eaf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eaf2:	460c      	mov	r4, r1
 800eaf4:	4906      	ldr	r1, [pc, #24]	; (800eb10 <_wcrtomb_r+0x4c>)
 800eaf6:	4a07      	ldr	r2, [pc, #28]	; (800eb14 <_wcrtomb_r+0x50>)
 800eaf8:	6809      	ldr	r1, [r1, #0]
 800eafa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800eafc:	2900      	cmp	r1, #0
 800eafe:	bf08      	it	eq
 800eb00:	4611      	moveq	r1, r2
 800eb02:	4622      	mov	r2, r4
 800eb04:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
 800eb08:	a901      	add	r1, sp, #4
 800eb0a:	47a0      	blx	r4
 800eb0c:	e7e9      	b.n	800eae2 <_wcrtomb_r+0x1e>
 800eb0e:	bf00      	nop
 800eb10:	20000460 	.word	0x20000460
 800eb14:	20000464 	.word	0x20000464

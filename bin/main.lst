
./bin/main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000200 <OSStartHighRdy>:
@              e) Enable interrupts (tasks will run with interrupts enabled).
@********************************************************************************************************

.thumb_func
OSStartHighRdy:
    CPSID   I                                                   @ Prevent interruption during context switch
 8000200:	b672      	cpsid	i
    MOVW    R0, #:lower16:NVIC_SYSPRI14                         @ Set the PendSV exception priority
 8000202:	f64e 5022 	movw	r0, #60706	; 0xed22
    MOVT    R0, #:upper16:NVIC_SYSPRI14
 8000206:	f2ce 0000 	movt	r0, #57344	; 0xe000

    MOVW    R1, #:lower16:NVIC_PENDSV_PRI
 800020a:	f240 01ff 	movw	r1, #255	; 0xff
    MOVT    R1, #:upper16:NVIC_PENDSV_PRI
 800020e:	f2c0 0100 	movt	r1, #0
    STRB    R1, [R0]
 8000212:	7001      	strb	r1, [r0, #0]

    MOVW    R0, #:lower16:OS_CPU_ExceptStkBase                  @ Initialize the MSP to the OS_CPU_ExceptStkBase
 8000214:	f643 006c 	movw	r0, #14444	; 0x386c
    MOVT    R0, #:upper16:OS_CPU_ExceptStkBase
 8000218:	f2c2 0000 	movt	r0, #8192	; 0x2000
    LDR     R1, [R0]
 800021c:	6801      	ldr	r1, [r0, #0]
    MSR     MSP, R1
 800021e:	f381 8808 	msr	MSP, r1

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 8000222:	f242 6008 	movw	r0, #9736	; 0x2608
    MOVT    R0, #:upper16:OSPrioCur
 8000226:	f2c2 0000 	movt	r0, #8192	; 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 800022a:	f242 51fc 	movw	r1, #9724	; 0x25fc
    MOVT    R1, #:upper16:OSPrioHighRdy
 800022e:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDRB    R2, [R1]
 8000232:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 8000234:	7002      	strb	r2, [r0, #0]

    MOVW    R5, #:lower16:OSTCBCurPtr
 8000236:	f242 65d4 	movw	r5, #9940	; 0x26d4
    MOVT    R5, #:upper16:OSTCBCurPtr
 800023a:	f2c2 0500 	movt	r5, #8192	; 0x2000
    MOVW    R1, #:lower16:OSTCBHighRdyPtr                       @ OSTCBCurPtr = OSTCBHighRdyPtr;
 800023e:	f242 61e0 	movw	r1, #9952	; 0x26e0
    MOVT    R1, #:upper16:OSTCBHighRdyPtr
 8000242:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDR     R2, [R1]
 8000246:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R5]
 8000248:	602a      	str	r2, [r5, #0]

    LDR     R0, [R2]                                            @ R0 is new process SP; SP = OSTCBHighRdyPtr->StkPtr;
 800024a:	6810      	ldr	r0, [r2, #0]
    MSR     PSP, R0                                             @ Load PSP with new process SP
 800024c:	f380 8809 	msr	PSP, r0

    MRS     R0, CONTROL
 8000250:	f3ef 8014 	mrs	r0, CONTROL
    ORR     R0, R0, #2
 8000254:	f040 0002 	orr.w	r0, r0, #2
    MSR     CONTROL, R0
 8000258:	f380 8814 	msr	CONTROL, r0
    ISB                                                         @ Sync instruction stream
 800025c:	f3bf 8f6f 	isb	sy

    LDMFD    SP!, {R4-R11}                                      @ Restore r4-11 from new process stack
 8000260:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    LDMFD    SP!, {R0-R3}                                       @ Restore r0, r3
 8000264:	bc0f      	pop	{r0, r1, r2, r3}
    LDMFD    SP!, {R12, LR}                                     @ Load R12 and LR
 8000266:	e8bd 5000 	ldmia.w	sp!, {ip, lr}
    LDMFD    SP!, {R1, R2}                                      @ Load PC and discard xPSR
 800026a:	bc06      	pop	{r1, r2}
    CPSIE    I
 800026c:	b662      	cpsie	i
    BX       R1
 800026e:	4708      	bx	r1

08000270 <OSCtxSw>:
@              triggers the PendSV exception which is where the real work is done.
@********************************************************************************************************

.thumb_func
OSCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 8000270:	4818      	ldr	r0, [pc, #96]	; (80002d4 <OS_CPU_PendSVHandler+0x50>)
    LDR     R1, =NVIC_PENDSVSET
 8000272:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    STR     R1, [R0]
 8000276:	6001      	str	r1, [r0, #0]
    BX      LR
 8000278:	4770      	bx	lr

0800027a <OSIntCtxSw>:
@              be handled when there are no more interrupts active and interrupts are enabled.
@********************************************************************************************************

.thumb_func
OSIntCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 800027a:	4816      	ldr	r0, [pc, #88]	; (80002d4 <OS_CPU_PendSVHandler+0x50>)
    LDR     R1, =NVIC_PENDSVSET
 800027c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    STR     R1, [R0]
 8000280:	6001      	str	r1, [r0, #0]
    BX      LR
 8000282:	4770      	bx	lr

08000284 <OS_CPU_PendSVHandler>:
@              therefore safe to assume that context being switched out was using the process stack (PSP).
@********************************************************************************************************

.thumb_func
OS_CPU_PendSVHandler:
    CPSID   I                                                   @ Prevent interruption during context switch
 8000284:	b672      	cpsid	i
    MRS     R0, PSP                                             @ PSP is process stack pointer
 8000286:	f3ef 8009 	mrs	r0, PSP
    STMFD   R0!, {R4-R11}                                       @ Save remaining regs r4-11 on process stack
 800028a:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

    MOVW    R5, #:lower16:OSTCBCurPtr                           @ OSTCBCurPtr->OSTCBStkPtr = SP;
 800028e:	f242 65d4 	movw	r5, #9940	; 0x26d4
    MOVT    R5, #:upper16:OSTCBCurPtr
 8000292:	f2c2 0500 	movt	r5, #8192	; 0x2000
    LDR     R6, [R5]
 8000296:	682e      	ldr	r6, [r5, #0]
    STR     R0, [R6]                                            @ R0 is SP of process being switched out
 8000298:	6030      	str	r0, [r6, #0]

                                                                @ At this point, entire context of process has been saved
    MOV     R4, LR                                              @ Save LR exc_return value
 800029a:	4674      	mov	r4, lr
    BL      OSTaskSwHook                                        @ OSTaskSwHook();
 800029c:	f006 f8ce 	bl	800643c <OSTaskSwHook>

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 80002a0:	f242 6008 	movw	r0, #9736	; 0x2608
    MOVT    R0, #:upper16:OSPrioCur
 80002a4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 80002a8:	f242 51fc 	movw	r1, #9724	; 0x25fc
    MOVT    R1, #:upper16:OSPrioHighRdy
 80002ac:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDRB    R2, [R1]
 80002b0:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 80002b2:	7002      	strb	r2, [r0, #0]

    MOVW    R1, #:lower16:OSTCBHighRdyPtr                      @ OSTCBCurPtr = OSTCBHighRdyPtr;
 80002b4:	f242 61e0 	movw	r1, #9952	; 0x26e0
    MOVT    R1, #:upper16:OSTCBHighRdyPtr
 80002b8:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDR     R2, [R1]
 80002bc:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R5]
 80002be:	602a      	str	r2, [r5, #0]

    ORR     LR, R4, #0xF4                                       @ Ensure exception return uses process stack
 80002c0:	f044 0ef4 	orr.w	lr, r4, #244	; 0xf4
    LDR     R0, [R2]                                            @ R0 is new process SP; SP = OSTCBHighRdyPtr->StkPtr;
 80002c4:	6810      	ldr	r0, [r2, #0]
    LDMFD   R0!, {R4-R11}                                       @ Restore r4-11 from new process stack
 80002c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, R0                                             @ Load PSP with new process SP
 80002ca:	f380 8809 	msr	PSP, r0
    CPSIE   I
 80002ce:	b662      	cpsie	i
    BX      LR                                                  @ Exception return will restore remaining context
 80002d0:	4770      	bx	lr
 80002d2:	0000      	.short	0x0000
@              triggers the PendSV exception which is where the real work is done.
@********************************************************************************************************

.thumb_func
OSCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 80002d4:	e000ed04 	.word	0xe000ed04

080002d8 <CPU_IntDis>:
@              void  CPU_IntEn (void);
@********************************************************************************************************

.thumb_func
CPU_IntDis:
        CPSID   I
 80002d8:	b672      	cpsid	i
        BX      LR
 80002da:	4770      	bx	lr

080002dc <CPU_IntEn>:

.thumb_func
CPU_IntEn:
        CPSIE   I
 80002dc:	b662      	cpsie	i
        BX      LR
 80002de:	4770      	bx	lr

080002e0 <CPU_SR_Save>:
@                       }
@********************************************************************************************************

.thumb_func
CPU_SR_Save:
        MRS     R0, PRIMASK                     @ Set prio int mask to mask all (except faults)
 80002e0:	f3ef 8010 	mrs	r0, PRIMASK
        CPSID   I
 80002e4:	b672      	cpsid	i
        BX      LR
 80002e6:	4770      	bx	lr

080002e8 <CPU_SR_Restore>:

.thumb_func
CPU_SR_Restore:                                  @ See Note #2.
        MSR     PRIMASK, R0
 80002e8:	f380 8810 	msr	PRIMASK, r0
        BX      LR
 80002ec:	4770      	bx	lr

080002ee <CPU_WaitForInt>:
@ Argument(s) : none.
@********************************************************************************************************

.thumb_func
CPU_WaitForInt:
        WFI                                     @ Wait for interrupt
 80002ee:	bf30      	wfi
        BX      LR
 80002f0:	4770      	bx	lr

080002f2 <CPU_WaitForExcept>:
@ Argument(s) : none.
@********************************************************************************************************

.thumb_func
CPU_WaitForExcept:
        WFE                                     @ Wait for exception
 80002f2:	bf20      	wfe
        BX      LR
 80002f4:	4770      	bx	lr

080002f6 <CPU_CntLeadZeros>:
@                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
@********************************************************************************************************

.thumb_func
CPU_CntLeadZeros:
        CLZ     R0, R0                          @ Count leading zeros
 80002f6:	fab0 f080 	clz	r0, r0
        BX      LR
 80002fa:	4770      	bx	lr

080002fc <CPU_CntTrailZeros>:
@                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
@********************************************************************************************************

.thumb_func
CPU_CntTrailZeros:
        RBIT    R0, R0                          @ Reverse bits
 80002fc:	fa90 f0a0 	rbit	r0, r0
        CLZ     R0, R0                          @ Count trailing zeros
 8000300:	fab0 f080 	clz	r0, r0
        BX      LR
 8000304:	4770      	bx	lr

08000306 <CPU_RevBits>:
@                       'val's final bit  N       =  'val's original bit  0
@********************************************************************************************************

.thumb_func
CPU_RevBits:
        RBIT    R0, R0                          @ Reverse bits
 8000306:	fa90 f0a0 	rbit	r0, r0
        BX      LR
 800030a:	4770      	bx	lr

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b97e 	b.w	8000620 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	468c      	mov	ip, r1
 8000342:	460e      	mov	r6, r1
 8000344:	4604      	mov	r4, r0
 8000346:	9d08      	ldr	r5, [sp, #32]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d150      	bne.n	80003ee <__udivmoddi4+0xb2>
 800034c:	428a      	cmp	r2, r1
 800034e:	4617      	mov	r7, r2
 8000350:	d96c      	bls.n	800042c <__udivmoddi4+0xf0>
 8000352:	fab2 fe82 	clz	lr, r2
 8000356:	f1be 0f00 	cmp.w	lr, #0
 800035a:	d00b      	beq.n	8000374 <__udivmoddi4+0x38>
 800035c:	f1ce 0420 	rsb	r4, lr, #32
 8000360:	fa20 f404 	lsr.w	r4, r0, r4
 8000364:	fa01 f60e 	lsl.w	r6, r1, lr
 8000368:	ea44 0c06 	orr.w	ip, r4, r6
 800036c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000370:	fa00 f40e 	lsl.w	r4, r0, lr
 8000374:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000378:	0c22      	lsrs	r2, r4, #16
 800037a:	fbbc f0f9 	udiv	r0, ip, r9
 800037e:	fa1f f887 	uxth.w	r8, r7
 8000382:	fb09 c610 	mls	r6, r9, r0, ip
 8000386:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800038a:	fb00 f308 	mul.w	r3, r0, r8
 800038e:	42b3      	cmp	r3, r6
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0x6a>
 8000392:	19f6      	adds	r6, r6, r7
 8000394:	f100 32ff 	add.w	r2, r0, #4294967295
 8000398:	f080 8122 	bcs.w	80005e0 <__udivmoddi4+0x2a4>
 800039c:	42b3      	cmp	r3, r6
 800039e:	f240 811f 	bls.w	80005e0 <__udivmoddi4+0x2a4>
 80003a2:	3802      	subs	r0, #2
 80003a4:	443e      	add	r6, r7
 80003a6:	1af6      	subs	r6, r6, r3
 80003a8:	b2a2      	uxth	r2, r4
 80003aa:	fbb6 f3f9 	udiv	r3, r6, r9
 80003ae:	fb09 6613 	mls	r6, r9, r3, r6
 80003b2:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 80003b6:	fb03 f808 	mul.w	r8, r3, r8
 80003ba:	45a0      	cmp	r8, r4
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0x96>
 80003be:	19e4      	adds	r4, r4, r7
 80003c0:	f103 32ff 	add.w	r2, r3, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x2a0>
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x2a0>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ebc8 0404 	rsb	r4, r8, r4
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	2100      	movs	r1, #0
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d062      	beq.n	80004a6 <__udivmoddi4+0x16a>
 80003e0:	fa24 f40e 	lsr.w	r4, r4, lr
 80003e4:	2300      	movs	r3, #0
 80003e6:	602c      	str	r4, [r5, #0]
 80003e8:	606b      	str	r3, [r5, #4]
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	428b      	cmp	r3, r1
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0xc6>
 80003f2:	2d00      	cmp	r5, #0
 80003f4:	d055      	beq.n	80004a2 <__udivmoddi4+0x166>
 80003f6:	2100      	movs	r1, #0
 80003f8:	e885 0041 	stmia.w	r5, {r0, r6}
 80003fc:	4608      	mov	r0, r1
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f183 	clz	r1, r3
 8000406:	2900      	cmp	r1, #0
 8000408:	f040 8090 	bne.w	800052c <__udivmoddi4+0x1f0>
 800040c:	42b3      	cmp	r3, r6
 800040e:	d302      	bcc.n	8000416 <__udivmoddi4+0xda>
 8000410:	4282      	cmp	r2, r0
 8000412:	f200 80f8 	bhi.w	8000606 <__udivmoddi4+0x2ca>
 8000416:	1a84      	subs	r4, r0, r2
 8000418:	eb66 0603 	sbc.w	r6, r6, r3
 800041c:	2001      	movs	r0, #1
 800041e:	46b4      	mov	ip, r6
 8000420:	2d00      	cmp	r5, #0
 8000422:	d040      	beq.n	80004a6 <__udivmoddi4+0x16a>
 8000424:	e885 1010 	stmia.w	r5, {r4, ip}
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	b912      	cbnz	r2, 8000434 <__udivmoddi4+0xf8>
 800042e:	2701      	movs	r7, #1
 8000430:	fbb7 f7f2 	udiv	r7, r7, r2
 8000434:	fab7 fe87 	clz	lr, r7
 8000438:	f1be 0f00 	cmp.w	lr, #0
 800043c:	d135      	bne.n	80004aa <__udivmoddi4+0x16e>
 800043e:	1bf3      	subs	r3, r6, r7
 8000440:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	2101      	movs	r1, #1
 800044a:	fbb3 f0f8 	udiv	r0, r3, r8
 800044e:	0c22      	lsrs	r2, r4, #16
 8000450:	fb08 3610 	mls	r6, r8, r0, r3
 8000454:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000458:	fb0c f300 	mul.w	r3, ip, r0
 800045c:	42b3      	cmp	r3, r6
 800045e:	d907      	bls.n	8000470 <__udivmoddi4+0x134>
 8000460:	19f6      	adds	r6, r6, r7
 8000462:	f100 32ff 	add.w	r2, r0, #4294967295
 8000466:	d202      	bcs.n	800046e <__udivmoddi4+0x132>
 8000468:	42b3      	cmp	r3, r6
 800046a:	f200 80ce 	bhi.w	800060a <__udivmoddi4+0x2ce>
 800046e:	4610      	mov	r0, r2
 8000470:	1af6      	subs	r6, r6, r3
 8000472:	b2a2      	uxth	r2, r4
 8000474:	fbb6 f3f8 	udiv	r3, r6, r8
 8000478:	fb08 6613 	mls	r6, r8, r3, r6
 800047c:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000480:	fb0c fc03 	mul.w	ip, ip, r3
 8000484:	45a4      	cmp	ip, r4
 8000486:	d907      	bls.n	8000498 <__udivmoddi4+0x15c>
 8000488:	19e4      	adds	r4, r4, r7
 800048a:	f103 32ff 	add.w	r2, r3, #4294967295
 800048e:	d202      	bcs.n	8000496 <__udivmoddi4+0x15a>
 8000490:	45a4      	cmp	ip, r4
 8000492:	f200 80b5 	bhi.w	8000600 <__udivmoddi4+0x2c4>
 8000496:	4613      	mov	r3, r2
 8000498:	ebcc 0404 	rsb	r4, ip, r4
 800049c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a0:	e79c      	b.n	80003dc <__udivmoddi4+0xa0>
 80004a2:	4629      	mov	r1, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004aa:	f1ce 0120 	rsb	r1, lr, #32
 80004ae:	fa06 f30e 	lsl.w	r3, r6, lr
 80004b2:	fa07 f70e 	lsl.w	r7, r7, lr
 80004b6:	fa20 f901 	lsr.w	r9, r0, r1
 80004ba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80004be:	40ce      	lsrs	r6, r1
 80004c0:	ea49 0903 	orr.w	r9, r9, r3
 80004c4:	fbb6 faf8 	udiv	sl, r6, r8
 80004c8:	ea4f 4419 	mov.w	r4, r9, lsr #16
 80004cc:	fb08 661a 	mls	r6, r8, sl, r6
 80004d0:	fa1f fc87 	uxth.w	ip, r7
 80004d4:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 80004d8:	fb0a f20c 	mul.w	r2, sl, ip
 80004dc:	429a      	cmp	r2, r3
 80004de:	fa00 f40e 	lsl.w	r4, r0, lr
 80004e2:	d90a      	bls.n	80004fa <__udivmoddi4+0x1be>
 80004e4:	19db      	adds	r3, r3, r7
 80004e6:	f10a 31ff 	add.w	r1, sl, #4294967295
 80004ea:	f080 8087 	bcs.w	80005fc <__udivmoddi4+0x2c0>
 80004ee:	429a      	cmp	r2, r3
 80004f0:	f240 8084 	bls.w	80005fc <__udivmoddi4+0x2c0>
 80004f4:	f1aa 0a02 	sub.w	sl, sl, #2
 80004f8:	443b      	add	r3, r7
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	fa1f f989 	uxth.w	r9, r9
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 800050c:	fb01 f60c 	mul.w	r6, r1, ip
 8000510:	429e      	cmp	r6, r3
 8000512:	d907      	bls.n	8000524 <__udivmoddi4+0x1e8>
 8000514:	19db      	adds	r3, r3, r7
 8000516:	f101 32ff 	add.w	r2, r1, #4294967295
 800051a:	d26b      	bcs.n	80005f4 <__udivmoddi4+0x2b8>
 800051c:	429e      	cmp	r6, r3
 800051e:	d969      	bls.n	80005f4 <__udivmoddi4+0x2b8>
 8000520:	3902      	subs	r1, #2
 8000522:	443b      	add	r3, r7
 8000524:	1b9b      	subs	r3, r3, r6
 8000526:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800052a:	e78e      	b.n	800044a <__udivmoddi4+0x10e>
 800052c:	f1c1 0e20 	rsb	lr, r1, #32
 8000530:	fa22 f40e 	lsr.w	r4, r2, lr
 8000534:	408b      	lsls	r3, r1
 8000536:	4323      	orrs	r3, r4
 8000538:	fa20 f70e 	lsr.w	r7, r0, lr
 800053c:	fa06 f401 	lsl.w	r4, r6, r1
 8000540:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000544:	fa26 f60e 	lsr.w	r6, r6, lr
 8000548:	433c      	orrs	r4, r7
 800054a:	fbb6 f9fc 	udiv	r9, r6, ip
 800054e:	0c27      	lsrs	r7, r4, #16
 8000550:	fb0c 6619 	mls	r6, ip, r9, r6
 8000554:	fa1f f883 	uxth.w	r8, r3
 8000558:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 800055c:	fb09 f708 	mul.w	r7, r9, r8
 8000560:	42b7      	cmp	r7, r6
 8000562:	fa02 f201 	lsl.w	r2, r2, r1
 8000566:	fa00 fa01 	lsl.w	sl, r0, r1
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x242>
 800056c:	18f6      	adds	r6, r6, r3
 800056e:	f109 30ff 	add.w	r0, r9, #4294967295
 8000572:	d241      	bcs.n	80005f8 <__udivmoddi4+0x2bc>
 8000574:	42b7      	cmp	r7, r6
 8000576:	d93f      	bls.n	80005f8 <__udivmoddi4+0x2bc>
 8000578:	f1a9 0902 	sub.w	r9, r9, #2
 800057c:	441e      	add	r6, r3
 800057e:	1bf6      	subs	r6, r6, r7
 8000580:	b2a0      	uxth	r0, r4
 8000582:	fbb6 f4fc 	udiv	r4, r6, ip
 8000586:	fb0c 6614 	mls	r6, ip, r4, r6
 800058a:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 800058e:	fb04 f808 	mul.w	r8, r4, r8
 8000592:	45b8      	cmp	r8, r7
 8000594:	d907      	bls.n	80005a6 <__udivmoddi4+0x26a>
 8000596:	18ff      	adds	r7, r7, r3
 8000598:	f104 30ff 	add.w	r0, r4, #4294967295
 800059c:	d228      	bcs.n	80005f0 <__udivmoddi4+0x2b4>
 800059e:	45b8      	cmp	r8, r7
 80005a0:	d926      	bls.n	80005f0 <__udivmoddi4+0x2b4>
 80005a2:	3c02      	subs	r4, #2
 80005a4:	441f      	add	r7, r3
 80005a6:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 80005aa:	ebc8 0707 	rsb	r7, r8, r7
 80005ae:	fba0 8902 	umull	r8, r9, r0, r2
 80005b2:	454f      	cmp	r7, r9
 80005b4:	4644      	mov	r4, r8
 80005b6:	464e      	mov	r6, r9
 80005b8:	d314      	bcc.n	80005e4 <__udivmoddi4+0x2a8>
 80005ba:	d029      	beq.n	8000610 <__udivmoddi4+0x2d4>
 80005bc:	b365      	cbz	r5, 8000618 <__udivmoddi4+0x2dc>
 80005be:	ebba 0304 	subs.w	r3, sl, r4
 80005c2:	eb67 0706 	sbc.w	r7, r7, r6
 80005c6:	fa07 fe0e 	lsl.w	lr, r7, lr
 80005ca:	40cb      	lsrs	r3, r1
 80005cc:	40cf      	lsrs	r7, r1
 80005ce:	ea4e 0303 	orr.w	r3, lr, r3
 80005d2:	e885 0088 	stmia.w	r5, {r3, r7}
 80005d6:	2100      	movs	r1, #0
 80005d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005dc:	4613      	mov	r3, r2
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x96>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e6e0      	b.n	80003a6 <__udivmoddi4+0x6a>
 80005e4:	ebb8 0402 	subs.w	r4, r8, r2
 80005e8:	eb69 0603 	sbc.w	r6, r9, r3
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7e5      	b.n	80005bc <__udivmoddi4+0x280>
 80005f0:	4604      	mov	r4, r0
 80005f2:	e7d8      	b.n	80005a6 <__udivmoddi4+0x26a>
 80005f4:	4611      	mov	r1, r2
 80005f6:	e795      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005f8:	4681      	mov	r9, r0
 80005fa:	e7c0      	b.n	800057e <__udivmoddi4+0x242>
 80005fc:	468a      	mov	sl, r1
 80005fe:	e77c      	b.n	80004fa <__udivmoddi4+0x1be>
 8000600:	3b02      	subs	r3, #2
 8000602:	443c      	add	r4, r7
 8000604:	e748      	b.n	8000498 <__udivmoddi4+0x15c>
 8000606:	4608      	mov	r0, r1
 8000608:	e70a      	b.n	8000420 <__udivmoddi4+0xe4>
 800060a:	3802      	subs	r0, #2
 800060c:	443e      	add	r6, r7
 800060e:	e72f      	b.n	8000470 <__udivmoddi4+0x134>
 8000610:	45c2      	cmp	sl, r8
 8000612:	d3e7      	bcc.n	80005e4 <__udivmoddi4+0x2a8>
 8000614:	463e      	mov	r6, r7
 8000616:	e7d1      	b.n	80005bc <__udivmoddi4+0x280>
 8000618:	4629      	mov	r1, r5
 800061a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800061e:	bf00      	nop

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <memcpy>:
 8000624:	4684      	mov	ip, r0
 8000626:	ea41 0300 	orr.w	r3, r1, r0
 800062a:	f013 0303 	ands.w	r3, r3, #3
 800062e:	d16d      	bne.n	800070c <memcpy+0xe8>
 8000630:	3a40      	subs	r2, #64	; 0x40
 8000632:	d341      	bcc.n	80006b8 <memcpy+0x94>
 8000634:	f851 3b04 	ldr.w	r3, [r1], #4
 8000638:	f840 3b04 	str.w	r3, [r0], #4
 800063c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000640:	f840 3b04 	str.w	r3, [r0], #4
 8000644:	f851 3b04 	ldr.w	r3, [r1], #4
 8000648:	f840 3b04 	str.w	r3, [r0], #4
 800064c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000650:	f840 3b04 	str.w	r3, [r0], #4
 8000654:	f851 3b04 	ldr.w	r3, [r1], #4
 8000658:	f840 3b04 	str.w	r3, [r0], #4
 800065c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000660:	f840 3b04 	str.w	r3, [r0], #4
 8000664:	f851 3b04 	ldr.w	r3, [r1], #4
 8000668:	f840 3b04 	str.w	r3, [r0], #4
 800066c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000670:	f840 3b04 	str.w	r3, [r0], #4
 8000674:	f851 3b04 	ldr.w	r3, [r1], #4
 8000678:	f840 3b04 	str.w	r3, [r0], #4
 800067c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000680:	f840 3b04 	str.w	r3, [r0], #4
 8000684:	f851 3b04 	ldr.w	r3, [r1], #4
 8000688:	f840 3b04 	str.w	r3, [r0], #4
 800068c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000690:	f840 3b04 	str.w	r3, [r0], #4
 8000694:	f851 3b04 	ldr.w	r3, [r1], #4
 8000698:	f840 3b04 	str.w	r3, [r0], #4
 800069c:	f851 3b04 	ldr.w	r3, [r1], #4
 80006a0:	f840 3b04 	str.w	r3, [r0], #4
 80006a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80006a8:	f840 3b04 	str.w	r3, [r0], #4
 80006ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80006b0:	f840 3b04 	str.w	r3, [r0], #4
 80006b4:	3a40      	subs	r2, #64	; 0x40
 80006b6:	d2bd      	bcs.n	8000634 <memcpy+0x10>
 80006b8:	3230      	adds	r2, #48	; 0x30
 80006ba:	d311      	bcc.n	80006e0 <memcpy+0xbc>
 80006bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80006c0:	f840 3b04 	str.w	r3, [r0], #4
 80006c4:	f851 3b04 	ldr.w	r3, [r1], #4
 80006c8:	f840 3b04 	str.w	r3, [r0], #4
 80006cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80006d0:	f840 3b04 	str.w	r3, [r0], #4
 80006d4:	f851 3b04 	ldr.w	r3, [r1], #4
 80006d8:	f840 3b04 	str.w	r3, [r0], #4
 80006dc:	3a10      	subs	r2, #16
 80006de:	d2ed      	bcs.n	80006bc <memcpy+0x98>
 80006e0:	320c      	adds	r2, #12
 80006e2:	d305      	bcc.n	80006f0 <memcpy+0xcc>
 80006e4:	f851 3b04 	ldr.w	r3, [r1], #4
 80006e8:	f840 3b04 	str.w	r3, [r0], #4
 80006ec:	3a04      	subs	r2, #4
 80006ee:	d2f9      	bcs.n	80006e4 <memcpy+0xc0>
 80006f0:	3204      	adds	r2, #4
 80006f2:	d008      	beq.n	8000706 <memcpy+0xe2>
 80006f4:	07d2      	lsls	r2, r2, #31
 80006f6:	bf1c      	itt	ne
 80006f8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80006fc:	f800 3b01 	strbne.w	r3, [r0], #1
 8000700:	d301      	bcc.n	8000706 <memcpy+0xe2>
 8000702:	880b      	ldrh	r3, [r1, #0]
 8000704:	8003      	strh	r3, [r0, #0]
 8000706:	4660      	mov	r0, ip
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	2a08      	cmp	r2, #8
 800070e:	d313      	bcc.n	8000738 <memcpy+0x114>
 8000710:	078b      	lsls	r3, r1, #30
 8000712:	d08d      	beq.n	8000630 <memcpy+0xc>
 8000714:	f010 0303 	ands.w	r3, r0, #3
 8000718:	d08a      	beq.n	8000630 <memcpy+0xc>
 800071a:	f1c3 0304 	rsb	r3, r3, #4
 800071e:	1ad2      	subs	r2, r2, r3
 8000720:	07db      	lsls	r3, r3, #31
 8000722:	bf1c      	itt	ne
 8000724:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000728:	f800 3b01 	strbne.w	r3, [r0], #1
 800072c:	d380      	bcc.n	8000630 <memcpy+0xc>
 800072e:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000732:	f820 3b02 	strh.w	r3, [r0], #2
 8000736:	e77b      	b.n	8000630 <memcpy+0xc>
 8000738:	3a04      	subs	r2, #4
 800073a:	d3d9      	bcc.n	80006f0 <memcpy+0xcc>
 800073c:	3a01      	subs	r2, #1
 800073e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000742:	f800 3b01 	strb.w	r3, [r0], #1
 8000746:	d2f9      	bcs.n	800073c <memcpy+0x118>
 8000748:	780b      	ldrb	r3, [r1, #0]
 800074a:	7003      	strb	r3, [r0, #0]
 800074c:	784b      	ldrb	r3, [r1, #1]
 800074e:	7043      	strb	r3, [r0, #1]
 8000750:	788b      	ldrb	r3, [r1, #2]
 8000752:	7083      	strb	r3, [r0, #2]
 8000754:	4660      	mov	r0, ip
 8000756:	4770      	bx	lr
	...

08000780 <strlen>:
 8000780:	f890 f000 	pld	[r0]
 8000784:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8000788:	f020 0107 	bic.w	r1, r0, #7
 800078c:	f06f 0c00 	mvn.w	ip, #0
 8000790:	f010 0407 	ands.w	r4, r0, #7
 8000794:	f891 f020 	pld	[r1, #32]
 8000798:	f040 8049 	bne.w	800082e <strlen+0xae>
 800079c:	f04f 0400 	mov.w	r4, #0
 80007a0:	f06f 0007 	mvn.w	r0, #7
 80007a4:	e9d1 2300 	ldrd	r2, r3, [r1]
 80007a8:	f891 f040 	pld	[r1, #64]	; 0x40
 80007ac:	f100 0008 	add.w	r0, r0, #8
 80007b0:	fa82 f24c 	uadd8	r2, r2, ip
 80007b4:	faa4 f28c 	sel	r2, r4, ip
 80007b8:	fa83 f34c 	uadd8	r3, r3, ip
 80007bc:	faa2 f38c 	sel	r3, r2, ip
 80007c0:	bb4b      	cbnz	r3, 8000816 <strlen+0x96>
 80007c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80007c6:	fa82 f24c 	uadd8	r2, r2, ip
 80007ca:	f100 0008 	add.w	r0, r0, #8
 80007ce:	faa4 f28c 	sel	r2, r4, ip
 80007d2:	fa83 f34c 	uadd8	r3, r3, ip
 80007d6:	faa2 f38c 	sel	r3, r2, ip
 80007da:	b9e3      	cbnz	r3, 8000816 <strlen+0x96>
 80007dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 80007e0:	fa82 f24c 	uadd8	r2, r2, ip
 80007e4:	f100 0008 	add.w	r0, r0, #8
 80007e8:	faa4 f28c 	sel	r2, r4, ip
 80007ec:	fa83 f34c 	uadd8	r3, r3, ip
 80007f0:	faa2 f38c 	sel	r3, r2, ip
 80007f4:	b97b      	cbnz	r3, 8000816 <strlen+0x96>
 80007f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80007fa:	f101 0120 	add.w	r1, r1, #32
 80007fe:	fa82 f24c 	uadd8	r2, r2, ip
 8000802:	f100 0008 	add.w	r0, r0, #8
 8000806:	faa4 f28c 	sel	r2, r4, ip
 800080a:	fa83 f34c 	uadd8	r3, r3, ip
 800080e:	faa2 f38c 	sel	r3, r2, ip
 8000812:	2b00      	cmp	r3, #0
 8000814:	d0c6      	beq.n	80007a4 <strlen+0x24>
 8000816:	2a00      	cmp	r2, #0
 8000818:	bf04      	itt	eq
 800081a:	3004      	addeq	r0, #4
 800081c:	461a      	moveq	r2, r3
 800081e:	ba12      	rev	r2, r2
 8000820:	fab2 f282 	clz	r2, r2
 8000824:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8000828:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 800082c:	4770      	bx	lr
 800082e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000832:	f004 0503 	and.w	r5, r4, #3
 8000836:	f1c4 0000 	rsb	r0, r4, #0
 800083a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 800083e:	f014 0f04 	tst.w	r4, #4
 8000842:	f891 f040 	pld	[r1, #64]	; 0x40
 8000846:	fa0c f505 	lsl.w	r5, ip, r5
 800084a:	ea62 0205 	orn	r2, r2, r5
 800084e:	bf1c      	itt	ne
 8000850:	ea63 0305 	ornne	r3, r3, r5
 8000854:	4662      	movne	r2, ip
 8000856:	f04f 0400 	mov.w	r4, #0
 800085a:	e7a9      	b.n	80007b0 <strlen+0x30>
 800085c:	0000      	movs	r0, r0
	...

08000860 <memchr>:
 8000860:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000864:	2a10      	cmp	r2, #16
 8000866:	db2b      	blt.n	80008c0 <memchr+0x60>
 8000868:	f010 0f07 	tst.w	r0, #7
 800086c:	d008      	beq.n	8000880 <memchr+0x20>
 800086e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000872:	3a01      	subs	r2, #1
 8000874:	428b      	cmp	r3, r1
 8000876:	d02d      	beq.n	80008d4 <memchr+0x74>
 8000878:	f010 0f07 	tst.w	r0, #7
 800087c:	b342      	cbz	r2, 80008d0 <memchr+0x70>
 800087e:	d1f6      	bne.n	800086e <memchr+0xe>
 8000880:	b4f0      	push	{r4, r5, r6, r7}
 8000882:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000886:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800088a:	f022 0407 	bic.w	r4, r2, #7
 800088e:	f07f 0700 	mvns.w	r7, #0
 8000892:	2300      	movs	r3, #0
 8000894:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000898:	3c08      	subs	r4, #8
 800089a:	ea85 0501 	eor.w	r5, r5, r1
 800089e:	ea86 0601 	eor.w	r6, r6, r1
 80008a2:	fa85 f547 	uadd8	r5, r5, r7
 80008a6:	faa3 f587 	sel	r5, r3, r7
 80008aa:	fa86 f647 	uadd8	r6, r6, r7
 80008ae:	faa5 f687 	sel	r6, r5, r7
 80008b2:	b98e      	cbnz	r6, 80008d8 <memchr+0x78>
 80008b4:	d1ee      	bne.n	8000894 <memchr+0x34>
 80008b6:	bcf0      	pop	{r4, r5, r6, r7}
 80008b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80008bc:	f002 0207 	and.w	r2, r2, #7
 80008c0:	b132      	cbz	r2, 80008d0 <memchr+0x70>
 80008c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80008c6:	3a01      	subs	r2, #1
 80008c8:	ea83 0301 	eor.w	r3, r3, r1
 80008cc:	b113      	cbz	r3, 80008d4 <memchr+0x74>
 80008ce:	d1f8      	bne.n	80008c2 <memchr+0x62>
 80008d0:	2000      	movs	r0, #0
 80008d2:	4770      	bx	lr
 80008d4:	3801      	subs	r0, #1
 80008d6:	4770      	bx	lr
 80008d8:	2d00      	cmp	r5, #0
 80008da:	bf06      	itte	eq
 80008dc:	4635      	moveq	r5, r6
 80008de:	3803      	subeq	r0, #3
 80008e0:	3807      	subne	r0, #7
 80008e2:	f015 0f01 	tst.w	r5, #1
 80008e6:	d107      	bne.n	80008f8 <memchr+0x98>
 80008e8:	3001      	adds	r0, #1
 80008ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80008ee:	bf02      	ittt	eq
 80008f0:	3001      	addeq	r0, #1
 80008f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80008f6:	3001      	addeq	r0, #1
 80008f8:	bcf0      	pop	{r4, r5, r6, r7}
 80008fa:	3801      	subs	r0, #1
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop

08000900 <__aeabi_drsub>:
 8000900:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000904:	e002      	b.n	800090c <__adddf3>
 8000906:	bf00      	nop

08000908 <__aeabi_dsub>:
 8000908:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800090c <__adddf3>:
 800090c:	b530      	push	{r4, r5, lr}
 800090e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000912:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000916:	ea94 0f05 	teq	r4, r5
 800091a:	bf08      	it	eq
 800091c:	ea90 0f02 	teqeq	r0, r2
 8000920:	bf1f      	itttt	ne
 8000922:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000926:	ea55 0c02 	orrsne.w	ip, r5, r2
 800092a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800092e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000932:	f000 80e2 	beq.w	8000afa <__adddf3+0x1ee>
 8000936:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800093a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800093e:	bfb8      	it	lt
 8000940:	426d      	neglt	r5, r5
 8000942:	dd0c      	ble.n	800095e <__adddf3+0x52>
 8000944:	442c      	add	r4, r5
 8000946:	ea80 0202 	eor.w	r2, r0, r2
 800094a:	ea81 0303 	eor.w	r3, r1, r3
 800094e:	ea82 0000 	eor.w	r0, r2, r0
 8000952:	ea83 0101 	eor.w	r1, r3, r1
 8000956:	ea80 0202 	eor.w	r2, r0, r2
 800095a:	ea81 0303 	eor.w	r3, r1, r3
 800095e:	2d36      	cmp	r5, #54	; 0x36
 8000960:	bf88      	it	hi
 8000962:	bd30      	pophi	{r4, r5, pc}
 8000964:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000968:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800096c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000970:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000974:	d002      	beq.n	800097c <__adddf3+0x70>
 8000976:	4240      	negs	r0, r0
 8000978:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800097c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000980:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000984:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000988:	d002      	beq.n	8000990 <__adddf3+0x84>
 800098a:	4252      	negs	r2, r2
 800098c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000990:	ea94 0f05 	teq	r4, r5
 8000994:	f000 80a7 	beq.w	8000ae6 <__adddf3+0x1da>
 8000998:	f1a4 0401 	sub.w	r4, r4, #1
 800099c:	f1d5 0e20 	rsbs	lr, r5, #32
 80009a0:	db0d      	blt.n	80009be <__adddf3+0xb2>
 80009a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80009a6:	fa22 f205 	lsr.w	r2, r2, r5
 80009aa:	1880      	adds	r0, r0, r2
 80009ac:	f141 0100 	adc.w	r1, r1, #0
 80009b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80009b4:	1880      	adds	r0, r0, r2
 80009b6:	fa43 f305 	asr.w	r3, r3, r5
 80009ba:	4159      	adcs	r1, r3
 80009bc:	e00e      	b.n	80009dc <__adddf3+0xd0>
 80009be:	f1a5 0520 	sub.w	r5, r5, #32
 80009c2:	f10e 0e20 	add.w	lr, lr, #32
 80009c6:	2a01      	cmp	r2, #1
 80009c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80009cc:	bf28      	it	cs
 80009ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80009d2:	fa43 f305 	asr.w	r3, r3, r5
 80009d6:	18c0      	adds	r0, r0, r3
 80009d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80009dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80009e0:	d507      	bpl.n	80009f2 <__adddf3+0xe6>
 80009e2:	f04f 0e00 	mov.w	lr, #0
 80009e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80009ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80009ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80009f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80009f6:	d31b      	bcc.n	8000a30 <__adddf3+0x124>
 80009f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80009fc:	d30c      	bcc.n	8000a18 <__adddf3+0x10c>
 80009fe:	0849      	lsrs	r1, r1, #1
 8000a00:	ea5f 0030 	movs.w	r0, r0, rrx
 8000a04:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000a08:	f104 0401 	add.w	r4, r4, #1
 8000a0c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000a10:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000a14:	f080 809a 	bcs.w	8000b4c <__adddf3+0x240>
 8000a18:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000a1c:	bf08      	it	eq
 8000a1e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a22:	f150 0000 	adcs.w	r0, r0, #0
 8000a26:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a2a:	ea41 0105 	orr.w	r1, r1, r5
 8000a2e:	bd30      	pop	{r4, r5, pc}
 8000a30:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000a34:	4140      	adcs	r0, r0
 8000a36:	eb41 0101 	adc.w	r1, r1, r1
 8000a3a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a3e:	f1a4 0401 	sub.w	r4, r4, #1
 8000a42:	d1e9      	bne.n	8000a18 <__adddf3+0x10c>
 8000a44:	f091 0f00 	teq	r1, #0
 8000a48:	bf04      	itt	eq
 8000a4a:	4601      	moveq	r1, r0
 8000a4c:	2000      	moveq	r0, #0
 8000a4e:	fab1 f381 	clz	r3, r1
 8000a52:	bf08      	it	eq
 8000a54:	3320      	addeq	r3, #32
 8000a56:	f1a3 030b 	sub.w	r3, r3, #11
 8000a5a:	f1b3 0220 	subs.w	r2, r3, #32
 8000a5e:	da0c      	bge.n	8000a7a <__adddf3+0x16e>
 8000a60:	320c      	adds	r2, #12
 8000a62:	dd08      	ble.n	8000a76 <__adddf3+0x16a>
 8000a64:	f102 0c14 	add.w	ip, r2, #20
 8000a68:	f1c2 020c 	rsb	r2, r2, #12
 8000a6c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000a70:	fa21 f102 	lsr.w	r1, r1, r2
 8000a74:	e00c      	b.n	8000a90 <__adddf3+0x184>
 8000a76:	f102 0214 	add.w	r2, r2, #20
 8000a7a:	bfd8      	it	le
 8000a7c:	f1c2 0c20 	rsble	ip, r2, #32
 8000a80:	fa01 f102 	lsl.w	r1, r1, r2
 8000a84:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000a88:	bfdc      	itt	le
 8000a8a:	ea41 010c 	orrle.w	r1, r1, ip
 8000a8e:	4090      	lslle	r0, r2
 8000a90:	1ae4      	subs	r4, r4, r3
 8000a92:	bfa2      	ittt	ge
 8000a94:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000a98:	4329      	orrge	r1, r5
 8000a9a:	bd30      	popge	{r4, r5, pc}
 8000a9c:	ea6f 0404 	mvn.w	r4, r4
 8000aa0:	3c1f      	subs	r4, #31
 8000aa2:	da1c      	bge.n	8000ade <__adddf3+0x1d2>
 8000aa4:	340c      	adds	r4, #12
 8000aa6:	dc0e      	bgt.n	8000ac6 <__adddf3+0x1ba>
 8000aa8:	f104 0414 	add.w	r4, r4, #20
 8000aac:	f1c4 0220 	rsb	r2, r4, #32
 8000ab0:	fa20 f004 	lsr.w	r0, r0, r4
 8000ab4:	fa01 f302 	lsl.w	r3, r1, r2
 8000ab8:	ea40 0003 	orr.w	r0, r0, r3
 8000abc:	fa21 f304 	lsr.w	r3, r1, r4
 8000ac0:	ea45 0103 	orr.w	r1, r5, r3
 8000ac4:	bd30      	pop	{r4, r5, pc}
 8000ac6:	f1c4 040c 	rsb	r4, r4, #12
 8000aca:	f1c4 0220 	rsb	r2, r4, #32
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	fa01 f304 	lsl.w	r3, r1, r4
 8000ad6:	ea40 0003 	orr.w	r0, r0, r3
 8000ada:	4629      	mov	r1, r5
 8000adc:	bd30      	pop	{r4, r5, pc}
 8000ade:	fa21 f004 	lsr.w	r0, r1, r4
 8000ae2:	4629      	mov	r1, r5
 8000ae4:	bd30      	pop	{r4, r5, pc}
 8000ae6:	f094 0f00 	teq	r4, #0
 8000aea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000aee:	bf06      	itte	eq
 8000af0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000af4:	3401      	addeq	r4, #1
 8000af6:	3d01      	subne	r5, #1
 8000af8:	e74e      	b.n	8000998 <__adddf3+0x8c>
 8000afa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000afe:	bf18      	it	ne
 8000b00:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000b04:	d029      	beq.n	8000b5a <__adddf3+0x24e>
 8000b06:	ea94 0f05 	teq	r4, r5
 8000b0a:	bf08      	it	eq
 8000b0c:	ea90 0f02 	teqeq	r0, r2
 8000b10:	d005      	beq.n	8000b1e <__adddf3+0x212>
 8000b12:	ea54 0c00 	orrs.w	ip, r4, r0
 8000b16:	bf04      	itt	eq
 8000b18:	4619      	moveq	r1, r3
 8000b1a:	4610      	moveq	r0, r2
 8000b1c:	bd30      	pop	{r4, r5, pc}
 8000b1e:	ea91 0f03 	teq	r1, r3
 8000b22:	bf1e      	ittt	ne
 8000b24:	2100      	movne	r1, #0
 8000b26:	2000      	movne	r0, #0
 8000b28:	bd30      	popne	{r4, r5, pc}
 8000b2a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000b2e:	d105      	bne.n	8000b3c <__adddf3+0x230>
 8000b30:	0040      	lsls	r0, r0, #1
 8000b32:	4149      	adcs	r1, r1
 8000b34:	bf28      	it	cs
 8000b36:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000b3a:	bd30      	pop	{r4, r5, pc}
 8000b3c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000b40:	bf3c      	itt	cc
 8000b42:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000b46:	bd30      	popcc	{r4, r5, pc}
 8000b48:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000b4c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000b50:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	bd30      	pop	{r4, r5, pc}
 8000b5a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000b5e:	bf1a      	itte	ne
 8000b60:	4619      	movne	r1, r3
 8000b62:	4610      	movne	r0, r2
 8000b64:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000b68:	bf1c      	itt	ne
 8000b6a:	460b      	movne	r3, r1
 8000b6c:	4602      	movne	r2, r0
 8000b6e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000b72:	bf06      	itte	eq
 8000b74:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000b78:	ea91 0f03 	teqeq	r1, r3
 8000b7c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000b80:	bd30      	pop	{r4, r5, pc}
 8000b82:	bf00      	nop

08000b84 <__aeabi_ui2d>:
 8000b84:	f090 0f00 	teq	r0, #0
 8000b88:	bf04      	itt	eq
 8000b8a:	2100      	moveq	r1, #0
 8000b8c:	4770      	bxeq	lr
 8000b8e:	b530      	push	{r4, r5, lr}
 8000b90:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000b94:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000b98:	f04f 0500 	mov.w	r5, #0
 8000b9c:	f04f 0100 	mov.w	r1, #0
 8000ba0:	e750      	b.n	8000a44 <__adddf3+0x138>
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_i2d>:
 8000ba4:	f090 0f00 	teq	r0, #0
 8000ba8:	bf04      	itt	eq
 8000baa:	2100      	moveq	r1, #0
 8000bac:	4770      	bxeq	lr
 8000bae:	b530      	push	{r4, r5, lr}
 8000bb0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000bb4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000bb8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000bbc:	bf48      	it	mi
 8000bbe:	4240      	negmi	r0, r0
 8000bc0:	f04f 0100 	mov.w	r1, #0
 8000bc4:	e73e      	b.n	8000a44 <__adddf3+0x138>
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_f2d>:
 8000bc8:	0042      	lsls	r2, r0, #1
 8000bca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000bce:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bd2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000bd6:	bf1f      	itttt	ne
 8000bd8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000bdc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000be0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000be4:	4770      	bxne	lr
 8000be6:	f092 0f00 	teq	r2, #0
 8000bea:	bf14      	ite	ne
 8000bec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000bf0:	4770      	bxeq	lr
 8000bf2:	b530      	push	{r4, r5, lr}
 8000bf4:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000bf8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000bfc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000c00:	e720      	b.n	8000a44 <__adddf3+0x138>
 8000c02:	bf00      	nop

08000c04 <__aeabi_ul2d>:
 8000c04:	ea50 0201 	orrs.w	r2, r0, r1
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	b530      	push	{r4, r5, lr}
 8000c0e:	f04f 0500 	mov.w	r5, #0
 8000c12:	e00a      	b.n	8000c2a <__aeabi_l2d+0x16>

08000c14 <__aeabi_l2d>:
 8000c14:	ea50 0201 	orrs.w	r2, r0, r1
 8000c18:	bf08      	it	eq
 8000c1a:	4770      	bxeq	lr
 8000c1c:	b530      	push	{r4, r5, lr}
 8000c1e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000c22:	d502      	bpl.n	8000c2a <__aeabi_l2d+0x16>
 8000c24:	4240      	negs	r0, r0
 8000c26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c2a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000c2e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000c32:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000c36:	f43f aedc 	beq.w	80009f2 <__adddf3+0xe6>
 8000c3a:	f04f 0203 	mov.w	r2, #3
 8000c3e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000c42:	bf18      	it	ne
 8000c44:	3203      	addne	r2, #3
 8000c46:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000c4a:	bf18      	it	ne
 8000c4c:	3203      	addne	r2, #3
 8000c4e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000c52:	f1c2 0320 	rsb	r3, r2, #32
 8000c56:	fa00 fc03 	lsl.w	ip, r0, r3
 8000c5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c5e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000c62:	ea40 000e 	orr.w	r0, r0, lr
 8000c66:	fa21 f102 	lsr.w	r1, r1, r2
 8000c6a:	4414      	add	r4, r2
 8000c6c:	e6c1      	b.n	80009f2 <__adddf3+0xe6>
 8000c6e:	bf00      	nop

08000c70 <__aeabi_dmul>:
 8000c70:	b570      	push	{r4, r5, r6, lr}
 8000c72:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c76:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000c7a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000c7e:	bf1d      	ittte	ne
 8000c80:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000c84:	ea94 0f0c 	teqne	r4, ip
 8000c88:	ea95 0f0c 	teqne	r5, ip
 8000c8c:	f000 f8de 	bleq	8000e4c <__aeabi_dmul+0x1dc>
 8000c90:	442c      	add	r4, r5
 8000c92:	ea81 0603 	eor.w	r6, r1, r3
 8000c96:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000c9a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000c9e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000ca2:	bf18      	it	ne
 8000ca4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000ca8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000cb0:	d038      	beq.n	8000d24 <__aeabi_dmul+0xb4>
 8000cb2:	fba0 ce02 	umull	ip, lr, r0, r2
 8000cb6:	f04f 0500 	mov.w	r5, #0
 8000cba:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000cbe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000cc2:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000cc6:	f04f 0600 	mov.w	r6, #0
 8000cca:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000cce:	f09c 0f00 	teq	ip, #0
 8000cd2:	bf18      	it	ne
 8000cd4:	f04e 0e01 	orrne.w	lr, lr, #1
 8000cd8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000cdc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000ce0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000ce4:	d204      	bcs.n	8000cf0 <__aeabi_dmul+0x80>
 8000ce6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000cea:	416d      	adcs	r5, r5
 8000cec:	eb46 0606 	adc.w	r6, r6, r6
 8000cf0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000cf4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000cf8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000cfc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000d00:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000d04:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000d08:	bf88      	it	hi
 8000d0a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000d0e:	d81e      	bhi.n	8000d4e <__aeabi_dmul+0xde>
 8000d10:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000d14:	bf08      	it	eq
 8000d16:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000d1a:	f150 0000 	adcs.w	r0, r0, #0
 8000d1e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000d22:	bd70      	pop	{r4, r5, r6, pc}
 8000d24:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000d28:	ea46 0101 	orr.w	r1, r6, r1
 8000d2c:	ea40 0002 	orr.w	r0, r0, r2
 8000d30:	ea81 0103 	eor.w	r1, r1, r3
 8000d34:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000d38:	bfc2      	ittt	gt
 8000d3a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000d3e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000d42:	bd70      	popgt	{r4, r5, r6, pc}
 8000d44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d48:	f04f 0e00 	mov.w	lr, #0
 8000d4c:	3c01      	subs	r4, #1
 8000d4e:	f300 80ab 	bgt.w	8000ea8 <__aeabi_dmul+0x238>
 8000d52:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000d56:	bfde      	ittt	le
 8000d58:	2000      	movle	r0, #0
 8000d5a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000d5e:	bd70      	pople	{r4, r5, r6, pc}
 8000d60:	f1c4 0400 	rsb	r4, r4, #0
 8000d64:	3c20      	subs	r4, #32
 8000d66:	da35      	bge.n	8000dd4 <__aeabi_dmul+0x164>
 8000d68:	340c      	adds	r4, #12
 8000d6a:	dc1b      	bgt.n	8000da4 <__aeabi_dmul+0x134>
 8000d6c:	f104 0414 	add.w	r4, r4, #20
 8000d70:	f1c4 0520 	rsb	r5, r4, #32
 8000d74:	fa00 f305 	lsl.w	r3, r0, r5
 8000d78:	fa20 f004 	lsr.w	r0, r0, r4
 8000d7c:	fa01 f205 	lsl.w	r2, r1, r5
 8000d80:	ea40 0002 	orr.w	r0, r0, r2
 8000d84:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000d88:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000d8c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000d90:	fa21 f604 	lsr.w	r6, r1, r4
 8000d94:	eb42 0106 	adc.w	r1, r2, r6
 8000d98:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000d9c:	bf08      	it	eq
 8000d9e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000da2:	bd70      	pop	{r4, r5, r6, pc}
 8000da4:	f1c4 040c 	rsb	r4, r4, #12
 8000da8:	f1c4 0520 	rsb	r5, r4, #32
 8000dac:	fa00 f304 	lsl.w	r3, r0, r4
 8000db0:	fa20 f005 	lsr.w	r0, r0, r5
 8000db4:	fa01 f204 	lsl.w	r2, r1, r4
 8000db8:	ea40 0002 	orr.w	r0, r0, r2
 8000dbc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000dc0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000dc4:	f141 0100 	adc.w	r1, r1, #0
 8000dc8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000dcc:	bf08      	it	eq
 8000dce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000dd2:	bd70      	pop	{r4, r5, r6, pc}
 8000dd4:	f1c4 0520 	rsb	r5, r4, #32
 8000dd8:	fa00 f205 	lsl.w	r2, r0, r5
 8000ddc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000de0:	fa20 f304 	lsr.w	r3, r0, r4
 8000de4:	fa01 f205 	lsl.w	r2, r1, r5
 8000de8:	ea43 0302 	orr.w	r3, r3, r2
 8000dec:	fa21 f004 	lsr.w	r0, r1, r4
 8000df0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000df4:	fa21 f204 	lsr.w	r2, r1, r4
 8000df8:	ea20 0002 	bic.w	r0, r0, r2
 8000dfc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000e00:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000e04:	bf08      	it	eq
 8000e06:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000e0a:	bd70      	pop	{r4, r5, r6, pc}
 8000e0c:	f094 0f00 	teq	r4, #0
 8000e10:	d10f      	bne.n	8000e32 <__aeabi_dmul+0x1c2>
 8000e12:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000e16:	0040      	lsls	r0, r0, #1
 8000e18:	eb41 0101 	adc.w	r1, r1, r1
 8000e1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000e20:	bf08      	it	eq
 8000e22:	3c01      	subeq	r4, #1
 8000e24:	d0f7      	beq.n	8000e16 <__aeabi_dmul+0x1a6>
 8000e26:	ea41 0106 	orr.w	r1, r1, r6
 8000e2a:	f095 0f00 	teq	r5, #0
 8000e2e:	bf18      	it	ne
 8000e30:	4770      	bxne	lr
 8000e32:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000e36:	0052      	lsls	r2, r2, #1
 8000e38:	eb43 0303 	adc.w	r3, r3, r3
 8000e3c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000e40:	bf08      	it	eq
 8000e42:	3d01      	subeq	r5, #1
 8000e44:	d0f7      	beq.n	8000e36 <__aeabi_dmul+0x1c6>
 8000e46:	ea43 0306 	orr.w	r3, r3, r6
 8000e4a:	4770      	bx	lr
 8000e4c:	ea94 0f0c 	teq	r4, ip
 8000e50:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000e54:	bf18      	it	ne
 8000e56:	ea95 0f0c 	teqne	r5, ip
 8000e5a:	d00c      	beq.n	8000e76 <__aeabi_dmul+0x206>
 8000e5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000e60:	bf18      	it	ne
 8000e62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000e66:	d1d1      	bne.n	8000e0c <__aeabi_dmul+0x19c>
 8000e68:	ea81 0103 	eor.w	r1, r1, r3
 8000e6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000e70:	f04f 0000 	mov.w	r0, #0
 8000e74:	bd70      	pop	{r4, r5, r6, pc}
 8000e76:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000e7a:	bf06      	itte	eq
 8000e7c:	4610      	moveq	r0, r2
 8000e7e:	4619      	moveq	r1, r3
 8000e80:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000e84:	d019      	beq.n	8000eba <__aeabi_dmul+0x24a>
 8000e86:	ea94 0f0c 	teq	r4, ip
 8000e8a:	d102      	bne.n	8000e92 <__aeabi_dmul+0x222>
 8000e8c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000e90:	d113      	bne.n	8000eba <__aeabi_dmul+0x24a>
 8000e92:	ea95 0f0c 	teq	r5, ip
 8000e96:	d105      	bne.n	8000ea4 <__aeabi_dmul+0x234>
 8000e98:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000e9c:	bf1c      	itt	ne
 8000e9e:	4610      	movne	r0, r2
 8000ea0:	4619      	movne	r1, r3
 8000ea2:	d10a      	bne.n	8000eba <__aeabi_dmul+0x24a>
 8000ea4:	ea81 0103 	eor.w	r1, r1, r3
 8000ea8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000eac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000eb0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000eb4:	f04f 0000 	mov.w	r0, #0
 8000eb8:	bd70      	pop	{r4, r5, r6, pc}
 8000eba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000ebe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000ec2:	bd70      	pop	{r4, r5, r6, pc}

08000ec4 <__aeabi_ddiv>:
 8000ec4:	b570      	push	{r4, r5, r6, lr}
 8000ec6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000ece:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000ed2:	bf1d      	ittte	ne
 8000ed4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000ed8:	ea94 0f0c 	teqne	r4, ip
 8000edc:	ea95 0f0c 	teqne	r5, ip
 8000ee0:	f000 f8a7 	bleq	8001032 <__aeabi_ddiv+0x16e>
 8000ee4:	eba4 0405 	sub.w	r4, r4, r5
 8000ee8:	ea81 0e03 	eor.w	lr, r1, r3
 8000eec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ef0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000ef4:	f000 8088 	beq.w	8001008 <__aeabi_ddiv+0x144>
 8000ef8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000efc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000f00:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000f04:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000f08:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000f0c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000f10:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000f14:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000f18:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000f1c:	429d      	cmp	r5, r3
 8000f1e:	bf08      	it	eq
 8000f20:	4296      	cmpeq	r6, r2
 8000f22:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000f26:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000f2a:	d202      	bcs.n	8000f32 <__aeabi_ddiv+0x6e>
 8000f2c:	085b      	lsrs	r3, r3, #1
 8000f2e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000f32:	1ab6      	subs	r6, r6, r2
 8000f34:	eb65 0503 	sbc.w	r5, r5, r3
 8000f38:	085b      	lsrs	r3, r3, #1
 8000f3a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000f3e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000f42:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000f46:	ebb6 0e02 	subs.w	lr, r6, r2
 8000f4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000f4e:	bf22      	ittt	cs
 8000f50:	1ab6      	subcs	r6, r6, r2
 8000f52:	4675      	movcs	r5, lr
 8000f54:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f58:	085b      	lsrs	r3, r3, #1
 8000f5a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000f5e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000f62:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000f66:	bf22      	ittt	cs
 8000f68:	1ab6      	subcs	r6, r6, r2
 8000f6a:	4675      	movcs	r5, lr
 8000f6c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f70:	085b      	lsrs	r3, r3, #1
 8000f72:	ea4f 0232 	mov.w	r2, r2, rrx
 8000f76:	ebb6 0e02 	subs.w	lr, r6, r2
 8000f7a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000f7e:	bf22      	ittt	cs
 8000f80:	1ab6      	subcs	r6, r6, r2
 8000f82:	4675      	movcs	r5, lr
 8000f84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f88:	085b      	lsrs	r3, r3, #1
 8000f8a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000f8e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000f92:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000f96:	bf22      	ittt	cs
 8000f98:	1ab6      	subcs	r6, r6, r2
 8000f9a:	4675      	movcs	r5, lr
 8000f9c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fa0:	ea55 0e06 	orrs.w	lr, r5, r6
 8000fa4:	d018      	beq.n	8000fd8 <__aeabi_ddiv+0x114>
 8000fa6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000faa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000fae:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000fb2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000fb6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000fba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000fbe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000fc2:	d1c0      	bne.n	8000f46 <__aeabi_ddiv+0x82>
 8000fc4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000fc8:	d10b      	bne.n	8000fe2 <__aeabi_ddiv+0x11e>
 8000fca:	ea41 0100 	orr.w	r1, r1, r0
 8000fce:	f04f 0000 	mov.w	r0, #0
 8000fd2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000fd6:	e7b6      	b.n	8000f46 <__aeabi_ddiv+0x82>
 8000fd8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000fdc:	bf04      	itt	eq
 8000fde:	4301      	orreq	r1, r0
 8000fe0:	2000      	moveq	r0, #0
 8000fe2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000fe6:	bf88      	it	hi
 8000fe8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000fec:	f63f aeaf 	bhi.w	8000d4e <__aeabi_dmul+0xde>
 8000ff0:	ebb5 0c03 	subs.w	ip, r5, r3
 8000ff4:	bf04      	itt	eq
 8000ff6:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000ffa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000ffe:	f150 0000 	adcs.w	r0, r0, #0
 8001002:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8001006:	bd70      	pop	{r4, r5, r6, pc}
 8001008:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800100c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8001010:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8001014:	bfc2      	ittt	gt
 8001016:	ebd4 050c 	rsbsgt	r5, r4, ip
 800101a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800101e:	bd70      	popgt	{r4, r5, r6, pc}
 8001020:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001024:	f04f 0e00 	mov.w	lr, #0
 8001028:	3c01      	subs	r4, #1
 800102a:	e690      	b.n	8000d4e <__aeabi_dmul+0xde>
 800102c:	ea45 0e06 	orr.w	lr, r5, r6
 8001030:	e68d      	b.n	8000d4e <__aeabi_dmul+0xde>
 8001032:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8001036:	ea94 0f0c 	teq	r4, ip
 800103a:	bf08      	it	eq
 800103c:	ea95 0f0c 	teqeq	r5, ip
 8001040:	f43f af3b 	beq.w	8000eba <__aeabi_dmul+0x24a>
 8001044:	ea94 0f0c 	teq	r4, ip
 8001048:	d10a      	bne.n	8001060 <__aeabi_ddiv+0x19c>
 800104a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800104e:	f47f af34 	bne.w	8000eba <__aeabi_dmul+0x24a>
 8001052:	ea95 0f0c 	teq	r5, ip
 8001056:	f47f af25 	bne.w	8000ea4 <__aeabi_dmul+0x234>
 800105a:	4610      	mov	r0, r2
 800105c:	4619      	mov	r1, r3
 800105e:	e72c      	b.n	8000eba <__aeabi_dmul+0x24a>
 8001060:	ea95 0f0c 	teq	r5, ip
 8001064:	d106      	bne.n	8001074 <__aeabi_ddiv+0x1b0>
 8001066:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800106a:	f43f aefd 	beq.w	8000e68 <__aeabi_dmul+0x1f8>
 800106e:	4610      	mov	r0, r2
 8001070:	4619      	mov	r1, r3
 8001072:	e722      	b.n	8000eba <__aeabi_dmul+0x24a>
 8001074:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001078:	bf18      	it	ne
 800107a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800107e:	f47f aec5 	bne.w	8000e0c <__aeabi_dmul+0x19c>
 8001082:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8001086:	f47f af0d 	bne.w	8000ea4 <__aeabi_dmul+0x234>
 800108a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800108e:	f47f aeeb 	bne.w	8000e68 <__aeabi_dmul+0x1f8>
 8001092:	e712      	b.n	8000eba <__aeabi_dmul+0x24a>

08001094 <__gedf2>:
 8001094:	f04f 3cff 	mov.w	ip, #4294967295
 8001098:	e006      	b.n	80010a8 <__cmpdf2+0x4>
 800109a:	bf00      	nop

0800109c <__ledf2>:
 800109c:	f04f 0c01 	mov.w	ip, #1
 80010a0:	e002      	b.n	80010a8 <__cmpdf2+0x4>
 80010a2:	bf00      	nop

080010a4 <__cmpdf2>:
 80010a4:	f04f 0c01 	mov.w	ip, #1
 80010a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80010b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80010b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80010b8:	bf18      	it	ne
 80010ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80010be:	d01b      	beq.n	80010f8 <__cmpdf2+0x54>
 80010c0:	b001      	add	sp, #4
 80010c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80010c6:	bf0c      	ite	eq
 80010c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80010cc:	ea91 0f03 	teqne	r1, r3
 80010d0:	bf02      	ittt	eq
 80010d2:	ea90 0f02 	teqeq	r0, r2
 80010d6:	2000      	moveq	r0, #0
 80010d8:	4770      	bxeq	lr
 80010da:	f110 0f00 	cmn.w	r0, #0
 80010de:	ea91 0f03 	teq	r1, r3
 80010e2:	bf58      	it	pl
 80010e4:	4299      	cmppl	r1, r3
 80010e6:	bf08      	it	eq
 80010e8:	4290      	cmpeq	r0, r2
 80010ea:	bf2c      	ite	cs
 80010ec:	17d8      	asrcs	r0, r3, #31
 80010ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80010f2:	f040 0001 	orr.w	r0, r0, #1
 80010f6:	4770      	bx	lr
 80010f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80010fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001100:	d102      	bne.n	8001108 <__cmpdf2+0x64>
 8001102:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8001106:	d107      	bne.n	8001118 <__cmpdf2+0x74>
 8001108:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800110c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001110:	d1d6      	bne.n	80010c0 <__cmpdf2+0x1c>
 8001112:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8001116:	d0d3      	beq.n	80010c0 <__cmpdf2+0x1c>
 8001118:	f85d 0b04 	ldr.w	r0, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop

08001120 <__aeabi_cdrcmple>:
 8001120:	4684      	mov	ip, r0
 8001122:	4610      	mov	r0, r2
 8001124:	4662      	mov	r2, ip
 8001126:	468c      	mov	ip, r1
 8001128:	4619      	mov	r1, r3
 800112a:	4663      	mov	r3, ip
 800112c:	e000      	b.n	8001130 <__aeabi_cdcmpeq>
 800112e:	bf00      	nop

08001130 <__aeabi_cdcmpeq>:
 8001130:	b501      	push	{r0, lr}
 8001132:	f7ff ffb7 	bl	80010a4 <__cmpdf2>
 8001136:	2800      	cmp	r0, #0
 8001138:	bf48      	it	mi
 800113a:	f110 0f00 	cmnmi.w	r0, #0
 800113e:	bd01      	pop	{r0, pc}

08001140 <__aeabi_dcmpeq>:
 8001140:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001144:	f7ff fff4 	bl	8001130 <__aeabi_cdcmpeq>
 8001148:	bf0c      	ite	eq
 800114a:	2001      	moveq	r0, #1
 800114c:	2000      	movne	r0, #0
 800114e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001152:	bf00      	nop

08001154 <__aeabi_dcmplt>:
 8001154:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001158:	f7ff ffea 	bl	8001130 <__aeabi_cdcmpeq>
 800115c:	bf34      	ite	cc
 800115e:	2001      	movcc	r0, #1
 8001160:	2000      	movcs	r0, #0
 8001162:	f85d fb08 	ldr.w	pc, [sp], #8
 8001166:	bf00      	nop

08001168 <__aeabi_dcmple>:
 8001168:	f84d ed08 	str.w	lr, [sp, #-8]!
 800116c:	f7ff ffe0 	bl	8001130 <__aeabi_cdcmpeq>
 8001170:	bf94      	ite	ls
 8001172:	2001      	movls	r0, #1
 8001174:	2000      	movhi	r0, #0
 8001176:	f85d fb08 	ldr.w	pc, [sp], #8
 800117a:	bf00      	nop

0800117c <__aeabi_dcmpge>:
 800117c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001180:	f7ff ffce 	bl	8001120 <__aeabi_cdrcmple>
 8001184:	bf94      	ite	ls
 8001186:	2001      	movls	r0, #1
 8001188:	2000      	movhi	r0, #0
 800118a:	f85d fb08 	ldr.w	pc, [sp], #8
 800118e:	bf00      	nop

08001190 <__aeabi_dcmpgt>:
 8001190:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001194:	f7ff ffc4 	bl	8001120 <__aeabi_cdrcmple>
 8001198:	bf34      	ite	cc
 800119a:	2001      	movcc	r0, #1
 800119c:	2000      	movcs	r0, #0
 800119e:	f85d fb08 	ldr.w	pc, [sp], #8
 80011a2:	bf00      	nop

080011a4 <__aeabi_dcmpun>:
 80011a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80011a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80011ac:	d102      	bne.n	80011b4 <__aeabi_dcmpun+0x10>
 80011ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80011b2:	d10a      	bne.n	80011ca <__aeabi_dcmpun+0x26>
 80011b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80011b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80011bc:	d102      	bne.n	80011c4 <__aeabi_dcmpun+0x20>
 80011be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80011c2:	d102      	bne.n	80011ca <__aeabi_dcmpun+0x26>
 80011c4:	f04f 0000 	mov.w	r0, #0
 80011c8:	4770      	bx	lr
 80011ca:	f04f 0001 	mov.w	r0, #1
 80011ce:	4770      	bx	lr

080011d0 <__aeabi_d2iz>:
 80011d0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80011d4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80011d8:	d215      	bcs.n	8001206 <__aeabi_d2iz+0x36>
 80011da:	d511      	bpl.n	8001200 <__aeabi_d2iz+0x30>
 80011dc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80011e0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80011e4:	d912      	bls.n	800120c <__aeabi_d2iz+0x3c>
 80011e6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80011ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011ee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80011f2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80011f6:	fa23 f002 	lsr.w	r0, r3, r2
 80011fa:	bf18      	it	ne
 80011fc:	4240      	negne	r0, r0
 80011fe:	4770      	bx	lr
 8001200:	f04f 0000 	mov.w	r0, #0
 8001204:	4770      	bx	lr
 8001206:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800120a:	d105      	bne.n	8001218 <__aeabi_d2iz+0x48>
 800120c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8001210:	bf08      	it	eq
 8001212:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001216:	4770      	bx	lr
 8001218:	f04f 0000 	mov.w	r0, #0
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop

08001220 <main>:
 * \returns 0 always
 *
 * \brief This is the standard entry point for C code.
 */
int main (void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08c      	sub	sp, #48	; 0x30
 8001224:	af0a      	add	r7, sp, #40	; 0x28
  OS_ERR  err;

  // Disable all interrupts                                               // <3>
  BSP_IntDisAll();
 8001226:	f005 fb43 	bl	80068b0 <BSP_IntDisAll>
  // Enable Interrupt UART
  BSP_IntEn (BSP_INT_ID_USIC1_01); //**
 800122a:	205b      	movs	r0, #91	; 0x5b
 800122c:	f005 fb46 	bl	80068bc <BSP_IntEn>
  BSP_IntEn (BSP_INT_ID_USIC1_00); //**
 8001230:	205a      	movs	r0, #90	; 0x5a
 8001232:	f005 fb43 	bl	80068bc <BSP_IntEn>

// init SEMI Hosting DEBUG Support                                        // <4>
#if SEMI_HOSTING
  initRetargetSwo();
 8001236:	f006 fb19 	bl	800786c <initRetargetSwo>
  SEGGER_RTT_ConfigUpBuffer (0, NULL, NULL, 0,
           SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL);
#endif

  // Init uC/OS-III
  OSInit (&err);                                                          // <5>
 800123a:	1dbb      	adds	r3, r7, #6
 800123c:	4618      	mov	r0, r3
 800123e:	f002 fadd 	bl	80037fc <OSInit>
  if (err != OS_ERR_NONE)
 8001242:	88fb      	ldrh	r3, [r7, #6]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d002      	beq.n	800124e <main+0x2e>
    APP_TRACE_DBG ("Error OSInit: main\n");
 8001248:	4814      	ldr	r0, [pc, #80]	; (800129c <main+0x7c>)
 800124a:	f007 fab9 	bl	80087c0 <puts>

  /* Create the start task */                                             // <6>
  OSTaskCreate ( (OS_TCB     *) &AppStartTaskTCB,
 800124e:	1dbb      	adds	r3, r7, #6
 8001250:	9308      	str	r3, [sp, #32]
 8001252:	2303      	movs	r3, #3
 8001254:	9307      	str	r3, [sp, #28]
 8001256:	2300      	movs	r3, #0
 8001258:	9306      	str	r3, [sp, #24]
 800125a:	2300      	movs	r3, #0
 800125c:	9305      	str	r3, [sp, #20]
 800125e:	2300      	movs	r3, #0
 8001260:	9304      	str	r3, [sp, #16]
 8001262:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001266:	9303      	str	r3, [sp, #12]
 8001268:	2319      	movs	r3, #25
 800126a:	9302      	str	r3, [sp, #8]
 800126c:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <main+0x80>)
 800126e:	9301      	str	r3, [sp, #4]
 8001270:	2302      	movs	r3, #2
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	2300      	movs	r3, #0
 8001276:	4a0b      	ldr	r2, [pc, #44]	; (80012a4 <main+0x84>)
 8001278:	490b      	ldr	r1, [pc, #44]	; (80012a8 <main+0x88>)
 800127a:	480c      	ldr	r0, [pc, #48]	; (80012ac <main+0x8c>)
 800127c:	f001 fb00 	bl	8002880 <OSTaskCreate>
           (void       *) 0,
           (OS_OPT) (OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
           (OS_ERR     *) &err);

  // Start multitasking (i.e., give control to uC/OS-III)
  OSStart (&err);                                                         // <7>
 8001280:	1dbb      	adds	r3, r7, #6
 8001282:	4618      	mov	r0, r3
 8001284:	f002 fd0e 	bl	8003ca4 <OSStart>
  if (err != OS_ERR_NONE)
 8001288:	88fb      	ldrh	r3, [r7, #6]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d002      	beq.n	8001294 <main+0x74>
    APP_TRACE_DBG ("Error OSStart: main\n");
 800128e:	4808      	ldr	r0, [pc, #32]	; (80012b0 <main+0x90>)
 8001290:	f007 fa96 	bl	80087c0 <puts>

  while (1) {                                                             // <8>
    APP_TRACE_DBG ("Should never be output! Bug?\n");
 8001294:	4807      	ldr	r0, [pc, #28]	; (80012b4 <main+0x94>)
 8001296:	f007 fa93 	bl	80087c0 <puts>
  }
 800129a:	e7fb      	b.n	8001294 <main+0x74>
 800129c:	0800e7a8 	.word	0x0800e7a8
 80012a0:	200009e0 	.word	0x200009e0
 80012a4:	080012b9 	.word	0x080012b9
 80012a8:	0800e7bc 	.word	0x0800e7bc
 80012ac:	20000de0 	.word	0x20000de0
 80012b0:	0800e7cc 	.word	0x0800e7cc
 80012b4:	0800e7e0 	.word	0x0800e7e0

080012b8 <AppTaskStart>:
 * \brief Startup (init) task that loads board support functions,
 *        initializes CPU services, the memory, the systick timer,
 *        etc. and finally invokes other application tasks.
 */
static void AppTaskStart (void *p_arg)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  CPU_INT32U  cnts;
  OS_ERR      err;

  (void) p_arg;
  // initialize BSP functions
  BSP_Init();                                                             // <9>
 80012c0:	f006 fa98 	bl	80077f4 <BSP_Init>
  // initialize the uC/CPU services
  CPU_Init();
 80012c4:	f000 fec0 	bl	8002048 <CPU_Init>
  // determine SysTick reference frequency
  cpu_clk_freq = BSP_SysClkFreqGet();
 80012c8:	f006 fa3a 	bl	8007740 <BSP_SysClkFreqGet>
 80012cc:	6178      	str	r0, [r7, #20]
  // determine nbr SysTick increments
  cnts = cpu_clk_freq / (CPU_INT32U) OSCfg_TickRate_Hz;
 80012ce:	4b19      	ldr	r3, [pc, #100]	; (8001334 <AppTaskStart+0x7c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	697a      	ldr	r2, [r7, #20]
 80012d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d8:	613b      	str	r3, [r7, #16]
  // init uCOS-III periodic time src (SysTick)
  OS_CPU_SysTickInit (cnts);
 80012da:	6938      	ldr	r0, [r7, #16]
 80012dc:	f005 f924 	bl	8006528 <OS_CPU_SysTickInit>
  // initialize memory management module
  Mem_Init();
 80012e0:	f000 ff9a 	bl	8002218 <Mem_Init>
  // initialize mathematical module
  Math_Init();
 80012e4:	f001 f86a 	bl	80023bc <Math_Init>
  //Ta
  pen_up();
 80012e8:	f000 fc24 	bl	8001b34 <pen_up>

  _mcp23s08_Plotter_Init();
 80012ec:	f000 fe88 	bl	8002000 <_mcp23s08_Plotter_Init>

// compute CPU capacity with no task running
#if (OS_CFG_STAT_TASK_EN > 0u)                                           // <10>
  OSStatTaskCPUUsageInit (&err);
 80012f0:	f107 030e 	add.w	r3, r7, #14
 80012f4:	4618      	mov	r0, r3
 80012f6:	f003 fd89 	bl	8004e0c <OSStatTaskCPUUsageInit>
  if (err != OS_ERR_NONE)
 80012fa:	89fb      	ldrh	r3, [r7, #14]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d002      	beq.n	8001306 <AppTaskStart+0x4e>
    APP_TRACE_DBG ("Error OSStatTaskCPUUsageInit: AppTaskStart\n");
 8001300:	480d      	ldr	r0, [pc, #52]	; (8001338 <AppTaskStart+0x80>)
 8001302:	f007 fa5d 	bl	80087c0 <puts>
#endif

  APP_TRACE_INFO ("Creating Application Objects...\n");                  // <11>
 8001306:	480d      	ldr	r0, [pc, #52]	; (800133c <AppTaskStart+0x84>)
 8001308:	f007 fa5a 	bl	80087c0 <puts>
  // create application objects
  AppObjCreate();
 800130c:	f000 f81c 	bl	8001348 <AppObjCreate>

  APP_TRACE_INFO ("Creating Application Tasks...\n");                    // <12>
 8001310:	480b      	ldr	r0, [pc, #44]	; (8001340 <AppTaskStart+0x88>)
 8001312:	f007 fa55 	bl	80087c0 <puts>
  // create application tasks
  AppTaskCreate();
 8001316:	f000 f895 	bl	8001444 <AppTaskCreate>

  while (DEF_TRUE) {                                                     // <13>
    // Suspend current task
    OSTaskSuspend ( (OS_TCB *) 0, &err);
 800131a:	f107 030e 	add.w	r3, r7, #14
 800131e:	4619      	mov	r1, r3
 8001320:	2000      	movs	r0, #0
 8001322:	f001 fd69 	bl	8002df8 <OSTaskSuspend>
    if (err != OS_ERR_NONE)
 8001326:	89fb      	ldrh	r3, [r7, #14]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d0f6      	beq.n	800131a <AppTaskStart+0x62>
      APP_TRACE_DBG ("Error OSTaskSuspend: AppTaskStart\n");
 800132c:	4805      	ldr	r0, [pc, #20]	; (8001344 <AppTaskStart+0x8c>)
 800132e:	f007 fa47 	bl	80087c0 <puts>
  }
 8001332:	e7f2      	b.n	800131a <AppTaskStart+0x62>
 8001334:	0800ec90 	.word	0x0800ec90
 8001338:	0800e800 	.word	0x0800e800
 800133c:	0800e82c 	.word	0x0800e82c
 8001340:	0800e84c 	.word	0x0800e84c
 8001344:	0800e86c 	.word	0x0800e86c

08001348 <AppObjCreate>:
 * \brief Creates application objects.
 * \params none
 * \returns none
 */
static void AppObjCreate (void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af02      	add	r7, sp, #8
	OS_ERR      err;
	// Create Shared Memory
	  OSMemCreate ( (OS_MEM    *) &Mem_Partition,
 800134e:	1dbb      	adds	r3, r7, #6
 8001350:	9301      	str	r3, [sp, #4]
 8001352:	2314      	movs	r3, #20
 8001354:	9300      	str	r3, [sp, #0]
 8001356:	2302      	movs	r3, #2
 8001358:	4a29      	ldr	r2, [pc, #164]	; (8001400 <AppObjCreate+0xb8>)
 800135a:	492a      	ldr	r1, [pc, #168]	; (8001404 <AppObjCreate+0xbc>)
 800135c:	482a      	ldr	r0, [pc, #168]	; (8001408 <AppObjCreate+0xc0>)
 800135e:	f004 fce3 	bl	8005d28 <OSMemCreate>
	          (CPU_CHAR  *) "Mem Partition",
	          (void      *) &MyPartitionStorage[0][0],
	          (OS_MEM_QTY)  NUM_MSG,
	          (OS_MEM_SIZE) MAX_MSG_LENGTH * sizeof (CPU_CHAR),
	          (OS_ERR    *) &err);
	  if (err != OS_ERR_NONE)
 8001362:	88fb      	ldrh	r3, [r7, #6]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d002      	beq.n	800136e <AppObjCreate+0x26>
	    APP_TRACE_DBG ("Error OSMemCreate: AppObjCreate\n");
 8001368:	4828      	ldr	r0, [pc, #160]	; (800140c <AppObjCreate+0xc4>)
 800136a:	f007 fa29 	bl	80087c0 <puts>
	  // Create Shared Memory
	   OSMemCreate ( (OS_MEM    *) &Mem_Partition1,
 800136e:	1dbb      	adds	r3, r7, #6
 8001370:	9301      	str	r3, [sp, #4]
 8001372:	2314      	movs	r3, #20
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	2302      	movs	r3, #2
 8001378:	4a25      	ldr	r2, [pc, #148]	; (8001410 <AppObjCreate+0xc8>)
 800137a:	4926      	ldr	r1, [pc, #152]	; (8001414 <AppObjCreate+0xcc>)
 800137c:	4826      	ldr	r0, [pc, #152]	; (8001418 <AppObjCreate+0xd0>)
 800137e:	f004 fcd3 	bl	8005d28 <OSMemCreate>
	           (CPU_CHAR  *) "Mem Partition1",
	           (void      *) &MyPartitionStorage1[0][0],
	           (OS_MEM_QTY)  NUM_MSG,
	           (OS_MEM_SIZE) MAX_MSG_LENGTH * sizeof (CPU_CHAR),
	           (OS_ERR    *) &err);
	   if (err != OS_ERR_NONE)
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d002      	beq.n	800138e <AppObjCreate+0x46>
	     APP_TRACE_DBG ("Error OSMemCreate: AppObjCreate\n");
 8001388:	4820      	ldr	r0, [pc, #128]	; (800140c <AppObjCreate+0xc4>)
 800138a:	f007 fa19 	bl	80087c0 <puts>
	   // Create Shared Memory
	   OSMemCreate ( (OS_MEM    *) &Mem_Partition2,
 800138e:	1dbb      	adds	r3, r7, #6
 8001390:	9301      	str	r3, [sp, #4]
 8001392:	2314      	movs	r3, #20
 8001394:	9300      	str	r3, [sp, #0]
 8001396:	2302      	movs	r3, #2
 8001398:	4a20      	ldr	r2, [pc, #128]	; (800141c <AppObjCreate+0xd4>)
 800139a:	4921      	ldr	r1, [pc, #132]	; (8001420 <AppObjCreate+0xd8>)
 800139c:	4821      	ldr	r0, [pc, #132]	; (8001424 <AppObjCreate+0xdc>)
 800139e:	f004 fcc3 	bl	8005d28 <OSMemCreate>
	              (CPU_CHAR  *) "Mem Partition2",
	              (void      *) &MyPartitionStorage2[0][0],
	              (OS_MEM_QTY)  NUM_MSG,
	              (OS_MEM_SIZE) MAX_MSG_LENGTH * sizeof (CPU_CHAR),
	              (OS_ERR    *) &err);
	      if (err != OS_ERR_NONE)
 80013a2:	88fb      	ldrh	r3, [r7, #6]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d002      	beq.n	80013ae <AppObjCreate+0x66>
	        APP_TRACE_DBG ("Error OSMemCreate: AppObjCreate\n");
 80013a8:	4818      	ldr	r0, [pc, #96]	; (800140c <AppObjCreate+0xc4>)
 80013aa:	f007 fa09 	bl	80087c0 <puts>
	  // Create Message Queue
	  OSQCreate ( (OS_Q *)     &UART_ISR,
 80013ae:	1dbb      	adds	r3, r7, #6
 80013b0:	2202      	movs	r2, #2
 80013b2:	491d      	ldr	r1, [pc, #116]	; (8001428 <AppObjCreate+0xe0>)
 80013b4:	481d      	ldr	r0, [pc, #116]	; (800142c <AppObjCreate+0xe4>)
 80013b6:	f001 f81f 	bl	80023f8 <OSQCreate>
	        (CPU_CHAR *) "ISR Queue",
	        (OS_MSG_QTY) NUM_MSG,
	        (OS_ERR   *) &err);
	  if (err != OS_ERR_NONE)
 80013ba:	88fb      	ldrh	r3, [r7, #6]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d002      	beq.n	80013c6 <AppObjCreate+0x7e>
	    APP_TRACE_DBG ("Error OSQCreate: AppObjCreate\n");
 80013c0:	481b      	ldr	r0, [pc, #108]	; (8001430 <AppObjCreate+0xe8>)
 80013c2:	f007 f9fd 	bl	80087c0 <puts>

	  // Create Message Queue
	  OSQCreate ( (OS_Q *)     &Q_STEP_X,
 80013c6:	1dbb      	adds	r3, r7, #6
 80013c8:	2202      	movs	r2, #2
 80013ca:	491a      	ldr	r1, [pc, #104]	; (8001434 <AppObjCreate+0xec>)
 80013cc:	481a      	ldr	r0, [pc, #104]	; (8001438 <AppObjCreate+0xf0>)
 80013ce:	f001 f813 	bl	80023f8 <OSQCreate>
	 	              (CPU_CHAR *) "STEP_X Queue",
	 	              (OS_MSG_QTY) NUM_MSG,
	 	              (OS_ERR   *) &err);
	  if (err != OS_ERR_NONE)
 80013d2:	88fb      	ldrh	r3, [r7, #6]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d002      	beq.n	80013de <AppObjCreate+0x96>
		  APP_TRACE_DBG ("Error OSQCreate: AppObjCreate\n");
 80013d8:	4815      	ldr	r0, [pc, #84]	; (8001430 <AppObjCreate+0xe8>)
 80013da:	f007 f9f1 	bl	80087c0 <puts>
	    // Create Message Queue
	  OSQCreate ( (OS_Q *)     &Q_STEP_Y,
 80013de:	1dbb      	adds	r3, r7, #6
 80013e0:	2202      	movs	r2, #2
 80013e2:	4916      	ldr	r1, [pc, #88]	; (800143c <AppObjCreate+0xf4>)
 80013e4:	4816      	ldr	r0, [pc, #88]	; (8001440 <AppObjCreate+0xf8>)
 80013e6:	f001 f807 	bl	80023f8 <OSQCreate>
	              (CPU_CHAR *) "STEP_Y Queue",
	              (OS_MSG_QTY) NUM_MSG,
	              (OS_ERR   *) &err);
	  if (err != OS_ERR_NONE)
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d002      	beq.n	80013f6 <AppObjCreate+0xae>
		  APP_TRACE_DBG ("Error OSQCreate: AppObjCreate\n");
 80013f0:	480f      	ldr	r0, [pc, #60]	; (8001430 <AppObjCreate+0xe8>)
 80013f2:	f007 f9e5 	bl	80087c0 <puts>

}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20001f00 	.word	0x20001f00
 8001404:	0800e890 	.word	0x0800e890
 8001408:	20002000 	.word	0x20002000
 800140c:	0800e8a0 	.word	0x0800e8a0
 8001410:	20001f68 	.word	0x20001f68
 8001414:	0800e8c0 	.word	0x0800e8c0
 8001418:	20001fac 	.word	0x20001fac
 800141c:	20002020 	.word	0x20002020
 8001420:	0800e8d0 	.word	0x0800e8d0
 8001424:	20001f48 	.word	0x20001f48
 8001428:	0800e8e0 	.word	0x0800e8e0
 800142c:	20001fd0 	.word	0x20001fd0
 8001430:	0800e8ec 	.word	0x0800e8ec
 8001434:	0800e90c 	.word	0x0800e90c
 8001438:	20001f14 	.word	0x20001f14
 800143c:	0800e91c 	.word	0x0800e91c
 8001440:	20001f7c 	.word	0x20001f7c

08001444 <AppTaskCreate>:
 * \brief Creates one application task.
 * \params none
 * \returns none
 */
static void  AppTaskCreate (void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08c      	sub	sp, #48	; 0x30
 8001448:	af0a      	add	r7, sp, #40	; 0x28
  OS_ERR      err;

  // create AppTask_COM
  OSTaskCreate ( (OS_TCB     *) &AppTaskComTCB,
 800144a:	1dbb      	adds	r3, r7, #6
 800144c:	9308      	str	r3, [sp, #32]
 800144e:	2303      	movs	r3, #3
 8001450:	9307      	str	r3, [sp, #28]
 8001452:	2300      	movs	r3, #0
 8001454:	9306      	str	r3, [sp, #24]
 8001456:	2300      	movs	r3, #0
 8001458:	9305      	str	r3, [sp, #20]
 800145a:	2300      	movs	r3, #0
 800145c:	9304      	str	r3, [sp, #16]
 800145e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001462:	9303      	str	r3, [sp, #12]
 8001464:	2319      	movs	r3, #25
 8001466:	9302      	str	r3, [sp, #8]
 8001468:	4b28      	ldr	r3, [pc, #160]	; (800150c <AppTaskCreate+0xc8>)
 800146a:	9301      	str	r3, [sp, #4]
 800146c:	230a      	movs	r3, #10
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	2300      	movs	r3, #0
 8001472:	4a27      	ldr	r2, [pc, #156]	; (8001510 <AppTaskCreate+0xcc>)
 8001474:	4927      	ldr	r1, [pc, #156]	; (8001514 <AppTaskCreate+0xd0>)
 8001476:	4828      	ldr	r0, [pc, #160]	; (8001518 <AppTaskCreate+0xd4>)
 8001478:	f001 fa02 	bl	8002880 <OSTaskCreate>
           (OS_MSG_QTY) 0u,
           (OS_TICK) 0u,
           (void       *) 0,
           (OS_OPT) (OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
           (OS_ERR     *) &err);
  if (err != OS_ERR_NONE)
 800147c:	88fb      	ldrh	r3, [r7, #6]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d002      	beq.n	8001488 <AppTaskCreate+0x44>
    APP_TRACE_DBG ("Error OSTaskCreate: AppTaskCreate\n");
 8001482:	4826      	ldr	r0, [pc, #152]	; (800151c <AppTaskCreate+0xd8>)
 8001484:	f007 f99c 	bl	80087c0 <puts>

  // create AppTask_IO
    OSTaskCreate ( (OS_TCB     *) &AppTaskEndstopsTCB,
 8001488:	1dbb      	adds	r3, r7, #6
 800148a:	9308      	str	r3, [sp, #32]
 800148c:	2303      	movs	r3, #3
 800148e:	9307      	str	r3, [sp, #28]
 8001490:	2300      	movs	r3, #0
 8001492:	9306      	str	r3, [sp, #24]
 8001494:	2300      	movs	r3, #0
 8001496:	9305      	str	r3, [sp, #20]
 8001498:	2300      	movs	r3, #0
 800149a:	9304      	str	r3, [sp, #16]
 800149c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014a0:	9303      	str	r3, [sp, #12]
 80014a2:	2319      	movs	r3, #25
 80014a4:	9302      	str	r3, [sp, #8]
 80014a6:	4b1e      	ldr	r3, [pc, #120]	; (8001520 <AppTaskCreate+0xdc>)
 80014a8:	9301      	str	r3, [sp, #4]
 80014aa:	230b      	movs	r3, #11
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	2300      	movs	r3, #0
 80014b0:	4a1c      	ldr	r2, [pc, #112]	; (8001524 <AppTaskCreate+0xe0>)
 80014b2:	491d      	ldr	r1, [pc, #116]	; (8001528 <AppTaskCreate+0xe4>)
 80014b4:	481d      	ldr	r0, [pc, #116]	; (800152c <AppTaskCreate+0xe8>)
 80014b6:	f001 f9e3 	bl	8002880 <OSTaskCreate>
             (OS_MSG_QTY) 0u,
             (OS_TICK) 0u,
             (void       *) 0,
             (OS_OPT) (OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
             (OS_ERR     *) &err);
    if (err != OS_ERR_NONE)
 80014ba:	88fb      	ldrh	r3, [r7, #6]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d002      	beq.n	80014c6 <AppTaskCreate+0x82>
      APP_TRACE_DBG ("Error OSTaskCreate: AppTaskCreate\n");
 80014c0:	4816      	ldr	r0, [pc, #88]	; (800151c <AppTaskCreate+0xd8>)
 80014c2:	f007 f97d 	bl	80087c0 <puts>


  // create AppTask_IO
        OSTaskCreate ( (OS_TCB     *) &AppTaskServoTCB,
 80014c6:	1dbb      	adds	r3, r7, #6
 80014c8:	9308      	str	r3, [sp, #32]
 80014ca:	2303      	movs	r3, #3
 80014cc:	9307      	str	r3, [sp, #28]
 80014ce:	2300      	movs	r3, #0
 80014d0:	9306      	str	r3, [sp, #24]
 80014d2:	2300      	movs	r3, #0
 80014d4:	9305      	str	r3, [sp, #20]
 80014d6:	2300      	movs	r3, #0
 80014d8:	9304      	str	r3, [sp, #16]
 80014da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014de:	9303      	str	r3, [sp, #12]
 80014e0:	2319      	movs	r3, #25
 80014e2:	9302      	str	r3, [sp, #8]
 80014e4:	4b12      	ldr	r3, [pc, #72]	; (8001530 <AppTaskCreate+0xec>)
 80014e6:	9301      	str	r3, [sp, #4]
 80014e8:	230b      	movs	r3, #11
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	2300      	movs	r3, #0
 80014ee:	4a11      	ldr	r2, [pc, #68]	; (8001534 <AppTaskCreate+0xf0>)
 80014f0:	4911      	ldr	r1, [pc, #68]	; (8001538 <AppTaskCreate+0xf4>)
 80014f2:	4812      	ldr	r0, [pc, #72]	; (800153c <AppTaskCreate+0xf8>)
 80014f4:	f001 f9c4 	bl	8002880 <OSTaskCreate>
                 (OS_MSG_QTY) 0u,
                 (OS_TICK) 0u,
                 (void       *) 0,
                 (OS_OPT) (OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
                 (OS_ERR     *) &err);
        if (err != OS_ERR_NONE)
 80014f8:	88fb      	ldrh	r3, [r7, #6]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d002      	beq.n	8001504 <AppTaskCreate+0xc0>
          APP_TRACE_DBG ("Error OSTaskCreate: AppTaskCreate\n");
 80014fe:	4807      	ldr	r0, [pc, #28]	; (800151c <AppTaskCreate+0xd8>)
 8001500:	f007 f95e 	bl	80087c0 <puts>

}
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000ea0 	.word	0x20000ea0
 8001510:	08001541 	.word	0x08001541
 8001514:	0800e92c 	.word	0x0800e92c
 8001518:	20001aa0 	.word	0x20001aa0
 800151c:	0800e934 	.word	0x0800e934
 8001520:	200012a0 	.word	0x200012a0
 8001524:	0800168d 	.word	0x0800168d
 8001528:	0800e958 	.word	0x0800e958
 800152c:	20001b60 	.word	0x20001b60
 8001530:	200016a0 	.word	0x200016a0
 8001534:	080018b5 	.word	0x080018b5
 8001538:	0800e968 	.word	0x0800e968
 800153c:	20001c20 	.word	0x20001c20

08001540 <AppTaskCom>:
 *        (3) Launch a terminal program and connect with 9600-8N1
 *            Enter strings like: #12345$, #abc$, etc.
 *            The XMC will respond with: XMC: 12345, XMC: abc, etc.
 */
static void AppTaskCom (void *p_arg)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b09c      	sub	sp, #112	; 0x70
 8001544:	af02      	add	r7, sp, #8
 8001546:	6078      	str	r0, [r7, #4]
  void        *p_msg;
  OS_ERR      err;
  OS_MSG_SIZE msg_size;
  CPU_TS      ts;
  CPU_CHAR    msg[MAX_MSG_LENGTH];
  CPU_INT08U  i = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  CPU_CHAR    debug_msg[MAX_MSG_LENGTH + 30];
  int rv=0;
 800154e:	2300      	movs	r3, #0
 8001550:	663b      	str	r3, [r7, #96]	; 0x60
  (void) p_arg;

  APP_TRACE_INFO ("Entering AppTaskCom ...\n");
 8001552:	4842      	ldr	r0, [pc, #264]	; (800165c <AppTaskCom+0x11c>)
 8001554:	f007 f934 	bl	80087c0 <puts>

  while (DEF_TRUE) {
	  // empty the message buffer
	  memset (&msg, 0, MAX_MSG_LENGTH);
 8001558:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800155c:	2214      	movs	r2, #20
 800155e:	2100      	movs	r1, #0
 8001560:	4618      	mov	r0, r3
 8001562:	f007 f897 	bl	8008694 <memset>

	  // wait until a message is received
	  p_msg = OSQPend (&UART_ISR,
 8001566:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800156a:	f107 035a 	add.w	r3, r7, #90	; 0x5a
 800156e:	9301      	str	r3, [sp, #4]
 8001570:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	4613      	mov	r3, r2
 8001578:	2200      	movs	r2, #0
 800157a:	2100      	movs	r1, #0
 800157c:	4838      	ldr	r0, [pc, #224]	; (8001660 <AppTaskCom+0x120>)
 800157e:	f000 ff8b 	bl	8002498 <OSQPend>
 8001582:	65f8      	str	r0, [r7, #92]	; 0x5c
			  0,
			  OS_OPT_PEND_BLOCKING,
	          &msg_size,
	          &ts,
	          &err);
	  if (err != OS_ERR_NONE && err != OS_ERR_TIMEOUT)
 8001584:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001588:	2b00      	cmp	r3, #0
 800158a:	d008      	beq.n	800159e <AppTaskCom+0x5e>
 800158c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001590:	f247 22d9 	movw	r2, #29401	; 0x72d9
 8001594:	4293      	cmp	r3, r2
 8001596:	d002      	beq.n	800159e <AppTaskCom+0x5e>
		  APP_TRACE_DBG ("Error OSQPend: AppTaskCom\n");
 8001598:	4832      	ldr	r0, [pc, #200]	; (8001664 <AppTaskCom+0x124>)
 800159a:	f007 f911 	bl	80087c0 <puts>
	  // obtain message we received
	  memcpy (msg, (CPU_CHAR*) p_msg, msg_size - 1);
 800159e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80015a2:	3b01      	subs	r3, #1
 80015a4:	461a      	mov	r2, r3
 80015a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015aa:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff f839 	bl	8000624 <memcpy>

	  // release the memory partition allocated in the UART service routine
	  OSMemPut (&Mem_Partition, p_msg, &err);
 80015b2:	f107 035a 	add.w	r3, r7, #90	; 0x5a
 80015b6:	461a      	mov	r2, r3
 80015b8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80015ba:	482b      	ldr	r0, [pc, #172]	; (8001668 <AppTaskCom+0x128>)
 80015bc:	f004 fc7c 	bl	8005eb8 <OSMemPut>
	  if (err != OS_ERR_NONE)
 80015c0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d002      	beq.n	80015ce <AppTaskCom+0x8e>
	 	  APP_TRACE_DBG ("Error OSMemPut: AppTaskCom\n");
 80015c8:	4828      	ldr	r0, [pc, #160]	; (800166c <AppTaskCom+0x12c>)
 80015ca:	f007 f8f9 	bl	80087c0 <puts>

	  p_msg = (CPU_CHAR *) OSMemGet (&Mem_Partition1, &err);
 80015ce:	f107 035a 	add.w	r3, r7, #90	; 0x5a
 80015d2:	4619      	mov	r1, r3
 80015d4:	4826      	ldr	r0, [pc, #152]	; (8001670 <AppTaskCom+0x130>)
 80015d6:	f004 fc37 	bl	8005e48 <OSMemGet>
 80015da:	65f8      	str	r0, [r7, #92]	; 0x5c
	  if (err != OS_ERR_NONE)
 80015dc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d002      	beq.n	80015ea <AppTaskCom+0xaa>
	     	APP_TRACE_DBG ("Error OSMemGet1: AppTaskCom\n");
 80015e4:	4823      	ldr	r0, [pc, #140]	; (8001674 <AppTaskCom+0x134>)
 80015e6:	f007 f8eb 	bl	80087c0 <puts>
	  sprintf(p_msg,"%s\n",msg);
 80015ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015ee:	461a      	mov	r2, r3
 80015f0:	4921      	ldr	r1, [pc, #132]	; (8001678 <AppTaskCom+0x138>)
 80015f2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80015f4:	f007 f8ec 	bl	80087d0 <sprintf>
	  OSQPost ( 	(OS_Q      *) &Q_STEP_X,
 80015f8:	f107 035a 	add.w	r3, r7, #90	; 0x5a
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2300      	movs	r3, #0
 8001600:	2214      	movs	r2, #20
 8001602:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001604:	481d      	ldr	r0, [pc, #116]	; (800167c <AppTaskCom+0x13c>)
 8001606:	f001 f83f 	bl	8002688 <OSQPost>
			  (void      *) p_msg,
			  (OS_MSG_SIZE) MAX_MSG_LENGTH,
			  (OS_OPT)      OS_OPT_POST_FIFO,
	  	      (OS_ERR    *) &err);
	  if (err != OS_ERR_NONE)
 800160a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800160e:	2b00      	cmp	r3, #0
 8001610:	d002      	beq.n	8001618 <AppTaskCom+0xd8>
		  APP_TRACE_DBG ("Error OSQPost1: AppTaskCom\n");
 8001612:	481b      	ldr	r0, [pc, #108]	; (8001680 <AppTaskCom+0x140>)
 8001614:	f007 f8d4 	bl	80087c0 <puts>



	  // Check if done
	  p_msg = OSQPend (&Q_STEP_X,
 8001618:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800161c:	f107 035a 	add.w	r3, r7, #90	; 0x5a
 8001620:	9301      	str	r3, [sp, #4]
 8001622:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	4613      	mov	r3, r2
 800162a:	2200      	movs	r2, #0
 800162c:	2100      	movs	r1, #0
 800162e:	4813      	ldr	r0, [pc, #76]	; (800167c <AppTaskCom+0x13c>)
 8001630:	f000 ff32 	bl	8002498 <OSQPend>
 8001634:	65f8      	str	r0, [r7, #92]	; 0x5c
	  		0,
	  	    OS_OPT_PEND_BLOCKING,
	        &msg_size,
	 	    &ts,
	  		&err);
	  if (err != OS_ERR_NONE)
 8001636:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800163a:	2b00      	cmp	r3, #0
 800163c:	d002      	beq.n	8001644 <AppTaskCom+0x104>
	  		      APP_TRACE_DBG ("Error OSQPend1: AppSTEPY\n");
 800163e:	4811      	ldr	r0, [pc, #68]	; (8001684 <AppTaskCom+0x144>)
 8001640:	f007 f8be 	bl	80087c0 <puts>
	  OSMemPut (&Mem_Partition1, p_msg, &err);
 8001644:	f107 035a 	add.w	r3, r7, #90	; 0x5a
 8001648:	461a      	mov	r2, r3
 800164a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800164c:	4808      	ldr	r0, [pc, #32]	; (8001670 <AppTaskCom+0x130>)
 800164e:	f004 fc33 	bl	8005eb8 <OSMemPut>
	  XMC_UART_CH_Transmit (XMC_UART1_CH1, ACK);                           // <19>
 8001652:	2106      	movs	r1, #6
 8001654:	480c      	ldr	r0, [pc, #48]	; (8001688 <AppTaskCom+0x148>)
 8001656:	f006 fe6d 	bl	8008334 <XMC_UART_CH_Transmit>
  }
 800165a:	e77d      	b.n	8001558 <AppTaskCom+0x18>
 800165c:	0800e978 	.word	0x0800e978
 8001660:	20001fd0 	.word	0x20001fd0
 8001664:	0800e990 	.word	0x0800e990
 8001668:	20002000 	.word	0x20002000
 800166c:	0800e9ac 	.word	0x0800e9ac
 8001670:	20001fac 	.word	0x20001fac
 8001674:	0800e9c8 	.word	0x0800e9c8
 8001678:	0800e9e4 	.word	0x0800e9e4
 800167c:	20001f14 	.word	0x20001f14
 8001680:	0800e9e8 	.word	0x0800e9e8
 8001684:	0800ea04 	.word	0x0800ea04
 8001688:	48020200 	.word	0x48020200

0800168c <AppTaskStepper_Y>:
}
/***********************************AppTask_Io*/
void AppTaskStepper_Y (void *p_arg)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b096      	sub	sp, #88	; 0x58
 8001690:	af02      	add	r7, sp, #8
 8001692:	6078      	str	r0, [r7, #4]
	void    *q_msg;
	OS_MSG_SIZE msg_size;
	CPU_TS      ts=0;
 8001694:	2300      	movs	r3, #0
 8001696:	63bb      	str	r3, [r7, #56]	; 0x38
	OS_ERR      err;
	CPU_CHAR    msg[MAX_MSG_LENGTH];
	CPU_INT08U 	i;
	int  times = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	64bb      	str	r3, [r7, #72]	; 0x48
	CPU_CHAR delay[5];
	CPU_CHAR steps[5];
	CPU_CHAR dir[2];
	char *msg_p=0;
 800169c:	2300      	movs	r3, #0
 800169e:	647b      	str	r3, [r7, #68]	; 0x44
	APP_TRACE_INFO ("Entering AppTaskStepperY ...\n");
 80016a0:	487b      	ldr	r0, [pc, #492]	; (8001890 <AppTaskStepper_Y+0x204>)
 80016a2:	f007 f88d 	bl	80087c0 <puts>

	while(1){
	// Pending for message
		q_msg = OSQPend (&Q_STEP_Y,
 80016a6:	f107 023e 	add.w	r2, r7, #62	; 0x3e
 80016aa:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80016ae:	9301      	str	r3, [sp, #4]
 80016b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80016b4:	9300      	str	r3, [sp, #0]
 80016b6:	4613      	mov	r3, r2
 80016b8:	2200      	movs	r2, #0
 80016ba:	2100      	movs	r1, #0
 80016bc:	4875      	ldr	r0, [pc, #468]	; (8001894 <AppTaskStepper_Y+0x208>)
 80016be:	f000 feeb 	bl	8002498 <OSQPend>
 80016c2:	6438      	str	r0, [r7, #64]	; 0x40
				0,
		        OS_OPT_PEND_BLOCKING,
		        &msg_size,
		        &ts,
				&err);
		if (err != OS_ERR_NONE)
 80016c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d002      	beq.n	80016d0 <AppTaskStepper_Y+0x44>
		      APP_TRACE_DBG ("Error OSQPend1: AppSTEPY\n");
 80016ca:	4873      	ldr	r0, [pc, #460]	; (8001898 <AppTaskStepper_Y+0x20c>)
 80016cc:	f007 f878 	bl	80087c0 <puts>
		// obtain message we received
		memcpy (msg, (CPU_CHAR*) q_msg, msg_size - 1);
 80016d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80016d2:	3b01      	subs	r3, #1
 80016d4:	461a      	mov	r2, r3
 80016d6:	f107 0320 	add.w	r3, r7, #32
 80016da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80016dc:	4618      	mov	r0, r3
 80016de:	f7fe ffa1 	bl	8000624 <memcpy>
		APP_TRACE_INFO("GOT Y MSG\n");
 80016e2:	486e      	ldr	r0, [pc, #440]	; (800189c <AppTaskStepper_Y+0x210>)
 80016e4:	f007 f86c 	bl	80087c0 <puts>
		sprintf(msg,"%s\n",msg);
 80016e8:	f107 0220 	add.w	r2, r7, #32
 80016ec:	f107 0320 	add.w	r3, r7, #32
 80016f0:	496b      	ldr	r1, [pc, #428]	; (80018a0 <AppTaskStepper_Y+0x214>)
 80016f2:	4618      	mov	r0, r3
 80016f4:	f007 f86c 	bl	80087d0 <sprintf>
		APP_TRACE_INFO(msg);
 80016f8:	f107 0320 	add.w	r3, r7, #32
 80016fc:	4618      	mov	r0, r3
 80016fe:	f007 f817 	bl	8008730 <printf>
		// release the memory partition
	    OSMemPut (&Mem_Partition2, q_msg, &err);                              // <18>
 8001702:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8001706:	461a      	mov	r2, r3
 8001708:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800170a:	4866      	ldr	r0, [pc, #408]	; (80018a4 <AppTaskStepper_Y+0x218>)
 800170c:	f004 fbd4 	bl	8005eb8 <OSMemPut>
	    if (err != OS_ERR_NONE)
 8001710:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001712:	2b00      	cmp	r3, #0
 8001714:	d002      	beq.n	800171c <AppTaskStepper_Y+0x90>
	    	APP_TRACE_DBG ("Error OSMemPut1: AppSTEPY\n");
 8001716:	4864      	ldr	r0, [pc, #400]	; (80018a8 <AppTaskStepper_Y+0x21c>)
 8001718:	f007 f852 	bl	80087c0 <puts>
	//DECODE
	    msg_p=&msg[0];
 800171c:	f107 0320 	add.w	r3, r7, #32
 8001720:	647b      	str	r3, [r7, #68]	; 0x44
	    memset(&delay,0,5);
 8001722:	f107 0318 	add.w	r3, r7, #24
 8001726:	2205      	movs	r2, #5
 8001728:	2100      	movs	r1, #0
 800172a:	4618      	mov	r0, r3
 800172c:	f006 ffb2 	bl	8008694 <memset>
	    i=0;
 8001730:	2300      	movs	r3, #0
 8001732:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	    while(*msg_p!= ':'){
 8001736:	e011      	b.n	800175c <AppTaskStepper_Y+0xd0>
	    	delay[i]=*msg_p;
 8001738:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800173c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800173e:	f992 2000 	ldrsb.w	r2, [r2]
 8001742:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001746:	440b      	add	r3, r1
 8001748:	f803 2c38 	strb.w	r2, [r3, #-56]
	    	msg_p++;
 800174c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800174e:	3301      	adds	r3, #1
 8001750:	647b      	str	r3, [r7, #68]	; 0x44
	       	i++;
 8001752:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001756:	3301      	adds	r3, #1
 8001758:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	    	APP_TRACE_DBG ("Error OSMemPut1: AppSTEPY\n");
	//DECODE
	    msg_p=&msg[0];
	    memset(&delay,0,5);
	    i=0;
	    while(*msg_p!= ':'){
 800175c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800175e:	f993 3000 	ldrsb.w	r3, [r3]
 8001762:	2b3a      	cmp	r3, #58	; 0x3a
 8001764:	d1e8      	bne.n	8001738 <AppTaskStepper_Y+0xac>
	    	delay[i]=*msg_p;
	    	msg_p++;
	       	i++;
	   	}
 	    while(*msg_p== ':'){
 8001766:	e002      	b.n	800176e <AppTaskStepper_Y+0xe2>
 	    	msg_p++;
 8001768:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800176a:	3301      	adds	r3, #1
 800176c:	647b      	str	r3, [r7, #68]	; 0x44
	    while(*msg_p!= ':'){
	    	delay[i]=*msg_p;
	    	msg_p++;
	       	i++;
	   	}
 	    while(*msg_p== ':'){
 800176e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001770:	f993 3000 	ldrsb.w	r3, [r3]
 8001774:	2b3a      	cmp	r3, #58	; 0x3a
 8001776:	d0f7      	beq.n	8001768 <AppTaskStepper_Y+0xdc>
 	    	msg_p++;
   	   	}
   	    memset(&steps,0,5);
 8001778:	f107 0310 	add.w	r3, r7, #16
 800177c:	2205      	movs	r2, #5
 800177e:	2100      	movs	r1, #0
 8001780:	4618      	mov	r0, r3
 8001782:	f006 ff87 	bl	8008694 <memset>
   	    i=0;
 8001786:	2300      	movs	r3, #0
 8001788:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	    while(*msg_p != ':'){
 800178c:	e011      	b.n	80017b2 <AppTaskStepper_Y+0x126>
	    	steps[i]=*msg_p;
 800178e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001792:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001794:	f992 2000 	ldrsb.w	r2, [r2]
 8001798:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800179c:	440b      	add	r3, r1
 800179e:	f803 2c40 	strb.w	r2, [r3, #-64]
	    	msg_p++;
 80017a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017a4:	3301      	adds	r3, #1
 80017a6:	647b      	str	r3, [r7, #68]	; 0x44
	       	i++;
 80017a8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80017ac:	3301      	adds	r3, #1
 80017ae:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 	    while(*msg_p== ':'){
 	    	msg_p++;
   	   	}
   	    memset(&steps,0,5);
   	    i=0;
	    while(*msg_p != ':'){
 80017b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017b4:	f993 3000 	ldrsb.w	r3, [r3]
 80017b8:	2b3a      	cmp	r3, #58	; 0x3a
 80017ba:	d1e8      	bne.n	800178e <AppTaskStepper_Y+0x102>
	    	steps[i]=*msg_p;
	    	msg_p++;
	       	i++;
	   	}
	    while(*msg_p== ':'){
 80017bc:	e002      	b.n	80017c4 <AppTaskStepper_Y+0x138>
	       	msg_p++;
 80017be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017c0:	3301      	adds	r3, #1
 80017c2:	647b      	str	r3, [r7, #68]	; 0x44
	    while(*msg_p != ':'){
	    	steps[i]=*msg_p;
	    	msg_p++;
	       	i++;
	   	}
	    while(*msg_p== ':'){
 80017c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017c6:	f993 3000 	ldrsb.w	r3, [r3]
 80017ca:	2b3a      	cmp	r3, #58	; 0x3a
 80017cc:	d0f7      	beq.n	80017be <AppTaskStepper_Y+0x132>
	       	msg_p++;
	    }
	    memset(&dir,0,2);
 80017ce:	f107 030c 	add.w	r3, r7, #12
 80017d2:	2202      	movs	r2, #2
 80017d4:	2100      	movs	r1, #0
 80017d6:	4618      	mov	r0, r3
 80017d8:	f006 ff5c 	bl	8008694 <memset>
	    i=0;
 80017dc:	2300      	movs	r3, #0
 80017de:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	    while(*msg_p != '\0'){
 80017e2:	e011      	b.n	8001808 <AppTaskStepper_Y+0x17c>
	   	   	dir[i]=*msg_p;
 80017e4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80017e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80017ea:	f992 2000 	ldrsb.w	r2, [r2]
 80017ee:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80017f2:	440b      	add	r3, r1
 80017f4:	f803 2c44 	strb.w	r2, [r3, #-68]
	   	   	msg_p++;
 80017f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017fa:	3301      	adds	r3, #1
 80017fc:	647b      	str	r3, [r7, #68]	; 0x44
	       	i++;
 80017fe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001802:	3301      	adds	r3, #1
 8001804:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	    while(*msg_p== ':'){
	       	msg_p++;
	    }
	    memset(&dir,0,2);
	    i=0;
	    while(*msg_p != '\0'){
 8001808:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800180a:	f993 3000 	ldrsb.w	r3, [r3]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1e8      	bne.n	80017e4 <AppTaskStepper_Y+0x158>
	   	   	dir[i]=*msg_p;
	   	   	msg_p++;
	       	i++;
	    }
	//Plott
	    if(atoi(delay)==0){
 8001812:	f107 0318 	add.w	r3, r7, #24
 8001816:	4618      	mov	r0, r3
 8001818:	f006 ff10 	bl	800863c <atoi>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d118      	bne.n	8001854 <AppTaskStepper_Y+0x1c8>
	    	times=atoi(steps);
 8001822:	f107 0310 	add.w	r3, r7, #16
 8001826:	4618      	mov	r0, r3
 8001828:	f006 ff08 	bl	800863c <atoi>
 800182c:	64b8      	str	r0, [r7, #72]	; 0x48
	    	while(times--){
 800182e:	e00c      	b.n	800184a <AppTaskStepper_Y+0x1be>
	    		if(atoi(dir)){
 8001830:	f107 030c 	add.w	r3, r7, #12
 8001834:	4618      	mov	r0, r3
 8001836:	f006 ff01 	bl	800863c <atoi>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d002      	beq.n	8001846 <AppTaskStepper_Y+0x1ba>
	    			_mcp23s08_step_posy();
 8001840:	f000 fa2a 	bl	8001c98 <_mcp23s08_step_posy>
 8001844:	e001      	b.n	800184a <AppTaskStepper_Y+0x1be>
	    		}else{
	    			_mcp23s08_step_negy();
 8001846:	f000 fa8d 	bl	8001d64 <_mcp23s08_step_negy>
	       	i++;
	    }
	//Plott
	    if(atoi(delay)==0){
	    	times=atoi(steps);
	    	while(times--){
 800184a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800184c:	1e5a      	subs	r2, r3, #1
 800184e:	64ba      	str	r2, [r7, #72]	; 0x48
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1ed      	bne.n	8001830 <AppTaskStepper_Y+0x1a4>
	    			_mcp23s08_step_negy();
	    		}
	    	}
	    }
	//DONE
	    q_msg = (CPU_CHAR *) OSMemGet (&Mem_Partition2, &err);
 8001854:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8001858:	4619      	mov	r1, r3
 800185a:	4812      	ldr	r0, [pc, #72]	; (80018a4 <AppTaskStepper_Y+0x218>)
 800185c:	f004 faf4 	bl	8005e48 <OSMemGet>
 8001860:	6438      	str	r0, [r7, #64]	; 0x40
	    if (err != OS_ERR_NONE)
 8001862:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001864:	2b00      	cmp	r3, #0
 8001866:	d002      	beq.n	800186e <AppTaskStepper_Y+0x1e2>
	    	APP_TRACE_DBG ("Error OSMemGet1: TaskSTePY\n");
 8001868:	4810      	ldr	r0, [pc, #64]	; (80018ac <AppTaskStepper_Y+0x220>)
 800186a:	f006 ffa9 	bl	80087c0 <puts>
	    OSQPost ( 	(OS_Q      *) &Q_STEP_Y,
 800186e:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	2300      	movs	r3, #0
 8001876:	2214      	movs	r2, #20
 8001878:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800187a:	4806      	ldr	r0, [pc, #24]	; (8001894 <AppTaskStepper_Y+0x208>)
 800187c:	f000 ff04 	bl	8002688 <OSQPost>
	         		(void      *) q_msg,
	    	       	(OS_MSG_SIZE) MAX_MSG_LENGTH,
	    	       	(OS_OPT)      OS_OPT_POST_FIFO,
	    	        (OS_ERR    *) &err);
	   	if (err != OS_ERR_NONE)
 8001880:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001882:	2b00      	cmp	r3, #0
 8001884:	f43f af0f 	beq.w	80016a6 <AppTaskStepper_Y+0x1a>
	   		APP_TRACE_DBG ("Error OSQPost1: TaskSTePY\n");
 8001888:	4809      	ldr	r0, [pc, #36]	; (80018b0 <AppTaskStepper_Y+0x224>)
 800188a:	f006 ff99 	bl	80087c0 <puts>
	}//Whileend
 800188e:	e70a      	b.n	80016a6 <AppTaskStepper_Y+0x1a>
 8001890:	0800ea20 	.word	0x0800ea20
 8001894:	20001f7c 	.word	0x20001f7c
 8001898:	0800ea04 	.word	0x0800ea04
 800189c:	0800ea40 	.word	0x0800ea40
 80018a0:	0800e9e4 	.word	0x0800e9e4
 80018a4:	20001f48 	.word	0x20001f48
 80018a8:	0800ea4c 	.word	0x0800ea4c
 80018ac:	0800ea68 	.word	0x0800ea68
 80018b0:	0800ea84 	.word	0x0800ea84

080018b4 <AppTaskStepper_X>:
}

//Servo
void AppTaskStepper_X (void *p_arg){
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b096      	sub	sp, #88	; 0x58
 80018b8:	af02      	add	r7, sp, #8
 80018ba:	6078      	str	r0, [r7, #4]
	void    *q_msg;
	OS_MSG_SIZE msg_size;
	CPU_TS      ts=0;
 80018bc:	2300      	movs	r3, #0
 80018be:	63bb      	str	r3, [r7, #56]	; 0x38
	OS_ERR      err;
	CPU_CHAR    msg[MAX_MSG_LENGTH];
	CPU_INT08U 	i;
	int  times = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	64bb      	str	r3, [r7, #72]	; 0x48
	CPU_CHAR delay[5];
	CPU_CHAR steps[5];
	CPU_CHAR dir[2];
	char *msg_p=0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	647b      	str	r3, [r7, #68]	; 0x44

	APP_TRACE_INFO ("Entering AppTaskStepperX ...\n");
 80018c8:	487b      	ldr	r0, [pc, #492]	; (8001ab8 <AppTaskStepper_X+0x204>)
 80018ca:	f006 ff79 	bl	80087c0 <puts>

	while(1){
	// Pending for message
		q_msg = OSQPend (&Q_STEP_X,
 80018ce:	f107 023e 	add.w	r2, r7, #62	; 0x3e
 80018d2:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80018d6:	9301      	str	r3, [sp, #4]
 80018d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	4613      	mov	r3, r2
 80018e0:	2200      	movs	r2, #0
 80018e2:	2100      	movs	r1, #0
 80018e4:	4875      	ldr	r0, [pc, #468]	; (8001abc <AppTaskStepper_X+0x208>)
 80018e6:	f000 fdd7 	bl	8002498 <OSQPend>
 80018ea:	6438      	str	r0, [r7, #64]	; 0x40
				0,
		        OS_OPT_PEND_BLOCKING,
		        &msg_size,
			    &ts,
				&err);
		if (err != OS_ERR_NONE)
 80018ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d002      	beq.n	80018f8 <AppTaskStepper_X+0x44>
		      APP_TRACE_DBG ("Error OSQPend1: AppTaskStepperX\n");
 80018f2:	4873      	ldr	r0, [pc, #460]	; (8001ac0 <AppTaskStepper_X+0x20c>)
 80018f4:	f006 ff64 	bl	80087c0 <puts>
			// obtain message we received
		memcpy (msg, (CPU_CHAR*) q_msg, msg_size - 1);
 80018f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80018fa:	3b01      	subs	r3, #1
 80018fc:	461a      	mov	r2, r3
 80018fe:	f107 0320 	add.w	r3, r7, #32
 8001902:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001904:	4618      	mov	r0, r3
 8001906:	f7fe fe8d 	bl	8000624 <memcpy>
		APP_TRACE_INFO("GOT X MSG\n");
 800190a:	486e      	ldr	r0, [pc, #440]	; (8001ac4 <AppTaskStepper_X+0x210>)
 800190c:	f006 ff58 	bl	80087c0 <puts>
		sprintf(msg,"%s\n",msg);
 8001910:	f107 0220 	add.w	r2, r7, #32
 8001914:	f107 0320 	add.w	r3, r7, #32
 8001918:	496b      	ldr	r1, [pc, #428]	; (8001ac8 <AppTaskStepper_X+0x214>)
 800191a:	4618      	mov	r0, r3
 800191c:	f006 ff58 	bl	80087d0 <sprintf>
		APP_TRACE_INFO(msg);
 8001920:	f107 0320 	add.w	r3, r7, #32
 8001924:	4618      	mov	r0, r3
 8001926:	f006 ff03 	bl	8008730 <printf>
		// release the memory partition
	    OSMemPut (&Mem_Partition1, q_msg, &err);                              // <18>
 800192a:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800192e:	461a      	mov	r2, r3
 8001930:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001932:	4866      	ldr	r0, [pc, #408]	; (8001acc <AppTaskStepper_X+0x218>)
 8001934:	f004 fac0 	bl	8005eb8 <OSMemPut>
	    if (err != OS_ERR_NONE)
 8001938:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <AppTaskStepper_X+0x90>
	    	APP_TRACE_DBG ("Error OSMemPut1: AppTaskStepperX\n");
 800193e:	4864      	ldr	r0, [pc, #400]	; (8001ad0 <AppTaskStepper_X+0x21c>)
 8001940:	f006 ff3e 	bl	80087c0 <puts>
		//DECODE
		msg_p=&msg[0];
 8001944:	f107 0320 	add.w	r3, r7, #32
 8001948:	647b      	str	r3, [r7, #68]	; 0x44
	   memset(&delay,0,5);
 800194a:	f107 0318 	add.w	r3, r7, #24
 800194e:	2205      	movs	r2, #5
 8001950:	2100      	movs	r1, #0
 8001952:	4618      	mov	r0, r3
 8001954:	f006 fe9e 	bl	8008694 <memset>
	   i=0;
 8001958:	2300      	movs	r3, #0
 800195a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	   while(*msg_p!= ':'){
 800195e:	e011      	b.n	8001984 <AppTaskStepper_X+0xd0>
	    	delay[i]=*msg_p;
 8001960:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001964:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001966:	f992 2000 	ldrsb.w	r2, [r2]
 800196a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800196e:	440b      	add	r3, r1
 8001970:	f803 2c38 	strb.w	r2, [r3, #-56]
	    	msg_p++;
 8001974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001976:	3301      	adds	r3, #1
 8001978:	647b      	str	r3, [r7, #68]	; 0x44
	       	i++;
 800197a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800197e:	3301      	adds	r3, #1
 8001980:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	    	APP_TRACE_DBG ("Error OSMemPut1: AppTaskStepperX\n");
		//DECODE
		msg_p=&msg[0];
	   memset(&delay,0,5);
	   i=0;
	   while(*msg_p!= ':'){
 8001984:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001986:	f993 3000 	ldrsb.w	r3, [r3]
 800198a:	2b3a      	cmp	r3, #58	; 0x3a
 800198c:	d1e8      	bne.n	8001960 <AppTaskStepper_X+0xac>
	    	delay[i]=*msg_p;
	    	msg_p++;
	       	i++;
	   	}
	    while(*msg_p== ':'){
 800198e:	e002      	b.n	8001996 <AppTaskStepper_X+0xe2>
	    	msg_p++;
 8001990:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001992:	3301      	adds	r3, #1
 8001994:	647b      	str	r3, [r7, #68]	; 0x44
	   while(*msg_p!= ':'){
	    	delay[i]=*msg_p;
	    	msg_p++;
	       	i++;
	   	}
	    while(*msg_p== ':'){
 8001996:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001998:	f993 3000 	ldrsb.w	r3, [r3]
 800199c:	2b3a      	cmp	r3, #58	; 0x3a
 800199e:	d0f7      	beq.n	8001990 <AppTaskStepper_X+0xdc>
	    	msg_p++;
	   	}
	    memset(&steps,0,5);
 80019a0:	f107 0310 	add.w	r3, r7, #16
 80019a4:	2205      	movs	r2, #5
 80019a6:	2100      	movs	r1, #0
 80019a8:	4618      	mov	r0, r3
 80019aa:	f006 fe73 	bl	8008694 <memset>
	    i=0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		while(*msg_p != ':'){
 80019b4:	e011      	b.n	80019da <AppTaskStepper_X+0x126>
		 	steps[i]=*msg_p;
 80019b6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80019ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80019bc:	f992 2000 	ldrsb.w	r2, [r2]
 80019c0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80019c4:	440b      	add	r3, r1
 80019c6:	f803 2c40 	strb.w	r2, [r3, #-64]
		   	msg_p++;
 80019ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019cc:	3301      	adds	r3, #1
 80019ce:	647b      	str	r3, [r7, #68]	; 0x44
	    	i++;
 80019d0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80019d4:	3301      	adds	r3, #1
 80019d6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	    while(*msg_p== ':'){
	    	msg_p++;
	   	}
	    memset(&steps,0,5);
	    i=0;
		while(*msg_p != ':'){
 80019da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019dc:	f993 3000 	ldrsb.w	r3, [r3]
 80019e0:	2b3a      	cmp	r3, #58	; 0x3a
 80019e2:	d1e8      	bne.n	80019b6 <AppTaskStepper_X+0x102>
		 	steps[i]=*msg_p;
		   	msg_p++;
	    	i++;
	   	}
	    while(*msg_p== ':'){
 80019e4:	e002      	b.n	80019ec <AppTaskStepper_X+0x138>
	       	msg_p++;
 80019e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019e8:	3301      	adds	r3, #1
 80019ea:	647b      	str	r3, [r7, #68]	; 0x44
		while(*msg_p != ':'){
		 	steps[i]=*msg_p;
		   	msg_p++;
	    	i++;
	   	}
	    while(*msg_p== ':'){
 80019ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019ee:	f993 3000 	ldrsb.w	r3, [r3]
 80019f2:	2b3a      	cmp	r3, #58	; 0x3a
 80019f4:	d0f7      	beq.n	80019e6 <AppTaskStepper_X+0x132>
	       	msg_p++;
	    }
	    memset(&dir,0,2);
 80019f6:	f107 030c 	add.w	r3, r7, #12
 80019fa:	2202      	movs	r2, #2
 80019fc:	2100      	movs	r1, #0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f006 fe48 	bl	8008694 <memset>
	    i=0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	    while(*msg_p != '\0'){
 8001a0a:	e011      	b.n	8001a30 <AppTaskStepper_X+0x17c>
	   	   	dir[i]=*msg_p;
 8001a0c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001a10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001a12:	f992 2000 	ldrsb.w	r2, [r2]
 8001a16:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001a1a:	440b      	add	r3, r1
 8001a1c:	f803 2c44 	strb.w	r2, [r3, #-68]
	   	   	msg_p++;
 8001a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a22:	3301      	adds	r3, #1
 8001a24:	647b      	str	r3, [r7, #68]	; 0x44
	       	i++;
 8001a26:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	    while(*msg_p== ':'){
	       	msg_p++;
	    }
	    memset(&dir,0,2);
	    i=0;
	    while(*msg_p != '\0'){
 8001a30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a32:	f993 3000 	ldrsb.w	r3, [r3]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1e8      	bne.n	8001a0c <AppTaskStepper_X+0x158>
	   	   	dir[i]=*msg_p;
	   	   	msg_p++;
	       	i++;
	    }
	    //Plott
		if(atoi(delay)==0){
 8001a3a:	f107 0318 	add.w	r3, r7, #24
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f006 fdfc 	bl	800863c <atoi>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d118      	bne.n	8001a7c <AppTaskStepper_X+0x1c8>
		   	times=atoi(steps);
 8001a4a:	f107 0310 	add.w	r3, r7, #16
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f006 fdf4 	bl	800863c <atoi>
 8001a54:	64b8      	str	r0, [r7, #72]	; 0x48
		   	while(times--){
 8001a56:	e00c      	b.n	8001a72 <AppTaskStepper_X+0x1be>
	    		if(atoi(dir)){
 8001a58:	f107 030c 	add.w	r3, r7, #12
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f006 fded 	bl	800863c <atoi>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d002      	beq.n	8001a6e <AppTaskStepper_X+0x1ba>
	    			_mcp23s08_step_posx();
 8001a68:	f000 f9e0 	bl	8001e2c <_mcp23s08_step_posx>
 8001a6c:	e001      	b.n	8001a72 <AppTaskStepper_X+0x1be>
		    	}else{
		    		_mcp23s08_step_negx();
 8001a6e:	f000 fa3f 	bl	8001ef0 <_mcp23s08_step_negx>
	       	i++;
	    }
	    //Plott
		if(atoi(delay)==0){
		   	times=atoi(steps);
		   	while(times--){
 8001a72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a74:	1e5a      	subs	r2, r3, #1
 8001a76:	64ba      	str	r2, [r7, #72]	; 0x48
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1ed      	bne.n	8001a58 <AppTaskStepper_X+0x1a4>
		    		_mcp23s08_step_negx();
		    	}
		    }
		}
		//DONE
	    q_msg = (CPU_CHAR *) OSMemGet (&Mem_Partition1, &err);
 8001a7c:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8001a80:	4619      	mov	r1, r3
 8001a82:	4812      	ldr	r0, [pc, #72]	; (8001acc <AppTaskStepper_X+0x218>)
 8001a84:	f004 f9e0 	bl	8005e48 <OSMemGet>
 8001a88:	6438      	str	r0, [r7, #64]	; 0x40
	    if (err != OS_ERR_NONE)
 8001a8a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d002      	beq.n	8001a96 <AppTaskStepper_X+0x1e2>
	    	APP_TRACE_DBG ("Error OSMemGet1: TaskSTePY\n");
 8001a90:	4810      	ldr	r0, [pc, #64]	; (8001ad4 <AppTaskStepper_X+0x220>)
 8001a92:	f006 fe95 	bl	80087c0 <puts>
	    OSQPost ( 	(OS_Q      *) &Q_STEP_X,
 8001a96:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	2214      	movs	r2, #20
 8001aa0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001aa2:	4806      	ldr	r0, [pc, #24]	; (8001abc <AppTaskStepper_X+0x208>)
 8001aa4:	f000 fdf0 	bl	8002688 <OSQPost>
	         		(void      *) q_msg,
	    	       	(OS_MSG_SIZE) MAX_MSG_LENGTH,
	    	       	(OS_OPT)      OS_OPT_POST_FIFO,
	    	        (OS_ERR    *) &err);
	   	if (err != OS_ERR_NONE)
 8001aa8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f43f af0f 	beq.w	80018ce <AppTaskStepper_X+0x1a>
		   		APP_TRACE_DBG ("Error OSQPost1: TaskSTePY\n");
 8001ab0:	4809      	ldr	r0, [pc, #36]	; (8001ad8 <AppTaskStepper_X+0x224>)
 8001ab2:	f006 fe85 	bl	80087c0 <puts>
	}//Whileend
 8001ab6:	e70a      	b.n	80018ce <AppTaskStepper_X+0x1a>
 8001ab8:	0800eaa0 	.word	0x0800eaa0
 8001abc:	20001f14 	.word	0x20001f14
 8001ac0:	0800eac0 	.word	0x0800eac0
 8001ac4:	0800eae0 	.word	0x0800eae0
 8001ac8:	0800e9e4 	.word	0x0800e9e4
 8001acc:	20001fac 	.word	0x20001fac
 8001ad0:	0800eaec 	.word	0x0800eaec
 8001ad4:	0800ea68 	.word	0x0800ea68
 8001ad8:	0800ea84 	.word	0x0800ea84

08001adc <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001aec:	78fb      	ldrb	r3, [r7, #3]
 8001aee:	fa22 f303 	lsr.w	r3, r2, r3
 8001af2:	f003 0301 	and.w	r3, r3, #1
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr

08001b00 <debounce>:
#include <mylib.h>
#include <bsp_gpio.h>


//_________________________________DEBOUNCE
_Bool debounce(int port,  int pin){
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
	//CPU_INT08U i=2;
	CPU_INT08U f_press=0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	73fb      	strb	r3, [r7, #15]
	//CPU_INT08U press=0;
	//OS_ERR      err;
	f_press=XMC_GPIO_GetInput((XMC_GPIO_PORT_t *const) port,(const uint8_t)pin);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	b2d2      	uxtb	r2, r2
 8001b14:	4611      	mov	r1, r2
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff ffe0 	bl	8001adc <XMC_GPIO_GetInput>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	73fb      	strb	r3, [r7, #15]
						OS_OPT_TIME_HMSM_STRICT ,
			       		&err);
  		if (err != OS_ERR_NONE)
  			return 3;
	}*/
	return f_press;
 8001b20:	7bfb      	ldrb	r3, [r7, #15]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	bf14      	ite	ne
 8001b26:	2301      	movne	r3, #1
 8001b28:	2300      	moveq	r3, #0
 8001b2a:	b2db      	uxtb	r3, r3
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <pen_up>:

void pen_up(void){
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
	CCU40_0_SetCapture(2);
 8001b38:	2002      	movs	r0, #2
 8001b3a:	f004 fe5f 	bl	80067fc <CCU40_0_SetCapture>
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop

08001b44 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8001b50:	78fb      	ldrb	r3, [r7, #3]
 8001b52:	2201      	movs	r2, #1
 8001b54:	409a      	lsls	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	605a      	str	r2, [r3, #4]
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr

08001b64 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8001b70:	78fb      	ldrb	r3, [r7, #3]
 8001b72:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b76:	409a      	lsls	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	605a      	str	r2, [r3, #4]
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop

08001b88 <_mcp23s08_reset_ss>:
 *  @param XMC_GPIO_PORT_t *const port, const uint8_t pin
 *  @return on success this function returns MCP23S08_OK (0) otherwise it check
 *  the given port on validity
 */
uint8_t _mcp23s08_reset_ss(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));

  XMC_GPIO_SetOutputLow(port,pin);
 8001b94:	78fb      	ldrb	r3, [r7, #3]
 8001b96:	4619      	mov	r1, r3
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7ff ffe3 	bl	8001b64 <XMC_GPIO_SetOutputLow>

  return MCP23S08_OK;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <_mcp23s08_set_ss>:
 *  @param XMC_GPIO_PORT_t *const port, const uint8_t pin
 *  @return on success this function returns MCP23S08_OK (0) otherwise it check
 *  the given port on validity
 */
uint8_t _mcp23s08_set_ss(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));

  XMC_GPIO_SetOutputHigh(port,pin);
 8001bb4:	78fb      	ldrb	r3, [r7, #3]
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff ffc3 	bl	8001b44 <XMC_GPIO_SetOutputHigh>

  return MCP23S08_OK;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <_mcp23s08_reset>:
 *  @brief This function toggles the reset for the MCP23S08
 *  @param XMC_GPIO_PORT_t *const port, const uint8_t pin
 *  @return on success this function returns MCP23S08_OK (0)
 */
uint8_t _mcp23s08_reset(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  XMC_GPIO_SetOutputLow(MCP23S08_RESET);
 8001bcc:	210c      	movs	r1, #12
 8001bce:	4805      	ldr	r0, [pc, #20]	; (8001be4 <_mcp23s08_reset+0x1c>)
 8001bd0:	f7ff ffc8 	bl	8001b64 <XMC_GPIO_SetOutputLow>
  XMC_GPIO_SetOutputHigh(MCP23S08_RESET);
 8001bd4:	210c      	movs	r1, #12
 8001bd6:	4803      	ldr	r0, [pc, #12]	; (8001be4 <_mcp23s08_reset+0x1c>)
 8001bd8:	f7ff ffb4 	bl	8001b44 <XMC_GPIO_SetOutputHigh>

  return MCP23S08_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	48028000 	.word	0x48028000

08001be8 <_mcp23s08_reg_xfer>:
 *		   data ...... content of the register
 *		   rd_wr ..... read/write
 *  @return on success this function returns MCP23S08_OK (0)
 */
uint8_t _mcp23s08_reg_xfer(XMC_USIC_CH_t *const channel, uint8_t reg_name, uint8_t data, uint8_t rd_wr)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	4608      	mov	r0, r1
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	70fb      	strb	r3, [r7, #3]
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	70bb      	strb	r3, [r7, #2]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	707b      	strb	r3, [r7, #1]
  uint8_t recv = 0, mcp23s08_addr_rd = 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	73fb      	strb	r3, [r7, #15]
 8001c06:	2300      	movs	r3, #0
 8001c08:	73bb      	strb	r3, [r7, #14]

  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if(rd_wr)
 8001c0a:	787b      	ldrb	r3, [r7, #1]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d020      	beq.n	8001c52 <_mcp23s08_reg_xfer+0x6a>
  {
	mcp23s08_addr_rd = mcp23s08_addr|MCP23S08_RD;
 8001c10:	4b1f      	ldr	r3, [pc, #124]	; (8001c90 <_mcp23s08_reg_xfer+0xa8>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	73bb      	strb	r3, [r7, #14]

	_spi_transmit(channel,mcp23s08_addr_rd);
 8001c1a:	7bbb      	ldrb	r3, [r7, #14]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f005 fb8a 	bl	8007338 <_spi_transmit>
	_spi_receive(channel);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f005 fba7 	bl	8007378 <_spi_receive>

	_spi_transmit(channel,reg_name);
 8001c2a:	78fb      	ldrb	r3, [r7, #3]
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f005 fb82 	bl	8007338 <_spi_transmit>
	_spi_receive(channel);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f005 fb9f 	bl	8007378 <_spi_receive>

	_spi_transmit(channel,mcp23s08_nop);
 8001c3a:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <_mcp23s08_reg_xfer+0xac>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	4619      	mov	r1, r3
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f005 fb79 	bl	8007338 <_spi_transmit>
	recv = _spi_receive(channel);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f005 fb96 	bl	8007378 <_spi_receive>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	73fb      	strb	r3, [r7, #15]
 8001c50:	e018      	b.n	8001c84 <_mcp23s08_reg_xfer+0x9c>

  }
  else
  {
	_spi_transmit(channel,mcp23s08_addr);
 8001c52:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <_mcp23s08_reg_xfer+0xa8>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	4619      	mov	r1, r3
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f005 fb6d 	bl	8007338 <_spi_transmit>
	_spi_receive(channel);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f005 fb8a 	bl	8007378 <_spi_receive>

	_spi_transmit(channel,reg_name);
 8001c64:	78fb      	ldrb	r3, [r7, #3]
 8001c66:	4619      	mov	r1, r3
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f005 fb65 	bl	8007338 <_spi_transmit>
	_spi_receive(channel);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f005 fb82 	bl	8007378 <_spi_receive>

	_spi_transmit(channel,data);
 8001c74:	78bb      	ldrb	r3, [r7, #2]
 8001c76:	4619      	mov	r1, r3
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f005 fb5d 	bl	8007338 <_spi_transmit>
	_spi_receive(channel);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f005 fb7a 	bl	8007378 <_spi_receive>
  }

  return recv;
 8001c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000000 	.word	0x20000000
 8001c94:	20001ce0 	.word	0x20001ce0

08001c98 <_mcp23s08_step_posy>:

uint8_t _mcp23s08_step_posy(void){
 8001c98:	b590      	push	{r4, r7, lr}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
	uint8_t reg_val;

	if(debounce(ENDSTOP1)){
 8001c9e:	210f      	movs	r1, #15
 8001ca0:	482d      	ldr	r0, [pc, #180]	; (8001d58 <_mcp23s08_step_posy+0xc0>)
 8001ca2:	f7ff ff2d 	bl	8001b00 <debounce>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d04f      	beq.n	8001d4c <_mcp23s08_step_posy+0xb4>
		_mcp23s08_reset_ss(MCP23S08_SS);
 8001cac:	2102      	movs	r1, #2
 8001cae:	482a      	ldr	r0, [pc, #168]	; (8001d58 <_mcp23s08_step_posy+0xc0>)
 8001cb0:	f7ff ff6a 	bl	8001b88 <_mcp23s08_reset_ss>
		reg_val = _mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,0,MCP23S08_RD);
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2109      	movs	r1, #9
 8001cba:	4828      	ldr	r0, [pc, #160]	; (8001d5c <_mcp23s08_step_posy+0xc4>)
 8001cbc:	f7ff ff94 	bl	8001be8 <_mcp23s08_reg_xfer>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	71fb      	strb	r3, [r7, #7]
		_mcp23s08_set_ss(MCP23S08_SS);
 8001cc4:	2102      	movs	r1, #2
 8001cc6:	4824      	ldr	r0, [pc, #144]	; (8001d58 <_mcp23s08_step_posy+0xc0>)
 8001cc8:	f7ff ff6e 	bl	8001ba8 <_mcp23s08_set_ss>

		_mcp23s08_reset_ss(MCP23S08_SS);
 8001ccc:	2102      	movs	r1, #2
 8001cce:	4822      	ldr	r0, [pc, #136]	; (8001d58 <_mcp23s08_step_posy+0xc0>)
 8001cd0:	f7ff ff5a 	bl	8001b88 <_mcp23s08_reset_ss>
		_mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,(reg_val | 0x02) & 0xFE,MCP23S08_WR);
 8001cd4:	79fb      	ldrb	r3, [r7, #7]
 8001cd6:	f043 0302 	orr.w	r3, r3, #2
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	f023 0301 	bic.w	r3, r3, #1
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	2109      	movs	r1, #9
 8001ce6:	481d      	ldr	r0, [pc, #116]	; (8001d5c <_mcp23s08_step_posy+0xc4>)
 8001ce8:	f7ff ff7e 	bl	8001be8 <_mcp23s08_reg_xfer>
		_mcp23s08_set_ss(MCP23S08_SS);
 8001cec:	2102      	movs	r1, #2
 8001cee:	481a      	ldr	r0, [pc, #104]	; (8001d58 <_mcp23s08_step_posy+0xc0>)
 8001cf0:	f7ff ff5a 	bl	8001ba8 <_mcp23s08_set_ss>

		//APP_TRACE_INFO ("PLOTTERSTEP HIGH...\n");
		_mcp23s08_reset_ss(MCP23S08_SS);
 8001cf4:	2102      	movs	r1, #2
 8001cf6:	4818      	ldr	r0, [pc, #96]	; (8001d58 <_mcp23s08_step_posy+0xc0>)
 8001cf8:	f7ff ff46 	bl	8001b88 <_mcp23s08_reset_ss>
		reg_val = _mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,0,MCP23S08_RD);
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	2200      	movs	r2, #0
 8001d00:	2109      	movs	r1, #9
 8001d02:	4816      	ldr	r0, [pc, #88]	; (8001d5c <_mcp23s08_step_posy+0xc4>)
 8001d04:	f7ff ff70 	bl	8001be8 <_mcp23s08_reg_xfer>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	71fb      	strb	r3, [r7, #7]
		_mcp23s08_set_ss(MCP23S08_SS);
 8001d0c:	2102      	movs	r1, #2
 8001d0e:	4812      	ldr	r0, [pc, #72]	; (8001d58 <_mcp23s08_step_posy+0xc0>)
 8001d10:	f7ff ff4a 	bl	8001ba8 <_mcp23s08_set_ss>

		_mcp23s08_reset_ss(MCP23S08_SS);
 8001d14:	2102      	movs	r1, #2
 8001d16:	4810      	ldr	r0, [pc, #64]	; (8001d58 <_mcp23s08_step_posy+0xc0>)
 8001d18:	f7ff ff36 	bl	8001b88 <_mcp23s08_reset_ss>
		_mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,reg_val & 0xFD,MCP23S08_WR);
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	f023 0302 	bic.w	r3, r3, #2
 8001d22:	b2da      	uxtb	r2, r3
 8001d24:	2300      	movs	r3, #0
 8001d26:	2109      	movs	r1, #9
 8001d28:	480c      	ldr	r0, [pc, #48]	; (8001d5c <_mcp23s08_step_posy+0xc4>)
 8001d2a:	f7ff ff5d 	bl	8001be8 <_mcp23s08_reg_xfer>
		_mcp23s08_set_ss(MCP23S08_SS);
 8001d2e:	2102      	movs	r1, #2
 8001d30:	4809      	ldr	r0, [pc, #36]	; (8001d58 <_mcp23s08_step_posy+0xc0>)
 8001d32:	f7ff ff39 	bl	8001ba8 <_mcp23s08_set_ss>
		y_steps++;
 8001d36:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <_mcp23s08_step_posy+0xc8>)
 8001d38:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	f144 0400 	adc.w	r4, r4, #0
 8001d42:	4a07      	ldr	r2, [pc, #28]	; (8001d60 <_mcp23s08_step_posy+0xc8>)
 8001d44:	e9c2 3400 	strd	r3, r4, [r2]
		return 1;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e000      	b.n	8001d4e <_mcp23s08_step_posy+0xb6>
	}else{
		return 0;
 8001d4c:	2300      	movs	r3, #0
	}
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd90      	pop	{r4, r7, pc}
 8001d56:	bf00      	nop
 8001d58:	48028100 	.word	0x48028100
 8001d5c:	48020000 	.word	0x48020000
 8001d60:	20001cf0 	.word	0x20001cf0

08001d64 <_mcp23s08_step_negy>:


uint8_t _mcp23s08_step_negy(void){
 8001d64:	b590      	push	{r4, r7, lr}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
	uint8_t reg_val;

	if(debounce(ENDSTOP2)){
 8001d6a:	210d      	movs	r1, #13
 8001d6c:	482c      	ldr	r0, [pc, #176]	; (8001e20 <_mcp23s08_step_negy+0xbc>)
 8001d6e:	f7ff fec7 	bl	8001b00 <debounce>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d04d      	beq.n	8001e14 <_mcp23s08_step_negy+0xb0>
		_mcp23s08_reset_ss(MCP23S08_SS);
 8001d78:	2102      	movs	r1, #2
 8001d7a:	4829      	ldr	r0, [pc, #164]	; (8001e20 <_mcp23s08_step_negy+0xbc>)
 8001d7c:	f7ff ff04 	bl	8001b88 <_mcp23s08_reset_ss>
		reg_val = _mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,0,MCP23S08_RD);
 8001d80:	2301      	movs	r3, #1
 8001d82:	2200      	movs	r2, #0
 8001d84:	2109      	movs	r1, #9
 8001d86:	4827      	ldr	r0, [pc, #156]	; (8001e24 <_mcp23s08_step_negy+0xc0>)
 8001d88:	f7ff ff2e 	bl	8001be8 <_mcp23s08_reg_xfer>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	71fb      	strb	r3, [r7, #7]
		_mcp23s08_set_ss(MCP23S08_SS);
 8001d90:	2102      	movs	r1, #2
 8001d92:	4823      	ldr	r0, [pc, #140]	; (8001e20 <_mcp23s08_step_negy+0xbc>)
 8001d94:	f7ff ff08 	bl	8001ba8 <_mcp23s08_set_ss>

		_mcp23s08_reset_ss(MCP23S08_SS);
 8001d98:	2102      	movs	r1, #2
 8001d9a:	4821      	ldr	r0, [pc, #132]	; (8001e20 <_mcp23s08_step_negy+0xbc>)
 8001d9c:	f7ff fef4 	bl	8001b88 <_mcp23s08_reset_ss>
		_mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,reg_val | 0x03,MCP23S08_WR);
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	f043 0303 	orr.w	r3, r3, #3
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	2300      	movs	r3, #0
 8001daa:	2109      	movs	r1, #9
 8001dac:	481d      	ldr	r0, [pc, #116]	; (8001e24 <_mcp23s08_step_negy+0xc0>)
 8001dae:	f7ff ff1b 	bl	8001be8 <_mcp23s08_reg_xfer>
		_mcp23s08_set_ss(MCP23S08_SS);
 8001db2:	2102      	movs	r1, #2
 8001db4:	481a      	ldr	r0, [pc, #104]	; (8001e20 <_mcp23s08_step_negy+0xbc>)
 8001db6:	f7ff fef7 	bl	8001ba8 <_mcp23s08_set_ss>

		//APP_TRACE_INFO ("PLOTTERSTEP HIGH...\n");
		_mcp23s08_reset_ss(MCP23S08_SS);
 8001dba:	2102      	movs	r1, #2
 8001dbc:	4818      	ldr	r0, [pc, #96]	; (8001e20 <_mcp23s08_step_negy+0xbc>)
 8001dbe:	f7ff fee3 	bl	8001b88 <_mcp23s08_reset_ss>
		reg_val = _mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,0,MCP23S08_RD);
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	2109      	movs	r1, #9
 8001dc8:	4816      	ldr	r0, [pc, #88]	; (8001e24 <_mcp23s08_step_negy+0xc0>)
 8001dca:	f7ff ff0d 	bl	8001be8 <_mcp23s08_reg_xfer>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71fb      	strb	r3, [r7, #7]
		_mcp23s08_set_ss(MCP23S08_SS);
 8001dd2:	2102      	movs	r1, #2
 8001dd4:	4812      	ldr	r0, [pc, #72]	; (8001e20 <_mcp23s08_step_negy+0xbc>)
 8001dd6:	f7ff fee7 	bl	8001ba8 <_mcp23s08_set_ss>

		_mcp23s08_reset_ss(MCP23S08_SS);
 8001dda:	2102      	movs	r1, #2
 8001ddc:	4810      	ldr	r0, [pc, #64]	; (8001e20 <_mcp23s08_step_negy+0xbc>)
 8001dde:	f7ff fed3 	bl	8001b88 <_mcp23s08_reset_ss>
		_mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,reg_val & 0xFD,MCP23S08_WR);
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	f023 0302 	bic.w	r3, r3, #2
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	2300      	movs	r3, #0
 8001dec:	2109      	movs	r1, #9
 8001dee:	480d      	ldr	r0, [pc, #52]	; (8001e24 <_mcp23s08_step_negy+0xc0>)
 8001df0:	f7ff fefa 	bl	8001be8 <_mcp23s08_reg_xfer>
		_mcp23s08_set_ss(MCP23S08_SS);
 8001df4:	2102      	movs	r1, #2
 8001df6:	480a      	ldr	r0, [pc, #40]	; (8001e20 <_mcp23s08_step_negy+0xbc>)
 8001df8:	f7ff fed6 	bl	8001ba8 <_mcp23s08_set_ss>
		y_steps--;
 8001dfc:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <_mcp23s08_step_negy+0xc4>)
 8001dfe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001e02:	f113 33ff 	adds.w	r3, r3, #4294967295
 8001e06:	f144 34ff 	adc.w	r4, r4, #4294967295
 8001e0a:	4a07      	ldr	r2, [pc, #28]	; (8001e28 <_mcp23s08_step_negy+0xc4>)
 8001e0c:	e9c2 3400 	strd	r3, r4, [r2]
		return 1;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e000      	b.n	8001e16 <_mcp23s08_step_negy+0xb2>
	}else{
		return 0;
 8001e14:	2300      	movs	r3, #0
	}
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd90      	pop	{r4, r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	48028100 	.word	0x48028100
 8001e24:	48020000 	.word	0x48020000
 8001e28:	20001cf0 	.word	0x20001cf0

08001e2c <_mcp23s08_step_posx>:


uint8_t _mcp23s08_step_posx(void){
 8001e2c:	b590      	push	{r4, r7, lr}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
	uint8_t reg_val;

	if(debounce(ENDSTOP4)){
 8001e32:	210c      	movs	r1, #12
 8001e34:	482b      	ldr	r0, [pc, #172]	; (8001ee4 <_mcp23s08_step_posx+0xb8>)
 8001e36:	f7ff fe63 	bl	8001b00 <debounce>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d04c      	beq.n	8001eda <_mcp23s08_step_posx+0xae>

		_mcp23s08_reset_ss(MCP23S08_SS);
 8001e40:	2102      	movs	r1, #2
 8001e42:	4828      	ldr	r0, [pc, #160]	; (8001ee4 <_mcp23s08_step_posx+0xb8>)
 8001e44:	f7ff fea0 	bl	8001b88 <_mcp23s08_reset_ss>
		reg_val = _mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,0,MCP23S08_RD);
 8001e48:	2301      	movs	r3, #1
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2109      	movs	r1, #9
 8001e4e:	4826      	ldr	r0, [pc, #152]	; (8001ee8 <_mcp23s08_step_posx+0xbc>)
 8001e50:	f7ff feca 	bl	8001be8 <_mcp23s08_reg_xfer>
 8001e54:	4603      	mov	r3, r0
 8001e56:	71fb      	strb	r3, [r7, #7]
		_mcp23s08_set_ss(MCP23S08_SS);
 8001e58:	2102      	movs	r1, #2
 8001e5a:	4822      	ldr	r0, [pc, #136]	; (8001ee4 <_mcp23s08_step_posx+0xb8>)
 8001e5c:	f7ff fea4 	bl	8001ba8 <_mcp23s08_set_ss>

		_mcp23s08_reset_ss(MCP23S08_SS);
 8001e60:	2102      	movs	r1, #2
 8001e62:	4820      	ldr	r0, [pc, #128]	; (8001ee4 <_mcp23s08_step_posx+0xb8>)
 8001e64:	f7ff fe90 	bl	8001b88 <_mcp23s08_reset_ss>
		_mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,reg_val | 0x0C,MCP23S08_WR);
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	f043 030c 	orr.w	r3, r3, #12
 8001e6e:	b2da      	uxtb	r2, r3
 8001e70:	2300      	movs	r3, #0
 8001e72:	2109      	movs	r1, #9
 8001e74:	481c      	ldr	r0, [pc, #112]	; (8001ee8 <_mcp23s08_step_posx+0xbc>)
 8001e76:	f7ff feb7 	bl	8001be8 <_mcp23s08_reg_xfer>
		_mcp23s08_set_ss(MCP23S08_SS);
 8001e7a:	2102      	movs	r1, #2
 8001e7c:	4819      	ldr	r0, [pc, #100]	; (8001ee4 <_mcp23s08_step_posx+0xb8>)
 8001e7e:	f7ff fe93 	bl	8001ba8 <_mcp23s08_set_ss>

		//APP_TRACE_INFO ("PLOTTERSTEP HIGH...\n");

		_mcp23s08_reset_ss(MCP23S08_SS);
 8001e82:	2102      	movs	r1, #2
 8001e84:	4817      	ldr	r0, [pc, #92]	; (8001ee4 <_mcp23s08_step_posx+0xb8>)
 8001e86:	f7ff fe7f 	bl	8001b88 <_mcp23s08_reset_ss>
		reg_val = _mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,0,MCP23S08_RD);
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	2109      	movs	r1, #9
 8001e90:	4815      	ldr	r0, [pc, #84]	; (8001ee8 <_mcp23s08_step_posx+0xbc>)
 8001e92:	f7ff fea9 	bl	8001be8 <_mcp23s08_reg_xfer>
 8001e96:	4603      	mov	r3, r0
 8001e98:	71fb      	strb	r3, [r7, #7]
		_mcp23s08_set_ss(MCP23S08_SS);
 8001e9a:	2102      	movs	r1, #2
 8001e9c:	4811      	ldr	r0, [pc, #68]	; (8001ee4 <_mcp23s08_step_posx+0xb8>)
 8001e9e:	f7ff fe83 	bl	8001ba8 <_mcp23s08_set_ss>

		_mcp23s08_reset_ss(MCP23S08_SS);
 8001ea2:	2102      	movs	r1, #2
 8001ea4:	480f      	ldr	r0, [pc, #60]	; (8001ee4 <_mcp23s08_step_posx+0xb8>)
 8001ea6:	f7ff fe6f 	bl	8001b88 <_mcp23s08_reset_ss>
		_mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,reg_val & 0xF7,MCP23S08_WR);
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
 8001eac:	f023 0308 	bic.w	r3, r3, #8
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	2109      	movs	r1, #9
 8001eb6:	480c      	ldr	r0, [pc, #48]	; (8001ee8 <_mcp23s08_step_posx+0xbc>)
 8001eb8:	f7ff fe96 	bl	8001be8 <_mcp23s08_reg_xfer>
		_mcp23s08_set_ss(MCP23S08_SS);
 8001ebc:	2102      	movs	r1, #2
 8001ebe:	4809      	ldr	r0, [pc, #36]	; (8001ee4 <_mcp23s08_step_posx+0xb8>)
 8001ec0:	f7ff fe72 	bl	8001ba8 <_mcp23s08_set_ss>
		x_steps++;
 8001ec4:	4b09      	ldr	r3, [pc, #36]	; (8001eec <_mcp23s08_step_posx+0xc0>)
 8001ec6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	f144 0400 	adc.w	r4, r4, #0
 8001ed0:	4a06      	ldr	r2, [pc, #24]	; (8001eec <_mcp23s08_step_posx+0xc0>)
 8001ed2:	e9c2 3400 	strd	r3, r4, [r2]
		return 1;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e000      	b.n	8001edc <_mcp23s08_step_posx+0xb0>
	}else{
		return 0;
 8001eda:	2300      	movs	r3, #0
	}
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd90      	pop	{r4, r7, pc}
 8001ee4:	48028100 	.word	0x48028100
 8001ee8:	48020000 	.word	0x48020000
 8001eec:	20001ce8 	.word	0x20001ce8

08001ef0 <_mcp23s08_step_negx>:

uint8_t _mcp23s08_step_negx(void){
 8001ef0:	b590      	push	{r4, r7, lr}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
	uint8_t reg_val;

	if(debounce(ENDSTOP3)){
 8001ef6:	210e      	movs	r1, #14
 8001ef8:	482d      	ldr	r0, [pc, #180]	; (8001fb0 <_mcp23s08_step_negx+0xc0>)
 8001efa:	f7ff fe01 	bl	8001b00 <debounce>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d050      	beq.n	8001fa6 <_mcp23s08_step_negx+0xb6>
		_mcp23s08_reset_ss(MCP23S08_SS);
 8001f04:	2102      	movs	r1, #2
 8001f06:	482a      	ldr	r0, [pc, #168]	; (8001fb0 <_mcp23s08_step_negx+0xc0>)
 8001f08:	f7ff fe3e 	bl	8001b88 <_mcp23s08_reset_ss>
		reg_val = _mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,0,MCP23S08_RD);
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2109      	movs	r1, #9
 8001f12:	4828      	ldr	r0, [pc, #160]	; (8001fb4 <_mcp23s08_step_negx+0xc4>)
 8001f14:	f7ff fe68 	bl	8001be8 <_mcp23s08_reg_xfer>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	71fb      	strb	r3, [r7, #7]
		_mcp23s08_set_ss(MCP23S08_SS);
 8001f1c:	2102      	movs	r1, #2
 8001f1e:	4824      	ldr	r0, [pc, #144]	; (8001fb0 <_mcp23s08_step_negx+0xc0>)
 8001f20:	f7ff fe42 	bl	8001ba8 <_mcp23s08_set_ss>

		_mcp23s08_reset_ss(MCP23S08_SS);
 8001f24:	2102      	movs	r1, #2
 8001f26:	4822      	ldr	r0, [pc, #136]	; (8001fb0 <_mcp23s08_step_negx+0xc0>)
 8001f28:	f7ff fe2e 	bl	8001b88 <_mcp23s08_reset_ss>
		_mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,(reg_val | 0x08) & 0xFA,MCP23S08_WR);
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	f043 0308 	orr.w	r3, r3, #8
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	f023 0305 	bic.w	r3, r3, #5
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	2109      	movs	r1, #9
 8001f3e:	481d      	ldr	r0, [pc, #116]	; (8001fb4 <_mcp23s08_step_negx+0xc4>)
 8001f40:	f7ff fe52 	bl	8001be8 <_mcp23s08_reg_xfer>
		_mcp23s08_set_ss(MCP23S08_SS);
 8001f44:	2102      	movs	r1, #2
 8001f46:	481a      	ldr	r0, [pc, #104]	; (8001fb0 <_mcp23s08_step_negx+0xc0>)
 8001f48:	f7ff fe2e 	bl	8001ba8 <_mcp23s08_set_ss>

		//APP_TRACE_INFO ("PLOTTERSTEP HIGH...\n");
		_mcp23s08_reset_ss(MCP23S08_SS);
 8001f4c:	2102      	movs	r1, #2
 8001f4e:	4818      	ldr	r0, [pc, #96]	; (8001fb0 <_mcp23s08_step_negx+0xc0>)
 8001f50:	f7ff fe1a 	bl	8001b88 <_mcp23s08_reset_ss>
		reg_val = _mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,0,MCP23S08_RD);
 8001f54:	2301      	movs	r3, #1
 8001f56:	2200      	movs	r2, #0
 8001f58:	2109      	movs	r1, #9
 8001f5a:	4816      	ldr	r0, [pc, #88]	; (8001fb4 <_mcp23s08_step_negx+0xc4>)
 8001f5c:	f7ff fe44 	bl	8001be8 <_mcp23s08_reg_xfer>
 8001f60:	4603      	mov	r3, r0
 8001f62:	71fb      	strb	r3, [r7, #7]
		_mcp23s08_set_ss(MCP23S08_SS);
 8001f64:	2102      	movs	r1, #2
 8001f66:	4812      	ldr	r0, [pc, #72]	; (8001fb0 <_mcp23s08_step_negx+0xc0>)
 8001f68:	f7ff fe1e 	bl	8001ba8 <_mcp23s08_set_ss>

		_mcp23s08_reset_ss(MCP23S08_SS);
 8001f6c:	2102      	movs	r1, #2
 8001f6e:	4810      	ldr	r0, [pc, #64]	; (8001fb0 <_mcp23s08_step_negx+0xc0>)
 8001f70:	f7ff fe0a 	bl	8001b88 <_mcp23s08_reset_ss>
		_mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,reg_val & 0xF7,MCP23S08_WR);
 8001f74:	79fb      	ldrb	r3, [r7, #7]
 8001f76:	f023 0308 	bic.w	r3, r3, #8
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	2109      	movs	r1, #9
 8001f80:	480c      	ldr	r0, [pc, #48]	; (8001fb4 <_mcp23s08_step_negx+0xc4>)
 8001f82:	f7ff fe31 	bl	8001be8 <_mcp23s08_reg_xfer>
		_mcp23s08_set_ss(MCP23S08_SS);
 8001f86:	2102      	movs	r1, #2
 8001f88:	4809      	ldr	r0, [pc, #36]	; (8001fb0 <_mcp23s08_step_negx+0xc0>)
 8001f8a:	f7ff fe0d 	bl	8001ba8 <_mcp23s08_set_ss>

		x_steps--;
 8001f8e:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <_mcp23s08_step_negx+0xc8>)
 8001f90:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001f94:	f113 33ff 	adds.w	r3, r3, #4294967295
 8001f98:	f144 34ff 	adc.w	r4, r4, #4294967295
 8001f9c:	4a06      	ldr	r2, [pc, #24]	; (8001fb8 <_mcp23s08_step_negx+0xc8>)
 8001f9e:	e9c2 3400 	strd	r3, r4, [r2]
		return 1;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e000      	b.n	8001fa8 <_mcp23s08_step_negx+0xb8>
	}else{
		return 0;
 8001fa6:	2300      	movs	r3, #0
	}
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd90      	pop	{r4, r7, pc}
 8001fb0:	48028100 	.word	0x48028100
 8001fb4:	48020000 	.word	0x48020000
 8001fb8:	20001ce8 	.word	0x20001ce8

08001fbc <_mcp23s08_goto_0_0>:

void _mcp23s08_goto_0_0(void){
 8001fbc:	b598      	push	{r3, r4, r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
	while(_mcp23s08_step_negx() || _mcp23s08_step_posy()){
 8001fc0:	bf00      	nop
 8001fc2:	f7ff ff95 	bl	8001ef0 <_mcp23s08_step_negx>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1fa      	bne.n	8001fc2 <_mcp23s08_goto_0_0+0x6>
 8001fcc:	f7ff fe64 	bl	8001c98 <_mcp23s08_step_posy>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f5      	bne.n	8001fc2 <_mcp23s08_goto_0_0+0x6>
	}
	x_steps=0;
 8001fd6:	4a08      	ldr	r2, [pc, #32]	; (8001ff8 <_mcp23s08_goto_0_0+0x3c>)
 8001fd8:	f04f 0300 	mov.w	r3, #0
 8001fdc:	f04f 0400 	mov.w	r4, #0
 8001fe0:	e9c2 3400 	strd	r3, r4, [r2]
	y_steps=0;
 8001fe4:	4a05      	ldr	r2, [pc, #20]	; (8001ffc <_mcp23s08_goto_0_0+0x40>)
 8001fe6:	f04f 0300 	mov.w	r3, #0
 8001fea:	f04f 0400 	mov.w	r4, #0
 8001fee:	e9c2 3400 	strd	r3, r4, [r2]
}
 8001ff2:	bf00      	nop
 8001ff4:	bd98      	pop	{r3, r4, r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20001ce8 	.word	0x20001ce8
 8001ffc:	20001cf0 	.word	0x20001cf0

08002000 <_mcp23s08_Plotter_Init>:

void _mcp23s08_Plotter_Init(void){
 8002000:	b580      	push	{r7, lr}
 8002002:	b088      	sub	sp, #32
 8002004:	af00      	add	r7, sp, #0
	//RESET and config GPIO
	CPU_CHAR    d_msg[30];
	_mcp23s08_reset();
 8002006:	f7ff fddf 	bl	8001bc8 <_mcp23s08_reset>
	_mcp23s08_config_gpio();
 800200a:	f000 f807 	bl	800201c <_mcp23s08_config_gpio>
	while(_mcp23s08_step_negy()){
		y_steps_MAX++;
	}
	sprintf(d_msg,"%d\n",(int)y_steps_MAX);
	APP_TRACE_INFO(d_msg);*/
	_mcp23s08_goto_0_0();
 800200e:	f7ff ffd5 	bl	8001fbc <_mcp23s08_goto_0_0>
}
 8002012:	bf00      	nop
 8002014:	3720      	adds	r7, #32
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop

0800201c <_mcp23s08_config_gpio>:

void _mcp23s08_config_gpio(void){
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
	_mcp23s08_reset_ss(MCP23S08_SS);
 8002020:	2102      	movs	r1, #2
 8002022:	4807      	ldr	r0, [pc, #28]	; (8002040 <_mcp23s08_config_gpio+0x24>)
 8002024:	f7ff fdb0 	bl	8001b88 <_mcp23s08_reset_ss>
	_mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_IODIR,0,MCP23S08_WR);
 8002028:	2300      	movs	r3, #0
 800202a:	2200      	movs	r2, #0
 800202c:	2100      	movs	r1, #0
 800202e:	4805      	ldr	r0, [pc, #20]	; (8002044 <_mcp23s08_config_gpio+0x28>)
 8002030:	f7ff fdda 	bl	8001be8 <_mcp23s08_reg_xfer>
	_mcp23s08_set_ss(MCP23S08_SS);
 8002034:	2102      	movs	r1, #2
 8002036:	4802      	ldr	r0, [pc, #8]	; (8002040 <_mcp23s08_config_gpio+0x24>)
 8002038:	f7ff fdb6 	bl	8001ba8 <_mcp23s08_set_ss>
}
 800203c:	bf00      	nop
 800203e:	bd80      	pop	{r7, pc}
 8002040:	48028100 	.word	0x48028100
 8002044:	48020000 	.word	0x48020000

08002048 <CPU_Init>:
*                                                   & other CPU interrupts disabled time measurement functions
*********************************************************************************************************
*/

void  CPU_Init (void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
                                                                /* --------------------- INIT TS ---------------------- */
#if ((CPU_CFG_TS_EN     == DEF_ENABLED) || \
     (CPU_CFG_TS_TMR_EN == DEF_ENABLED))
    CPU_TS_Init();                                              /* See Note #3a.                                        */
 800204c:	f000 f832 	bl	80020b4 <CPU_TS_Init>
    CPU_IntDisMeasInit();                                       /* See Note #3b.                                        */
#endif

                                                                /* ------------------ INIT CPU NAME ------------------- */
#if (CPU_CFG_NAME_EN == DEF_ENABLED)
     CPU_NameInit();
 8002050:	f000 f82a 	bl	80020a8 <CPU_NameInit>
#endif

#if (CPU_CFG_CACHE_MGMT_EN == DEF_ENABLED)
     CPU_Cache_Init();
#endif
}
 8002054:	bf00      	nop
 8002056:	bd80      	pop	{r7, pc}

08002058 <CPU_SW_Exception>:
*                   See also 'cpu_core.h  CPU_SW_EXCEPTION()  Note #1'.
*********************************************************************************************************
*/

void  CPU_SW_Exception (void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
    while (DEF_ON) {
        ;
    }
 800205c:	e7fe      	b.n	800205c <CPU_SW_Exception+0x4>
 800205e:	bf00      	nop

08002060 <CPU_NameClr>:
*********************************************************************************************************
*/

#if (CPU_CFG_NAME_EN == DEF_ENABLED)
void  CPU_NameClr (void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
 8002066:	2300      	movs	r3, #0
 8002068:	607b      	str	r3, [r7, #4]


    CPU_CRITICAL_ENTER();
 800206a:	f7fe f939 	bl	80002e0 <CPU_SR_Save>
 800206e:	6078      	str	r0, [r7, #4]
    Mem_Clr((void     *)&CPU_Name[0],
 8002070:	2110      	movs	r1, #16
 8002072:	4805      	ldr	r0, [pc, #20]	; (8002088 <CPU_NameClr+0x28>)
 8002074:	f000 f8f6 	bl	8002264 <Mem_Clr>
            (CPU_SIZE_T) CPU_CFG_NAME_SIZE);
    CPU_CRITICAL_EXIT();
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7fe f935 	bl	80002e8 <CPU_SR_Restore>
}
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20002038 	.word	0x20002038

0800208c <CPU_TS_TmrFreqSet>:
*********************************************************************************************************
*/

#if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
void  CPU_TS_TmrFreqSet (CPU_TS_TMR_FREQ  freq_hz)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
    CPU_TS_TmrFreq_Hz = freq_hz;
 8002094:	4a03      	ldr	r2, [pc, #12]	; (80020a4 <CPU_TS_TmrFreqSet+0x18>)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6013      	str	r3, [r2, #0]
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr
 80020a4:	20002034 	.word	0x20002034

080020a8 <CPU_NameInit>:
*********************************************************************************************************
*/

#if (CPU_CFG_NAME_EN == DEF_ENABLED)
static  void  CPU_NameInit (void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
    CPU_NameClr();
 80020ac:	f7ff ffd8 	bl	8002060 <CPU_NameClr>
}
 80020b0:	bf00      	nop
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <CPU_TS_Init>:
*/

#if ((CPU_CFG_TS_EN     == DEF_ENABLED) || \
     (CPU_CFG_TS_TMR_EN == DEF_ENABLED))
static  void  CPU_TS_Init (void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
#endif


                                                                /* ----------------- INIT CPU TS TMR ------------------ */
#if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
    CPU_TS_TmrFreq_Hz   = 0u;                                   /* Init/clr     ts tmr freq (see Note #1a).             */
 80020b8:	4b03      	ldr	r3, [pc, #12]	; (80020c8 <CPU_TS_Init+0x14>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
    CPU_TS_TmrInit();                                           /* Init & start ts tmr      (see Note #1b).             */
 80020be:	f005 fc37 	bl	8007930 <CPU_TS_TmrInit>
#if  ((CPU_CFG_TS_64_EN    == DEF_ENABLED)  && \
      (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_64))
    CPU_TS_64_Accum   = 0u;                                     /* Init 64-bit accum'd ts.                              */
    CPU_TS_64_TmrPrev = ts_tmr_cnts;                            /* Init 64-bit ts prev tmr val.                         */
#endif
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20002034 	.word	0x20002034

080020cc <CPU_IntSrcEn>:
*               (3) See 'CPU_IntSrcDis()  Note #3'.
*********************************************************************************************************
*/

void  CPU_IntSrcEn (CPU_INT08U  pos)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	71fb      	strb	r3, [r7, #7]
    CPU_INT08U  group;
    CPU_INT08U  nbr;
    CPU_INT08U  pos_max;
    CPU_SR_ALLOC();
 80020d6:	2300      	movs	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]


    switch (pos) {
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	2b0f      	cmp	r3, #15
 80020de:	d857      	bhi.n	8002190 <CPU_IntSrcEn+0xc4>
 80020e0:	a201      	add	r2, pc, #4	; (adr r2, 80020e8 <CPU_IntSrcEn+0x1c>)
 80020e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e6:	bf00      	nop
 80020e8:	080021f9 	.word	0x080021f9
 80020ec:	080021f9 	.word	0x080021f9
 80020f0:	080021f9 	.word	0x080021f9
 80020f4:	080021f9 	.word	0x080021f9
 80020f8:	08002129 	.word	0x08002129
 80020fc:	08002143 	.word	0x08002143
 8002100:	0800215d 	.word	0x0800215d
 8002104:	080021f9 	.word	0x080021f9
 8002108:	080021f9 	.word	0x080021f9
 800210c:	080021f9 	.word	0x080021f9
 8002110:	080021f9 	.word	0x080021f9
 8002114:	080021f9 	.word	0x080021f9
 8002118:	080021f9 	.word	0x080021f9
 800211c:	080021f9 	.word	0x080021f9
 8002120:	080021f9 	.word	0x080021f9
 8002124:	08002177 	.word	0x08002177
        case CPU_INT_DBGMON:                                    /* Debug monitor (see Note #2).                         */
        case CPU_INT_PENDSV:                                    /* PendSV (see Note #2).                                */
             break;

        case CPU_INT_MEM:                                       /* Memory management.                                   */
             CPU_CRITICAL_ENTER();
 8002128:	f7fe f8da 	bl	80002e0 <CPU_SR_Save>
 800212c:	60f8      	str	r0, [r7, #12]
             CPU_REG_NVIC_SHCSR |= CPU_REG_NVIC_SHCSR_MEMFAULTENA;
 800212e:	4a36      	ldr	r2, [pc, #216]	; (8002208 <CPU_IntSrcEn+0x13c>)
 8002130:	4b35      	ldr	r3, [pc, #212]	; (8002208 <CPU_IntSrcEn+0x13c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002138:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	f7fe f8d4 	bl	80002e8 <CPU_SR_Restore>
             break;
 8002140:	e05d      	b.n	80021fe <CPU_IntSrcEn+0x132>

        case CPU_INT_BUSFAULT:                                  /* Bus fault.                                           */
             CPU_CRITICAL_ENTER();
 8002142:	f7fe f8cd 	bl	80002e0 <CPU_SR_Save>
 8002146:	60f8      	str	r0, [r7, #12]
             CPU_REG_NVIC_SHCSR |= CPU_REG_NVIC_SHCSR_BUSFAULTENA;
 8002148:	4a2f      	ldr	r2, [pc, #188]	; (8002208 <CPU_IntSrcEn+0x13c>)
 800214a:	4b2f      	ldr	r3, [pc, #188]	; (8002208 <CPU_IntSrcEn+0x13c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002152:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f7fe f8c7 	bl	80002e8 <CPU_SR_Restore>
             break;
 800215a:	e050      	b.n	80021fe <CPU_IntSrcEn+0x132>

        case CPU_INT_USAGEFAULT:                                /* Usage fault.                                         */
             CPU_CRITICAL_ENTER();
 800215c:	f7fe f8c0 	bl	80002e0 <CPU_SR_Save>
 8002160:	60f8      	str	r0, [r7, #12]
             CPU_REG_NVIC_SHCSR |= CPU_REG_NVIC_SHCSR_USGFAULTENA;
 8002162:	4a29      	ldr	r2, [pc, #164]	; (8002208 <CPU_IntSrcEn+0x13c>)
 8002164:	4b28      	ldr	r3, [pc, #160]	; (8002208 <CPU_IntSrcEn+0x13c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800216c:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f7fe f8ba 	bl	80002e8 <CPU_SR_Restore>
             break;
 8002174:	e043      	b.n	80021fe <CPU_IntSrcEn+0x132>

        case CPU_INT_SYSTICK:                                   /* SysTick.                                             */
             CPU_CRITICAL_ENTER();
 8002176:	f7fe f8b3 	bl	80002e0 <CPU_SR_Save>
 800217a:	60f8      	str	r0, [r7, #12]
             CPU_REG_NVIC_ST_CTRL |= CPU_REG_NVIC_ST_CTRL_ENABLE;
 800217c:	4a23      	ldr	r2, [pc, #140]	; (800220c <CPU_IntSrcEn+0x140>)
 800217e:	4b23      	ldr	r3, [pc, #140]	; (800220c <CPU_IntSrcEn+0x140>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f043 0301 	orr.w	r3, r3, #1
 8002186:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f7fe f8ad 	bl	80002e8 <CPU_SR_Restore>
             break;
 800218e:	e036      	b.n	80021fe <CPU_IntSrcEn+0x132>


                                                                /* ---------------- EXTERNAL INTERRUPT ---------------- */
        default:
            pos_max = CPU_INT_SRC_POS_MAX;
 8002190:	4b1f      	ldr	r3, [pc, #124]	; (8002210 <CPU_IntSrcEn+0x144>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	3301      	adds	r3, #1
 8002196:	b2db      	uxtb	r3, r3
 8002198:	f003 031f 	and.w	r3, r3, #31
 800219c:	b2db      	uxtb	r3, r3
 800219e:	015b      	lsls	r3, r3, #5
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	3310      	adds	r3, #16
 80021a4:	72fb      	strb	r3, [r7, #11]
            if (pos < pos_max) {                                /* See Note #3.                                         */
 80021a6:	79fa      	ldrb	r2, [r7, #7]
 80021a8:	7afb      	ldrb	r3, [r7, #11]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d226      	bcs.n	80021fc <CPU_IntSrcEn+0x130>
                 group = (pos - 16) / 32;
 80021ae:	79fb      	ldrb	r3, [r7, #7]
 80021b0:	3b10      	subs	r3, #16
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	da00      	bge.n	80021b8 <CPU_IntSrcEn+0xec>
 80021b6:	331f      	adds	r3, #31
 80021b8:	115b      	asrs	r3, r3, #5
 80021ba:	72bb      	strb	r3, [r7, #10]
                 nbr   = (pos - 16) % 32;
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	f1a3 0210 	sub.w	r2, r3, #16
 80021c2:	4b14      	ldr	r3, [pc, #80]	; (8002214 <CPU_IntSrcEn+0x148>)
 80021c4:	4013      	ands	r3, r2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	da03      	bge.n	80021d2 <CPU_IntSrcEn+0x106>
 80021ca:	3b01      	subs	r3, #1
 80021cc:	f063 031f 	orn	r3, r3, #31
 80021d0:	3301      	adds	r3, #1
 80021d2:	727b      	strb	r3, [r7, #9]

                 CPU_CRITICAL_ENTER();
 80021d4:	f7fe f884 	bl	80002e0 <CPU_SR_Save>
 80021d8:	60f8      	str	r0, [r7, #12]
                 CPU_REG_NVIC_SETEN(group) = DEF_BIT(nbr);
 80021da:	7abb      	ldrb	r3, [r7, #10]
 80021dc:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
 80021e0:	3340      	adds	r3, #64	; 0x40
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4619      	mov	r1, r3
 80021e6:	7a7b      	ldrb	r3, [r7, #9]
 80021e8:	2201      	movs	r2, #1
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	600b      	str	r3, [r1, #0]
                 CPU_CRITICAL_EXIT();
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f7fe f879 	bl	80002e8 <CPU_SR_Restore>
             }
             break;
 80021f6:	e001      	b.n	80021fc <CPU_IntSrcEn+0x130>
        case CPU_INT_RSVD_07:
        case CPU_INT_RSVD_08:
        case CPU_INT_RSVD_09:
        case CPU_INT_RSVD_10:
        case CPU_INT_RSVD_13:
             break;
 80021f8:	bf00      	nop
 80021fa:	e000      	b.n	80021fe <CPU_IntSrcEn+0x132>

                 CPU_CRITICAL_ENTER();
                 CPU_REG_NVIC_SETEN(group) = DEF_BIT(nbr);
                 CPU_CRITICAL_EXIT();
             }
             break;
 80021fc:	bf00      	nop
    }
}
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	e000ed24 	.word	0xe000ed24
 800220c:	e000e010 	.word	0xe000e010
 8002210:	e000e004 	.word	0xe000e004
 8002214:	8000001f 	.word	0x8000001f

08002218 <Mem_Init>:
*                   (b) BEFORE product's application calls any memory library module function(s)
*********************************************************************************************************
*/

void  Mem_Init (void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af02      	add	r7, sp, #8

                                                                /* ------------------ INIT SEG LIST ------------------- */
    Mem_SegHeadPtr = DEF_NULL;
 800221e:	4b0d      	ldr	r3, [pc, #52]	; (8002254 <Mem_Init+0x3c>)
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]

                                                                /* ------------------ INIT HEAP SEG ------------------- */
#ifdef  LIB_MEM_CFG_HEAP_BASE_ADDR
        heap_base_addr = LIB_MEM_CFG_HEAP_BASE_ADDR;
#else
        heap_base_addr = (CPU_ADDR)&Mem_Heap[0u];
 8002224:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <Mem_Init+0x40>)
 8002226:	607b      	str	r3, [r7, #4]
#endif

        Mem_SegCreate("Heap",
 8002228:	1cbb      	adds	r3, r7, #2
 800222a:	9301      	str	r3, [sp, #4]
 800222c:	2301      	movs	r3, #1
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	4909      	ldr	r1, [pc, #36]	; (800225c <Mem_Init+0x44>)
 8002238:	4809      	ldr	r0, [pc, #36]	; (8002260 <Mem_Init+0x48>)
 800223a:	f000 f87b 	bl	8002334 <Mem_SegCreate>
                      &Mem_SegHeap,                             /* Create heap seg.                                     */
                       heap_base_addr,
                       LIB_MEM_CFG_HEAP_SIZE,
                       LIB_MEM_PADDING_ALIGN_NONE,
                      &err);
        if (err != LIB_MEM_ERR_NONE) {
 800223e:	887b      	ldrh	r3, [r7, #2]
 8002240:	f242 7210 	movw	r2, #10000	; 0x2710
 8002244:	4293      	cmp	r3, r2
 8002246:	d001      	beq.n	800224c <Mem_Init+0x34>
            CPU_SW_EXCEPTION(;);
 8002248:	f7ff ff06 	bl	8002058 <CPU_SW_Exception>
        }
    }
#endif
}
 800224c:	bf00      	nop
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	2000205c 	.word	0x2000205c
 8002258:	20002060 	.word	0x20002060
 800225c:	20002048 	.word	0x20002048
 8002260:	0800eb10 	.word	0x0800eb10

08002264 <Mem_Clr>:
*********************************************************************************************************
*/

void  Mem_Clr (void        *pmem,
               CPU_SIZE_T   size)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
    Mem_Set(pmem,
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	2100      	movs	r1, #0
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f804 	bl	8002280 <Mem_Set>
            0u,                                                 /* See Note #2.                                         */
            size);
}
 8002278:	bf00      	nop
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <Mem_Set>:
*/

void  Mem_Set (void        *pmem,
               CPU_INT08U   data_val,
               CPU_SIZE_T   size)
{
 8002280:	b480      	push	{r7}
 8002282:	b08b      	sub	sp, #44	; 0x2c
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	460b      	mov	r3, r1
 800228a:	607a      	str	r2, [r7, #4]
 800228c:	72fb      	strb	r3, [r7, #11]
        return;
    }
#endif


    data_align = 0u;
 800228e:	2300      	movs	r3, #0
 8002290:	623b      	str	r3, [r7, #32]
    for (i = 0u; i < sizeof(CPU_ALIGN); i++) {                  /* Fill each data_align octet with data val.            */
 8002292:	2300      	movs	r3, #0
 8002294:	617b      	str	r3, [r7, #20]
 8002296:	e009      	b.n	80022ac <Mem_Set+0x2c>
        data_align <<=  DEF_OCTET_NBR_BITS;
 8002298:	6a3b      	ldr	r3, [r7, #32]
 800229a:	021b      	lsls	r3, r3, #8
 800229c:	623b      	str	r3, [r7, #32]
        data_align  |= (CPU_ALIGN)data_val;
 800229e:	7afb      	ldrb	r3, [r7, #11]
 80022a0:	6a3a      	ldr	r2, [r7, #32]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	623b      	str	r3, [r7, #32]
    }
#endif


    data_align = 0u;
    for (i = 0u; i < sizeof(CPU_ALIGN); i++) {                  /* Fill each data_align octet with data val.            */
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	3301      	adds	r3, #1
 80022aa:	617b      	str	r3, [r7, #20]
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	2b03      	cmp	r3, #3
 80022b0:	d9f2      	bls.n	8002298 <Mem_Set+0x18>
        data_align <<=  DEF_OCTET_NBR_BITS;
        data_align  |= (CPU_ALIGN)data_val;
    }

    size_rem      =  size;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
    mem_align_mod = (CPU_INT08U)((CPU_ADDR)pmem % sizeof(CPU_ALIGN));   /* See Note #3.                                 */
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	f003 0303 	and.w	r3, r3, #3
 80022be:	613b      	str	r3, [r7, #16]

    pmem_08 = (CPU_INT08U *)pmem;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	61bb      	str	r3, [r7, #24]
    if (mem_align_mod != 0u) {                                  /* If leading octets avail,                   ...       */
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d013      	beq.n	80022f2 <Mem_Set+0x72>
        i = mem_align_mod;
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	617b      	str	r3, [r7, #20]
        while ((size_rem > 0) &&                                /* ... start mem buf fill with leading octets ...       */
 80022ce:	e00a      	b.n	80022e6 <Mem_Set+0x66>
               (i        < sizeof(CPU_ALIGN ))) {               /* ... until next CPU_ALIGN word boundary.              */
           *pmem_08++ = data_val;
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	1c5a      	adds	r2, r3, #1
 80022d4:	61ba      	str	r2, [r7, #24]
 80022d6:	7afa      	ldrb	r2, [r7, #11]
 80022d8:	701a      	strb	r2, [r3, #0]
            size_rem -= sizeof(CPU_INT08U);
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	3b01      	subs	r3, #1
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
            i++;
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	3301      	adds	r3, #1
 80022e4:	617b      	str	r3, [r7, #20]
    mem_align_mod = (CPU_INT08U)((CPU_ADDR)pmem % sizeof(CPU_ALIGN));   /* See Note #3.                                 */

    pmem_08 = (CPU_INT08U *)pmem;
    if (mem_align_mod != 0u) {                                  /* If leading octets avail,                   ...       */
        i = mem_align_mod;
        while ((size_rem > 0) &&                                /* ... start mem buf fill with leading octets ...       */
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d002      	beq.n	80022f2 <Mem_Set+0x72>
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	2b03      	cmp	r3, #3
 80022f0:	d9ee      	bls.n	80022d0 <Mem_Set+0x50>
            size_rem -= sizeof(CPU_INT08U);
            i++;
        }
    }

    pmem_align = (CPU_ALIGN *)pmem_08;                          /* See Note #2.                                         */
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	61fb      	str	r3, [r7, #28]
    while (size_rem >= sizeof(CPU_ALIGN)) {                     /* While mem buf aligned on CPU_ALIGN word boundaries,  */
 80022f6:	e007      	b.n	8002308 <Mem_Set+0x88>
       *pmem_align++ = data_align;                              /* ... fill mem buf with    CPU_ALIGN-sized data.       */
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	1d1a      	adds	r2, r3, #4
 80022fc:	61fa      	str	r2, [r7, #28]
 80022fe:	6a3a      	ldr	r2, [r7, #32]
 8002300:	601a      	str	r2, [r3, #0]
        size_rem    -= sizeof(CPU_ALIGN);
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	3b04      	subs	r3, #4
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
            i++;
        }
    }

    pmem_align = (CPU_ALIGN *)pmem_08;                          /* See Note #2.                                         */
    while (size_rem >= sizeof(CPU_ALIGN)) {                     /* While mem buf aligned on CPU_ALIGN word boundaries,  */
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	2b03      	cmp	r3, #3
 800230c:	d8f4      	bhi.n	80022f8 <Mem_Set+0x78>
       *pmem_align++ = data_align;                              /* ... fill mem buf with    CPU_ALIGN-sized data.       */
        size_rem    -= sizeof(CPU_ALIGN);
    }

    pmem_08 = (CPU_INT08U *)pmem_align;
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	61bb      	str	r3, [r7, #24]
    while (size_rem > 0) {                                      /* Finish mem buf fill with trailing octets.            */
 8002312:	e007      	b.n	8002324 <Mem_Set+0xa4>
       *pmem_08++   = data_val;
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	1c5a      	adds	r2, r3, #1
 8002318:	61ba      	str	r2, [r7, #24]
 800231a:	7afa      	ldrb	r2, [r7, #11]
 800231c:	701a      	strb	r2, [r3, #0]
        size_rem   -= sizeof(CPU_INT08U);
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	3b01      	subs	r3, #1
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
       *pmem_align++ = data_align;                              /* ... fill mem buf with    CPU_ALIGN-sized data.       */
        size_rem    -= sizeof(CPU_ALIGN);
    }

    pmem_08 = (CPU_INT08U *)pmem_align;
    while (size_rem > 0) {                                      /* Finish mem buf fill with trailing octets.            */
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f4      	bne.n	8002314 <Mem_Set+0x94>
       *pmem_08++   = data_val;
        size_rem   -= sizeof(CPU_INT08U);
    }
}
 800232a:	bf00      	nop
 800232c:	372c      	adds	r7, #44	; 0x2c
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr

08002334 <Mem_SegCreate>:
                            MEM_SEG     *p_seg,
                            CPU_ADDR     seg_base_addr,
                            CPU_SIZE_T   size,
                            CPU_SIZE_T   padding_align,
                            LIB_ERR     *p_err)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b088      	sub	sp, #32
 8002338:	af02      	add	r7, sp, #8
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
 8002340:	603b      	str	r3, [r7, #0]
    CPU_SR_ALLOC();
 8002342:	2300      	movs	r3, #0
 8002344:	617b      	str	r3, [r7, #20]
       *p_err = LIB_MEM_ERR_INVALID_MEM_ALIGN;
        return;
    }
#endif

    CPU_CRITICAL_ENTER();
 8002346:	f7fd ffcb 	bl	80002e0 <CPU_SR_Save>
 800234a:	6178      	str	r0, [r7, #20]
        CPU_CRITICAL_EXIT();
        return;
    }
#endif

    Mem_SegCreateCritical(p_name,                               /* Create seg.                                          */
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	6a3b      	ldr	r3, [r7, #32]
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	68b9      	ldr	r1, [r7, #8]
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f000 f80c 	bl	8002374 <Mem_SegCreateCritical>
                          p_seg,
                          seg_base_addr,
                          padding_align,
                          size);
    CPU_CRITICAL_EXIT();
 800235c:	6978      	ldr	r0, [r7, #20]
 800235e:	f7fd ffc3 	bl	80002e8 <CPU_SR_Restore>

   *p_err = LIB_MEM_ERR_NONE;
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	f242 7210 	movw	r2, #10000	; 0x2710
 8002368:	801a      	strh	r2, [r3, #0]
}
 800236a:	bf00      	nop
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop

08002374 <Mem_SegCreateCritical>:
static  void  Mem_SegCreateCritical(const  CPU_CHAR    *p_name,
                                           MEM_SEG     *p_seg,
                                           CPU_ADDR     seg_base_addr,
                                           CPU_SIZE_T   padding_align,
                                           CPU_SIZE_T   size)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
 8002380:	603b      	str	r3, [r7, #0]
    p_seg->AddrBase         =  seg_base_addr;
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	601a      	str	r2, [r3, #0]
    p_seg->AddrEnd          = (seg_base_addr + (size - 1u));
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4413      	add	r3, r2
 800238e:	1e5a      	subs	r2, r3, #1
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	605a      	str	r2, [r3, #4]
    p_seg->AddrNext         =  seg_base_addr;
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	609a      	str	r2, [r3, #8]
    p_seg->NextPtr          =  Mem_SegHeadPtr;
 800239a:	4b07      	ldr	r3, [pc, #28]	; (80023b8 <Mem_SegCreateCritical+0x44>)
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	60da      	str	r2, [r3, #12]
    p_seg->PaddingAlign     =  padding_align;
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	611a      	str	r2, [r3, #16]
    p_seg->AllocInfoHeadPtr = DEF_NULL;
#else
    (void)&p_name;
#endif

    Mem_SegHeadPtr = p_seg;
 80023a8:	4a03      	ldr	r2, [pc, #12]	; (80023b8 <Mem_SegCreateCritical+0x44>)
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	6013      	str	r3, [r2, #0]
}
 80023ae:	bf00      	nop
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr
 80023b8:	2000205c 	.word	0x2000205c

080023bc <Math_Init>:
*                   as when srand() is first called with a seed value of 1".
*********************************************************************************************************
*/

void  Math_Init (void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
    Math_RandSetSeed((RAND_NBR)RAND_SEED_INIT_VAL);             /* See Note #2.                                         */
 80023c0:	2001      	movs	r0, #1
 80023c2:	f000 f803 	bl	80023cc <Math_RandSetSeed>
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop

080023cc <Math_RandSetSeed>:
*                   See also 'Math_Rand()  Note #1b'.
*********************************************************************************************************
*/

void  Math_RandSetSeed (RAND_NBR  seed)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
    CPU_SR_ALLOC();
 80023d4:	2300      	movs	r3, #0
 80023d6:	60fb      	str	r3, [r7, #12]


    CPU_CRITICAL_ENTER();
 80023d8:	f7fd ff82 	bl	80002e0 <CPU_SR_Save>
 80023dc:	60f8      	str	r0, [r7, #12]
    Math_RandSeedCur = seed;
 80023de:	4a05      	ldr	r2, [pc, #20]	; (80023f4 <Math_RandSetSeed+0x28>)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6013      	str	r3, [r2, #0]
    CPU_CRITICAL_EXIT();
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f7fd ff7f 	bl	80002e8 <CPU_SR_Restore>
}
 80023ea:	bf00      	nop
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	20002460 	.word	0x20002460

080023f8 <OSQCreate>:
void  OSQCreate (OS_Q        *p_q,
                 CPU_CHAR    *p_name,
                 OS_MSG_QTY   max_qty,
                 OS_ERR      *p_err)

{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	603b      	str	r3, [r7, #0]
 8002404:	4613      	mov	r3, r2
 8002406:	80fb      	strh	r3, [r7, #6]
    CPU_SR_ALLOC();
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to be called from an ISR                   */
 800240c:	4b1f      	ldr	r3, [pc, #124]	; (800248c <OSQCreate+0x94>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d004      	beq.n	800241e <OSQCreate+0x26>
       *p_err = OS_ERR_CREATE_ISR;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	f642 62e1 	movw	r2, #12001	; 0x2ee1
 800241a:	801a      	strh	r2, [r3, #0]
        return;
 800241c:	e033      	b.n	8002486 <OSQCreate+0x8e>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_q == (OS_Q *)0) {                                 /* Validate arguments                                     */
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d104      	bne.n	800242e <OSQCreate+0x36>
       *p_err = OS_ERR_OBJ_PTR_NULL;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	f645 52c3 	movw	r2, #24003	; 0x5dc3
 800242a:	801a      	strh	r2, [r3, #0]
        return;
 800242c:	e02b      	b.n	8002486 <OSQCreate+0x8e>
    }
    if (max_qty == (OS_MSG_QTY)0) {                         /* Cannot specify a zero size queue                       */
 800242e:	88fb      	ldrh	r3, [r7, #6]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d104      	bne.n	800243e <OSQCreate+0x46>
       *p_err = OS_ERR_Q_SIZE;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	f246 5294 	movw	r2, #26004	; 0x6594
 800243a:	801a      	strh	r2, [r3, #0]
        return;
 800243c:	e023      	b.n	8002486 <OSQCreate+0x8e>
    }
#endif

    OS_CRITICAL_ENTER();
 800243e:	f7fd ff4f 	bl	80002e0 <CPU_SR_Save>
 8002442:	6178      	str	r0, [r7, #20]
#if OS_OBJ_TYPE_REQ > 0u
    p_q->Type    = OS_OBJ_TYPE_Q;                           /* Mark the data structure as a message queue             */
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4a12      	ldr	r2, [pc, #72]	; (8002490 <OSQCreate+0x98>)
 8002448:	601a      	str	r2, [r3, #0]
#endif
#if OS_CFG_DBG_EN > 0u
    p_q->NamePtr = p_name;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	68ba      	ldr	r2, [r7, #8]
 800244e:	605a      	str	r2, [r3, #4]
#else
    (void)&p_name;
#endif
    OS_MsgQInit(&p_q->MsgQ,                                 /* Initialize the queue                                   */
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	3320      	adds	r3, #32
 8002454:	88fa      	ldrh	r2, [r7, #6]
 8002456:	4611      	mov	r1, r2
 8002458:	4618      	mov	r0, r3
 800245a:	f001 f8cf 	bl	80035fc <OS_MsgQInit>
                max_qty);
    OS_PendListInit(&p_q->PendList);                        /* Initialize the waiting list                            */
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	3308      	adds	r3, #8
 8002462:	4618      	mov	r0, r3
 8002464:	f001 fdb6 	bl	8003fd4 <OS_PendListInit>

#if OS_CFG_DBG_EN > 0u
    OS_QDbgListAdd(p_q);
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f000 f965 	bl	8002738 <OS_QDbgListAdd>
#endif
    OSQQty++;                                               /* One more queue created                                 */
 800246e:	4b09      	ldr	r3, [pc, #36]	; (8002494 <OSQCreate+0x9c>)
 8002470:	881b      	ldrh	r3, [r3, #0]
 8002472:	3301      	adds	r3, #1
 8002474:	b29a      	uxth	r2, r3
 8002476:	4b07      	ldr	r3, [pc, #28]	; (8002494 <OSQCreate+0x9c>)
 8002478:	801a      	strh	r2, [r3, #0]
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_Q_CREATE(p_q, p_name);                         /* Record the event.                                      */
#endif
    OS_CRITICAL_EXIT_NO_SCHED();
 800247a:	6978      	ldr	r0, [r7, #20]
 800247c:	f7fd ff34 	bl	80002e8 <CPU_SR_Restore>
   *p_err = OS_ERR_NONE;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	2200      	movs	r2, #0
 8002484:	801a      	strh	r2, [r3, #0]
}
 8002486:	3718      	adds	r7, #24
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	20002700 	.word	0x20002700
 8002490:	55455551 	.word	0x55455551
 8002494:	200026d8 	.word	0x200026d8

08002498 <OSQPend>:
                OS_TICK       timeout,
                OS_OPT        opt,
                OS_MSG_SIZE  *p_msg_size,
                CPU_TS       *p_ts,
                OS_ERR       *p_err)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b08e      	sub	sp, #56	; 0x38
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	603b      	str	r3, [r7, #0]
 80024a4:	4613      	mov	r3, r2
 80024a6:	80fb      	strh	r3, [r7, #6]
    OS_PEND_DATA  pend_data;
    void         *p_void;
    CPU_SR_ALLOC();
 80024a8:	2300      	movs	r3, #0
 80024aa:	633b      	str	r3, [r7, #48]	; 0x30
        return ((void *)0);
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 80024ac:	4b72      	ldr	r3, [pc, #456]	; (8002678 <OSQPend+0x1e0>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d005      	beq.n	80024c0 <OSQPend+0x28>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_PEND_FAILED(p_q);                        /* Record the event.                                      */
#endif
       *p_err = OS_ERR_PEND_ISR;
 80024b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024b6:	f246 12ae 	movw	r2, #25006	; 0x61ae
 80024ba:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 80024bc:	2300      	movs	r3, #0
 80024be:	e0d7      	b.n	8002670 <OSQPend+0x1d8>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_q == (OS_Q *)0) {                                 /* Validate arguments                                     */
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d105      	bne.n	80024d2 <OSQPend+0x3a>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_PEND_FAILED(p_q);                        /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_PTR_NULL;
 80024c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024c8:	f645 52c3 	movw	r2, #24003	; 0x5dc3
 80024cc:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 80024ce:	2300      	movs	r3, #0
 80024d0:	e0ce      	b.n	8002670 <OSQPend+0x1d8>
    }
    if (p_msg_size == (OS_MSG_SIZE *)0) {
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d105      	bne.n	80024e4 <OSQPend+0x4c>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_PEND_FAILED(p_q);                        /* Record the event.                                      */
#endif
       *p_err = OS_ERR_PTR_INVALID;
 80024d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024da:	f246 22d5 	movw	r2, #25301	; 0x62d5
 80024de:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 80024e0:	2300      	movs	r3, #0
 80024e2:	e0c5      	b.n	8002670 <OSQPend+0x1d8>
    }
    switch (opt) {
 80024e4:	88fb      	ldrh	r3, [r7, #6]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d008      	beq.n	80024fc <OSQPend+0x64>
 80024ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024ee:	d005      	beq.n	80024fc <OSQPend+0x64>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_Q_PEND_FAILED(p_q);                   /* Record the event.                                      */
#endif
            *p_err = OS_ERR_OPT_INVALID;
 80024f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024f2:	f645 6225 	movw	r2, #24101	; 0x5e25
 80024f6:	801a      	strh	r2, [r3, #0]
             return ((void *)0);
 80024f8:	2300      	movs	r3, #0
 80024fa:	e0b9      	b.n	8002670 <OSQPend+0x1d8>
        return ((void *)0);
    }
    switch (opt) {
        case OS_OPT_PEND_BLOCKING:
        case OS_OPT_PEND_NON_BLOCKING:
             break;
 80024fc:	bf00      	nop
             return ((void *)0);
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_q->Type != OS_OBJ_TYPE_Q) {                       /* Make sure message queue was created                    */
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a5e      	ldr	r2, [pc, #376]	; (800267c <OSQPend+0x1e4>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d005      	beq.n	8002514 <OSQPend+0x7c>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_PEND_FAILED(p_q);                        /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_TYPE;
 8002508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800250a:	f645 52c4 	movw	r2, #24004	; 0x5dc4
 800250e:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 8002510:	2300      	movs	r3, #0
 8002512:	e0ad      	b.n	8002670 <OSQPend+0x1d8>
    }
#endif

    if (p_ts != (CPU_TS *)0) {
 8002514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002516:	2b00      	cmp	r3, #0
 8002518:	d002      	beq.n	8002520 <OSQPend+0x88>
       *p_ts  = (CPU_TS  )0;                                /* Initialize the returned timestamp                      */
 800251a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
    }

    CPU_CRITICAL_ENTER();
 8002520:	f7fd fede 	bl	80002e0 <CPU_SR_Save>
 8002524:	6338      	str	r0, [r7, #48]	; 0x30
    p_void = OS_MsgQGet(&p_q->MsgQ,                         /* Any message waiting in the message queue?              */
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f103 0020 	add.w	r0, r3, #32
 800252c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800252e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002530:	6839      	ldr	r1, [r7, #0]
 8002532:	f001 f87d 	bl	8003630 <OS_MsgQGet>
 8002536:	6378      	str	r0, [r7, #52]	; 0x34
                        p_msg_size,
                        p_ts,
                        p_err);
    if (*p_err == OS_ERR_NONE) {
 8002538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800253a:	881b      	ldrh	r3, [r3, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d104      	bne.n	800254a <OSQPend+0xb2>
        CPU_CRITICAL_EXIT();
 8002540:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002542:	f7fd fed1 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_PEND(p_q);                               /* Record the event.                                      */
#endif
        return (p_void);                                    /* Yes, Return message received                           */
 8002546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002548:	e092      	b.n	8002670 <OSQPend+0x1d8>
    }

    if ((opt & OS_OPT_PEND_NON_BLOCKING) != (OS_OPT)0) {    /* Caller wants to block if not available?                */
 800254a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800254e:	2b00      	cmp	r3, #0
 8002550:	da08      	bge.n	8002564 <OSQPend+0xcc>
        CPU_CRITICAL_EXIT();
 8002552:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002554:	f7fd fec8 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_PEND_FAILED(p_q);                        /* Record the event.                                      */
#endif
       *p_err = OS_ERR_PEND_WOULD_BLOCK;                    /* No                                                     */
 8002558:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800255a:	f246 12b0 	movw	r2, #25008	; 0x61b0
 800255e:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 8002560:	2300      	movs	r3, #0
 8002562:	e085      	b.n	8002670 <OSQPend+0x1d8>
    } else {
        if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /* Can't pend when the scheduler is locked                */
 8002564:	4b46      	ldr	r3, [pc, #280]	; (8002680 <OSQPend+0x1e8>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d008      	beq.n	800257e <OSQPend+0xe6>
            CPU_CRITICAL_EXIT();
 800256c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800256e:	f7fd febb 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
            TRACE_OS_Q_PEND_FAILED(p_q);                    /* Record the event.                                      */
#endif
           *p_err = OS_ERR_SCHED_LOCKED;
 8002572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002574:	f646 5263 	movw	r2, #28003	; 0x6d63
 8002578:	801a      	strh	r2, [r3, #0]
            return ((void *)0);
 800257a:	2300      	movs	r3, #0
 800257c:	e078      	b.n	8002670 <OSQPend+0x1d8>
        }
    }
                                                            /* Lock the scheduler/re-enable interrupts                */
    OS_CRITICAL_ENTER_CPU_EXIT();
    OS_Pend(&pend_data,                                     /* Block task pending on Message Queue                    */
 800257e:	f107 0010 	add.w	r0, r7, #16
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	2205      	movs	r2, #5
 8002586:	68f9      	ldr	r1, [r7, #12]
 8002588:	f001 fc1e 	bl	8003dc8 <OS_Pend>
            (OS_PEND_OBJ *)((void *)p_q),
            OS_TASK_PEND_ON_Q,
            timeout);
    OS_CRITICAL_EXIT_NO_SCHED();
 800258c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800258e:	f7fd feab 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_Q_PEND_BLOCK(p_q);                             /* Record the event.                                      */
#endif
    OSSched();                                              /* Find the next highest priority task ready to run       */
 8002592:	f001 faad 	bl	8003af0 <OSSched>

    CPU_CRITICAL_ENTER();
 8002596:	f7fd fea3 	bl	80002e0 <CPU_SR_Save>
 800259a:	6338      	str	r0, [r7, #48]	; 0x30
    switch (OSTCBCurPtr->PendStatus) {
 800259c:	4b39      	ldr	r3, [pc, #228]	; (8002684 <OSQPend+0x1ec>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025a4:	2b03      	cmp	r3, #3
 80025a6:	d855      	bhi.n	8002654 <OSQPend+0x1bc>
 80025a8:	a201      	add	r2, pc, #4	; (adr r2, 80025b0 <OSQPend+0x118>)
 80025aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ae:	bf00      	nop
 80025b0:	080025c1 	.word	0x080025c1
 80025b4:	080025ed 	.word	0x080025ed
 80025b8:	08002631 	.word	0x08002631
 80025bc:	08002611 	.word	0x08002611
        case OS_STATUS_PEND_OK:                             /* Extract message from TCB (Put there by Post)           */
             p_void     = OSTCBCurPtr->MsgPtr;
 80025c0:	4b30      	ldr	r3, [pc, #192]	; (8002684 <OSQPend+0x1ec>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c6:	637b      	str	r3, [r7, #52]	; 0x34
            *p_msg_size = OSTCBCurPtr->MsgSize;
 80025c8:	4b2e      	ldr	r3, [pc, #184]	; (8002684 <OSQPend+0x1ec>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	801a      	strh	r2, [r3, #0]
             if (p_ts  != (CPU_TS *)0) {
 80025d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d004      	beq.n	80025e4 <OSQPend+0x14c>
                *p_ts   =  OSTCBCurPtr->TS;
 80025da:	4b2a      	ldr	r3, [pc, #168]	; (8002684 <OSQPend+0x1ec>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80025e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025e2:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_Q_PEND(p_q);                          /* Record the event.                                      */
#endif
            *p_err      = OS_ERR_NONE;
 80025e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025e6:	2200      	movs	r2, #0
 80025e8:	801a      	strh	r2, [r3, #0]
             break;
 80025ea:	e03d      	b.n	8002668 <OSQPend+0x1d0>

        case OS_STATUS_PEND_ABORT:                          /* Indicate that we aborted                               */
             p_void     = (void      *)0;
 80025ec:	2300      	movs	r3, #0
 80025ee:	637b      	str	r3, [r7, #52]	; 0x34
            *p_msg_size = (OS_MSG_SIZE)0;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	2200      	movs	r2, #0
 80025f4:	801a      	strh	r2, [r3, #0]
             if (p_ts  != (CPU_TS *)0) {
 80025f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d004      	beq.n	8002606 <OSQPend+0x16e>
                *p_ts   =  OSTCBCurPtr->TS;
 80025fc:	4b21      	ldr	r3, [pc, #132]	; (8002684 <OSQPend+0x1ec>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002604:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_Q_PEND_FAILED(p_q);                   /* Record the event.                                      */
#endif
            *p_err      = OS_ERR_PEND_ABORT;
 8002606:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002608:	f246 12a9 	movw	r2, #25001	; 0x61a9
 800260c:	801a      	strh	r2, [r3, #0]
             break;
 800260e:	e02b      	b.n	8002668 <OSQPend+0x1d0>

        case OS_STATUS_PEND_TIMEOUT:                        /* Indicate that we didn't get event within TO            */
             p_void     = (void      *)0;
 8002610:	2300      	movs	r3, #0
 8002612:	637b      	str	r3, [r7, #52]	; 0x34
            *p_msg_size = (OS_MSG_SIZE)0;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	2200      	movs	r2, #0
 8002618:	801a      	strh	r2, [r3, #0]
             if (p_ts  != (CPU_TS *)0) {
 800261a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800261c:	2b00      	cmp	r3, #0
 800261e:	d002      	beq.n	8002626 <OSQPend+0x18e>
                *p_ts   = (CPU_TS  )0;
 8002620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_Q_PEND_FAILED(p_q);                   /* Record the event.                                      */
#endif
            *p_err      = OS_ERR_TIMEOUT;
 8002626:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002628:	f247 22d9 	movw	r2, #29401	; 0x72d9
 800262c:	801a      	strh	r2, [r3, #0]
             break;
 800262e:	e01b      	b.n	8002668 <OSQPend+0x1d0>

        case OS_STATUS_PEND_DEL:                            /* Indicate that object pended on has been deleted        */
             p_void     = (void      *)0;
 8002630:	2300      	movs	r3, #0
 8002632:	637b      	str	r3, [r7, #52]	; 0x34
            *p_msg_size = (OS_MSG_SIZE)0;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	2200      	movs	r2, #0
 8002638:	801a      	strh	r2, [r3, #0]
             if (p_ts  != (CPU_TS *)0) {
 800263a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800263c:	2b00      	cmp	r3, #0
 800263e:	d004      	beq.n	800264a <OSQPend+0x1b2>
                *p_ts   =  OSTCBCurPtr->TS;
 8002640:	4b10      	ldr	r3, [pc, #64]	; (8002684 <OSQPend+0x1ec>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002646:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002648:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_Q_PEND_FAILED(p_q);                   /* Record the event.                                      */
#endif
            *p_err      = OS_ERR_OBJ_DEL;
 800264a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800264c:	f645 52c2 	movw	r2, #24002	; 0x5dc2
 8002650:	801a      	strh	r2, [r3, #0]
             break;
 8002652:	e009      	b.n	8002668 <OSQPend+0x1d0>

        default:
             p_void     = (void      *)0;
 8002654:	2300      	movs	r3, #0
 8002656:	637b      	str	r3, [r7, #52]	; 0x34
            *p_msg_size = (OS_MSG_SIZE)0;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	2200      	movs	r2, #0
 800265c:	801a      	strh	r2, [r3, #0]
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_Q_PEND_FAILED(p_q);                   /* Record the event.                                      */
#endif
            *p_err      = OS_ERR_STATUS_INVALID;
 800265e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002660:	f646 622e 	movw	r2, #28206	; 0x6e2e
 8002664:	801a      	strh	r2, [r3, #0]
             break;
 8002666:	bf00      	nop
    }
    CPU_CRITICAL_EXIT();
 8002668:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800266a:	f7fd fe3d 	bl	80002e8 <CPU_SR_Restore>
    return (p_void);
 800266e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002670:	4618      	mov	r0, r3
 8002672:	3738      	adds	r7, #56	; 0x38
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	20002700 	.word	0x20002700
 800267c:	55455551 	.word	0x55455551
 8002680:	20002468 	.word	0x20002468
 8002684:	200026d4 	.word	0x200026d4

08002688 <OSQPost>:
void  OSQPost (OS_Q         *p_q,
               void         *p_void,
               OS_MSG_SIZE   msg_size,
               OS_OPT        opt,
               OS_ERR       *p_err)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b088      	sub	sp, #32
 800268c:	af02      	add	r7, sp, #8
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	4611      	mov	r1, r2
 8002694:	461a      	mov	r2, r3
 8002696:	460b      	mov	r3, r1
 8002698:	80fb      	strh	r3, [r7, #6]
 800269a:	4613      	mov	r3, r2
 800269c:	80bb      	strh	r3, [r7, #4]
        return;
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_q == (OS_Q *)0) {                                 /* Validate 'p_q'                                         */
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d104      	bne.n	80026ae <OSQPost+0x26>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_POST_FAILED(p_q);                        /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_PTR_NULL;
 80026a4:	6a3b      	ldr	r3, [r7, #32]
 80026a6:	f645 52c3 	movw	r2, #24003	; 0x5dc3
 80026aa:	801a      	strh	r2, [r3, #0]
        return;
 80026ac:	e03f      	b.n	800272e <OSQPost+0xa6>
    }
    switch (opt) {                                          /* Validate 'opt'                                         */
 80026ae:	88bb      	ldrh	r3, [r7, #4]
 80026b0:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 80026b4:	d022      	beq.n	80026fc <OSQPost+0x74>
 80026b6:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 80026ba:	dc07      	bgt.n	80026cc <OSQPost+0x44>
 80026bc:	2b10      	cmp	r3, #16
 80026be:	d01d      	beq.n	80026fc <OSQPost+0x74>
 80026c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026c4:	d01a      	beq.n	80026fc <OSQPost+0x74>
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d018      	beq.n	80026fc <OSQPost+0x74>
 80026ca:	e012      	b.n	80026f2 <OSQPost+0x6a>
 80026cc:	f248 0210 	movw	r2, #32784	; 0x8010
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d013      	beq.n	80026fc <OSQPost+0x74>
 80026d4:	f248 0210 	movw	r2, #32784	; 0x8010
 80026d8:	4293      	cmp	r3, r2
 80026da:	dc03      	bgt.n	80026e4 <OSQPost+0x5c>
 80026dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026e0:	d00c      	beq.n	80026fc <OSQPost+0x74>
 80026e2:	e006      	b.n	80026f2 <OSQPost+0x6a>
 80026e4:	f5b3 4f02 	cmp.w	r3, #33280	; 0x8200
 80026e8:	d008      	beq.n	80026fc <OSQPost+0x74>
 80026ea:	f248 2210 	movw	r2, #33296	; 0x8210
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d004      	beq.n	80026fc <OSQPost+0x74>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_Q_POST_FAILED(p_q);                   /* Record the event.                                      */
#endif
            *p_err =  OS_ERR_OPT_INVALID;
 80026f2:	6a3b      	ldr	r3, [r7, #32]
 80026f4:	f645 6225 	movw	r2, #24101	; 0x5e25
 80026f8:	801a      	strh	r2, [r3, #0]
             return;
 80026fa:	e018      	b.n	800272e <OSQPost+0xa6>
        case OS_OPT_POST_LIFO | OS_OPT_POST_ALL:
        case OS_OPT_POST_FIFO | OS_OPT_POST_NO_SCHED:
        case OS_OPT_POST_LIFO | OS_OPT_POST_NO_SCHED:
        case OS_OPT_POST_FIFO | OS_OPT_POST_ALL | OS_OPT_POST_NO_SCHED:
        case OS_OPT_POST_LIFO | OS_OPT_POST_ALL | OS_OPT_POST_NO_SCHED:
             break;
 80026fc:	bf00      	nop
             return;
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_q->Type != OS_OBJ_TYPE_Q) {                       /* Make sure message queue was created                    */
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a0c      	ldr	r2, [pc, #48]	; (8002734 <OSQPost+0xac>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d004      	beq.n	8002712 <OSQPost+0x8a>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_POST_FAILED(p_q);                        /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_TYPE;
 8002708:	6a3b      	ldr	r3, [r7, #32]
 800270a:	f645 52c4 	movw	r2, #24004	; 0x5dc4
 800270e:	801a      	strh	r2, [r3, #0]
        return;
 8002710:	e00d      	b.n	800272e <OSQPost+0xa6>
    }
#endif

    ts = OS_TS_GET();                                       /* Get timestamp                                          */
 8002712:	f005 f92b 	bl	800796c <CPU_TS_TmrRd>
 8002716:	6178      	str	r0, [r7, #20]
    }
#endif
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_Q_POST(p_q);                                   /* Record the event.                                      */
#endif
    OS_QPost(p_q,
 8002718:	88b9      	ldrh	r1, [r7, #4]
 800271a:	88fa      	ldrh	r2, [r7, #6]
 800271c:	6a3b      	ldr	r3, [r7, #32]
 800271e:	9301      	str	r3, [sp, #4]
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	460b      	mov	r3, r1
 8002726:	68b9      	ldr	r1, [r7, #8]
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f000 f841 	bl	80027b0 <OS_QPost>
             p_void,
             msg_size,
             opt,
             ts,
             p_err);
}
 800272e:	3718      	adds	r7, #24
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	55455551 	.word	0x55455551

08002738 <OS_QDbgListAdd>:
*/


#if OS_CFG_DBG_EN > 0u
void  OS_QDbgListAdd (OS_Q  *p_q)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
    p_q->DbgNamePtr               = (CPU_CHAR *)((void *)" ");
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a0e      	ldr	r2, [pc, #56]	; (800277c <OS_QDbgListAdd+0x44>)
 8002744:	61da      	str	r2, [r3, #28]
    p_q->DbgPrevPtr               = (OS_Q     *)0;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	615a      	str	r2, [r3, #20]
    if (OSQDbgListPtr == (OS_Q *)0) {
 800274c:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <OS_QDbgListAdd+0x48>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d103      	bne.n	800275c <OS_QDbgListAdd+0x24>
        p_q->DbgNextPtr           = (OS_Q     *)0;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	619a      	str	r2, [r3, #24]
 800275a:	e007      	b.n	800276c <OS_QDbgListAdd+0x34>
    } else {
        p_q->DbgNextPtr           =  OSQDbgListPtr;
 800275c:	4b08      	ldr	r3, [pc, #32]	; (8002780 <OS_QDbgListAdd+0x48>)
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	619a      	str	r2, [r3, #24]
        OSQDbgListPtr->DbgPrevPtr =  p_q;
 8002764:	4b06      	ldr	r3, [pc, #24]	; (8002780 <OS_QDbgListAdd+0x48>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	615a      	str	r2, [r3, #20]
    }
    OSQDbgListPtr                 =  p_q;
 800276c:	4a04      	ldr	r2, [pc, #16]	; (8002780 <OS_QDbgListAdd+0x48>)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6013      	str	r3, [r2, #0]
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr
 800277c:	0800eb54 	.word	0x0800eb54
 8002780:	20002890 	.word	0x20002890

08002784 <OS_QInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_QInit (OS_ERR  *p_err)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSQDbgListPtr = (OS_Q *)0;
 800278c:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <OS_QInit+0x24>)
 800278e:	2200      	movs	r2, #0
 8002790:	601a      	str	r2, [r3, #0]
#endif

    OSQQty        = (OS_OBJ_QTY)0;
 8002792:	4b06      	ldr	r3, [pc, #24]	; (80027ac <OS_QInit+0x28>)
 8002794:	2200      	movs	r2, #0
 8002796:	801a      	strh	r2, [r3, #0]
   *p_err         = OS_ERR_NONE;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	801a      	strh	r2, [r3, #0]
}
 800279e:	bf00      	nop
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr
 80027a8:	20002890 	.word	0x20002890
 80027ac:	200026d8 	.word	0x200026d8

080027b0 <OS_QPost>:
                void         *p_void,
                OS_MSG_SIZE   msg_size,
                OS_OPT        opt,
                CPU_TS        ts,
                OS_ERR       *p_err)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08c      	sub	sp, #48	; 0x30
 80027b4:	af02      	add	r7, sp, #8
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	4611      	mov	r1, r2
 80027bc:	461a      	mov	r2, r3
 80027be:	460b      	mov	r3, r1
 80027c0:	80fb      	strh	r3, [r7, #6]
 80027c2:	4613      	mov	r3, r2
 80027c4:	80bb      	strh	r3, [r7, #4]
    OS_OPT         post_type;
    OS_PEND_LIST  *p_pend_list;
    OS_PEND_DATA  *p_pend_data;
    OS_PEND_DATA  *p_pend_data_next;
    OS_TCB        *p_tcb;
    CPU_SR_ALLOC();
 80027c6:	2300      	movs	r3, #0
 80027c8:	61fb      	str	r3, [r7, #28]



    OS_CRITICAL_ENTER();
 80027ca:	f7fd fd89 	bl	80002e0 <CPU_SR_Save>
 80027ce:	61f8      	str	r0, [r7, #28]
    p_pend_list = &p_q->PendList;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	3308      	adds	r3, #8
 80027d4:	61bb      	str	r3, [r7, #24]
    if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0) {         /* Any task waiting on message queue?                     */
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	891b      	ldrh	r3, [r3, #8]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d11a      	bne.n	8002814 <OS_QPost+0x64>
        if ((opt & OS_OPT_POST_LIFO) == (OS_OPT)0) {        /* Determine whether we post FIFO or LIFO                 */
 80027de:	88bb      	ldrh	r3, [r7, #4]
 80027e0:	f003 0310 	and.w	r3, r3, #16
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d102      	bne.n	80027ee <OS_QPost+0x3e>
            post_type = OS_OPT_POST_FIFO;
 80027e8:	2300      	movs	r3, #0
 80027ea:	84bb      	strh	r3, [r7, #36]	; 0x24
 80027ec:	e001      	b.n	80027f2 <OS_QPost+0x42>
        } else {
            post_type = OS_OPT_POST_LIFO;
 80027ee:	2310      	movs	r3, #16
 80027f0:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
        OS_MsgQPut(&p_q->MsgQ,                              /* Place message in the message queue                     */
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f103 0020 	add.w	r0, r3, #32
 80027f8:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80027fa:	88fa      	ldrh	r2, [r7, #6]
 80027fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027fe:	9301      	str	r3, [sp, #4]
 8002800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	460b      	mov	r3, r1
 8002806:	68b9      	ldr	r1, [r7, #8]
 8002808:	f000 ff70 	bl	80036ec <OS_MsgQPut>
                   p_void,
                   msg_size,
                   post_type,
                   ts,
                   p_err);
        OS_CRITICAL_EXIT();
 800280c:	69f8      	ldr	r0, [r7, #28]
 800280e:	f7fd fd6b 	bl	80002e8 <CPU_SR_Restore>
        return;
 8002812:	e031      	b.n	8002878 <OS_QPost+0xc8>
    }

    if ((opt & OS_OPT_POST_ALL) != (OS_OPT)0) {             /* Post message to all tasks waiting?                     */
 8002814:	88bb      	ldrh	r3, [r7, #4]
 8002816:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <OS_QPost+0x76>
        cnt = p_pend_list->NbrEntries;                      /* Yes                                                    */
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	891b      	ldrh	r3, [r3, #8]
 8002822:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002824:	e001      	b.n	800282a <OS_QPost+0x7a>
    } else {
        cnt = (OS_OBJ_QTY)1;                                /* No                                                     */
 8002826:	2301      	movs	r3, #1
 8002828:	84fb      	strh	r3, [r7, #38]	; 0x26
    }
    p_pend_data = p_pend_list->HeadPtr;
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	623b      	str	r3, [r7, #32]
    while (cnt > 0u) {
 8002830:	e013      	b.n	800285a <OS_QPost+0xaa>
        p_tcb            = p_pend_data->TCBPtr;
 8002832:	6a3b      	ldr	r3, [r7, #32]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	617b      	str	r3, [r7, #20]
        p_pend_data_next = p_pend_data->NextPtr;
 8002838:	6a3b      	ldr	r3, [r7, #32]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	613b      	str	r3, [r7, #16]
        OS_Post((OS_PEND_OBJ *)((void *)p_q),
 800283e:	88fa      	ldrh	r2, [r7, #6]
 8002840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	4613      	mov	r3, r2
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	6979      	ldr	r1, [r7, #20]
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f001 fcbc 	bl	80041c8 <OS_Post>
                p_tcb,
                p_void,
                msg_size,
                ts);
        p_pend_data = p_pend_data_next;
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	623b      	str	r3, [r7, #32]
        cnt--;
 8002854:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002856:	3b01      	subs	r3, #1
 8002858:	84fb      	strh	r3, [r7, #38]	; 0x26
        cnt = p_pend_list->NbrEntries;                      /* Yes                                                    */
    } else {
        cnt = (OS_OBJ_QTY)1;                                /* No                                                     */
    }
    p_pend_data = p_pend_list->HeadPtr;
    while (cnt > 0u) {
 800285a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1e8      	bne.n	8002832 <OS_QPost+0x82>
                msg_size,
                ts);
        p_pend_data = p_pend_data_next;
        cnt--;
    }
    OS_CRITICAL_EXIT_NO_SCHED();
 8002860:	69f8      	ldr	r0, [r7, #28]
 8002862:	f7fd fd41 	bl	80002e8 <CPU_SR_Restore>
    if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0) {
 8002866:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	db01      	blt.n	8002872 <OS_QPost+0xc2>
        OSSched();                                          /* Run the scheduler                                      */
 800286e:	f001 f93f 	bl	8003af0 <OSSched>
    }
   *p_err = OS_ERR_NONE;
 8002872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002874:	2200      	movs	r2, #0
 8002876:	801a      	strh	r2, [r3, #0]
}
 8002878:	3728      	adds	r7, #40	; 0x28
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop

08002880 <OSTaskCreate>:
                    OS_MSG_QTY     q_size,
                    OS_TICK        time_quanta,
                    void          *p_ext,
                    OS_OPT         opt,
                    OS_ERR        *p_err)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b08c      	sub	sp, #48	; 0x30
 8002884:	af02      	add	r7, sp, #8
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
 800288c:	603b      	str	r3, [r7, #0]
    OS_TLS_ID      id;
#endif

    CPU_STK       *p_sp;
    CPU_STK       *p_stk_limit;
    CPU_SR_ALLOC();
 800288e:	2300      	movs	r3, #0
 8002890:	61bb      	str	r3, [r7, #24]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* ---------- CANNOT CREATE A TASK FROM AN ISR ---------- */
 8002892:	4b75      	ldr	r3, [pc, #468]	; (8002a68 <OSTaskCreate+0x1e8>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d004      	beq.n	80028a4 <OSTaskCreate+0x24>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_TASK_CREATE_ISR;
 800289a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800289c:	f247 124a 	movw	r2, #29002	; 0x714a
 80028a0:	801a      	strh	r2, [r3, #0]
        return;
 80028a2:	e0dd      	b.n	8002a60 <OSTaskCreate+0x1e0>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u                                  /* ---------------- VALIDATE ARGUMENTS ------------------ */
    if (p_tcb == (OS_TCB *)0) {                             /* User must supply a valid OS_TCB                        */
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d104      	bne.n	80028b4 <OSTaskCreate+0x34>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_TCB_INVALID;
 80028aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028ac:	f247 12ad 	movw	r2, #29101	; 0x71ad
 80028b0:	801a      	strh	r2, [r3, #0]
        return;
 80028b2:	e0d5      	b.n	8002a60 <OSTaskCreate+0x1e0>
    }
    if (p_task == (OS_TASK_PTR)0) {                         /* User must supply a valid task                          */
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d104      	bne.n	80028c4 <OSTaskCreate+0x44>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_TASK_INVALID;
 80028ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028bc:	f247 124f 	movw	r2, #29007	; 0x714f
 80028c0:	801a      	strh	r2, [r3, #0]
        return;
 80028c2:	e0cd      	b.n	8002a60 <OSTaskCreate+0x1e0>
    }
    if (p_stk_base == (CPU_STK *)0) {                       /* User must supply a valid stack base address            */
 80028c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d104      	bne.n	80028d4 <OSTaskCreate+0x54>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_STK_INVALID;
 80028ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028cc:	f646 622f 	movw	r2, #28207	; 0x6e2f
 80028d0:	801a      	strh	r2, [r3, #0]
        return;
 80028d2:	e0c5      	b.n	8002a60 <OSTaskCreate+0x1e0>
    }
    if (stk_size < OSCfg_StkSizeMin) {                      /* User must supply a valid minimum stack size            */
 80028d4:	4b65      	ldr	r3, [pc, #404]	; (8002a6c <OSTaskCreate+0x1ec>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028da:	429a      	cmp	r2, r3
 80028dc:	d204      	bcs.n	80028e8 <OSTaskCreate+0x68>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_STK_SIZE_INVALID;
 80028de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028e0:	f646 6230 	movw	r2, #28208	; 0x6e30
 80028e4:	801a      	strh	r2, [r3, #0]
        return;
 80028e6:	e0bb      	b.n	8002a60 <OSTaskCreate+0x1e0>
    }
    if (stk_limit >= stk_size) {                            /* User must supply a valid stack limit                   */
 80028e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d304      	bcc.n	80028fa <OSTaskCreate+0x7a>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_STK_LIMIT_INVALID;
 80028f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028f2:	f646 6231 	movw	r2, #28209	; 0x6e31
 80028f6:	801a      	strh	r2, [r3, #0]
        return;
 80028f8:	e0b2      	b.n	8002a60 <OSTaskCreate+0x1e0>
    }
    if (prio >= OS_CFG_PRIO_MAX) {                          /* Priority must be within 0 and OS_CFG_PRIO_MAX-1        */
 80028fa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80028fe:	2b1f      	cmp	r3, #31
 8002900:	d904      	bls.n	800290c <OSTaskCreate+0x8c>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_PRIO_INVALID;
 8002902:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002904:	f246 2273 	movw	r2, #25203	; 0x6273
 8002908:	801a      	strh	r2, [r3, #0]
        return;
 800290a:	e0a9      	b.n	8002a60 <OSTaskCreate+0x1e0>
            return;
        }
    }
#endif

    if (prio == (OS_CFG_PRIO_MAX - 1u)) {
 800290c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002910:	2b1f      	cmp	r3, #31
 8002912:	d108      	bne.n	8002926 <OSTaskCreate+0xa6>
        if (p_tcb != &OSIdleTaskTCB) {
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4a56      	ldr	r2, [pc, #344]	; (8002a70 <OSTaskCreate+0x1f0>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d004      	beq.n	8002926 <OSTaskCreate+0xa6>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
            TRACE_OS_TASK_CREATE_FAILED(p_tcb);             /* Record the event.                                      */
#endif
           *p_err = OS_ERR_PRIO_INVALID;                    /* Not allowed to use same priority as idle task          */
 800291c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800291e:	f246 2273 	movw	r2, #25203	; 0x6273
 8002922:	801a      	strh	r2, [r3, #0]
            return;
 8002924:	e09c      	b.n	8002a60 <OSTaskCreate+0x1e0>
        }
    }

    OS_TaskInitTCB(p_tcb);                                  /* Initialize the TCB to default values                   */
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f000 faca 	bl	8002ec0 <OS_TaskInitTCB>

   *p_err = OS_ERR_NONE;
 800292c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800292e:	2200      	movs	r2, #0
 8002930:	801a      	strh	r2, [r3, #0]
                                                            /* --------------- CLEAR THE TASK'S STACK --------------- */
    if ((opt & OS_OPT_TASK_STK_CHK) != (OS_OPT)0) {         /* See if stack checking has been enabled                 */
 8002932:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b00      	cmp	r3, #0
 800293c:	d017      	beq.n	800296e <OSTaskCreate+0xee>
        if ((opt & OS_OPT_TASK_STK_CLR) != (OS_OPT)0) {     /* See if stack needs to be cleared                       */
 800293e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d011      	beq.n	800296e <OSTaskCreate+0xee>
            p_sp = p_stk_base;
 800294a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800294c:	61fb      	str	r3, [r7, #28]
            for (i = 0u; i < stk_size; i++) {               /* Stack grows from HIGH to LOW memory                    */
 800294e:	2300      	movs	r3, #0
 8002950:	627b      	str	r3, [r7, #36]	; 0x24
 8002952:	e008      	b.n	8002966 <OSTaskCreate+0xe6>
               *p_sp = (CPU_STK)0;                          /* Clear from bottom of stack and up!                     */
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]
                p_sp++;
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	3304      	adds	r3, #4
 800295e:	61fb      	str	r3, [r7, #28]
   *p_err = OS_ERR_NONE;
                                                            /* --------------- CLEAR THE TASK'S STACK --------------- */
    if ((opt & OS_OPT_TASK_STK_CHK) != (OS_OPT)0) {         /* See if stack checking has been enabled                 */
        if ((opt & OS_OPT_TASK_STK_CLR) != (OS_OPT)0) {     /* See if stack needs to be cleared                       */
            p_sp = p_stk_base;
            for (i = 0u; i < stk_size; i++) {               /* Stack grows from HIGH to LOW memory                    */
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	3301      	adds	r3, #1
 8002964:	627b      	str	r3, [r7, #36]	; 0x24
 8002966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800296a:	429a      	cmp	r2, r3
 800296c:	d3f2      	bcc.n	8002954 <OSTaskCreate+0xd4>
            }
        }
    }
                                                            /* ------- INITIALIZE THE STACK FRAME OF THE TASK ------- */
#if (CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO)
    p_stk_limit = p_stk_base + stk_limit;
 800296e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002974:	4413      	add	r3, r2
 8002976:	617b      	str	r3, [r7, #20]
#else
    p_stk_limit = p_stk_base + (stk_size - 1u) - stk_limit;
#endif

    p_sp = OSTaskStkInit(p_task,
 8002978:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800297c:	9301      	str	r3, [sp, #4]
 800297e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002986:	6839      	ldr	r1, [r7, #0]
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f003 fcd3 	bl	8006334 <OSTaskStkInit>
 800298e:	61f8      	str	r0, [r7, #28]
                         stk_size,
                         opt);

                                                            /* -------------- INITIALIZE THE TCB FIELDS ------------- */
#if OS_CFG_DBG_EN > 0u
    p_tcb->TaskEntryAddr = p_task;                          /* Save task entry point address                          */
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	629a      	str	r2, [r3, #40]	; 0x28
    p_tcb->TaskEntryArg  = p_arg;                           /* Save task entry argument                               */
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif

#if OS_CFG_DBG_EN > 0u
    p_tcb->NamePtr       = p_name;                          /* Save task name                                         */
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	621a      	str	r2, [r3, #32]
#else
    (void)&p_name;
#endif

    p_tcb->Prio          = prio;                            /* Save the task's priority                               */
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80029a8:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

#if OS_CFG_MUTEX_EN > 0u
    p_tcb->BasePrio      = prio;                            /* Set the base priority                                  */
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80029b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
#endif

    p_tcb->StkPtr        = p_sp;                            /* Save the new top-of-stack pointer                      */
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	69fa      	ldr	r2, [r7, #28]
 80029ba:	601a      	str	r2, [r3, #0]
#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u))
    p_tcb->StkLimitPtr   = p_stk_limit;                     /* Save the stack limit pointer                           */
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	609a      	str	r2, [r3, #8]
    }
#else
    (void)&time_quanta;
#endif

    p_tcb->ExtPtr        = p_ext;                           /* Save pointer to TCB extension                          */
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029c6:	605a      	str	r2, [r3, #4]
#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u))
    p_tcb->StkBasePtr    = p_stk_base;                      /* Save pointer to the base address of the stack          */
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029cc:	625a      	str	r2, [r3, #36]	; 0x24
    p_tcb->StkSize       = stk_size;                        /* Save the stack size (in number of CPU_STK elements)    */
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029d2:	641a      	str	r2, [r3, #64]	; 0x40
#endif
    p_tcb->Opt           = opt;                             /* Save task options                                      */
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80029da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if OS_CFG_TASK_REG_TBL_SIZE > 0u
    for (reg_nbr = 0u; reg_nbr < OS_CFG_TASK_REG_TBL_SIZE; reg_nbr++) {
 80029de:	2300      	movs	r3, #0
 80029e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029e4:	e00b      	b.n	80029fe <OSTaskCreate+0x17e>
        p_tcb->RegTbl[reg_nbr] = (OS_REG)0;
 80029e6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	321e      	adds	r2, #30
 80029ee:	2100      	movs	r1, #0
 80029f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    p_tcb->StkSize       = stk_size;                        /* Save the stack size (in number of CPU_STK elements)    */
#endif
    p_tcb->Opt           = opt;                             /* Save task options                                      */

#if OS_CFG_TASK_REG_TBL_SIZE > 0u
    for (reg_nbr = 0u; reg_nbr < OS_CFG_TASK_REG_TBL_SIZE; reg_nbr++) {
 80029f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80029f8:	3301      	adds	r3, #1
 80029fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0ef      	beq.n	80029e6 <OSTaskCreate+0x166>
        p_tcb->RegTbl[reg_nbr] = (OS_REG)0;
    }
#endif

#if OS_CFG_TASK_Q_EN > 0u
    OS_MsgQInit(&p_tcb->MsgQ,                               /* Initialize the task's message queue                    */
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	3360      	adds	r3, #96	; 0x60
 8002a0a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002a0e:	4611      	mov	r1, r2
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 fdf3 	bl	80035fc <OS_MsgQInit>
                q_size);
#else
    (void)&q_size;
#endif

    OSTaskCreateHook(p_tcb);                                /* Call user defined hook                                 */
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f003 fc68 	bl	80062ec <OSTaskCreateHook>
        p_tcb->TLS_Tbl[id] = (OS_TLS)0;
    }
    OS_TLS_TaskCreate(p_tcb);                               /* Call TLS hook                                          */
#endif
                                                            /* --------------- ADD TASK TO READY LIST --------------- */
    OS_CRITICAL_ENTER();
 8002a1c:	f7fd fc60 	bl	80002e0 <CPU_SR_Save>
 8002a20:	61b8      	str	r0, [r7, #24]
    OS_PrioInsert(p_tcb->Prio);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f002 fc9d 	bl	8005368 <OS_PrioInsert>
    OS_RdyListInsertTail(p_tcb);
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f001 fd14 	bl	800445c <OS_RdyListInsertTail>

#if OS_CFG_DBG_EN > 0u
    OS_TaskDbgListAdd(p_tcb);
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 fa01 	bl	8002e3c <OS_TaskDbgListAdd>
#endif

    OSTaskQty++;                                            /* Increment the #tasks counter                           */
 8002a3a:	4b0e      	ldr	r3, [pc, #56]	; (8002a74 <OSTaskCreate+0x1f4>)
 8002a3c:	881b      	ldrh	r3, [r3, #0]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <OSTaskCreate+0x1f4>)
 8002a44:	801a      	strh	r2, [r3, #0]

    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Return if multitasking has not started                 */
 8002a46:	4b0c      	ldr	r3, [pc, #48]	; (8002a78 <OSTaskCreate+0x1f8>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d003      	beq.n	8002a56 <OSTaskCreate+0x1d6>
        OS_CRITICAL_EXIT();
 8002a4e:	69b8      	ldr	r0, [r7, #24]
 8002a50:	f7fd fc4a 	bl	80002e8 <CPU_SR_Restore>
        return;
 8002a54:	e004      	b.n	8002a60 <OSTaskCreate+0x1e0>
    }

    OS_CRITICAL_EXIT_NO_SCHED();
 8002a56:	69b8      	ldr	r0, [r7, #24]
 8002a58:	f7fd fc46 	bl	80002e8 <CPU_SR_Restore>

    OSSched();
 8002a5c:	f001 f848 	bl	8003af0 <OSSched>
}
 8002a60:	3728      	adds	r7, #40	; 0x28
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	20002700 	.word	0x20002700
 8002a6c:	0800ec8c 	.word	0x0800ec8c
 8002a70:	200027d0 	.word	0x200027d0
 8002a74:	20002702 	.word	0x20002702
 8002a78:	20002479 	.word	0x20002479

08002a7c <OSTaskResume>:
*/

#if OS_CFG_TASK_SUSPEND_EN > 0u
void  OSTaskResume (OS_TCB  *p_tcb,
                    OS_ERR  *p_err)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
    CPU_SR_ALLOC();
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
    }
#endif

#if (OS_CFG_ISR_POST_DEFERRED_EN   == 0u) && \
    (OS_CFG_CALLED_FROM_ISR_CHK_EN >  0u)
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 8002a8a:	4b13      	ldr	r3, [pc, #76]	; (8002ad8 <OSTaskResume+0x5c>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d004      	beq.n	8002a9c <OSTaskResume+0x20>
       *p_err = OS_ERR_TASK_RESUME_ISR;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	f247 1255 	movw	r2, #29013	; 0x7155
 8002a98:	801a      	strh	r2, [r3, #0]
        return;
 8002a9a:	e019      	b.n	8002ad0 <OSTaskResume+0x54>
    }
#endif


    CPU_CRITICAL_ENTER();
 8002a9c:	f7fd fc20 	bl	80002e0 <CPU_SR_Save>
 8002aa0:	60f8      	str	r0, [r7, #12]
#if OS_CFG_ARG_CHK_EN > 0u
    if ((p_tcb == (OS_TCB *)0) ||                           /* We cannot resume 'self'                                */
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d004      	beq.n	8002ab2 <OSTaskResume+0x36>
        (p_tcb == OSTCBCurPtr)) {
 8002aa8:	4b0c      	ldr	r3, [pc, #48]	; (8002adc <OSTaskResume+0x60>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
#endif


    CPU_CRITICAL_ENTER();
#if OS_CFG_ARG_CHK_EN > 0u
    if ((p_tcb == (OS_TCB *)0) ||                           /* We cannot resume 'self'                                */
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d107      	bne.n	8002ac2 <OSTaskResume+0x46>
        (p_tcb == OSTCBCurPtr)) {
        CPU_CRITICAL_EXIT();
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f7fd fc18 	bl	80002e8 <CPU_SR_Restore>
       *p_err  = OS_ERR_TASK_RESUME_SELF;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	f247 1257 	movw	r2, #29015	; 0x7157
 8002abe:	801a      	strh	r2, [r3, #0]
        return;
 8002ac0:	e006      	b.n	8002ad0 <OSTaskResume+0x54>
    }
#endif
    CPU_CRITICAL_EXIT();
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f7fd fc10 	bl	80002e8 <CPU_SR_Restore>
                    (OS_ERR    *)p_err);
        return;
    }
#endif

    OS_TaskResume(p_tcb, p_err);
 8002ac8:	6839      	ldr	r1, [r7, #0]
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 fac6 	bl	800305c <OS_TaskResume>

#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_TASK_RESUME(p_tcb);                            /* Record the event.                                      */
#endif
}
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20002700 	.word	0x20002700
 8002adc:	200026d4 	.word	0x200026d4

08002ae0 <OSTaskSemPend>:

OS_SEM_CTR  OSTaskSemPend (OS_TICK   timeout,
                           OS_OPT    opt,
                           CPU_TS   *p_ts,
                           OS_ERR   *p_err)
{
 8002ae0:	b590      	push	{r4, r7, lr}
 8002ae2:	b087      	sub	sp, #28
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	607a      	str	r2, [r7, #4]
 8002aea:	603b      	str	r3, [r7, #0]
 8002aec:	460b      	mov	r3, r1
 8002aee:	817b      	strh	r3, [r7, #10]
    OS_SEM_CTR    ctr;
    CPU_SR_ALLOC();
 8002af0:	2300      	movs	r3, #0
 8002af2:	617b      	str	r3, [r7, #20]
        return ((OS_SEM_CTR)0);
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 8002af4:	4b6f      	ldr	r3, [pc, #444]	; (8002cb4 <OSTaskSemPend+0x1d4>)
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d005      	beq.n	8002b08 <OSTaskSemPend+0x28>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_SEM_PEND_FAILED(OSTCBCurPtr);         /* Record the event.                                      */
#endif
       *p_err = OS_ERR_PEND_ISR;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	f246 12ae 	movw	r2, #25006	; 0x61ae
 8002b02:	801a      	strh	r2, [r3, #0]
        return ((OS_SEM_CTR)0);
 8002b04:	2300      	movs	r3, #0
 8002b06:	e0d0      	b.n	8002caa <OSTaskSemPend+0x1ca>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    switch (opt) {                                          /* Validate 'opt'                                         */
 8002b08:	897b      	ldrh	r3, [r7, #10]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d008      	beq.n	8002b20 <OSTaskSemPend+0x40>
 8002b0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b12:	d005      	beq.n	8002b20 <OSTaskSemPend+0x40>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_TASK_SEM_PEND_FAILED(OSTCBCurPtr);    /* Record the event.                                      */
#endif
            *p_err = OS_ERR_OPT_INVALID;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	f645 6225 	movw	r2, #24101	; 0x5e25
 8002b1a:	801a      	strh	r2, [r3, #0]
             return ((OS_SEM_CTR)0);
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	e0c4      	b.n	8002caa <OSTaskSemPend+0x1ca>

#if OS_CFG_ARG_CHK_EN > 0u
    switch (opt) {                                          /* Validate 'opt'                                         */
        case OS_OPT_PEND_BLOCKING:
        case OS_OPT_PEND_NON_BLOCKING:
             break;
 8002b20:	bf00      	nop
            *p_err = OS_ERR_OPT_INVALID;
             return ((OS_SEM_CTR)0);
    }
#endif

    if (p_ts != (CPU_TS *)0) {
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d002      	beq.n	8002b2e <OSTaskSemPend+0x4e>
       *p_ts  = (CPU_TS  )0;                                /* Initialize the returned timestamp                      */
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]
    }

    CPU_CRITICAL_ENTER();
 8002b2e:	f7fd fbd7 	bl	80002e0 <CPU_SR_Save>
 8002b32:	6178      	str	r0, [r7, #20]
    if (OSTCBCurPtr->SemCtr > (OS_SEM_CTR)0) {              /* See if task already been signaled                      */
 8002b34:	4b60      	ldr	r3, [pc, #384]	; (8002cb8 <OSTaskSemPend+0x1d8>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d035      	beq.n	8002baa <OSTaskSemPend+0xca>
        OSTCBCurPtr->SemCtr--;
 8002b3e:	4b5e      	ldr	r3, [pc, #376]	; (8002cb8 <OSTaskSemPend+0x1d8>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b44:	3a01      	subs	r2, #1
 8002b46:	64da      	str	r2, [r3, #76]	; 0x4c
        ctr    = OSTCBCurPtr->SemCtr;
 8002b48:	4b5b      	ldr	r3, [pc, #364]	; (8002cb8 <OSTaskSemPend+0x1d8>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b4e:	613b      	str	r3, [r7, #16]
        if (p_ts != (CPU_TS *)0) {
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d004      	beq.n	8002b60 <OSTaskSemPend+0x80>
           *p_ts  = OSTCBCurPtr->TS;
 8002b56:	4b58      	ldr	r3, [pc, #352]	; (8002cb8 <OSTaskSemPend+0x1d8>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	601a      	str	r2, [r3, #0]
        }
#if OS_CFG_TASK_PROFILE_EN > 0u
        OSTCBCurPtr->SemPendTime = OS_TS_GET() - OSTCBCurPtr->TS;
 8002b60:	4b55      	ldr	r3, [pc, #340]	; (8002cb8 <OSTaskSemPend+0x1d8>)
 8002b62:	681c      	ldr	r4, [r3, #0]
 8002b64:	f004 ff02 	bl	800796c <CPU_TS_TmrRd>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	4b53      	ldr	r3, [pc, #332]	; (8002cb8 <OSTaskSemPend+0x1d8>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        if (OSTCBCurPtr->SemPendTimeMax < OSTCBCurPtr->SemPendTime) {
 8002b76:	4b50      	ldr	r3, [pc, #320]	; (8002cb8 <OSTaskSemPend+0x1d8>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002b7e:	4b4e      	ldr	r3, [pc, #312]	; (8002cb8 <OSTaskSemPend+0x1d8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d207      	bcs.n	8002b9a <OSTaskSemPend+0xba>
            OSTCBCurPtr->SemPendTimeMax = OSTCBCurPtr->SemPendTime;
 8002b8a:	4b4b      	ldr	r3, [pc, #300]	; (8002cb8 <OSTaskSemPend+0x1d8>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a4a      	ldr	r2, [pc, #296]	; (8002cb8 <OSTaskSemPend+0x1d8>)
 8002b90:	6812      	ldr	r2, [r2, #0]
 8002b92:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 8002b96:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        }
#endif
        CPU_CRITICAL_EXIT();
 8002b9a:	6978      	ldr	r0, [r7, #20]
 8002b9c:	f7fd fba4 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_SEM_PEND(OSTCBCurPtr);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_NONE;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	801a      	strh	r2, [r3, #0]
        return (ctr);
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	e07f      	b.n	8002caa <OSTaskSemPend+0x1ca>
    }

    if ((opt & OS_OPT_PEND_NON_BLOCKING) != (OS_OPT)0) {    /* Caller wants to block if not available?                */
 8002baa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	da08      	bge.n	8002bc4 <OSTaskSemPend+0xe4>
        CPU_CRITICAL_EXIT();        
 8002bb2:	6978      	ldr	r0, [r7, #20]
 8002bb4:	f7fd fb98 	bl	80002e8 <CPU_SR_Restore>
       *p_err = OS_ERR_PEND_WOULD_BLOCK;                    /* No                                                     */
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	f246 12b0 	movw	r2, #25008	; 0x61b0
 8002bbe:	801a      	strh	r2, [r3, #0]
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_SEM_PEND_FAILED(OSTCBCurPtr);         /* Record the event.                                      */
#endif
        return ((OS_SEM_CTR)0);
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	e072      	b.n	8002caa <OSTaskSemPend+0x1ca>
    } else {                                                /* Yes                                                    */
        if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /* Can't pend when the scheduler is locked                */
 8002bc4:	4b3d      	ldr	r3, [pc, #244]	; (8002cbc <OSTaskSemPend+0x1dc>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d008      	beq.n	8002bde <OSTaskSemPend+0xfe>
            CPU_CRITICAL_EXIT();
 8002bcc:	6978      	ldr	r0, [r7, #20]
 8002bce:	f7fd fb8b 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
            TRACE_OS_TASK_SEM_PEND_FAILED(OSTCBCurPtr);     /* Record the event.                                      */
#endif
           *p_err = OS_ERR_SCHED_LOCKED;
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	f646 5263 	movw	r2, #28003	; 0x6d63
 8002bd8:	801a      	strh	r2, [r3, #0]
            return ((OS_SEM_CTR)0);
 8002bda:	2300      	movs	r3, #0
 8002bdc:	e065      	b.n	8002caa <OSTaskSemPend+0x1ca>
        }
    }
                                                            /* Lock the scheduler/re-enable interrupts                */
    OS_CRITICAL_ENTER_CPU_EXIT();
    OS_Pend((OS_PEND_DATA *)0,                              /* Block task pending on Signal                           */
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2207      	movs	r2, #7
 8002be2:	2100      	movs	r1, #0
 8002be4:	2000      	movs	r0, #0
 8002be6:	f001 f8ef 	bl	8003dc8 <OS_Pend>
            (OS_PEND_OBJ  *)0,
            (OS_STATE      )OS_TASK_PEND_ON_TASK_SEM,
            (OS_TICK       )timeout);
    OS_CRITICAL_EXIT_NO_SCHED();
 8002bea:	6978      	ldr	r0, [r7, #20]
 8002bec:	f7fd fb7c 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_TASK_SEM_PEND_BLOCK(OSTCBCurPtr);              /* Record the event.                                      */
#endif
    OSSched();                                              /* Find next highest priority task ready to run           */
 8002bf0:	f000 ff7e 	bl	8003af0 <OSSched>

    CPU_CRITICAL_ENTER();
 8002bf4:	f7fd fb74 	bl	80002e0 <CPU_SR_Save>
 8002bf8:	6178      	str	r0, [r7, #20]
    switch (OSTCBCurPtr->PendStatus) {                      /* See if we timed-out or aborted                         */
 8002bfa:	4b2f      	ldr	r3, [pc, #188]	; (8002cb8 <OSTaskSemPend+0x1d8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d02c      	beq.n	8002c60 <OSTaskSemPend+0x180>
 8002c06:	2b03      	cmp	r3, #3
 8002c08:	d037      	beq.n	8002c7a <OSTaskSemPend+0x19a>
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d140      	bne.n	8002c90 <OSTaskSemPend+0x1b0>
        case OS_STATUS_PEND_OK:
             if (p_ts != (CPU_TS *)0) {
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d021      	beq.n	8002c58 <OSTaskSemPend+0x178>
                *p_ts                    =  OSTCBCurPtr->TS;
 8002c14:	4b28      	ldr	r3, [pc, #160]	; (8002cb8 <OSTaskSemPend+0x1d8>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	601a      	str	r2, [r3, #0]
#if OS_CFG_TASK_PROFILE_EN > 0u
                OSTCBCurPtr->SemPendTime = OS_TS_GET() - OSTCBCurPtr->TS;
 8002c1e:	4b26      	ldr	r3, [pc, #152]	; (8002cb8 <OSTaskSemPend+0x1d8>)
 8002c20:	681c      	ldr	r4, [r3, #0]
 8002c22:	f004 fea3 	bl	800796c <CPU_TS_TmrRd>
 8002c26:	4602      	mov	r2, r0
 8002c28:	4b23      	ldr	r3, [pc, #140]	; (8002cb8 <OSTaskSemPend+0x1d8>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
                if (OSTCBCurPtr->SemPendTimeMax < OSTCBCurPtr->SemPendTime) {
 8002c34:	4b20      	ldr	r3, [pc, #128]	; (8002cb8 <OSTaskSemPend+0x1d8>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002c3c:	4b1e      	ldr	r3, [pc, #120]	; (8002cb8 <OSTaskSemPend+0x1d8>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d207      	bcs.n	8002c58 <OSTaskSemPend+0x178>
                    OSTCBCurPtr->SemPendTimeMax = OSTCBCurPtr->SemPendTime;
 8002c48:	4b1b      	ldr	r3, [pc, #108]	; (8002cb8 <OSTaskSemPend+0x1d8>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a1a      	ldr	r2, [pc, #104]	; (8002cb8 <OSTaskSemPend+0x1d8>)
 8002c4e:	6812      	ldr	r2, [r2, #0]
 8002c50:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 8002c54:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#endif
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_TASK_SEM_PEND(OSTCBCurPtr);           /* Record the event.                                      */
#endif
            *p_err = OS_ERR_NONE;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	801a      	strh	r2, [r3, #0]
             break;
 8002c5e:	e01c      	b.n	8002c9a <OSTaskSemPend+0x1ba>

        case OS_STATUS_PEND_ABORT:
             if (p_ts != (CPU_TS *)0) {
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d004      	beq.n	8002c70 <OSTaskSemPend+0x190>
                *p_ts  =  OSTCBCurPtr->TS;
 8002c66:	4b14      	ldr	r3, [pc, #80]	; (8002cb8 <OSTaskSemPend+0x1d8>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_TASK_SEM_PEND_FAILED(OSTCBCurPtr);    /* Record the event.                                      */
#endif
            *p_err = OS_ERR_PEND_ABORT;                     /* Indicate that we aborted                               */
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	f246 12a9 	movw	r2, #25001	; 0x61a9
 8002c76:	801a      	strh	r2, [r3, #0]
             break;
 8002c78:	e00f      	b.n	8002c9a <OSTaskSemPend+0x1ba>

        case OS_STATUS_PEND_TIMEOUT:
             if (p_ts != (CPU_TS *)0) {
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d002      	beq.n	8002c86 <OSTaskSemPend+0x1a6>
                *p_ts  = (CPU_TS  )0;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_TASK_SEM_PEND_FAILED(OSTCBCurPtr);    /* Record the event.                                      */
#endif
            *p_err = OS_ERR_TIMEOUT;                        /* Indicate that we didn't get event within TO            */
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	f247 22d9 	movw	r2, #29401	; 0x72d9
 8002c8c:	801a      	strh	r2, [r3, #0]
             break;
 8002c8e:	e004      	b.n	8002c9a <OSTaskSemPend+0x1ba>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_TASK_SEM_PEND_FAILED(OSTCBCurPtr);    /* Record the event.                                      */
#endif
            *p_err = OS_ERR_STATUS_INVALID;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	f646 622e 	movw	r2, #28206	; 0x6e2e
 8002c96:	801a      	strh	r2, [r3, #0]
             break;
 8002c98:	bf00      	nop
    }
    ctr = OSTCBCurPtr->SemCtr;
 8002c9a:	4b07      	ldr	r3, [pc, #28]	; (8002cb8 <OSTaskSemPend+0x1d8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca0:	613b      	str	r3, [r7, #16]
    CPU_CRITICAL_EXIT();
 8002ca2:	6978      	ldr	r0, [r7, #20]
 8002ca4:	f7fd fb20 	bl	80002e8 <CPU_SR_Restore>
    return (ctr);
 8002ca8:	693b      	ldr	r3, [r7, #16]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	371c      	adds	r7, #28
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd90      	pop	{r4, r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	20002700 	.word	0x20002700
 8002cb8:	200026d4 	.word	0x200026d4
 8002cbc:	20002468 	.word	0x20002468

08002cc0 <OSTaskSemPost>:
*/

OS_SEM_CTR  OSTaskSemPost (OS_TCB  *p_tcb,
                           OS_OPT   opt,
                           OS_ERR  *p_err)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	460b      	mov	r3, r1
 8002cca:	607a      	str	r2, [r7, #4]
 8002ccc:	817b      	strh	r3, [r7, #10]
        return ((OS_SEM_CTR)0);
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    switch (opt) {                                          /* Validate 'opt'                                         */
 8002cce:	897b      	ldrh	r3, [r7, #10]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d008      	beq.n	8002ce6 <OSTaskSemPost+0x26>
 8002cd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cd8:	d005      	beq.n	8002ce6 <OSTaskSemPost+0x26>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_TASK_SEM_POST_FAILED(p_tcb);          /* Record the event.                                      */
#endif
            *p_err =  OS_ERR_OPT_INVALID;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f645 6225 	movw	r2, #24101	; 0x5e25
 8002ce0:	801a      	strh	r2, [r3, #0]
             return ((OS_SEM_CTR)0u);
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	e00b      	b.n	8002cfe <OSTaskSemPost+0x3e>

#if OS_CFG_ARG_CHK_EN > 0u
    switch (opt) {                                          /* Validate 'opt'                                         */
        case OS_OPT_POST_NONE:
        case OS_OPT_POST_NO_SCHED:
             break;
 8002ce6:	bf00      	nop
            *p_err =  OS_ERR_OPT_INVALID;
             return ((OS_SEM_CTR)0u);
    }
#endif

    ts = OS_TS_GET();                                       /* Get timestamp                                          */
 8002ce8:	f004 fe40 	bl	800796c <CPU_TS_TmrRd>
 8002cec:	6178      	str	r0, [r7, #20]

#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_TASK_SEM_POST(p_tcb);                          /* Record the event.                                      */
#endif

    ctr = OS_TaskSemPost(p_tcb,
 8002cee:	8979      	ldrh	r1, [r7, #10]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f000 fa57 	bl	80031a8 <OS_TaskSemPost>
 8002cfa:	6138      	str	r0, [r7, #16]
                         opt,
                         ts,
                         p_err);

    return (ctr);
 8002cfc:	693b      	ldr	r3, [r7, #16]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3718      	adds	r7, #24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop

08002d08 <OSTaskStkChk>:
#if OS_CFG_STAT_TASK_STK_CHK_EN > 0u
void  OSTaskStkChk (OS_TCB        *p_tcb,
                    CPU_STK_SIZE  *p_free,
                    CPU_STK_SIZE  *p_used,
                    OS_ERR        *p_err)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b088      	sub	sp, #32
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
 8002d14:	603b      	str	r3, [r7, #0]
    CPU_STK_SIZE  free_stk;
    CPU_STK      *p_stk;
    CPU_SR_ALLOC();
 8002d16:	2300      	movs	r3, #0
 8002d18:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* See if trying to check stack from ISR                  */
 8002d1a:	4b35      	ldr	r3, [pc, #212]	; (8002df0 <OSTaskStkChk+0xe8>)
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d004      	beq.n	8002d2c <OSTaskStkChk+0x24>
       *p_err = OS_ERR_TASK_STK_CHK_ISR;
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	f247 1259 	movw	r2, #29017	; 0x7159
 8002d28:	801a      	strh	r2, [r3, #0]
        return;
 8002d2a:	e05e      	b.n	8002dea <OSTaskStkChk+0xe2>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_free == (CPU_STK_SIZE*)0) {                       /* User must specify valid destinations for the sizes     */
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d104      	bne.n	8002d3c <OSTaskStkChk+0x34>
       *p_err  = OS_ERR_PTR_INVALID;
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	f246 22d5 	movw	r2, #25301	; 0x62d5
 8002d38:	801a      	strh	r2, [r3, #0]
        return;
 8002d3a:	e056      	b.n	8002dea <OSTaskStkChk+0xe2>
    }

    if (p_used == (CPU_STK_SIZE*)0) {
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d104      	bne.n	8002d4c <OSTaskStkChk+0x44>
       *p_err  = OS_ERR_PTR_INVALID;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	f246 22d5 	movw	r2, #25301	; 0x62d5
 8002d48:	801a      	strh	r2, [r3, #0]
        return;
 8002d4a:	e04e      	b.n	8002dea <OSTaskStkChk+0xe2>
    }
#endif

    CPU_CRITICAL_ENTER();
 8002d4c:	f7fd fac8 	bl	80002e0 <CPU_SR_Save>
 8002d50:	6178      	str	r0, [r7, #20]
    if (p_tcb == (OS_TCB *)0) {                             /* Check the stack of the current task?                   */
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d102      	bne.n	8002d5e <OSTaskStkChk+0x56>
        p_tcb = OSTCBCurPtr;                                /* Yes                                                    */
 8002d58:	4b26      	ldr	r3, [pc, #152]	; (8002df4 <OSTaskStkChk+0xec>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	60fb      	str	r3, [r7, #12]
    }

    if (p_tcb->StkPtr == (CPU_STK*)0) {                     /* Make sure task exist                                   */
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10d      	bne.n	8002d82 <OSTaskStkChk+0x7a>
        CPU_CRITICAL_EXIT();
 8002d66:	6978      	ldr	r0, [r7, #20]
 8002d68:	f7fd fabe 	bl	80002e8 <CPU_SR_Restore>
       *p_free = (CPU_STK_SIZE)0;
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	601a      	str	r2, [r3, #0]
       *p_used = (CPU_STK_SIZE)0;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
       *p_err  =  OS_ERR_TASK_NOT_EXIST;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	f247 1252 	movw	r2, #29010	; 0x7152
 8002d7e:	801a      	strh	r2, [r3, #0]
        return;
 8002d80:	e033      	b.n	8002dea <OSTaskStkChk+0xe2>
    }

    if ((p_tcb->Opt & OS_OPT_TASK_STK_CHK) == (OS_OPT)0) {  /* Make sure stack checking option is set                 */
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10d      	bne.n	8002dac <OSTaskStkChk+0xa4>
        CPU_CRITICAL_EXIT();
 8002d90:	6978      	ldr	r0, [r7, #20]
 8002d92:	f7fd faa9 	bl	80002e8 <CPU_SR_Restore>
       *p_free = (CPU_STK_SIZE)0;
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
       *p_used = (CPU_STK_SIZE)0;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]
       *p_err  =  OS_ERR_TASK_OPT;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	f247 1254 	movw	r2, #29012	; 0x7154
 8002da8:	801a      	strh	r2, [r3, #0]
        return;
 8002daa:	e01e      	b.n	8002dea <OSTaskStkChk+0xe2>
    }
    CPU_CRITICAL_EXIT();
 8002dac:	6978      	ldr	r0, [r7, #20]
 8002dae:	f7fd fa9b 	bl	80002e8 <CPU_SR_Restore>

    free_stk  = 0u;
 8002db2:	2300      	movs	r3, #0
 8002db4:	61fb      	str	r3, [r7, #28]
#if CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO
    p_stk = p_tcb->StkBasePtr;                              /* Start at the lowest memory and go up                   */
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	61bb      	str	r3, [r7, #24]
    while (*p_stk == (CPU_STK)0) {                          /* Compute the number of zero entries on the stk          */
 8002dbc:	e005      	b.n	8002dca <OSTaskStkChk+0xc2>
        p_stk++;
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	61bb      	str	r3, [r7, #24]
        free_stk++;
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	61fb      	str	r3, [r7, #28]
    CPU_CRITICAL_EXIT();

    free_stk  = 0u;
#if CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO
    p_stk = p_tcb->StkBasePtr;                              /* Start at the lowest memory and go up                   */
    while (*p_stk == (CPU_STK)0) {                          /* Compute the number of zero entries on the stk          */
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d0f5      	beq.n	8002dbe <OSTaskStkChk+0xb6>
    while (*p_stk == (CPU_STK)0) {
        free_stk++;
        p_stk--;
    }
#endif
   *p_free = free_stk;
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	69fa      	ldr	r2, [r7, #28]
 8002dd6:	601a      	str	r2, [r3, #0]
   *p_used = (p_tcb->StkSize - free_stk);                   /* Compute number of entries used on the stack            */
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	1ad2      	subs	r2, r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	601a      	str	r2, [r3, #0]
   *p_err  = OS_ERR_NONE;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	2200      	movs	r2, #0
 8002de8:	801a      	strh	r2, [r3, #0]
}
 8002dea:	3720      	adds	r7, #32
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	20002700 	.word	0x20002700
 8002df4:	200026d4 	.word	0x200026d4

08002df8 <OSTaskSuspend>:
*/

#if OS_CFG_TASK_SUSPEND_EN > 0u
void   OSTaskSuspend (OS_TCB  *p_tcb,
                      OS_ERR  *p_err)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
    }
#endif

#if (OS_CFG_ISR_POST_DEFERRED_EN   == 0u) && \
    (OS_CFG_CALLED_FROM_ISR_CHK_EN >  0u)
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 8002e02:	4b0c      	ldr	r3, [pc, #48]	; (8002e34 <OSTaskSuspend+0x3c>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d004      	beq.n	8002e14 <OSTaskSuspend+0x1c>
       *p_err = OS_ERR_TASK_SUSPEND_ISR;
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	f247 125d 	movw	r2, #29021	; 0x715d
 8002e10:	801a      	strh	r2, [r3, #0]
        return;
 8002e12:	e00c      	b.n	8002e2e <OSTaskSuspend+0x36>
    }
#endif

    if (p_tcb == &OSIdleTaskTCB) {                          /* Make sure not suspending the idle task                 */
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a08      	ldr	r2, [pc, #32]	; (8002e38 <OSTaskSuspend+0x40>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d104      	bne.n	8002e26 <OSTaskSuspend+0x2e>
       *p_err = OS_ERR_TASK_SUSPEND_IDLE;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	f247 125b 	movw	r2, #29019	; 0x715b
 8002e22:	801a      	strh	r2, [r3, #0]
        return;
 8002e24:	e003      	b.n	8002e2e <OSTaskSuspend+0x36>
                    (OS_ERR    *)p_err);
        return;
    }
#endif

    OS_TaskSuspend(p_tcb, p_err);
 8002e26:	6839      	ldr	r1, [r7, #0]
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 fa51 	bl	80032d0 <OS_TaskSuspend>
}
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	20002700 	.word	0x20002700
 8002e38:	200027d0 	.word	0x200027d0

08002e3c <OS_TaskDbgListAdd>:
************************************************************************************************************************
*/

#if OS_CFG_DBG_EN > 0u
void  OS_TaskDbgListAdd (OS_TCB  *p_tcb)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
    p_tcb->DbgPrevPtr                = (OS_TCB *)0;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    if (OSTaskDbgListPtr == (OS_TCB *)0) {
 8002e4c:	4b0d      	ldr	r3, [pc, #52]	; (8002e84 <OS_TaskDbgListAdd+0x48>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d104      	bne.n	8002e5e <OS_TaskDbgListAdd+0x22>
        p_tcb->DbgNextPtr            = (OS_TCB *)0;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8002e5c:	e009      	b.n	8002e72 <OS_TaskDbgListAdd+0x36>
    } else {
        p_tcb->DbgNextPtr            =  OSTaskDbgListPtr;
 8002e5e:	4b09      	ldr	r3, [pc, #36]	; (8002e84 <OS_TaskDbgListAdd+0x48>)
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        OSTaskDbgListPtr->DbgPrevPtr =  p_tcb;
 8002e68:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <OS_TaskDbgListAdd+0x48>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    }
    OSTaskDbgListPtr                 =  p_tcb;
 8002e72:	4a04      	ldr	r2, [pc, #16]	; (8002e84 <OS_TaskDbgListAdd+0x48>)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6013      	str	r3, [r2, #0]
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc80      	pop	{r7}
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	200026e8 	.word	0x200026e8

08002e88 <OS_TaskInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TaskInit (OS_ERR  *p_err)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSTaskDbgListPtr = (OS_TCB      *)0;
 8002e90:	4b08      	ldr	r3, [pc, #32]	; (8002eb4 <OS_TaskInit+0x2c>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	601a      	str	r2, [r3, #0]
#endif

    OSTaskQty        = (OS_OBJ_QTY   )0;                    /* Clear the number of tasks                              */
 8002e96:	4b08      	ldr	r3, [pc, #32]	; (8002eb8 <OS_TaskInit+0x30>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	801a      	strh	r2, [r3, #0]
    OSTaskCtxSwCtr   = (OS_CTX_SW_CTR)0;                    /* Clear the context switch counter                       */
 8002e9c:	4b07      	ldr	r3, [pc, #28]	; (8002ebc <OS_TaskInit+0x34>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]

   *p_err            = OS_ERR_NONE;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	801a      	strh	r2, [r3, #0]
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bc80      	pop	{r7}
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	200026e8 	.word	0x200026e8
 8002eb8:	20002702 	.word	0x20002702
 8002ebc:	200026fc 	.word	0x200026fc

08002ec0 <OS_TaskInitTCB>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TaskInitTCB (OS_TCB  *p_tcb)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
#if OS_CFG_TASK_PROFILE_EN > 0u
    CPU_TS      ts;
#endif


    p_tcb->StkPtr             = (CPU_STK       *)0;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]
#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u))
    p_tcb->StkLimitPtr        = (CPU_STK       *)0;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	609a      	str	r2, [r3, #8]
#endif

    p_tcb->ExtPtr             = (void          *)0;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	605a      	str	r2, [r3, #4]

    p_tcb->NextPtr            = (OS_TCB        *)0;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	60da      	str	r2, [r3, #12]
    p_tcb->PrevPtr            = (OS_TCB        *)0;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	611a      	str	r2, [r3, #16]

    p_tcb->TickNextPtr        = (OS_TCB        *)0;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	615a      	str	r2, [r3, #20]
    p_tcb->TickPrevPtr        = (OS_TCB        *)0;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	619a      	str	r2, [r3, #24]
    p_tcb->TickListPtr        = (OS_TICK_LIST  *)0;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	61da      	str	r2, [r3, #28]

#if OS_CFG_DBG_EN > 0u
    p_tcb->NamePtr            = (CPU_CHAR      *)((void *)"?Task");
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a56      	ldr	r2, [pc, #344]	; (8003054 <OS_TaskInitTCB+0x194>)
 8002efc:	621a      	str	r2, [r3, #32]
#endif

#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u))
    p_tcb->StkBasePtr         = (CPU_STK       *)0;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	625a      	str	r2, [r3, #36]	; 0x24
#endif

#if OS_CFG_DBG_EN > 0u
    p_tcb->TaskEntryAddr      = (OS_TASK_PTR    )0;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	629a      	str	r2, [r3, #40]	; 0x28
    p_tcb->TaskEntryArg       = (void          *)0;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif

#if (OS_CFG_PEND_MULTI_EN > 0u)
    p_tcb->PendDataTblPtr     = (OS_PEND_DATA  *)0;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	631a      	str	r2, [r3, #48]	; 0x30
    p_tcb->PendDataTblEntries = (OS_OBJ_QTY     )0u;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
#endif

    p_tcb->TS                 = (CPU_TS         )0u;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	649a      	str	r2, [r3, #72]	; 0x48

#if (OS_MSG_EN > 0u)
    p_tcb->MsgPtr             = (void          *)0;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	659a      	str	r2, [r3, #88]	; 0x58
    p_tcb->MsgSize            = (OS_MSG_SIZE    )0u;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
#endif

#if OS_CFG_TASK_Q_EN > 0u
    OS_MsgQInit(&p_tcb->MsgQ,
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	3360      	adds	r3, #96	; 0x60
 8002f36:	2100      	movs	r1, #0
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f000 fb5f 	bl	80035fc <OS_MsgQInit>
                (OS_MSG_QTY)0u);
#if OS_CFG_TASK_PROFILE_EN > 0u
    p_tcb->MsgQPendTime       = (CPU_TS         )0u;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	671a      	str	r2, [r3, #112]	; 0x70
    p_tcb->MsgQPendTimeMax    = (CPU_TS         )0u;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	675a      	str	r2, [r3, #116]	; 0x74
#endif
#endif

#if OS_CFG_FLAG_EN > 0u
    p_tcb->FlagsPend          = (OS_FLAGS       )0u;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	67da      	str	r2, [r3, #124]	; 0x7c
    p_tcb->FlagsOpt           = (OS_OPT         )0u;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
    p_tcb->FlagsRdy           = (OS_FLAGS       )0u;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

#if OS_CFG_TASK_REG_TBL_SIZE > 0u
    for (reg_id = 0u; reg_id < OS_CFG_TASK_REG_TBL_SIZE; reg_id++) {
 8002f60:	2300      	movs	r3, #0
 8002f62:	73fb      	strb	r3, [r7, #15]
 8002f64:	e008      	b.n	8002f78 <OS_TaskInitTCB+0xb8>
        p_tcb->RegTbl[reg_id] = (OS_REG)0u;
 8002f66:	7bfa      	ldrb	r2, [r7, #15]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	321e      	adds	r2, #30
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    p_tcb->FlagsOpt           = (OS_OPT         )0u;
    p_tcb->FlagsRdy           = (OS_FLAGS       )0u;
#endif

#if OS_CFG_TASK_REG_TBL_SIZE > 0u
    for (reg_id = 0u; reg_id < OS_CFG_TASK_REG_TBL_SIZE; reg_id++) {
 8002f72:	7bfb      	ldrb	r3, [r7, #15]
 8002f74:	3301      	adds	r3, #1
 8002f76:	73fb      	strb	r3, [r7, #15]
 8002f78:	7bfb      	ldrb	r3, [r7, #15]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d0f3      	beq.n	8002f66 <OS_TaskInitTCB+0xa6>
    for (id = 0u; id < OS_CFG_TLS_TBL_SIZE; id++) {
        p_tcb->TLS_Tbl[id]    = (OS_TLS)0;
    }
#endif

    p_tcb->SemCtr             = (OS_SEM_CTR     )0u;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	64da      	str	r2, [r3, #76]	; 0x4c
#if OS_CFG_TASK_PROFILE_EN > 0u
    p_tcb->SemPendTime        = (CPU_TS         )0u;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    p_tcb->SemPendTimeMax     = (CPU_TS         )0u;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#endif

#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u))
    p_tcb->StkSize            = (CPU_STK_SIZE   )0u;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	641a      	str	r2, [r3, #64]	; 0x40
#endif


#if OS_CFG_TASK_SUSPEND_EN > 0u
    p_tcb->SuspendCtr         = (OS_NESTING_CTR )0u;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
#endif

#if OS_CFG_STAT_TASK_STK_CHK_EN > 0u
    p_tcb->StkFree            = (CPU_STK_SIZE   )0u;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    p_tcb->StkUsed            = (CPU_STK_SIZE   )0u;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
#endif

    p_tcb->Opt                = (OS_OPT         )0u;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    p_tcb->TickRemain         = (OS_TICK        )0u;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	651a      	str	r2, [r3, #80]	; 0x50
    p_tcb->TickCtrPrev        = (OS_TICK        )0u;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	655a      	str	r2, [r3, #84]	; 0x54
    p_tcb->TimeQuanta         = (OS_TICK        )0u;
    p_tcb->TimeQuantaCtr      = (OS_TICK        )0u;
#endif

#if OS_CFG_TASK_PROFILE_EN > 0u
    p_tcb->CPUUsage           = (OS_CPU_USAGE   )0u;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    p_tcb->CPUUsageMax        = (OS_CPU_USAGE   )0u;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
    p_tcb->CtxSwCtr           = (OS_CTX_SW_CTR  )0u;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    p_tcb->CyclesDelta        = (CPU_TS         )0u;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ts                        = OS_TS_GET();                /* Read the current timestamp and save                    */
 8002fe6:	f004 fcc1 	bl	800796c <CPU_TS_TmrRd>
 8002fea:	60b8      	str	r0, [r7, #8]
    p_tcb->CyclesStart        = ts;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    p_tcb->CyclesTotal        = (OS_CYCLES      )0u;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif
#ifdef CPU_CFG_INT_DIS_MEAS_EN
    p_tcb->IntDisTimeMax      = (CPU_TS         )0u;
#endif
#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
    p_tcb->SchedLockTimeMax   = (CPU_TS         )0u;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
#endif

    p_tcb->PendOn             = (OS_STATE       )OS_TASK_PEND_ON_NOTHING;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    p_tcb->PendStatus         = (OS_STATUS      )OS_STATUS_PEND_OK;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    p_tcb->TaskState          = (OS_STATE       )OS_TASK_STATE_RDY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

    p_tcb->Prio               = (OS_PRIO        )OS_PRIO_INIT;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2220      	movs	r2, #32
 8003020:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
#if OS_CFG_MUTEX_EN > 0u
    p_tcb->BasePrio           = (OS_PRIO        )OS_PRIO_INIT;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2220      	movs	r2, #32
 8003028:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    p_tcb->MutexGrpHeadPtr    = (OS_MUTEX      *)0;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	63da      	str	r2, [r3, #60]	; 0x3c
#endif

#if OS_CFG_DBG_EN > 0u
    p_tcb->DbgPrevPtr         = (OS_TCB        *)0;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    p_tcb->DbgNextPtr         = (OS_TCB        *)0;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    p_tcb->DbgNamePtr         = (CPU_CHAR      *)((void *)" ");
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a04      	ldr	r2, [pc, #16]	; (8003058 <OS_TaskInitTCB+0x198>)
 8003046:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
#endif
}
 800304a:	bf00      	nop
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	0800eb58 	.word	0x0800eb58
 8003058:	0800eb60 	.word	0x0800eb60

0800305c <OS_TaskResume>:
*/

#if OS_CFG_TASK_SUSPEND_EN > 0u
void  OS_TaskResume (OS_TCB  *p_tcb,
                     OS_ERR  *p_err)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
    CPU_SR_ALLOC();
 8003066:	2300      	movs	r3, #0
 8003068:	60fb      	str	r3, [r7, #12]


    CPU_CRITICAL_ENTER();
 800306a:	f7fd f939 	bl	80002e0 <CPU_SR_Save>
 800306e:	60f8      	str	r0, [r7, #12]
   *p_err  = OS_ERR_NONE;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	2200      	movs	r2, #0
 8003074:	801a      	strh	r2, [r3, #0]
    switch (p_tcb->TaskState) {
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800307c:	2b07      	cmp	r3, #7
 800307e:	d872      	bhi.n	8003166 <OS_TaskResume+0x10a>
 8003080:	a201      	add	r2, pc, #4	; (adr r2, 8003088 <OS_TaskResume+0x2c>)
 8003082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003086:	bf00      	nop
 8003088:	080030a9 	.word	0x080030a9
 800308c:	080030a9 	.word	0x080030a9
 8003090:	080030a9 	.word	0x080030a9
 8003094:	080030a9 	.word	0x080030a9
 8003098:	080030b9 	.word	0x080030b9
 800309c:	080030e9 	.word	0x080030e9
 80030a0:	08003113 	.word	0x08003113
 80030a4:	0800313d 	.word	0x0800313d
        case OS_TASK_STATE_RDY:
        case OS_TASK_STATE_DLY:
        case OS_TASK_STATE_PEND:
        case OS_TASK_STATE_PEND_TIMEOUT:
             CPU_CRITICAL_EXIT();
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f7fd f91d 	bl	80002e8 <CPU_SR_Restore>
            *p_err = OS_ERR_TASK_NOT_SUSPENDED;
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	f247 1253 	movw	r2, #29011	; 0x7153
 80030b4:	801a      	strh	r2, [r3, #0]
             break;
 80030b6:	e05e      	b.n	8003176 <OS_TaskResume+0x11a>

        case OS_TASK_STATE_SUSPENDED:
             OS_CRITICAL_ENTER_CPU_EXIT();
             p_tcb->SuspendCtr--;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80030be:	3b01      	subs	r3, #1
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             if (p_tcb->SuspendCtr == (OS_NESTING_CTR)0) {
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d106      	bne.n	80030e0 <OS_TaskResume+0x84>
                 p_tcb->TaskState = OS_TASK_STATE_RDY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                 OS_RdyListInsert(p_tcb);                            /* Insert the task in the ready list                      */
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f001 f960 	bl	80043a0 <OS_RdyListInsert>
             }
             OS_CRITICAL_EXIT_NO_SCHED();
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f7fd f901 	bl	80002e8 <CPU_SR_Restore>
             break;
 80030e6:	e046      	b.n	8003176 <OS_TaskResume+0x11a>

        case OS_TASK_STATE_DLY_SUSPENDED:
             p_tcb->SuspendCtr--;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80030ee:	3b01      	subs	r3, #1
 80030f0:	b2da      	uxtb	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             if (p_tcb->SuspendCtr == (OS_NESTING_CTR)0) {
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d103      	bne.n	800310a <OS_TaskResume+0xae>
                 p_tcb->TaskState = OS_TASK_STATE_DLY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             }
             CPU_CRITICAL_EXIT();
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f7fd f8ec 	bl	80002e8 <CPU_SR_Restore>
             break;
 8003110:	e031      	b.n	8003176 <OS_TaskResume+0x11a>

        case OS_TASK_STATE_PEND_SUSPENDED:
             p_tcb->SuspendCtr--;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8003118:	3b01      	subs	r3, #1
 800311a:	b2da      	uxtb	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             if (p_tcb->SuspendCtr == (OS_NESTING_CTR)0) {
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8003128:	2b00      	cmp	r3, #0
 800312a:	d103      	bne.n	8003134 <OS_TaskResume+0xd8>
                 p_tcb->TaskState = OS_TASK_STATE_PEND;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2202      	movs	r2, #2
 8003130:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             }
             CPU_CRITICAL_EXIT();
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f7fd f8d7 	bl	80002e8 <CPU_SR_Restore>
             break;
 800313a:	e01c      	b.n	8003176 <OS_TaskResume+0x11a>

        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             p_tcb->SuspendCtr--;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8003142:	3b01      	subs	r3, #1
 8003144:	b2da      	uxtb	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             if (p_tcb->SuspendCtr == (OS_NESTING_CTR)0) {
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8003152:	2b00      	cmp	r3, #0
 8003154:	d103      	bne.n	800315e <OS_TaskResume+0x102>
                 p_tcb->TaskState = OS_TASK_STATE_PEND_TIMEOUT;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2203      	movs	r2, #3
 800315a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             }
             CPU_CRITICAL_EXIT();
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f7fd f8c2 	bl	80002e8 <CPU_SR_Restore>
             break;
 8003164:	e007      	b.n	8003176 <OS_TaskResume+0x11a>

        default:
             CPU_CRITICAL_EXIT();
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f7fd f8be 	bl	80002e8 <CPU_SR_Restore>
            *p_err = OS_ERR_STATE_INVALID;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	f646 622d 	movw	r2, #28205	; 0x6e2d
 8003172:	801a      	strh	r2, [r3, #0]
             return;
 8003174:	e001      	b.n	800317a <OS_TaskResume+0x11e>
    }

    OSSched();
 8003176:	f000 fcbb 	bl	8003af0 <OSSched>
}
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <OS_TaskReturn>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TaskReturn (void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
    OS_ERR  err;



    OSTaskReturnHook(OSTCBCurPtr);                          /* Call hook to let user decide on what to do             */
 8003186:	4b06      	ldr	r3, [pc, #24]	; (80031a0 <OS_TaskReturn+0x20>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4618      	mov	r0, r3
 800318c:	f003 f8c0 	bl	8006310 <OSTaskReturnHook>
#if OS_CFG_TASK_DEL_EN > 0u
    OSTaskDel((OS_TCB *)0,                                  /* Delete task if it accidentally returns!                */
              (OS_ERR *)&err);
#else
    for (;;) {
        OSTimeDly((OS_TICK )OSCfg_TickRate_Hz,
 8003190:	4b04      	ldr	r3, [pc, #16]	; (80031a4 <OS_TaskReturn+0x24>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	1dba      	adds	r2, r7, #6
 8003196:	2100      	movs	r1, #0
 8003198:	4618      	mov	r0, r3
 800319a:	f002 f933 	bl	8005404 <OSTimeDly>
                  (OS_OPT  )OS_OPT_TIME_DLY,
                  (OS_ERR *)&err);
    }
 800319e:	e7f7      	b.n	8003190 <OS_TaskReturn+0x10>
 80031a0:	200026d4 	.word	0x200026d4
 80031a4:	0800ec90 	.word	0x0800ec90

080031a8 <OS_TaskSemPost>:

OS_SEM_CTR  OS_TaskSemPost (OS_TCB  *p_tcb,
                            OS_OPT   opt,
                            CPU_TS   ts,
                            OS_ERR  *p_err)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b088      	sub	sp, #32
 80031ac:	af02      	add	r7, sp, #8
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	607a      	str	r2, [r7, #4]
 80031b2:	603b      	str	r3, [r7, #0]
 80031b4:	460b      	mov	r3, r1
 80031b6:	817b      	strh	r3, [r7, #10]
    OS_SEM_CTR  ctr;
    CPU_SR_ALLOC();
 80031b8:	2300      	movs	r3, #0
 80031ba:	613b      	str	r3, [r7, #16]



    OS_CRITICAL_ENTER();
 80031bc:	f7fd f890 	bl	80002e0 <CPU_SR_Save>
 80031c0:	6138      	str	r0, [r7, #16]
    if (p_tcb == (OS_TCB *)0) {                             /* Post signal to 'self'?                                 */
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d102      	bne.n	80031ce <OS_TaskSemPost+0x26>
        p_tcb = OSTCBCurPtr;
 80031c8:	4b40      	ldr	r3, [pc, #256]	; (80032cc <OS_TaskSemPost+0x124>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	60fb      	str	r3, [r7, #12]
    }
    p_tcb->TS = ts;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	649a      	str	r2, [r3, #72]	; 0x48
   *p_err     = OS_ERR_NONE;                                /* Assume we won't have any errors                        */
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	2200      	movs	r2, #0
 80031d8:	801a      	strh	r2, [r3, #0]
    switch (p_tcb->TaskState) {
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80031e0:	2b07      	cmp	r3, #7
 80031e2:	d863      	bhi.n	80032ac <OS_TaskSemPost+0x104>
 80031e4:	a201      	add	r2, pc, #4	; (adr r2, 80031ec <OS_TaskSemPost+0x44>)
 80031e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ea:	bf00      	nop
 80031ec:	0800320d 	.word	0x0800320d
 80031f0:	0800320d 	.word	0x0800320d
 80031f4:	08003243 	.word	0x08003243
 80031f8:	08003243 	.word	0x08003243
 80031fc:	0800320d 	.word	0x0800320d
 8003200:	0800320d 	.word	0x0800320d
 8003204:	08003243 	.word	0x08003243
 8003208:	08003243 	.word	0x08003243
                          return ((OS_SEM_CTR)0);
                      }
                      break;

                 case 4u:
                      if (p_tcb->SemCtr == DEF_INT_32U_MAX_VAL) {
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003214:	d108      	bne.n	8003228 <OS_TaskSemPost+0x80>
                          OS_CRITICAL_EXIT();
 8003216:	6938      	ldr	r0, [r7, #16]
 8003218:	f7fd f866 	bl	80002e8 <CPU_SR_Restore>
                         *p_err = OS_ERR_SEM_OVF;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	f646 52c5 	movw	r2, #28101	; 0x6dc5
 8003222:	801a      	strh	r2, [r3, #0]
                          return ((OS_SEM_CTR)0);
 8003224:	2300      	movs	r3, #0
 8003226:	e04d      	b.n	80032c4 <OS_TaskSemPost+0x11c>
                      }
                      break;
 8003228:	bf00      	nop

                 default:
                      break;
             }
             p_tcb->SemCtr++;                               /* Task signaled is not pending on anything               */
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800322e:	1c5a      	adds	r2, r3, #1
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	64da      	str	r2, [r3, #76]	; 0x4c
             ctr = p_tcb->SemCtr;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003238:	617b      	str	r3, [r7, #20]
             OS_CRITICAL_EXIT();
 800323a:	6938      	ldr	r0, [r7, #16]
 800323c:	f7fd f854 	bl	80002e8 <CPU_SR_Restore>
             break;
 8003240:	e03f      	b.n	80032c2 <OS_TaskSemPost+0x11a>

        case OS_TASK_STATE_PEND:
        case OS_TASK_STATE_PEND_TIMEOUT:
        case OS_TASK_STATE_PEND_SUSPENDED:
        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             if (p_tcb->PendOn == OS_TASK_PEND_ON_TASK_SEM) {   /* Is task signaled waiting for a signal?             */
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003248:	2b07      	cmp	r3, #7
 800324a:	d114      	bne.n	8003276 <OS_TaskSemPost+0xce>
                 OS_Post((OS_PEND_OBJ *)0,                      /*      Task is pending on signal                     */
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	2300      	movs	r3, #0
 8003252:	2200      	movs	r2, #0
 8003254:	68f9      	ldr	r1, [r7, #12]
 8003256:	2000      	movs	r0, #0
 8003258:	f000 ffb6 	bl	80041c8 <OS_Post>
                         (OS_TCB      *)p_tcb,
                         (void        *)0,
                         (OS_MSG_SIZE  )0u,
                         (CPU_TS       )ts);
                 ctr = p_tcb->SemCtr;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003260:	617b      	str	r3, [r7, #20]
                 OS_CRITICAL_EXIT_NO_SCHED();
 8003262:	6938      	ldr	r0, [r7, #16]
 8003264:	f7fd f840 	bl	80002e8 <CPU_SR_Restore>
                 if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0) {
 8003268:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800326c:	2b00      	cmp	r3, #0
 800326e:	db27      	blt.n	80032c0 <OS_TaskSemPost+0x118>
                     OSSched();                                 /* Run the scheduler                                  */
 8003270:	f000 fc3e 	bl	8003af0 <OSSched>
                 }
                 p_tcb->SemCtr++;                           /* No,  Task signaled is NOT pending on semaphore ...     */
                 ctr = p_tcb->SemCtr;                       /*      ... it must be waiting on something else          */
                 OS_CRITICAL_EXIT();
             }
             break;
 8003274:	e024      	b.n	80032c0 <OS_TaskSemPost+0x118>
                              return ((OS_SEM_CTR)0);
                          }
                          break;

                     case 4u:
                          if (p_tcb->SemCtr == DEF_INT_32U_MAX_VAL) {
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800327a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327e:	d108      	bne.n	8003292 <OS_TaskSemPost+0xea>
                              OS_CRITICAL_EXIT();
 8003280:	6938      	ldr	r0, [r7, #16]
 8003282:	f7fd f831 	bl	80002e8 <CPU_SR_Restore>
                             *p_err = OS_ERR_SEM_OVF;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	f646 52c5 	movw	r2, #28101	; 0x6dc5
 800328c:	801a      	strh	r2, [r3, #0]
                              return ((OS_SEM_CTR)0);
 800328e:	2300      	movs	r3, #0
 8003290:	e018      	b.n	80032c4 <OS_TaskSemPost+0x11c>
                          }
                          break;
 8003292:	bf00      	nop

                     default:
                          break;
                 }
                 p_tcb->SemCtr++;                           /* No,  Task signaled is NOT pending on semaphore ...     */
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003298:	1c5a      	adds	r2, r3, #1
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	64da      	str	r2, [r3, #76]	; 0x4c
                 ctr = p_tcb->SemCtr;                       /*      ... it must be waiting on something else          */
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a2:	617b      	str	r3, [r7, #20]
                 OS_CRITICAL_EXIT();
 80032a4:	6938      	ldr	r0, [r7, #16]
 80032a6:	f7fd f81f 	bl	80002e8 <CPU_SR_Restore>
             }
             break;
 80032aa:	e009      	b.n	80032c0 <OS_TaskSemPost+0x118>

        default:
             OS_CRITICAL_EXIT();
 80032ac:	6938      	ldr	r0, [r7, #16]
 80032ae:	f7fd f81b 	bl	80002e8 <CPU_SR_Restore>
            *p_err = OS_ERR_STATE_INVALID;
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	f646 622d 	movw	r2, #28205	; 0x6e2d
 80032b8:	801a      	strh	r2, [r3, #0]
             ctr   = (OS_SEM_CTR)0;
 80032ba:	2300      	movs	r3, #0
 80032bc:	617b      	str	r3, [r7, #20]
             break;
 80032be:	e000      	b.n	80032c2 <OS_TaskSemPost+0x11a>
                 }
                 p_tcb->SemCtr++;                           /* No,  Task signaled is NOT pending on semaphore ...     */
                 ctr = p_tcb->SemCtr;                       /*      ... it must be waiting on something else          */
                 OS_CRITICAL_EXIT();
             }
             break;
 80032c0:	bf00      	nop
             OS_CRITICAL_EXIT();
            *p_err = OS_ERR_STATE_INVALID;
             ctr   = (OS_SEM_CTR)0;
             break;
    }
    return (ctr);
 80032c2:	697b      	ldr	r3, [r7, #20]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3718      	adds	r7, #24
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	200026d4 	.word	0x200026d4

080032d0 <OS_TaskSuspend>:
*/

#if OS_CFG_TASK_SUSPEND_EN > 0u
void  OS_TaskSuspend (OS_TCB  *p_tcb,
                      OS_ERR  *p_err)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
    CPU_SR_ALLOC();
 80032da:	2300      	movs	r3, #0
 80032dc:	60fb      	str	r3, [r7, #12]


    CPU_CRITICAL_ENTER();
 80032de:	f7fc ffff 	bl	80002e0 <CPU_SR_Save>
 80032e2:	60f8      	str	r0, [r7, #12]
    if (p_tcb == (OS_TCB *)0) {                             /* See if specified to suspend self                       */
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d102      	bne.n	80032f0 <OS_TaskSuspend+0x20>
        p_tcb = OSTCBCurPtr;
 80032ea:	4b3d      	ldr	r3, [pc, #244]	; (80033e0 <OS_TaskSuspend+0x110>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	607b      	str	r3, [r7, #4]
    }

    if (p_tcb == OSTCBCurPtr) {
 80032f0:	4b3b      	ldr	r3, [pc, #236]	; (80033e0 <OS_TaskSuspend+0x110>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d10b      	bne.n	8003312 <OS_TaskSuspend+0x42>
        if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /* Can't suspend when the scheduler is locked             */
 80032fa:	4b3a      	ldr	r3, [pc, #232]	; (80033e4 <OS_TaskSuspend+0x114>)
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d007      	beq.n	8003312 <OS_TaskSuspend+0x42>
            CPU_CRITICAL_EXIT();
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f7fc fff0 	bl	80002e8 <CPU_SR_Restore>
           *p_err = OS_ERR_SCHED_LOCKED;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	f646 5263 	movw	r2, #28003	; 0x6d63
 800330e:	801a      	strh	r2, [r3, #0]
            return;
 8003310:	e063      	b.n	80033da <OS_TaskSuspend+0x10a>
        }
    }

   *p_err = OS_ERR_NONE;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	2200      	movs	r2, #0
 8003316:	801a      	strh	r2, [r3, #0]
    switch (p_tcb->TaskState) {
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800331e:	2b07      	cmp	r3, #7
 8003320:	d851      	bhi.n	80033c6 <OS_TaskSuspend+0xf6>
 8003322:	a201      	add	r2, pc, #4	; (adr r2, 8003328 <OS_TaskSuspend+0x58>)
 8003324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003328:	08003349 	.word	0x08003349
 800332c:	08003367 	.word	0x08003367
 8003330:	0800337f 	.word	0x0800337f
 8003334:	08003397 	.word	0x08003397
 8003338:	080033af 	.word	0x080033af
 800333c:	080033af 	.word	0x080033af
 8003340:	080033af 	.word	0x080033af
 8003344:	080033af 	.word	0x080033af
        case OS_TASK_STATE_RDY:
             OS_CRITICAL_ENTER_CPU_EXIT();
             p_tcb->TaskState  =  OS_TASK_STATE_SUSPENDED;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2204      	movs	r2, #4
 800334c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             p_tcb->SuspendCtr = (OS_NESTING_CTR)1;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             OS_RdyListRemove(p_tcb);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f001 f8bf 	bl	80044dc <OS_RdyListRemove>
             OS_CRITICAL_EXIT_NO_SCHED();
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f7fc ffc2 	bl	80002e8 <CPU_SR_Restore>
             break;
 8003364:	e037      	b.n	80033d6 <OS_TaskSuspend+0x106>

        case OS_TASK_STATE_DLY:
             p_tcb->TaskState  = OS_TASK_STATE_DLY_SUSPENDED;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2205      	movs	r2, #5
 800336a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             p_tcb->SuspendCtr = (OS_NESTING_CTR)1;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             CPU_CRITICAL_EXIT();
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f7fc ffb6 	bl	80002e8 <CPU_SR_Restore>
             break;
 800337c:	e02b      	b.n	80033d6 <OS_TaskSuspend+0x106>

        case OS_TASK_STATE_PEND:
             p_tcb->TaskState  = OS_TASK_STATE_PEND_SUSPENDED;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2206      	movs	r2, #6
 8003382:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             p_tcb->SuspendCtr = (OS_NESTING_CTR)1;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             CPU_CRITICAL_EXIT();
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f7fc ffaa 	bl	80002e8 <CPU_SR_Restore>
             break;
 8003394:	e01f      	b.n	80033d6 <OS_TaskSuspend+0x106>

        case OS_TASK_STATE_PEND_TIMEOUT:
             p_tcb->TaskState  = OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2207      	movs	r2, #7
 800339a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             p_tcb->SuspendCtr = (OS_NESTING_CTR)1;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             CPU_CRITICAL_EXIT();
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f7fc ff9e 	bl	80002e8 <CPU_SR_Restore>
             break;
 80033ac:	e013      	b.n	80033d6 <OS_TaskSuspend+0x106>

        case OS_TASK_STATE_SUSPENDED:
        case OS_TASK_STATE_DLY_SUSPENDED:
        case OS_TASK_STATE_PEND_SUSPENDED:
        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             p_tcb->SuspendCtr++;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80033b4:	3301      	adds	r3, #1
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             CPU_CRITICAL_EXIT();
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f7fc ff92 	bl	80002e8 <CPU_SR_Restore>
             break;
 80033c4:	e007      	b.n	80033d6 <OS_TaskSuspend+0x106>

        default:
             CPU_CRITICAL_EXIT();
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f7fc ff8e 	bl	80002e8 <CPU_SR_Restore>
            *p_err = OS_ERR_STATE_INVALID;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	f646 622d 	movw	r2, #28205	; 0x6e2d
 80033d2:	801a      	strh	r2, [r3, #0]
             return;
 80033d4:	e001      	b.n	80033da <OS_TaskSuspend+0x10a>
    }

    OSSched();
 80033d6:	f000 fb8b 	bl	8003af0 <OSSched>
}
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	200026d4 	.word	0x200026d4
 80033e4:	20002468 	.word	0x20002468

080033e8 <OS_TaskChangePrio>:
************************************************************************************************************************
*/

void  OS_TaskChangePrio(OS_TCB  *p_tcb,
                        OS_PRIO  prio_new)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	460b      	mov	r3, r1
 80033f2:	70fb      	strb	r3, [r7, #3]
    OS_PRIO  prio_cur;
#endif


    do {
        p_tcb_owner = (OS_TCB *)0;
 80033f4:	2300      	movs	r3, #0
 80033f6:	60fb      	str	r3, [r7, #12]
#if OS_CFG_MUTEX_EN > 0
        prio_cur    = p_tcb->Prio;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80033fe:	72fb      	strb	r3, [r7, #11]
#endif
        switch (p_tcb->TaskState) {
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003406:	2b07      	cmp	r3, #7
 8003408:	f200 808c 	bhi.w	8003524 <OS_TaskChangePrio+0x13c>
 800340c:	a201      	add	r2, pc, #4	; (adr r2, 8003414 <OS_TaskChangePrio+0x2c>)
 800340e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003412:	bf00      	nop
 8003414:	08003435 	.word	0x08003435
 8003418:	08003469 	.word	0x08003469
 800341c:	08003473 	.word	0x08003473
 8003420:	08003473 	.word	0x08003473
 8003424:	08003469 	.word	0x08003469
 8003428:	08003469 	.word	0x08003469
 800342c:	08003473 	.word	0x08003473
 8003430:	08003473 	.word	0x08003473
            case OS_TASK_STATE_RDY:
                 OS_RdyListRemove(p_tcb);                   /* Remove from current priority                           */
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f001 f851 	bl	80044dc <OS_RdyListRemove>
                 p_tcb->Prio = prio_new;                    /* Set new task priority                                  */
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	78fa      	ldrb	r2, [r7, #3]
 800343e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                 OS_PrioInsert(p_tcb->Prio);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8003448:	4618      	mov	r0, r3
 800344a:	f001 ff8d 	bl	8005368 <OS_PrioInsert>
                 if (p_tcb == OSTCBCurPtr) {
 800344e:	4b37      	ldr	r3, [pc, #220]	; (800352c <OS_TaskChangePrio+0x144>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	429a      	cmp	r2, r3
 8003456:	d103      	bne.n	8003460 <OS_TaskChangePrio+0x78>
                     OS_RdyListInsertHead(p_tcb);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 ffbf 	bl	80043dc <OS_RdyListInsertHead>
                 } else {
                     OS_RdyListInsertTail(p_tcb);
                 }
                 break;
 800345e:	e05a      	b.n	8003516 <OS_TaskChangePrio+0x12e>
                 p_tcb->Prio = prio_new;                    /* Set new task priority                                  */
                 OS_PrioInsert(p_tcb->Prio);
                 if (p_tcb == OSTCBCurPtr) {
                     OS_RdyListInsertHead(p_tcb);
                 } else {
                     OS_RdyListInsertTail(p_tcb);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 fffb 	bl	800445c <OS_RdyListInsertTail>
                 }
                 break;
 8003466:	e056      	b.n	8003516 <OS_TaskChangePrio+0x12e>

            case OS_TASK_STATE_DLY:                         /* Nothing to do except change the priority in the OS_TCB */
            case OS_TASK_STATE_SUSPENDED:
            case OS_TASK_STATE_DLY_SUSPENDED:
                 p_tcb->Prio = prio_new;                    /* Set new task priority                                  */
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	78fa      	ldrb	r2, [r7, #3]
 800346c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                 break;
 8003470:	e051      	b.n	8003516 <OS_TaskChangePrio+0x12e>

            case OS_TASK_STATE_PEND:
            case OS_TASK_STATE_PEND_TIMEOUT:
            case OS_TASK_STATE_PEND_SUSPENDED:
            case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
                 p_tcb->Prio = prio_new;                    /* Set new task priority                                  */
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	78fa      	ldrb	r2, [r7, #3]
 8003476:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                 switch (p_tcb->PendOn) {                   /* What to do depends on what we are pending on           */
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003480:	3b01      	subs	r3, #1
 8003482:	2b05      	cmp	r3, #5
 8003484:	d843      	bhi.n	800350e <OS_TaskChangePrio+0x126>
 8003486:	a201      	add	r2, pc, #4	; (adr r2, 800348c <OS_TaskChangePrio+0xa4>)
 8003488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800348c:	080034a5 	.word	0x080034a5
 8003490:	0800350f 	.word	0x0800350f
 8003494:	080034a5 	.word	0x080034a5
 8003498:	080034ad 	.word	0x080034ad
 800349c:	080034a5 	.word	0x080034a5
 80034a0:	080034a5 	.word	0x080034a5
                     case OS_TASK_PEND_ON_FLAG:
                     case OS_TASK_PEND_ON_MULTI:
                     case OS_TASK_PEND_ON_Q:
                     case OS_TASK_PEND_ON_SEM:
                          OS_PendListChangePrio(p_tcb);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 fd69 	bl	8003f7c <OS_PendListChangePrio>
                          break;
 80034aa:	e033      	b.n	8003514 <OS_TaskChangePrio+0x12c>

                     case OS_TASK_PEND_ON_MUTEX:
#if OS_CFG_MUTEX_EN > 0
                          OS_PendListChangePrio(p_tcb);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 fd65 	bl	8003f7c <OS_PendListChangePrio>
                          p_tcb_owner = ((OS_MUTEX *)p_tcb->PendDataTblPtr->PendObjPtr)->OwnerTCBPtr;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ba:	60fb      	str	r3, [r7, #12]
                          if (prio_cur > prio_new) {         /* Are we increasing the priority?                        */
 80034bc:	7afa      	ldrb	r2, [r7, #11]
 80034be:	78fb      	ldrb	r3, [r7, #3]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d908      	bls.n	80034d6 <OS_TaskChangePrio+0xee>
                              if (p_tcb_owner->Prio <= prio_new) {/* Yes, do we need to give this prio to the owner?   */
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80034ca:	78fa      	ldrb	r2, [r7, #3]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d320      	bcc.n	8003512 <OS_TaskChangePrio+0x12a>
                                  p_tcb_owner = (OS_TCB *)0;
 80034d0:	2300      	movs	r3, #0
 80034d2:	60fb      	str	r3, [r7, #12]
#endif
                                  }
                              }
                          }
#endif
                         break;
 80034d4:	e01d      	b.n	8003512 <OS_TaskChangePrio+0x12a>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
                                 TRACE_OS_MUTEX_TASK_PRIO_INHERIT(p_tcb_owner, prio_new);
#endif
                              }
                          } else {
                              if (p_tcb_owner->Prio == prio_cur) {/* No, is it required to check for a lower prio?     */
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80034dc:	7afa      	ldrb	r2, [r7, #11]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d117      	bne.n	8003512 <OS_TaskChangePrio+0x12a>
                                  prio_new = OS_MutexGrpPrioFindHighest(p_tcb_owner);
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f002 fada 	bl	8005a9c <OS_MutexGrpPrioFindHighest>
 80034e8:	4603      	mov	r3, r0
 80034ea:	70fb      	strb	r3, [r7, #3]
                                  prio_new = prio_new > p_tcb_owner->BasePrio ? p_tcb_owner->BasePrio : prio_new;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80034f2:	78fb      	ldrb	r3, [r7, #3]
 80034f4:	4293      	cmp	r3, r2
 80034f6:	bf28      	it	cs
 80034f8:	4613      	movcs	r3, r2
 80034fa:	70fb      	strb	r3, [r7, #3]
                                  if (prio_new == p_tcb_owner->Prio) {
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8003502:	78fa      	ldrb	r2, [r7, #3]
 8003504:	429a      	cmp	r2, r3
 8003506:	d104      	bne.n	8003512 <OS_TaskChangePrio+0x12a>
                                      p_tcb_owner = (OS_TCB *)0;
 8003508:	2300      	movs	r3, #0
 800350a:	60fb      	str	r3, [r7, #12]
#endif
                                  }
                              }
                          }
#endif
                         break;
 800350c:	e001      	b.n	8003512 <OS_TaskChangePrio+0x12a>

                     case OS_TASK_PEND_ON_TASK_Q:
                     case OS_TASK_PEND_ON_TASK_SEM:
                     default:
                          break;
 800350e:	bf00      	nop
 8003510:	e000      	b.n	8003514 <OS_TaskChangePrio+0x12c>
#endif
                                  }
                              }
                          }
#endif
                         break;
 8003512:	bf00      	nop
                     case OS_TASK_PEND_ON_TASK_Q:
                     case OS_TASK_PEND_ON_TASK_SEM:
                     default:
                          break;
                 }
                 break;
 8003514:	bf00      	nop

            default:
                 return;
        }
        p_tcb = p_tcb_owner;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	607b      	str	r3, [r7, #4]
    } while (p_tcb != (OS_TCB *)0);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	f47f af69 	bne.w	80033f4 <OS_TaskChangePrio+0xc>
 8003522:	e000      	b.n	8003526 <OS_TaskChangePrio+0x13e>
                          break;
                 }
                 break;

            default:
                 return;
 8003524:	bf00      	nop
        }
        p_tcb = p_tcb_owner;
    } while (p_tcb != (OS_TCB *)0);
}
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	200026d4 	.word	0x200026d4

08003530 <OS_MsgPoolInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MsgPoolInit (OS_ERR  *p_err)
{
 8003530:	b480      	push	{r7}
 8003532:	b087      	sub	sp, #28
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (OSCfg_MsgPoolBasePtr == (OS_MSG *)0) {
 8003538:	4b2d      	ldr	r3, [pc, #180]	; (80035f0 <OS_MsgPoolInit+0xc0>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d104      	bne.n	800354a <OS_MsgPoolInit+0x1a>
       *p_err = OS_ERR_MSG_POOL_NULL_PTR;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f245 721e 	movw	r2, #22302	; 0x571e
 8003546:	801a      	strh	r2, [r3, #0]
        return;
 8003548:	e04e      	b.n	80035e8 <OS_MsgPoolInit+0xb8>
    }
    if (OSCfg_MsgPoolSize == (OS_MSG_QTY)0) {
 800354a:	4b2a      	ldr	r3, [pc, #168]	; (80035f4 <OS_MsgPoolInit+0xc4>)
 800354c:	881b      	ldrh	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d104      	bne.n	800355c <OS_MsgPoolInit+0x2c>
       *p_err = OS_ERR_MSG_POOL_EMPTY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f245 721d 	movw	r2, #22301	; 0x571d
 8003558:	801a      	strh	r2, [r3, #0]
        return;
 800355a:	e045      	b.n	80035e8 <OS_MsgPoolInit+0xb8>
    }
#endif

    p_msg1 = OSCfg_MsgPoolBasePtr;
 800355c:	4b24      	ldr	r3, [pc, #144]	; (80035f0 <OS_MsgPoolInit+0xc0>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	617b      	str	r3, [r7, #20]
    p_msg2 = OSCfg_MsgPoolBasePtr;
 8003562:	4b23      	ldr	r3, [pc, #140]	; (80035f0 <OS_MsgPoolInit+0xc0>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	613b      	str	r3, [r7, #16]
    p_msg2++;
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	3310      	adds	r3, #16
 800356c:	613b      	str	r3, [r7, #16]
    loops  = OSCfg_MsgPoolSize - 1u;
 800356e:	4b21      	ldr	r3, [pc, #132]	; (80035f4 <OS_MsgPoolInit+0xc4>)
 8003570:	881b      	ldrh	r3, [r3, #0]
 8003572:	3b01      	subs	r3, #1
 8003574:	81bb      	strh	r3, [r7, #12]
    for (i = 0u; i < loops; i++) {                          /* Init. list of free OS_MSGs                             */
 8003576:	2300      	movs	r3, #0
 8003578:	81fb      	strh	r3, [r7, #14]
 800357a:	e014      	b.n	80035a6 <OS_MsgPoolInit+0x76>
        p_msg1->NextPtr = p_msg2;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	601a      	str	r2, [r3, #0]
        p_msg1->MsgPtr  = (void      *)0;
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	2200      	movs	r2, #0
 8003586:	605a      	str	r2, [r3, #4]
        p_msg1->MsgSize = (OS_MSG_SIZE)0u;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	2200      	movs	r2, #0
 800358c:	811a      	strh	r2, [r3, #8]
        p_msg1->MsgTS   = (CPU_TS     )0u;
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	2200      	movs	r2, #0
 8003592:	60da      	str	r2, [r3, #12]
        p_msg1++;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	3310      	adds	r3, #16
 8003598:	617b      	str	r3, [r7, #20]
        p_msg2++;
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	3310      	adds	r3, #16
 800359e:	613b      	str	r3, [r7, #16]

    p_msg1 = OSCfg_MsgPoolBasePtr;
    p_msg2 = OSCfg_MsgPoolBasePtr;
    p_msg2++;
    loops  = OSCfg_MsgPoolSize - 1u;
    for (i = 0u; i < loops; i++) {                          /* Init. list of free OS_MSGs                             */
 80035a0:	89fb      	ldrh	r3, [r7, #14]
 80035a2:	3301      	adds	r3, #1
 80035a4:	81fb      	strh	r3, [r7, #14]
 80035a6:	89fa      	ldrh	r2, [r7, #14]
 80035a8:	89bb      	ldrh	r3, [r7, #12]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d3e6      	bcc.n	800357c <OS_MsgPoolInit+0x4c>
        p_msg1->MsgSize = (OS_MSG_SIZE)0u;
        p_msg1->MsgTS   = (CPU_TS     )0u;
        p_msg1++;
        p_msg2++;
    }
    p_msg1->NextPtr = (OS_MSG    *)0;                       /* Last OS_MSG                                            */
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	2200      	movs	r2, #0
 80035b2:	601a      	str	r2, [r3, #0]
    p_msg1->MsgPtr  = (void      *)0;
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	2200      	movs	r2, #0
 80035b8:	605a      	str	r2, [r3, #4]
    p_msg1->MsgSize = (OS_MSG_SIZE)0u;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2200      	movs	r2, #0
 80035be:	811a      	strh	r2, [r3, #8]
    p_msg1->MsgTS   = (CPU_TS     )0u;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	2200      	movs	r2, #0
 80035c4:	60da      	str	r2, [r3, #12]

    OSMsgPool.NextPtr    =  OSCfg_MsgPoolBasePtr;
 80035c6:	4b0a      	ldr	r3, [pc, #40]	; (80035f0 <OS_MsgPoolInit+0xc0>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a0b      	ldr	r2, [pc, #44]	; (80035f8 <OS_MsgPoolInit+0xc8>)
 80035cc:	6013      	str	r3, [r2, #0]
    OSMsgPool.NbrFree    =  OSCfg_MsgPoolSize;
 80035ce:	4b09      	ldr	r3, [pc, #36]	; (80035f4 <OS_MsgPoolInit+0xc4>)
 80035d0:	881a      	ldrh	r2, [r3, #0]
 80035d2:	4b09      	ldr	r3, [pc, #36]	; (80035f8 <OS_MsgPoolInit+0xc8>)
 80035d4:	809a      	strh	r2, [r3, #4]
    OSMsgPool.NbrUsed    = (OS_MSG_QTY)0;
 80035d6:	4b08      	ldr	r3, [pc, #32]	; (80035f8 <OS_MsgPoolInit+0xc8>)
 80035d8:	2200      	movs	r2, #0
 80035da:	80da      	strh	r2, [r3, #6]
#if OS_CFG_DBG_EN > 0u
    OSMsgPool.NbrUsedMax = (OS_MSG_QTY)0;
 80035dc:	4b06      	ldr	r3, [pc, #24]	; (80035f8 <OS_MsgPoolInit+0xc8>)
 80035de:	2200      	movs	r2, #0
 80035e0:	811a      	strh	r2, [r3, #8]
#endif
   *p_err                =  OS_ERR_NONE;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	801a      	strh	r2, [r3, #0]
}
 80035e8:	371c      	adds	r7, #28
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bc80      	pop	{r7}
 80035ee:	4770      	bx	lr
 80035f0:	0800ec74 	.word	0x0800ec74
 80035f4:	0800ec70 	.word	0x0800ec70
 80035f8:	200027c4 	.word	0x200027c4

080035fc <OS_MsgQInit>:
************************************************************************************************************************
*/

void  OS_MsgQInit (OS_MSG_Q    *p_msg_q,
                   OS_MSG_QTY   size)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	460b      	mov	r3, r1
 8003606:	807b      	strh	r3, [r7, #2]
    p_msg_q->NbrEntriesSize = (OS_MSG_QTY)size;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	887a      	ldrh	r2, [r7, #2]
 800360c:	811a      	strh	r2, [r3, #8]
    p_msg_q->NbrEntries     = (OS_MSG_QTY)0;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	815a      	strh	r2, [r3, #10]
#if OS_CFG_DBG_EN > 0u
    p_msg_q->NbrEntriesMax  = (OS_MSG_QTY)0;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	819a      	strh	r2, [r3, #12]
#endif
    p_msg_q->InPtr          = (OS_MSG   *)0;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	601a      	str	r2, [r3, #0]
    p_msg_q->OutPtr         = (OS_MSG   *)0;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	605a      	str	r2, [r3, #4]
}
 8003626:	bf00      	nop
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	bc80      	pop	{r7}
 800362e:	4770      	bx	lr

08003630 <OS_MsgQGet>:

void  *OS_MsgQGet (OS_MSG_Q     *p_msg_q,
                   OS_MSG_SIZE  *p_msg_size,
                   CPU_TS       *p_ts,
                   OS_ERR       *p_err)
{
 8003630:	b480      	push	{r7}
 8003632:	b087      	sub	sp, #28
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
 800363c:	603b      	str	r3, [r7, #0]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return ((void *)0);
    }
#endif

    if (p_msg_q->NbrEntries == (OS_MSG_QTY)0) {             /* Is the queue empty?                                    */
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	895b      	ldrh	r3, [r3, #10]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10e      	bne.n	8003664 <OS_MsgQGet+0x34>
       *p_msg_size = (OS_MSG_SIZE)0;                        /* Yes                                                    */
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	2200      	movs	r2, #0
 800364a:	801a      	strh	r2, [r3, #0]
        if (p_ts != (CPU_TS *)0) {
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d002      	beq.n	8003658 <OS_MsgQGet+0x28>
           *p_ts  = (CPU_TS  )0;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]
        }
       *p_err = OS_ERR_Q_EMPTY;
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	f246 5292 	movw	r2, #26002	; 0x6592
 800365e:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 8003660:	2300      	movs	r3, #0
 8003662:	e03c      	b.n	80036de <OS_MsgQGet+0xae>
    }

    p_msg           = p_msg_q->OutPtr;                      /* No, get the next message to extract from the queue     */
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	617b      	str	r3, [r7, #20]
    p_void          = p_msg->MsgPtr;
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	613b      	str	r3, [r7, #16]
   *p_msg_size      = p_msg->MsgSize;
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	891a      	ldrh	r2, [r3, #8]
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	801a      	strh	r2, [r3, #0]
    if (p_ts != (CPU_TS *)0) {
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <OS_MsgQGet+0x56>
       *p_ts  = p_msg->MsgTS;
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	68da      	ldr	r2, [r3, #12]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	601a      	str	r2, [r3, #0]
    }

    p_msg_q->OutPtr = p_msg->NextPtr;                       /* Point to next message to extract                       */
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	605a      	str	r2, [r3, #4]

    if (p_msg_q->OutPtr == (OS_MSG *)0) {                   /* Are there any more messages in the queue?              */
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d106      	bne.n	80036a4 <OS_MsgQGet+0x74>
        p_msg_q->InPtr      = (OS_MSG   *)0;                /* No                                                     */
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]
        p_msg_q->NbrEntries = (OS_MSG_QTY)0;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	815a      	strh	r2, [r3, #10]
 80036a2:	e005      	b.n	80036b0 <OS_MsgQGet+0x80>
    } else {
        p_msg_q->NbrEntries--;                              /* Yes, One less message in the queue                     */
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	895b      	ldrh	r3, [r3, #10]
 80036a8:	3b01      	subs	r3, #1
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	815a      	strh	r2, [r3, #10]
    }

    p_msg->NextPtr    = OSMsgPool.NextPtr;                  /* Return message control block to free list              */
 80036b0:	4b0d      	ldr	r3, [pc, #52]	; (80036e8 <OS_MsgQGet+0xb8>)
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	601a      	str	r2, [r3, #0]
    OSMsgPool.NextPtr = p_msg;
 80036b8:	4a0b      	ldr	r2, [pc, #44]	; (80036e8 <OS_MsgQGet+0xb8>)
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	6013      	str	r3, [r2, #0]
    OSMsgPool.NbrFree++;
 80036be:	4b0a      	ldr	r3, [pc, #40]	; (80036e8 <OS_MsgQGet+0xb8>)
 80036c0:	889b      	ldrh	r3, [r3, #4]
 80036c2:	3301      	adds	r3, #1
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	4b08      	ldr	r3, [pc, #32]	; (80036e8 <OS_MsgQGet+0xb8>)
 80036c8:	809a      	strh	r2, [r3, #4]
    OSMsgPool.NbrUsed--;
 80036ca:	4b07      	ldr	r3, [pc, #28]	; (80036e8 <OS_MsgQGet+0xb8>)
 80036cc:	88db      	ldrh	r3, [r3, #6]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	4b05      	ldr	r3, [pc, #20]	; (80036e8 <OS_MsgQGet+0xb8>)
 80036d4:	80da      	strh	r2, [r3, #6]

   *p_err             = OS_ERR_NONE;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	2200      	movs	r2, #0
 80036da:	801a      	strh	r2, [r3, #0]
    return (p_void);
 80036dc:	693b      	ldr	r3, [r7, #16]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	371c      	adds	r7, #28
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bc80      	pop	{r7}
 80036e6:	4770      	bx	lr
 80036e8:	200027c4 	.word	0x200027c4

080036ec <OS_MsgQPut>:
                  void         *p_void,
                  OS_MSG_SIZE   msg_size,
                  OS_OPT        opt,
                  CPU_TS        ts,
                  OS_ERR       *p_err)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b087      	sub	sp, #28
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	4611      	mov	r1, r2
 80036f8:	461a      	mov	r2, r3
 80036fa:	460b      	mov	r3, r1
 80036fc:	80fb      	strh	r3, [r7, #6]
 80036fe:	4613      	mov	r3, r2
 8003700:	80bb      	strh	r3, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    if (p_msg_q->NbrEntries >= p_msg_q->NbrEntriesSize) {
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	895a      	ldrh	r2, [r3, #10]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	891b      	ldrh	r3, [r3, #8]
 800370a:	429a      	cmp	r2, r3
 800370c:	d304      	bcc.n	8003718 <OS_MsgQPut+0x2c>
       *p_err = OS_ERR_Q_MAX;                               /* Message queue cannot accept any more messages          */
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	f246 5293 	movw	r2, #26003	; 0x6593
 8003714:	801a      	strh	r2, [r3, #0]
        return;
 8003716:	e06b      	b.n	80037f0 <OS_MsgQPut+0x104>
    }

    if (OSMsgPool.NbrFree == (OS_MSG_QTY)0) {
 8003718:	4b37      	ldr	r3, [pc, #220]	; (80037f8 <OS_MsgQPut+0x10c>)
 800371a:	889b      	ldrh	r3, [r3, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d104      	bne.n	800372a <OS_MsgQPut+0x3e>
       *p_err = OS_ERR_MSG_POOL_EMPTY;                      /* No more OS_MSG to use                                  */
 8003720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003722:	f245 721d 	movw	r2, #22301	; 0x571d
 8003726:	801a      	strh	r2, [r3, #0]
        return;
 8003728:	e062      	b.n	80037f0 <OS_MsgQPut+0x104>
    }

    p_msg             = OSMsgPool.NextPtr;                  /* Remove message control block from free list            */
 800372a:	4b33      	ldr	r3, [pc, #204]	; (80037f8 <OS_MsgQPut+0x10c>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	617b      	str	r3, [r7, #20]
    OSMsgPool.NextPtr = p_msg->NextPtr;
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a30      	ldr	r2, [pc, #192]	; (80037f8 <OS_MsgQPut+0x10c>)
 8003736:	6013      	str	r3, [r2, #0]
    OSMsgPool.NbrFree--;
 8003738:	4b2f      	ldr	r3, [pc, #188]	; (80037f8 <OS_MsgQPut+0x10c>)
 800373a:	889b      	ldrh	r3, [r3, #4]
 800373c:	3b01      	subs	r3, #1
 800373e:	b29a      	uxth	r2, r3
 8003740:	4b2d      	ldr	r3, [pc, #180]	; (80037f8 <OS_MsgQPut+0x10c>)
 8003742:	809a      	strh	r2, [r3, #4]
    OSMsgPool.NbrUsed++;
 8003744:	4b2c      	ldr	r3, [pc, #176]	; (80037f8 <OS_MsgQPut+0x10c>)
 8003746:	88db      	ldrh	r3, [r3, #6]
 8003748:	3301      	adds	r3, #1
 800374a:	b29a      	uxth	r2, r3
 800374c:	4b2a      	ldr	r3, [pc, #168]	; (80037f8 <OS_MsgQPut+0x10c>)
 800374e:	80da      	strh	r2, [r3, #6]

#if OS_CFG_DBG_EN > 0u
    if (OSMsgPool.NbrUsedMax < OSMsgPool.NbrUsed) {
 8003750:	4b29      	ldr	r3, [pc, #164]	; (80037f8 <OS_MsgQPut+0x10c>)
 8003752:	891a      	ldrh	r2, [r3, #8]
 8003754:	4b28      	ldr	r3, [pc, #160]	; (80037f8 <OS_MsgQPut+0x10c>)
 8003756:	88db      	ldrh	r3, [r3, #6]
 8003758:	429a      	cmp	r2, r3
 800375a:	d203      	bcs.n	8003764 <OS_MsgQPut+0x78>
        OSMsgPool.NbrUsedMax = OSMsgPool.NbrUsed;
 800375c:	4b26      	ldr	r3, [pc, #152]	; (80037f8 <OS_MsgQPut+0x10c>)
 800375e:	88da      	ldrh	r2, [r3, #6]
 8003760:	4b25      	ldr	r3, [pc, #148]	; (80037f8 <OS_MsgQPut+0x10c>)
 8003762:	811a      	strh	r2, [r3, #8]
    }
#endif

    if (p_msg_q->NbrEntries == (OS_MSG_QTY)0) {             /* Is this first message placed in the queue?             */
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	895b      	ldrh	r3, [r3, #10]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10c      	bne.n	8003786 <OS_MsgQPut+0x9a>
        p_msg_q->InPtr         = p_msg;                     /* Yes                                                    */
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	601a      	str	r2, [r3, #0]
        p_msg_q->OutPtr        = p_msg;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	605a      	str	r2, [r3, #4]
        p_msg_q->NbrEntries    = (OS_MSG_QTY)1;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2201      	movs	r2, #1
 800377c:	815a      	strh	r2, [r3, #10]
        p_msg->NextPtr         = (OS_MSG *)0;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	e01e      	b.n	80037c4 <OS_MsgQPut+0xd8>
    } else {                                                /* No                                                     */
        if ((opt & OS_OPT_POST_LIFO) == OS_OPT_POST_FIFO) { /* Is it FIFO or LIFO?                                    */
 8003786:	88bb      	ldrh	r3, [r7, #4]
 8003788:	f003 0310 	and.w	r3, r3, #16
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10c      	bne.n	80037aa <OS_MsgQPut+0xbe>
            p_msg_in           = p_msg_q->InPtr;            /* FIFO, add to the head                                  */
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	613b      	str	r3, [r7, #16]
            p_msg_in->NextPtr  = p_msg;
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	601a      	str	r2, [r3, #0]
            p_msg_q->InPtr     = p_msg;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	601a      	str	r2, [r3, #0]
            p_msg->NextPtr     = (OS_MSG *)0;
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]
 80037a8:	e006      	b.n	80037b8 <OS_MsgQPut+0xcc>
        } else {
            p_msg->NextPtr     = p_msg_q->OutPtr;           /* LIFO, add to the tail                                  */
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	601a      	str	r2, [r3, #0]
            p_msg_q->OutPtr    = p_msg;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	605a      	str	r2, [r3, #4]
        }
        p_msg_q->NbrEntries++;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	895b      	ldrh	r3, [r3, #10]
 80037bc:	3301      	adds	r3, #1
 80037be:	b29a      	uxth	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	815a      	strh	r2, [r3, #10]
    }

#if OS_CFG_DBG_EN > 0u
    if (p_msg_q->NbrEntriesMax < p_msg_q->NbrEntries) {
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	899a      	ldrh	r2, [r3, #12]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	895b      	ldrh	r3, [r3, #10]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d203      	bcs.n	80037d8 <OS_MsgQPut+0xec>
        p_msg_q->NbrEntriesMax = p_msg_q->NbrEntries;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	895a      	ldrh	r2, [r3, #10]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	819a      	strh	r2, [r3, #12]
    }
#endif

    p_msg->MsgPtr  = p_void;                                /* Deposit message in the message queue entry             */
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	605a      	str	r2, [r3, #4]
    p_msg->MsgSize = msg_size;
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	88fa      	ldrh	r2, [r7, #6]
 80037e2:	811a      	strh	r2, [r3, #8]
    p_msg->MsgTS   = ts;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	6a3a      	ldr	r2, [r7, #32]
 80037e8:	60da      	str	r2, [r3, #12]
   *p_err          = OS_ERR_NONE;
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	2200      	movs	r2, #0
 80037ee:	801a      	strh	r2, [r3, #0]
}
 80037f0:	371c      	adds	r7, #28
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr
 80037f8:	200027c4 	.word	0x200027c4

080037fc <OSInit>:
* Returns    : none
************************************************************************************************************************
*/

void  OSInit (OS_ERR  *p_err)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    OSInitHook();                                           /* Call port specific initialization code                 */
 8003804:	f002 fd48 	bl	8006298 <OSInitHook>

    OSIntNestingCtr                 = (OS_NESTING_CTR)0;    /* Clear the interrupt nesting counter                    */
 8003808:	4b60      	ldr	r3, [pc, #384]	; (800398c <OSInit+0x190>)
 800380a:	2200      	movs	r2, #0
 800380c:	701a      	strb	r2, [r3, #0]

    OSRunning                       =  OS_STATE_OS_STOPPED; /* Indicate that multitasking not started                 */
 800380e:	4b60      	ldr	r3, [pc, #384]	; (8003990 <OSInit+0x194>)
 8003810:	2200      	movs	r2, #0
 8003812:	701a      	strb	r2, [r3, #0]

    OSSchedLockNestingCtr           = (OS_NESTING_CTR)0;    /* Clear the scheduling lock counter                      */
 8003814:	4b5f      	ldr	r3, [pc, #380]	; (8003994 <OSInit+0x198>)
 8003816:	2200      	movs	r2, #0
 8003818:	701a      	strb	r2, [r3, #0]

    OSTCBCurPtr                     = (OS_TCB *)0;          /* Initialize OS_TCB pointers to a known state            */
 800381a:	4b5f      	ldr	r3, [pc, #380]	; (8003998 <OSInit+0x19c>)
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]
    OSTCBHighRdyPtr                 = (OS_TCB *)0;
 8003820:	4b5e      	ldr	r3, [pc, #376]	; (800399c <OSInit+0x1a0>)
 8003822:	2200      	movs	r2, #0
 8003824:	601a      	str	r2, [r3, #0]

    OSPrioCur                       = (OS_PRIO)0;           /* Initialize priority variables to a known state         */
 8003826:	4b5e      	ldr	r3, [pc, #376]	; (80039a0 <OSInit+0x1a4>)
 8003828:	2200      	movs	r2, #0
 800382a:	701a      	strb	r2, [r3, #0]
    OSPrioHighRdy                   = (OS_PRIO)0;
 800382c:	4b5d      	ldr	r3, [pc, #372]	; (80039a4 <OSInit+0x1a8>)
 800382e:	2200      	movs	r2, #0
 8003830:	701a      	strb	r2, [r3, #0]
    OSPrioSaved                     = (OS_PRIO)0;
 8003832:	4b5d      	ldr	r3, [pc, #372]	; (80039a8 <OSInit+0x1ac>)
 8003834:	2200      	movs	r2, #0
 8003836:	701a      	strb	r2, [r3, #0]

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
    OSSchedLockTimeBegin            = (CPU_TS)0;
 8003838:	4b5c      	ldr	r3, [pc, #368]	; (80039ac <OSInit+0x1b0>)
 800383a:	2200      	movs	r2, #0
 800383c:	601a      	str	r2, [r3, #0]
    OSSchedLockTimeMax              = (CPU_TS)0;
 800383e:	4b5c      	ldr	r3, [pc, #368]	; (80039b0 <OSInit+0x1b4>)
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]
    OSSchedLockTimeMaxCur           = (CPU_TS)0;
 8003844:	4b5b      	ldr	r3, [pc, #364]	; (80039b4 <OSInit+0x1b8>)
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]
#if OS_CFG_SCHED_ROUND_ROBIN_EN > 0u
    OSSchedRoundRobinEn             = DEF_FALSE;
    OSSchedRoundRobinDfltTimeQuanta = OSCfg_TickRate_Hz / 10u;
#endif

    if (OSCfg_ISRStkSize > (CPU_STK_SIZE)0) {
 800384a:	4b5b      	ldr	r3, [pc, #364]	; (80039b8 <OSInit+0x1bc>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d015      	beq.n	800387e <OSInit+0x82>
        p_stk = OSCfg_ISRStkBasePtr;                        /* Clear exception stack for stack checking.              */
 8003852:	4b5a      	ldr	r3, [pc, #360]	; (80039bc <OSInit+0x1c0>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	60fb      	str	r3, [r7, #12]
        if (p_stk != (CPU_STK *)0) {
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00f      	beq.n	800387e <OSInit+0x82>
            size  = OSCfg_ISRStkSize;
 800385e:	4b56      	ldr	r3, [pc, #344]	; (80039b8 <OSInit+0x1bc>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	60bb      	str	r3, [r7, #8]
            while (size > (CPU_STK_SIZE)0) {
 8003864:	e008      	b.n	8003878 <OSInit+0x7c>
                size--;
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	3b01      	subs	r3, #1
 800386a:	60bb      	str	r3, [r7, #8]
               *p_stk = (CPU_STK)0;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	601a      	str	r2, [r3, #0]
                p_stk++;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	3304      	adds	r3, #4
 8003876:	60fb      	str	r3, [r7, #12]

    if (OSCfg_ISRStkSize > (CPU_STK_SIZE)0) {
        p_stk = OSCfg_ISRStkBasePtr;                        /* Clear exception stack for stack checking.              */
        if (p_stk != (CPU_STK *)0) {
            size  = OSCfg_ISRStkSize;
            while (size > (CPU_STK_SIZE)0) {
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1f3      	bne.n	8003866 <OSInit+0x6a>
            }
        }
    }

#if OS_CFG_APP_HOOKS_EN > 0u
    OS_AppTaskCreateHookPtr = (OS_APP_HOOK_TCB )0;          /* Clear application hook pointers                        */
 800387e:	4b50      	ldr	r3, [pc, #320]	; (80039c0 <OSInit+0x1c4>)
 8003880:	2200      	movs	r2, #0
 8003882:	601a      	str	r2, [r3, #0]
    OS_AppTaskDelHookPtr    = (OS_APP_HOOK_TCB )0;
 8003884:	4b4f      	ldr	r3, [pc, #316]	; (80039c4 <OSInit+0x1c8>)
 8003886:	2200      	movs	r2, #0
 8003888:	601a      	str	r2, [r3, #0]
    OS_AppTaskReturnHookPtr = (OS_APP_HOOK_TCB )0;
 800388a:	4b4f      	ldr	r3, [pc, #316]	; (80039c8 <OSInit+0x1cc>)
 800388c:	2200      	movs	r2, #0
 800388e:	601a      	str	r2, [r3, #0]

    OS_AppIdleTaskHookPtr   = (OS_APP_HOOK_VOID)0;
 8003890:	4b4e      	ldr	r3, [pc, #312]	; (80039cc <OSInit+0x1d0>)
 8003892:	2200      	movs	r2, #0
 8003894:	601a      	str	r2, [r3, #0]
    OS_AppStatTaskHookPtr   = (OS_APP_HOOK_VOID)0;
 8003896:	4b4e      	ldr	r3, [pc, #312]	; (80039d0 <OSInit+0x1d4>)
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]
    OS_AppTaskSwHookPtr     = (OS_APP_HOOK_VOID)0;
 800389c:	4b4d      	ldr	r3, [pc, #308]	; (80039d4 <OSInit+0x1d8>)
 800389e:	2200      	movs	r2, #0
 80038a0:	601a      	str	r2, [r3, #0]
    OS_AppTimeTickHookPtr   = (OS_APP_HOOK_VOID)0;
 80038a2:	4b4d      	ldr	r3, [pc, #308]	; (80039d8 <OSInit+0x1dc>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	601a      	str	r2, [r3, #0]
#endif

#if OS_CFG_TASK_REG_TBL_SIZE > 0u
    OSTaskRegNextAvailID    = (OS_REG_ID)0;
 80038a8:	4b4c      	ldr	r3, [pc, #304]	; (80039dc <OSInit+0x1e0>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	701a      	strb	r2, [r3, #0]
#endif

    OS_PrioInit();                                          /* Initialize the priority bitmap table                   */
 80038ae:	f001 fd1f 	bl	80052f0 <OS_PrioInit>

    OS_RdyListInit();                                       /* Initialize the Ready List                              */
 80038b2:	f000 fd51 	bl	8004358 <OS_RdyListInit>

    
#if OS_CFG_FLAG_EN > 0u                                     /* Initialize the Event Flag module                       */
    OS_FlagInit(p_err);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f001 f9fa 	bl	8004cb0 <OS_FlagInit>
    if (*p_err != OS_ERR_NONE) {
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	881b      	ldrh	r3, [r3, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d14a      	bne.n	800395a <OSInit+0x15e>
    }
#endif


#if OS_CFG_MEM_EN > 0u                                      /* Initialize the Memory Manager module                   */
    OS_MemInit(p_err);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f002 fb59 	bl	8005f7c <OS_MemInit>
    if (*p_err != OS_ERR_NONE) {
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	881b      	ldrh	r3, [r3, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d145      	bne.n	800395e <OSInit+0x162>
    }
#endif


#if (OS_MSG_EN) > 0u                                        /* Initialize the free list of OS_MSGs                    */
    OS_MsgPoolInit(p_err);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7ff fe2c 	bl	8003530 <OS_MsgPoolInit>
    if (*p_err != OS_ERR_NONE) {
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	881b      	ldrh	r3, [r3, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d140      	bne.n	8003962 <OSInit+0x166>
    }
#endif


#if OS_CFG_MUTEX_EN > 0u                                    /* Initialize the Mutex Manager module                    */
    OS_MutexInit(p_err);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f002 f897 	bl	8005a14 <OS_MutexInit>
    if (*p_err != OS_ERR_NONE) {
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	881b      	ldrh	r3, [r3, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d13b      	bne.n	8003966 <OSInit+0x16a>
    }
#endif


#if OS_CFG_Q_EN > 0u
    OS_QInit(p_err);                                        /* Initialize the Message Queue Manager module            */
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7fe ff48 	bl	8002784 <OS_QInit>
    if (*p_err != OS_ERR_NONE) {
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	881b      	ldrh	r3, [r3, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d136      	bne.n	800396a <OSInit+0x16e>
    }
#endif


#if OS_CFG_SEM_EN > 0u                                      /* Initialize the Semaphore Manager module                */
    OS_SemInit(p_err);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f001 fe1d 	bl	800553c <OS_SemInit>
    if (*p_err != OS_ERR_NONE) {
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	881b      	ldrh	r3, [r3, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d131      	bne.n	800396e <OSInit+0x172>
        return;
    }
#endif


    OS_TaskInit(p_err);                                     /* Initialize the task manager                            */
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7ff fabc 	bl	8002e88 <OS_TaskInit>
    if (*p_err != OS_ERR_NONE) {
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	881b      	ldrh	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d12c      	bne.n	8003972 <OSInit+0x176>
        return;
    }
#endif

    
    OS_IdleTaskInit(p_err);                                 /* Initialize the Idle Task                               */
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 fa21 	bl	8003d60 <OS_IdleTaskInit>
    if (*p_err != OS_ERR_NONE) {
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	881b      	ldrh	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d127      	bne.n	8003976 <OSInit+0x17a>
        return;
    }


    OS_TickTaskInit(p_err);                                 /* Initialize the Tick Task                               */
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 febe 	bl	80046a8 <OS_TickTaskInit>
    if (*p_err != OS_ERR_NONE) {
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	881b      	ldrh	r3, [r3, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d122      	bne.n	800397a <OSInit+0x17e>
        return;
    }


#if OS_CFG_STAT_TASK_EN > 0u                                /* Initialize the Statistic Task                          */
    OS_StatTaskInit(p_err);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f001 fc71 	bl	800521c <OS_StatTaskInit>
    if (*p_err != OS_ERR_NONE) {
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	881b      	ldrh	r3, [r3, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d11d      	bne.n	800397e <OSInit+0x182>
    }
#endif


#if OS_CFG_TMR_EN > 0u                                      /* Initialize the Timer Manager module                    */
    OS_TmrInit(p_err);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f002 fb30 	bl	8005fa8 <OS_TmrInit>
    if (*p_err != OS_ERR_NONE) {
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	881b      	ldrh	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d118      	bne.n	8003982 <OSInit+0x186>
    }
#endif


#if OS_CFG_DBG_EN > 0u
    OS_Dbg_Init();
 8003950:	f002 f8ce 	bl	8005af0 <OS_Dbg_Init>
#endif


    OSCfg_Init();
 8003954:	f001 fdec 	bl	8005530 <OSCfg_Init>
 8003958:	e014      	b.n	8003984 <OSInit+0x188>

    
#if OS_CFG_FLAG_EN > 0u                                     /* Initialize the Event Flag module                       */
    OS_FlagInit(p_err);
    if (*p_err != OS_ERR_NONE) {
        return;
 800395a:	bf00      	nop
 800395c:	e012      	b.n	8003984 <OSInit+0x188>


#if OS_CFG_MEM_EN > 0u                                      /* Initialize the Memory Manager module                   */
    OS_MemInit(p_err);
    if (*p_err != OS_ERR_NONE) {
        return;
 800395e:	bf00      	nop
 8003960:	e010      	b.n	8003984 <OSInit+0x188>


#if (OS_MSG_EN) > 0u                                        /* Initialize the free list of OS_MSGs                    */
    OS_MsgPoolInit(p_err);
    if (*p_err != OS_ERR_NONE) {
        return;
 8003962:	bf00      	nop
 8003964:	e00e      	b.n	8003984 <OSInit+0x188>


#if OS_CFG_MUTEX_EN > 0u                                    /* Initialize the Mutex Manager module                    */
    OS_MutexInit(p_err);
    if (*p_err != OS_ERR_NONE) {
        return;
 8003966:	bf00      	nop
 8003968:	e00c      	b.n	8003984 <OSInit+0x188>


#if OS_CFG_Q_EN > 0u
    OS_QInit(p_err);                                        /* Initialize the Message Queue Manager module            */
    if (*p_err != OS_ERR_NONE) {
        return;
 800396a:	bf00      	nop
 800396c:	e00a      	b.n	8003984 <OSInit+0x188>


#if OS_CFG_SEM_EN > 0u                                      /* Initialize the Semaphore Manager module                */
    OS_SemInit(p_err);
    if (*p_err != OS_ERR_NONE) {
        return;
 800396e:	bf00      	nop
 8003970:	e008      	b.n	8003984 <OSInit+0x188>
#endif


    OS_TaskInit(p_err);                                     /* Initialize the task manager                            */
    if (*p_err != OS_ERR_NONE) {
        return;
 8003972:	bf00      	nop
 8003974:	e006      	b.n	8003984 <OSInit+0x188>
#endif

    
    OS_IdleTaskInit(p_err);                                 /* Initialize the Idle Task                               */
    if (*p_err != OS_ERR_NONE) {
        return;
 8003976:	bf00      	nop
 8003978:	e004      	b.n	8003984 <OSInit+0x188>
    }


    OS_TickTaskInit(p_err);                                 /* Initialize the Tick Task                               */
    if (*p_err != OS_ERR_NONE) {
        return;
 800397a:	bf00      	nop
 800397c:	e002      	b.n	8003984 <OSInit+0x188>


#if OS_CFG_STAT_TASK_EN > 0u                                /* Initialize the Statistic Task                          */
    OS_StatTaskInit(p_err);
    if (*p_err != OS_ERR_NONE) {
        return;
 800397e:	bf00      	nop
 8003980:	e000      	b.n	8003984 <OSInit+0x188>


#if OS_CFG_TMR_EN > 0u                                      /* Initialize the Timer Manager module                    */
    OS_TmrInit(p_err);
    if (*p_err != OS_ERR_NONE) {
        return;
 8003982:	bf00      	nop
    OS_Dbg_Init();
#endif


    OSCfg_Init();
}
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	20002700 	.word	0x20002700
 8003990:	20002479 	.word	0x20002479
 8003994:	20002468 	.word	0x20002468
 8003998:	200026d4 	.word	0x200026d4
 800399c:	200026e0 	.word	0x200026e0
 80039a0:	20002608 	.word	0x20002608
 80039a4:	200025fc 	.word	0x200025fc
 80039a8:	200026dc 	.word	0x200026dc
 80039ac:	200026d0 	.word	0x200026d0
 80039b0:	200028f4 	.word	0x200028f4
 80039b4:	200026e4 	.word	0x200026e4
 80039b8:	0800ec6c 	.word	0x0800ec6c
 80039bc:	0800ec68 	.word	0x0800ec68
 80039c0:	20002604 	.word	0x20002604
 80039c4:	200026f0 	.word	0x200026f0
 80039c8:	2000246c 	.word	0x2000246c
 80039cc:	200028cc 	.word	0x200028cc
 80039d0:	200028e8 	.word	0x200028e8
 80039d4:	200028d8 	.word	0x200028d8
 80039d8:	200026f4 	.word	0x200026f4
 80039dc:	20002478 	.word	0x20002478

080039e0 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 250 levels deep.
************************************************************************************************************************
*/

void  OSIntEnter (void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	af00      	add	r7, sp, #0
    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Is OS running?                                         */
 80039e4:	4b0a      	ldr	r3, [pc, #40]	; (8003a10 <OSIntEnter+0x30>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d10a      	bne.n	8003a02 <OSIntEnter+0x22>
        return;                                             /* No                                                     */
    }

    if (OSIntNestingCtr >= (OS_NESTING_CTR)250u) {          /* Have we nested past 250 levels?                        */
 80039ec:	4b09      	ldr	r3, [pc, #36]	; (8003a14 <OSIntEnter+0x34>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	2bf9      	cmp	r3, #249	; 0xf9
 80039f2:	d808      	bhi.n	8003a06 <OSIntEnter+0x26>
        return;                                             /* Yes                                                    */
    }

    OSIntNestingCtr++;                                      /* Increment ISR nesting level                            */
 80039f4:	4b07      	ldr	r3, [pc, #28]	; (8003a14 <OSIntEnter+0x34>)
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	3301      	adds	r3, #1
 80039fa:	b2da      	uxtb	r2, r3
 80039fc:	4b05      	ldr	r3, [pc, #20]	; (8003a14 <OSIntEnter+0x34>)
 80039fe:	701a      	strb	r2, [r3, #0]
 8003a00:	e002      	b.n	8003a08 <OSIntEnter+0x28>
*/

void  OSIntEnter (void)
{
    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Is OS running?                                         */
        return;                                             /* No                                                     */
 8003a02:	bf00      	nop
 8003a04:	e000      	b.n	8003a08 <OSIntEnter+0x28>
    }

    if (OSIntNestingCtr >= (OS_NESTING_CTR)250u) {          /* Have we nested past 250 levels?                        */
        return;                                             /* Yes                                                    */
 8003a06:	bf00      	nop
    }

    OSIntNestingCtr++;                                      /* Increment ISR nesting level                            */
}
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bc80      	pop	{r7}
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	20002479 	.word	0x20002479
 8003a14:	20002700 	.word	0x20002700

08003a18 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OSSchedLock())
************************************************************************************************************************
*/

void  OSIntExit (void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
 8003a1e:	2300      	movs	r3, #0
 8003a20:	607b      	str	r3, [r7, #4]



    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Has the OS started?                                    */
 8003a22:	4b2b      	ldr	r3, [pc, #172]	; (8003ad0 <OSIntExit+0xb8>)
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d14e      	bne.n	8003ac8 <OSIntExit+0xb0>
        return;                                             /* No                                                     */
    }

    CPU_INT_DIS();
 8003a2a:	f7fc fc59 	bl	80002e0 <CPU_SR_Save>
 8003a2e:	6078      	str	r0, [r7, #4]
    if (OSIntNestingCtr == (OS_NESTING_CTR)0) {             /* Prevent OSIntNestingCtr from wrapping                  */
 8003a30:	4b28      	ldr	r3, [pc, #160]	; (8003ad4 <OSIntExit+0xbc>)
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d103      	bne.n	8003a40 <OSIntExit+0x28>
        CPU_INT_EN();
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f7fc fc55 	bl	80002e8 <CPU_SR_Restore>
        return;
 8003a3e:	e044      	b.n	8003aca <OSIntExit+0xb2>
    }
    OSIntNestingCtr--;
 8003a40:	4b24      	ldr	r3, [pc, #144]	; (8003ad4 <OSIntExit+0xbc>)
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	3b01      	subs	r3, #1
 8003a46:	b2da      	uxtb	r2, r3
 8003a48:	4b22      	ldr	r3, [pc, #136]	; (8003ad4 <OSIntExit+0xbc>)
 8003a4a:	701a      	strb	r2, [r3, #0]
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* ISRs still nested?                                     */
 8003a4c:	4b21      	ldr	r3, [pc, #132]	; (8003ad4 <OSIntExit+0xbc>)
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d003      	beq.n	8003a5c <OSIntExit+0x44>
        CPU_INT_EN();                                       /* Yes                                                    */
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f7fc fc47 	bl	80002e8 <CPU_SR_Restore>
        return;
 8003a5a:	e036      	b.n	8003aca <OSIntExit+0xb2>
    }

    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {        /* Scheduler still locked?                                */
 8003a5c:	4b1e      	ldr	r3, [pc, #120]	; (8003ad8 <OSIntExit+0xc0>)
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d003      	beq.n	8003a6c <OSIntExit+0x54>
        CPU_INT_EN();                                       /* Yes                                                    */
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7fc fc3f 	bl	80002e8 <CPU_SR_Restore>
        return;
 8003a6a:	e02e      	b.n	8003aca <OSIntExit+0xb2>
    }

    OSPrioHighRdy   = OS_PrioGetHighest();                  /* Find highest priority                                  */
 8003a6c:	f001 fc58 	bl	8005320 <OS_PrioGetHighest>
 8003a70:	4603      	mov	r3, r0
 8003a72:	461a      	mov	r2, r3
 8003a74:	4b19      	ldr	r3, [pc, #100]	; (8003adc <OSIntExit+0xc4>)
 8003a76:	701a      	strb	r2, [r3, #0]
    OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;     /* Get highest priority task ready-to-run                 */
 8003a78:	4b18      	ldr	r3, [pc, #96]	; (8003adc <OSIntExit+0xc4>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4a18      	ldr	r2, [pc, #96]	; (8003ae0 <OSIntExit+0xc8>)
 8003a80:	460b      	mov	r3, r1
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	440b      	add	r3, r1
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4413      	add	r3, r2
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a15      	ldr	r2, [pc, #84]	; (8003ae4 <OSIntExit+0xcc>)
 8003a8e:	6013      	str	r3, [r2, #0]
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                   /* Current task still the highest priority?               */
 8003a90:	4b14      	ldr	r3, [pc, #80]	; (8003ae4 <OSIntExit+0xcc>)
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	4b14      	ldr	r3, [pc, #80]	; (8003ae8 <OSIntExit+0xd0>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d103      	bne.n	8003aa4 <OSIntExit+0x8c>
        CPU_INT_EN();                                       /* Yes                                                    */
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f7fc fc23 	bl	80002e8 <CPU_SR_Restore>
        return;
 8003aa2:	e012      	b.n	8003aca <OSIntExit+0xb2>
    }

#if OS_CFG_TASK_PROFILE_EN > 0u
    OSTCBHighRdyPtr->CtxSwCtr++;                            /* Inc. # of context switches for this new task           */
 8003aa4:	4b0f      	ldr	r3, [pc, #60]	; (8003ae4 <OSIntExit+0xcc>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003aac:	3201      	adds	r2, #1
 8003aae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#endif
    OSTaskCtxSwCtr++;                                       /* Keep track of the total number of ctx switches         */
 8003ab2:	4b0e      	ldr	r3, [pc, #56]	; (8003aec <OSIntExit+0xd4>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	4a0c      	ldr	r2, [pc, #48]	; (8003aec <OSIntExit+0xd4>)
 8003aba:	6013      	str	r3, [r2, #0]

#if defined(OS_CFG_TLS_TBL_SIZE) && (OS_CFG_TLS_TBL_SIZE > 0u)
    OS_TLS_TaskSw();
#endif

    OSIntCtxSw();                                           /* Perform interrupt level ctx switch                     */
 8003abc:	f7fc fbdd 	bl	800027a <OSIntCtxSw>

    CPU_INT_EN();
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f7fc fc11 	bl	80002e8 <CPU_SR_Restore>
 8003ac6:	e000      	b.n	8003aca <OSIntExit+0xb2>
    CPU_SR_ALLOC();



    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Has the OS started?                                    */
        return;                                             /* No                                                     */
 8003ac8:	bf00      	nop
#endif

    OSIntCtxSw();                                           /* Perform interrupt level ctx switch                     */

    CPU_INT_EN();
}
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	20002479 	.word	0x20002479
 8003ad4:	20002700 	.word	0x20002700
 8003ad8:	20002468 	.word	0x20002468
 8003adc:	200025fc 	.word	0x200025fc
 8003ae0:	2000247c 	.word	0x2000247c
 8003ae4:	200026e0 	.word	0x200026e0
 8003ae8:	200026d4 	.word	0x200026d4
 8003aec:	200026fc 	.word	0x200026fc

08003af0 <OSSched>:
* Note(s)    : 1) Rescheduling is prevented when the scheduler is locked (see OSSchedLock())
************************************************************************************************************************
*/

void  OSSched (void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
 8003af6:	2300      	movs	r3, #0
 8003af8:	607b      	str	r3, [r7, #4]



    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* ISRs still nested?                                     */
 8003afa:	4b20      	ldr	r3, [pc, #128]	; (8003b7c <OSSched+0x8c>)
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d136      	bne.n	8003b70 <OSSched+0x80>
        return;                                             /* Yes ... only schedule when no nested ISRs              */
    }

    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {        /* Scheduler locked?                                      */
 8003b02:	4b1f      	ldr	r3, [pc, #124]	; (8003b80 <OSSched+0x90>)
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d134      	bne.n	8003b74 <OSSched+0x84>
        return;                                             /* Yes                                                    */
    }

    CPU_INT_DIS();
 8003b0a:	f7fc fbe9 	bl	80002e0 <CPU_SR_Save>
 8003b0e:	6078      	str	r0, [r7, #4]
    OSPrioHighRdy   = OS_PrioGetHighest();                  /* Find the highest priority ready                        */
 8003b10:	f001 fc06 	bl	8005320 <OS_PrioGetHighest>
 8003b14:	4603      	mov	r3, r0
 8003b16:	461a      	mov	r2, r3
 8003b18:	4b1a      	ldr	r3, [pc, #104]	; (8003b84 <OSSched+0x94>)
 8003b1a:	701a      	strb	r2, [r3, #0]
    OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;
 8003b1c:	4b19      	ldr	r3, [pc, #100]	; (8003b84 <OSSched+0x94>)
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	4619      	mov	r1, r3
 8003b22:	4a19      	ldr	r2, [pc, #100]	; (8003b88 <OSSched+0x98>)
 8003b24:	460b      	mov	r3, r1
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	440b      	add	r3, r1
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a16      	ldr	r2, [pc, #88]	; (8003b8c <OSSched+0x9c>)
 8003b32:	6013      	str	r3, [r2, #0]
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                   /* Current task is still highest priority task?           */
 8003b34:	4b15      	ldr	r3, [pc, #84]	; (8003b8c <OSSched+0x9c>)
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	4b15      	ldr	r3, [pc, #84]	; (8003b90 <OSSched+0xa0>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d103      	bne.n	8003b48 <OSSched+0x58>
        CPU_INT_EN();                                       /* Yes ... no need to context switch                      */
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f7fc fbd1 	bl	80002e8 <CPU_SR_Restore>
        return;
 8003b46:	e016      	b.n	8003b76 <OSSched+0x86>
    }

#if OS_CFG_TASK_PROFILE_EN > 0u
    OSTCBHighRdyPtr->CtxSwCtr++;                            /* Inc. # of context switches to this task                */
 8003b48:	4b10      	ldr	r3, [pc, #64]	; (8003b8c <OSSched+0x9c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003b50:	3201      	adds	r2, #1
 8003b52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#endif
    OSTaskCtxSwCtr++;                                       /* Increment context switch counter                       */
 8003b56:	4b0f      	ldr	r3, [pc, #60]	; (8003b94 <OSSched+0xa4>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	4a0d      	ldr	r2, [pc, #52]	; (8003b94 <OSSched+0xa4>)
 8003b5e:	6013      	str	r3, [r2, #0]

#if defined(OS_CFG_TLS_TBL_SIZE) && (OS_CFG_TLS_TBL_SIZE > 0u)
    OS_TLS_TaskSw();
#endif

    OS_TASK_SW();                                           /* Perform a task level context switch                    */
 8003b60:	f7fc fb86 	bl	8000270 <OSCtxSw>
    CPU_INT_EN();
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f7fc fbbf 	bl	80002e8 <CPU_SR_Restore>

#ifdef OS_TASK_SW_SYNC
    OS_TASK_SW_SYNC();
 8003b6a:	f3bf 8f6f 	isb	sy
 8003b6e:	e002      	b.n	8003b76 <OSSched+0x86>
    CPU_SR_ALLOC();



    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* ISRs still nested?                                     */
        return;                                             /* Yes ... only schedule when no nested ISRs              */
 8003b70:	bf00      	nop
 8003b72:	e000      	b.n	8003b76 <OSSched+0x86>
    }

    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {        /* Scheduler locked?                                      */
        return;                                             /* Yes                                                    */
 8003b74:	bf00      	nop
    CPU_INT_EN();

#ifdef OS_TASK_SW_SYNC
    OS_TASK_SW_SYNC();
#endif
}
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	20002700 	.word	0x20002700
 8003b80:	20002468 	.word	0x20002468
 8003b84:	200025fc 	.word	0x200025fc
 8003b88:	2000247c 	.word	0x2000247c
 8003b8c:	200026e0 	.word	0x200026e0
 8003b90:	200026d4 	.word	0x200026d4
 8003b94:	200026fc 	.word	0x200026fc

08003b98 <OSSchedLock>:
*                 call to OSSchedLock() you MUST have a call to OSSchedUnlock().
************************************************************************************************************************
*/

void  OSSchedLock (OS_ERR  *p_err)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
    CPU_SR_ALLOC();
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	60fb      	str	r3, [r7, #12]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 8003ba4:	4b17      	ldr	r3, [pc, #92]	; (8003c04 <OSSchedLock+0x6c>)
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d004      	beq.n	8003bb6 <OSSchedLock+0x1e>
       *p_err = OS_ERR_SCHED_LOCK_ISR;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f646 5262 	movw	r2, #28002	; 0x6d62
 8003bb2:	801a      	strh	r2, [r3, #0]
        return;
 8003bb4:	e022      	b.n	8003bfc <OSSchedLock+0x64>
    }
#endif

    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Make sure multitasking is running                      */
 8003bb6:	4b14      	ldr	r3, [pc, #80]	; (8003c08 <OSSchedLock+0x70>)
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d004      	beq.n	8003bc8 <OSSchedLock+0x30>
       *p_err = OS_ERR_OS_NOT_RUNNING;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f645 6289 	movw	r2, #24201	; 0x5e89
 8003bc4:	801a      	strh	r2, [r3, #0]
        return;
 8003bc6:	e019      	b.n	8003bfc <OSSchedLock+0x64>
    }

    if (OSSchedLockNestingCtr >= (OS_NESTING_CTR)250u) {    /* Prevent OSSchedLockNestingCtr overflowing              */
 8003bc8:	4b10      	ldr	r3, [pc, #64]	; (8003c0c <OSSchedLock+0x74>)
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	2bf9      	cmp	r3, #249	; 0xf9
 8003bce:	d904      	bls.n	8003bda <OSSchedLock+0x42>
       *p_err = OS_ERR_LOCK_NESTING_OVF;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f245 2209 	movw	r2, #21001	; 0x5209
 8003bd6:	801a      	strh	r2, [r3, #0]
        return;
 8003bd8:	e010      	b.n	8003bfc <OSSchedLock+0x64>
    }

    CPU_CRITICAL_ENTER();
 8003bda:	f7fc fb81 	bl	80002e0 <CPU_SR_Save>
 8003bde:	60f8      	str	r0, [r7, #12]
    OSSchedLockNestingCtr++;                                /* Increment lock nesting level                           */
 8003be0:	4b0a      	ldr	r3, [pc, #40]	; (8003c0c <OSSchedLock+0x74>)
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	3301      	adds	r3, #1
 8003be6:	b2da      	uxtb	r2, r3
 8003be8:	4b08      	ldr	r3, [pc, #32]	; (8003c0c <OSSchedLock+0x74>)
 8003bea:	701a      	strb	r2, [r3, #0]
#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
    OS_SchedLockTimeMeasStart();
 8003bec:	f000 fcce 	bl	800458c <OS_SchedLockTimeMeasStart>
#endif
    CPU_CRITICAL_EXIT();
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f7fc fb79 	bl	80002e8 <CPU_SR_Restore>
   *p_err = OS_ERR_NONE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	801a      	strh	r2, [r3, #0]
}
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	20002700 	.word	0x20002700
 8003c08:	20002479 	.word	0x20002479
 8003c0c:	20002468 	.word	0x20002468

08003c10 <OSSchedUnlock>:
*                 OSSchedLock() you MUST have a call to OSSchedUnlock().
************************************************************************************************************************
*/

void  OSSchedUnlock (OS_ERR  *p_err)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
    CPU_SR_ALLOC();
 8003c18:	2300      	movs	r3, #0
 8003c1a:	60fb      	str	r3, [r7, #12]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 8003c1c:	4b1e      	ldr	r3, [pc, #120]	; (8003c98 <OSSchedUnlock+0x88>)
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d004      	beq.n	8003c2e <OSSchedUnlock+0x1e>
       *p_err = OS_ERR_SCHED_UNLOCK_ISR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f646 5265 	movw	r2, #28005	; 0x6d65
 8003c2a:	801a      	strh	r2, [r3, #0]
        return;
 8003c2c:	e030      	b.n	8003c90 <OSSchedUnlock+0x80>
    }
#endif

    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Make sure multitasking is running                      */
 8003c2e:	4b1b      	ldr	r3, [pc, #108]	; (8003c9c <OSSchedUnlock+0x8c>)
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d004      	beq.n	8003c40 <OSSchedUnlock+0x30>
       *p_err = OS_ERR_OS_NOT_RUNNING;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f645 6289 	movw	r2, #24201	; 0x5e89
 8003c3c:	801a      	strh	r2, [r3, #0]
        return;
 8003c3e:	e027      	b.n	8003c90 <OSSchedUnlock+0x80>
    }

    if (OSSchedLockNestingCtr == (OS_NESTING_CTR)0) {       /* See if the scheduler is locked                         */
 8003c40:	4b17      	ldr	r3, [pc, #92]	; (8003ca0 <OSSchedUnlock+0x90>)
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d104      	bne.n	8003c52 <OSSchedUnlock+0x42>
       *p_err = OS_ERR_SCHED_NOT_LOCKED;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f646 5264 	movw	r2, #28004	; 0x6d64
 8003c4e:	801a      	strh	r2, [r3, #0]
        return;
 8003c50:	e01e      	b.n	8003c90 <OSSchedUnlock+0x80>
    }

    CPU_CRITICAL_ENTER();
 8003c52:	f7fc fb45 	bl	80002e0 <CPU_SR_Save>
 8003c56:	60f8      	str	r0, [r7, #12]
    OSSchedLockNestingCtr--;                                /* Decrement lock nesting level                           */
 8003c58:	4b11      	ldr	r3, [pc, #68]	; (8003ca0 <OSSchedUnlock+0x90>)
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	4b0f      	ldr	r3, [pc, #60]	; (8003ca0 <OSSchedUnlock+0x90>)
 8003c62:	701a      	strb	r2, [r3, #0]
    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {
 8003c64:	4b0e      	ldr	r3, [pc, #56]	; (8003ca0 <OSSchedUnlock+0x90>)
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d007      	beq.n	8003c7c <OSSchedUnlock+0x6c>
        CPU_CRITICAL_EXIT();                                /* Scheduler is still locked                              */
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f7fc fb3b 	bl	80002e8 <CPU_SR_Restore>
       *p_err = OS_ERR_SCHED_LOCKED;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f646 5263 	movw	r2, #28003	; 0x6d63
 8003c78:	801a      	strh	r2, [r3, #0]
        return;
 8003c7a:	e009      	b.n	8003c90 <OSSchedUnlock+0x80>
    }

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
    OS_SchedLockTimeMeasStop();
 8003c7c:	f000 fc98 	bl	80045b0 <OS_SchedLockTimeMeasStop>
#endif

    CPU_CRITICAL_EXIT();                                    /* Scheduler should be re-enabled                         */
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f7fc fb31 	bl	80002e8 <CPU_SR_Restore>
    OSSched();                                              /* Run the scheduler                                      */
 8003c86:	f7ff ff33 	bl	8003af0 <OSSched>
   *p_err = OS_ERR_NONE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	801a      	strh	r2, [r3, #0]
}
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	20002700 	.word	0x20002700
 8003c9c:	20002479 	.word	0x20002479
 8003ca0:	20002468 	.word	0x20002468

08003ca4 <OSStart>:
*              2) OSStart() is not supposed to return.  If it does, that would be considered a fatal error.
************************************************************************************************************************
*/

void  OSStart (OS_ERR  *p_err)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    if (OSRunning == OS_STATE_OS_STOPPED) {
 8003cac:	4b17      	ldr	r3, [pc, #92]	; (8003d0c <OSStart+0x68>)
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d123      	bne.n	8003cfc <OSStart+0x58>
        OSPrioHighRdy   = OS_PrioGetHighest();              /* Find the highest priority                              */
 8003cb4:	f001 fb34 	bl	8005320 <OS_PrioGetHighest>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	461a      	mov	r2, r3
 8003cbc:	4b14      	ldr	r3, [pc, #80]	; (8003d10 <OSStart+0x6c>)
 8003cbe:	701a      	strb	r2, [r3, #0]
        OSPrioCur       = OSPrioHighRdy;
 8003cc0:	4b13      	ldr	r3, [pc, #76]	; (8003d10 <OSStart+0x6c>)
 8003cc2:	781a      	ldrb	r2, [r3, #0]
 8003cc4:	4b13      	ldr	r3, [pc, #76]	; (8003d14 <OSStart+0x70>)
 8003cc6:	701a      	strb	r2, [r3, #0]
        OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;
 8003cc8:	4b11      	ldr	r3, [pc, #68]	; (8003d10 <OSStart+0x6c>)
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	4619      	mov	r1, r3
 8003cce:	4a12      	ldr	r2, [pc, #72]	; (8003d18 <OSStart+0x74>)
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	440b      	add	r3, r1
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4413      	add	r3, r2
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a0f      	ldr	r2, [pc, #60]	; (8003d1c <OSStart+0x78>)
 8003cde:	6013      	str	r3, [r2, #0]
        OSTCBCurPtr     = OSTCBHighRdyPtr;
 8003ce0:	4b0e      	ldr	r3, [pc, #56]	; (8003d1c <OSStart+0x78>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a0e      	ldr	r2, [pc, #56]	; (8003d20 <OSStart+0x7c>)
 8003ce6:	6013      	str	r3, [r2, #0]
        OSRunning       = OS_STATE_OS_RUNNING;
 8003ce8:	4b08      	ldr	r3, [pc, #32]	; (8003d0c <OSStart+0x68>)
 8003cea:	2201      	movs	r2, #1
 8003cec:	701a      	strb	r2, [r3, #0]
        OSStartHighRdy();                                   /* Execute target specific code to start task             */
 8003cee:	f7fc fa87 	bl	8000200 <OSStartHighRdy>
       *p_err           = OS_ERR_FATAL_RETURN;              /* OSStart() is not supposed to return                    */
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f643 2299 	movw	r2, #15001	; 0x3a99
 8003cf8:	801a      	strh	r2, [r3, #0]
    } else {
       *p_err           = OS_ERR_OS_RUNNING;                /* OS is already running                                  */
    }
}
 8003cfa:	e003      	b.n	8003d04 <OSStart+0x60>
        OSTCBCurPtr     = OSTCBHighRdyPtr;
        OSRunning       = OS_STATE_OS_RUNNING;
        OSStartHighRdy();                                   /* Execute target specific code to start task             */
       *p_err           = OS_ERR_FATAL_RETURN;              /* OSStart() is not supposed to return                    */
    } else {
       *p_err           = OS_ERR_OS_RUNNING;                /* OS is already running                                  */
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f645 628a 	movw	r2, #24202	; 0x5e8a
 8003d02:	801a      	strh	r2, [r3, #0]
    }
}
 8003d04:	bf00      	nop
 8003d06:	3708      	adds	r7, #8
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	20002479 	.word	0x20002479
 8003d10:	200025fc 	.word	0x200025fc
 8003d14:	20002608 	.word	0x20002608
 8003d18:	2000247c 	.word	0x2000247c
 8003d1c:	200026e0 	.word	0x200026e0
 8003d20:	200026d4 	.word	0x200026d4

08003d24 <OS_IdleTask>:
*              3) This hook has been added to allow you to do such things as STOP the CPU to conserve power.
************************************************************************************************************************
*/

void  OS_IdleTask (void  *p_arg)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
    CPU_SR_ALLOC();
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	60fb      	str	r3, [r7, #12]


    (void)&p_arg;                                           /* Prevent compiler warning for not using 'p_arg'         */

    while (DEF_ON) {
        CPU_CRITICAL_ENTER();
 8003d30:	f7fc fad6 	bl	80002e0 <CPU_SR_Save>
 8003d34:	60f8      	str	r0, [r7, #12]
        OSIdleTaskCtr++;
 8003d36:	4b08      	ldr	r3, [pc, #32]	; (8003d58 <OS_IdleTask+0x34>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	4a06      	ldr	r2, [pc, #24]	; (8003d58 <OS_IdleTask+0x34>)
 8003d3e:	6013      	str	r3, [r2, #0]
#if OS_CFG_STAT_TASK_EN > 0u
        OSStatTaskCtr++;
 8003d40:	4b06      	ldr	r3, [pc, #24]	; (8003d5c <OS_IdleTask+0x38>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	3301      	adds	r3, #1
 8003d46:	4a05      	ldr	r2, [pc, #20]	; (8003d5c <OS_IdleTask+0x38>)
 8003d48:	6013      	str	r3, [r2, #0]
#endif
        CPU_CRITICAL_EXIT();
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f7fc facc 	bl	80002e8 <CPU_SR_Restore>

        OSIdleTaskHook();                                   /* Call user definable HOOK                               */
 8003d50:	f002 fa94 	bl	800627c <OSIdleTaskHook>
    }
 8003d54:	e7ec      	b.n	8003d30 <OS_IdleTask+0xc>
 8003d56:	bf00      	nop
 8003d58:	200028e0 	.word	0x200028e0
 8003d5c:	20002474 	.word	0x20002474

08003d60 <OS_IdleTaskInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_IdleTaskInit (OS_ERR  *p_err)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b08c      	sub	sp, #48	; 0x30
 8003d64:	af0a      	add	r7, sp, #40	; 0x28
 8003d66:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    OSIdleTaskCtr = (OS_IDLE_CTR)0;
 8003d68:	4b10      	ldr	r3, [pc, #64]	; (8003dac <OS_IdleTaskInit+0x4c>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	601a      	str	r2, [r3, #0]
                                                            /* ---------------- CREATE THE IDLE TASK ---------------- */
    OSTaskCreate((OS_TCB     *)&OSIdleTaskTCB,
 8003d6e:	4b10      	ldr	r3, [pc, #64]	; (8003db0 <OS_IdleTaskInit+0x50>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a10      	ldr	r2, [pc, #64]	; (8003db4 <OS_IdleTaskInit+0x54>)
 8003d74:	6812      	ldr	r2, [r2, #0]
 8003d76:	4910      	ldr	r1, [pc, #64]	; (8003db8 <OS_IdleTaskInit+0x58>)
 8003d78:	6809      	ldr	r1, [r1, #0]
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	9008      	str	r0, [sp, #32]
 8003d7e:	200b      	movs	r0, #11
 8003d80:	9007      	str	r0, [sp, #28]
 8003d82:	2000      	movs	r0, #0
 8003d84:	9006      	str	r0, [sp, #24]
 8003d86:	2000      	movs	r0, #0
 8003d88:	9005      	str	r0, [sp, #20]
 8003d8a:	2000      	movs	r0, #0
 8003d8c:	9004      	str	r0, [sp, #16]
 8003d8e:	9103      	str	r1, [sp, #12]
 8003d90:	9202      	str	r2, [sp, #8]
 8003d92:	9301      	str	r3, [sp, #4]
 8003d94:	231f      	movs	r3, #31
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	2300      	movs	r3, #0
 8003d9a:	4a08      	ldr	r2, [pc, #32]	; (8003dbc <OS_IdleTaskInit+0x5c>)
 8003d9c:	4908      	ldr	r1, [pc, #32]	; (8003dc0 <OS_IdleTaskInit+0x60>)
 8003d9e:	4809      	ldr	r0, [pc, #36]	; (8003dc4 <OS_IdleTaskInit+0x64>)
 8003da0:	f7fe fd6e 	bl	8002880 <OSTaskCreate>
                 (OS_MSG_QTY  )0u,
                 (OS_TICK     )0u,
                 (void       *)0,
                 (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR | OS_OPT_TASK_NO_TLS),
                 (OS_ERR     *)p_err);
}
 8003da4:	bf00      	nop
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	200028e0 	.word	0x200028e0
 8003db0:	0800ec5c 	.word	0x0800ec5c
 8003db4:	0800ec60 	.word	0x0800ec60
 8003db8:	0800ec64 	.word	0x0800ec64
 8003dbc:	08003d25 	.word	0x08003d25
 8003dc0:	0800eb64 	.word	0x0800eb64
 8003dc4:	200027d0 	.word	0x200027d0

08003dc8 <OS_Pend>:

void  OS_Pend (OS_PEND_DATA  *p_pend_data,
               OS_PEND_OBJ   *p_obj,
               OS_STATE       pending_on,
               OS_TICK        timeout)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	603b      	str	r3, [r7, #0]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	71fb      	strb	r3, [r7, #7]
    OS_PEND_LIST  *p_pend_list;



    OSTCBCurPtr->PendOn     = pending_on;                    /* Resource not available, wait until it is              */
 8003dd8:	4b1b      	ldr	r3, [pc, #108]	; (8003e48 <OS_Pend+0x80>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	79fa      	ldrb	r2, [r7, #7]
 8003dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    OSTCBCurPtr->PendStatus = OS_STATUS_PEND_OK;
 8003de2:	4b19      	ldr	r3, [pc, #100]	; (8003e48 <OS_Pend+0x80>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    OS_TaskBlock(OSTCBCurPtr,                                /* Block the task and add it to the tick list if needed  */
 8003dec:	4b16      	ldr	r3, [pc, #88]	; (8003e48 <OS_Pend+0x80>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6839      	ldr	r1, [r7, #0]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 fc06 	bl	8004604 <OS_TaskBlock>
                 timeout);

    if (p_obj != (OS_PEND_OBJ *)0) {                         /* Add the current task to the pend list ...             */
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d011      	beq.n	8003e22 <OS_Pend+0x5a>
        p_pend_list             = &p_obj->PendList;          /* ... if there is an object to pend on                  */
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	3308      	adds	r3, #8
 8003e02:	617b      	str	r3, [r7, #20]
        p_pend_data->PendObjPtr = p_obj;                     /* Save the pointer to the object pending on             */
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	60da      	str	r2, [r3, #12]
        OS_PendDataInit((OS_TCB       *)OSTCBCurPtr,         /* Initialize the remaining field                        */
 8003e0a:	4b0f      	ldr	r3, [pc, #60]	; (8003e48 <OS_Pend+0x80>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	68f9      	ldr	r1, [r7, #12]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 f81a 	bl	8003e4c <OS_PendDataInit>
                        (OS_PEND_DATA *)p_pend_data,
                        (OS_OBJ_QTY    )1);
        OS_PendListInsertPrio(p_pend_list,                   /* Insert in the pend list in priority order             */
 8003e18:	68f9      	ldr	r1, [r7, #12]
 8003e1a:	6978      	ldr	r0, [r7, #20]
 8003e1c:	f000 f8ec 	bl	8003ff8 <OS_PendListInsertPrio>
 8003e20:	e008      	b.n	8003e34 <OS_Pend+0x6c>
                              p_pend_data);
    } else {
        OSTCBCurPtr->PendDataTblEntries = (OS_OBJ_QTY    )0; /* If no object being pended on the clear these fields   */
 8003e22:	4b09      	ldr	r3, [pc, #36]	; (8003e48 <OS_Pend+0x80>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        OSTCBCurPtr->PendDataTblPtr     = (OS_PEND_DATA *)0; /* ... in the TCB                                        */
 8003e2c:	4b06      	ldr	r3, [pc, #24]	; (8003e48 <OS_Pend+0x80>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2200      	movs	r2, #0
 8003e32:	631a      	str	r2, [r3, #48]	; 0x30
    }
#if OS_CFG_DBG_EN > 0u
    OS_PendDbgNameAdd(p_obj,
 8003e34:	4b04      	ldr	r3, [pc, #16]	; (8003e48 <OS_Pend+0x80>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4619      	mov	r1, r3
 8003e3a:	68b8      	ldr	r0, [r7, #8]
 8003e3c:	f000 f83c 	bl	8003eb8 <OS_PendDbgNameAdd>
                      OSTCBCurPtr);
#endif
}
 8003e40:	bf00      	nop
 8003e42:	3718      	adds	r7, #24
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	200026d4 	.word	0x200026d4

08003e4c <OS_PendDataInit>:
*/

void  OS_PendDataInit (OS_TCB        *p_tcb,
                       OS_PEND_DATA  *p_pend_data_tbl,
                       OS_OBJ_QTY     tbl_size)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b087      	sub	sp, #28
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	4613      	mov	r3, r2
 8003e58:	80fb      	strh	r3, [r7, #6]
    OS_OBJ_QTY  i;



    p_tcb->PendDataTblEntries = tbl_size;                   /* Link the TCB to the beginning of the table             */
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	88fa      	ldrh	r2, [r7, #6]
 8003e5e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    p_tcb->PendDataTblPtr     = p_pend_data_tbl;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	631a      	str	r2, [r3, #48]	; 0x30

    for (i = 0u; i < tbl_size; i++) {
 8003e68:	2300      	movs	r3, #0
 8003e6a:	82fb      	strh	r3, [r7, #22]
 8003e6c:	e01a      	b.n	8003ea4 <OS_PendDataInit+0x58>
        p_pend_data_tbl->NextPtr    = (OS_PEND_DATA *)0;    /* Initialize all the fields                              */
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2200      	movs	r2, #0
 8003e72:	605a      	str	r2, [r3, #4]
        p_pend_data_tbl->PrevPtr    = (OS_PEND_DATA *)0;
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	2200      	movs	r2, #0
 8003e78:	601a      	str	r2, [r3, #0]
        p_pend_data_tbl->RdyObjPtr  = (OS_PEND_OBJ  *)0;
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	611a      	str	r2, [r3, #16]
        p_pend_data_tbl->RdyMsgPtr  = (void         *)0;
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	2200      	movs	r2, #0
 8003e84:	615a      	str	r2, [r3, #20]
        p_pend_data_tbl->RdyMsgSize = (OS_MSG_SIZE   )0;
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	831a      	strh	r2, [r3, #24]
        p_pend_data_tbl->RdyTS      = (CPU_TS        )0;
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	61da      	str	r2, [r3, #28]
        p_pend_data_tbl->TCBPtr     = p_tcb;                /* Every entry points back to the TCB of the task         */
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	609a      	str	r2, [r3, #8]
        p_pend_data_tbl++;
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	3320      	adds	r3, #32
 8003e9c:	60bb      	str	r3, [r7, #8]


    p_tcb->PendDataTblEntries = tbl_size;                   /* Link the TCB to the beginning of the table             */
    p_tcb->PendDataTblPtr     = p_pend_data_tbl;

    for (i = 0u; i < tbl_size; i++) {
 8003e9e:	8afb      	ldrh	r3, [r7, #22]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	82fb      	strh	r3, [r7, #22]
 8003ea4:	8afa      	ldrh	r2, [r7, #22]
 8003ea6:	88fb      	ldrh	r3, [r7, #6]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d3e0      	bcc.n	8003e6e <OS_PendDataInit+0x22>
        p_pend_data_tbl->RdyMsgSize = (OS_MSG_SIZE   )0;
        p_pend_data_tbl->RdyTS      = (CPU_TS        )0;
        p_pend_data_tbl->TCBPtr     = p_tcb;                /* Every entry points back to the TCB of the task         */
        p_pend_data_tbl++;
    }
}
 8003eac:	bf00      	nop
 8003eae:	371c      	adds	r7, #28
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bc80      	pop	{r7}
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop

08003eb8 <OS_PendDbgNameAdd>:


#if OS_CFG_DBG_EN > 0u
void  OS_PendDbgNameAdd (OS_PEND_OBJ  *p_obj,
                         OS_TCB       *p_tcb)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b087      	sub	sp, #28
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
    OS_PEND_LIST  *p_pend_list;
    OS_PEND_DATA  *p_pend_data;
    OS_TCB        *p_tcb1;


    if (p_obj != (OS_PEND_OBJ *)0) {
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d012      	beq.n	8003eee <OS_PendDbgNameAdd+0x36>
        p_tcb->DbgNamePtr =  p_obj->NamePtr;                /* Task pending on this object ... save name in TCB       */
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
        p_pend_list       = &p_obj->PendList;               /* Find name of HP task pending on this object ...        */
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	3308      	adds	r3, #8
 8003ed6:	617b      	str	r3, [r7, #20]
        p_pend_data       =  p_pend_list->HeadPtr;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	613b      	str	r3, [r7, #16]
        p_tcb1            =  p_pend_data->TCBPtr;
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	60fb      	str	r3, [r7, #12]
        p_obj->DbgNamePtr = p_tcb1->NamePtr;                /* ... Save in object                                     */
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6a1a      	ldr	r2, [r3, #32]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	61da      	str	r2, [r3, #28]
            default:
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)" ");
                 break;
        }
    }
}
 8003eec:	e016      	b.n	8003f1c <OS_PendDbgNameAdd+0x64>
        p_pend_list       = &p_obj->PendList;               /* Find name of HP task pending on this object ...        */
        p_pend_data       =  p_pend_list->HeadPtr;
        p_tcb1            =  p_pend_data->TCBPtr;
        p_obj->DbgNamePtr = p_tcb1->NamePtr;                /* ... Save in object                                     */
    } else {
        switch (p_tcb->PendOn) {
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d002      	beq.n	8003efe <OS_PendDbgNameAdd+0x46>
 8003ef8:	2b07      	cmp	r3, #7
 8003efa:	d005      	beq.n	8003f08 <OS_PendDbgNameAdd+0x50>
 8003efc:	e009      	b.n	8003f12 <OS_PendDbgNameAdd+0x5a>
            case OS_TASK_PEND_ON_TASK_Q:
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)"Task Q");
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	4a09      	ldr	r2, [pc, #36]	; (8003f28 <OS_PendDbgNameAdd+0x70>)
 8003f02:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
                 break;
 8003f06:	e009      	b.n	8003f1c <OS_PendDbgNameAdd+0x64>

            case OS_TASK_PEND_ON_TASK_SEM:
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)"Task Sem");
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	4a08      	ldr	r2, [pc, #32]	; (8003f2c <OS_PendDbgNameAdd+0x74>)
 8003f0c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
                 break;
 8003f10:	e004      	b.n	8003f1c <OS_PendDbgNameAdd+0x64>

            default:
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)" ");
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	4a06      	ldr	r2, [pc, #24]	; (8003f30 <OS_PendDbgNameAdd+0x78>)
 8003f16:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
                 break;
 8003f1a:	bf00      	nop
        }
    }
}
 8003f1c:	bf00      	nop
 8003f1e:	371c      	adds	r7, #28
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bc80      	pop	{r7}
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	0800eb78 	.word	0x0800eb78
 8003f2c:	0800eb80 	.word	0x0800eb80
 8003f30:	0800eb8c 	.word	0x0800eb8c

08003f34 <OS_PendDbgNameRemove>:



void  OS_PendDbgNameRemove (OS_PEND_OBJ  *p_obj,
                            OS_TCB       *p_tcb)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b087      	sub	sp, #28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
    OS_PEND_LIST  *p_pend_list;
    OS_PEND_DATA  *p_pend_data;
    OS_TCB        *p_tcb1;


    p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)" ");          /* Remove name of object pended on for readied task       */
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	4a0d      	ldr	r2, [pc, #52]	; (8003f78 <OS_PendDbgNameRemove+0x44>)
 8003f42:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    p_pend_list       = &p_obj->PendList;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	3308      	adds	r3, #8
 8003f4a:	617b      	str	r3, [r7, #20]
    p_pend_data       =  p_pend_list->HeadPtr;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	613b      	str	r3, [r7, #16]
    if (p_pend_data  != (OS_PEND_DATA *)0) {
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d007      	beq.n	8003f68 <OS_PendDbgNameRemove+0x34>
        p_tcb1            = p_pend_data->TCBPtr;
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	60fb      	str	r3, [r7, #12]
        p_obj->DbgNamePtr = p_tcb1->NamePtr;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6a1a      	ldr	r2, [r3, #32]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	61da      	str	r2, [r3, #28]
    } else {
        p_obj->DbgNamePtr = (CPU_CHAR *)((void *)" ");      /* No other task pending on object                        */
    }
}
 8003f66:	e002      	b.n	8003f6e <OS_PendDbgNameRemove+0x3a>
    p_pend_data       =  p_pend_list->HeadPtr;
    if (p_pend_data  != (OS_PEND_DATA *)0) {
        p_tcb1            = p_pend_data->TCBPtr;
        p_obj->DbgNamePtr = p_tcb1->NamePtr;
    } else {
        p_obj->DbgNamePtr = (CPU_CHAR *)((void *)" ");      /* No other task pending on object                        */
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a03      	ldr	r2, [pc, #12]	; (8003f78 <OS_PendDbgNameRemove+0x44>)
 8003f6c:	61da      	str	r2, [r3, #28]
    }
}
 8003f6e:	bf00      	nop
 8003f70:	371c      	adds	r7, #28
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bc80      	pop	{r7}
 8003f76:	4770      	bx	lr
 8003f78:	0800eb8c 	.word	0x0800eb8c

08003f7c <OS_PendListChangePrio>:
*              2) It's assumed that the TCB contains the NEW priority in its .Prio field.
************************************************************************************************************************
*/

void  OS_PendListChangePrio (OS_TCB   *p_tcb)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
    OS_PEND_DATA   *p_pend_data;
    OS_PEND_LIST   *p_pend_list;
    OS_PEND_OBJ    *p_obj;


    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to first wait list entry                 */
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f88:	613b      	str	r3, [r7, #16]
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get the number of pend list task is in         */
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f90:	82fb      	strh	r3, [r7, #22]

    while (n_pend_list > 0u) {
 8003f92:	e017      	b.n	8003fc4 <OS_PendListChangePrio+0x48>
        p_obj       =  p_pend_data->PendObjPtr;                     /* Get pointer to pend list                       */
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	60fb      	str	r3, [r7, #12]
        p_pend_list = &p_obj->PendList;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	3308      	adds	r3, #8
 8003f9e:	60bb      	str	r3, [r7, #8]
        if (p_pend_list->NbrEntries > 1u) {                         /* Only move if multiple entries in the list      */
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	891b      	ldrh	r3, [r3, #8]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d907      	bls.n	8003fb8 <OS_PendListChangePrio+0x3c>
            OS_PendListRemove1(p_pend_list,                         /* Remove entry from current position             */
 8003fa8:	6939      	ldr	r1, [r7, #16]
 8003faa:	68b8      	ldr	r0, [r7, #8]
 8003fac:	f000 f8c2 	bl	8004134 <OS_PendListRemove1>
                               p_pend_data);
            OS_PendListInsertPrio(p_pend_list,                      /* INSERT it back in the list                     */
 8003fb0:	6939      	ldr	r1, [r7, #16]
 8003fb2:	68b8      	ldr	r0, [r7, #8]
 8003fb4:	f000 f820 	bl	8003ff8 <OS_PendListInsertPrio>
                                  p_pend_data);
        }
        p_pend_data++;                                              /* Point to next wait list                        */
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	3320      	adds	r3, #32
 8003fbc:	613b      	str	r3, [r7, #16]
        n_pend_list--;
 8003fbe:	8afb      	ldrh	r3, [r7, #22]
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	82fb      	strh	r3, [r7, #22]


    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to first wait list entry                 */
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get the number of pend list task is in         */

    while (n_pend_list > 0u) {
 8003fc4:	8afb      	ldrh	r3, [r7, #22]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1e4      	bne.n	8003f94 <OS_PendListChangePrio+0x18>
                                  p_pend_data);
        }
        p_pend_data++;                                              /* Point to next wait list                        */
        n_pend_list--;
    }
}
 8003fca:	bf00      	nop
 8003fcc:	3718      	adds	r7, #24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop

08003fd4 <OS_PendListInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application must not call it.
************************************************************************************************************************
*/

void  OS_PendListInit (OS_PEND_LIST  *p_pend_list)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
    p_pend_list->HeadPtr    = (OS_PEND_DATA *)0;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	601a      	str	r2, [r3, #0]
    p_pend_list->TailPtr    = (OS_PEND_DATA *)0;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	605a      	str	r2, [r3, #4]
    p_pend_list->NbrEntries = (OS_OBJ_QTY    )0;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	811a      	strh	r2, [r3, #8]
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bc80      	pop	{r7}
 8003ff6:	4770      	bx	lr

08003ff8 <OS_PendListInsertPrio>:
************************************************************************************************************************
*/

void  OS_PendListInsertPrio (OS_PEND_LIST  *p_pend_list,
                             OS_PEND_DATA  *p_pend_data)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b089      	sub	sp, #36	; 0x24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
    OS_PEND_DATA  *p_pend_data_prev;
    OS_PEND_DATA  *p_pend_data_next;



    p_tcb = p_pend_data->TCBPtr;                                      /* Obtain the priority of the task to insert    */
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	61bb      	str	r3, [r7, #24]
    prio  = p_tcb->Prio;
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800400e:	75fb      	strb	r3, [r7, #23]
    if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0) {                   /* CASE 0: Insert when there are no entries     */
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	891b      	ldrh	r3, [r3, #8]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10f      	bne.n	8004038 <OS_PendListInsertPrio+0x40>
        p_pend_list->NbrEntries = (OS_OBJ_QTY)1;                      /*         This is the first entry              */
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	811a      	strh	r2, [r3, #8]
        p_pend_data->NextPtr    = (OS_PEND_DATA *)0;                  /*         No other OS_PEND_DATAs in the list   */
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	2200      	movs	r2, #0
 8004022:	605a      	str	r2, [r3, #4]
        p_pend_data->PrevPtr    = (OS_PEND_DATA *)0;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	2200      	movs	r2, #0
 8004028:	601a      	str	r2, [r3, #0]
        p_pend_list->HeadPtr    = p_pend_data;                        /*                                              */
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	601a      	str	r2, [r3, #0]
        p_pend_list->TailPtr    = p_pend_data;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	683a      	ldr	r2, [r7, #0]
 8004034:	605a      	str	r2, [r3, #4]
                p_pend_data_prev->NextPtr  = p_pend_data;
                p_pend_data_next->PrevPtr  = p_pend_data;
            }
        }
    }
}
 8004036:	e04d      	b.n	80040d4 <OS_PendListInsertPrio+0xdc>
        p_pend_data->NextPtr    = (OS_PEND_DATA *)0;                  /*         No other OS_PEND_DATAs in the list   */
        p_pend_data->PrevPtr    = (OS_PEND_DATA *)0;
        p_pend_list->HeadPtr    = p_pend_data;                        /*                                              */
        p_pend_list->TailPtr    = p_pend_data;
    } else {
        p_pend_list->NbrEntries++;                                    /* CASE 1: One more OS_PEND_DATA in the list    */
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	891b      	ldrh	r3, [r3, #8]
 800403c:	3301      	adds	r3, #1
 800403e:	b29a      	uxth	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	811a      	strh	r2, [r3, #8]
        p_pend_data_next = p_pend_list->HeadPtr;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	61fb      	str	r3, [r7, #28]
        while (p_pend_data_next != (OS_PEND_DATA *)0) {               /*         Find the position where to insert    */
 800404a:	e00b      	b.n	8004064 <OS_PendListInsertPrio+0x6c>
            p_tcb_next   = p_pend_data_next->TCBPtr;
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	613b      	str	r3, [r7, #16]
            if (prio < p_tcb_next->Prio) {
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8004058:	7dfa      	ldrb	r2, [r7, #23]
 800405a:	429a      	cmp	r2, r3
 800405c:	d306      	bcc.n	800406c <OS_PendListInsertPrio+0x74>
                break;                                                /*         Found! ... insert BEFORE current     */
            } else {
                p_pend_data_next = p_pend_data_next->NextPtr;         /*         Not Found, follow the list           */
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	61fb      	str	r3, [r7, #28]
        p_pend_list->HeadPtr    = p_pend_data;                        /*                                              */
        p_pend_list->TailPtr    = p_pend_data;
    } else {
        p_pend_list->NbrEntries++;                                    /* CASE 1: One more OS_PEND_DATA in the list    */
        p_pend_data_next = p_pend_list->HeadPtr;
        while (p_pend_data_next != (OS_PEND_DATA *)0) {               /*         Find the position where to insert    */
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1f0      	bne.n	800404c <OS_PendListInsertPrio+0x54>
 800406a:	e000      	b.n	800406e <OS_PendListInsertPrio+0x76>
            p_tcb_next   = p_pend_data_next->TCBPtr;
            if (prio < p_tcb_next->Prio) {
                break;                                                /*         Found! ... insert BEFORE current     */
 800406c:	bf00      	nop
            } else {
                p_pend_data_next = p_pend_data_next->NextPtr;         /*         Not Found, follow the list           */
            }
        }
        if (p_pend_data_next == (OS_PEND_DATA *)0) {                  /*         TCB to insert is lower in prio       */
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10f      	bne.n	8004094 <OS_PendListInsertPrio+0x9c>
            p_pend_data->NextPtr      = (OS_PEND_DATA *)0;            /*         ... insert at the tail.              */
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	2200      	movs	r2, #0
 8004078:	605a      	str	r2, [r3, #4]
            p_pend_data_prev          = p_pend_list->TailPtr;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	60fb      	str	r3, [r7, #12]
            p_pend_data->PrevPtr      = p_pend_data_prev;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	601a      	str	r2, [r3, #0]
            p_pend_data_prev->NextPtr = p_pend_data;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	605a      	str	r2, [r3, #4]
            p_pend_list->TailPtr      = p_pend_data;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	605a      	str	r2, [r3, #4]
                p_pend_data_prev->NextPtr  = p_pend_data;
                p_pend_data_next->PrevPtr  = p_pend_data;
            }
        }
    }
}
 8004092:	e01f      	b.n	80040d4 <OS_PendListInsertPrio+0xdc>
            p_pend_data_prev          = p_pend_list->TailPtr;
            p_pend_data->PrevPtr      = p_pend_data_prev;
            p_pend_data_prev->NextPtr = p_pend_data;
            p_pend_list->TailPtr      = p_pend_data;
        } else {
            if (p_pend_data_next->PrevPtr == (OS_PEND_DATA *)0) {     /*         Is new TCB highest priority?         */
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10c      	bne.n	80040b6 <OS_PendListInsertPrio+0xbe>
                p_pend_data_next->PrevPtr  = p_pend_data;             /*         Yes, insert as new Head of list      */
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	601a      	str	r2, [r3, #0]
                p_pend_data->PrevPtr       = (OS_PEND_DATA *)0;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	2200      	movs	r2, #0
 80040a6:	601a      	str	r2, [r3, #0]
                p_pend_data->NextPtr       = p_pend_data_next;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	69fa      	ldr	r2, [r7, #28]
 80040ac:	605a      	str	r2, [r3, #4]
                p_pend_list->HeadPtr       = p_pend_data;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	601a      	str	r2, [r3, #0]
                p_pend_data_prev->NextPtr  = p_pend_data;
                p_pend_data_next->PrevPtr  = p_pend_data;
            }
        }
    }
}
 80040b4:	e00e      	b.n	80040d4 <OS_PendListInsertPrio+0xdc>
                p_pend_data_next->PrevPtr  = p_pend_data;             /*         Yes, insert as new Head of list      */
                p_pend_data->PrevPtr       = (OS_PEND_DATA *)0;
                p_pend_data->NextPtr       = p_pend_data_next;
                p_pend_list->HeadPtr       = p_pend_data;
            } else {
                p_pend_data_prev           = p_pend_data_next->PrevPtr;/*        No,  insert in between two entries   */
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	60fb      	str	r3, [r7, #12]
                p_pend_data->PrevPtr       = p_pend_data_prev;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	601a      	str	r2, [r3, #0]
                p_pend_data->NextPtr       = p_pend_data_next;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	69fa      	ldr	r2, [r7, #28]
 80040c6:	605a      	str	r2, [r3, #4]
                p_pend_data_prev->NextPtr  = p_pend_data;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	605a      	str	r2, [r3, #4]
                p_pend_data_next->PrevPtr  = p_pend_data;
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	601a      	str	r2, [r3, #0]
            }
        }
    }
}
 80040d4:	bf00      	nop
 80040d6:	3724      	adds	r7, #36	; 0x24
 80040d8:	46bd      	mov	sp, r7
 80040da:	bc80      	pop	{r7}
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop

080040e0 <OS_PendListRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_PendListRemove (OS_TCB  *p_tcb)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
    OS_PEND_LIST   *p_pend_list;
    OS_PEND_OBJ    *p_obj;



    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to the first OS_PEND_DATA to remove      */
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ec:	613b      	str	r3, [r7, #16]
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get number of entries in the table             */
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040f4:	82fb      	strh	r3, [r7, #22]

    while (n_pend_list > (OS_OBJ_QTY)0) {
 80040f6:	e00f      	b.n	8004118 <OS_PendListRemove+0x38>
        p_obj       =  p_pend_data->PendObjPtr;                     /* Get pointer to pend list                       */
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	60fb      	str	r3, [r7, #12]
        p_pend_list = &p_obj->PendList;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	3308      	adds	r3, #8
 8004102:	60bb      	str	r3, [r7, #8]
        OS_PendListRemove1(p_pend_list,
 8004104:	6939      	ldr	r1, [r7, #16]
 8004106:	68b8      	ldr	r0, [r7, #8]
 8004108:	f000 f814 	bl	8004134 <OS_PendListRemove1>
                           p_pend_data);
        p_pend_data++;
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	3320      	adds	r3, #32
 8004110:	613b      	str	r3, [r7, #16]
        n_pend_list--;
 8004112:	8afb      	ldrh	r3, [r7, #22]
 8004114:	3b01      	subs	r3, #1
 8004116:	82fb      	strh	r3, [r7, #22]


    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to the first OS_PEND_DATA to remove      */
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get number of entries in the table             */

    while (n_pend_list > (OS_OBJ_QTY)0) {
 8004118:	8afb      	ldrh	r3, [r7, #22]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1ec      	bne.n	80040f8 <OS_PendListRemove+0x18>
        OS_PendListRemove1(p_pend_list,
                           p_pend_data);
        p_pend_data++;
        n_pend_list--;
    }
    p_tcb->PendDataTblEntries = (OS_OBJ_QTY    )0;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    p_tcb->PendDataTblPtr     = (OS_PEND_DATA *)0;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800412c:	bf00      	nop
 800412e:	3718      	adds	r7, #24
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <OS_PendListRemove1>:
************************************************************************************************************************
*/

void  OS_PendListRemove1 (OS_PEND_LIST  *p_pend_list,
                          OS_PEND_DATA  *p_pend_data)
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
    OS_PEND_DATA  *p_prev;
    OS_PEND_DATA  *p_next;



    if (p_pend_list->NbrEntries == 1u) {
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	891b      	ldrh	r3, [r3, #8]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d106      	bne.n	8004154 <OS_PendListRemove1+0x20>
        p_pend_list->HeadPtr = (OS_PEND_DATA *)0;           /* Only one entry in the pend list                        */
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	601a      	str	r2, [r3, #0]
        p_pend_list->TailPtr = (OS_PEND_DATA *)0;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	605a      	str	r2, [r3, #4]
 8004152:	e027      	b.n	80041a4 <OS_PendListRemove1+0x70>

    } else if (p_pend_data->PrevPtr == (OS_PEND_DATA *)0) { /* See if entry is at the head of the list                */
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d109      	bne.n	8004170 <OS_PendListRemove1+0x3c>
        p_next               = p_pend_data->NextPtr;        /* Yes                                                    */
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	60fb      	str	r3, [r7, #12]
        p_next->PrevPtr      = (OS_PEND_DATA *)0;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]
        p_pend_list->HeadPtr = p_next;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	601a      	str	r2, [r3, #0]
 800416e:	e019      	b.n	80041a4 <OS_PendListRemove1+0x70>

    } else if (p_pend_data->NextPtr == (OS_PEND_DATA *)0) { /* See if entry is at the tail of the list                */
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d109      	bne.n	800418c <OS_PendListRemove1+0x58>
        p_prev               = p_pend_data->PrevPtr;        /* Yes                                                    */
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	60bb      	str	r3, [r7, #8]
        p_prev->NextPtr      = (OS_PEND_DATA *)0;
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	2200      	movs	r2, #0
 8004182:	605a      	str	r2, [r3, #4]
        p_pend_list->TailPtr = p_prev;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	605a      	str	r2, [r3, #4]
 800418a:	e00b      	b.n	80041a4 <OS_PendListRemove1+0x70>

    } else {
        p_prev               = p_pend_data->PrevPtr;        /* Remove from inside the list                            */
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	60bb      	str	r3, [r7, #8]
        p_next               = p_pend_data->NextPtr;
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	60fb      	str	r3, [r7, #12]
        p_prev->NextPtr      = p_next;
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	605a      	str	r2, [r3, #4]
        p_next->PrevPtr      = p_prev;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	68ba      	ldr	r2, [r7, #8]
 80041a2:	601a      	str	r2, [r3, #0]
    }
    p_pend_list->NbrEntries--;                              /* One less entry in the list                             */
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	891b      	ldrh	r3, [r3, #8]
 80041a8:	3b01      	subs	r3, #1
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	811a      	strh	r2, [r3, #8]
    p_pend_data->NextPtr = (OS_PEND_DATA *)0;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	2200      	movs	r2, #0
 80041b4:	605a      	str	r2, [r3, #4]
    p_pend_data->PrevPtr = (OS_PEND_DATA *)0;
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2200      	movs	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]
}
 80041bc:	bf00      	nop
 80041be:	3714      	adds	r7, #20
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bc80      	pop	{r7}
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop

080041c8 <OS_Post>:
void  OS_Post (OS_PEND_OBJ  *p_obj,
               OS_TCB       *p_tcb,
               void         *p_void,
               OS_MSG_SIZE   msg_size,
               CPU_TS        ts)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af02      	add	r7, sp, #8
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
 80041d4:	807b      	strh	r3, [r7, #2]
    switch (p_tcb->TaskState) {
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80041dc:	2b07      	cmp	r3, #7
 80041de:	f200 8086 	bhi.w	80042ee <OS_Post+0x126>
 80041e2:	a201      	add	r2, pc, #4	; (adr r2, 80041e8 <OS_Post+0x20>)
 80041e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e8:	080042ef 	.word	0x080042ef
 80041ec:	080042ef 	.word	0x080042ef
 80041f0:	08004209 	.word	0x08004209
 80041f4:	08004209 	.word	0x08004209
 80041f8:	080042ef 	.word	0x080042ef
 80041fc:	080042ef 	.word	0x080042ef
 8004200:	0800427f 	.word	0x0800427f
 8004204:	0800427f 	.word	0x0800427f
        case OS_TASK_STATE_DLY_SUSPENDED:                        /* Cannot Post a suspended task that was also dly'd  */
             break;

        case OS_TASK_STATE_PEND:
        case OS_TASK_STATE_PEND_TIMEOUT:
             if (p_tcb->PendOn == OS_TASK_PEND_ON_MULTI) {
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800420e:	2b03      	cmp	r3, #3
 8004210:	d109      	bne.n	8004226 <OS_Post+0x5e>
                 OS_Post1(p_obj,                                 /* Indicate which object was posted to               */
 8004212:	887a      	ldrh	r2, [r7, #2]
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	9300      	str	r3, [sp, #0]
 8004218:	4613      	mov	r3, r2
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	68b9      	ldr	r1, [r7, #8]
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f000 f86a 	bl	80042f8 <OS_Post1>
 8004224:	e009      	b.n	800423a <OS_Post+0x72>
                          p_void,
                          msg_size,
                          ts);
             } else {
#if (OS_MSG_EN > 0u)
                 p_tcb->MsgPtr  = p_void;                        /* Deposit message in OS_TCB of task waiting         */
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	659a      	str	r2, [r3, #88]	; 0x58
                 p_tcb->MsgSize = msg_size;                      /* ... assuming posting a message                    */
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	887a      	ldrh	r2, [r7, #2]
 8004230:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
#endif
                 p_tcb->TS      = ts;
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	69ba      	ldr	r2, [r7, #24]
 8004238:	649a      	str	r2, [r3, #72]	; 0x48
             }
             if (p_obj != (OS_PEND_OBJ *)0) {
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d006      	beq.n	800424e <OS_Post+0x86>
                 OS_PendListRemove(p_tcb);                       /* Remove task from wait list(s)                     */
 8004240:	68b8      	ldr	r0, [r7, #8]
 8004242:	f7ff ff4d 	bl	80040e0 <OS_PendListRemove>
#if OS_CFG_DBG_EN > 0u
                 OS_PendDbgNameRemove(p_obj,
 8004246:	68b9      	ldr	r1, [r7, #8]
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f7ff fe73 	bl	8003f34 <OS_PendDbgNameRemove>
                                      p_tcb);
#endif
             }
             if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT) {
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004254:	2b03      	cmp	r3, #3
 8004256:	d102      	bne.n	800425e <OS_Post+0x96>
                 OS_TickListRemove(p_tcb);                       /* Remove from tick list                             */
 8004258:	68b8      	ldr	r0, [r7, #8]
 800425a:	f000 fbab 	bl	80049b4 <OS_TickListRemove>
             }
             OS_RdyListInsert(p_tcb);                            /* Insert the task in the ready list                 */
 800425e:	68b8      	ldr	r0, [r7, #8]
 8004260:	f000 f89e 	bl	80043a0 <OS_RdyListInsert>
             p_tcb->TaskState  = OS_TASK_STATE_RDY;
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             p_tcb->PendStatus = OS_STATUS_PEND_OK;              /* Clear pend status                                 */
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
             p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;        /* Indicate no longer pending                        */
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
             break;
 800427c:	e038      	b.n	80042f0 <OS_Post+0x128>

        case OS_TASK_STATE_PEND_SUSPENDED:
        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             if (p_tcb->PendOn == OS_TASK_PEND_ON_MULTI) {
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004284:	2b03      	cmp	r3, #3
 8004286:	d109      	bne.n	800429c <OS_Post+0xd4>
                 OS_Post1(p_obj,                                 /* Indicate which object was posted to               */
 8004288:	887a      	ldrh	r2, [r7, #2]
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	4613      	mov	r3, r2
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	68b9      	ldr	r1, [r7, #8]
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f000 f82f 	bl	80042f8 <OS_Post1>
 800429a:	e009      	b.n	80042b0 <OS_Post+0xe8>
                          p_void,
                          msg_size,
                          ts);
             } else {
#if (OS_MSG_EN > 0u)
                 p_tcb->MsgPtr  = p_void;                        /* Deposit message in OS_TCB of task waiting         */
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	659a      	str	r2, [r3, #88]	; 0x58
                 p_tcb->MsgSize = msg_size;                      /* ... assuming posting a message                    */
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	887a      	ldrh	r2, [r7, #2]
 80042a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
#endif
                 p_tcb->TS      = ts;
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	649a      	str	r2, [r3, #72]	; 0x48
             }
             if (p_obj != (OS_PEND_OBJ *)0) {
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d006      	beq.n	80042c4 <OS_Post+0xfc>
                 OS_PendListRemove(p_tcb);                       /* Remove task from wait list(s)                     */
 80042b6:	68b8      	ldr	r0, [r7, #8]
 80042b8:	f7ff ff12 	bl	80040e0 <OS_PendListRemove>
#if OS_CFG_DBG_EN > 0u
                 OS_PendDbgNameRemove(p_obj,
 80042bc:	68b9      	ldr	r1, [r7, #8]
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f7ff fe38 	bl	8003f34 <OS_PendDbgNameRemove>
                                      p_tcb);
#endif
             }
             if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED) {
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80042ca:	2b07      	cmp	r3, #7
 80042cc:	d102      	bne.n	80042d4 <OS_Post+0x10c>
                 OS_TickListRemove(p_tcb);                       /* Cancel any timeout                                */
 80042ce:	68b8      	ldr	r0, [r7, #8]
 80042d0:	f000 fb70 	bl	80049b4 <OS_TickListRemove>
             }
             p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	2204      	movs	r2, #4
 80042d8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             p_tcb->PendStatus = OS_STATUS_PEND_OK;              /* Clear pend status                                 */
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
             p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;        /* Indicate no longer pending                        */
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
             break;
 80042ec:	e000      	b.n	80042f0 <OS_Post+0x128>

        default:
             break;
 80042ee:	bf00      	nop
    }
}
 80042f0:	bf00      	nop
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <OS_Post1>:
void  OS_Post1 (OS_PEND_OBJ  *p_obj,
                OS_TCB       *p_tcb,
                void         *p_void,
                OS_MSG_SIZE   msg_size,
                CPU_TS        ts)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b087      	sub	sp, #28
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
 8004304:	807b      	strh	r3, [r7, #2]
    OS_OBJ_QTY      n_pend_list;                                    /* Number of pend lists                           */
    OS_PEND_DATA   *p_pend_data;



    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to the first OS_PEND_DATA to remove      */
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430a:	613b      	str	r3, [r7, #16]
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get number of entries in the table             */
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004312:	82fb      	strh	r3, [r7, #22]

    while (n_pend_list > (OS_OBJ_QTY)0) {                           /* Mark posted object in OS_PEND_DATA table       */
 8004314:	e017      	b.n	8004346 <OS_Post1+0x4e>
        if (p_obj == p_pend_data->PendObjPtr) {                     /* Did we find the object posted to?              */
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	429a      	cmp	r2, r3
 800431e:	d10c      	bne.n	800433a <OS_Post1+0x42>
            p_pend_data->RdyObjPtr  = p_obj;                        /* Yes, indicate the object in the .RdyObjPtr     */
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	611a      	str	r2, [r3, #16]
            p_pend_data->RdyMsgPtr  = p_void;                       /*      store the message posted                  */
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	615a      	str	r2, [r3, #20]
            p_pend_data->RdyMsgSize = msg_size;                     /*      store the size of the message posted      */
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	887a      	ldrh	r2, [r7, #2]
 8004330:	831a      	strh	r2, [r3, #24]
            p_pend_data->RdyTS      = ts;                           /*      save the timestamp of the post            */
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	6a3a      	ldr	r2, [r7, #32]
 8004336:	61da      	str	r2, [r3, #28]
            break;
 8004338:	e008      	b.n	800434c <OS_Post1+0x54>
        }
        p_pend_data++;
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	3320      	adds	r3, #32
 800433e:	613b      	str	r3, [r7, #16]
        n_pend_list--;
 8004340:	8afb      	ldrh	r3, [r7, #22]
 8004342:	3b01      	subs	r3, #1
 8004344:	82fb      	strh	r3, [r7, #22]


    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to the first OS_PEND_DATA to remove      */
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get number of entries in the table             */

    while (n_pend_list > (OS_OBJ_QTY)0) {                           /* Mark posted object in OS_PEND_DATA table       */
 8004346:	8afb      	ldrh	r3, [r7, #22]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1e4      	bne.n	8004316 <OS_Post1+0x1e>
            break;
        }
        p_pend_data++;
        n_pend_list--;
    }
}
 800434c:	bf00      	nop
 800434e:	371c      	adds	r7, #28
 8004350:	46bd      	mov	sp, r7
 8004352:	bc80      	pop	{r7}
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop

08004358 <OS_RdyListInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_RdyListInit (void)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
    OS_PRIO       i;
    OS_RDY_LIST  *p_rdy_list;



    for (i = 0u; i < OS_CFG_PRIO_MAX; i++) {                /* Initialize the array of OS_RDY_LIST at each priority   */
 800435e:	2300      	movs	r3, #0
 8004360:	71fb      	strb	r3, [r7, #7]
 8004362:	e013      	b.n	800438c <OS_RdyListInit+0x34>
        p_rdy_list = &OSRdyList[i];
 8004364:	79fa      	ldrb	r2, [r7, #7]
 8004366:	4613      	mov	r3, r2
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	4413      	add	r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	4a0b      	ldr	r2, [pc, #44]	; (800439c <OS_RdyListInit+0x44>)
 8004370:	4413      	add	r3, r2
 8004372:	603b      	str	r3, [r7, #0]
        p_rdy_list->NbrEntries = (OS_OBJ_QTY)0;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	2200      	movs	r2, #0
 8004378:	811a      	strh	r2, [r3, #8]
        p_rdy_list->HeadPtr    = (OS_TCB   *)0;
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	2200      	movs	r2, #0
 800437e:	601a      	str	r2, [r3, #0]
        p_rdy_list->TailPtr    = (OS_TCB   *)0;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	2200      	movs	r2, #0
 8004384:	605a      	str	r2, [r3, #4]
    OS_PRIO       i;
    OS_RDY_LIST  *p_rdy_list;



    for (i = 0u; i < OS_CFG_PRIO_MAX; i++) {                /* Initialize the array of OS_RDY_LIST at each priority   */
 8004386:	79fb      	ldrb	r3, [r7, #7]
 8004388:	3301      	adds	r3, #1
 800438a:	71fb      	strb	r3, [r7, #7]
 800438c:	79fb      	ldrb	r3, [r7, #7]
 800438e:	2b1f      	cmp	r3, #31
 8004390:	d9e8      	bls.n	8004364 <OS_RdyListInit+0xc>
        p_rdy_list = &OSRdyList[i];
        p_rdy_list->NbrEntries = (OS_OBJ_QTY)0;
        p_rdy_list->HeadPtr    = (OS_TCB   *)0;
        p_rdy_list->TailPtr    = (OS_TCB   *)0;
    }
}
 8004392:	bf00      	nop
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	bc80      	pop	{r7}
 800439a:	4770      	bx	lr
 800439c:	2000247c 	.word	0x2000247c

080043a0 <OS_RdyListInsert>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_RdyListInsert (OS_TCB  *p_tcb)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
    OS_PrioInsert(p_tcb->Prio);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 ffda 	bl	8005368 <OS_PrioInsert>
    if (p_tcb->Prio == OSPrioCur) {                         /* Are we readying a task at the same prio?               */
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 80043ba:	4b07      	ldr	r3, [pc, #28]	; (80043d8 <OS_RdyListInsert+0x38>)
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d103      	bne.n	80043ca <OS_RdyListInsert+0x2a>
        OS_RdyListInsertTail(p_tcb);                        /* Yes, insert readied task at the end of the list        */
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f84a 	bl	800445c <OS_RdyListInsertTail>
    }

#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_READY(p_tcb);                         /* Record the event.                                      */
#endif
}
 80043c8:	e002      	b.n	80043d0 <OS_RdyListInsert+0x30>
{
    OS_PrioInsert(p_tcb->Prio);
    if (p_tcb->Prio == OSPrioCur) {                         /* Are we readying a task at the same prio?               */
        OS_RdyListInsertTail(p_tcb);                        /* Yes, insert readied task at the end of the list        */
    } else {
        OS_RdyListInsertHead(p_tcb);                        /* No,  insert readied task at the beginning of the list  */
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f806 	bl	80043dc <OS_RdyListInsertHead>
    }

#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_READY(p_tcb);                         /* Record the event.                                      */
#endif
}
 80043d0:	bf00      	nop
 80043d2:	3708      	adds	r7, #8
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	20002608 	.word	0x20002608

080043dc <OS_RdyListInsertHead>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListInsertHead (OS_TCB  *p_tcb)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
    OS_RDY_LIST  *p_rdy_list;
    OS_TCB       *p_tcb2;



    p_rdy_list = &OSRdyList[p_tcb->Prio];
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80043ea:	461a      	mov	r2, r3
 80043ec:	4613      	mov	r3, r2
 80043ee:	005b      	lsls	r3, r3, #1
 80043f0:	4413      	add	r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4a18      	ldr	r2, [pc, #96]	; (8004458 <OS_RdyListInsertHead+0x7c>)
 80043f6:	4413      	add	r3, r2
 80043f8:	60fb      	str	r3, [r7, #12]
    if (p_rdy_list->NbrEntries == (OS_OBJ_QTY)0) {          /* CASE 0: Insert when there are no entries               */
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	891b      	ldrh	r3, [r3, #8]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10f      	bne.n	8004422 <OS_RdyListInsertHead+0x46>
        p_rdy_list->NbrEntries =  (OS_OBJ_QTY)1;            /*         This is the first entry                        */
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2201      	movs	r2, #1
 8004406:	811a      	strh	r2, [r3, #8]
        p_tcb->NextPtr         =  (OS_TCB   *)0;            /*         No other OS_TCBs in the list                   */
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	60da      	str	r2, [r3, #12]
        p_tcb->PrevPtr         =  (OS_TCB   *)0;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	611a      	str	r2, [r3, #16]
        p_rdy_list->HeadPtr    =  p_tcb;                    /*         Both list pointers point to this OS_TCB        */
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	601a      	str	r2, [r3, #0]
        p_rdy_list->TailPtr    =  p_tcb;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	605a      	str	r2, [r3, #4]
        p_tcb->PrevPtr         = (OS_TCB    *)0;
        p_tcb2                 = p_rdy_list->HeadPtr;       /*         Adjust old head of list's links                */
        p_tcb2->PrevPtr        = p_tcb;
        p_rdy_list->HeadPtr    = p_tcb;
    }
}
 8004420:	e015      	b.n	800444e <OS_RdyListInsertHead+0x72>
        p_tcb->NextPtr         =  (OS_TCB   *)0;            /*         No other OS_TCBs in the list                   */
        p_tcb->PrevPtr         =  (OS_TCB   *)0;
        p_rdy_list->HeadPtr    =  p_tcb;                    /*         Both list pointers point to this OS_TCB        */
        p_rdy_list->TailPtr    =  p_tcb;
    } else {                                                /* CASE 1: Insert BEFORE the current head of list         */
        p_rdy_list->NbrEntries++;                           /*         One more OS_TCB in the list                    */
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	891b      	ldrh	r3, [r3, #8]
 8004426:	3301      	adds	r3, #1
 8004428:	b29a      	uxth	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	811a      	strh	r2, [r3, #8]
        p_tcb->NextPtr         = p_rdy_list->HeadPtr;       /*         Adjust new OS_TCBs links                       */
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	60da      	str	r2, [r3, #12]
        p_tcb->PrevPtr         = (OS_TCB    *)0;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	611a      	str	r2, [r3, #16]
        p_tcb2                 = p_rdy_list->HeadPtr;       /*         Adjust old head of list's links                */
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	60bb      	str	r3, [r7, #8]
        p_tcb2->PrevPtr        = p_tcb;
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	611a      	str	r2, [r3, #16]
        p_rdy_list->HeadPtr    = p_tcb;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	601a      	str	r2, [r3, #0]
    }
}
 800444e:	bf00      	nop
 8004450:	3714      	adds	r7, #20
 8004452:	46bd      	mov	sp, r7
 8004454:	bc80      	pop	{r7}
 8004456:	4770      	bx	lr
 8004458:	2000247c 	.word	0x2000247c

0800445c <OS_RdyListInsertTail>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListInsertTail (OS_TCB  *p_tcb)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
    OS_RDY_LIST  *p_rdy_list;
    OS_TCB       *p_tcb2;



    p_rdy_list = &OSRdyList[p_tcb->Prio];
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800446a:	461a      	mov	r2, r3
 800446c:	4613      	mov	r3, r2
 800446e:	005b      	lsls	r3, r3, #1
 8004470:	4413      	add	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4a18      	ldr	r2, [pc, #96]	; (80044d8 <OS_RdyListInsertTail+0x7c>)
 8004476:	4413      	add	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]
    if (p_rdy_list->NbrEntries == (OS_OBJ_QTY)0) {          /* CASE 0: Insert when there are no entries               */
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	891b      	ldrh	r3, [r3, #8]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10f      	bne.n	80044a2 <OS_RdyListInsertTail+0x46>
        p_rdy_list->NbrEntries  = (OS_OBJ_QTY)1;            /*         This is the first entry                        */
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2201      	movs	r2, #1
 8004486:	811a      	strh	r2, [r3, #8]
        p_tcb->NextPtr          = (OS_TCB   *)0;            /*         No other OS_TCBs in the list                   */
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	60da      	str	r2, [r3, #12]
        p_tcb->PrevPtr          = (OS_TCB   *)0;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	611a      	str	r2, [r3, #16]
        p_rdy_list->HeadPtr     = p_tcb;                    /*         Both list pointers point to this OS_TCB        */
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	601a      	str	r2, [r3, #0]
        p_rdy_list->TailPtr     = p_tcb;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	605a      	str	r2, [r3, #4]
        p_tcb2                  = p_rdy_list->TailPtr;
        p_tcb->PrevPtr          = p_tcb2;
        p_tcb2->NextPtr         = p_tcb;                    /*         Adjust old tail of list's links                */
        p_rdy_list->TailPtr     = p_tcb;
    }
}
 80044a0:	e014      	b.n	80044cc <OS_RdyListInsertTail+0x70>
        p_tcb->NextPtr          = (OS_TCB   *)0;            /*         No other OS_TCBs in the list                   */
        p_tcb->PrevPtr          = (OS_TCB   *)0;
        p_rdy_list->HeadPtr     = p_tcb;                    /*         Both list pointers point to this OS_TCB        */
        p_rdy_list->TailPtr     = p_tcb;
    } else {                                                /* CASE 1: Insert AFTER the current tail of list          */
        p_rdy_list->NbrEntries++;                           /*         One more OS_TCB in the list                    */
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	891b      	ldrh	r3, [r3, #8]
 80044a6:	3301      	adds	r3, #1
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	811a      	strh	r2, [r3, #8]
        p_tcb->NextPtr          = (OS_TCB   *)0;            /*         Adjust new OS_TCBs links                       */
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	60da      	str	r2, [r3, #12]
        p_tcb2                  = p_rdy_list->TailPtr;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	60bb      	str	r3, [r7, #8]
        p_tcb->PrevPtr          = p_tcb2;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	611a      	str	r2, [r3, #16]
        p_tcb2->NextPtr         = p_tcb;                    /*         Adjust old tail of list's links                */
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	60da      	str	r2, [r3, #12]
        p_rdy_list->TailPtr     = p_tcb;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	605a      	str	r2, [r3, #4]
    }
}
 80044cc:	bf00      	nop
 80044ce:	3714      	adds	r7, #20
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bc80      	pop	{r7}
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	2000247c 	.word	0x2000247c

080044dc <OS_RdyListRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListRemove (OS_TCB  *p_tcb)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
    OS_TCB       *p_tcb1;
    OS_TCB       *p_tcb2;



    p_rdy_list = &OSRdyList[p_tcb->Prio];
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80044ea:	461a      	mov	r2, r3
 80044ec:	4613      	mov	r3, r2
 80044ee:	005b      	lsls	r3, r3, #1
 80044f0:	4413      	add	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4a24      	ldr	r2, [pc, #144]	; (8004588 <OS_RdyListRemove+0xac>)
 80044f6:	4413      	add	r3, r2
 80044f8:	617b      	str	r3, [r7, #20]
    p_tcb1     = p_tcb->PrevPtr;                            /* Point to next and previous OS_TCB in the list          */
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	613b      	str	r3, [r7, #16]
    p_tcb2     = p_tcb->NextPtr;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	60fb      	str	r3, [r7, #12]
    if (p_tcb1 == (OS_TCB *)0) {                            /* Was the OS_TCB to remove was at the head?              */
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d11f      	bne.n	800454c <OS_RdyListRemove+0x70>
        if (p_tcb2 == (OS_TCB *)0) {                        /* Yes, was it the only OS_TCB?                           */
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10f      	bne.n	8004532 <OS_RdyListRemove+0x56>
            p_rdy_list->NbrEntries = (OS_OBJ_QTY)0;         /*      Yes, no more entries                              */
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	2200      	movs	r2, #0
 8004516:	811a      	strh	r2, [r3, #8]
            p_rdy_list->HeadPtr    = (OS_TCB   *)0;
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	2200      	movs	r2, #0
 800451c:	601a      	str	r2, [r3, #0]
            p_rdy_list->TailPtr    = (OS_TCB   *)0;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	2200      	movs	r2, #0
 8004522:	605a      	str	r2, [r3, #4]
            OS_PrioRemove(p_tcb->Prio);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800452a:	4618      	mov	r0, r3
 800452c:	f000 ff42 	bl	80053b4 <OS_PrioRemove>
 8004530:	e01f      	b.n	8004572 <OS_RdyListRemove+0x96>
        } else {
            p_rdy_list->NbrEntries--;                       /*      No,  one less entry                               */
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	891b      	ldrh	r3, [r3, #8]
 8004536:	3b01      	subs	r3, #1
 8004538:	b29a      	uxth	r2, r3
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	811a      	strh	r2, [r3, #8]
            p_tcb2->PrevPtr        = (OS_TCB   *)0;         /*           adjust back link of new list head            */
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	611a      	str	r2, [r3, #16]
            p_rdy_list->HeadPtr    = p_tcb2;                /*           adjust OS_RDY_LIST's new head                */
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	601a      	str	r2, [r3, #0]
 800454a:	e012      	b.n	8004572 <OS_RdyListRemove+0x96>
        }
    } else {
        p_rdy_list->NbrEntries--;                           /* No,  one less entry                                    */
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	891b      	ldrh	r3, [r3, #8]
 8004550:	3b01      	subs	r3, #1
 8004552:	b29a      	uxth	r2, r3
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	811a      	strh	r2, [r3, #8]
        p_tcb1->NextPtr = p_tcb2;
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	60da      	str	r2, [r3, #12]
        if (p_tcb2 == (OS_TCB *)0) {
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d103      	bne.n	800456c <OS_RdyListRemove+0x90>
            p_rdy_list->TailPtr = p_tcb1;                   /*      Removing the TCB at the tail, adj the tail ptr    */
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	605a      	str	r2, [r3, #4]
 800456a:	e002      	b.n	8004572 <OS_RdyListRemove+0x96>
        } else {
            p_tcb2->PrevPtr     = p_tcb1;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	611a      	str	r2, [r3, #16]
        }
    }
    p_tcb->PrevPtr = (OS_TCB *)0;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	611a      	str	r2, [r3, #16]
    p_tcb->NextPtr = (OS_TCB *)0;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	60da      	str	r2, [r3, #12]

#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_TASK_SUSPEND(p_tcb);                           /* Record the event.                                      */
#endif
}
 800457e:	bf00      	nop
 8004580:	3718      	adds	r7, #24
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	2000247c 	.word	0x2000247c

0800458c <OS_SchedLockTimeMeasStart>:
************************************************************************************************************************
*/

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
void  OS_SchedLockTimeMeasStart (void)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	af00      	add	r7, sp, #0
    if (OSSchedLockNestingCtr == 1u) {
 8004590:	4b05      	ldr	r3, [pc, #20]	; (80045a8 <OS_SchedLockTimeMeasStart+0x1c>)
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d104      	bne.n	80045a2 <OS_SchedLockTimeMeasStart+0x16>
        OSSchedLockTimeBegin = CPU_TS_TmrRd();
 8004598:	f003 f9e8 	bl	800796c <CPU_TS_TmrRd>
 800459c:	4602      	mov	r2, r0
 800459e:	4b03      	ldr	r3, [pc, #12]	; (80045ac <OS_SchedLockTimeMeasStart+0x20>)
 80045a0:	601a      	str	r2, [r3, #0]
    }
}
 80045a2:	bf00      	nop
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	20002468 	.word	0x20002468
 80045ac:	200026d0 	.word	0x200026d0

080045b0 <OS_SchedLockTimeMeasStop>:




void  OS_SchedLockTimeMeasStop (void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
    CPU_TS_TMR  delta;


    if (OSSchedLockNestingCtr == (OS_NESTING_CTR)0) {       /* Make sure we fully un-nested scheduler lock            */
 80045b6:	4b0f      	ldr	r3, [pc, #60]	; (80045f4 <OS_SchedLockTimeMeasStop+0x44>)
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d116      	bne.n	80045ec <OS_SchedLockTimeMeasStop+0x3c>
        delta = CPU_TS_TmrRd()                              /* Compute the delta time between begin and end           */
 80045be:	f003 f9d5 	bl	800796c <CPU_TS_TmrRd>
 80045c2:	4602      	mov	r2, r0
              - OSSchedLockTimeBegin;
 80045c4:	4b0c      	ldr	r3, [pc, #48]	; (80045f8 <OS_SchedLockTimeMeasStop+0x48>)
 80045c6:	681b      	ldr	r3, [r3, #0]
{
    CPU_TS_TMR  delta;


    if (OSSchedLockNestingCtr == (OS_NESTING_CTR)0) {       /* Make sure we fully un-nested scheduler lock            */
        delta = CPU_TS_TmrRd()                              /* Compute the delta time between begin and end           */
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	607b      	str	r3, [r7, #4]
              - OSSchedLockTimeBegin;
        if (OSSchedLockTimeMax    < delta) {                /* Detect peak value                                      */
 80045cc:	4b0b      	ldr	r3, [pc, #44]	; (80045fc <OS_SchedLockTimeMeasStop+0x4c>)
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d202      	bcs.n	80045dc <OS_SchedLockTimeMeasStop+0x2c>
            OSSchedLockTimeMax    = delta;
 80045d6:	4a09      	ldr	r2, [pc, #36]	; (80045fc <OS_SchedLockTimeMeasStop+0x4c>)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6013      	str	r3, [r2, #0]
        }
        if (OSSchedLockTimeMaxCur < delta) {                /* Detect peak value (for resettable value)               */
 80045dc:	4b08      	ldr	r3, [pc, #32]	; (8004600 <OS_SchedLockTimeMeasStop+0x50>)
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d202      	bcs.n	80045ec <OS_SchedLockTimeMeasStop+0x3c>
            OSSchedLockTimeMaxCur = delta;
 80045e6:	4a06      	ldr	r2, [pc, #24]	; (8004600 <OS_SchedLockTimeMeasStop+0x50>)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6013      	str	r3, [r2, #0]
        }
    }
}
 80045ec:	bf00      	nop
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	20002468 	.word	0x20002468
 80045f8:	200026d0 	.word	0x200026d0
 80045fc:	200028f4 	.word	0x200028f4
 8004600:	200026e4 	.word	0x200026e4

08004604 <OS_TaskBlock>:
************************************************************************************************************************
*/

void  OS_TaskBlock (OS_TCB   *p_tcb,
                    OS_TICK   timeout)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
    if (timeout > (OS_TICK)0) {                             /* Add task to tick list if timeout non zero               */
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d009      	beq.n	8004628 <OS_TaskBlock+0x24>
        OS_TickListInsert(&OSTickListTimeout, p_tcb, timeout);
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	6879      	ldr	r1, [r7, #4]
 8004618:	4809      	ldr	r0, [pc, #36]	; (8004640 <OS_TaskBlock+0x3c>)
 800461a:	f000 f8b1 	bl	8004780 <OS_TickListInsert>
        p_tcb->TaskState = OS_TASK_STATE_PEND_TIMEOUT;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2203      	movs	r2, #3
 8004622:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8004626:	e003      	b.n	8004630 <OS_TaskBlock+0x2c>
    } else {
        p_tcb->TaskState = OS_TASK_STATE_PEND;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2202      	movs	r2, #2
 800462c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    }
    OS_RdyListRemove(p_tcb);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f7ff ff53 	bl	80044dc <OS_RdyListRemove>
}
 8004636:	bf00      	nop
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	200029e4 	.word	0x200029e4

08004644 <OS_TickTask>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TickTask (void  *p_arg)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b088      	sub	sp, #32
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
    OS_ERR  err;
    CPU_TS  ts_delta;
    CPU_TS  ts_delta_dly;
    CPU_TS  ts_delta_timeout;
    CPU_SR_ALLOC();
 800464c:	2300      	movs	r3, #0
 800464e:	61fb      	str	r3, [r7, #28]


    (void)&p_arg;                                               /* Prevent compiler warning                             */

    while (DEF_ON) {
        (void)OSTaskSemPend((OS_TICK  )0,
 8004650:	f107 030e 	add.w	r3, r7, #14
 8004654:	2200      	movs	r2, #0
 8004656:	2100      	movs	r1, #0
 8004658:	2000      	movs	r0, #0
 800465a:	f7fe fa41 	bl	8002ae0 <OSTaskSemPend>
                            (OS_OPT   )OS_OPT_PEND_BLOCKING,
                            (CPU_TS  *)0,
                            (OS_ERR  *)&err);                   /* Wait for signal from tick interrupt                  */
        if (err == OS_ERR_NONE) {
 800465e:	89fb      	ldrh	r3, [r7, #14]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1f5      	bne.n	8004650 <OS_TickTask+0xc>
            OS_CRITICAL_ENTER();
 8004664:	f7fb fe3c 	bl	80002e0 <CPU_SR_Save>
 8004668:	61f8      	str	r0, [r7, #28]
            OSTickCtr++;                                        /* Keep track of the number of ticks                    */
 800466a:	4b0d      	ldr	r3, [pc, #52]	; (80046a0 <OS_TickTask+0x5c>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	3301      	adds	r3, #1
 8004670:	4a0b      	ldr	r2, [pc, #44]	; (80046a0 <OS_TickTask+0x5c>)
 8004672:	6013      	str	r3, [r2, #0]
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
            TRACE_OS_TICK_INCREMENT(OSTickCtr);                 /* Record the event.                                    */
#endif
            OS_CRITICAL_EXIT();
 8004674:	69f8      	ldr	r0, [r7, #28]
 8004676:	f7fb fe37 	bl	80002e8 <CPU_SR_Restore>
            ts_delta_dly     = OS_TickListUpdateDly();
 800467a:	f000 fa05 	bl	8004a88 <OS_TickListUpdateDly>
 800467e:	61b8      	str	r0, [r7, #24]
            ts_delta_timeout = OS_TickListUpdateTimeout();
 8004680:	f000 fa64 	bl	8004b4c <OS_TickListUpdateTimeout>
 8004684:	6178      	str	r0, [r7, #20]
            ts_delta         = ts_delta_dly + ts_delta_timeout; /* Compute total execution time of list updates         */
 8004686:	69ba      	ldr	r2, [r7, #24]
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	4413      	add	r3, r2
 800468c:	613b      	str	r3, [r7, #16]
            if (OSTickTaskTimeMax < ts_delta) {
 800468e:	4b05      	ldr	r3, [pc, #20]	; (80046a4 <OS_TickTask+0x60>)
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	429a      	cmp	r2, r3
 8004696:	d2db      	bcs.n	8004650 <OS_TickTask+0xc>
                OSTickTaskTimeMax = ts_delta;
 8004698:	4a02      	ldr	r2, [pc, #8]	; (80046a4 <OS_TickTask+0x60>)
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	6013      	str	r3, [r2, #0]
            }
        }
    }
 800469e:	e7d7      	b.n	8004650 <OS_TickTask+0xc>
 80046a0:	200028d4 	.word	0x200028d4
 80046a4:	200029c8 	.word	0x200029c8

080046a8 <OS_TickTaskInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TickTaskInit (OS_ERR  *p_err)
{
 80046a8:	b590      	push	{r4, r7, lr}
 80046aa:	b08d      	sub	sp, #52	; 0x34
 80046ac:	af0a      	add	r7, sp, #40	; 0x28
 80046ae:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    OSTickCtr                    = (OS_TICK)0u;                         /* Clear the tick counter                            */
 80046b0:	4b28      	ldr	r3, [pc, #160]	; (8004754 <OS_TickTaskInit+0xac>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	601a      	str	r2, [r3, #0]

    OSTickListDly.TCB_Ptr        = (OS_TCB   *)0;
 80046b6:	4b28      	ldr	r3, [pc, #160]	; (8004758 <OS_TickTaskInit+0xb0>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]
    OSTickListTimeout.TCB_Ptr    = (OS_TCB   *)0;
 80046bc:	4b27      	ldr	r3, [pc, #156]	; (800475c <OS_TickTaskInit+0xb4>)
 80046be:	2200      	movs	r2, #0
 80046c0:	601a      	str	r2, [r3, #0]

#if OS_CFG_DBG_EN > 0u
    OSTickListDly.NbrEntries     = (OS_OBJ_QTY)0;
 80046c2:	4b25      	ldr	r3, [pc, #148]	; (8004758 <OS_TickTaskInit+0xb0>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	809a      	strh	r2, [r3, #4]
    OSTickListDly.NbrUpdated     = (OS_OBJ_QTY)0;
 80046c8:	4b23      	ldr	r3, [pc, #140]	; (8004758 <OS_TickTaskInit+0xb0>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	80da      	strh	r2, [r3, #6]

    OSTickListTimeout.NbrEntries = (OS_OBJ_QTY)0;
 80046ce:	4b23      	ldr	r3, [pc, #140]	; (800475c <OS_TickTaskInit+0xb4>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	809a      	strh	r2, [r3, #4]
    OSTickListTimeout.NbrUpdated = (OS_OBJ_QTY)0;
 80046d4:	4b21      	ldr	r3, [pc, #132]	; (800475c <OS_TickTaskInit+0xb4>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	80da      	strh	r2, [r3, #6]
#endif

                                                                        /* ---------------- CREATE THE TICK TASK ----------- */
    if (OSCfg_TickTaskStkBasePtr == (CPU_STK *)0) {
 80046da:	4b21      	ldr	r3, [pc, #132]	; (8004760 <OS_TickTaskInit+0xb8>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d104      	bne.n	80046ec <OS_TickTaskInit+0x44>
       *p_err = OS_ERR_TICK_STK_INVALID;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f247 2212 	movw	r2, #29202	; 0x7212
 80046e8:	801a      	strh	r2, [r3, #0]
        return;
 80046ea:	e02f      	b.n	800474c <OS_TickTaskInit+0xa4>
    }

    if (OSCfg_TickTaskStkSize < OSCfg_StkSizeMin) {
 80046ec:	4b1d      	ldr	r3, [pc, #116]	; (8004764 <OS_TickTaskInit+0xbc>)
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	4b1d      	ldr	r3, [pc, #116]	; (8004768 <OS_TickTaskInit+0xc0>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d204      	bcs.n	8004702 <OS_TickTaskInit+0x5a>
       *p_err = OS_ERR_TICK_STK_SIZE_INVALID;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f247 2213 	movw	r2, #29203	; 0x7213
 80046fe:	801a      	strh	r2, [r3, #0]
        return;
 8004700:	e024      	b.n	800474c <OS_TickTaskInit+0xa4>
    }

    if (OSCfg_TickTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {                 /* Only one task at the 'Idle Task' priority         */
 8004702:	4b1a      	ldr	r3, [pc, #104]	; (800476c <OS_TickTaskInit+0xc4>)
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	2b1e      	cmp	r3, #30
 8004708:	d904      	bls.n	8004714 <OS_TickTaskInit+0x6c>
       *p_err = OS_ERR_TICK_PRIO_INVALID;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f247 2211 	movw	r2, #29201	; 0x7211
 8004710:	801a      	strh	r2, [r3, #0]
        return;
 8004712:	e01b      	b.n	800474c <OS_TickTaskInit+0xa4>
    }

    OSTaskCreate((OS_TCB     *)&OSTickTaskTCB,
 8004714:	4b15      	ldr	r3, [pc, #84]	; (800476c <OS_TickTaskInit+0xc4>)
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	4a11      	ldr	r2, [pc, #68]	; (8004760 <OS_TickTaskInit+0xb8>)
 800471a:	6812      	ldr	r2, [r2, #0]
 800471c:	4914      	ldr	r1, [pc, #80]	; (8004770 <OS_TickTaskInit+0xc8>)
 800471e:	6809      	ldr	r1, [r1, #0]
 8004720:	4810      	ldr	r0, [pc, #64]	; (8004764 <OS_TickTaskInit+0xbc>)
 8004722:	6800      	ldr	r0, [r0, #0]
 8004724:	687c      	ldr	r4, [r7, #4]
 8004726:	9408      	str	r4, [sp, #32]
 8004728:	240b      	movs	r4, #11
 800472a:	9407      	str	r4, [sp, #28]
 800472c:	2400      	movs	r4, #0
 800472e:	9406      	str	r4, [sp, #24]
 8004730:	2400      	movs	r4, #0
 8004732:	9405      	str	r4, [sp, #20]
 8004734:	2400      	movs	r4, #0
 8004736:	9404      	str	r4, [sp, #16]
 8004738:	9003      	str	r0, [sp, #12]
 800473a:	9102      	str	r1, [sp, #8]
 800473c:	9201      	str	r2, [sp, #4]
 800473e:	9300      	str	r3, [sp, #0]
 8004740:	2300      	movs	r3, #0
 8004742:	4a0c      	ldr	r2, [pc, #48]	; (8004774 <OS_TickTaskInit+0xcc>)
 8004744:	490c      	ldr	r1, [pc, #48]	; (8004778 <OS_TickTaskInit+0xd0>)
 8004746:	480d      	ldr	r0, [pc, #52]	; (800477c <OS_TickTaskInit+0xd4>)
 8004748:	f7fe f89a 	bl	8002880 <OSTaskCreate>
                 (OS_MSG_QTY  )0u,
                 (OS_TICK     )0u,
                 (void       *)0,
                 (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR | OS_OPT_TASK_NO_TLS),
                 (OS_ERR     *)p_err);
}
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	bd90      	pop	{r4, r7, pc}
 8004752:	bf00      	nop
 8004754:	200028d4 	.word	0x200028d4
 8004758:	200029d8 	.word	0x200029d8
 800475c:	200029e4 	.word	0x200029e4
 8004760:	0800ec98 	.word	0x0800ec98
 8004764:	0800eca0 	.word	0x0800eca0
 8004768:	0800ec8c 	.word	0x0800ec8c
 800476c:	0800ec94 	.word	0x0800ec94
 8004770:	0800ec9c 	.word	0x0800ec9c
 8004774:	08004645 	.word	0x08004645
 8004778:	0800eb90 	.word	0x0800eb90
 800477c:	2000260c 	.word	0x2000260c

08004780 <OS_TickListInsert>:
*/

void  OS_TickListInsert (OS_TICK_LIST  *p_list,
                         OS_TCB        *p_tcb,
                         OS_TICK        time)
{
 8004780:	b480      	push	{r7}
 8004782:	b089      	sub	sp, #36	; 0x24
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
    OS_TCB  *p_tcb1;
    OS_TCB  *p_tcb2;
    OS_TICK  remain;


    if (p_list->TCB_Ptr == (OS_TCB *)0) {                               /* Is the list empty?                                */
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d112      	bne.n	80047ba <OS_TickListInsert+0x3a>
        p_tcb->TickRemain  = time;                                      /* Yes, Store time in TCB                            */
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	651a      	str	r2, [r3, #80]	; 0x50
        p_tcb->TickNextPtr = (OS_TCB *)0;
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	2200      	movs	r2, #0
 800479e:	615a      	str	r2, [r3, #20]
        p_tcb->TickPrevPtr = (OS_TCB *)0;
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	2200      	movs	r2, #0
 80047a4:	619a      	str	r2, [r3, #24]
        p_tcb->TickListPtr = (OS_TICK_LIST *)p_list;                    /*      Link to this list                            */
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	61da      	str	r2, [r3, #28]
        p_list->TCB_Ptr    = p_tcb;                                     /*      Point to TCB of task to place in the list    */
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	601a      	str	r2, [r3, #0]
#if OS_CFG_DBG_EN > 0u
        p_list->NbrEntries = 1u;                                        /*      List contains 1 entry                        */
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2201      	movs	r2, #1
 80047b6:	809a      	strh	r2, [r3, #4]
 80047b8:	e074      	b.n	80048a4 <OS_TickListInsert+0x124>
#endif
    } else {
        p_tcb1 = p_list->TCB_Ptr;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	61fb      	str	r3, [r7, #28]
        p_tcb2 = p_list->TCB_Ptr;                                       /* No,  Insert somewhere in the list in delta order  */
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	61bb      	str	r3, [r7, #24]
        remain = time;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	617b      	str	r3, [r7, #20]
        while (p_tcb2 != (OS_TCB *)0) {
 80047ca:	e053      	b.n	8004874 <OS_TickListInsert+0xf4>
            if (remain <= p_tcb2->TickRemain) {
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d344      	bcc.n	8004860 <OS_TickListInsert+0xe0>
                if (p_tcb2->TickPrevPtr == (OS_TCB *)0) {               /*      Insert before the first entry in the list?   */
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d11e      	bne.n	800481c <OS_TickListInsert+0x9c>
                    p_tcb->TickRemain   = remain;                       /*      Yes, Store remaining time                    */                                          
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	651a      	str	r2, [r3, #80]	; 0x50
                    p_tcb->TickPrevPtr  = (OS_TCB *)0;
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	2200      	movs	r2, #0
 80047e8:	619a      	str	r2, [r3, #24]
                    p_tcb->TickNextPtr  = p_tcb2;    
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	615a      	str	r2, [r3, #20]
                    p_tcb->TickListPtr  = (OS_TICK_LIST *)p_list;       /*           Link TCB to this list                   */
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	61da      	str	r2, [r3, #28]
                    p_tcb2->TickRemain -= remain;                       /*           Reduce time of next entry in the list   */
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	1ad2      	subs	r2, r2, r3
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	651a      	str	r2, [r3, #80]	; 0x50
                    p_tcb2->TickPrevPtr = p_tcb;
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	619a      	str	r2, [r3, #24]
                    p_list->TCB_Ptr     = p_tcb;                        /*           Add TCB to the list                     */
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	601a      	str	r2, [r3, #0]
#if OS_CFG_DBG_EN > 0u
                    p_list->NbrEntries++;                               /*           List contains an extra entry            */
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	889b      	ldrh	r3, [r3, #4]
 8004812:	3301      	adds	r3, #1
 8004814:	b29a      	uxth	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	809a      	strh	r2, [r3, #4]
                    p_tcb1->TickNextPtr = p_tcb;
#if OS_CFG_DBG_EN > 0u
                    p_list->NbrEntries++;                               /*           List contains an extra entry            */
#endif
                }
                return;
 800481a:	e043      	b.n	80048a4 <OS_TickListInsert+0x124>
                    p_list->TCB_Ptr     = p_tcb;                        /*           Add TCB to the list                     */
#if OS_CFG_DBG_EN > 0u
                    p_list->NbrEntries++;                               /*           List contains an extra entry            */
#endif
                } else {                                                /*      No,  Insert somewhere further in the list    */
                    p_tcb1              = p_tcb2->TickPrevPtr;
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	61fb      	str	r3, [r7, #28]
                    p_tcb->TickRemain   = remain;                       /*           Store remaining time                    */
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	651a      	str	r2, [r3, #80]	; 0x50
                    p_tcb->TickPrevPtr  = p_tcb1;
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	69fa      	ldr	r2, [r7, #28]
 800482c:	619a      	str	r2, [r3, #24]
                    p_tcb->TickNextPtr  = p_tcb2;    
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	69ba      	ldr	r2, [r7, #24]
 8004832:	615a      	str	r2, [r3, #20]
                    p_tcb->TickListPtr  = (OS_TICK_LIST *)p_list;       /*           TCB points to this list                 */
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	61da      	str	r2, [r3, #28]
                    p_tcb2->TickRemain -= remain;                       /*           Reduce time of next entry in the list   */
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	1ad2      	subs	r2, r2, r3
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	651a      	str	r2, [r3, #80]	; 0x50
                    p_tcb2->TickPrevPtr = p_tcb;
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	68ba      	ldr	r2, [r7, #8]
 800484a:	619a      	str	r2, [r3, #24]
                    p_tcb1->TickNextPtr = p_tcb;
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	615a      	str	r2, [r3, #20]
#if OS_CFG_DBG_EN > 0u
                    p_list->NbrEntries++;                               /*           List contains an extra entry            */
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	889b      	ldrh	r3, [r3, #4]
 8004856:	3301      	adds	r3, #1
 8004858:	b29a      	uxth	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	809a      	strh	r2, [r3, #4]
#endif
                }
                return;
 800485e:	e021      	b.n	80048a4 <OS_TickListInsert+0x124>
            } else {
                remain -= p_tcb2->TickRemain;                           /*           Point to the next TCB in the list       */
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	617b      	str	r3, [r7, #20]
                p_tcb1  = p_tcb2;
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	61fb      	str	r3, [r7, #28]
                p_tcb2  = p_tcb2->TickNextPtr;
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	61bb      	str	r3, [r7, #24]
#endif
    } else {
        p_tcb1 = p_list->TCB_Ptr;
        p_tcb2 = p_list->TCB_Ptr;                                       /* No,  Insert somewhere in the list in delta order  */
        remain = time;
        while (p_tcb2 != (OS_TCB *)0) {
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1a8      	bne.n	80047cc <OS_TickListInsert+0x4c>
                remain -= p_tcb2->TickRemain;                           /*           Point to the next TCB in the list       */
                p_tcb1  = p_tcb2;
                p_tcb2  = p_tcb2->TickNextPtr;
            }                 
        }
        p_tcb->TickRemain   = remain;                       
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	651a      	str	r2, [r3, #80]	; 0x50
        p_tcb->TickPrevPtr  = p_tcb1;
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	69fa      	ldr	r2, [r7, #28]
 8004884:	619a      	str	r2, [r3, #24]
        p_tcb->TickNextPtr  = (OS_TCB *)0;    
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	2200      	movs	r2, #0
 800488a:	615a      	str	r2, [r3, #20]
        p_tcb->TickListPtr  = (OS_TICK_LIST *)p_list;                   /*           Link the list to the TCB                */
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	61da      	str	r2, [r3, #28]
        p_tcb1->TickNextPtr = p_tcb;
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	615a      	str	r2, [r3, #20]
#if OS_CFG_DBG_EN > 0u
        p_list->NbrEntries++;                                           /*           List contains an extra entry            */
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	889b      	ldrh	r3, [r3, #4]
 800489c:	3301      	adds	r3, #1
 800489e:	b29a      	uxth	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	809a      	strh	r2, [r3, #4]
#endif
    }
}
 80048a4:	3724      	adds	r7, #36	; 0x24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bc80      	pop	{r7}
 80048aa:	4770      	bx	lr

080048ac <OS_TickListInsertDly>:

void  OS_TickListInsertDly (OS_TCB   *p_tcb,
                            OS_TICK   time,
                            OS_OPT    opt,
                            OS_ERR   *p_err)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	603b      	str	r3, [r7, #0]
 80048b8:	4613      	mov	r3, r2
 80048ba:	80fb      	strh	r3, [r7, #6]
    OS_TICK   remain;



    if (opt == OS_OPT_TIME_MATCH) {                                     /* MATCH to absolute OSTickCtr value mode            */
 80048bc:	88fb      	ldrh	r3, [r7, #6]
 80048be:	2b04      	cmp	r3, #4
 80048c0:	d113      	bne.n	80048ea <OS_TickListInsertDly+0x3e>
        remain = time - OSTickCtr;
 80048c2:	4b3a      	ldr	r3, [pc, #232]	; (80049ac <OS_TickListInsertDly+0x100>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	617b      	str	r3, [r7, #20]
        if ((remain > OS_TICK_TH_RDY) ||                                /* If delay already occurred, ...                    */
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048d2:	d802      	bhi.n	80048da <OS_TickListInsertDly+0x2e>
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d158      	bne.n	800498c <OS_TickListInsertDly+0xe0>
            (remain == (OS_TICK)0u)) {
            p_tcb->TickRemain = (OS_TICK)0u;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	651a      	str	r2, [r3, #80]	; 0x50
           *p_err             =  OS_ERR_TIME_ZERO_DLY;                  /* ... do NOT delay.                                 */
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	f247 227e 	movw	r2, #29310	; 0x727e
 80048e6:	801a      	strh	r2, [r3, #0]
            return;
 80048e8:	e05c      	b.n	80049a4 <OS_TickListInsertDly+0xf8>
        }

    } else if (opt == OS_OPT_TIME_PERIODIC) {                           /* PERIODIC mode.                                    */
 80048ea:	88fb      	ldrh	r3, [r7, #6]
 80048ec:	2b08      	cmp	r3, #8
 80048ee:	d13f      	bne.n	8004970 <OS_TickListInsertDly+0xc4>
        if ((OSTickCtr - p_tcb->TickCtrPrev) > time) {
 80048f0:	4b2e      	ldr	r3, [pc, #184]	; (80049ac <OS_TickListInsertDly+0x100>)
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f8:	1ad2      	subs	r2, r2, r3
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d908      	bls.n	8004912 <OS_TickListInsertDly+0x66>
            remain             = time;                                  /* ... first time we load .TickCtrPrev               */
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	617b      	str	r3, [r7, #20]
            p_tcb->TickCtrPrev = OSTickCtr + time;
 8004904:	4b29      	ldr	r3, [pc, #164]	; (80049ac <OS_TickListInsertDly+0x100>)
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	441a      	add	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	655a      	str	r2, [r3, #84]	; 0x54
 8004910:	e03c      	b.n	800498c <OS_TickListInsertDly+0xe0>
        } else {
            remain = time - (OSTickCtr - p_tcb->TickCtrPrev);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004916:	4b25      	ldr	r3, [pc, #148]	; (80049ac <OS_TickListInsertDly+0x100>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	1ad2      	subs	r2, r2, r3
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	4413      	add	r3, r2
 8004920:	617b      	str	r3, [r7, #20]
            if ((remain > OS_TICK_TH_RDY) ||                            /* If delay time has already passed, ...             */
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004928:	d802      	bhi.n	8004930 <OS_TickListInsertDly+0x84>
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d118      	bne.n	8004962 <OS_TickListInsertDly+0xb6>
                (remain == (OS_TICK)0u)) {
                p_tcb->TickCtrPrev += time + time * ((OSTickCtr - p_tcb->TickCtrPrev) / time); /* Try to recover the period  */
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004934:	4b1d      	ldr	r3, [pc, #116]	; (80049ac <OS_TickListInsertDly+0x100>)
 8004936:	6819      	ldr	r1, [r3, #0]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800493c:	1ac9      	subs	r1, r1, r3
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	fbb1 f3f3 	udiv	r3, r1, r3
 8004944:	3301      	adds	r3, #1
 8004946:	68b9      	ldr	r1, [r7, #8]
 8004948:	fb01 f303 	mul.w	r3, r1, r3
 800494c:	441a      	add	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	655a      	str	r2, [r3, #84]	; 0x54
                p_tcb->TickRemain   = (OS_TICK)0u;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	651a      	str	r2, [r3, #80]	; 0x50
               *p_err               =  OS_ERR_TIME_ZERO_DLY;            /* ... do NOT delay.                                 */
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	f247 227e 	movw	r2, #29310	; 0x727e
 800495e:	801a      	strh	r2, [r3, #0]
                return;
 8004960:	e020      	b.n	80049a4 <OS_TickListInsertDly+0xf8>
            }
            p_tcb->TickCtrPrev += time;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	441a      	add	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	655a      	str	r2, [r3, #84]	; 0x54
 800496e:	e00d      	b.n	800498c <OS_TickListInsertDly+0xe0>
        }

    } else if (time > (OS_TICK)0u) {                                    /* RELATIVE time delay mode                          */
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d002      	beq.n	800497c <OS_TickListInsertDly+0xd0>
        remain = time;
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	617b      	str	r3, [r7, #20]
 800497a:	e007      	b.n	800498c <OS_TickListInsertDly+0xe0>

    } else {                                                            /* Zero time delay; ...                              */
        p_tcb->TickRemain = (OS_TICK)0u;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	651a      	str	r2, [r3, #80]	; 0x50
       *p_err             =  OS_ERR_TIME_ZERO_DLY;                      /* ... do NOT delay.                                 */
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	f247 227e 	movw	r2, #29310	; 0x727e
 8004988:	801a      	strh	r2, [r3, #0]
        return;
 800498a:	e00b      	b.n	80049a4 <OS_TickListInsertDly+0xf8>
    }

    p_tcb->TaskState = OS_TASK_STATE_DLY;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    OS_TickListInsert(&OSTickListDly, p_tcb, remain);
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	68f9      	ldr	r1, [r7, #12]
 8004998:	4805      	ldr	r0, [pc, #20]	; (80049b0 <OS_TickListInsertDly+0x104>)
 800499a:	f7ff fef1 	bl	8004780 <OS_TickListInsert>

   *p_err = OS_ERR_NONE;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	2200      	movs	r2, #0
 80049a2:	801a      	strh	r2, [r3, #0]
}
 80049a4:	3718      	adds	r7, #24
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	200028d4 	.word	0x200028d4
 80049b0:	200029d8 	.word	0x200029d8

080049b4 <OS_TickListRemove>:
*              2) This function is assumed to be called with interrupts disabled.
************************************************************************************************************************
*/

void  OS_TickListRemove (OS_TCB  *p_tcb)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b087      	sub	sp, #28
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
    OS_TICK_LIST  *p_list;
    OS_TCB        *p_tcb1;
    OS_TCB        *p_tcb2;


    p_list = (OS_TICK_LIST *)p_tcb->TickListPtr;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	69db      	ldr	r3, [r3, #28]
 80049c0:	617b      	str	r3, [r7, #20]
    p_tcb1  = p_tcb->TickPrevPtr;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	613b      	str	r3, [r7, #16]
    p_tcb2  = p_tcb->TickNextPtr;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	695b      	ldr	r3, [r3, #20]
 80049cc:	60fb      	str	r3, [r7, #12]
    if (p_tcb1 == (OS_TCB *)0) {
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d12c      	bne.n	8004a2e <OS_TickListRemove+0x7a>
        if (p_tcb2 == (OS_TCB *)0) {                                    /* Remove ONLY entry in the list?                    */
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10c      	bne.n	80049f4 <OS_TickListRemove+0x40>
            p_list->TCB_Ptr    = (OS_TCB        *)0;
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	2200      	movs	r2, #0
 80049de:	601a      	str	r2, [r3, #0]
#if OS_CFG_DBG_EN > 0u
            p_list->NbrEntries = (OS_OBJ_QTY    )0u;
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	2200      	movs	r2, #0
 80049e4:	809a      	strh	r2, [r3, #4]
#endif
            p_tcb->TickRemain   = (OS_TICK       )0u;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	651a      	str	r2, [r3, #80]	; 0x50
            p_tcb->TickListPtr  = (OS_TICK_LIST *)0;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	61da      	str	r2, [r3, #28]
#endif
        p_tcb->TickNextPtr  = (OS_TCB       *)0;
        p_tcb->TickRemain   = (OS_TICK       )0u;
        p_tcb->TickListPtr  = (OS_TICK_LIST *)0;
    }
}
 80049f2:	e03e      	b.n	8004a72 <OS_TickListRemove+0xbe>
            p_list->NbrEntries = (OS_OBJ_QTY    )0u;
#endif
            p_tcb->TickRemain   = (OS_TICK       )0u;
            p_tcb->TickListPtr  = (OS_TICK_LIST *)0;
        } else {
            p_tcb2->TickPrevPtr = (OS_TCB       *)0;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	619a      	str	r2, [r3, #24]
            p_tcb2->TickRemain += p_tcb->TickRemain;                    /* Add back the ticks to the delta                   */
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a02:	441a      	add	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	651a      	str	r2, [r3, #80]	; 0x50
            p_list->TCB_Ptr    = p_tcb2;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	601a      	str	r2, [r3, #0]
#if OS_CFG_DBG_EN > 0u
            p_list->NbrEntries--;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	889b      	ldrh	r3, [r3, #4]
 8004a12:	3b01      	subs	r3, #1
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	809a      	strh	r2, [r3, #4]
#endif
            p_tcb->TickNextPtr  = (OS_TCB       *)0;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	615a      	str	r2, [r3, #20]
            p_tcb->TickRemain   = (OS_TICK       )0u;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	651a      	str	r2, [r3, #80]	; 0x50
            p_tcb->TickListPtr  = (OS_TICK_LIST *)0;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	61da      	str	r2, [r3, #28]
#endif
        p_tcb->TickNextPtr  = (OS_TCB       *)0;
        p_tcb->TickRemain   = (OS_TICK       )0u;
        p_tcb->TickListPtr  = (OS_TICK_LIST *)0;
    }
}
 8004a2c:	e021      	b.n	8004a72 <OS_TickListRemove+0xbe>
            p_tcb->TickNextPtr  = (OS_TCB       *)0;
            p_tcb->TickRemain   = (OS_TICK       )0u;
            p_tcb->TickListPtr  = (OS_TICK_LIST *)0;
        }
    } else {
        p_tcb1->TickNextPtr = p_tcb2;    
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	615a      	str	r2, [r3, #20]
        if (p_tcb2 != (OS_TCB *)0) {
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d009      	beq.n	8004a4e <OS_TickListRemove+0x9a>
            p_tcb2->TickPrevPtr = p_tcb1;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	619a      	str	r2, [r3, #24]
            p_tcb2->TickRemain += p_tcb->TickRemain;                    /* Add back the ticks to the delta list              */
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a48:	441a      	add	r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	651a      	str	r2, [r3, #80]	; 0x50
        }
        p_tcb->TickPrevPtr  = (OS_TCB       *)0;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	619a      	str	r2, [r3, #24]
#if OS_CFG_DBG_EN > 0u
        p_list->NbrEntries--;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	889b      	ldrh	r3, [r3, #4]
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	809a      	strh	r2, [r3, #4]
#endif
        p_tcb->TickNextPtr  = (OS_TCB       *)0;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	615a      	str	r2, [r3, #20]
        p_tcb->TickRemain   = (OS_TICK       )0u;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	651a      	str	r2, [r3, #80]	; 0x50
        p_tcb->TickListPtr  = (OS_TICK_LIST *)0;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	61da      	str	r2, [r3, #28]
    }
}
 8004a72:	bf00      	nop
 8004a74:	371c      	adds	r7, #28
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bc80      	pop	{r7}
 8004a7a:	4770      	bx	lr

08004a7c <OS_TickListResetPeak>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TickListResetPeak (void)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
#if OS_CFG_DBG_EN > 0u
#endif
}
 8004a80:	bf00      	nop
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bc80      	pop	{r7}
 8004a86:	4770      	bx	lr

08004a88 <OS_TickListUpdateDly>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

static  CPU_TS  OS_TickListUpdateDly (void)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af00      	add	r7, sp, #0
    CPU_TS        ts_start;
    CPU_TS        ts_delta_dly;
#if OS_CFG_DBG_EN > 0u
    OS_OBJ_QTY    nbr_updated;
#endif
    CPU_SR_ALLOC();
 8004a8e:	2300      	movs	r3, #0
 8004a90:	60fb      	str	r3, [r7, #12]

                                                              
                                                                        
    OS_CRITICAL_ENTER();
 8004a92:	f7fb fc25 	bl	80002e0 <CPU_SR_Save>
 8004a96:	60f8      	str	r0, [r7, #12]
    ts_start    = OS_TS_GET();
 8004a98:	f002 ff68 	bl	800796c <CPU_TS_TmrRd>
 8004a9c:	60b8      	str	r0, [r7, #8]
#if OS_CFG_DBG_EN > 0u
    nbr_updated = (OS_OBJ_QTY)0u;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	827b      	strh	r3, [r7, #18]
#endif
    p_list      = &OSTickListDly;
 8004aa2:	4b29      	ldr	r3, [pc, #164]	; (8004b48 <OS_TickListUpdateDly+0xc0>)
 8004aa4:	607b      	str	r3, [r7, #4]
    p_tcb       = p_list->TCB_Ptr;                                      
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	617b      	str	r3, [r7, #20]
    if (p_tcb != (OS_TCB *)0) {
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d039      	beq.n	8004b26 <OS_TickListUpdateDly+0x9e>
        p_tcb->TickRemain--;
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ab6:	1e5a      	subs	r2, r3, #1
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	651a      	str	r2, [r3, #80]	; 0x50
        while (p_tcb->TickRemain == 0u) {
 8004abc:	e02f      	b.n	8004b1e <OS_TickListUpdateDly+0x96>
#if OS_CFG_DBG_EN > 0u
            nbr_updated++;											    /* Keep track of the number of TCBs updated          */
 8004abe:	8a7b      	ldrh	r3, [r7, #18]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	827b      	strh	r3, [r7, #18]
#endif
            if (p_tcb->TaskState == OS_TASK_STATE_DLY) {
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d107      	bne.n	8004ade <OS_TickListUpdateDly+0x56>
                p_tcb->TaskState = OS_TASK_STATE_RDY;
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                OS_RdyListInsert(p_tcb);                                /* Insert the task in the ready list                 */
 8004ad6:	6978      	ldr	r0, [r7, #20]
 8004ad8:	f7ff fc62 	bl	80043a0 <OS_RdyListInsert>
 8004adc:	e008      	b.n	8004af0 <OS_TickListUpdateDly+0x68>
            } else if (p_tcb->TaskState == OS_TASK_STATE_DLY_SUSPENDED) {
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004ae4:	2b05      	cmp	r3, #5
 8004ae6:	d103      	bne.n	8004af0 <OS_TickListUpdateDly+0x68>
                p_tcb->TaskState = OS_TASK_STATE_SUSPENDED;
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	2204      	movs	r2, #4
 8004aec:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
            }

            p_list->TCB_Ptr = p_tcb->TickNextPtr;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	695a      	ldr	r2, [r3, #20]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	601a      	str	r2, [r3, #0]
            p_tcb           = p_list->TCB_Ptr;                          /* Get 'p_tcb' again for loop                        */
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	617b      	str	r3, [r7, #20]
            if (p_tcb == (OS_TCB *)0) {
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d103      	bne.n	8004b0c <OS_TickListUpdateDly+0x84>
#if OS_CFG_DBG_EN > 0u
                p_list->NbrEntries = (OS_OBJ_QTY)0u;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	809a      	strh	r2, [r3, #4]
#endif
                break;
 8004b0a:	e00c      	b.n	8004b26 <OS_TickListUpdateDly+0x9e>
            } else {
#if OS_CFG_DBG_EN > 0u
                p_list->NbrEntries--;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	889b      	ldrh	r3, [r3, #4]
 8004b10:	3b01      	subs	r3, #1
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	809a      	strh	r2, [r3, #4]
#endif
                p_tcb->TickPrevPtr = (OS_TCB *)0;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	619a      	str	r2, [r3, #24]
#endif
    p_list      = &OSTickListDly;
    p_tcb       = p_list->TCB_Ptr;                                      
    if (p_tcb != (OS_TCB *)0) {
        p_tcb->TickRemain--;
        while (p_tcb->TickRemain == 0u) {
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d0cb      	beq.n	8004abe <OS_TickListUpdateDly+0x36>
                p_tcb->TickPrevPtr = (OS_TCB *)0;
            }
        }
    }
#if OS_CFG_DBG_EN > 0u
    p_list->NbrUpdated = nbr_updated;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	8a7a      	ldrh	r2, [r7, #18]
 8004b2a:	80da      	strh	r2, [r3, #6]
#endif
    ts_delta_dly       = OS_TS_GET() - ts_start;                        /* Measure execution time of the update              */
 8004b2c:	f002 ff1e 	bl	800796c <CPU_TS_TmrRd>
 8004b30:	4602      	mov	r2, r0
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	603b      	str	r3, [r7, #0]
    OS_CRITICAL_EXIT();
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f7fb fbd5 	bl	80002e8 <CPU_SR_Restore>

    return (ts_delta_dly);
 8004b3e:	683b      	ldr	r3, [r7, #0]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3718      	adds	r7, #24
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	200029d8 	.word	0x200029d8

08004b4c <OS_TickListUpdateTimeout>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

static  CPU_TS  OS_TickListUpdateTimeout (void)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b088      	sub	sp, #32
 8004b50:	af00      	add	r7, sp, #0
#endif
#if OS_CFG_MUTEX_EN > 0u
    OS_TCB       *p_tcb_owner;
    OS_PRIO       prio_new;
#endif
    CPU_SR_ALLOC();
 8004b52:	2300      	movs	r3, #0
 8004b54:	613b      	str	r3, [r7, #16]

                                                              
                                                                        
    OS_CRITICAL_ENTER();                                                /* ======= UPDATE TASKS WAITING WITH TIMEOUT ======= */
 8004b56:	f7fb fbc3 	bl	80002e0 <CPU_SR_Save>
 8004b5a:	6138      	str	r0, [r7, #16]
    ts_start    = OS_TS_GET();
 8004b5c:	f002 ff06 	bl	800796c <CPU_TS_TmrRd>
 8004b60:	60f8      	str	r0, [r7, #12]
#if OS_CFG_DBG_EN > 0u
    nbr_updated = (OS_OBJ_QTY)0u;
 8004b62:	2300      	movs	r3, #0
 8004b64:	837b      	strh	r3, [r7, #26]
#endif
    p_list      = &OSTickListTimeout;
 8004b66:	4b51      	ldr	r3, [pc, #324]	; (8004cac <OS_TickListUpdateTimeout+0x160>)
 8004b68:	60bb      	str	r3, [r7, #8]
    p_tcb       = p_list->TCB_Ptr;                                  
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	61fb      	str	r3, [r7, #28]
    if (p_tcb != (OS_TCB *)0) {
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f000 8089 	beq.w	8004c8a <OS_TickListUpdateTimeout+0x13e>
        p_tcb->TickRemain--;
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b7c:	1e5a      	subs	r2, r3, #1
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	651a      	str	r2, [r3, #80]	; 0x50
        while (p_tcb->TickRemain == 0u) {
 8004b82:	e07d      	b.n	8004c80 <OS_TickListUpdateTimeout+0x134>
#if OS_CFG_DBG_EN > 0u
            nbr_updated++;
 8004b84:	8b7b      	ldrh	r3, [r7, #26]
 8004b86:	3301      	adds	r3, #1
 8004b88:	837b      	strh	r3, [r7, #26]
#endif

#if OS_CFG_MUTEX_EN > 0u
            p_tcb_owner = (OS_TCB *)0;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	617b      	str	r3, [r7, #20]
            if (p_tcb->PendOn == OS_TASK_PEND_ON_MUTEX) {
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b94:	2b04      	cmp	r3, #4
 8004b96:	d104      	bne.n	8004ba2 <OS_TickListUpdateTimeout+0x56>
                p_tcb_owner = ((OS_MUTEX *)p_tcb->PendDataTblPtr->PendObjPtr)->OwnerTCBPtr;
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba0:	617b      	str	r3, [r7, #20]
            }
#endif

#if (OS_MSG_EN > 0u)
            p_tcb->MsgPtr  = (void      *)0;
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	659a      	str	r2, [r3, #88]	; 0x58
            p_tcb->MsgSize = (OS_MSG_SIZE)0u;
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
#endif
            p_tcb->TS      = OS_TS_GET();
 8004bb0:	f002 fedc 	bl	800796c <CPU_TS_TmrRd>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	649a      	str	r2, [r3, #72]	; 0x48
            OS_PendListRemove(p_tcb);                                   /* Remove from wait list                             */
 8004bba:	69f8      	ldr	r0, [r7, #28]
 8004bbc:	f7ff fa90 	bl	80040e0 <OS_PendListRemove>
            if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT) {
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004bc6:	2b03      	cmp	r3, #3
 8004bc8:	d107      	bne.n	8004bda <OS_TickListUpdateTimeout+0x8e>
                OS_RdyListInsert(p_tcb);                                /* Insert the task in the ready list                 */
 8004bca:	69f8      	ldr	r0, [r7, #28]
 8004bcc:	f7ff fbe8 	bl	80043a0 <OS_RdyListInsert>
                p_tcb->TaskState  = OS_TASK_STATE_RDY;
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8004bd8:	e008      	b.n	8004bec <OS_TickListUpdateTimeout+0xa0>
            } else if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED) {
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004be0:	2b07      	cmp	r3, #7
 8004be2:	d103      	bne.n	8004bec <OS_TickListUpdateTimeout+0xa0>

                p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	2204      	movs	r2, #4
 8004be8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
            }
            p_tcb->PendStatus = OS_STATUS_PEND_TIMEOUT;                 /* Indicate pend timed out                           */
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	2203      	movs	r2, #3
 8004bf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;                /* Indicate no longer pending                        */
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if OS_CFG_MUTEX_EN > 0u
            if(p_tcb_owner != (OS_TCB *)0) {
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d027      	beq.n	8004c52 <OS_TickListUpdateTimeout+0x106>
                if ((p_tcb_owner->Prio != p_tcb_owner->BasePrio) &&
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d01f      	beq.n	8004c52 <OS_TickListUpdateTimeout+0x106>
                    (p_tcb_owner->Prio == p_tcb->Prio)) {               /* Has the owner inherited a priority?               */
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
            p_tcb->PendStatus = OS_STATUS_PEND_TIMEOUT;                 /* Indicate pend timed out                           */
            p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;                /* Indicate no longer pending                        */

#if OS_CFG_MUTEX_EN > 0u
            if(p_tcb_owner != (OS_TCB *)0) {
                if ((p_tcb_owner->Prio != p_tcb_owner->BasePrio) &&
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d117      	bne.n	8004c52 <OS_TickListUpdateTimeout+0x106>
                    (p_tcb_owner->Prio == p_tcb->Prio)) {               /* Has the owner inherited a priority?               */
                    prio_new = OS_MutexGrpPrioFindHighest(p_tcb_owner);
 8004c22:	6978      	ldr	r0, [r7, #20]
 8004c24:	f000 ff3a 	bl	8005a9c <OS_MutexGrpPrioFindHighest>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	71fb      	strb	r3, [r7, #7]
                    prio_new = prio_new > p_tcb_owner->BasePrio ? p_tcb_owner->BasePrio : prio_new;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8004c32:	79fb      	ldrb	r3, [r7, #7]
 8004c34:	4293      	cmp	r3, r2
 8004c36:	bf28      	it	cs
 8004c38:	4613      	movcs	r3, r2
 8004c3a:	71fb      	strb	r3, [r7, #7]
                    if(prio_new != p_tcb_owner->Prio) {
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8004c42:	79fa      	ldrb	r2, [r7, #7]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d004      	beq.n	8004c52 <OS_TickListUpdateTimeout+0x106>
                        OS_TaskChangePrio(p_tcb_owner, prio_new);
 8004c48:	79fb      	ldrb	r3, [r7, #7]
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	6978      	ldr	r0, [r7, #20]
 8004c4e:	f7fe fbcb 	bl	80033e8 <OS_TaskChangePrio>
                    }
                }
            }
#endif

            p_list->TCB_Ptr = p_tcb->TickNextPtr;
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	695a      	ldr	r2, [r3, #20]
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	601a      	str	r2, [r3, #0]
            p_tcb           = p_list->TCB_Ptr;                          /* Get 'p_tcb' again for loop                        */
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	61fb      	str	r3, [r7, #28]
            if (p_tcb == (OS_TCB *)0) {
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d103      	bne.n	8004c6e <OS_TickListUpdateTimeout+0x122>
#if OS_CFG_DBG_EN > 0u
                p_list->NbrEntries = (OS_OBJ_QTY)0u;
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	809a      	strh	r2, [r3, #4]
#endif
                break;
 8004c6c:	e00d      	b.n	8004c8a <OS_TickListUpdateTimeout+0x13e>
            } else {
#if OS_CFG_DBG_EN > 0u
                p_list->NbrEntries--;
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	889b      	ldrh	r3, [r3, #4]
 8004c72:	3b01      	subs	r3, #1
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	809a      	strh	r2, [r3, #4]
#endif
                p_tcb->TickPrevPtr = (OS_TCB *)0;
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	619a      	str	r2, [r3, #24]
#endif
    p_list      = &OSTickListTimeout;
    p_tcb       = p_list->TCB_Ptr;                                  
    if (p_tcb != (OS_TCB *)0) {
        p_tcb->TickRemain--;
        while (p_tcb->TickRemain == 0u) {
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f43f af7d 	beq.w	8004b84 <OS_TickListUpdateTimeout+0x38>
                p_tcb->TickPrevPtr = (OS_TCB *)0;
            }
        }
    }
#if OS_CFG_DBG_EN > 0u
    p_list->NbrUpdated = nbr_updated;
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	8b7a      	ldrh	r2, [r7, #26]
 8004c8e:	80da      	strh	r2, [r3, #6]
#endif
    ts_delta_timeout   = OS_TS_GET() - ts_start;                        /* Measure execution time of the update              */
 8004c90:	f002 fe6c 	bl	800796c <CPU_TS_TmrRd>
 8004c94:	4602      	mov	r2, r0
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	603b      	str	r3, [r7, #0]
    OS_CRITICAL_EXIT();                                                 /* ------------------------------------------------- */
 8004c9c:	6938      	ldr	r0, [r7, #16]
 8004c9e:	f7fb fb23 	bl	80002e8 <CPU_SR_Restore>

    return (ts_delta_timeout);
 8004ca2:	683b      	ldr	r3, [r7, #0]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3720      	adds	r7, #32
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	200029e4 	.word	0x200029e4

08004cb0 <OS_FlagInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_FlagInit (OS_ERR  *p_err)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSFlagDbgListPtr = (OS_FLAG_GRP *)0;
 8004cb8:	4b06      	ldr	r3, [pc, #24]	; (8004cd4 <OS_FlagInit+0x24>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	601a      	str	r2, [r3, #0]
#endif

    OSFlagQty        = (OS_OBJ_QTY   )0;
 8004cbe:	4b06      	ldr	r3, [pc, #24]	; (8004cd8 <OS_FlagInit+0x28>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	801a      	strh	r2, [r3, #0]
   *p_err            = OS_ERR_NONE;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	801a      	strh	r2, [r3, #0]
}
 8004cca:	bf00      	nop
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bc80      	pop	{r7}
 8004cd2:	4770      	bx	lr
 8004cd4:	200028f0 	.word	0x200028f0
 8004cd8:	200028ec 	.word	0x200028ec

08004cdc <OSStatReset>:
* Returns    : none
************************************************************************************************************************
*/

void  OSStatReset (OS_ERR  *p_err)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
#endif
#if (OS_CFG_Q_EN > 0u)
    OS_Q        *p_q;
#endif
#endif
    CPU_SR_ALLOC();
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	60fb      	str	r3, [r7, #12]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    CPU_CRITICAL_ENTER();
 8004ce8:	f7fb fafa 	bl	80002e0 <CPU_SR_Save>
 8004cec:	60f8      	str	r0, [r7, #12]
    OSIntQTaskTimeMax     = (CPU_TS    )0;                  /* Reset the task execution times                         */
    OSIntQNbrEntriesMax   = (OS_OBJ_QTY)0;                  /* Reset the queue maximum number of entries              */
#endif

#if OS_CFG_STAT_TASK_EN > 0u
    OSStatTaskCPUUsageMax = 0u;
 8004cee:	4b3f      	ldr	r3, [pc, #252]	; (8004dec <OSStatReset+0x110>)
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	801a      	strh	r2, [r3, #0]
    OSStatTaskTimeMax     = (CPU_TS)0;
 8004cf4:	4b3e      	ldr	r3, [pc, #248]	; (8004df0 <OSStatReset+0x114>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	601a      	str	r2, [r3, #0]
#endif

    OSTickTaskTimeMax     = (CPU_TS)0;
 8004cfa:	4b3e      	ldr	r3, [pc, #248]	; (8004df4 <OSStatReset+0x118>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	601a      	str	r2, [r3, #0]

#if OS_CFG_TMR_EN > 0u
    OSTmrTaskTimeMax      = (CPU_TS)0;
 8004d00:	4b3d      	ldr	r3, [pc, #244]	; (8004df8 <OSStatReset+0x11c>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	601a      	str	r2, [r3, #0]
#ifdef CPU_CFG_INT_DIS_MEAS_EN
    OSIntDisTimeMax       = (CPU_TS)0;                      /* Reset the maximum interrupt disable time               */
#endif

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
    OSSchedLockTimeMax    = (CPU_TS)0;                      /* Reset the maximum scheduler lock time                  */
 8004d06:	4b3d      	ldr	r3, [pc, #244]	; (8004dfc <OSStatReset+0x120>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	601a      	str	r2, [r3, #0]
#endif

#if ((OS_MSG_EN > 0u) && (OS_CFG_DBG_EN > 0u))
    OSMsgPool.NbrUsedMax  = 0u;
 8004d0c:	4b3c      	ldr	r3, [pc, #240]	; (8004e00 <OSStatReset+0x124>)
 8004d0e:	2200      	movs	r2, #0
 8004d10:	811a      	strh	r2, [r3, #8]
#endif
    CPU_CRITICAL_EXIT();
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f7fb fae8 	bl	80002e8 <CPU_SR_Restore>

#if OS_CFG_DBG_EN > 0u
    CPU_CRITICAL_ENTER();
 8004d18:	f7fb fae2 	bl	80002e0 <CPU_SR_Save>
 8004d1c:	60f8      	str	r0, [r7, #12]
    p_tcb = OSTaskDbgListPtr;
 8004d1e:	4b39      	ldr	r3, [pc, #228]	; (8004e04 <OSStatReset+0x128>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	617b      	str	r3, [r7, #20]
    CPU_CRITICAL_EXIT();
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f7fb fadf 	bl	80002e8 <CPU_SR_Restore>
    while (p_tcb != (OS_TCB *)0) {                          /* Reset per-Task statistics                              */
 8004d2a:	e034      	b.n	8004d96 <OSStatReset+0xba>
        CPU_CRITICAL_ENTER();
 8004d2c:	f7fb fad8 	bl	80002e0 <CPU_SR_Save>
 8004d30:	60f8      	str	r0, [r7, #12]
#ifdef CPU_CFG_INT_DIS_MEAS_EN
        p_tcb->IntDisTimeMax    = (CPU_TS      )0;
#endif

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
        p_tcb->SchedLockTimeMax = (CPU_TS      )0;
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
#endif

#if OS_CFG_TASK_PROFILE_EN > 0u
#if OS_CFG_TASK_Q_EN > 0u
        p_tcb->MsgQPendTimeMax  = (CPU_TS      )0;
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	675a      	str	r2, [r3, #116]	; 0x74
#endif
        p_tcb->SemPendTimeMax   = (CPU_TS      )0;
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        p_tcb->CtxSwCtr         = (OS_CTR      )0;
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        p_tcb->CPUUsage         = (OS_CPU_USAGE)0;
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
        p_tcb->CPUUsageMax      = (OS_CPU_USAGE)0;
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
        p_tcb->CyclesTotal      = (OS_CYCLES   )0;
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        p_tcb->CyclesTotalPrev  = (OS_CYCLES   )0;
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        p_tcb->CyclesStart      =  OS_TS_GET();
 8004d70:	f002 fdfc 	bl	800796c <CPU_TS_TmrRd>
 8004d74:	4602      	mov	r2, r0
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif

#if OS_CFG_TASK_Q_EN > 0u
        p_msg_q                 = &p_tcb->MsgQ;
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	3360      	adds	r3, #96	; 0x60
 8004d80:	60bb      	str	r3, [r7, #8]
        p_msg_q->NbrEntriesMax  = (OS_MSG_QTY  )0;
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	2200      	movs	r2, #0
 8004d86:	819a      	strh	r2, [r3, #12]
#endif
        p_tcb                   = p_tcb->DbgNextPtr;
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004d8e:	617b      	str	r3, [r7, #20]
        CPU_CRITICAL_EXIT();
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f7fb faa9 	bl	80002e8 <CPU_SR_Restore>

#if OS_CFG_DBG_EN > 0u
    CPU_CRITICAL_ENTER();
    p_tcb = OSTaskDbgListPtr;
    CPU_CRITICAL_EXIT();
    while (p_tcb != (OS_TCB *)0) {                          /* Reset per-Task statistics                              */
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1c7      	bne.n	8004d2c <OSStatReset+0x50>
        CPU_CRITICAL_EXIT();
    }
#endif

#if (OS_CFG_Q_EN > 0u) && (OS_CFG_DBG_EN > 0u)
    CPU_CRITICAL_ENTER();
 8004d9c:	f7fb faa0 	bl	80002e0 <CPU_SR_Save>
 8004da0:	60f8      	str	r0, [r7, #12]
    p_q = OSQDbgListPtr;
 8004da2:	4b19      	ldr	r3, [pc, #100]	; (8004e08 <OSStatReset+0x12c>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	613b      	str	r3, [r7, #16]
    CPU_CRITICAL_EXIT();
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f7fb fa9d 	bl	80002e8 <CPU_SR_Restore>
    while (p_q != (OS_Q *)0) {                              /* Reset message queues statistics                        */
 8004dae:	e00e      	b.n	8004dce <OSStatReset+0xf2>
        CPU_CRITICAL_ENTER();
 8004db0:	f7fb fa96 	bl	80002e0 <CPU_SR_Save>
 8004db4:	60f8      	str	r0, [r7, #12]
        p_msg_q                = &p_q->MsgQ;
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	3320      	adds	r3, #32
 8004dba:	60bb      	str	r3, [r7, #8]
        p_msg_q->NbrEntriesMax = (OS_MSG_QTY)0;
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	819a      	strh	r2, [r3, #12]
        p_q                    = p_q->DbgNextPtr;
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	613b      	str	r3, [r7, #16]
        CPU_CRITICAL_EXIT();
 8004dc8:	68f8      	ldr	r0, [r7, #12]
 8004dca:	f7fb fa8d 	bl	80002e8 <CPU_SR_Restore>

#if (OS_CFG_Q_EN > 0u) && (OS_CFG_DBG_EN > 0u)
    CPU_CRITICAL_ENTER();
    p_q = OSQDbgListPtr;
    CPU_CRITICAL_EXIT();
    while (p_q != (OS_Q *)0) {                              /* Reset message queues statistics                        */
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1ed      	bne.n	8004db0 <OSStatReset+0xd4>
        p_q                    = p_q->DbgNextPtr;
        CPU_CRITICAL_EXIT();
    }
#endif

    OS_TickListResetPeak();                                 /* Reset tick wheel statistics                            */
 8004dd4:	f7ff fe52 	bl	8004a7c <OS_TickListResetPeak>

#if OS_CFG_TMR_EN > 0u
    OS_TmrResetPeak();
 8004dd8:	f001 f982 	bl	80060e0 <OS_TmrResetPeak>
#endif


   *p_err = OS_ERR_NONE;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	801a      	strh	r2, [r3, #0]
}
 8004de2:	bf00      	nop
 8004de4:	3718      	adds	r7, #24
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	200026da 	.word	0x200026da
 8004df0:	20002470 	.word	0x20002470
 8004df4:	200029c8 	.word	0x200029c8
 8004df8:	200026ec 	.word	0x200026ec
 8004dfc:	200028f4 	.word	0x200028f4
 8004e00:	200027c4 	.word	0x200027c4
 8004e04:	200026e8 	.word	0x200026e8
 8004e08:	20002890 	.word	0x20002890

08004e0c <OSStatTaskCPUUsageInit>:
* Returns    : none
************************************************************************************************************************
*/

void  OSStatTaskCPUUsageInit (OS_ERR  *p_err)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b086      	sub	sp, #24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
    OS_ERR   err;
    OS_TICK  dly;
    CPU_SR_ALLOC();
 8004e14:	2300      	movs	r3, #0
 8004e16:	613b      	str	r3, [r7, #16]
        return;
    }
#endif

#if ((OS_CFG_TMR_EN > 0u) && (OS_CFG_TASK_SUSPEND_EN > 0u))
    OSTaskSuspend(&OSTmrTaskTCB, &err);
 8004e18:	f107 030e 	add.w	r3, r7, #14
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	4832      	ldr	r0, [pc, #200]	; (8004ee8 <OSStatTaskCPUUsageInit+0xdc>)
 8004e20:	f7fd ffea 	bl	8002df8 <OSTaskSuspend>
    if (err != OS_ERR_NONE) {
 8004e24:	89fb      	ldrh	r3, [r7, #14]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <OSStatTaskCPUUsageInit+0x26>
       *p_err = err;
 8004e2a:	89fa      	ldrh	r2, [r7, #14]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	801a      	strh	r2, [r3, #0]
        return;
 8004e30:	e056      	b.n	8004ee0 <OSStatTaskCPUUsageInit+0xd4>
    }
#endif

    OSTimeDly((OS_TICK )2,                                  /* Synchronize with clock tick                            */
 8004e32:	f107 030e 	add.w	r3, r7, #14
 8004e36:	461a      	mov	r2, r3
 8004e38:	2100      	movs	r1, #0
 8004e3a:	2002      	movs	r0, #2
 8004e3c:	f000 fae2 	bl	8005404 <OSTimeDly>
              (OS_OPT  )OS_OPT_TIME_DLY,
              (OS_ERR *)&err);
    if (err != OS_ERR_NONE) {
 8004e40:	89fb      	ldrh	r3, [r7, #14]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d003      	beq.n	8004e4e <OSStatTaskCPUUsageInit+0x42>
       *p_err = err;
 8004e46:	89fa      	ldrh	r2, [r7, #14]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	801a      	strh	r2, [r3, #0]
        return;
 8004e4c:	e048      	b.n	8004ee0 <OSStatTaskCPUUsageInit+0xd4>
    }
    CPU_CRITICAL_ENTER();
 8004e4e:	f7fb fa47 	bl	80002e0 <CPU_SR_Save>
 8004e52:	6138      	str	r0, [r7, #16]
    OSStatTaskCtr = (OS_TICK)0;                             /* Clear idle counter                                     */
 8004e54:	4b25      	ldr	r3, [pc, #148]	; (8004eec <OSStatTaskCPUUsageInit+0xe0>)
 8004e56:	2200      	movs	r2, #0
 8004e58:	601a      	str	r2, [r3, #0]
    CPU_CRITICAL_EXIT();
 8004e5a:	6938      	ldr	r0, [r7, #16]
 8004e5c:	f7fb fa44 	bl	80002e8 <CPU_SR_Restore>

    dly = (OS_TICK)0;
 8004e60:	2300      	movs	r3, #0
 8004e62:	617b      	str	r3, [r7, #20]
    if (OSCfg_TickRate_Hz > OSCfg_StatTaskRate_Hz) {
 8004e64:	4b22      	ldr	r3, [pc, #136]	; (8004ef0 <OSStatTaskCPUUsageInit+0xe4>)
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	4b22      	ldr	r3, [pc, #136]	; (8004ef4 <OSStatTaskCPUUsageInit+0xe8>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d906      	bls.n	8004e7e <OSStatTaskCPUUsageInit+0x72>
        dly = (OS_TICK)(OSCfg_TickRate_Hz / OSCfg_StatTaskRate_Hz);
 8004e70:	4b1f      	ldr	r3, [pc, #124]	; (8004ef0 <OSStatTaskCPUUsageInit+0xe4>)
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	4b1f      	ldr	r3, [pc, #124]	; (8004ef4 <OSStatTaskCPUUsageInit+0xe8>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e7c:	617b      	str	r3, [r7, #20]
    }
    if (dly == (OS_TICK)0) {
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d106      	bne.n	8004e92 <OSStatTaskCPUUsageInit+0x86>
        dly =  (OS_TICK)(OSCfg_TickRate_Hz / (OS_RATE_HZ)10);
 8004e84:	4b1a      	ldr	r3, [pc, #104]	; (8004ef0 <OSStatTaskCPUUsageInit+0xe4>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a1b      	ldr	r2, [pc, #108]	; (8004ef8 <OSStatTaskCPUUsageInit+0xec>)
 8004e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8e:	08db      	lsrs	r3, r3, #3
 8004e90:	617b      	str	r3, [r7, #20]
    }

    OSTimeDly(dly,                                          /* Determine MAX. idle counter value                      */
 8004e92:	f107 030e 	add.w	r3, r7, #14
 8004e96:	461a      	mov	r2, r3
 8004e98:	2100      	movs	r1, #0
 8004e9a:	6978      	ldr	r0, [r7, #20]
 8004e9c:	f000 fab2 	bl	8005404 <OSTimeDly>
              OS_OPT_TIME_DLY,
              &err);

#if ((OS_CFG_TMR_EN > 0u) && (OS_CFG_TASK_SUSPEND_EN > 0u))
    OSTaskResume(&OSTmrTaskTCB, &err);
 8004ea0:	f107 030e 	add.w	r3, r7, #14
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	4810      	ldr	r0, [pc, #64]	; (8004ee8 <OSStatTaskCPUUsageInit+0xdc>)
 8004ea8:	f7fd fde8 	bl	8002a7c <OSTaskResume>
    if (err != OS_ERR_NONE) {
 8004eac:	89fb      	ldrh	r3, [r7, #14]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d003      	beq.n	8004eba <OSStatTaskCPUUsageInit+0xae>
       *p_err = err;
 8004eb2:	89fa      	ldrh	r2, [r7, #14]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	801a      	strh	r2, [r3, #0]
        return;
 8004eb8:	e012      	b.n	8004ee0 <OSStatTaskCPUUsageInit+0xd4>
    }
#endif

    CPU_CRITICAL_ENTER();
 8004eba:	f7fb fa11 	bl	80002e0 <CPU_SR_Save>
 8004ebe:	6138      	str	r0, [r7, #16]
    OSStatTaskTimeMax = (CPU_TS)0;
 8004ec0:	4b0e      	ldr	r3, [pc, #56]	; (8004efc <OSStatTaskCPUUsageInit+0xf0>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	601a      	str	r2, [r3, #0]

    OSStatTaskCtrMax  = OSStatTaskCtr;                      /* Store maximum idle counter count                       */
 8004ec6:	4b09      	ldr	r3, [pc, #36]	; (8004eec <OSStatTaskCPUUsageInit+0xe0>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a0d      	ldr	r2, [pc, #52]	; (8004f00 <OSStatTaskCPUUsageInit+0xf4>)
 8004ecc:	6013      	str	r3, [r2, #0]
    OSStatTaskRdy     = OS_STATE_RDY;
 8004ece:	4b0d      	ldr	r3, [pc, #52]	; (8004f04 <OSStatTaskCPUUsageInit+0xf8>)
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	701a      	strb	r2, [r3, #0]
    CPU_CRITICAL_EXIT();
 8004ed4:	6938      	ldr	r0, [r7, #16]
 8004ed6:	f7fb fa07 	bl	80002e8 <CPU_SR_Restore>
   *p_err             = OS_ERR_NONE;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	801a      	strh	r2, [r3, #0]
}
 8004ee0:	3718      	adds	r7, #24
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	20002704 	.word	0x20002704
 8004eec:	20002474 	.word	0x20002474
 8004ef0:	0800ec90 	.word	0x0800ec90
 8004ef4:	0800ec7c 	.word	0x0800ec7c
 8004ef8:	cccccccd 	.word	0xcccccccd
 8004efc:	20002470 	.word	0x20002470
 8004f00:	200028d0 	.word	0x200028d0
 8004f04:	200025fd 	.word	0x200025fd

08004f08 <OS_StatTask>:
*              4) This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_StatTask (void  *p_arg)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b090      	sub	sp, #64	; 0x40
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
    OS_TICK      ctr_div;
    OS_ERR       err;
    OS_TICK      dly;
    CPU_TS       ts_start;
    CPU_TS       ts_end;
    CPU_SR_ALLOC();
 8004f10:	2300      	movs	r3, #0
 8004f12:	61bb      	str	r3, [r7, #24]



    (void)&p_arg;                                           /* Prevent compiler warning for not using 'p_arg'         */
    while (OSStatTaskRdy != DEF_TRUE) {
 8004f14:	e008      	b.n	8004f28 <OS_StatTask+0x20>
        OSTimeDly(2u * OSCfg_StatTaskRate_Hz,               /* Wait until statistic task is ready                     */
 8004f16:	4b84      	ldr	r3, [pc, #528]	; (8005128 <OS_StatTask+0x220>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	005b      	lsls	r3, r3, #1
 8004f1c:	f107 020a 	add.w	r2, r7, #10
 8004f20:	2100      	movs	r1, #0
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 fa6e 	bl	8005404 <OSTimeDly>
    CPU_SR_ALLOC();



    (void)&p_arg;                                           /* Prevent compiler warning for not using 'p_arg'         */
    while (OSStatTaskRdy != DEF_TRUE) {
 8004f28:	4b80      	ldr	r3, [pc, #512]	; (800512c <OS_StatTask+0x224>)
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d1f2      	bne.n	8004f16 <OS_StatTask+0xe>
        OSTimeDly(2u * OSCfg_StatTaskRate_Hz,               /* Wait until statistic task is ready                     */
                  OS_OPT_TIME_DLY,
                  &err);
    }
    OSStatReset(&err);                                      /* Reset statistics                                       */
 8004f30:	f107 030a 	add.w	r3, r7, #10
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7ff fed1 	bl	8004cdc <OSStatReset>

    dly = (OS_TICK)0;                                       /* Compute statistic task sleep delay                     */
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	61fb      	str	r3, [r7, #28]
    if (OSCfg_TickRate_Hz > OSCfg_StatTaskRate_Hz) {
 8004f3e:	4b7c      	ldr	r3, [pc, #496]	; (8005130 <OS_StatTask+0x228>)
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	4b79      	ldr	r3, [pc, #484]	; (8005128 <OS_StatTask+0x220>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d906      	bls.n	8004f58 <OS_StatTask+0x50>
        dly = (OS_TICK)(OSCfg_TickRate_Hz / OSCfg_StatTaskRate_Hz);
 8004f4a:	4b79      	ldr	r3, [pc, #484]	; (8005130 <OS_StatTask+0x228>)
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	4b76      	ldr	r3, [pc, #472]	; (8005128 <OS_StatTask+0x220>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f56:	61fb      	str	r3, [r7, #28]
    }
    if (dly == (OS_TICK)0) {
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d106      	bne.n	8004f6c <OS_StatTask+0x64>
        dly =  (OS_TICK)(OSCfg_TickRate_Hz / (OS_RATE_HZ)10);
 8004f5e:	4b74      	ldr	r3, [pc, #464]	; (8005130 <OS_StatTask+0x228>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a74      	ldr	r2, [pc, #464]	; (8005134 <OS_StatTask+0x22c>)
 8004f64:	fba2 2303 	umull	r2, r3, r2, r3
 8004f68:	08db      	lsrs	r3, r3, #3
 8004f6a:	61fb      	str	r3, [r7, #28]
    }

    while (DEF_ON) {
        ts_start        = OS_TS_GET();
 8004f6c:	f002 fcfe 	bl	800796c <CPU_TS_TmrRd>
 8004f70:	6178      	str	r0, [r7, #20]
#ifdef  CPU_CFG_INT_DIS_MEAS_EN
        OSIntDisTimeMax = CPU_IntDisMeasMaxGet();
#endif

        CPU_CRITICAL_ENTER();                               /* ----------------- OVERALL CPU USAGE ------------------ */
 8004f72:	f7fb f9b5 	bl	80002e0 <CPU_SR_Save>
 8004f76:	61b8      	str	r0, [r7, #24]
        OSStatTaskCtrRun   = OSStatTaskCtr;                 /* Obtain the of the stat counter for the past .1 second  */
 8004f78:	4b6f      	ldr	r3, [pc, #444]	; (8005138 <OS_StatTask+0x230>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a6f      	ldr	r2, [pc, #444]	; (800513c <OS_StatTask+0x234>)
 8004f7e:	6013      	str	r3, [r2, #0]
        OSStatTaskCtr      = (OS_TICK)0;                    /* Reset the stat counter for the next .1 second          */
 8004f80:	4b6d      	ldr	r3, [pc, #436]	; (8005138 <OS_StatTask+0x230>)
 8004f82:	2200      	movs	r2, #0
 8004f84:	601a      	str	r2, [r3, #0]
        CPU_CRITICAL_EXIT();
 8004f86:	69b8      	ldr	r0, [r7, #24]
 8004f88:	f7fb f9ae 	bl	80002e8 <CPU_SR_Restore>

        if (OSStatTaskCtrMax > OSStatTaskCtrRun) {          /* Compute CPU Usage with best resolution                 */
 8004f8c:	4b6c      	ldr	r3, [pc, #432]	; (8005140 <OS_StatTask+0x238>)
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	4b6a      	ldr	r3, [pc, #424]	; (800513c <OS_StatTask+0x234>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d94f      	bls.n	8005038 <OS_StatTask+0x130>
            if (OSStatTaskCtrMax < 400000u) {                                        /*            1 to       400,000 */
 8004f98:	4b69      	ldr	r3, [pc, #420]	; (8005140 <OS_StatTask+0x238>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a69      	ldr	r2, [pc, #420]	; (8005144 <OS_StatTask+0x23c>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d805      	bhi.n	8004fae <OS_StatTask+0xa6>
                ctr_mult = 10000u;
 8004fa2:	f242 7310 	movw	r3, #10000	; 0x2710
 8004fa6:	627b      	str	r3, [r7, #36]	; 0x24
                ctr_div  =     1u;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	623b      	str	r3, [r7, #32]
 8004fac:	e024      	b.n	8004ff8 <OS_StatTask+0xf0>
            } else if (OSStatTaskCtrMax <   4000000u) {                              /*      400,000 to     4,000,000 */
 8004fae:	4b64      	ldr	r3, [pc, #400]	; (8005140 <OS_StatTask+0x238>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a65      	ldr	r2, [pc, #404]	; (8005148 <OS_StatTask+0x240>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d805      	bhi.n	8004fc4 <OS_StatTask+0xbc>
                ctr_mult =  1000u;
 8004fb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004fbc:	627b      	str	r3, [r7, #36]	; 0x24
                ctr_div  =    10u;
 8004fbe:	230a      	movs	r3, #10
 8004fc0:	623b      	str	r3, [r7, #32]
 8004fc2:	e019      	b.n	8004ff8 <OS_StatTask+0xf0>
            } else if (OSStatTaskCtrMax <  40000000u) {                              /*    4,000,000 to    40,000,000 */
 8004fc4:	4b5e      	ldr	r3, [pc, #376]	; (8005140 <OS_StatTask+0x238>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a60      	ldr	r2, [pc, #384]	; (800514c <OS_StatTask+0x244>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d804      	bhi.n	8004fd8 <OS_StatTask+0xd0>
                ctr_mult =   100u;
 8004fce:	2364      	movs	r3, #100	; 0x64
 8004fd0:	627b      	str	r3, [r7, #36]	; 0x24
                ctr_div  =   100u;
 8004fd2:	2364      	movs	r3, #100	; 0x64
 8004fd4:	623b      	str	r3, [r7, #32]
 8004fd6:	e00f      	b.n	8004ff8 <OS_StatTask+0xf0>
            } else if (OSStatTaskCtrMax < 400000000u) {                              /*   40,000,000 to   400,000,000 */
 8004fd8:	4b59      	ldr	r3, [pc, #356]	; (8005140 <OS_StatTask+0x238>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a5c      	ldr	r2, [pc, #368]	; (8005150 <OS_StatTask+0x248>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d805      	bhi.n	8004fee <OS_StatTask+0xe6>
                ctr_mult =    10u;
 8004fe2:	230a      	movs	r3, #10
 8004fe4:	627b      	str	r3, [r7, #36]	; 0x24
                ctr_div  =  1000u;
 8004fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004fea:	623b      	str	r3, [r7, #32]
 8004fec:	e004      	b.n	8004ff8 <OS_StatTask+0xf0>
            } else {                                                                 /*  400,000,000 and up           */
                ctr_mult =     1u;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	627b      	str	r3, [r7, #36]	; 0x24
                ctr_div  = 10000u;
 8004ff2:	f242 7310 	movw	r3, #10000	; 0x2710
 8004ff6:	623b      	str	r3, [r7, #32]
            }
            ctr_max            = OSStatTaskCtrMax / ctr_div;
 8004ff8:	4b51      	ldr	r3, [pc, #324]	; (8005140 <OS_StatTask+0x238>)
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	6a3b      	ldr	r3, [r7, #32]
 8004ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005002:	613b      	str	r3, [r7, #16]
            OSStatTaskCPUUsage = (OS_CPU_USAGE)((OS_TICK)10000u - ctr_mult * OSStatTaskCtrRun / ctr_max);
 8005004:	4b4d      	ldr	r3, [pc, #308]	; (800513c <OS_StatTask+0x234>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800500a:	fb02 f203 	mul.w	r2, r2, r3
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	fbb2 f3f3 	udiv	r3, r2, r3
 8005014:	b29b      	uxth	r3, r3
 8005016:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 800501a:	3310      	adds	r3, #16
 800501c:	b29a      	uxth	r2, r3
 800501e:	4b4d      	ldr	r3, [pc, #308]	; (8005154 <OS_StatTask+0x24c>)
 8005020:	801a      	strh	r2, [r3, #0]
            if (OSStatTaskCPUUsageMax < OSStatTaskCPUUsage) {
 8005022:	4b4d      	ldr	r3, [pc, #308]	; (8005158 <OS_StatTask+0x250>)
 8005024:	881a      	ldrh	r2, [r3, #0]
 8005026:	4b4b      	ldr	r3, [pc, #300]	; (8005154 <OS_StatTask+0x24c>)
 8005028:	881b      	ldrh	r3, [r3, #0]
 800502a:	429a      	cmp	r2, r3
 800502c:	d208      	bcs.n	8005040 <OS_StatTask+0x138>
                OSStatTaskCPUUsageMax = OSStatTaskCPUUsage;
 800502e:	4b49      	ldr	r3, [pc, #292]	; (8005154 <OS_StatTask+0x24c>)
 8005030:	881a      	ldrh	r2, [r3, #0]
 8005032:	4b49      	ldr	r3, [pc, #292]	; (8005158 <OS_StatTask+0x250>)
 8005034:	801a      	strh	r2, [r3, #0]
 8005036:	e003      	b.n	8005040 <OS_StatTask+0x138>
            }
        } else {
            OSStatTaskCPUUsage = (OS_CPU_USAGE)10000u;
 8005038:	4b46      	ldr	r3, [pc, #280]	; (8005154 <OS_StatTask+0x24c>)
 800503a:	f242 7210 	movw	r2, #10000	; 0x2710
 800503e:	801a      	strh	r2, [r3, #0]
        }

        OSStatTaskHook();                                   /* Invoke user definable hook                             */
 8005040:	f001 f946 	bl	80062d0 <OSStatTaskHook>


#if OS_CFG_DBG_EN > 0u
#if OS_CFG_TASK_PROFILE_EN > 0u
        cycles_total = (OS_CYCLES)0;
 8005044:	2300      	movs	r3, #0
 8005046:	63bb      	str	r3, [r7, #56]	; 0x38

        CPU_CRITICAL_ENTER();
 8005048:	f7fb f94a 	bl	80002e0 <CPU_SR_Save>
 800504c:	61b8      	str	r0, [r7, #24]
        p_tcb = OSTaskDbgListPtr;
 800504e:	4b43      	ldr	r3, [pc, #268]	; (800515c <OS_StatTask+0x254>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	62bb      	str	r3, [r7, #40]	; 0x28
        CPU_CRITICAL_EXIT();
 8005054:	69b8      	ldr	r0, [r7, #24]
 8005056:	f7fb f947 	bl	80002e8 <CPU_SR_Restore>
        while (p_tcb != (OS_TCB *)0) {                      /* ----------------- TOTAL CYCLES COUNT ----------------- */
 800505a:	e01f      	b.n	800509c <OS_StatTask+0x194>
            OS_CRITICAL_ENTER();
 800505c:	f7fb f940 	bl	80002e0 <CPU_SR_Save>
 8005060:	61b8      	str	r0, [r7, #24]
            p_tcb->CyclesTotalPrev =  p_tcb->CyclesTotal;   /* Save accumulated # cycles into a temp variable         */
 8005062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005064:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8005068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
            p_tcb->CyclesTotal     = (OS_CYCLES)0;          /* Reset total cycles for task for next run               */
 800506e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005070:	2200      	movs	r2, #0
 8005072:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            OS_CRITICAL_EXIT();
 8005076:	69b8      	ldr	r0, [r7, #24]
 8005078:	f7fb f936 	bl	80002e8 <CPU_SR_Restore>

            cycles_total          += p_tcb->CyclesTotalPrev;/* Perform sum of all task # cycles                       */
 800507c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005082:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005084:	4413      	add	r3, r2
 8005086:	63bb      	str	r3, [r7, #56]	; 0x38

            CPU_CRITICAL_ENTER();
 8005088:	f7fb f92a 	bl	80002e0 <CPU_SR_Save>
 800508c:	61b8      	str	r0, [r7, #24]
            p_tcb                  = p_tcb->DbgNextPtr;
 800508e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005090:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005094:	62bb      	str	r3, [r7, #40]	; 0x28
            CPU_CRITICAL_EXIT();
 8005096:	69b8      	ldr	r0, [r7, #24]
 8005098:	f7fb f926 	bl	80002e8 <CPU_SR_Restore>
        cycles_total = (OS_CYCLES)0;

        CPU_CRITICAL_ENTER();
        p_tcb = OSTaskDbgListPtr;
        CPU_CRITICAL_EXIT();
        while (p_tcb != (OS_TCB *)0) {                      /* ----------------- TOTAL CYCLES COUNT ----------------- */
 800509c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1dc      	bne.n	800505c <OS_StatTask+0x154>
#endif


#if OS_CFG_TASK_PROFILE_EN > 0u
                                                            /* ------------- INDIVIDUAL TASK CPU USAGE -------------- */
        if (cycles_total > (OS_CYCLES)0u) {                                          /* 'cycles_total' scaling ...    */
 80050a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d031      	beq.n	800510c <OS_StatTask+0x204>
            if (cycles_total < 400000u) {                                            /*            1 to       400,000 */
 80050a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050aa:	4a26      	ldr	r2, [pc, #152]	; (8005144 <OS_StatTask+0x23c>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d805      	bhi.n	80050bc <OS_StatTask+0x1b4>
                cycles_mult = 10000u;
 80050b0:	f242 7310 	movw	r3, #10000	; 0x2710
 80050b4:	633b      	str	r3, [r7, #48]	; 0x30
                cycles_div  =     1u;
 80050b6:	2301      	movs	r3, #1
 80050b8:	637b      	str	r3, [r7, #52]	; 0x34
 80050ba:	e021      	b.n	8005100 <OS_StatTask+0x1f8>
            } else if (cycles_total <   4000000u) {                                  /*      400,000 to     4,000,000 */
 80050bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050be:	4a22      	ldr	r2, [pc, #136]	; (8005148 <OS_StatTask+0x240>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d805      	bhi.n	80050d0 <OS_StatTask+0x1c8>
                cycles_mult =  1000u;
 80050c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80050c8:	633b      	str	r3, [r7, #48]	; 0x30
                cycles_div  =    10u;
 80050ca:	230a      	movs	r3, #10
 80050cc:	637b      	str	r3, [r7, #52]	; 0x34
 80050ce:	e017      	b.n	8005100 <OS_StatTask+0x1f8>
            } else if (cycles_total <  40000000u) {                                  /*    4,000,000 to    40,000,000 */
 80050d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d2:	4a1e      	ldr	r2, [pc, #120]	; (800514c <OS_StatTask+0x244>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d804      	bhi.n	80050e2 <OS_StatTask+0x1da>
                cycles_mult =   100u;
 80050d8:	2364      	movs	r3, #100	; 0x64
 80050da:	633b      	str	r3, [r7, #48]	; 0x30
                cycles_div  =   100u;
 80050dc:	2364      	movs	r3, #100	; 0x64
 80050de:	637b      	str	r3, [r7, #52]	; 0x34
 80050e0:	e00e      	b.n	8005100 <OS_StatTask+0x1f8>
            } else if (cycles_total < 400000000u) {                                  /*   40,000,000 to   400,000,000 */
 80050e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e4:	4a1a      	ldr	r2, [pc, #104]	; (8005150 <OS_StatTask+0x248>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d805      	bhi.n	80050f6 <OS_StatTask+0x1ee>
                cycles_mult =    10u;
 80050ea:	230a      	movs	r3, #10
 80050ec:	633b      	str	r3, [r7, #48]	; 0x30
                cycles_div  =  1000u;
 80050ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80050f2:	637b      	str	r3, [r7, #52]	; 0x34
 80050f4:	e004      	b.n	8005100 <OS_StatTask+0x1f8>
            } else {                                                                 /*  400,000,000 and up           */
                cycles_mult =     1u;
 80050f6:	2301      	movs	r3, #1
 80050f8:	633b      	str	r3, [r7, #48]	; 0x30
                cycles_div  = 10000u;
 80050fa:	f242 7310 	movw	r3, #10000	; 0x2710
 80050fe:	637b      	str	r3, [r7, #52]	; 0x34
            }
            cycles_max  = cycles_total / cycles_div;
 8005100:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005104:	fbb2 f3f3 	udiv	r3, r2, r3
 8005108:	62fb      	str	r3, [r7, #44]	; 0x2c
 800510a:	e003      	b.n	8005114 <OS_StatTask+0x20c>
        } else {
            cycles_mult = 0u;
 800510c:	2300      	movs	r3, #0
 800510e:	633b      	str	r3, [r7, #48]	; 0x30
            cycles_max  = 1u;
 8005110:	2301      	movs	r3, #1
 8005112:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif
        CPU_CRITICAL_ENTER();
 8005114:	f7fb f8e4 	bl	80002e0 <CPU_SR_Save>
 8005118:	61b8      	str	r0, [r7, #24]
        p_tcb = OSTaskDbgListPtr;
 800511a:	4b10      	ldr	r3, [pc, #64]	; (800515c <OS_StatTask+0x254>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	62bb      	str	r3, [r7, #40]	; 0x28
        CPU_CRITICAL_EXIT();
 8005120:	69b8      	ldr	r0, [r7, #24]
 8005122:	f7fb f8e1 	bl	80002e8 <CPU_SR_Restore>
        while (p_tcb != (OS_TCB *)0) {
 8005126:	e050      	b.n	80051ca <OS_StatTask+0x2c2>
 8005128:	0800ec7c 	.word	0x0800ec7c
 800512c:	200025fd 	.word	0x200025fd
 8005130:	0800ec90 	.word	0x0800ec90
 8005134:	cccccccd 	.word	0xcccccccd
 8005138:	20002474 	.word	0x20002474
 800513c:	200028e4 	.word	0x200028e4
 8005140:	200028d0 	.word	0x200028d0
 8005144:	00061a7f 	.word	0x00061a7f
 8005148:	003d08ff 	.word	0x003d08ff
 800514c:	026259ff 	.word	0x026259ff
 8005150:	17d783ff 	.word	0x17d783ff
 8005154:	200026f8 	.word	0x200026f8
 8005158:	200026da 	.word	0x200026da
 800515c:	200026e8 	.word	0x200026e8
#if OS_CFG_TASK_PROFILE_EN > 0u                             /* Compute execution time of each task                    */
            usage = (OS_CPU_USAGE)(cycles_mult * p_tcb->CyclesTotalPrev / cycles_max);
 8005160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005162:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005166:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005168:	fb02 f203 	mul.w	r2, r2, r3
 800516c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800516e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005172:	87fb      	strh	r3, [r7, #62]	; 0x3e
            if (usage > 10000u) {
 8005174:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005176:	f242 7210 	movw	r2, #10000	; 0x2710
 800517a:	4293      	cmp	r3, r2
 800517c:	d902      	bls.n	8005184 <OS_StatTask+0x27c>
                usage = 10000u;
 800517e:	f242 7310 	movw	r3, #10000	; 0x2710
 8005182:	87fb      	strh	r3, [r7, #62]	; 0x3e
            }
            p_tcb->CPUUsage = usage;
 8005184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005186:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8005188:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
            if (p_tcb->CPUUsageMax < usage) {               /* Detect peak CPU usage                                  */
 800518c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518e:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8005192:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8005194:	429a      	cmp	r2, r3
 8005196:	d903      	bls.n	80051a0 <OS_StatTask+0x298>
                p_tcb->CPUUsageMax = usage;
 8005198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800519c:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
            }
#endif

#if OS_CFG_STAT_TASK_STK_CHK_EN > 0u
            OSTaskStkChk( p_tcb,                            /* Compute stack usage of active tasks only               */
 80051a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a2:	f103 01ac 	add.w	r1, r3, #172	; 0xac
 80051a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a8:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 80051ac:	f107 030a 	add.w	r3, r7, #10
 80051b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051b2:	f7fd fda9 	bl	8002d08 <OSTaskStkChk>
                         &p_tcb->StkFree,
                         &p_tcb->StkUsed,
                         &err);
#endif

            CPU_CRITICAL_ENTER();
 80051b6:	f7fb f893 	bl	80002e0 <CPU_SR_Save>
 80051ba:	61b8      	str	r0, [r7, #24]
            p_tcb = p_tcb->DbgNextPtr;
 80051bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051be:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80051c2:	62bb      	str	r3, [r7, #40]	; 0x28
            CPU_CRITICAL_EXIT();
 80051c4:	69b8      	ldr	r0, [r7, #24]
 80051c6:	f7fb f88f 	bl	80002e8 <CPU_SR_Restore>
        }
#endif
        CPU_CRITICAL_ENTER();
        p_tcb = OSTaskDbgListPtr;
        CPU_CRITICAL_EXIT();
        while (p_tcb != (OS_TCB *)0) {
 80051ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1c7      	bne.n	8005160 <OS_StatTask+0x258>
            p_tcb = p_tcb->DbgNextPtr;
            CPU_CRITICAL_EXIT();
        }
#endif

        if (OSStatResetFlag == DEF_TRUE) {                  /* Check if need to reset statistics                      */
 80051d0:	4b10      	ldr	r3, [pc, #64]	; (8005214 <OS_StatTask+0x30c>)
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d107      	bne.n	80051e8 <OS_StatTask+0x2e0>
            OSStatResetFlag  = DEF_FALSE;
 80051d8:	4b0e      	ldr	r3, [pc, #56]	; (8005214 <OS_StatTask+0x30c>)
 80051da:	2200      	movs	r2, #0
 80051dc:	701a      	strb	r2, [r3, #0]
            OSStatReset(&err);
 80051de:	f107 030a 	add.w	r3, r7, #10
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7ff fd7a 	bl	8004cdc <OSStatReset>
        }

        ts_end = OS_TS_GET() - ts_start;                    /* Measure execution time of statistic task               */
 80051e8:	f002 fbc0 	bl	800796c <CPU_TS_TmrRd>
 80051ec:	4602      	mov	r2, r0
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	60fb      	str	r3, [r7, #12]
        if (OSStatTaskTimeMax < ts_end) {
 80051f4:	4b08      	ldr	r3, [pc, #32]	; (8005218 <OS_StatTask+0x310>)
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d202      	bcs.n	8005204 <OS_StatTask+0x2fc>
            OSStatTaskTimeMax = ts_end;
 80051fe:	4a06      	ldr	r2, [pc, #24]	; (8005218 <OS_StatTask+0x310>)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6013      	str	r3, [r2, #0]
        }

        OSTimeDly(dly,
 8005204:	f107 030a 	add.w	r3, r7, #10
 8005208:	461a      	mov	r2, r3
 800520a:	2100      	movs	r1, #0
 800520c:	69f8      	ldr	r0, [r7, #28]
 800520e:	f000 f8f9 	bl	8005404 <OSTimeDly>
                  OS_OPT_TIME_DLY,
                  &err);
    }
 8005212:	e6ab      	b.n	8004f6c <OS_StatTask+0x64>
 8005214:	200028f8 	.word	0x200028f8
 8005218:	20002470 	.word	0x20002470

0800521c <OS_StatTaskInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_StatTaskInit (OS_ERR  *p_err)
{
 800521c:	b590      	push	{r4, r7, lr}
 800521e:	b08d      	sub	sp, #52	; 0x34
 8005220:	af0a      	add	r7, sp, #40	; 0x28
 8005222:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    OSStatTaskCtr    = (OS_TICK)0;
 8005224:	4b25      	ldr	r3, [pc, #148]	; (80052bc <OS_StatTaskInit+0xa0>)
 8005226:	2200      	movs	r2, #0
 8005228:	601a      	str	r2, [r3, #0]
    OSStatTaskCtrRun = (OS_TICK)0;
 800522a:	4b25      	ldr	r3, [pc, #148]	; (80052c0 <OS_StatTaskInit+0xa4>)
 800522c:	2200      	movs	r2, #0
 800522e:	601a      	str	r2, [r3, #0]
    OSStatTaskCtrMax = (OS_TICK)0;
 8005230:	4b24      	ldr	r3, [pc, #144]	; (80052c4 <OS_StatTaskInit+0xa8>)
 8005232:	2200      	movs	r2, #0
 8005234:	601a      	str	r2, [r3, #0]
    OSStatTaskRdy    = OS_STATE_NOT_RDY;                    /* Statistic task is not ready                            */
 8005236:	4b24      	ldr	r3, [pc, #144]	; (80052c8 <OS_StatTaskInit+0xac>)
 8005238:	2200      	movs	r2, #0
 800523a:	701a      	strb	r2, [r3, #0]
    OSStatResetFlag  = DEF_FALSE;
 800523c:	4b23      	ldr	r3, [pc, #140]	; (80052cc <OS_StatTaskInit+0xb0>)
 800523e:	2200      	movs	r2, #0
 8005240:	701a      	strb	r2, [r3, #0]

                                                            /* ---------------- CREATE THE STAT TASK ---------------- */
    if (OSCfg_StatTaskStkBasePtr == (CPU_STK *)0) {
 8005242:	4b23      	ldr	r3, [pc, #140]	; (80052d0 <OS_StatTaskInit+0xb4>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d104      	bne.n	8005254 <OS_StatTaskInit+0x38>
       *p_err = OS_ERR_STAT_STK_INVALID;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f646 622b 	movw	r2, #28203	; 0x6e2b
 8005250:	801a      	strh	r2, [r3, #0]
        return;
 8005252:	e02f      	b.n	80052b4 <OS_StatTaskInit+0x98>
    }

    if (OSCfg_StatTaskStkSize < OSCfg_StkSizeMin) {
 8005254:	4b1f      	ldr	r3, [pc, #124]	; (80052d4 <OS_StatTaskInit+0xb8>)
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	4b1f      	ldr	r3, [pc, #124]	; (80052d8 <OS_StatTaskInit+0xbc>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	429a      	cmp	r2, r3
 800525e:	d204      	bcs.n	800526a <OS_StatTaskInit+0x4e>
       *p_err = OS_ERR_STAT_STK_SIZE_INVALID;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f646 622c 	movw	r2, #28204	; 0x6e2c
 8005266:	801a      	strh	r2, [r3, #0]
        return;
 8005268:	e024      	b.n	80052b4 <OS_StatTaskInit+0x98>
    }

    if (OSCfg_StatTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {
 800526a:	4b1c      	ldr	r3, [pc, #112]	; (80052dc <OS_StatTaskInit+0xc0>)
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	2b1e      	cmp	r3, #30
 8005270:	d904      	bls.n	800527c <OS_StatTaskInit+0x60>
       *p_err = OS_ERR_STAT_PRIO_INVALID;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f646 622a 	movw	r2, #28202	; 0x6e2a
 8005278:	801a      	strh	r2, [r3, #0]
        return;
 800527a:	e01b      	b.n	80052b4 <OS_StatTaskInit+0x98>
    }

    OSTaskCreate((OS_TCB     *)&OSStatTaskTCB,
 800527c:	4b17      	ldr	r3, [pc, #92]	; (80052dc <OS_StatTaskInit+0xc0>)
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	4a13      	ldr	r2, [pc, #76]	; (80052d0 <OS_StatTaskInit+0xb4>)
 8005282:	6812      	ldr	r2, [r2, #0]
 8005284:	4916      	ldr	r1, [pc, #88]	; (80052e0 <OS_StatTaskInit+0xc4>)
 8005286:	6809      	ldr	r1, [r1, #0]
 8005288:	4812      	ldr	r0, [pc, #72]	; (80052d4 <OS_StatTaskInit+0xb8>)
 800528a:	6800      	ldr	r0, [r0, #0]
 800528c:	687c      	ldr	r4, [r7, #4]
 800528e:	9408      	str	r4, [sp, #32]
 8005290:	2403      	movs	r4, #3
 8005292:	9407      	str	r4, [sp, #28]
 8005294:	2400      	movs	r4, #0
 8005296:	9406      	str	r4, [sp, #24]
 8005298:	2400      	movs	r4, #0
 800529a:	9405      	str	r4, [sp, #20]
 800529c:	2400      	movs	r4, #0
 800529e:	9404      	str	r4, [sp, #16]
 80052a0:	9003      	str	r0, [sp, #12]
 80052a2:	9102      	str	r1, [sp, #8]
 80052a4:	9201      	str	r2, [sp, #4]
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	2300      	movs	r3, #0
 80052aa:	4a0e      	ldr	r2, [pc, #56]	; (80052e4 <OS_StatTaskInit+0xc8>)
 80052ac:	490e      	ldr	r1, [pc, #56]	; (80052e8 <OS_StatTaskInit+0xcc>)
 80052ae:	480f      	ldr	r0, [pc, #60]	; (80052ec <OS_StatTaskInit+0xd0>)
 80052b0:	f7fd fae6 	bl	8002880 <OSTaskCreate>
                 (OS_MSG_QTY  )0,
                 (OS_TICK     )0,
                 (void       *)0,
                 (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
                 (OS_ERR     *)p_err);
}
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd90      	pop	{r4, r7, pc}
 80052ba:	bf00      	nop
 80052bc:	20002474 	.word	0x20002474
 80052c0:	200028e4 	.word	0x200028e4
 80052c4:	200028d0 	.word	0x200028d0
 80052c8:	200025fd 	.word	0x200025fd
 80052cc:	200028f8 	.word	0x200028f8
 80052d0:	0800ec80 	.word	0x0800ec80
 80052d4:	0800ec88 	.word	0x0800ec88
 80052d8:	0800ec8c 	.word	0x0800ec8c
 80052dc:	0800ec78 	.word	0x0800ec78
 80052e0:	0800ec84 	.word	0x0800ec84
 80052e4:	08004f09 	.word	0x08004f09
 80052e8:	0800eba4 	.word	0x0800eba4
 80052ec:	20002900 	.word	0x20002900

080052f0 <OS_PrioInit>:
* Note       : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_PrioInit (void)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
    CPU_DATA  i;


                                                            /* Clear the bitmap table ... no task is ready            */
    for (i = 0u; i < OS_PRIO_TBL_SIZE; i++) {
 80052f6:	2300      	movs	r3, #0
 80052f8:	607b      	str	r3, [r7, #4]
 80052fa:	e007      	b.n	800530c <OS_PrioInit+0x1c>
         OSPrioTbl[i] = (CPU_DATA)0;
 80052fc:	4a07      	ldr	r2, [pc, #28]	; (800531c <OS_PrioInit+0x2c>)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2100      	movs	r1, #0
 8005302:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
{
    CPU_DATA  i;


                                                            /* Clear the bitmap table ... no task is ready            */
    for (i = 0u; i < OS_PRIO_TBL_SIZE; i++) {
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	3301      	adds	r3, #1
 800530a:	607b      	str	r3, [r7, #4]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d0f4      	beq.n	80052fc <OS_PrioInit+0xc>
         OSPrioTbl[i] = (CPU_DATA)0;
    }
}
 8005312:	bf00      	nop
 8005314:	370c      	adds	r7, #12
 8005316:	46bd      	mov	sp, r7
 8005318:	bc80      	pop	{r7}
 800531a:	4770      	bx	lr
 800531c:	20002464 	.word	0x20002464

08005320 <OS_PrioGetHighest>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

OS_PRIO  OS_PrioGetHighest (void)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
    CPU_DATA  *p_tbl;
    OS_PRIO    prio;


    prio  = (OS_PRIO)0;
 8005326:	2300      	movs	r3, #0
 8005328:	70fb      	strb	r3, [r7, #3]
    p_tbl = &OSPrioTbl[0];
 800532a:	4b0e      	ldr	r3, [pc, #56]	; (8005364 <OS_PrioGetHighest+0x44>)
 800532c:	607b      	str	r3, [r7, #4]
    while (*p_tbl == (CPU_DATA)0) {                         /* Search the bitmap table for the highest priority       */
 800532e:	e005      	b.n	800533c <OS_PrioGetHighest+0x1c>
        prio += DEF_INT_CPU_NBR_BITS;                       /* Compute the step of each CPU_DATA entry                */
 8005330:	78fb      	ldrb	r3, [r7, #3]
 8005332:	3320      	adds	r3, #32
 8005334:	70fb      	strb	r3, [r7, #3]
        p_tbl++;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	3304      	adds	r3, #4
 800533a:	607b      	str	r3, [r7, #4]
    OS_PRIO    prio;


    prio  = (OS_PRIO)0;
    p_tbl = &OSPrioTbl[0];
    while (*p_tbl == (CPU_DATA)0) {                         /* Search the bitmap table for the highest priority       */
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d0f5      	beq.n	8005330 <OS_PrioGetHighest+0x10>
        prio += DEF_INT_CPU_NBR_BITS;                       /* Compute the step of each CPU_DATA entry                */
        p_tbl++;
    }
    prio += (OS_PRIO)CPU_CntLeadZeros(*p_tbl);              /* Find the position of the first bit set at the entry    */
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4618      	mov	r0, r3
 800534a:	f7fa ffd4 	bl	80002f6 <CPU_CntLeadZeros>
 800534e:	4603      	mov	r3, r0
 8005350:	b2da      	uxtb	r2, r3
 8005352:	78fb      	ldrb	r3, [r7, #3]
 8005354:	4413      	add	r3, r2
 8005356:	70fb      	strb	r3, [r7, #3]
    return (prio);
 8005358:	78fb      	ldrb	r3, [r7, #3]
}
 800535a:	4618      	mov	r0, r3
 800535c:	3708      	adds	r7, #8
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	20002464 	.word	0x20002464

08005368 <OS_PrioInsert>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_PrioInsert (OS_PRIO  prio)
{
 8005368:	b480      	push	{r7}
 800536a:	b087      	sub	sp, #28
 800536c:	af00      	add	r7, sp, #0
 800536e:	4603      	mov	r3, r0
 8005370:	71fb      	strb	r3, [r7, #7]
    CPU_DATA  bit;
    CPU_DATA  bit_nbr;
    OS_PRIO   ix;


    ix             = prio / DEF_INT_CPU_NBR_BITS;
 8005372:	79fb      	ldrb	r3, [r7, #7]
 8005374:	095b      	lsrs	r3, r3, #5
 8005376:	75fb      	strb	r3, [r7, #23]
    bit_nbr        = (CPU_DATA)prio & (DEF_INT_CPU_NBR_BITS - 1u);
 8005378:	79fb      	ldrb	r3, [r7, #7]
 800537a:	f003 031f 	and.w	r3, r3, #31
 800537e:	613b      	str	r3, [r7, #16]
    bit            = 1u;
 8005380:	2301      	movs	r3, #1
 8005382:	60fb      	str	r3, [r7, #12]
    bit          <<= (DEF_INT_CPU_NBR_BITS - 1u) - bit_nbr;
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	f1c3 031f 	rsb	r3, r3, #31
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	fa02 f303 	lsl.w	r3, r2, r3
 8005390:	60fb      	str	r3, [r7, #12]
    OSPrioTbl[ix] |= bit;
 8005392:	7dfb      	ldrb	r3, [r7, #23]
 8005394:	7dfa      	ldrb	r2, [r7, #23]
 8005396:	4906      	ldr	r1, [pc, #24]	; (80053b0 <OS_PrioInsert+0x48>)
 8005398:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	430a      	orrs	r2, r1
 80053a0:	4903      	ldr	r1, [pc, #12]	; (80053b0 <OS_PrioInsert+0x48>)
 80053a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80053a6:	bf00      	nop
 80053a8:	371c      	adds	r7, #28
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bc80      	pop	{r7}
 80053ae:	4770      	bx	lr
 80053b0:	20002464 	.word	0x20002464

080053b4 <OS_PrioRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_PrioRemove (OS_PRIO  prio)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b087      	sub	sp, #28
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	4603      	mov	r3, r0
 80053bc:	71fb      	strb	r3, [r7, #7]
    CPU_DATA  bit;
    CPU_DATA  bit_nbr;
    OS_PRIO   ix;


    ix             = prio / DEF_INT_CPU_NBR_BITS;
 80053be:	79fb      	ldrb	r3, [r7, #7]
 80053c0:	095b      	lsrs	r3, r3, #5
 80053c2:	75fb      	strb	r3, [r7, #23]
    bit_nbr        = (CPU_DATA)prio & (DEF_INT_CPU_NBR_BITS - 1u);
 80053c4:	79fb      	ldrb	r3, [r7, #7]
 80053c6:	f003 031f 	and.w	r3, r3, #31
 80053ca:	613b      	str	r3, [r7, #16]
    bit            = 1u;
 80053cc:	2301      	movs	r3, #1
 80053ce:	60fb      	str	r3, [r7, #12]
    bit          <<= (DEF_INT_CPU_NBR_BITS - 1u) - bit_nbr;
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	f1c3 031f 	rsb	r3, r3, #31
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	fa02 f303 	lsl.w	r3, r2, r3
 80053dc:	60fb      	str	r3, [r7, #12]
    OSPrioTbl[ix] &= ~bit;
 80053de:	7dfb      	ldrb	r3, [r7, #23]
 80053e0:	7dfa      	ldrb	r2, [r7, #23]
 80053e2:	4907      	ldr	r1, [pc, #28]	; (8005400 <OS_PrioRemove+0x4c>)
 80053e4:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	43d2      	mvns	r2, r2
 80053ec:	400a      	ands	r2, r1
 80053ee:	4904      	ldr	r1, [pc, #16]	; (8005400 <OS_PrioRemove+0x4c>)
 80053f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80053f4:	bf00      	nop
 80053f6:	371c      	adds	r7, #28
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bc80      	pop	{r7}
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	20002464 	.word	0x20002464

08005404 <OSTimeDly>:
*/

void  OSTimeDly (OS_TICK   dly,
                 OS_OPT    opt,
                 OS_ERR   *p_err)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b086      	sub	sp, #24
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	460b      	mov	r3, r1
 800540e:	607a      	str	r2, [r7, #4]
 8005410:	817b      	strh	r3, [r7, #10]
    CPU_SR_ALLOC();
 8005412:	2300      	movs	r3, #0
 8005414:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0u) {             /* Not allowed to call from an ISR                        */
 8005416:	4b2e      	ldr	r3, [pc, #184]	; (80054d0 <OSTimeDly+0xcc>)
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d004      	beq.n	8005428 <OSTimeDly+0x24>
       *p_err = OS_ERR_TIME_DLY_ISR;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f247 2275 	movw	r2, #29301	; 0x7275
 8005424:	801a      	strh	r2, [r3, #0]
        return;
 8005426:	e050      	b.n	80054ca <OSTimeDly+0xc6>
    }
#endif

    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0u) {       /* Can't delay when the scheduler is locked               */
 8005428:	4b2a      	ldr	r3, [pc, #168]	; (80054d4 <OSTimeDly+0xd0>)
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d004      	beq.n	800543a <OSTimeDly+0x36>
       *p_err = OS_ERR_SCHED_LOCKED;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f646 5263 	movw	r2, #28003	; 0x6d63
 8005436:	801a      	strh	r2, [r3, #0]
        return;
 8005438:	e047      	b.n	80054ca <OSTimeDly+0xc6>
    }

    switch (opt) {
 800543a:	897b      	ldrh	r3, [r7, #10]
 800543c:	2b08      	cmp	r3, #8
 800543e:	d81d      	bhi.n	800547c <OSTimeDly+0x78>
 8005440:	a201      	add	r2, pc, #4	; (adr r2, 8005448 <OSTimeDly+0x44>)
 8005442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005446:	bf00      	nop
 8005448:	0800546d 	.word	0x0800546d
 800544c:	0800547d 	.word	0x0800547d
 8005450:	0800546d 	.word	0x0800546d
 8005454:	0800547d 	.word	0x0800547d
 8005458:	08005487 	.word	0x08005487
 800545c:	0800547d 	.word	0x0800547d
 8005460:	0800547d 	.word	0x0800547d
 8005464:	0800547d 	.word	0x0800547d
 8005468:	0800546d 	.word	0x0800546d
        case OS_OPT_TIME_DLY:
        case OS_OPT_TIME_TIMEOUT:
        case OS_OPT_TIME_PERIODIC:
             if (dly == (OS_TICK)0u) {                      /* 0 means no delay!                                      */
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10b      	bne.n	800548a <OSTimeDly+0x86>
                *p_err = OS_ERR_TIME_ZERO_DLY;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f247 227e 	movw	r2, #29310	; 0x727e
 8005478:	801a      	strh	r2, [r3, #0]
                 return;
 800547a:	e026      	b.n	80054ca <OSTimeDly+0xc6>

        case OS_OPT_TIME_MATCH:
             break;

        default:
            *p_err = OS_ERR_OPT_INVALID;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f645 6225 	movw	r2, #24101	; 0x5e25
 8005482:	801a      	strh	r2, [r3, #0]
             return;
 8005484:	e021      	b.n	80054ca <OSTimeDly+0xc6>
                 return;
             }
             break;

        case OS_OPT_TIME_MATCH:
             break;
 8005486:	bf00      	nop
 8005488:	e000      	b.n	800548c <OSTimeDly+0x88>
        case OS_OPT_TIME_PERIODIC:
             if (dly == (OS_TICK)0u) {                      /* 0 means no delay!                                      */
                *p_err = OS_ERR_TIME_ZERO_DLY;
                 return;
             }
             break;
 800548a:	bf00      	nop
        default:
            *p_err = OS_ERR_OPT_INVALID;
             return;
    }

    OS_CRITICAL_ENTER();
 800548c:	f7fa ff28 	bl	80002e0 <CPU_SR_Save>
 8005490:	6178      	str	r0, [r7, #20]
    OS_TickListInsertDly(OSTCBCurPtr,
 8005492:	4b11      	ldr	r3, [pc, #68]	; (80054d8 <OSTimeDly+0xd4>)
 8005494:	6818      	ldr	r0, [r3, #0]
 8005496:	897a      	ldrh	r2, [r7, #10]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	68f9      	ldr	r1, [r7, #12]
 800549c:	f7ff fa06 	bl	80048ac <OS_TickListInsertDly>
                         dly,
                         opt,
                         p_err);
    if (*p_err != OS_ERR_NONE) {
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	881b      	ldrh	r3, [r3, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d003      	beq.n	80054b0 <OSTimeDly+0xac>
         OS_CRITICAL_EXIT_NO_SCHED();
 80054a8:	6978      	ldr	r0, [r7, #20]
 80054aa:	f7fa ff1d 	bl	80002e8 <CPU_SR_Restore>
         return;
 80054ae:	e00c      	b.n	80054ca <OSTimeDly+0xc6>
    }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_TASK_DLY(dly);                                 /* Record the event.                                      */
#endif
    OS_RdyListRemove(OSTCBCurPtr);                          /* Remove current task from ready list                    */
 80054b0:	4b09      	ldr	r3, [pc, #36]	; (80054d8 <OSTimeDly+0xd4>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7ff f811 	bl	80044dc <OS_RdyListRemove>
    OS_CRITICAL_EXIT_NO_SCHED();
 80054ba:	6978      	ldr	r0, [r7, #20]
 80054bc:	f7fa ff14 	bl	80002e8 <CPU_SR_Restore>
    OSSched();                                              /* Find next task to run!                                 */
 80054c0:	f7fe fb16 	bl	8003af0 <OSSched>
   *p_err = OS_ERR_NONE;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	801a      	strh	r2, [r3, #0]
}
 80054ca:	3718      	adds	r7, #24
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	20002700 	.word	0x20002700
 80054d4:	20002468 	.word	0x20002468
 80054d8:	200026d4 	.word	0x200026d4

080054dc <OSTimeTick>:
* Returns    : none
************************************************************************************************************************
*/

void  OSTimeTick (void)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
#if OS_CFG_ISR_POST_DEFERRED_EN > 0u
    CPU_TS  ts;
#endif


    OSTimeTickHook();                                       /* Call user definable hook                               */
 80054e2:	f000 fff7 	bl	80064d4 <OSTimeTickHook>
                (CPU_TS     ) ts,
                (OS_ERR    *)&err);

#else

   (void)OSTaskSemPost((OS_TCB *)&OSTickTaskTCB,            /* Signal tick task                                       */
 80054e6:	1dbb      	adds	r3, r7, #6
 80054e8:	461a      	mov	r2, r3
 80054ea:	2100      	movs	r1, #0
 80054ec:	480c      	ldr	r0, [pc, #48]	; (8005520 <OSTimeTick+0x44>)
 80054ee:	f7fd fbe7 	bl	8002cc0 <OSTaskSemPost>
#if OS_CFG_SCHED_ROUND_ROBIN_EN > 0u
    OS_SchedRoundRobin(&OSRdyList[OSPrioCur]);
#endif

#if OS_CFG_TMR_EN > 0u
    OSTmrUpdateCtr--;
 80054f2:	4b0c      	ldr	r3, [pc, #48]	; (8005524 <OSTimeTick+0x48>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	3b01      	subs	r3, #1
 80054f8:	4a0a      	ldr	r2, [pc, #40]	; (8005524 <OSTimeTick+0x48>)
 80054fa:	6013      	str	r3, [r2, #0]
    if (OSTmrUpdateCtr == (OS_CTR)0u) {
 80054fc:	4b09      	ldr	r3, [pc, #36]	; (8005524 <OSTimeTick+0x48>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d109      	bne.n	8005518 <OSTimeTick+0x3c>
        OSTmrUpdateCtr = OSTmrUpdateCnt;
 8005504:	4b08      	ldr	r3, [pc, #32]	; (8005528 <OSTimeTick+0x4c>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a06      	ldr	r2, [pc, #24]	; (8005524 <OSTimeTick+0x48>)
 800550a:	6013      	str	r3, [r2, #0]
        OSTaskSemPost((OS_TCB *)&OSTmrTaskTCB,              /* Signal timer task                                      */
 800550c:	1dbb      	adds	r3, r7, #6
 800550e:	461a      	mov	r2, r3
 8005510:	2100      	movs	r1, #0
 8005512:	4806      	ldr	r0, [pc, #24]	; (800552c <OSTimeTick+0x50>)
 8005514:	f7fd fbd4 	bl	8002cc0 <OSTaskSemPost>
                      (OS_ERR *)&err);
    }
#endif

#endif
}
 8005518:	bf00      	nop
 800551a:	3708      	adds	r7, #8
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	2000260c 	.word	0x2000260c
 8005524:	200029e0 	.word	0x200029e0
 8005528:	200029d0 	.word	0x200029d0
 800552c:	20002704 	.word	0x20002704

08005530 <OSCfg_Init>:
*                  DOES NOT optimize out the 'const' variables above.
************************************************************************************************************************
*/

void  OSCfg_Init (void)
{
 8005530:	b480      	push	{r7}
 8005532:	af00      	add	r7, sp, #0
    (void)&OSCfg_TmrTaskStkBasePtr;
    (void)&OSCfg_TmrTaskStkLimit;
    (void)&OSCfg_TmrTaskStkSize;
    (void)&OSCfg_TmrTaskStkSizeRAM;
#endif
}
 8005534:	bf00      	nop
 8005536:	46bd      	mov	sp, r7
 8005538:	bc80      	pop	{r7}
 800553a:	4770      	bx	lr

0800553c <OS_SemInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_SemInit (OS_ERR  *p_err)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSSemDbgListPtr = (OS_SEM *)0;
 8005544:	4b06      	ldr	r3, [pc, #24]	; (8005560 <OS_SemInit+0x24>)
 8005546:	2200      	movs	r2, #0
 8005548:	601a      	str	r2, [r3, #0]
#endif

    OSSemQty        = (OS_OBJ_QTY)0;
 800554a:	4b06      	ldr	r3, [pc, #24]	; (8005564 <OS_SemInit+0x28>)
 800554c:	2200      	movs	r2, #0
 800554e:	801a      	strh	r2, [r3, #0]
   *p_err           = OS_ERR_NONE;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	801a      	strh	r2, [r3, #0]
}
 8005556:	bf00      	nop
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	bc80      	pop	{r7}
 800555e:	4770      	bx	lr
 8005560:	20002600 	.word	0x20002600
 8005564:	20002894 	.word	0x20002894

08005568 <OSMutexCreate>:
*/

void  OSMutexCreate (OS_MUTEX  *p_mutex,
                     CPU_CHAR  *p_name,
                     OS_ERR    *p_err)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b086      	sub	sp, #24
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]
    CPU_SR_ALLOC();
 8005574:	2300      	movs	r3, #0
 8005576:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to be called from an ISR                   */
 8005578:	4b1e      	ldr	r3, [pc, #120]	; (80055f4 <OSMutexCreate+0x8c>)
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d004      	beq.n	800558a <OSMutexCreate+0x22>
       *p_err = OS_ERR_CREATE_ISR;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f642 62e1 	movw	r2, #12001	; 0x2ee1
 8005586:	801a      	strh	r2, [r3, #0]
        return;
 8005588:	e031      	b.n	80055ee <OSMutexCreate+0x86>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_mutex == (OS_MUTEX *)0) {                         /* Validate 'p_mutex'                                     */
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d104      	bne.n	800559a <OSMutexCreate+0x32>
       *p_err = OS_ERR_OBJ_PTR_NULL;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f645 52c3 	movw	r2, #24003	; 0x5dc3
 8005596:	801a      	strh	r2, [r3, #0]
        return;
 8005598:	e029      	b.n	80055ee <OSMutexCreate+0x86>
    }
#endif

    OS_CRITICAL_ENTER();
 800559a:	f7fa fea1 	bl	80002e0 <CPU_SR_Save>
 800559e:	6178      	str	r0, [r7, #20]
#if OS_OBJ_TYPE_REQ > 0u
    p_mutex->Type              =  OS_OBJ_TYPE_MUTEX;        /* Mark the data structure as a mutex                     */
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	4a15      	ldr	r2, [pc, #84]	; (80055f8 <OSMutexCreate+0x90>)
 80055a4:	601a      	str	r2, [r3, #0]
#endif
#if OS_CFG_DBG_EN > 0u
    p_mutex->NamePtr           =  p_name;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	68ba      	ldr	r2, [r7, #8]
 80055aa:	605a      	str	r2, [r3, #4]
#else
    (void)&p_name;
#endif
    p_mutex->MutexGrpNextPtr   = (OS_MUTEX     *)0;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	621a      	str	r2, [r3, #32]
    p_mutex->OwnerTCBPtr       = (OS_TCB       *)0;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	625a      	str	r2, [r3, #36]	; 0x24
    p_mutex->OwnerNestingCtr   = (OS_NESTING_CTR)0;         /* Mutex is available                                     */
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    p_mutex->TS                = (CPU_TS        )0;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	62da      	str	r2, [r3, #44]	; 0x2c
    OS_PendListInit(&p_mutex->PendList);                    /* Initialize the waiting list                            */
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	3308      	adds	r3, #8
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7fe fd02 	bl	8003fd4 <OS_PendListInit>

#if OS_CFG_DBG_EN > 0u
    OS_MutexDbgListAdd(p_mutex);
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	f000 f9f9 	bl	80059c8 <OS_MutexDbgListAdd>
#endif

    OSMutexQty++;
 80055d6:	4b09      	ldr	r3, [pc, #36]	; (80055fc <OSMutexCreate+0x94>)
 80055d8:	881b      	ldrh	r3, [r3, #0]
 80055da:	3301      	adds	r3, #1
 80055dc:	b29a      	uxth	r2, r3
 80055de:	4b07      	ldr	r3, [pc, #28]	; (80055fc <OSMutexCreate+0x94>)
 80055e0:	801a      	strh	r2, [r3, #0]

#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_MUTEX_CREATE(p_mutex, p_name);                 /* Record the event.                                      */
#endif

    OS_CRITICAL_EXIT_NO_SCHED();
 80055e2:	6978      	ldr	r0, [r7, #20]
 80055e4:	f7fa fe80 	bl	80002e8 <CPU_SR_Restore>
   *p_err = OS_ERR_NONE;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	801a      	strh	r2, [r3, #0]
}
 80055ee:	3718      	adds	r7, #24
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	20002700 	.word	0x20002700
 80055f8:	5854554d 	.word	0x5854554d
 80055fc:	200028fc 	.word	0x200028fc

08005600 <OSMutexPend>:
void  OSMutexPend (OS_MUTEX  *p_mutex,
                   OS_TICK    timeout,
                   OS_OPT     opt,
                   CPU_TS    *p_ts,
                   OS_ERR    *p_err)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b08e      	sub	sp, #56	; 0x38
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	603b      	str	r3, [r7, #0]
 800560c:	4613      	mov	r3, r2
 800560e:	80fb      	strh	r3, [r7, #6]
    OS_PEND_DATA  pend_data;
    OS_TCB       *p_tcb;
    CPU_SR_ALLOC();
 8005610:	2300      	movs	r3, #0
 8005612:	637b      	str	r3, [r7, #52]	; 0x34
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 8005614:	4b7a      	ldr	r3, [pc, #488]	; (8005800 <OSMutexPend+0x200>)
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d004      	beq.n	8005626 <OSMutexPend+0x26>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_PEND_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_PEND_ISR;
 800561c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800561e:	f246 12ae 	movw	r2, #25006	; 0x61ae
 8005622:	801a      	strh	r2, [r3, #0]
        return;
 8005624:	e0e9      	b.n	80057fa <OSMutexPend+0x1fa>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_mutex == (OS_MUTEX *)0) {                         /* Validate arguments                                     */
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d104      	bne.n	8005636 <OSMutexPend+0x36>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_PEND_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_PTR_NULL;
 800562c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800562e:	f645 52c3 	movw	r2, #24003	; 0x5dc3
 8005632:	801a      	strh	r2, [r3, #0]
        return;
 8005634:	e0e1      	b.n	80057fa <OSMutexPend+0x1fa>
    }
    switch (opt) {                                          /* Validate 'opt'                                         */
 8005636:	88fb      	ldrh	r3, [r7, #6]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d007      	beq.n	800564c <OSMutexPend+0x4c>
 800563c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005640:	d004      	beq.n	800564c <OSMutexPend+0x4c>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_MUTEX_PEND_FAILED(p_mutex);           /* Record the event.                                      */
#endif
            *p_err = OS_ERR_OPT_INVALID;
 8005642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005644:	f645 6225 	movw	r2, #24101	; 0x5e25
 8005648:	801a      	strh	r2, [r3, #0]
             return;
 800564a:	e0d6      	b.n	80057fa <OSMutexPend+0x1fa>
        return;
    }
    switch (opt) {                                          /* Validate 'opt'                                         */
        case OS_OPT_PEND_BLOCKING:
        case OS_OPT_PEND_NON_BLOCKING:
             break;
 800564c:	bf00      	nop
             return;
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_mutex->Type != OS_OBJ_TYPE_MUTEX) {               /* Make sure mutex was created                            */
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a6c      	ldr	r2, [pc, #432]	; (8005804 <OSMutexPend+0x204>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d004      	beq.n	8005662 <OSMutexPend+0x62>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_PEND_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_TYPE;
 8005658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800565a:	f645 52c4 	movw	r2, #24004	; 0x5dc4
 800565e:	801a      	strh	r2, [r3, #0]
        return;
 8005660:	e0cb      	b.n	80057fa <OSMutexPend+0x1fa>
    }
#endif

    if (p_ts != (CPU_TS *)0) {
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d002      	beq.n	800566e <OSMutexPend+0x6e>
       *p_ts  = (CPU_TS  )0;                                /* Initialize the returned timestamp                      */
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	2200      	movs	r2, #0
 800566c:	601a      	str	r2, [r3, #0]
    }

    CPU_CRITICAL_ENTER();
 800566e:	f7fa fe37 	bl	80002e0 <CPU_SR_Save>
 8005672:	6378      	str	r0, [r7, #52]	; 0x34
    if (p_mutex->OwnerNestingCtr == (OS_NESTING_CTR)0) {    /* Resource available?                                    */
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800567a:	2b00      	cmp	r3, #0
 800567c:	d11b      	bne.n	80056b6 <OSMutexPend+0xb6>
        p_mutex->OwnerTCBPtr       =  OSTCBCurPtr;          /* Yes, caller may proceed                                */
 800567e:	4b62      	ldr	r3, [pc, #392]	; (8005808 <OSMutexPend+0x208>)
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	625a      	str	r2, [r3, #36]	; 0x24
        p_mutex->OwnerNestingCtr   = (OS_NESTING_CTR)1;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2201      	movs	r2, #1
 800568a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        if (p_ts != (CPU_TS *)0) {
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d003      	beq.n	800569c <OSMutexPend+0x9c>
           *p_ts  = p_mutex->TS;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	601a      	str	r2, [r3, #0]
        }
        OS_MutexGrpAdd(OSTCBCurPtr, p_mutex);               /* Add mutex to owner's group                             */
 800569c:	4b5a      	ldr	r3, [pc, #360]	; (8005808 <OSMutexPend+0x208>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68f9      	ldr	r1, [r7, #12]
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 f9cc 	bl	8005a40 <OS_MutexGrpAdd>
        CPU_CRITICAL_EXIT();
 80056a8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80056aa:	f7fa fe1d 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_PEND(p_mutex);                       /* Record the event.                                      */
#endif
       *p_err = OS_ERR_NONE;
 80056ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056b0:	2200      	movs	r2, #0
 80056b2:	801a      	strh	r2, [r3, #0]
        return;
 80056b4:	e0a1      	b.n	80057fa <OSMutexPend+0x1fa>
    }

    if (OSTCBCurPtr == p_mutex->OwnerTCBPtr) {              /* See if current task is already the owner of the mutex  */
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056ba:	4b53      	ldr	r3, [pc, #332]	; (8005808 <OSMutexPend+0x208>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d116      	bne.n	80056f0 <OSMutexPend+0xf0>
        p_mutex->OwnerNestingCtr++;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056c8:	3301      	adds	r3, #1
 80056ca:	b2da      	uxtb	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        if (p_ts != (CPU_TS *)0) {
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d003      	beq.n	80056e0 <OSMutexPend+0xe0>
           *p_ts  = p_mutex->TS;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	601a      	str	r2, [r3, #0]
        }
        CPU_CRITICAL_EXIT();
 80056e0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80056e2:	f7fa fe01 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_PEND_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_MUTEX_OWNER;                         /* Indicate that current task already owns the mutex      */
 80056e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056e8:	f245 7282 	movw	r2, #22402	; 0x5782
 80056ec:	801a      	strh	r2, [r3, #0]
        return;
 80056ee:	e084      	b.n	80057fa <OSMutexPend+0x1fa>
    }

    if ((opt & OS_OPT_PEND_NON_BLOCKING) != (OS_OPT)0) {    /* Caller wants to block if not available?                */
 80056f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	da07      	bge.n	8005708 <OSMutexPend+0x108>
        CPU_CRITICAL_EXIT();
 80056f8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80056fa:	f7fa fdf5 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_PEND_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_PEND_WOULD_BLOCK;                    /* No                                                     */
 80056fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005700:	f246 12b0 	movw	r2, #25008	; 0x61b0
 8005704:	801a      	strh	r2, [r3, #0]
        return;
 8005706:	e078      	b.n	80057fa <OSMutexPend+0x1fa>
    } else {
        if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /* Can't pend when the scheduler is locked                */
 8005708:	4b40      	ldr	r3, [pc, #256]	; (800580c <OSMutexPend+0x20c>)
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d007      	beq.n	8005720 <OSMutexPend+0x120>
            CPU_CRITICAL_EXIT();
 8005710:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005712:	f7fa fde9 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
            TRACE_OS_MUTEX_PEND_FAILED(p_mutex);            /* Record the event.                                      */
#endif
           *p_err = OS_ERR_SCHED_LOCKED;
 8005716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005718:	f646 5263 	movw	r2, #28003	; 0x6d63
 800571c:	801a      	strh	r2, [r3, #0]
            return;
 800571e:	e06c      	b.n	80057fa <OSMutexPend+0x1fa>
        }
    }
                                                            /* Lock the scheduler/re-enable interrupts                */
    OS_CRITICAL_ENTER_CPU_EXIT();
    p_tcb = p_mutex->OwnerTCBPtr;                           /* Point to the TCB of the Mutex owner                    */
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005724:	633b      	str	r3, [r7, #48]	; 0x30
    if (p_tcb->Prio > OSTCBCurPtr->Prio) {                  /* See if mutex owner has a lower priority than current   */
 8005726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005728:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 800572c:	4b36      	ldr	r3, [pc, #216]	; (8005808 <OSMutexPend+0x208>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8005734:	429a      	cmp	r2, r3
 8005736:	d907      	bls.n	8005748 <OSMutexPend+0x148>
        OS_TaskChangePrio(p_tcb, OSTCBCurPtr->Prio);
 8005738:	4b33      	ldr	r3, [pc, #204]	; (8005808 <OSMutexPend+0x208>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8005740:	4619      	mov	r1, r3
 8005742:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005744:	f7fd fe50 	bl	80033e8 <OS_TaskChangePrio>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
                 TRACE_OS_MUTEX_TASK_PRIO_INHERIT(p_tcb, p_tcb->Prio);
#endif
    }

    OS_Pend(&pend_data,                                     /* Block task pending on Mutex                            */
 8005748:	f107 0010 	add.w	r0, r7, #16
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	2204      	movs	r2, #4
 8005750:	68f9      	ldr	r1, [r7, #12]
 8005752:	f7fe fb39 	bl	8003dc8 <OS_Pend>
            (OS_PEND_OBJ *)((void *)p_mutex),
             OS_TASK_PEND_ON_MUTEX,
             timeout);

    OS_CRITICAL_EXIT_NO_SCHED();
 8005756:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005758:	f7fa fdc6 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_MUTEX_PEND_BLOCK(p_mutex);                     /* Record the event.                                      */
#endif
    OSSched();                                              /* Find the next highest priority task ready to run       */
 800575c:	f7fe f9c8 	bl	8003af0 <OSSched>

    CPU_CRITICAL_ENTER();
 8005760:	f7fa fdbe 	bl	80002e0 <CPU_SR_Save>
 8005764:	6378      	str	r0, [r7, #52]	; 0x34
    switch (OSTCBCurPtr->PendStatus) {
 8005766:	4b28      	ldr	r3, [pc, #160]	; (8005808 <OSMutexPend+0x208>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800576e:	2b03      	cmp	r3, #3
 8005770:	d83b      	bhi.n	80057ea <OSMutexPend+0x1ea>
 8005772:	a201      	add	r2, pc, #4	; (adr r2, 8005778 <OSMutexPend+0x178>)
 8005774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005778:	08005789 	.word	0x08005789
 800577c:	080057a1 	.word	0x080057a1
 8005780:	080057d1 	.word	0x080057d1
 8005784:	080057bb 	.word	0x080057bb
        case OS_STATUS_PEND_OK:                             /* We got the mutex                                       */
             if (p_ts != (CPU_TS *)0) {
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d004      	beq.n	8005798 <OSMutexPend+0x198>
                *p_ts  = OSTCBCurPtr->TS;
 800578e:	4b1e      	ldr	r3, [pc, #120]	; (8005808 <OSMutexPend+0x208>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_MUTEX_PEND(p_mutex);                  /* Record the event.                                      */
#endif
            *p_err = OS_ERR_NONE;
 8005798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800579a:	2200      	movs	r2, #0
 800579c:	801a      	strh	r2, [r3, #0]
             break;
 800579e:	e029      	b.n	80057f4 <OSMutexPend+0x1f4>

        case OS_STATUS_PEND_ABORT:                          /* Indicate that we aborted                               */
             if (p_ts != (CPU_TS *)0) {
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d004      	beq.n	80057b0 <OSMutexPend+0x1b0>
                *p_ts  = OSTCBCurPtr->TS;
 80057a6:	4b18      	ldr	r3, [pc, #96]	; (8005808 <OSMutexPend+0x208>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_MUTEX_PEND_FAILED(p_mutex);           /* Record the event.                                      */
#endif
            *p_err = OS_ERR_PEND_ABORT;
 80057b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057b2:	f246 12a9 	movw	r2, #25001	; 0x61a9
 80057b6:	801a      	strh	r2, [r3, #0]
             break;
 80057b8:	e01c      	b.n	80057f4 <OSMutexPend+0x1f4>

        case OS_STATUS_PEND_TIMEOUT:                        /* Indicate that we didn't get mutex within timeout       */
             if (p_ts != (CPU_TS *)0) {
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d002      	beq.n	80057c6 <OSMutexPend+0x1c6>
                *p_ts  = (CPU_TS  )0;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	2200      	movs	r2, #0
 80057c4:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_MUTEX_PEND_FAILED(p_mutex);           /* Record the event.                                      */
#endif
            *p_err = OS_ERR_TIMEOUT;
 80057c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057c8:	f247 22d9 	movw	r2, #29401	; 0x72d9
 80057cc:	801a      	strh	r2, [r3, #0]
             break;
 80057ce:	e011      	b.n	80057f4 <OSMutexPend+0x1f4>

        case OS_STATUS_PEND_DEL:                            /* Indicate that object pended on has been deleted        */
             if (p_ts != (CPU_TS *)0) {
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d004      	beq.n	80057e0 <OSMutexPend+0x1e0>
                *p_ts  = OSTCBCurPtr->TS;
 80057d6:	4b0c      	ldr	r3, [pc, #48]	; (8005808 <OSMutexPend+0x208>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_MUTEX_PEND_FAILED(p_mutex);           /* Record the event.                                      */
#endif
            *p_err = OS_ERR_OBJ_DEL;
 80057e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057e2:	f645 52c2 	movw	r2, #24002	; 0x5dc2
 80057e6:	801a      	strh	r2, [r3, #0]
             break;
 80057e8:	e004      	b.n	80057f4 <OSMutexPend+0x1f4>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_MUTEX_PEND_FAILED(p_mutex);           /* Record the event.                                      */
#endif
            *p_err = OS_ERR_STATUS_INVALID;
 80057ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057ec:	f646 622e 	movw	r2, #28206	; 0x6e2e
 80057f0:	801a      	strh	r2, [r3, #0]
             break;
 80057f2:	bf00      	nop
    }
    CPU_CRITICAL_EXIT();
 80057f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80057f6:	f7fa fd77 	bl	80002e8 <CPU_SR_Restore>
}
 80057fa:	3738      	adds	r7, #56	; 0x38
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	20002700 	.word	0x20002700
 8005804:	5854554d 	.word	0x5854554d
 8005808:	200026d4 	.word	0x200026d4
 800580c:	20002468 	.word	0x20002468

08005810 <OSMutexPost>:
*/

void  OSMutexPost (OS_MUTEX  *p_mutex,
                   OS_OPT     opt,
                   OS_ERR    *p_err)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b08c      	sub	sp, #48	; 0x30
 8005814:	af02      	add	r7, sp, #8
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	460b      	mov	r3, r1
 800581a:	607a      	str	r2, [r7, #4]
 800581c:	817b      	strh	r3, [r7, #10]
    OS_PEND_LIST  *p_pend_list;
    OS_TCB        *p_tcb;
    CPU_TS         ts;
    OS_PRIO        prio_new;
    CPU_SR_ALLOC();
 800581e:	2300      	movs	r3, #0
 8005820:	627b      	str	r3, [r7, #36]	; 0x24
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 8005822:	4b65      	ldr	r3, [pc, #404]	; (80059b8 <OSMutexPost+0x1a8>)
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d004      	beq.n	8005834 <OSMutexPost+0x24>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_POST_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_POST_ISR;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f246 220e 	movw	r2, #25102	; 0x620e
 8005830:	801a      	strh	r2, [r3, #0]
        return;
 8005832:	e0be      	b.n	80059b2 <OSMutexPost+0x1a2>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_mutex == (OS_MUTEX *)0) {                         /* Validate 'p_mutex'                                     */
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d104      	bne.n	8005844 <OSMutexPost+0x34>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_POST_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_PTR_NULL;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f645 52c3 	movw	r2, #24003	; 0x5dc3
 8005840:	801a      	strh	r2, [r3, #0]
        return;
 8005842:	e0b6      	b.n	80059b2 <OSMutexPost+0x1a2>
    }
    switch (opt) {                                          /* Validate 'opt'                                         */
 8005844:	897b      	ldrh	r3, [r7, #10]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d007      	beq.n	800585a <OSMutexPost+0x4a>
 800584a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800584e:	d004      	beq.n	800585a <OSMutexPost+0x4a>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_MUTEX_POST_FAILED(p_mutex);           /* Record the event.                                      */
#endif
            *p_err =  OS_ERR_OPT_INVALID;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f645 6225 	movw	r2, #24101	; 0x5e25
 8005856:	801a      	strh	r2, [r3, #0]
             return;
 8005858:	e0ab      	b.n	80059b2 <OSMutexPost+0x1a2>
        return;
    }
    switch (opt) {                                          /* Validate 'opt'                                         */
        case OS_OPT_POST_NONE:
        case OS_OPT_POST_NO_SCHED:
             break;
 800585a:	bf00      	nop
             return;
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_mutex->Type != OS_OBJ_TYPE_MUTEX) {               /* Make sure mutex was created                            */
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a56      	ldr	r2, [pc, #344]	; (80059bc <OSMutexPost+0x1ac>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d004      	beq.n	8005870 <OSMutexPost+0x60>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_POST_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_TYPE;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f645 52c4 	movw	r2, #24004	; 0x5dc4
 800586c:	801a      	strh	r2, [r3, #0]
        return;
 800586e:	e0a0      	b.n	80059b2 <OSMutexPost+0x1a2>
    }
#endif

    CPU_CRITICAL_ENTER();
 8005870:	f7fa fd36 	bl	80002e0 <CPU_SR_Save>
 8005874:	6278      	str	r0, [r7, #36]	; 0x24
    if (OSTCBCurPtr != p_mutex->OwnerTCBPtr) {              /* Make sure the mutex owner is releasing the mutex       */
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800587a:	4b51      	ldr	r3, [pc, #324]	; (80059c0 <OSMutexPost+0x1b0>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	429a      	cmp	r2, r3
 8005880:	d007      	beq.n	8005892 <OSMutexPost+0x82>
        CPU_CRITICAL_EXIT();
 8005882:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005884:	f7fa fd30 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_POST_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_MUTEX_NOT_OWNER;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f245 7281 	movw	r2, #22401	; 0x5781
 800588e:	801a      	strh	r2, [r3, #0]
        return;
 8005890:	e08f      	b.n	80059b2 <OSMutexPost+0x1a2>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_MUTEX_POST(p_mutex);                           /* Record the event.                                      */
#endif

    OS_CRITICAL_ENTER_CPU_EXIT();
    ts          = OS_TS_GET();                              /* Get timestamp                                          */
 8005892:	f002 f86b 	bl	800796c <CPU_TS_TmrRd>
 8005896:	6238      	str	r0, [r7, #32]
    p_mutex->TS = ts;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6a3a      	ldr	r2, [r7, #32]
 800589c:	62da      	str	r2, [r3, #44]	; 0x2c
    p_mutex->OwnerNestingCtr--;                             /* Decrement owner's nesting counter                      */
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058a4:	3b01      	subs	r3, #1
 80058a6:	b2da      	uxtb	r2, r3
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (p_mutex->OwnerNestingCtr > (OS_NESTING_CTR)0) {     /* Are we done with all nestings?                         */
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d007      	beq.n	80058c8 <OSMutexPost+0xb8>
        OS_CRITICAL_EXIT();                                 /* No                                                     */
 80058b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058ba:	f7fa fd15 	bl	80002e8 <CPU_SR_Restore>
       *p_err = OS_ERR_MUTEX_NESTING;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f245 7283 	movw	r2, #22403	; 0x5783
 80058c4:	801a      	strh	r2, [r3, #0]
        return;
 80058c6:	e074      	b.n	80059b2 <OSMutexPost+0x1a2>
    }

    OS_MutexGrpRemove(OSTCBCurPtr, p_mutex);                /* Remove mutex from owner's group                        */
 80058c8:	4b3d      	ldr	r3, [pc, #244]	; (80059c0 <OSMutexPost+0x1b0>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68f9      	ldr	r1, [r7, #12]
 80058ce:	4618      	mov	r0, r3
 80058d0:	f000 f8c8 	bl	8005a64 <OS_MutexGrpRemove>

    p_pend_list = &p_mutex->PendList;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	3308      	adds	r3, #8
 80058d8:	61fb      	str	r3, [r7, #28]
    if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0) {         /* Any task waiting on mutex?                             */
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	891b      	ldrh	r3, [r3, #8]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d10d      	bne.n	80058fe <OSMutexPost+0xee>
        p_mutex->OwnerTCBPtr     = (OS_TCB       *)0;       /* No                                                     */
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	625a      	str	r2, [r3, #36]	; 0x24
        p_mutex->OwnerNestingCtr = (OS_NESTING_CTR)0;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        OS_CRITICAL_EXIT();
 80058f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058f2:	f7fa fcf9 	bl	80002e8 <CPU_SR_Restore>
       *p_err = OS_ERR_NONE;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	801a      	strh	r2, [r3, #0]
        return;
 80058fc:	e059      	b.n	80059b2 <OSMutexPost+0x1a2>
    }
                                                            /* Yes                                                    */
    if (OSTCBCurPtr->Prio != OSTCBCurPtr->BasePrio) {       /* Has owner inherited a priority?                        */
 80058fe:	4b30      	ldr	r3, [pc, #192]	; (80059c0 <OSMutexPost+0x1b0>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8005906:	4b2e      	ldr	r3, [pc, #184]	; (80059c0 <OSMutexPost+0x1b0>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800590e:	429a      	cmp	r2, r3
 8005910:	d02c      	beq.n	800596c <OSMutexPost+0x15c>
        prio_new = OS_MutexGrpPrioFindHighest(OSTCBCurPtr); /* Yes, find highest priority pending                     */
 8005912:	4b2b      	ldr	r3, [pc, #172]	; (80059c0 <OSMutexPost+0x1b0>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4618      	mov	r0, r3
 8005918:	f000 f8c0 	bl	8005a9c <OS_MutexGrpPrioFindHighest>
 800591c:	4603      	mov	r3, r0
 800591e:	76fb      	strb	r3, [r7, #27]
        prio_new = prio_new > OSTCBCurPtr->BasePrio ? OSTCBCurPtr->BasePrio : prio_new;
 8005920:	4b27      	ldr	r3, [pc, #156]	; (80059c0 <OSMutexPost+0x1b0>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8005928:	7efb      	ldrb	r3, [r7, #27]
 800592a:	4293      	cmp	r3, r2
 800592c:	bf28      	it	cs
 800592e:	4613      	movcs	r3, r2
 8005930:	76fb      	strb	r3, [r7, #27]
        if (prio_new > OSTCBCurPtr->Prio) {
 8005932:	4b23      	ldr	r3, [pc, #140]	; (80059c0 <OSMutexPost+0x1b0>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800593a:	7efa      	ldrb	r2, [r7, #27]
 800593c:	429a      	cmp	r2, r3
 800593e:	d915      	bls.n	800596c <OSMutexPost+0x15c>
            OS_RdyListRemove(OSTCBCurPtr);
 8005940:	4b1f      	ldr	r3, [pc, #124]	; (80059c0 <OSMutexPost+0x1b0>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4618      	mov	r0, r3
 8005946:	f7fe fdc9 	bl	80044dc <OS_RdyListRemove>
            OSTCBCurPtr->Prio = prio_new;                   /* Lower owner's priority back to its original one        */
 800594a:	4b1d      	ldr	r3, [pc, #116]	; (80059c0 <OSMutexPost+0x1b0>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	7efa      	ldrb	r2, [r7, #27]
 8005950:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
            TRACE_OS_MUTEX_TASK_PRIO_DISINHERIT(OSTCBCurPtr, prio_new);
#endif
            OS_PrioInsert(prio_new);
 8005954:	7efb      	ldrb	r3, [r7, #27]
 8005956:	4618      	mov	r0, r3
 8005958:	f7ff fd06 	bl	8005368 <OS_PrioInsert>
            OS_RdyListInsertTail(OSTCBCurPtr);              /* Insert owner in ready list at new priority             */
 800595c:	4b18      	ldr	r3, [pc, #96]	; (80059c0 <OSMutexPost+0x1b0>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4618      	mov	r0, r3
 8005962:	f7fe fd7b 	bl	800445c <OS_RdyListInsertTail>
            OSPrioCur         = prio_new;
 8005966:	4a17      	ldr	r2, [pc, #92]	; (80059c4 <OSMutexPost+0x1b4>)
 8005968:	7efb      	ldrb	r3, [r7, #27]
 800596a:	7013      	strb	r3, [r2, #0]
        }
    }
                                                            /* Get TCB from head of pend list                         */
    p_tcb                      = p_pend_list->HeadPtr->TCBPtr;
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	617b      	str	r3, [r7, #20]
    p_mutex->OwnerTCBPtr       = p_tcb;                     /* Give mutex to new owner                                */
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	625a      	str	r2, [r3, #36]	; 0x24
    p_mutex->OwnerNestingCtr   = (OS_NESTING_CTR)1;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    OS_MutexGrpAdd(p_tcb, p_mutex);
 8005982:	68f9      	ldr	r1, [r7, #12]
 8005984:	6978      	ldr	r0, [r7, #20]
 8005986:	f000 f85b 	bl	8005a40 <OS_MutexGrpAdd>
                                                            /* Post to mutex                                          */
    OS_Post((OS_PEND_OBJ *)((void *)p_mutex),
 800598a:	6a3b      	ldr	r3, [r7, #32]
 800598c:	9300      	str	r3, [sp, #0]
 800598e:	2300      	movs	r3, #0
 8005990:	2200      	movs	r2, #0
 8005992:	6979      	ldr	r1, [r7, #20]
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f7fe fc17 	bl	80041c8 <OS_Post>
            (OS_TCB      *)p_tcb,
            (void        *)0,
            (OS_MSG_SIZE  )0,
            (CPU_TS       )ts);

    OS_CRITICAL_EXIT_NO_SCHED();
 800599a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800599c:	f7fa fca4 	bl	80002e8 <CPU_SR_Restore>

    if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0) {
 80059a0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	db01      	blt.n	80059ac <OSMutexPost+0x19c>
        OSSched();                                          /* Run the scheduler                                      */
 80059a8:	f7fe f8a2 	bl	8003af0 <OSSched>
    }

   *p_err = OS_ERR_NONE;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	801a      	strh	r2, [r3, #0]
}
 80059b2:	3728      	adds	r7, #40	; 0x28
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	20002700 	.word	0x20002700
 80059bc:	5854554d 	.word	0x5854554d
 80059c0:	200026d4 	.word	0x200026d4
 80059c4:	20002608 	.word	0x20002608

080059c8 <OS_MutexDbgListAdd>:
*/


#if OS_CFG_DBG_EN > 0u
void  OS_MutexDbgListAdd (OS_MUTEX  *p_mutex)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
    p_mutex->DbgNamePtr               = (CPU_CHAR *)((void *)" ");
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a0e      	ldr	r2, [pc, #56]	; (8005a0c <OS_MutexDbgListAdd+0x44>)
 80059d4:	61da      	str	r2, [r3, #28]
    p_mutex->DbgPrevPtr               = (OS_MUTEX *)0;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	615a      	str	r2, [r3, #20]
    if (OSMutexDbgListPtr == (OS_MUTEX *)0) {
 80059dc:	4b0c      	ldr	r3, [pc, #48]	; (8005a10 <OS_MutexDbgListAdd+0x48>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d103      	bne.n	80059ec <OS_MutexDbgListAdd+0x24>
        p_mutex->DbgNextPtr           = (OS_MUTEX *)0;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	619a      	str	r2, [r3, #24]
 80059ea:	e007      	b.n	80059fc <OS_MutexDbgListAdd+0x34>
    } else {
        p_mutex->DbgNextPtr           =  OSMutexDbgListPtr;
 80059ec:	4b08      	ldr	r3, [pc, #32]	; (8005a10 <OS_MutexDbgListAdd+0x48>)
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	619a      	str	r2, [r3, #24]
        OSMutexDbgListPtr->DbgPrevPtr =  p_mutex;
 80059f4:	4b06      	ldr	r3, [pc, #24]	; (8005a10 <OS_MutexDbgListAdd+0x48>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	615a      	str	r2, [r3, #20]
    }
    OSMutexDbgListPtr                 =  p_mutex;
 80059fc:	4a04      	ldr	r2, [pc, #16]	; (8005a10 <OS_MutexDbgListAdd+0x48>)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6013      	str	r3, [r2, #0]
}
 8005a02:	bf00      	nop
 8005a04:	370c      	adds	r7, #12
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bc80      	pop	{r7}
 8005a0a:	4770      	bx	lr
 8005a0c:	0800ebc0 	.word	0x0800ebc0
 8005a10:	200029d4 	.word	0x200029d4

08005a14 <OS_MutexInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MutexInit (OS_ERR  *p_err)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSMutexDbgListPtr = (OS_MUTEX *)0;
 8005a1c:	4b06      	ldr	r3, [pc, #24]	; (8005a38 <OS_MutexInit+0x24>)
 8005a1e:	2200      	movs	r2, #0
 8005a20:	601a      	str	r2, [r3, #0]
#endif

    OSMutexQty        = (OS_OBJ_QTY)0;
 8005a22:	4b06      	ldr	r3, [pc, #24]	; (8005a3c <OS_MutexInit+0x28>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	801a      	strh	r2, [r3, #0]
   *p_err             =  OS_ERR_NONE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	801a      	strh	r2, [r3, #0]
}
 8005a2e:	bf00      	nop
 8005a30:	370c      	adds	r7, #12
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bc80      	pop	{r7}
 8005a36:	4770      	bx	lr
 8005a38:	200029d4 	.word	0x200029d4
 8005a3c:	200028fc 	.word	0x200028fc

08005a40 <OS_MutexGrpAdd>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MutexGrpAdd (OS_TCB  *p_tcb, OS_MUTEX  *p_mutex)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
    p_mutex->MutexGrpNextPtr = p_tcb->MutexGrpHeadPtr;      /* The mutex grp is not sorted add to head of list.       */
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	621a      	str	r2, [r3, #32]
    p_tcb->MutexGrpHeadPtr   = p_mutex;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	683a      	ldr	r2, [r7, #0]
 8005a56:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bc80      	pop	{r7}
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop

08005a64 <OS_MutexGrpRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MutexGrpRemove (OS_TCB  *p_tcb, OS_MUTEX  *p_mutex)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
    OS_MUTEX  **pp_mutex;

    pp_mutex = &p_tcb->MutexGrpHeadPtr;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	333c      	adds	r3, #60	; 0x3c
 8005a72:	60fb      	str	r3, [r7, #12]

    while(*pp_mutex != p_mutex) {
 8005a74:	e003      	b.n	8005a7e <OS_MutexGrpRemove+0x1a>
        pp_mutex = &(*pp_mutex)->MutexGrpNextPtr;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	3320      	adds	r3, #32
 8005a7c:	60fb      	str	r3, [r7, #12]
{
    OS_MUTEX  **pp_mutex;

    pp_mutex = &p_tcb->MutexGrpHeadPtr;

    while(*pp_mutex != p_mutex) {
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d1f6      	bne.n	8005a76 <OS_MutexGrpRemove+0x12>
        pp_mutex = &(*pp_mutex)->MutexGrpNextPtr;
    }

    *pp_mutex = (*pp_mutex)->MutexGrpNextPtr;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	6a1a      	ldr	r2, [r3, #32]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	601a      	str	r2, [r3, #0]
}
 8005a92:	bf00      	nop
 8005a94:	3714      	adds	r7, #20
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bc80      	pop	{r7}
 8005a9a:	4770      	bx	lr

08005a9c <OS_MutexGrpPrioFindHighest>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

OS_PRIO  OS_MutexGrpPrioFindHighest (OS_TCB  *p_tcb)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b087      	sub	sp, #28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
    OS_PRIO        highest_prio;
    OS_PRIO        prio;
    OS_PEND_DATA  *p_head;


    highest_prio = OS_CFG_PRIO_MAX - 1u;
 8005aa4:	231f      	movs	r3, #31
 8005aa6:	74fb      	strb	r3, [r7, #19]
    pp_mutex = &p_tcb->MutexGrpHeadPtr;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	333c      	adds	r3, #60	; 0x3c
 8005aac:	617b      	str	r3, [r7, #20]

    while(*pp_mutex != (OS_MUTEX *)0) {
 8005aae:	e015      	b.n	8005adc <OS_MutexGrpPrioFindHighest+0x40>
        p_head = (*pp_mutex)->PendList.HeadPtr;
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	60fb      	str	r3, [r7, #12]
        if (p_head!= (OS_PEND_DATA *)0) {
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00a      	beq.n	8005ad4 <OS_MutexGrpPrioFindHighest+0x38>
            prio = p_head->TCBPtr->Prio;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8005ac6:	72fb      	strb	r3, [r7, #11]
            if(prio < highest_prio) {
 8005ac8:	7afa      	ldrb	r2, [r7, #11]
 8005aca:	7cfb      	ldrb	r3, [r7, #19]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d201      	bcs.n	8005ad4 <OS_MutexGrpPrioFindHighest+0x38>
                highest_prio = prio;
 8005ad0:	7afb      	ldrb	r3, [r7, #11]
 8005ad2:	74fb      	strb	r3, [r7, #19]
            }
        }
        pp_mutex = &(*pp_mutex)->MutexGrpNextPtr;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	3320      	adds	r3, #32
 8005ada:	617b      	str	r3, [r7, #20]


    highest_prio = OS_CFG_PRIO_MAX - 1u;
    pp_mutex = &p_tcb->MutexGrpHeadPtr;

    while(*pp_mutex != (OS_MUTEX *)0) {
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1e5      	bne.n	8005ab0 <OS_MutexGrpPrioFindHighest+0x14>
            }
        }
        pp_mutex = &(*pp_mutex)->MutexGrpNextPtr;
    }

    return (highest_prio);
 8005ae4:	7cfb      	ldrb	r3, [r7, #19]
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	371c      	adds	r7, #28
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bc80      	pop	{r7}
 8005aee:	4770      	bx	lr

08005af0 <OS_Dbg_Init>:
*                  DOES NOT optimize out the 'const' variables above.
************************************************************************************************************************
*/

void  OS_Dbg_Init (void)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
    CPU_INT08U const  *p_temp08;
    CPU_INT16U const  *p_temp16;
    CPU_INT32U const  *p_temp32;


    p_temp08 = (CPU_INT08U const *)&OSDbg_DbgEn;
 8005af6:	4b47      	ldr	r3, [pc, #284]	; (8005c14 <OS_Dbg_Init+0x124>)
 8005af8:	60fb      	str	r3, [r7, #12]

    p_temp32 = (CPU_INT32U const *)&OSDbg_DataSize;
 8005afa:	4b47      	ldr	r3, [pc, #284]	; (8005c18 <OS_Dbg_Init+0x128>)
 8005afc:	60bb      	str	r3, [r7, #8]

    p_temp08 = (CPU_INT08U const *)&OSDbg_ArgChkEn;
 8005afe:	4b47      	ldr	r3, [pc, #284]	; (8005c1c <OS_Dbg_Init+0x12c>)
 8005b00:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_AppHooksEn;
 8005b02:	4b47      	ldr	r3, [pc, #284]	; (8005c20 <OS_Dbg_Init+0x130>)
 8005b04:	60fb      	str	r3, [r7, #12]

    p_temp32 = (CPU_INT32U const *)&OSDbg_EndiannessTest;
 8005b06:	4b47      	ldr	r3, [pc, #284]	; (8005c24 <OS_Dbg_Init+0x134>)
 8005b08:	60bb      	str	r3, [r7, #8]

    p_temp08 = (CPU_INT08U const *)&OSDbg_CalledFromISRChkEn;
 8005b0a:	4b47      	ldr	r3, [pc, #284]	; (8005c28 <OS_Dbg_Init+0x138>)
 8005b0c:	60fb      	str	r3, [r7, #12]

    p_temp16 = (CPU_INT16U const *)&OSDbg_FlagGrp;
 8005b0e:	4b47      	ldr	r3, [pc, #284]	; (8005c2c <OS_Dbg_Init+0x13c>)
 8005b10:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_FlagEn;
 8005b12:	4b47      	ldr	r3, [pc, #284]	; (8005c30 <OS_Dbg_Init+0x140>)
 8005b14:	60fb      	str	r3, [r7, #12]
#if OS_CFG_FLAG_EN > 0u
    p_temp08 = (CPU_INT08U const *)&OSDbg_FlagDelEn;
 8005b16:	4b47      	ldr	r3, [pc, #284]	; (8005c34 <OS_Dbg_Init+0x144>)
 8005b18:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_FlagModeClrEn;
 8005b1a:	4b47      	ldr	r3, [pc, #284]	; (8005c38 <OS_Dbg_Init+0x148>)
 8005b1c:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_FlagPendAbortEn;
 8005b1e:	4b47      	ldr	r3, [pc, #284]	; (8005c3c <OS_Dbg_Init+0x14c>)
 8005b20:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_FlagGrpSize;
 8005b22:	4b47      	ldr	r3, [pc, #284]	; (8005c40 <OS_Dbg_Init+0x150>)
 8005b24:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_FlagWidth;
 8005b26:	4b47      	ldr	r3, [pc, #284]	; (8005c44 <OS_Dbg_Init+0x154>)
 8005b28:	607b      	str	r3, [r7, #4]

#if OS_CFG_ISR_POST_DEFERRED_EN > 0u
    p_temp16 = (CPU_INT16U const *)&OSDbg_IntQ;
#endif

    p_temp08 = (CPU_INT08U const *)&OSDbg_ISRPostDeferredEn;
 8005b2a:	4b47      	ldr	r3, [pc, #284]	; (8005c48 <OS_Dbg_Init+0x158>)
 8005b2c:	60fb      	str	r3, [r7, #12]

    p_temp16 = (CPU_INT16U const *)&OSDbg_Mem;
 8005b2e:	4b47      	ldr	r3, [pc, #284]	; (8005c4c <OS_Dbg_Init+0x15c>)
 8005b30:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_MemEn;
 8005b32:	4b47      	ldr	r3, [pc, #284]	; (8005c50 <OS_Dbg_Init+0x160>)
 8005b34:	60fb      	str	r3, [r7, #12]
#if OS_CFG_MEM_EN > 0u
    p_temp16 = (CPU_INT16U const *)&OSDbg_MemSize;
 8005b36:	4b47      	ldr	r3, [pc, #284]	; (8005c54 <OS_Dbg_Init+0x164>)
 8005b38:	607b      	str	r3, [r7, #4]
#endif

    p_temp08 = (CPU_INT08U const *)&OSDbg_MsgEn;
 8005b3a:	4b47      	ldr	r3, [pc, #284]	; (8005c58 <OS_Dbg_Init+0x168>)
 8005b3c:	60fb      	str	r3, [r7, #12]
#if (OS_MSG_EN) > 0u
    p_temp16 = (CPU_INT16U const *)&OSDbg_MsgSize;
 8005b3e:	4b47      	ldr	r3, [pc, #284]	; (8005c5c <OS_Dbg_Init+0x16c>)
 8005b40:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_MsgPoolSize;
 8005b42:	4b47      	ldr	r3, [pc, #284]	; (8005c60 <OS_Dbg_Init+0x170>)
 8005b44:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_MsgQSize;
 8005b46:	4b47      	ldr	r3, [pc, #284]	; (8005c64 <OS_Dbg_Init+0x174>)
 8005b48:	607b      	str	r3, [r7, #4]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_Mutex;
 8005b4a:	4b47      	ldr	r3, [pc, #284]	; (8005c68 <OS_Dbg_Init+0x178>)
 8005b4c:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_MutexEn;
 8005b4e:	4b47      	ldr	r3, [pc, #284]	; (8005c6c <OS_Dbg_Init+0x17c>)
 8005b50:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_MUTEX_EN) > 0u
    p_temp08 = (CPU_INT08U const *)&OSDbg_MutexDelEn;
 8005b52:	4b47      	ldr	r3, [pc, #284]	; (8005c70 <OS_Dbg_Init+0x180>)
 8005b54:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_MutexPendAbortEn;
 8005b56:	4b47      	ldr	r3, [pc, #284]	; (8005c74 <OS_Dbg_Init+0x184>)
 8005b58:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_MutexSize;
 8005b5a:	4b47      	ldr	r3, [pc, #284]	; (8005c78 <OS_Dbg_Init+0x188>)
 8005b5c:	607b      	str	r3, [r7, #4]
#endif

    p_temp08 = (CPU_INT08U const *)&OSDbg_ObjTypeChkEn;
 8005b5e:	4b47      	ldr	r3, [pc, #284]	; (8005c7c <OS_Dbg_Init+0x18c>)
 8005b60:	60fb      	str	r3, [r7, #12]

    p_temp08 = (CPU_INT08U const *)&OSDbg_PendMultiEn;
 8005b62:	4b47      	ldr	r3, [pc, #284]	; (8005c80 <OS_Dbg_Init+0x190>)
 8005b64:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_PendDataSize;
 8005b66:	4b47      	ldr	r3, [pc, #284]	; (8005c84 <OS_Dbg_Init+0x194>)
 8005b68:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_PendListSize;
 8005b6a:	4b47      	ldr	r3, [pc, #284]	; (8005c88 <OS_Dbg_Init+0x198>)
 8005b6c:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_PendObjSize;
 8005b6e:	4b47      	ldr	r3, [pc, #284]	; (8005c8c <OS_Dbg_Init+0x19c>)
 8005b70:	607b      	str	r3, [r7, #4]

    p_temp16 = (CPU_INT16U const *)&OSDbg_PrioMax;
 8005b72:	4b47      	ldr	r3, [pc, #284]	; (8005c90 <OS_Dbg_Init+0x1a0>)
 8005b74:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_PrioTblSize;
 8005b76:	4b47      	ldr	r3, [pc, #284]	; (8005c94 <OS_Dbg_Init+0x1a4>)
 8005b78:	607b      	str	r3, [r7, #4]

    p_temp16 = (CPU_INT16U const *)&OSDbg_PtrSize;
 8005b7a:	4b47      	ldr	r3, [pc, #284]	; (8005c98 <OS_Dbg_Init+0x1a8>)
 8005b7c:	607b      	str	r3, [r7, #4]

    p_temp16 = (CPU_INT16U const *)&OSDbg_Q;
 8005b7e:	4b47      	ldr	r3, [pc, #284]	; (8005c9c <OS_Dbg_Init+0x1ac>)
 8005b80:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_QEn;
 8005b82:	4b47      	ldr	r3, [pc, #284]	; (8005ca0 <OS_Dbg_Init+0x1b0>)
 8005b84:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_Q_EN) > 0u
    p_temp08 = (CPU_INT08U const *)&OSDbg_QDelEn;
 8005b86:	4b47      	ldr	r3, [pc, #284]	; (8005ca4 <OS_Dbg_Init+0x1b4>)
 8005b88:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_QFlushEn;
 8005b8a:	4b47      	ldr	r3, [pc, #284]	; (8005ca8 <OS_Dbg_Init+0x1b8>)
 8005b8c:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_QPendAbortEn;
 8005b8e:	4b47      	ldr	r3, [pc, #284]	; (8005cac <OS_Dbg_Init+0x1bc>)
 8005b90:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_QSize;
 8005b92:	4b47      	ldr	r3, [pc, #284]	; (8005cb0 <OS_Dbg_Init+0x1c0>)
 8005b94:	607b      	str	r3, [r7, #4]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_SchedRoundRobinEn;
 8005b96:	4b47      	ldr	r3, [pc, #284]	; (8005cb4 <OS_Dbg_Init+0x1c4>)
 8005b98:	607b      	str	r3, [r7, #4]

    p_temp16 = (CPU_INT16U const *)&OSDbg_Sem;
 8005b9a:	4b47      	ldr	r3, [pc, #284]	; (8005cb8 <OS_Dbg_Init+0x1c8>)
 8005b9c:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_SemEn;
 8005b9e:	4b47      	ldr	r3, [pc, #284]	; (8005cbc <OS_Dbg_Init+0x1cc>)
 8005ba0:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_SEM_EN) > 0u
    p_temp08 = (CPU_INT08U const *)&OSDbg_SemDelEn;
 8005ba2:	4b47      	ldr	r3, [pc, #284]	; (8005cc0 <OS_Dbg_Init+0x1d0>)
 8005ba4:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_SemPendAbortEn;
 8005ba6:	4b47      	ldr	r3, [pc, #284]	; (8005cc4 <OS_Dbg_Init+0x1d4>)
 8005ba8:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_SemSetEn;
 8005baa:	4b47      	ldr	r3, [pc, #284]	; (8005cc8 <OS_Dbg_Init+0x1d8>)
 8005bac:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_SemSize;
 8005bae:	4b47      	ldr	r3, [pc, #284]	; (8005ccc <OS_Dbg_Init+0x1dc>)
 8005bb0:	607b      	str	r3, [r7, #4]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_RdyList;
 8005bb2:	4b47      	ldr	r3, [pc, #284]	; (8005cd0 <OS_Dbg_Init+0x1e0>)
 8005bb4:	607b      	str	r3, [r7, #4]
    p_temp32 = (CPU_INT32U const *)&OSDbg_RdyListSize;
 8005bb6:	4b47      	ldr	r3, [pc, #284]	; (8005cd4 <OS_Dbg_Init+0x1e4>)
 8005bb8:	60bb      	str	r3, [r7, #8]

    p_temp16 = (CPU_INT16U const *)&OSDbg_StkWidth;
 8005bba:	4b47      	ldr	r3, [pc, #284]	; (8005cd8 <OS_Dbg_Init+0x1e8>)
 8005bbc:	607b      	str	r3, [r7, #4]

    p_temp08 = (CPU_INT08U const *)&OSDbg_StatTaskEn;
 8005bbe:	4b47      	ldr	r3, [pc, #284]	; (8005cdc <OS_Dbg_Init+0x1ec>)
 8005bc0:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_StatTaskStkChkEn;
 8005bc2:	4b47      	ldr	r3, [pc, #284]	; (8005ce0 <OS_Dbg_Init+0x1f0>)
 8005bc4:	60fb      	str	r3, [r7, #12]

    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskChangePrioEn;
 8005bc6:	4b47      	ldr	r3, [pc, #284]	; (8005ce4 <OS_Dbg_Init+0x1f4>)
 8005bc8:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskDelEn;
 8005bca:	4b47      	ldr	r3, [pc, #284]	; (8005ce8 <OS_Dbg_Init+0x1f8>)
 8005bcc:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskQEn;
 8005bce:	4b47      	ldr	r3, [pc, #284]	; (8005cec <OS_Dbg_Init+0x1fc>)
 8005bd0:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskQPendAbortEn;
 8005bd2:	4b47      	ldr	r3, [pc, #284]	; (8005cf0 <OS_Dbg_Init+0x200>)
 8005bd4:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskProfileEn;
 8005bd6:	4b47      	ldr	r3, [pc, #284]	; (8005cf4 <OS_Dbg_Init+0x204>)
 8005bd8:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_TaskRegTblSize;
 8005bda:	4b47      	ldr	r3, [pc, #284]	; (8005cf8 <OS_Dbg_Init+0x208>)
 8005bdc:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskSemPendAbortEn;
 8005bde:	4b47      	ldr	r3, [pc, #284]	; (8005cfc <OS_Dbg_Init+0x20c>)
 8005be0:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskSuspendEn;
 8005be2:	4b47      	ldr	r3, [pc, #284]	; (8005d00 <OS_Dbg_Init+0x210>)
 8005be4:	60fb      	str	r3, [r7, #12]

    p_temp16 = (CPU_INT16U const *)&OSDbg_TCBSize;
 8005be6:	4b47      	ldr	r3, [pc, #284]	; (8005d04 <OS_Dbg_Init+0x214>)
 8005be8:	607b      	str	r3, [r7, #4]

    p_temp16 = (CPU_INT16U const *)&OSDbg_TickListSize;
 8005bea:	4b47      	ldr	r3, [pc, #284]	; (8005d08 <OS_Dbg_Init+0x218>)
 8005bec:	607b      	str	r3, [r7, #4]

    p_temp08 = (CPU_INT08U const *)&OSDbg_TimeDlyHMSMEn;
 8005bee:	4b47      	ldr	r3, [pc, #284]	; (8005d0c <OS_Dbg_Init+0x21c>)
 8005bf0:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TimeDlyResumeEn;
 8005bf2:	4b47      	ldr	r3, [pc, #284]	; (8005d10 <OS_Dbg_Init+0x220>)
 8005bf4:	60fb      	str	r3, [r7, #12]


    p_temp16 = (CPU_INT16U const *)&OSDbg_Tmr;
 8005bf6:	4b47      	ldr	r3, [pc, #284]	; (8005d14 <OS_Dbg_Init+0x224>)
 8005bf8:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TmrEn;
 8005bfa:	4b47      	ldr	r3, [pc, #284]	; (8005d18 <OS_Dbg_Init+0x228>)
 8005bfc:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_TMR_EN) > 0u
    p_temp08 = (CPU_INT08U const *)&OSDbg_TmrDelEn;
 8005bfe:	4b47      	ldr	r3, [pc, #284]	; (8005d1c <OS_Dbg_Init+0x22c>)
 8005c00:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_TmrSize;
 8005c02:	4b47      	ldr	r3, [pc, #284]	; (8005d20 <OS_Dbg_Init+0x230>)
 8005c04:	607b      	str	r3, [r7, #4]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_VersionNbr;
 8005c06:	4b47      	ldr	r3, [pc, #284]	; (8005d24 <OS_Dbg_Init+0x234>)
 8005c08:	607b      	str	r3, [r7, #4]

    p_temp08 = p_temp08;                                     /* Prevent compiler warning for not using 'p_temp'        */
    p_temp16 = p_temp16;
    p_temp32 = p_temp32;
}
 8005c0a:	bf00      	nop
 8005c0c:	3714      	adds	r7, #20
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bc80      	pop	{r7}
 8005c12:	4770      	bx	lr
 8005c14:	0800ecb8 	.word	0x0800ecb8
 8005c18:	0800ee20 	.word	0x0800ee20
 8005c1c:	0800ecb9 	.word	0x0800ecb9
 8005c20:	0800ecba 	.word	0x0800ecba
 8005c24:	0800ecbc 	.word	0x0800ecbc
 8005c28:	0800ecc0 	.word	0x0800ecc0
 8005c2c:	0800ecc4 	.word	0x0800ecc4
 8005c30:	0800ecc1 	.word	0x0800ecc1
 8005c34:	0800ecec 	.word	0x0800ecec
 8005c38:	0800eced 	.word	0x0800eced
 8005c3c:	0800ecee 	.word	0x0800ecee
 8005c40:	0800ecf0 	.word	0x0800ecf0
 8005c44:	0800ecf2 	.word	0x0800ecf2
 8005c48:	0800ecf4 	.word	0x0800ecf4
 8005c4c:	0800ecf8 	.word	0x0800ecf8
 8005c50:	0800ed18 	.word	0x0800ed18
 8005c54:	0800ed1a 	.word	0x0800ed1a
 8005c58:	0800ed1c 	.word	0x0800ed1c
 8005c5c:	0800ed1e 	.word	0x0800ed1e
 8005c60:	0800ed20 	.word	0x0800ed20
 8005c64:	0800ed22 	.word	0x0800ed22
 8005c68:	0800ed24 	.word	0x0800ed24
 8005c6c:	0800ed54 	.word	0x0800ed54
 8005c70:	0800ed55 	.word	0x0800ed55
 8005c74:	0800ed56 	.word	0x0800ed56
 8005c78:	0800ed58 	.word	0x0800ed58
 8005c7c:	0800ed5a 	.word	0x0800ed5a
 8005c80:	0800ed5b 	.word	0x0800ed5b
 8005c84:	0800ed5c 	.word	0x0800ed5c
 8005c88:	0800ed5e 	.word	0x0800ed5e
 8005c8c:	0800ed60 	.word	0x0800ed60
 8005c90:	0800ed62 	.word	0x0800ed62
 8005c94:	0800ed64 	.word	0x0800ed64
 8005c98:	0800ed66 	.word	0x0800ed66
 8005c9c:	0800ed68 	.word	0x0800ed68
 8005ca0:	0800ed98 	.word	0x0800ed98
 8005ca4:	0800ed99 	.word	0x0800ed99
 8005ca8:	0800ed9a 	.word	0x0800ed9a
 8005cac:	0800ed9b 	.word	0x0800ed9b
 8005cb0:	0800ed9c 	.word	0x0800ed9c
 8005cb4:	0800ed9e 	.word	0x0800ed9e
 8005cb8:	0800eda0 	.word	0x0800eda0
 8005cbc:	0800edc8 	.word	0x0800edc8
 8005cc0:	0800edc9 	.word	0x0800edc9
 8005cc4:	0800edca 	.word	0x0800edca
 8005cc8:	0800edcb 	.word	0x0800edcb
 8005ccc:	0800edcc 	.word	0x0800edcc
 8005cd0:	0800edce 	.word	0x0800edce
 8005cd4:	0800edd0 	.word	0x0800edd0
 8005cd8:	0800edd4 	.word	0x0800edd4
 8005cdc:	0800edd5 	.word	0x0800edd5
 8005ce0:	0800edd6 	.word	0x0800edd6
 8005ce4:	0800edd7 	.word	0x0800edd7
 8005ce8:	0800edd8 	.word	0x0800edd8
 8005cec:	0800edd9 	.word	0x0800edd9
 8005cf0:	0800edda 	.word	0x0800edda
 8005cf4:	0800eddb 	.word	0x0800eddb
 8005cf8:	0800eddc 	.word	0x0800eddc
 8005cfc:	0800edde 	.word	0x0800edde
 8005d00:	0800eddf 	.word	0x0800eddf
 8005d04:	0800ede0 	.word	0x0800ede0
 8005d08:	0800ede2 	.word	0x0800ede2
 8005d0c:	0800ede4 	.word	0x0800ede4
 8005d10:	0800ede5 	.word	0x0800ede5
 8005d14:	0800ede8 	.word	0x0800ede8
 8005d18:	0800ee18 	.word	0x0800ee18
 8005d1c:	0800ee19 	.word	0x0800ee19
 8005d20:	0800ee1a 	.word	0x0800ee1a
 8005d24:	0800ee1c 	.word	0x0800ee1c

08005d28 <OSMemCreate>:
                   CPU_CHAR     *p_name,
                   void         *p_addr,
                   OS_MEM_QTY    n_blks,
                   OS_MEM_SIZE   blk_size,
                   OS_ERR       *p_err)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b08a      	sub	sp, #40	; 0x28
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
 8005d34:	807b      	strh	r3, [r7, #2]
#endif
    OS_MEM_QTY     i;
    OS_MEM_QTY     loops;
    CPU_INT08U    *p_blk;
    void         **p_link;
    CPU_SR_ALLOC();
 8005d36:	2300      	movs	r3, #0
 8005d38:	61bb      	str	r3, [r7, #24]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 8005d3a:	4b40      	ldr	r3, [pc, #256]	; (8005e3c <OSMemCreate+0x114>)
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d004      	beq.n	8005d4c <OSMemCreate+0x24>
       *p_err = OS_ERR_MEM_CREATE_ISR;
 8005d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d44:	f245 62b9 	movw	r2, #22201	; 0x56b9
 8005d48:	801a      	strh	r2, [r3, #0]
        return;
 8005d4a:	e074      	b.n	8005e36 <OSMemCreate+0x10e>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_addr == (void *)0) {                              /* Must pass a valid address for the memory part.         */
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d104      	bne.n	8005d5c <OSMemCreate+0x34>
       *p_err   = OS_ERR_MEM_INVALID_P_ADDR;
 8005d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d54:	f245 62bb 	movw	r2, #22203	; 0x56bb
 8005d58:	801a      	strh	r2, [r3, #0]
        return;
 8005d5a:	e06c      	b.n	8005e36 <OSMemCreate+0x10e>
    }
    if (n_blks < (OS_MEM_QTY)2) {                           /* Must have at least 2 blocks per partition              */
 8005d5c:	887b      	ldrh	r3, [r7, #2]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d804      	bhi.n	8005d6c <OSMemCreate+0x44>
       *p_err = OS_ERR_MEM_INVALID_BLKS;
 8005d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d64:	f245 62bc 	movw	r2, #22204	; 0x56bc
 8005d68:	801a      	strh	r2, [r3, #0]
        return;
 8005d6a:	e064      	b.n	8005e36 <OSMemCreate+0x10e>
    }
    if (blk_size < sizeof(void *)) {                        /* Must contain space for at least a pointer              */
 8005d6c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005d6e:	2b03      	cmp	r3, #3
 8005d70:	d804      	bhi.n	8005d7c <OSMemCreate+0x54>
       *p_err = OS_ERR_MEM_INVALID_SIZE;
 8005d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d74:	f245 62c1 	movw	r2, #22209	; 0x56c1
 8005d78:	801a      	strh	r2, [r3, #0]
        return;
 8005d7a:	e05c      	b.n	8005e36 <OSMemCreate+0x10e>
    }
    align_msk = sizeof(void *) - 1u;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	617b      	str	r3, [r7, #20]
    if (align_msk > 0u) {
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d013      	beq.n	8005dae <OSMemCreate+0x86>
        if (((CPU_ADDR)p_addr & align_msk) != 0u){          /* Must be pointer size aligned                           */
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d004      	beq.n	8005d9a <OSMemCreate+0x72>
           *p_err = OS_ERR_MEM_INVALID_P_ADDR;
 8005d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d92:	f245 62bb 	movw	r2, #22203	; 0x56bb
 8005d96:	801a      	strh	r2, [r3, #0]
            return;
 8005d98:	e04d      	b.n	8005e36 <OSMemCreate+0x10e>
        }
        if ((blk_size & align_msk) != 0u) {                 /* Block size must be a multiple address size             */
 8005d9a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	4013      	ands	r3, r2
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d004      	beq.n	8005dae <OSMemCreate+0x86>
           *p_err = OS_ERR_MEM_INVALID_SIZE;
 8005da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005da6:	f245 62c1 	movw	r2, #22209	; 0x56c1
 8005daa:	801a      	strh	r2, [r3, #0]
            return;
 8005dac:	e043      	b.n	8005e36 <OSMemCreate+0x10e>
        }
    }
#endif

    p_link = (void **)p_addr;                               /* Create linked list of free memory blocks               */
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	61fb      	str	r3, [r7, #28]
    p_blk  = (CPU_INT08U *)p_addr;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	623b      	str	r3, [r7, #32]
    loops  = n_blks - 1u;
 8005db6:	887b      	ldrh	r3, [r7, #2]
 8005db8:	3b01      	subs	r3, #1
 8005dba:	827b      	strh	r3, [r7, #18]
    for (i = 0u; i < loops; i++) {
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005dc0:	e00b      	b.n	8005dda <OSMemCreate+0xb2>
        p_blk +=  blk_size;
 8005dc2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005dc4:	6a3a      	ldr	r2, [r7, #32]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	623b      	str	r3, [r7, #32]
       *p_link = (void  *)p_blk;                            /* Save pointer to NEXT block in CURRENT block            */
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	6a3a      	ldr	r2, [r7, #32]
 8005dce:	601a      	str	r2, [r3, #0]
        p_link = (void **)(void *)p_blk;                    /* Position     to NEXT block                             */
 8005dd0:	6a3b      	ldr	r3, [r7, #32]
 8005dd2:	61fb      	str	r3, [r7, #28]
#endif

    p_link = (void **)p_addr;                               /* Create linked list of free memory blocks               */
    p_blk  = (CPU_INT08U *)p_addr;
    loops  = n_blks - 1u;
    for (i = 0u; i < loops; i++) {
 8005dd4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005dda:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005ddc:	8a7b      	ldrh	r3, [r7, #18]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d3ef      	bcc.n	8005dc2 <OSMemCreate+0x9a>
        p_blk +=  blk_size;
       *p_link = (void  *)p_blk;                            /* Save pointer to NEXT block in CURRENT block            */
        p_link = (void **)(void *)p_blk;                    /* Position     to NEXT block                             */
    }
   *p_link             = (void *)0;                         /* Last memory block points to NULL                       */
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	2200      	movs	r2, #0
 8005de6:	601a      	str	r2, [r3, #0]

    OS_CRITICAL_ENTER();
 8005de8:	f7fa fa7a 	bl	80002e0 <CPU_SR_Save>
 8005dec:	61b8      	str	r0, [r7, #24]
#if OS_OBJ_TYPE_REQ > 0u
    p_mem->Type        = OS_OBJ_TYPE_MEM;                   /* Set the type of object                                 */
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	4a13      	ldr	r2, [pc, #76]	; (8005e40 <OSMemCreate+0x118>)
 8005df2:	601a      	str	r2, [r3, #0]
#endif
#if OS_CFG_DBG_EN > 0u
    p_mem->NamePtr     = p_name;                            /* Save name of memory partition                          */
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	68ba      	ldr	r2, [r7, #8]
 8005df8:	609a      	str	r2, [r3, #8]
#else
    (void)&p_name;
#endif
    p_mem->AddrPtr     = p_addr;                            /* Store start address of memory partition                */
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	605a      	str	r2, [r3, #4]
    p_mem->FreeListPtr = p_addr;                            /* Initialize pointer to pool of free blocks              */
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	60da      	str	r2, [r3, #12]
    p_mem->NbrFree     = n_blks;                            /* Store number of free blocks in MCB                     */
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	887a      	ldrh	r2, [r7, #2]
 8005e0a:	829a      	strh	r2, [r3, #20]
    p_mem->NbrMax      = n_blks;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	887a      	ldrh	r2, [r7, #2]
 8005e10:	825a      	strh	r2, [r3, #18]
    p_mem->BlkSize     = blk_size;                          /* Store block size of each memory blocks                 */
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8005e16:	821a      	strh	r2, [r3, #16]

#if OS_CFG_DBG_EN > 0u
    OS_MemDbgListAdd(p_mem);
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f000 f88d 	bl	8005f38 <OS_MemDbgListAdd>
#endif

    OSMemQty++;
 8005e1e:	4b09      	ldr	r3, [pc, #36]	; (8005e44 <OSMemCreate+0x11c>)
 8005e20:	881b      	ldrh	r3, [r3, #0]
 8005e22:	3301      	adds	r3, #1
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	4b07      	ldr	r3, [pc, #28]	; (8005e44 <OSMemCreate+0x11c>)
 8005e28:	801a      	strh	r2, [r3, #0]

#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_MEM_CREATE(p_mem, p_name);                     /* Record the event.                                      */
#endif

    OS_CRITICAL_EXIT_NO_SCHED();
 8005e2a:	69b8      	ldr	r0, [r7, #24]
 8005e2c:	f7fa fa5c 	bl	80002e8 <CPU_SR_Restore>
   *p_err = OS_ERR_NONE;
 8005e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e32:	2200      	movs	r2, #0
 8005e34:	801a      	strh	r2, [r3, #0]
}
 8005e36:	3728      	adds	r7, #40	; 0x28
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	20002700 	.word	0x20002700
 8005e40:	204d454d 	.word	0x204d454d
 8005e44:	200028fa 	.word	0x200028fa

08005e48 <OSMemGet>:
************************************************************************************************************************
*/

void  *OSMemGet (OS_MEM  *p_mem,
                 OS_ERR  *p_err)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
    void    *p_blk;
    CPU_SR_ALLOC();
 8005e52:	2300      	movs	r3, #0
 8005e54:	60fb      	str	r3, [r7, #12]
        return ((void *)0);
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_mem == (OS_MEM *)0) {                             /* Must point to a valid memory partition                 */
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d105      	bne.n	8005e68 <OSMemGet+0x20>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MEM_GET_FAILED(p_mem);                     /* Record the event.                                      */
#endif
       *p_err  = OS_ERR_MEM_INVALID_P_MEM;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	f245 62bf 	movw	r2, #22207	; 0x56bf
 8005e62:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 8005e64:	2300      	movs	r3, #0
 8005e66:	e023      	b.n	8005eb0 <OSMemGet+0x68>
    }
#endif

    CPU_CRITICAL_ENTER();
 8005e68:	f7fa fa3a 	bl	80002e0 <CPU_SR_Save>
 8005e6c:	60f8      	str	r0, [r7, #12]
    if (p_mem->NbrFree == (OS_MEM_QTY)0) {                  /* See if there are any free memory blocks                */
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	8a9b      	ldrh	r3, [r3, #20]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d108      	bne.n	8005e88 <OSMemGet+0x40>
        CPU_CRITICAL_EXIT();
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f7fa fa36 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MEM_GET_FAILED(p_mem);                     /* Record the event.                                      */
#endif
       *p_err = OS_ERR_MEM_NO_FREE_BLKS;                    /* No,  Notify caller of empty memory partition           */
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	f245 62c2 	movw	r2, #22210	; 0x56c2
 8005e82:	801a      	strh	r2, [r3, #0]
        return ((void *)0);                                 /*      Return NULL pointer to caller                     */
 8005e84:	2300      	movs	r3, #0
 8005e86:	e013      	b.n	8005eb0 <OSMemGet+0x68>
    }
    p_blk              = p_mem->FreeListPtr;                /* Yes, point to next free memory block                   */
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	60bb      	str	r3, [r7, #8]
    p_mem->FreeListPtr = *(void **)p_blk;                   /*      Adjust pointer to new free list                   */
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	60da      	str	r2, [r3, #12]
    p_mem->NbrFree--;                                       /*      One less memory block in this partition           */
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	8a9b      	ldrh	r3, [r3, #20]
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	829a      	strh	r2, [r3, #20]
    CPU_CRITICAL_EXIT();
 8005ea2:	68f8      	ldr	r0, [r7, #12]
 8005ea4:	f7fa fa20 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_MEM_GET(p_mem);                                /* Record the event.                                      */
#endif
   *p_err = OS_ERR_NONE;                                    /*      No error                                          */
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	801a      	strh	r2, [r3, #0]
    return (p_blk);                                         /*      Return memory block to caller                     */
 8005eae:	68bb      	ldr	r3, [r7, #8]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3710      	adds	r7, #16
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <OSMemPut>:
*/

void  OSMemPut (OS_MEM  *p_mem,
                void    *p_blk,
                OS_ERR  *p_err)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b086      	sub	sp, #24
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
    CPU_SR_ALLOC();
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_mem == (OS_MEM *)0) {                             /* Must point to a valid memory partition                 */
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d104      	bne.n	8005ed8 <OSMemPut+0x20>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MEM_PUT_FAILED(p_mem);                     /* Record the event.                                      */
#endif
       *p_err  = OS_ERR_MEM_INVALID_P_MEM;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f245 62bf 	movw	r2, #22207	; 0x56bf
 8005ed4:	801a      	strh	r2, [r3, #0]
        return;
 8005ed6:	e02b      	b.n	8005f30 <OSMemPut+0x78>
    }
    if (p_blk == (void *)0) {                               /* Must release a valid block                             */
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d104      	bne.n	8005ee8 <OSMemPut+0x30>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MEM_PUT_FAILED(p_mem);                     /* Record the event.                                      */
#endif
       *p_err  = OS_ERR_MEM_INVALID_P_BLK;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f245 62be 	movw	r2, #22206	; 0x56be
 8005ee4:	801a      	strh	r2, [r3, #0]
        return;
 8005ee6:	e023      	b.n	8005f30 <OSMemPut+0x78>
    }
#endif

    CPU_CRITICAL_ENTER();
 8005ee8:	f7fa f9fa 	bl	80002e0 <CPU_SR_Save>
 8005eec:	6178      	str	r0, [r7, #20]
    if (p_mem->NbrFree >= p_mem->NbrMax) {                  /* Make sure all blocks not already returned              */
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	8a9a      	ldrh	r2, [r3, #20]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	8a5b      	ldrh	r3, [r3, #18]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d307      	bcc.n	8005f0a <OSMemPut+0x52>
        CPU_CRITICAL_EXIT();
 8005efa:	6978      	ldr	r0, [r7, #20]
 8005efc:	f7fa f9f4 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MEM_PUT_FAILED(p_mem);                     /* Record the event.                                      */
#endif
       *p_err = OS_ERR_MEM_FULL;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f245 62ba 	movw	r2, #22202	; 0x56ba
 8005f06:	801a      	strh	r2, [r3, #0]
        return;
 8005f08:	e012      	b.n	8005f30 <OSMemPut+0x78>
    }
    *(void **)p_blk    = p_mem->FreeListPtr;                /* Insert released block into free block list             */
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	68da      	ldr	r2, [r3, #12]
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	601a      	str	r2, [r3, #0]
    p_mem->FreeListPtr = p_blk;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	68ba      	ldr	r2, [r7, #8]
 8005f16:	60da      	str	r2, [r3, #12]
    p_mem->NbrFree++;                                       /* One more memory block in this partition                */
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	8a9b      	ldrh	r3, [r3, #20]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	829a      	strh	r2, [r3, #20]
    CPU_CRITICAL_EXIT();
 8005f24:	6978      	ldr	r0, [r7, #20]
 8005f26:	f7fa f9df 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_MEM_PUT(p_mem);                                /* Record the event.                                      */
#endif
   *p_err              = OS_ERR_NONE;                       /* Notify caller that memory block was released           */
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	801a      	strh	r2, [r3, #0]
}
 8005f30:	3718      	adds	r7, #24
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop

08005f38 <OS_MemDbgListAdd>:
************************************************************************************************************************
*/

#if OS_CFG_DBG_EN > 0u
void  OS_MemDbgListAdd (OS_MEM  *p_mem)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
    p_mem->DbgPrevPtr               = (OS_MEM *)0;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	619a      	str	r2, [r3, #24]
    if (OSMemDbgListPtr == (OS_MEM *)0) {
 8005f46:	4b0c      	ldr	r3, [pc, #48]	; (8005f78 <OS_MemDbgListAdd+0x40>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d103      	bne.n	8005f56 <OS_MemDbgListAdd+0x1e>
        p_mem->DbgNextPtr           = (OS_MEM *)0;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	61da      	str	r2, [r3, #28]
 8005f54:	e007      	b.n	8005f66 <OS_MemDbgListAdd+0x2e>
    } else {
        p_mem->DbgNextPtr           =  OSMemDbgListPtr;
 8005f56:	4b08      	ldr	r3, [pc, #32]	; (8005f78 <OS_MemDbgListAdd+0x40>)
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	61da      	str	r2, [r3, #28]
        OSMemDbgListPtr->DbgPrevPtr =  p_mem;
 8005f5e:	4b06      	ldr	r3, [pc, #24]	; (8005f78 <OS_MemDbgListAdd+0x40>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	619a      	str	r2, [r3, #24]
    }
    OSMemDbgListPtr                 =  p_mem;
 8005f66:	4a04      	ldr	r2, [pc, #16]	; (8005f78 <OS_MemDbgListAdd+0x40>)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6013      	str	r3, [r2, #0]
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bc80      	pop	{r7}
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	20002898 	.word	0x20002898

08005f7c <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_MemInit (OS_ERR  *p_err)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSMemDbgListPtr = (OS_MEM   *)0;
 8005f84:	4b06      	ldr	r3, [pc, #24]	; (8005fa0 <OS_MemInit+0x24>)
 8005f86:	2200      	movs	r2, #0
 8005f88:	601a      	str	r2, [r3, #0]
#endif

    OSMemQty        = (OS_OBJ_QTY)0;
 8005f8a:	4b06      	ldr	r3, [pc, #24]	; (8005fa4 <OS_MemInit+0x28>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	801a      	strh	r2, [r3, #0]
   *p_err           = OS_ERR_NONE;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	801a      	strh	r2, [r3, #0]
}
 8005f96:	bf00      	nop
 8005f98:	370c      	adds	r7, #12
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bc80      	pop	{r7}
 8005f9e:	4770      	bx	lr
 8005fa0:	20002898 	.word	0x20002898
 8005fa4:	200028fa 	.word	0x200028fa

08005fa8 <OS_TmrInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_TmrInit (OS_ERR  *p_err)
{
 8005fa8:	b590      	push	{r4, r7, lr}
 8005faa:	b08d      	sub	sp, #52	; 0x34
 8005fac:	af0a      	add	r7, sp, #40	; 0x28
 8005fae:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSTmrDbgListPtr = (OS_TMR *)0;
 8005fb0:	4b37      	ldr	r3, [pc, #220]	; (8006090 <OS_TmrInit+0xe8>)
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	601a      	str	r2, [r3, #0]
#endif

    OSTmrListPtr        = (OS_TMR *)0;                      /* Create an empty timer list                             */
 8005fb6:	4b37      	ldr	r3, [pc, #220]	; (8006094 <OS_TmrInit+0xec>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	601a      	str	r2, [r3, #0]
    OSTmrListEntries    = 0u;
 8005fbc:	4b36      	ldr	r3, [pc, #216]	; (8006098 <OS_TmrInit+0xf0>)
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	801a      	strh	r2, [r3, #0]

    if (OSCfg_TmrTaskRate_Hz > (OS_RATE_HZ)0) {
 8005fc2:	4b36      	ldr	r3, [pc, #216]	; (800609c <OS_TmrInit+0xf4>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d008      	beq.n	8005fdc <OS_TmrInit+0x34>
        OSTmrUpdateCnt  = OSCfg_TickRate_Hz / OSCfg_TmrTaskRate_Hz;
 8005fca:	4b35      	ldr	r3, [pc, #212]	; (80060a0 <OS_TmrInit+0xf8>)
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	4b33      	ldr	r3, [pc, #204]	; (800609c <OS_TmrInit+0xf4>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd6:	4a33      	ldr	r2, [pc, #204]	; (80060a4 <OS_TmrInit+0xfc>)
 8005fd8:	6013      	str	r3, [r2, #0]
 8005fda:	e007      	b.n	8005fec <OS_TmrInit+0x44>
    } else {
        OSTmrUpdateCnt  = OSCfg_TickRate_Hz / (OS_RATE_HZ)10;
 8005fdc:	4b30      	ldr	r3, [pc, #192]	; (80060a0 <OS_TmrInit+0xf8>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a31      	ldr	r2, [pc, #196]	; (80060a8 <OS_TmrInit+0x100>)
 8005fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fe6:	08db      	lsrs	r3, r3, #3
 8005fe8:	4a2e      	ldr	r2, [pc, #184]	; (80060a4 <OS_TmrInit+0xfc>)
 8005fea:	6013      	str	r3, [r2, #0]
    }
    OSTmrUpdateCtr      = OSTmrUpdateCnt;
 8005fec:	4b2d      	ldr	r3, [pc, #180]	; (80060a4 <OS_TmrInit+0xfc>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a2e      	ldr	r2, [pc, #184]	; (80060ac <OS_TmrInit+0x104>)
 8005ff2:	6013      	str	r3, [r2, #0]

    OSTmrTickCtr        = (OS_TICK)0;
 8005ff4:	4b2e      	ldr	r3, [pc, #184]	; (80060b0 <OS_TmrInit+0x108>)
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	601a      	str	r2, [r3, #0]

    OSTmrTaskTimeMax    = (CPU_TS)0;
 8005ffa:	4b2e      	ldr	r3, [pc, #184]	; (80060b4 <OS_TmrInit+0x10c>)
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	601a      	str	r2, [r3, #0]

#if   OS_CFG_MUTEX_EN > 0u
    OSMutexCreate(&OSTmrMutex,                              /* Use a mutex to protect the timers                      */
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	492d      	ldr	r1, [pc, #180]	; (80060b8 <OS_TmrInit+0x110>)
 8006004:	482d      	ldr	r0, [pc, #180]	; (80060bc <OS_TmrInit+0x114>)
 8006006:	f7ff faaf 	bl	8005568 <OSMutexCreate>
                  "OS Tmr Mutex", 
                  p_err);
    if (*p_err != OS_ERR_NONE) {
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	881b      	ldrh	r3, [r3, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d139      	bne.n	8006086 <OS_TmrInit+0xde>
        return;
    }
#endif

                                                            /* ---------------- CREATE THE TIMER TASK --------------- */
    if (OSCfg_TmrTaskStkBasePtr == (CPU_STK*)0) {
 8006012:	4b2b      	ldr	r3, [pc, #172]	; (80060c0 <OS_TmrInit+0x118>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d104      	bne.n	8006024 <OS_TmrInit+0x7c>
       *p_err = OS_ERR_TMR_STK_INVALID;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f247 3247 	movw	r2, #29511	; 0x7347
 8006020:	801a      	strh	r2, [r3, #0]
        return;
 8006022:	e031      	b.n	8006088 <OS_TmrInit+0xe0>
    }

    if (OSCfg_TmrTaskStkSize < OSCfg_StkSizeMin) {
 8006024:	4b27      	ldr	r3, [pc, #156]	; (80060c4 <OS_TmrInit+0x11c>)
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	4b27      	ldr	r3, [pc, #156]	; (80060c8 <OS_TmrInit+0x120>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	429a      	cmp	r2, r3
 800602e:	d204      	bcs.n	800603a <OS_TmrInit+0x92>
       *p_err = OS_ERR_TMR_STK_SIZE_INVALID;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f247 3248 	movw	r2, #29512	; 0x7348
 8006036:	801a      	strh	r2, [r3, #0]
        return;
 8006038:	e026      	b.n	8006088 <OS_TmrInit+0xe0>
    }

    if (OSCfg_TmrTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {
 800603a:	4b24      	ldr	r3, [pc, #144]	; (80060cc <OS_TmrInit+0x124>)
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	2b1e      	cmp	r3, #30
 8006040:	d904      	bls.n	800604c <OS_TmrInit+0xa4>
       *p_err = OS_ERR_TMR_PRIO_INVALID;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f247 3246 	movw	r2, #29510	; 0x7346
 8006048:	801a      	strh	r2, [r3, #0]
        return;
 800604a:	e01d      	b.n	8006088 <OS_TmrInit+0xe0>
    }

    OSTaskCreate((OS_TCB     *)&OSTmrTaskTCB,
 800604c:	4b1f      	ldr	r3, [pc, #124]	; (80060cc <OS_TmrInit+0x124>)
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	4a1b      	ldr	r2, [pc, #108]	; (80060c0 <OS_TmrInit+0x118>)
 8006052:	6812      	ldr	r2, [r2, #0]
 8006054:	491e      	ldr	r1, [pc, #120]	; (80060d0 <OS_TmrInit+0x128>)
 8006056:	6809      	ldr	r1, [r1, #0]
 8006058:	481a      	ldr	r0, [pc, #104]	; (80060c4 <OS_TmrInit+0x11c>)
 800605a:	6800      	ldr	r0, [r0, #0]
 800605c:	687c      	ldr	r4, [r7, #4]
 800605e:	9408      	str	r4, [sp, #32]
 8006060:	240b      	movs	r4, #11
 8006062:	9407      	str	r4, [sp, #28]
 8006064:	2400      	movs	r4, #0
 8006066:	9406      	str	r4, [sp, #24]
 8006068:	2400      	movs	r4, #0
 800606a:	9405      	str	r4, [sp, #20]
 800606c:	2400      	movs	r4, #0
 800606e:	9404      	str	r4, [sp, #16]
 8006070:	9003      	str	r0, [sp, #12]
 8006072:	9102      	str	r1, [sp, #8]
 8006074:	9201      	str	r2, [sp, #4]
 8006076:	9300      	str	r3, [sp, #0]
 8006078:	2300      	movs	r3, #0
 800607a:	4a16      	ldr	r2, [pc, #88]	; (80060d4 <OS_TmrInit+0x12c>)
 800607c:	4916      	ldr	r1, [pc, #88]	; (80060d8 <OS_TmrInit+0x130>)
 800607e:	4817      	ldr	r0, [pc, #92]	; (80060dc <OS_TmrInit+0x134>)
 8006080:	f7fc fbfe 	bl	8002880 <OSTaskCreate>
 8006084:	e000      	b.n	8006088 <OS_TmrInit+0xe0>
#if   OS_CFG_MUTEX_EN > 0u
    OSMutexCreate(&OSTmrMutex,                              /* Use a mutex to protect the timers                      */
                  "OS Tmr Mutex", 
                  p_err);
    if (*p_err != OS_ERR_NONE) {
        return;
 8006086:	bf00      	nop
                 (OS_MSG_QTY  )0,
                 (OS_TICK     )0,
                 (void       *)0,
                 (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR | OS_OPT_TASK_NO_TLS),
                 (OS_ERR     *)p_err);
}
 8006088:	370c      	adds	r7, #12
 800608a:	46bd      	mov	sp, r7
 800608c:	bd90      	pop	{r4, r7, pc}
 800608e:	bf00      	nop
 8006090:	200029c4 	.word	0x200029c4
 8006094:	200029c0 	.word	0x200029c0
 8006098:	200029cc 	.word	0x200029cc
 800609c:	0800eca8 	.word	0x0800eca8
 80060a0:	0800ec90 	.word	0x0800ec90
 80060a4:	200029d0 	.word	0x200029d0
 80060a8:	cccccccd 	.word	0xcccccccd
 80060ac:	200029e0 	.word	0x200029e0
 80060b0:	200026cc 	.word	0x200026cc
 80060b4:	200026ec 	.word	0x200026ec
 80060b8:	0800ebcc 	.word	0x0800ebcc
 80060bc:	2000289c 	.word	0x2000289c
 80060c0:	0800ecac 	.word	0x0800ecac
 80060c4:	0800ecb4 	.word	0x0800ecb4
 80060c8:	0800ec8c 	.word	0x0800ec8c
 80060cc:	0800eca4 	.word	0x0800eca4
 80060d0:	0800ecb0 	.word	0x0800ecb0
 80060d4:	08006169 	.word	0x08006169
 80060d8:	0800ebdc 	.word	0x0800ebdc
 80060dc:	20002704 	.word	0x20002704

080060e0 <OS_TmrResetPeak>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TmrResetPeak (void)
{
 80060e0:	b480      	push	{r7}
 80060e2:	af00      	add	r7, sp, #0
}
 80060e4:	bf00      	nop
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bc80      	pop	{r7}
 80060ea:	4770      	bx	lr

080060ec <OS_TmrUnlink>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_TmrUnlink (OS_TMR  *p_tmr)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
    OS_TMR  *p_tmr1;
    OS_TMR  *p_tmr2;



    if (OSTmrListPtr == p_tmr) {                            /* See if timer to remove is at the beginning of list     */
 80060f4:	4b1a      	ldr	r3, [pc, #104]	; (8006160 <OS_TmrUnlink+0x74>)
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d10c      	bne.n	8006118 <OS_TmrUnlink+0x2c>
        p_tmr1       = (OS_TMR *)p_tmr->NextPtr;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	60fb      	str	r3, [r7, #12]
        OSTmrListPtr = (OS_TMR *)p_tmr1;
 8006104:	4a16      	ldr	r2, [pc, #88]	; (8006160 <OS_TmrUnlink+0x74>)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6013      	str	r3, [r2, #0]
        if (p_tmr1 != (OS_TMR *)0) {
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d012      	beq.n	8006136 <OS_TmrUnlink+0x4a>
            p_tmr1->PrevPtr = (OS_TMR *)0;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	615a      	str	r2, [r3, #20]
 8006116:	e00e      	b.n	8006136 <OS_TmrUnlink+0x4a>
        }
    } else {
        p_tmr1          = (OS_TMR *)p_tmr->PrevPtr;         /* Remove timer from somewhere in the list                */
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	695b      	ldr	r3, [r3, #20]
 800611c:	60fb      	str	r3, [r7, #12]
        p_tmr2          = (OS_TMR *)p_tmr->NextPtr;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	60bb      	str	r3, [r7, #8]
        p_tmr1->NextPtr = p_tmr2;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	68ba      	ldr	r2, [r7, #8]
 8006128:	611a      	str	r2, [r3, #16]
        if (p_tmr2 != (OS_TMR *)0) {
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d002      	beq.n	8006136 <OS_TmrUnlink+0x4a>
            p_tmr2->PrevPtr = (OS_TMR *)p_tmr1;
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	615a      	str	r2, [r3, #20]
        }
    }
    p_tmr->State   = OS_TMR_STATE_STOPPED;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    p_tmr->NextPtr = (OS_TMR *)0;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	611a      	str	r2, [r3, #16]
    p_tmr->PrevPtr = (OS_TMR *)0;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	615a      	str	r2, [r3, #20]
    OSTmrListEntries--;
 800614a:	4b06      	ldr	r3, [pc, #24]	; (8006164 <OS_TmrUnlink+0x78>)
 800614c:	881b      	ldrh	r3, [r3, #0]
 800614e:	3b01      	subs	r3, #1
 8006150:	b29a      	uxth	r2, r3
 8006152:	4b04      	ldr	r3, [pc, #16]	; (8006164 <OS_TmrUnlink+0x78>)
 8006154:	801a      	strh	r2, [r3, #0]
}
 8006156:	bf00      	nop
 8006158:	3714      	adds	r7, #20
 800615a:	46bd      	mov	sp, r7
 800615c:	bc80      	pop	{r7}
 800615e:	4770      	bx	lr
 8006160:	200029c0 	.word	0x200029c0
 8006164:	200029cc 	.word	0x200029cc

08006168 <OS_TmrTask>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_TmrTask (void  *p_arg)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b08a      	sub	sp, #40	; 0x28
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]



    (void)&p_arg;                                                /* Not using 'p_arg', prevent compiler warning       */
    while (DEF_ON) {
        (void)OSTaskSemPend((OS_TICK )0,                         /* Wait for signal indicating time to update tmrs    */
 8006170:	f107 0312 	add.w	r3, r7, #18
 8006174:	f107 020c 	add.w	r2, r7, #12
 8006178:	2100      	movs	r1, #0
 800617a:	2000      	movs	r0, #0
 800617c:	f7fc fcb0 	bl	8002ae0 <OSTaskSemPend>
                            (OS_OPT  )OS_OPT_PEND_BLOCKING,
                            (CPU_TS *)&ts,
                            (OS_ERR *)&err);


        OS_TmrLock();
 8006180:	f000 f85a 	bl	8006238 <OS_TmrLock>
        ts_start = OS_TS_GET();
 8006184:	f001 fbf2 	bl	800796c <CPU_TS_TmrRd>
 8006188:	6238      	str	r0, [r7, #32]
        OSTmrTickCtr++;                                          /* Increment the current time                        */
 800618a:	4b28      	ldr	r3, [pc, #160]	; (800622c <OS_TmrTask+0xc4>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	3301      	adds	r3, #1
 8006190:	4a26      	ldr	r2, [pc, #152]	; (800622c <OS_TmrTask+0xc4>)
 8006192:	6013      	str	r3, [r2, #0]
        p_tmr    = OSTmrListPtr;
 8006194:	4b26      	ldr	r3, [pc, #152]	; (8006230 <OS_TmrTask+0xc8>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	627b      	str	r3, [r7, #36]	; 0x24
        while (p_tmr != (OS_TMR *)0) {                           /* Update all the timers in the list                 */
 800619a:	e033      	b.n	8006204 <OS_TmrTask+0x9c>
            OSSchedLock(&err);
 800619c:	f107 0312 	add.w	r3, r7, #18
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7fd fcf9 	bl	8003b98 <OSSchedLock>
            (void)&err;
            p_tmr_next = p_tmr->NextPtr;
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	61bb      	str	r3, [r7, #24]
            p_tmr->Remain--;
 80061ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	1e5a      	subs	r2, r3, #1
 80061b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b4:	619a      	str	r2, [r3, #24]
            if (p_tmr->Remain == 0) {
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d11b      	bne.n	80061f6 <OS_TmrTask+0x8e>
                if (p_tmr->Opt == OS_OPT_TMR_PERIODIC) {
 80061be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d104      	bne.n	80061d0 <OS_TmrTask+0x68>
                    p_tmr->Remain = p_tmr->Period;               /* Reload the time remaining                         */
 80061c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c8:	6a1a      	ldr	r2, [r3, #32]
 80061ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061cc:	619a      	str	r2, [r3, #24]
 80061ce:	e006      	b.n	80061de <OS_TmrTask+0x76>
                } else {
                    OS_TmrUnlink(p_tmr);                         /* Remove from list                                  */
 80061d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80061d2:	f7ff ff8b 	bl	80060ec <OS_TmrUnlink>
                    p_tmr->State = OS_TMR_STATE_COMPLETED;       /* Indicate that the timer has completed             */
 80061d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d8:	2203      	movs	r2, #3
 80061da:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
                }
                p_fnct = p_tmr->CallbackPtr;                     /* Execute callback function if available            */
 80061de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	617b      	str	r3, [r7, #20]
                if (p_fnct != (OS_TMR_CALLBACK_PTR)0) {
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d005      	beq.n	80061f6 <OS_TmrTask+0x8e>
                    (*p_fnct)((void *)p_tmr,
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	68da      	ldr	r2, [r3, #12]
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	4611      	mov	r1, r2
 80061f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80061f4:	4798      	blx	r3
                              p_tmr->CallbackPtrArg);
                }
            }
            p_tmr = p_tmr_next;
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	627b      	str	r3, [r7, #36]	; 0x24
            OSSchedUnlock(&err);
 80061fa:	f107 0312 	add.w	r3, r7, #18
 80061fe:	4618      	mov	r0, r3
 8006200:	f7fd fd06 	bl	8003c10 <OSSchedUnlock>

        OS_TmrLock();
        ts_start = OS_TS_GET();
        OSTmrTickCtr++;                                          /* Increment the current time                        */
        p_tmr    = OSTmrListPtr;
        while (p_tmr != (OS_TMR *)0) {                           /* Update all the timers in the list                 */
 8006204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1c8      	bne.n	800619c <OS_TmrTask+0x34>
            p_tmr = p_tmr_next;
            OSSchedUnlock(&err);
            (void)&err;
        }

        ts_delta = OS_TS_GET() - ts_start;                      /* Measure execution time of timer task              */
 800620a:	f001 fbaf 	bl	800796c <CPU_TS_TmrRd>
 800620e:	4602      	mov	r2, r0
 8006210:	6a3b      	ldr	r3, [r7, #32]
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	61fb      	str	r3, [r7, #28]
        OS_TmrUnlock();
 8006216:	f000 f821 	bl	800625c <OS_TmrUnlock>

        if (OSTmrTaskTimeMax < ts_delta) {
 800621a:	4b06      	ldr	r3, [pc, #24]	; (8006234 <OS_TmrTask+0xcc>)
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	429a      	cmp	r2, r3
 8006222:	d2a5      	bcs.n	8006170 <OS_TmrTask+0x8>
            OSTmrTaskTimeMax = ts_delta;
 8006224:	4a03      	ldr	r2, [pc, #12]	; (8006234 <OS_TmrTask+0xcc>)
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	6013      	str	r3, [r2, #0]
        }
    }
 800622a:	e7a1      	b.n	8006170 <OS_TmrTask+0x8>
 800622c:	200026cc 	.word	0x200026cc
 8006230:	200029c0 	.word	0x200029c0
 8006234:	200026ec 	.word	0x200026ec

08006238 <OS_TmrLock>:
* Note(s)    : 1) These function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

static  void  OS_TmrLock (void)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af02      	add	r7, sp, #8
    OS_ERR  err;
#if OS_CFG_MUTEX_EN > 0u
    CPU_TS  ts;


    OSMutexPend(&OSTmrMutex,                                /* Use a mutex to protect the timers                      */
 800623e:	463a      	mov	r2, r7
 8006240:	1dbb      	adds	r3, r7, #6
 8006242:	9300      	str	r3, [sp, #0]
 8006244:	4613      	mov	r3, r2
 8006246:	2200      	movs	r2, #0
 8006248:	2100      	movs	r1, #0
 800624a:	4803      	ldr	r0, [pc, #12]	; (8006258 <OS_TmrLock+0x20>)
 800624c:	f7ff f9d8 	bl	8005600 <OSMutexPend>
                &err);
#else
    OSSchedLock(&err);                                      /* Lock the scheduler to protect the timers               */
#endif
    (void)&err;
}
 8006250:	bf00      	nop
 8006252:	3708      	adds	r7, #8
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	2000289c 	.word	0x2000289c

0800625c <OS_TmrUnlock>:




static  void  OS_TmrUnlock (void)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
    OS_ERR  err;


#if OS_CFG_MUTEX_EN > 0u
    OSMutexPost(&OSTmrMutex,                                /* Use a mutex to protect the timers                      */
 8006262:	1dbb      	adds	r3, r7, #6
 8006264:	461a      	mov	r2, r3
 8006266:	2100      	movs	r1, #0
 8006268:	4803      	ldr	r0, [pc, #12]	; (8006278 <OS_TmrUnlock+0x1c>)
 800626a:	f7ff fad1 	bl	8005810 <OSMutexPost>
                &err);
#else
    OSSchedUnlock(&err);                                    /* Lock the scheduler to protect the timers               */
#endif
    (void)&err;
}
 800626e:	bf00      	nop
 8006270:	3708      	adds	r7, #8
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	2000289c 	.word	0x2000289c

0800627c <OSIdleTaskHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSIdleTaskHook (void)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	af00      	add	r7, sp, #0
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppIdleTaskHookPtr != (OS_APP_HOOK_VOID)0) {
 8006280:	4b04      	ldr	r3, [pc, #16]	; (8006294 <OSIdleTaskHook+0x18>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d002      	beq.n	800628e <OSIdleTaskHook+0x12>
        (*OS_AppIdleTaskHookPtr)();
 8006288:	4b02      	ldr	r3, [pc, #8]	; (8006294 <OSIdleTaskHook+0x18>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4798      	blx	r3
    }
#endif
}
 800628e:	bf00      	nop
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	200028cc 	.word	0x200028cc

08006298 <OSInitHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSInitHook (void)
{
 8006298:	b480      	push	{r7}
 800629a:	af00      	add	r7, sp, #0
                                                                    /* 8-byte align the ISR stack.                            */    
    OS_CPU_ExceptStkBase = (CPU_STK *)(OSCfg_ISRStkBasePtr + OSCfg_ISRStkSize);
 800629c:	4b09      	ldr	r3, [pc, #36]	; (80062c4 <OSInitHook+0x2c>)
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	4b09      	ldr	r3, [pc, #36]	; (80062c8 <OSInitHook+0x30>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	4413      	add	r3, r2
 80062a8:	4a08      	ldr	r2, [pc, #32]	; (80062cc <OSInitHook+0x34>)
 80062aa:	6013      	str	r3, [r2, #0]
    OS_CPU_ExceptStkBase = (CPU_STK *)((CPU_STK)(OS_CPU_ExceptStkBase) & 0xFFFFFFF8);
 80062ac:	4b07      	ldr	r3, [pc, #28]	; (80062cc <OSInitHook+0x34>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f023 0307 	bic.w	r3, r3, #7
 80062b4:	461a      	mov	r2, r3
 80062b6:	4b05      	ldr	r3, [pc, #20]	; (80062cc <OSInitHook+0x34>)
 80062b8:	601a      	str	r2, [r3, #0]
}
 80062ba:	bf00      	nop
 80062bc:	46bd      	mov	sp, r7
 80062be:	bc80      	pop	{r7}
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	0800ec68 	.word	0x0800ec68
 80062c8:	0800ec6c 	.word	0x0800ec6c
 80062cc:	2000386c 	.word	0x2000386c

080062d0 <OSStatTaskHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSStatTaskHook (void)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	af00      	add	r7, sp, #0
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppStatTaskHookPtr != (OS_APP_HOOK_VOID)0) {
 80062d4:	4b04      	ldr	r3, [pc, #16]	; (80062e8 <OSStatTaskHook+0x18>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d002      	beq.n	80062e2 <OSStatTaskHook+0x12>
        (*OS_AppStatTaskHookPtr)();
 80062dc:	4b02      	ldr	r3, [pc, #8]	; (80062e8 <OSStatTaskHook+0x18>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4798      	blx	r3
    }
#endif
}
 80062e2:	bf00      	nop
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	200028e8 	.word	0x200028e8

080062ec <OSTaskCreateHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSTaskCreateHook (OS_TCB  *p_tcb)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskCreateHookPtr != (OS_APP_HOOK_TCB)0) {
 80062f4:	4b05      	ldr	r3, [pc, #20]	; (800630c <OSTaskCreateHook+0x20>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d003      	beq.n	8006304 <OSTaskCreateHook+0x18>
        (*OS_AppTaskCreateHookPtr)(p_tcb);
 80062fc:	4b03      	ldr	r3, [pc, #12]	; (800630c <OSTaskCreateHook+0x20>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	4798      	blx	r3
    }
#else
    (void)p_tcb;                                            /* Prevent compiler warning                               */
#endif
}
 8006304:	bf00      	nop
 8006306:	3708      	adds	r7, #8
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	20002604 	.word	0x20002604

08006310 <OSTaskReturnHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSTaskReturnHook (OS_TCB  *p_tcb)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskReturnHookPtr != (OS_APP_HOOK_TCB)0) {
 8006318:	4b05      	ldr	r3, [pc, #20]	; (8006330 <OSTaskReturnHook+0x20>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d003      	beq.n	8006328 <OSTaskReturnHook+0x18>
        (*OS_AppTaskReturnHookPtr)(p_tcb);
 8006320:	4b03      	ldr	r3, [pc, #12]	; (8006330 <OSTaskReturnHook+0x20>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	4798      	blx	r3
    }
#else
    (void)p_tcb;                                            /* Prevent compiler warning                               */
#endif
}
 8006328:	bf00      	nop
 800632a:	3708      	adds	r7, #8
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	2000246c 	.word	0x2000246c

08006334 <OSTaskStkInit>:
                         void          *p_arg,
                         CPU_STK       *p_stk_base,
                         CPU_STK       *p_stk_limit,
                         CPU_STK_SIZE   stk_size,
                         OS_OPT         opt)
{
 8006334:	b480      	push	{r7}
 8006336:	b087      	sub	sp, #28
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
 8006340:	603b      	str	r3, [r7, #0]
    CPU_STK    *p_stk;

    
    (void)opt;                                                  /* Prevent compiler warning                               */

    p_stk = &p_stk_base[stk_size];                              /* Load stack pointer                                     */
 8006342:	6a3b      	ldr	r3, [r7, #32]
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	4413      	add	r3, r2
 800634a:	617b      	str	r3, [r7, #20]
                                                                /* Align the stack to 8-bytes.                            */
    p_stk = (CPU_STK *)((CPU_STK)(p_stk) & 0xFFFFFFF8);
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	f023 0307 	bic.w	r3, r3, #7
 8006352:	617b      	str	r3, [r7, #20]
                                                                /* Registers stacked as if auto-saved on exception        */
    *--p_stk = (CPU_STK)0x01000000u;                            /* xPSR                                                   */
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	3b04      	subs	r3, #4
 8006358:	617b      	str	r3, [r7, #20]
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006360:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)p_task;                                 /* Entry Point                                            */
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	3b04      	subs	r3, #4
 8006366:	617b      	str	r3, [r7, #20]
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)OS_TaskReturn;                          /* R14 (LR)                                               */
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	3b04      	subs	r3, #4
 8006372:	617b      	str	r3, [r7, #20]
 8006374:	4a30      	ldr	r2, [pc, #192]	; (8006438 <OSTaskStkInit+0x104>)
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x12121212u;                            /* R12                                                    */
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	3b04      	subs	r3, #4
 800637e:	617b      	str	r3, [r7, #20]
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 8006386:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x03030303u;                            /* R3                                                     */
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	3b04      	subs	r3, #4
 800638c:	617b      	str	r3, [r7, #20]
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 8006394:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x02020202u;                            /* R2                                                     */
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	3b04      	subs	r3, #4
 800639a:	617b      	str	r3, [r7, #20]
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 80063a2:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)p_stk_limit;                            /* R1                                                     */
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	3b04      	subs	r3, #4
 80063a8:	617b      	str	r3, [r7, #20]
 80063aa:	683a      	ldr	r2, [r7, #0]
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)p_arg;                                  /* R0 : argument                                          */
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	3b04      	subs	r3, #4
 80063b4:	617b      	str	r3, [r7, #20]
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	601a      	str	r2, [r3, #0]
                                                                /* Remaining registers saved on process stack             */
    *--p_stk = (CPU_STK)0x11111111u;                            /* R11                                                    */
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	3b04      	subs	r3, #4
 80063c0:	617b      	str	r3, [r7, #20]
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 80063c8:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x10101010u;                            /* R10                                                    */
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	3b04      	subs	r3, #4
 80063ce:	617b      	str	r3, [r7, #20]
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 80063d6:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x09090909u;                            /* R9                                                     */
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	3b04      	subs	r3, #4
 80063dc:	617b      	str	r3, [r7, #20]
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 80063e4:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x08080808u;                            /* R8                                                     */
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	3b04      	subs	r3, #4
 80063ea:	617b      	str	r3, [r7, #20]
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 80063f2:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x07070707u;                            /* R7                                                     */
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	3b04      	subs	r3, #4
 80063f8:	617b      	str	r3, [r7, #20]
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 8006400:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x06060606u;                            /* R6                                                     */
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	3b04      	subs	r3, #4
 8006406:	617b      	str	r3, [r7, #20]
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 800640e:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x05050505u;                            /* R5                                                     */
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	3b04      	subs	r3, #4
 8006414:	617b      	str	r3, [r7, #20]
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 800641c:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x04040404u;                            /* R4                                                     */
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	3b04      	subs	r3, #4
 8006422:	617b      	str	r3, [r7, #20]
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 800642a:	601a      	str	r2, [r3, #0]
        *--p_stk = (CPU_STK)0x3F800000u;                        /* S1                                                     */
        *--p_stk = (CPU_STK)0x00000000u;                        /* S0                                                     */
    }
#endif    

    return (p_stk);
 800642c:	697b      	ldr	r3, [r7, #20]
}
 800642e:	4618      	mov	r0, r3
 8006430:	371c      	adds	r7, #28
 8006432:	46bd      	mov	sp, r7
 8006434:	bc80      	pop	{r7}
 8006436:	4770      	bx	lr
 8006438:	08003181 	.word	0x08003181

0800643c <OSTaskSwHook>:
*                 to the task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/

void  OSTaskSwHook (void)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
        OS_CPU_FP_Reg_Pop(OSTCBHighRdyPtr->StkPtr);
    }
#endif    

#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskSwHookPtr != (OS_APP_HOOK_VOID)0) {
 8006442:	4b20      	ldr	r3, [pc, #128]	; (80064c4 <OSTaskSwHook+0x88>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d002      	beq.n	8006450 <OSTaskSwHook+0x14>
        (*OS_AppTaskSwHookPtr)();
 800644a:	4b1e      	ldr	r3, [pc, #120]	; (80064c4 <OSTaskSwHook+0x88>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4798      	blx	r3
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_TASK_SWITCHED_IN(OSTCBHighRdyPtr);             /* Record the event.                                      */
#endif

#if OS_CFG_TASK_PROFILE_EN > 0u
    ts = OS_TS_GET();
 8006450:	f001 fa8c 	bl	800796c <CPU_TS_TmrRd>
 8006454:	6078      	str	r0, [r7, #4]
    if (OSTCBCurPtr != OSTCBHighRdyPtr) {
 8006456:	4b1c      	ldr	r3, [pc, #112]	; (80064c8 <OSTaskSwHook+0x8c>)
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	4b1c      	ldr	r3, [pc, #112]	; (80064cc <OSTaskSwHook+0x90>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	429a      	cmp	r2, r3
 8006460:	d016      	beq.n	8006490 <OSTaskSwHook+0x54>
        OSTCBCurPtr->CyclesDelta  = ts - OSTCBCurPtr->CyclesStart;
 8006462:	4b19      	ldr	r3, [pc, #100]	; (80064c8 <OSTaskSwHook+0x8c>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a18      	ldr	r2, [pc, #96]	; (80064c8 <OSTaskSwHook+0x8c>)
 8006468:	6812      	ldr	r2, [r2, #0]
 800646a:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 800646e:	6879      	ldr	r1, [r7, #4]
 8006470:	1a8a      	subs	r2, r1, r2
 8006472:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        OSTCBCurPtr->CyclesTotal += (OS_CYCLES)OSTCBCurPtr->CyclesDelta;
 8006476:	4b14      	ldr	r3, [pc, #80]	; (80064c8 <OSTaskSwHook+0x8c>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a13      	ldr	r2, [pc, #76]	; (80064c8 <OSTaskSwHook+0x8c>)
 800647c:	6812      	ldr	r2, [r2, #0]
 800647e:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
 8006482:	4a11      	ldr	r2, [pc, #68]	; (80064c8 <OSTaskSwHook+0x8c>)
 8006484:	6812      	ldr	r2, [r2, #0]
 8006486:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800648a:	440a      	add	r2, r1
 800648c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }

    OSTCBHighRdyPtr->CyclesStart = ts;
 8006490:	4b0e      	ldr	r3, [pc, #56]	; (80064cc <OSTaskSwHook+0x90>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }
#endif

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
                                                            /* Keep track of per-task scheduler lock time             */
    if (OSTCBCurPtr->SchedLockTimeMax < OSSchedLockTimeMaxCur) {
 800649a:	4b0b      	ldr	r3, [pc, #44]	; (80064c8 <OSTaskSwHook+0x8c>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80064a2:	4b0b      	ldr	r3, [pc, #44]	; (80064d0 <OSTaskSwHook+0x94>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d205      	bcs.n	80064b6 <OSTaskSwHook+0x7a>
        OSTCBCurPtr->SchedLockTimeMax = OSSchedLockTimeMaxCur;
 80064aa:	4b07      	ldr	r3, [pc, #28]	; (80064c8 <OSTaskSwHook+0x8c>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a08      	ldr	r2, [pc, #32]	; (80064d0 <OSTaskSwHook+0x94>)
 80064b0:	6812      	ldr	r2, [r2, #0]
 80064b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }
    OSSchedLockTimeMaxCur = (CPU_TS)0;                      /* Reset the per-task value                               */
 80064b6:	4b06      	ldr	r3, [pc, #24]	; (80064d0 <OSTaskSwHook+0x94>)
 80064b8:	2200      	movs	r2, #0
 80064ba:	601a      	str	r2, [r3, #0]
#endif
}
 80064bc:	bf00      	nop
 80064be:	3708      	adds	r7, #8
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	200028d8 	.word	0x200028d8
 80064c8:	200026d4 	.word	0x200026d4
 80064cc:	200026e0 	.word	0x200026e0
 80064d0:	200026e4 	.word	0x200026e4

080064d4 <OSTimeTickHook>:
* Note(s)    : 1) This function is assumed to be called from the Tick ISR.
*********************************************************************************************************
*/

void  OSTimeTickHook (void)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	af00      	add	r7, sp, #0
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTimeTickHookPtr != (OS_APP_HOOK_VOID)0) {
 80064d8:	4b04      	ldr	r3, [pc, #16]	; (80064ec <OSTimeTickHook+0x18>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d002      	beq.n	80064e6 <OSTimeTickHook+0x12>
        (*OS_AppTimeTickHookPtr)();
 80064e0:	4b02      	ldr	r3, [pc, #8]	; (80064ec <OSTimeTickHook+0x18>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4798      	blx	r3
    }
#endif
}
 80064e6:	bf00      	nop
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	200026f4 	.word	0x200026f4

080064f0 <OS_CPU_SysTickHandler>:
* Note(s)    : 1) This function MUST be placed on entry 15 of the Cortex-M4 vector table.
*********************************************************************************************************
*/

void  OS_CPU_SysTickHandler (void)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
 80064f6:	2300      	movs	r3, #0
 80064f8:	607b      	str	r3, [r7, #4]


    CPU_CRITICAL_ENTER();
 80064fa:	f7f9 fef1 	bl	80002e0 <CPU_SR_Save>
 80064fe:	6078      	str	r0, [r7, #4]
    OSIntNestingCtr++;                                      /* Tell uC/OS-III that we are starting an ISR             */
 8006500:	4b08      	ldr	r3, [pc, #32]	; (8006524 <OS_CPU_SysTickHandler+0x34>)
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	3301      	adds	r3, #1
 8006506:	b2da      	uxtb	r2, r3
 8006508:	4b06      	ldr	r3, [pc, #24]	; (8006524 <OS_CPU_SysTickHandler+0x34>)
 800650a:	701a      	strb	r2, [r3, #0]
    CPU_CRITICAL_EXIT();
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f7f9 feeb 	bl	80002e8 <CPU_SR_Restore>

    OSTimeTick();                                           /* Call uC/OS-III's OSTimeTick()                          */
 8006512:	f7fe ffe3 	bl	80054dc <OSTimeTick>

    OSIntExit();                                            /* Tell uC/OS-III that we are leaving the ISR             */
 8006516:	f7fd fa7f 	bl	8003a18 <OSIntExit>
}
 800651a:	bf00      	nop
 800651c:	3708      	adds	r7, #8
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	20002700 	.word	0x20002700

08006528 <OS_CPU_SysTickInit>:
* Note(s)    : 1) This function MUST be called after OSStart() & after processor initialization.
*********************************************************************************************************
*/

void  OS_CPU_SysTickInit (CPU_INT32U  cnts)
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
    CPU_INT32U  prio;


    CPU_REG_NVIC_ST_RELOAD = cnts - 1u;
 8006530:	4a0f      	ldr	r2, [pc, #60]	; (8006570 <OS_CPU_SysTickInit+0x48>)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	3b01      	subs	r3, #1
 8006536:	6013      	str	r3, [r2, #0]

                                                            /* Set SysTick handler prio.                              */
    prio                   = CPU_REG_NVIC_SHPRI3;
 8006538:	4b0e      	ldr	r3, [pc, #56]	; (8006574 <OS_CPU_SysTickInit+0x4c>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	60fb      	str	r3, [r7, #12]
    prio                  &= DEF_BIT_FIELD(24, 0);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006544:	60fb      	str	r3, [r7, #12]
    prio                  |= DEF_BIT_MASK(OS_CPU_CFG_SYSTICK_PRIO, 24);

    CPU_REG_NVIC_SHPRI3    = prio;
 8006546:	4a0b      	ldr	r2, [pc, #44]	; (8006574 <OS_CPU_SysTickInit+0x4c>)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6013      	str	r3, [r2, #0]

                                                            /* Enable timer.                                          */
    CPU_REG_NVIC_ST_CTRL  |= CPU_REG_NVIC_ST_CTRL_CLKSOURCE |
 800654c:	4a0a      	ldr	r2, [pc, #40]	; (8006578 <OS_CPU_SysTickInit+0x50>)
 800654e:	4b0a      	ldr	r3, [pc, #40]	; (8006578 <OS_CPU_SysTickInit+0x50>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f043 0305 	orr.w	r3, r3, #5
 8006556:	6013      	str	r3, [r2, #0]
                             CPU_REG_NVIC_ST_CTRL_ENABLE;
                                                            /* Enable timer interrupt.                                */
    CPU_REG_NVIC_ST_CTRL  |= CPU_REG_NVIC_ST_CTRL_TICKINT;
 8006558:	4a07      	ldr	r2, [pc, #28]	; (8006578 <OS_CPU_SysTickInit+0x50>)
 800655a:	4b07      	ldr	r3, [pc, #28]	; (8006578 <OS_CPU_SysTickInit+0x50>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f043 0302 	orr.w	r3, r3, #2
 8006562:	6013      	str	r3, [r2, #0]
}
 8006564:	bf00      	nop
 8006566:	3714      	adds	r7, #20
 8006568:	46bd      	mov	sp, r7
 800656a:	bc80      	pop	{r7}
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	e000e014 	.word	0xe000e014
 8006574:	e000ed20 	.word	0xe000ed20
 8006578:	e000e010 	.word	0xe000e010

0800657c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	4603      	mov	r3, r0
 8006584:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8006586:	4908      	ldr	r1, [pc, #32]	; (80065a8 <NVIC_EnableIRQ+0x2c>)
 8006588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800658c:	095b      	lsrs	r3, r3, #5
 800658e:	79fa      	ldrb	r2, [r7, #7]
 8006590:	f002 021f 	and.w	r2, r2, #31
 8006594:	2001      	movs	r0, #1
 8006596:	fa00 f202 	lsl.w	r2, r0, r2
 800659a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800659e:	bf00      	nop
 80065a0:	370c      	adds	r7, #12
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bc80      	pop	{r7}
 80065a6:	4770      	bx	lr
 80065a8:	e000e100 	.word	0xe000e100

080065ac <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	4603      	mov	r3, r0
 80065b4:	6039      	str	r1, [r7, #0]
 80065b6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80065b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	da0b      	bge.n	80065d8 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80065c0:	490d      	ldr	r1, [pc, #52]	; (80065f8 <NVIC_SetPriority+0x4c>)
 80065c2:	79fb      	ldrb	r3, [r7, #7]
 80065c4:	f003 030f 	and.w	r3, r3, #15
 80065c8:	3b04      	subs	r3, #4
 80065ca:	683a      	ldr	r2, [r7, #0]
 80065cc:	b2d2      	uxtb	r2, r2
 80065ce:	0092      	lsls	r2, r2, #2
 80065d0:	b2d2      	uxtb	r2, r2
 80065d2:	440b      	add	r3, r1
 80065d4:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 80065d6:	e009      	b.n	80065ec <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80065d8:	4908      	ldr	r1, [pc, #32]	; (80065fc <NVIC_SetPriority+0x50>)
 80065da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065de:	683a      	ldr	r2, [r7, #0]
 80065e0:	b2d2      	uxtb	r2, r2
 80065e2:	0092      	lsls	r2, r2, #2
 80065e4:	b2d2      	uxtb	r2, r2
 80065e6:	440b      	add	r3, r1
 80065e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80065ec:	bf00      	nop
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bc80      	pop	{r7}
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	e000ed00 	.word	0xe000ed00
 80065fc:	e000e100 	.word	0xe000e100

08006600 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	60da      	str	r2, [r3, #12]
}
 8006614:	bf00      	nop
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	bc80      	pop	{r7}
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop

08006620 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	460b      	mov	r3, r1
 800662a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	68da      	ldr	r2, [r3, #12]
 8006630:	78fb      	ldrb	r3, [r7, #3]
 8006632:	2101      	movs	r1, #1
 8006634:	fa01 f303 	lsl.w	r3, r1, r3
 8006638:	431a      	orrs	r2, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	60da      	str	r2, [r3, #12]
}
 800663e:	bf00      	nop
 8006640:	370c      	adds	r7, #12
 8006642:	46bd      	mov	sp, r7
 8006644:	bc80      	pop	{r7}
 8006646:	4770      	bx	lr

08006648 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	60da      	str	r2, [r3, #12]
}
 8006656:	bf00      	nop
 8006658:	370c      	adds	r7, #12
 800665a:	46bd      	mov	sp, r7
 800665c:	bc80      	pop	{r7}
 800665e:	4770      	bx	lr

08006660 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	460b      	mov	r3, r1
 800666a:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 800666c:	887a      	ldrh	r2, [r7, #2]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	635a      	str	r2, [r3, #52]	; 0x34
}
 8006672:	bf00      	nop
 8006674:	370c      	adds	r7, #12
 8006676:	46bd      	mov	sp, r7
 8006678:	bc80      	pop	{r7}
 800667a:	4770      	bx	lr

0800667c <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	460b      	mov	r3, r1
 8006686:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8006688:	887a      	ldrh	r2, [r7, #2]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800668e:	bf00      	nop
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	bc80      	pop	{r7}
 8006696:	4770      	bx	lr

08006698 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS |= (uint32_t)shadow_transfer_msk;  
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	691a      	ldr	r2, [r3, #16]
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	431a      	orrs	r2, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	611a      	str	r2, [r3, #16]
}
 80066ae:	bf00      	nop
 80066b0:	370c      	adds	r7, #12
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bc80      	pop	{r7}
 80066b6:	4770      	bx	lr

080066b8 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	460b      	mov	r3, r1
 80066c2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80066ca:	78fb      	ldrb	r3, [r7, #3]
 80066cc:	2101      	movs	r1, #1
 80066ce:	fa01 f303 	lsl.w	r3, r1, r3
 80066d2:	431a      	orrs	r2, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 80066da:	bf00      	nop
 80066dc:	370c      	adds	r7, #12
 80066de:	46bd      	mov	sp, r7
 80066e0:	bc80      	pop	{r7}
 80066e2:	4770      	bx	lr

080066e4 <XMC_SCU_SetCcuTriggerHigh>:
 * the timer using this API.<BR>
 * \par<b>Related APIs:</b><BR>
 * XMC_CCU4_SLICE_StartConfig(), XMC_CCU4_SLICE_SetInput(), XMC_SCU_SetCcuTriggerLow()\n\n\n
 */
__STATIC_INLINE void XMC_SCU_SetCcuTriggerHigh(const uint32_t trigger)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  SCU_GENERAL->CCUCON |= (uint32_t)trigger;
 80066ec:	4905      	ldr	r1, [pc, #20]	; (8006704 <XMC_SCU_SetCcuTriggerHigh+0x20>)
 80066ee:	4b05      	ldr	r3, [pc, #20]	; (8006704 <XMC_SCU_SetCcuTriggerHigh+0x20>)
 80066f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 80066f8:	bf00      	nop
 80066fa:	370c      	adds	r7, #12
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bc80      	pop	{r7}
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	50004000 	.word	0x50004000

08006708 <BSP_CCU4_Init>:
#include "../../XMCLIB/inc/xmc4_ccu4_map.h"



_Bool BSP_CCU4_Init (void)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
	XMC_CCU4_SLICE_COMPARE_CONFIG_t g_timer_object =
 800670e:	f107 0308 	add.w	r3, r7, #8
 8006712:	2200      	movs	r2, #0
 8006714:	601a      	str	r2, [r3, #0]
 8006716:	605a      	str	r2, [r3, #4]
 8006718:	7a3b      	ldrb	r3, [r7, #8]
 800671a:	f043 0302 	orr.w	r3, r3, #2
 800671e:	723b      	strb	r3, [r7, #8]
 8006720:	7b3b      	ldrb	r3, [r7, #12]
 8006722:	2208      	movs	r2, #8
 8006724:	f362 0303 	bfi	r3, r2, #0, #4
 8006728:	733b      	strb	r3, [r7, #12]
		};
	};*/

	  /* Local variable which holds configuration of Event-1 */
	XMC_CCU4_SLICE_EVENT_CONFIG_t config;
	config.duration = XMC_CCU4_SLICE_EVENT_FILTER_DISABLED;
 800672a:	2300      	movs	r3, #0
 800672c:	71fb      	strb	r3, [r7, #7]
	config.edge     = XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_RISING_EDGE;
 800672e:	2301      	movs	r3, #1
 8006730:	717b      	strb	r3, [r7, #5]
	config.level    = XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH; /* Not needed */
 8006732:	2300      	movs	r3, #0
 8006734:	71bb      	strb	r3, [r7, #6]
	config.mapped_input = XMC_CCU4_SLICE_INPUT_I;
 8006736:	2308      	movs	r3, #8
 8006738:	713b      	strb	r3, [r7, #4]

	/* Ensure fCCU reaches CCU42 */
	XMC_CCU4_SetModuleClock(MODULE_PTR, XMC_CCU4_CLOCK_SCU);
 800673a:	2100      	movs	r1, #0
 800673c:	482d      	ldr	r0, [pc, #180]	; (80067f4 <BSP_CCU4_Init+0xec>)
 800673e:	f001 fb19 	bl	8007d74 <XMC_CCU4_SetModuleClock>
	XMC_CCU4_Init(MODULE_PTR, XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR);
 8006742:	2100      	movs	r1, #0
 8006744:	482b      	ldr	r0, [pc, #172]	; (80067f4 <BSP_CCU4_Init+0xec>)
 8006746:	f001 faf5 	bl	8007d34 <XMC_CCU4_Init>

	/* Get the slice out of idle mode */
	XMC_CCU4_EnableClock(MODULE_PTR, SLICE_NUMBER);
 800674a:	2100      	movs	r1, #0
 800674c:	4829      	ldr	r0, [pc, #164]	; (80067f4 <BSP_CCU4_Init+0xec>)
 800674e:	f7ff ff67 	bl	8006620 <XMC_CCU4_EnableClock>
/* Start the prescaler and restore clocks to slices */
	XMC_CCU4_StartPrescaler(MODULE_PTR);
 8006752:	4828      	ldr	r0, [pc, #160]	; (80067f4 <BSP_CCU4_Init+0xec>)
 8006754:	f7ff ff54 	bl	8006600 <XMC_CCU4_StartPrescaler>

/* Initialize the Slice */
	XMC_CCU4_SLICE_CompareInit(SLICE_PTR, &g_timer_object);
 8006758:	f107 0308 	add.w	r3, r7, #8
 800675c:	4619      	mov	r1, r3
 800675e:	4826      	ldr	r0, [pc, #152]	; (80067f8 <BSP_CCU4_Init+0xf0>)
 8006760:	f001 fb22 	bl	8007da8 <XMC_CCU4_SLICE_CompareInit>
/* Enable compare match and period match events */
	XMC_CCU4_SLICE_EnableEvent(SLICE_PTR, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8006764:	2100      	movs	r1, #0
 8006766:	4824      	ldr	r0, [pc, #144]	; (80067f8 <BSP_CCU4_Init+0xf0>)
 8006768:	f7ff ffa6 	bl	80066b8 <XMC_CCU4_SLICE_EnableEvent>
	XMC_CCU4_SLICE_EnableEvent(SLICE_PTR, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
 800676c:	2102      	movs	r1, #2
 800676e:	4822      	ldr	r0, [pc, #136]	; (80067f8 <BSP_CCU4_Init+0xf0>)
 8006770:	f7ff ffa2 	bl	80066b8 <XMC_CCU4_SLICE_EnableEvent>
/* Connect period match event to SR0 */
	XMC_CCU4_SLICE_SetInterruptNode(SLICE_PTR, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH, XMC_CCU4_SLICE_SR_ID_0);
 8006774:	2200      	movs	r2, #0
 8006776:	2100      	movs	r1, #0
 8006778:	481f      	ldr	r0, [pc, #124]	; (80067f8 <BSP_CCU4_Init+0xf0>)
 800677a:	f001 fbe3 	bl	8007f44 <XMC_CCU4_SLICE_SetInterruptNode>

/* Connect compare match event to SR1 */
	XMC_CCU4_SLICE_SetInterruptNode(SLICE_PTR, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP, XMC_CCU4_SLICE_SR_ID_1);
 800677e:	2201      	movs	r2, #1
 8006780:	2102      	movs	r1, #2
 8006782:	481d      	ldr	r0, [pc, #116]	; (80067f8 <BSP_CCU4_Init+0xf0>)
 8006784:	f001 fbde 	bl	8007f44 <XMC_CCU4_SLICE_SetInterruptNode>

/* Configure NVIC */
	/* Set priority */
	NVIC_SetPriority(CCU40_0_IRQn, 10U);
 8006788:	210a      	movs	r1, #10
 800678a:	202c      	movs	r0, #44	; 0x2c
 800678c:	f7ff ff0e 	bl	80065ac <NVIC_SetPriority>
	NVIC_SetPriority(CCU40_1_IRQn, 10U);
 8006790:	210a      	movs	r1, #10
 8006792:	202d      	movs	r0, #45	; 0x2d
 8006794:	f7ff ff0a 	bl	80065ac <NVIC_SetPriority>
	//NVIC_SetPriority(CCU40_3_IRQn, 10U);
	/* Enable IRQ */
	NVIC_EnableIRQ(CCU40_0_IRQn);
 8006798:	202c      	movs	r0, #44	; 0x2c
 800679a:	f7ff feef 	bl	800657c <NVIC_EnableIRQ>
	NVIC_EnableIRQ(CCU40_1_IRQn);
 800679e:	202d      	movs	r0, #45	; 0x2d
 80067a0:	f7ff feec 	bl	800657c <NVIC_EnableIRQ>
	/* Program a very large value into PR and CR */
	XMC_CCU4_SLICE_SetTimerPeriodMatch(SLICE_PTR, PERIODE); //65500U
 80067a4:	f242 419e 	movw	r1, #9374	; 0x249e
 80067a8:	4813      	ldr	r0, [pc, #76]	; (80067f8 <BSP_CCU4_Init+0xf0>)
 80067aa:	f7ff ff59 	bl	8006660 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
	XMC_CCU4_SLICE_SetTimerCompareMatch(SLICE_PTR, CAPTURE1);//32000U
 80067ae:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 80067b2:	4811      	ldr	r0, [pc, #68]	; (80067f8 <BSP_CCU4_Init+0xf0>)
 80067b4:	f7ff ff62 	bl	800667c <XMC_CCU4_SLICE_SetTimerCompareMatch>

	/* Enable shadow transfer */
	XMC_CCU4_EnableShadowTransfer(MODULE_PTR, 							\
 80067b8:	2105      	movs	r1, #5
 80067ba:	480e      	ldr	r0, [pc, #56]	; (80067f4 <BSP_CCU4_Init+0xec>)
 80067bc:	f7ff ff6c 	bl	8006698 <XMC_CCU4_EnableShadowTransfer>
			(uint32_t)(XMC_CCU4_SHADOW_TRANSFER_SLICE_0|				\
			XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_0));
	/* Configure Event-1 and map it to Input-I */
	XMC_CCU4_SLICE_ConfigureEvent(SLICE_PTR, XMC_CCU4_SLICE_EVENT_0, &config);
 80067c0:	1d3b      	adds	r3, r7, #4
 80067c2:	461a      	mov	r2, r3
 80067c4:	2101      	movs	r1, #1
 80067c6:	480c      	ldr	r0, [pc, #48]	; (80067f8 <BSP_CCU4_Init+0xf0>)
 80067c8:	f001 fb52 	bl	8007e70 <XMC_CCU4_SLICE_ConfigureEvent>
	/* Map Event-1 to Start function */
	XMC_CCU4_SLICE_StartConfig(SLICE_PTR, XMC_CCU4_SLICE_EVENT_0, XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR);
 80067cc:	2201      	movs	r2, #1
 80067ce:	2101      	movs	r1, #1
 80067d0:	4809      	ldr	r0, [pc, #36]	; (80067f8 <BSP_CCU4_Init+0xf0>)
 80067d2:	f001 fb1f 	bl	8007e14 <XMC_CCU4_SLICE_StartConfig>

	/* Generate an external start trigger */
	XMC_SCU_SetCcuTriggerHigh(CAPCOM_MASK);
 80067d6:	2001      	movs	r0, #1
 80067d8:	f7ff ff84 	bl	80066e4 <XMC_SCU_SetCcuTriggerHigh>
	XMC_CCU4_EnableClock(MODULE_PTR, SLICE_NUMBER);
 80067dc:	2100      	movs	r1, #0
 80067de:	4805      	ldr	r0, [pc, #20]	; (80067f4 <BSP_CCU4_Init+0xec>)
 80067e0:	f7ff ff1e 	bl	8006620 <XMC_CCU4_EnableClock>
	XMC_CCU4_SLICE_StartTimer(SLICE_PTR);
 80067e4:	4804      	ldr	r0, [pc, #16]	; (80067f8 <BSP_CCU4_Init+0xf0>)
 80067e6:	f7ff ff2f 	bl	8006648 <XMC_CCU4_SLICE_StartTimer>
	return true;
 80067ea:	2301      	movs	r3, #1
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3710      	adds	r7, #16
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	4000c000 	.word	0x4000c000
 80067f8:	4000c100 	.word	0x4000c100

080067fc <CCU40_0_SetCapture>:

void CCU40_0_SetCapture(int dc){
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
	XMC_CCU4_SLICE_SetTimerCompareMatch(SLICE_PTR, (PERIODE/(dc*10)));
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	4613      	mov	r3, r2
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	4413      	add	r3, r2
 800680c:	005b      	lsls	r3, r3, #1
 800680e:	461a      	mov	r2, r3
 8006810:	f242 439e 	movw	r3, #9374	; 0x249e
 8006814:	fbb3 f3f2 	udiv	r3, r3, r2
 8006818:	b29b      	uxth	r3, r3
 800681a:	4619      	mov	r1, r3
 800681c:	4805      	ldr	r0, [pc, #20]	; (8006834 <CCU40_0_SetCapture+0x38>)
 800681e:	f7ff ff2d 	bl	800667c <XMC_CCU4_SLICE_SetTimerCompareMatch>
	XMC_CCU4_EnableShadowTransfer(MODULE_PTR,XMC_CCU4_SHADOW_TRANSFER_SLICE_0);
 8006822:	2101      	movs	r1, #1
 8006824:	4804      	ldr	r0, [pc, #16]	; (8006838 <CCU40_0_SetCapture+0x3c>)
 8006826:	f7ff ff37 	bl	8006698 <XMC_CCU4_EnableShadowTransfer>
}
 800682a:	bf00      	nop
 800682c:	3708      	adds	r7, #8
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	4000c100 	.word	0x4000c100
 8006838:	4000c000 	.word	0x4000c000

0800683c <XMC_SCU_SetCcuTriggerHigh>:
 * The input signal for the CCU slice should be selected as SCU input.
 * The above mentioned configurations can be made using the CCU LLD API XMC_CCU4_SLICE_StartConfig(). 
 * CCU timer slice should be started using XMC_CCU4_SLICE_StartTimer() before triggering 
 * the timer using this API.<BR>
 * \par<b>Related APIs:</b><BR>
 * XMC_CCU4_SLICE_StartConfig(), XMC_CCU4_SLICE_SetInput(), XMC_SCU_SetCcuTriggerLow()\n\n\n
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 */
 8006844:	4905      	ldr	r1, [pc, #20]	; (800685c <XMC_SCU_SetCcuTriggerHigh+0x20>)
 8006846:	4b05      	ldr	r3, [pc, #20]	; (800685c <XMC_SCU_SetCcuTriggerHigh+0x20>)
 8006848:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4313      	orrs	r3, r2
 800684e:	64cb      	str	r3, [r1, #76]	; 0x4c
__STATIC_INLINE void XMC_SCU_SetCcuTriggerHigh(const uint32_t trigger)
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	bc80      	pop	{r7}
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	50004000 	.word	0x50004000

08006860 <XMC_SCU_SetCcuTriggerLow>:
 * The input signal for the CCU slice should be selected as SCU input.
 * The above mentioned configurations can be made using the CCU LLD API XMC_CCU4_SLICE_StartConfig(). 
 * CCU timer slice should be started using XMC_CCU4_SLICE_StartTimer() before triggering 
 * the timer using this API.<BR>
 * \par<b>Related APIs:</b><BR>
 * XMC_CCU4_SLICE_StartConfig(), XMC_CCU4_SLICE_SetInput(), XMC_SCU_SetCcuTriggerHigh()\n\n\n
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 */
 8006868:	4905      	ldr	r1, [pc, #20]	; (8006880 <XMC_SCU_SetCcuTriggerLow+0x20>)
 800686a:	4b05      	ldr	r3, [pc, #20]	; (8006880 <XMC_SCU_SetCcuTriggerLow+0x20>)
 800686c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	43db      	mvns	r3, r3
 8006872:	4013      	ands	r3, r2
 8006874:	64cb      	str	r3, [r1, #76]	; 0x4c
__STATIC_INLINE void XMC_SCU_SetCcuTriggerLow(const uint32_t trigger)
 8006876:	bf00      	nop
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	bc80      	pop	{r7}
 800687e:	4770      	bx	lr
 8006880:	50004000 	.word	0x50004000

08006884 <XMC_CCU4_SLICE_ClearEvent>:
/**
 * @param slice Constant pointer to CC4 Slice
 * @param reg_num The capture register from which the captured value is to be retrieved
 *                Range: [0,3]
 * @return <BR>
 *    uint32_t  Returns the Capture register value.
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	460b      	mov	r3, r1
 800688e:	70fb      	strb	r3, [r7, #3]
 *              Range: [0 to 0x1FFFFF]
 *
 * \par<b>Description:</b><br>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006896:	78fb      	ldrb	r3, [r7, #3]
 8006898:	2101      	movs	r1, #1
 800689a:	fa01 f303 	lsl.w	r3, r1, r3
 800689e:	431a      	orrs	r2, r3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 * Retrieves timer value which has been captured in the Capture registers, by reading CC4yCV[\b reg_num] register.\n\n
 80068a6:	bf00      	nop
 80068a8:	370c      	adds	r7, #12
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bc80      	pop	{r7}
 80068ae:	4770      	bx	lr

080068b0 <BSP_IntDisAll>:
 * \params   none
 * \returns  none
 * \brief    disable all interrupts
 */
void  BSP_IntDisAll (void)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	af00      	add	r7, sp, #0
	CPU_IntDis();
 80068b4:	f7f9 fd10 	bl	80002d8 <CPU_IntDis>
}
 80068b8:	bf00      	nop
 80068ba:	bd80      	pop	{r7, pc}

080068bc <BSP_IntEn>:
 * \params   int_id ... interrupt to enable
 * \returns  none
 * \brief    enable interrupt
 */
void  BSP_IntEn (CPU_DATA  int_id)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
	if (int_id < BSP_INT_ID_MAX) {
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2b6f      	cmp	r3, #111	; 0x6f
 80068c8:	d806      	bhi.n	80068d8 <BSP_IntEn+0x1c>
		CPU_IntSrcEn (int_id + 16);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	3310      	adds	r3, #16
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7fb fbfa 	bl	80020cc <CPU_IntSrcEn>
	}
}
 80068d8:	bf00      	nop
 80068da:	3708      	adds	r7, #8
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <BSP_IntVectSet>:
 *           isr ...... handler to assign
 * \returns  none
 * \brief    assign ISR handler
 */
void  BSP_IntVectSet (CPU_DATA int_id, CPU_FNCT_VOID  isr)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
	CPU_SR_ALLOC();
 80068ea:	2300      	movs	r3, #0
 80068ec:	60fb      	str	r3, [r7, #12]

	if (int_id < BSP_INT_ID_MAX) {
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2b6f      	cmp	r3, #111	; 0x6f
 80068f2:	d80a      	bhi.n	800690a <BSP_IntVectSet+0x2a>
		CPU_CRITICAL_ENTER();
 80068f4:	f7f9 fcf4 	bl	80002e0 <CPU_SR_Save>
 80068f8:	60f8      	str	r0, [r7, #12]
		BSP_IntVectTbl[int_id] = isr;
 80068fa:	4906      	ldr	r1, [pc, #24]	; (8006914 <BSP_IntVectSet+0x34>)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	683a      	ldr	r2, [r7, #0]
 8006900:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		CPU_CRITICAL_EXIT();
 8006904:	68f8      	ldr	r0, [r7, #12]
 8006906:	f7f9 fcef 	bl	80002e8 <CPU_SR_Restore>
	}
}
 800690a:	bf00      	nop
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	20001cf8 	.word	0x20001cf8

08006918 <BSP_IntInit>:
 * \params   none
 * \returns  none
 * \brief    initialize interrupts
 */
void  BSP_IntInit (void)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	af00      	add	r7, sp, #0
	BSP_IntVectSet (USIC1_1_IRQn, BSP_IntHandler_Uart_Recive); //**
 800691c:	4908      	ldr	r1, [pc, #32]	; (8006940 <BSP_IntInit+0x28>)
 800691e:	205b      	movs	r0, #91	; 0x5b
 8006920:	f7ff ffde 	bl	80068e0 <BSP_IntVectSet>
	BSP_IntVectSet (USIC1_0_IRQn, BSP_IntHandler_Uart_Recive); //**
 8006924:	4906      	ldr	r1, [pc, #24]	; (8006940 <BSP_IntInit+0x28>)
 8006926:	205a      	movs	r0, #90	; 0x5a
 8006928:	f7ff ffda 	bl	80068e0 <BSP_IntVectSet>
	BSP_IntVectSet (CCU40_0_IRQn, CCU40_0_IRQHandler);
 800692c:	4905      	ldr	r1, [pc, #20]	; (8006944 <BSP_IntInit+0x2c>)
 800692e:	202c      	movs	r0, #44	; 0x2c
 8006930:	f7ff ffd6 	bl	80068e0 <BSP_IntVectSet>
	BSP_IntVectSet (CCU40_1_IRQn, CCU40_1_IRQHandler);
 8006934:	4904      	ldr	r1, [pc, #16]	; (8006948 <BSP_IntInit+0x30>)
 8006936:	202d      	movs	r0, #45	; 0x2d
 8006938:	f7ff ffd2 	bl	80068e0 <BSP_IntVectSet>
}
 800693c:	bf00      	nop
 800693e:	bd80      	pop	{r7, pc}
 8006940:	08006981 	.word	0x08006981
 8006944:	0800694d 	.word	0x0800694d
 8006948:	0800696d 	.word	0x0800696d

0800694c <CCU40_0_IRQHandler>:

static void CCU40_0_IRQHandler(void)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	af00      	add	r7, sp, #0
  XMC_CCU4_SLICE_ClearEvent(SLICE_PTR, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8006950:	2100      	movs	r1, #0
 8006952:	4805      	ldr	r0, [pc, #20]	; (8006968 <CCU40_0_IRQHandler+0x1c>)
 8006954:	f7ff ff96 	bl	8006884 <XMC_CCU4_SLICE_ClearEvent>
  //APP_TRACE_INFO ("sH ...\n");
  XMC_SCU_SetCcuTriggerLow(CAPCOM_MASK);
 8006958:	2001      	movs	r0, #1
 800695a:	f7ff ff81 	bl	8006860 <XMC_SCU_SetCcuTriggerLow>
  XMC_SCU_SetCcuTriggerHigh(CAPCOM_MASK);
 800695e:	2001      	movs	r0, #1
 8006960:	f7ff ff6c 	bl	800683c <XMC_SCU_SetCcuTriggerHigh>
}
 8006964:	bf00      	nop
 8006966:	bd80      	pop	{r7, pc}
 8006968:	4000c100 	.word	0x4000c100

0800696c <CCU40_1_IRQHandler>:

static void CCU40_1_IRQHandler(void){
 800696c:	b580      	push	{r7, lr}
 800696e:	af00      	add	r7, sp, #0

	XMC_CCU4_SLICE_ClearEvent(SLICE_PTR,  XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
 8006970:	2102      	movs	r1, #2
 8006972:	4802      	ldr	r0, [pc, #8]	; (800697c <CCU40_1_IRQHandler+0x10>)
 8006974:	f7ff ff86 	bl	8006884 <XMC_CCU4_SLICE_ClearEvent>
		//APP_TRACE_INFO ("sL ...\n");
}
 8006978:	bf00      	nop
 800697a:	bd80      	pop	{r7, pc}
 800697c:	4000c100 	.word	0x4000c100

08006980 <BSP_IntHandler_Uart_Recive>:
 * \returns  none
 * \brief    UART interrupt handler
 *           https://doc.micrium.com/display/osiiidoc/Keeping+the+Data+in+Scope
 */
static  void  BSP_IntHandler_Uart_Recive (void)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af02      	add	r7, sp, #8
	static CPU_CHAR    *RxDataPtr  = NULL ;
	static CPU_INT32U  RxDataCtr = 0;
	static CPU_CHAR    msg_receiving = 0;

	// receive byte
	RxData = XMC_UART_CH_GetReceivedData (XMC_UART1_CH1);                   // <1>
 8006986:	4838      	ldr	r0, [pc, #224]	; (8006a68 <BSP_IntHandler_Uart_Recive+0xe8>)
 8006988:	f001 fcfa 	bl	8008380 <XMC_UART_CH_GetReceivedData>
 800698c:	4603      	mov	r3, r0
 800698e:	71fb      	strb	r3, [r7, #7]

	// is the character a "start of packet" character?                      // <2>
	if ( ( (int) RxData == Start_of_Packet) && msg_receiving == 0) {
 8006990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006994:	4a35      	ldr	r2, [pc, #212]	; (8006a6c <BSP_IntHandler_Uart_Recive+0xec>)
 8006996:	7812      	ldrb	r2, [r2, #0]
 8006998:	4293      	cmp	r3, r2
 800699a:	d116      	bne.n	80069ca <BSP_IntHandler_Uart_Recive+0x4a>
 800699c:	4b34      	ldr	r3, [pc, #208]	; (8006a70 <BSP_IntHandler_Uart_Recive+0xf0>)
 800699e:	f993 3000 	ldrsb.w	r3, [r3]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d111      	bne.n	80069ca <BSP_IntHandler_Uart_Recive+0x4a>
		// allocate a memory block
		RxDataPtr = (CPU_CHAR *) OSMemGet (&Mem_Partition, &err);
 80069a6:	1d3b      	adds	r3, r7, #4
 80069a8:	4619      	mov	r1, r3
 80069aa:	4832      	ldr	r0, [pc, #200]	; (8006a74 <BSP_IntHandler_Uart_Recive+0xf4>)
 80069ac:	f7ff fa4c 	bl	8005e48 <OSMemGet>
 80069b0:	4602      	mov	r2, r0
 80069b2:	4b31      	ldr	r3, [pc, #196]	; (8006a78 <BSP_IntHandler_Uart_Recive+0xf8>)
 80069b4:	601a      	str	r2, [r3, #0]
		if (err != OS_ERR_NONE)
 80069b6:	88bb      	ldrh	r3, [r7, #4]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d003      	beq.n	80069c4 <BSP_IntHandler_Uart_Recive+0x44>
			APP_TRACE_DBG ("Error OSMemGet: BSP_IntHandler_Uart_Recive\n");
 80069bc:	482f      	ldr	r0, [pc, #188]	; (8006a7c <BSP_IntHandler_Uart_Recive+0xfc>)
 80069be:	f001 feff 	bl	80087c0 <puts>
 80069c2:	e002      	b.n	80069ca <BSP_IntHandler_Uart_Recive+0x4a>
		else
			msg_receiving = 1;
 80069c4:	4b2a      	ldr	r3, [pc, #168]	; (8006a70 <BSP_IntHandler_Uart_Recive+0xf0>)
 80069c6:	2201      	movs	r2, #1
 80069c8:	701a      	strb	r2, [r3, #0]

	// receive characters and put them into the memory partition            // <3>
	// until we detect and "end of packet character"
	// NOTE: the message itself may also contain a "start of packet character"
	//       but no "end of packet character"
	if ( ( (int) RxData != Start_of_Packet) && ( (int) RxData != End_of_Packet)
 80069ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069ce:	4a27      	ldr	r2, [pc, #156]	; (8006a6c <BSP_IntHandler_Uart_Recive+0xec>)
 80069d0:	7812      	ldrb	r2, [r2, #0]
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d018      	beq.n	8006a08 <BSP_IntHandler_Uart_Recive+0x88>
 80069d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069da:	4a29      	ldr	r2, [pc, #164]	; (8006a80 <BSP_IntHandler_Uart_Recive+0x100>)
 80069dc:	7812      	ldrb	r2, [r2, #0]
 80069de:	4293      	cmp	r3, r2
 80069e0:	d012      	beq.n	8006a08 <BSP_IntHandler_Uart_Recive+0x88>
	     && msg_receiving == 1) {
 80069e2:	4b23      	ldr	r3, [pc, #140]	; (8006a70 <BSP_IntHandler_Uart_Recive+0xf0>)
 80069e4:	f993 3000 	ldrsb.w	r3, [r3]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d10d      	bne.n	8006a08 <BSP_IntHandler_Uart_Recive+0x88>
		// put byte into the memory partition at the respective address
		*RxDataPtr = RxData;
 80069ec:	4b22      	ldr	r3, [pc, #136]	; (8006a78 <BSP_IntHandler_Uart_Recive+0xf8>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	79fa      	ldrb	r2, [r7, #7]
 80069f2:	701a      	strb	r2, [r3, #0]
		// increment the address to point to the next location
		RxDataPtr++;
 80069f4:	4b20      	ldr	r3, [pc, #128]	; (8006a78 <BSP_IntHandler_Uart_Recive+0xf8>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	3301      	adds	r3, #1
 80069fa:	4a1f      	ldr	r2, [pc, #124]	; (8006a78 <BSP_IntHandler_Uart_Recive+0xf8>)
 80069fc:	6013      	str	r3, [r2, #0]
		// increment the receive counter
		RxDataCtr++;
 80069fe:	4b21      	ldr	r3, [pc, #132]	; (8006a84 <BSP_IntHandler_Uart_Recive+0x104>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	3301      	adds	r3, #1
 8006a04:	4a1f      	ldr	r2, [pc, #124]	; (8006a84 <BSP_IntHandler_Uart_Recive+0x104>)
 8006a06:	6013      	str	r3, [r2, #0]
	}

	// is the character a "end of packet" character?                        // <4>
	if ( ( (int) RxData == End_of_Packet) && msg_receiving == 1) {
 8006a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a0c:	4a1c      	ldr	r2, [pc, #112]	; (8006a80 <BSP_IntHandler_Uart_Recive+0x100>)
 8006a0e:	7812      	ldrb	r2, [r2, #0]
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d124      	bne.n	8006a5e <BSP_IntHandler_Uart_Recive+0xde>
 8006a14:	4b16      	ldr	r3, [pc, #88]	; (8006a70 <BSP_IntHandler_Uart_Recive+0xf0>)
 8006a16:	f993 3000 	ldrsb.w	r3, [r3]
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d11f      	bne.n	8006a5e <BSP_IntHandler_Uart_Recive+0xde>
		// send the message to the application task - to that end put a pointer to
		// the memory block into the queue to the application task
		OSQPost ( (OS_Q      *) &UART_ISR,
 8006a1e:	4b16      	ldr	r3, [pc, #88]	; (8006a78 <BSP_IntHandler_Uart_Recive+0xf8>)
 8006a20:	681a      	ldr	r2, [r3, #0]
			  (void      *) (RxDataPtr - RxDataCtr),
 8006a22:	4b18      	ldr	r3, [pc, #96]	; (8006a84 <BSP_IntHandler_Uart_Recive+0x104>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	425b      	negs	r3, r3
 8006a28:	18d1      	adds	r1, r2, r3
			  (OS_MSG_SIZE) RxDataCtr + 1,
 8006a2a:	4b16      	ldr	r3, [pc, #88]	; (8006a84 <BSP_IntHandler_Uart_Recive+0x104>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	b29b      	uxth	r3, r3

	// is the character a "end of packet" character?                        // <4>
	if ( ( (int) RxData == End_of_Packet) && msg_receiving == 1) {
		// send the message to the application task - to that end put a pointer to
		// the memory block into the queue to the application task
		OSQPost ( (OS_Q      *) &UART_ISR,
 8006a30:	3301      	adds	r3, #1
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	1d3b      	adds	r3, r7, #4
 8006a36:	9300      	str	r3, [sp, #0]
 8006a38:	2300      	movs	r3, #0
 8006a3a:	4813      	ldr	r0, [pc, #76]	; (8006a88 <BSP_IntHandler_Uart_Recive+0x108>)
 8006a3c:	f7fb fe24 	bl	8002688 <OSQPost>
			  (void      *) (RxDataPtr - RxDataCtr),
			  (OS_MSG_SIZE) RxDataCtr + 1,
			  (OS_OPT)      OS_OPT_POST_FIFO,
			  (OS_ERR    *) &err);
		if (err != OS_ERR_NONE)
 8006a40:	88bb      	ldrh	r3, [r7, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d002      	beq.n	8006a4c <BSP_IntHandler_Uart_Recive+0xcc>
			APP_TRACE_DBG ("Error OSQPost: BSP_IntHandler_Uart_Recive\n");
 8006a46:	4811      	ldr	r0, [pc, #68]	; (8006a8c <BSP_IntHandler_Uart_Recive+0x10c>)
 8006a48:	f001 feba 	bl	80087c0 <puts>

		// clear the receive pointer and counter                              // <5>
		RxDataPtr = NULL;
 8006a4c:	4b0a      	ldr	r3, [pc, #40]	; (8006a78 <BSP_IntHandler_Uart_Recive+0xf8>)
 8006a4e:	2200      	movs	r2, #0
 8006a50:	601a      	str	r2, [r3, #0]
		RxDataCtr = 0;
 8006a52:	4b0c      	ldr	r3, [pc, #48]	; (8006a84 <BSP_IntHandler_Uart_Recive+0x104>)
 8006a54:	2200      	movs	r2, #0
 8006a56:	601a      	str	r2, [r3, #0]
		// ready for a next message
		msg_receiving = 0;
 8006a58:	4b05      	ldr	r3, [pc, #20]	; (8006a70 <BSP_IntHandler_Uart_Recive+0xf0>)
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	701a      	strb	r2, [r3, #0]
	}
}
 8006a5e:	bf00      	nop
 8006a60:	3708      	adds	r7, #8
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	48020200 	.word	0x48020200
 8006a6c:	20000001 	.word	0x20000001
 8006a70:	20001eb8 	.word	0x20001eb8
 8006a74:	20002000 	.word	0x20002000
 8006a78:	20001ebc 	.word	0x20001ebc
 8006a7c:	0800ebf4 	.word	0x0800ebf4
 8006a80:	20000002 	.word	0x20000002
 8006a84:	20001ec0 	.word	0x20001ec0
 8006a88:	20001fd0 	.word	0x20001fd0
 8006a8c:	0800ec20 	.word	0x0800ec20

08006a90 <BSP_IntHandlerSCU>:
 * \params   none
 * \returns  none
 * \brief    handle an interrupt
 */
void BSP_IntHandlerSCU (void)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_SCU);
 8006a94:	2000      	movs	r0, #0
 8006a96:	f000 fb23 	bl	80070e0 <BSP_IntHandler>
}
 8006a9a:	bf00      	nop
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop

08006aa0 <BSP_IntHandlerERU0_00>:
void BSP_IntHandlerERU0_00 (void)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU0_00);
 8006aa4:	2001      	movs	r0, #1
 8006aa6:	f000 fb1b 	bl	80070e0 <BSP_IntHandler>
}
 8006aaa:	bf00      	nop
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop

08006ab0 <BSP_IntHandlerERU0_01>:
void BSP_IntHandlerERU0_01 (void)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU0_01);
 8006ab4:	2002      	movs	r0, #2
 8006ab6:	f000 fb13 	bl	80070e0 <BSP_IntHandler>
}
 8006aba:	bf00      	nop
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop

08006ac0 <BSP_IntHandlerERU0_02>:
void BSP_IntHandlerERU0_02 (void)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU0_02);
 8006ac4:	2003      	movs	r0, #3
 8006ac6:	f000 fb0b 	bl	80070e0 <BSP_IntHandler>
}
 8006aca:	bf00      	nop
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop

08006ad0 <BSP_IntHandlerERU0_03>:
void BSP_IntHandlerERU0_03 (void)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU0_03);
 8006ad4:	2004      	movs	r0, #4
 8006ad6:	f000 fb03 	bl	80070e0 <BSP_IntHandler>
}
 8006ada:	bf00      	nop
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop

08006ae0 <BSP_IntHandlerERU1_00>:
void BSP_IntHandlerERU1_00 (void)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU1_00);
 8006ae4:	2005      	movs	r0, #5
 8006ae6:	f000 fafb 	bl	80070e0 <BSP_IntHandler>
}
 8006aea:	bf00      	nop
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop

08006af0 <BSP_IntHandlerERU1_01>:
void BSP_IntHandlerERU1_01 (void)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU1_01);
 8006af4:	2006      	movs	r0, #6
 8006af6:	f000 faf3 	bl	80070e0 <BSP_IntHandler>
}
 8006afa:	bf00      	nop
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop

08006b00 <BSP_IntHandlerERU1_02>:
void BSP_IntHandlerERU1_02 (void)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU1_02);
 8006b04:	2007      	movs	r0, #7
 8006b06:	f000 faeb 	bl	80070e0 <BSP_IntHandler>
}
 8006b0a:	bf00      	nop
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop

08006b10 <BSP_IntHandlerERU1_03>:
void BSP_IntHandlerERU1_03 (void)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU1_03);
 8006b14:	2008      	movs	r0, #8
 8006b16:	f000 fae3 	bl	80070e0 <BSP_IntHandler>
}
 8006b1a:	bf00      	nop
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop

08006b20 <BSP_IntHandlerPMU0_00>:
void BSP_IntHandlerPMU0_00 (void)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_PMU0_00);
 8006b24:	200c      	movs	r0, #12
 8006b26:	f000 fadb 	bl	80070e0 <BSP_IntHandler>
}
 8006b2a:	bf00      	nop
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop

08006b30 <BSP_IntHandlerVADC0_C0_00>:
void BSP_IntHandlerVADC0_C0_00 (void)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_C0_00);
 8006b34:	200e      	movs	r0, #14
 8006b36:	f000 fad3 	bl	80070e0 <BSP_IntHandler>
}
 8006b3a:	bf00      	nop
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop

08006b40 <BSP_IntHandlerVADC0_C0_01>:
void BSP_IntHandlerVADC0_C0_01 (void)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_C0_01);
 8006b44:	200f      	movs	r0, #15
 8006b46:	f000 facb 	bl	80070e0 <BSP_IntHandler>
}
 8006b4a:	bf00      	nop
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop

08006b50 <BSP_IntHandlerVADC0_C0_02>:
void BSP_IntHandlerVADC0_C0_02 (void)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_C0_02);
 8006b54:	2010      	movs	r0, #16
 8006b56:	f000 fac3 	bl	80070e0 <BSP_IntHandler>
}
 8006b5a:	bf00      	nop
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop

08006b60 <BSP_IntHandlerVADC0_C0_03>:
void BSP_IntHandlerVADC0_C0_03 (void)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_C0_03);
 8006b64:	2011      	movs	r0, #17
 8006b66:	f000 fabb 	bl	80070e0 <BSP_IntHandler>
}
 8006b6a:	bf00      	nop
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop

08006b70 <BSP_IntHandlerVADC0_G0_00>:
void BSP_IntHandlerVADC0_G0_00 (void)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G0_00);
 8006b74:	2012      	movs	r0, #18
 8006b76:	f000 fab3 	bl	80070e0 <BSP_IntHandler>
}
 8006b7a:	bf00      	nop
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop

08006b80 <BSP_IntHandlerVADC0_G0_01>:
void BSP_IntHandlerVADC0_G0_01 (void)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G0_01);
 8006b84:	2013      	movs	r0, #19
 8006b86:	f000 faab 	bl	80070e0 <BSP_IntHandler>
}
 8006b8a:	bf00      	nop
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop

08006b90 <BSP_IntHandlerVADC0_G0_02>:
void BSP_IntHandlerVADC0_G0_02 (void)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G0_02);
 8006b94:	2014      	movs	r0, #20
 8006b96:	f000 faa3 	bl	80070e0 <BSP_IntHandler>
}
 8006b9a:	bf00      	nop
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop

08006ba0 <BSP_IntHandlerVADC0_G0_03>:
void BSP_IntHandlerVADC0_G0_03 (void)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G0_03);
 8006ba4:	2015      	movs	r0, #21
 8006ba6:	f000 fa9b 	bl	80070e0 <BSP_IntHandler>
}
 8006baa:	bf00      	nop
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop

08006bb0 <BSP_IntHandlerVADC0_G1_00>:
void BSP_IntHandlerVADC0_G1_00 (void)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G1_00);
 8006bb4:	2016      	movs	r0, #22
 8006bb6:	f000 fa93 	bl	80070e0 <BSP_IntHandler>
}
 8006bba:	bf00      	nop
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop

08006bc0 <BSP_IntHandlerVADC0_G1_01>:
void BSP_IntHandlerVADC0_G1_01 (void)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G1_01);
 8006bc4:	2017      	movs	r0, #23
 8006bc6:	f000 fa8b 	bl	80070e0 <BSP_IntHandler>
}
 8006bca:	bf00      	nop
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop

08006bd0 <BSP_IntHandlerVADC0_G1_02>:
void BSP_IntHandlerVADC0_G1_02 (void)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G1_02);
 8006bd4:	2018      	movs	r0, #24
 8006bd6:	f000 fa83 	bl	80070e0 <BSP_IntHandler>
}
 8006bda:	bf00      	nop
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop

08006be0 <BSP_IntHandlerVADC0_G1_03>:
void BSP_IntHandlerVADC0_G1_03 (void)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G1_03);
 8006be4:	2019      	movs	r0, #25
 8006be6:	f000 fa7b 	bl	80070e0 <BSP_IntHandler>
}
 8006bea:	bf00      	nop
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop

08006bf0 <BSP_IntHandlerVADC0_G2_00>:
void BSP_IntHandlerVADC0_G2_00 (void)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G2_00);
 8006bf4:	201a      	movs	r0, #26
 8006bf6:	f000 fa73 	bl	80070e0 <BSP_IntHandler>
}
 8006bfa:	bf00      	nop
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop

08006c00 <BSP_IntHandlerVADC0_G2_01>:
void BSP_IntHandlerVADC0_G2_01 (void)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G2_01);
 8006c04:	201b      	movs	r0, #27
 8006c06:	f000 fa6b 	bl	80070e0 <BSP_IntHandler>
}
 8006c0a:	bf00      	nop
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop

08006c10 <BSP_IntHandlerVADC0_G2_02>:
void BSP_IntHandlerVADC0_G2_02 (void)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G2_02);
 8006c14:	201c      	movs	r0, #28
 8006c16:	f000 fa63 	bl	80070e0 <BSP_IntHandler>
}
 8006c1a:	bf00      	nop
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop

08006c20 <BSP_IntHandlerVADC0_G2_03>:
void BSP_IntHandlerVADC0_G2_03 (void)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G2_03);
 8006c24:	201d      	movs	r0, #29
 8006c26:	f000 fa5b 	bl	80070e0 <BSP_IntHandler>
}
 8006c2a:	bf00      	nop
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop

08006c30 <BSP_IntHandlerVADC0_G3_00>:
void BSP_IntHandlerVADC0_G3_00 (void)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G3_00);
 8006c34:	201e      	movs	r0, #30
 8006c36:	f000 fa53 	bl	80070e0 <BSP_IntHandler>
}
 8006c3a:	bf00      	nop
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop

08006c40 <BSP_IntHandlerVADC0_G3_01>:
void BSP_IntHandlerVADC0_G3_01 (void)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G3_01);
 8006c44:	201f      	movs	r0, #31
 8006c46:	f000 fa4b 	bl	80070e0 <BSP_IntHandler>
}
 8006c4a:	bf00      	nop
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop

08006c50 <BSP_IntHandlerVADC0_G3_02>:
void BSP_IntHandlerVADC0_G3_02 (void)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G3_02);
 8006c54:	2020      	movs	r0, #32
 8006c56:	f000 fa43 	bl	80070e0 <BSP_IntHandler>
}
 8006c5a:	bf00      	nop
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop

08006c60 <BSP_IntHandlerVADC0_G3_03>:
void BSP_IntHandlerVADC0_G3_03 (void)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G3_03);
 8006c64:	2021      	movs	r0, #33	; 0x21
 8006c66:	f000 fa3b 	bl	80070e0 <BSP_IntHandler>
}
 8006c6a:	bf00      	nop
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop

08006c70 <BSP_IntHandlerDSD0_00>:
void BSP_IntHandlerDSD0_00 (void)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_00);
 8006c74:	2022      	movs	r0, #34	; 0x22
 8006c76:	f000 fa33 	bl	80070e0 <BSP_IntHandler>
}
 8006c7a:	bf00      	nop
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop

08006c80 <BSP_IntHandlerDSD0_01>:
void BSP_IntHandlerDSD0_01 (void)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_01);
 8006c84:	2023      	movs	r0, #35	; 0x23
 8006c86:	f000 fa2b 	bl	80070e0 <BSP_IntHandler>
}
 8006c8a:	bf00      	nop
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop

08006c90 <BSP_IntHandlerDSD0_02>:
void BSP_IntHandlerDSD0_02 (void)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_02);
 8006c94:	2024      	movs	r0, #36	; 0x24
 8006c96:	f000 fa23 	bl	80070e0 <BSP_IntHandler>
}
 8006c9a:	bf00      	nop
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop

08006ca0 <BSP_IntHandlerDSD0_03>:
void BSP_IntHandlerDSD0_03 (void)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_03);
 8006ca4:	2025      	movs	r0, #37	; 0x25
 8006ca6:	f000 fa1b 	bl	80070e0 <BSP_IntHandler>
}
 8006caa:	bf00      	nop
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop

08006cb0 <BSP_IntHandlerDSD0_04>:
void BSP_IntHandlerDSD0_04 (void)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_04);
 8006cb4:	2026      	movs	r0, #38	; 0x26
 8006cb6:	f000 fa13 	bl	80070e0 <BSP_IntHandler>
}
 8006cba:	bf00      	nop
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop

08006cc0 <BSP_IntHandlerDSD0_05>:
void BSP_IntHandlerDSD0_05 (void)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_05);
 8006cc4:	2027      	movs	r0, #39	; 0x27
 8006cc6:	f000 fa0b 	bl	80070e0 <BSP_IntHandler>
}
 8006cca:	bf00      	nop
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop

08006cd0 <BSP_IntHandlerDSD0_06>:
void BSP_IntHandlerDSD0_06 (void)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_06);
 8006cd4:	2028      	movs	r0, #40	; 0x28
 8006cd6:	f000 fa03 	bl	80070e0 <BSP_IntHandler>
}
 8006cda:	bf00      	nop
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	bf00      	nop

08006ce0 <BSP_IntHandlerDSD0_07>:
void BSP_IntHandlerDSD0_07 (void)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_07);
 8006ce4:	2029      	movs	r0, #41	; 0x29
 8006ce6:	f000 f9fb 	bl	80070e0 <BSP_IntHandler>
}
 8006cea:	bf00      	nop
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop

08006cf0 <BSP_IntHandlerDAC0_00>:
void BSP_IntHandlerDAC0_00 (void)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DAC0_00);
 8006cf4:	202a      	movs	r0, #42	; 0x2a
 8006cf6:	f000 f9f3 	bl	80070e0 <BSP_IntHandler>
}
 8006cfa:	bf00      	nop
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop

08006d00 <BSP_IntHandlerDAC0_01>:
void BSP_IntHandlerDAC0_01 (void)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DAC0_01);
 8006d04:	202b      	movs	r0, #43	; 0x2b
 8006d06:	f000 f9eb 	bl	80070e0 <BSP_IntHandler>
}
 8006d0a:	bf00      	nop
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop

08006d10 <BSP_IntHandlerCCU40_00>:
void BSP_IntHandlerCCU40_00 (void)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU40_00);
 8006d14:	202c      	movs	r0, #44	; 0x2c
 8006d16:	f000 f9e3 	bl	80070e0 <BSP_IntHandler>
}
 8006d1a:	bf00      	nop
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop

08006d20 <BSP_IntHandlerCCU40_01>:
void BSP_IntHandlerCCU40_01 (void)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU40_01);
 8006d24:	202d      	movs	r0, #45	; 0x2d
 8006d26:	f000 f9db 	bl	80070e0 <BSP_IntHandler>
}
 8006d2a:	bf00      	nop
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop

08006d30 <BSP_IntHandlerCCU40_02>:
void BSP_IntHandlerCCU40_02 (void)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU40_02);
 8006d34:	202e      	movs	r0, #46	; 0x2e
 8006d36:	f000 f9d3 	bl	80070e0 <BSP_IntHandler>
}
 8006d3a:	bf00      	nop
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop

08006d40 <BSP_IntHandlerCCU40_03>:
void BSP_IntHandlerCCU40_03 (void)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU40_03);
 8006d44:	202f      	movs	r0, #47	; 0x2f
 8006d46:	f000 f9cb 	bl	80070e0 <BSP_IntHandler>
}
 8006d4a:	bf00      	nop
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop

08006d50 <BSP_IntHandlerCCU41_00>:
void BSP_IntHandlerCCU41_00 (void)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU41_00);
 8006d54:	2030      	movs	r0, #48	; 0x30
 8006d56:	f000 f9c3 	bl	80070e0 <BSP_IntHandler>
}
 8006d5a:	bf00      	nop
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop

08006d60 <BSP_IntHandlerCCU41_01>:
void BSP_IntHandlerCCU41_01 (void)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU41_01);
 8006d64:	2031      	movs	r0, #49	; 0x31
 8006d66:	f000 f9bb 	bl	80070e0 <BSP_IntHandler>
}
 8006d6a:	bf00      	nop
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop

08006d70 <BSP_IntHandlerCCU41_02>:
void BSP_IntHandlerCCU41_02 (void)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU41_02);
 8006d74:	2032      	movs	r0, #50	; 0x32
 8006d76:	f000 f9b3 	bl	80070e0 <BSP_IntHandler>
}
 8006d7a:	bf00      	nop
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop

08006d80 <BSP_IntHandlerCCU41_03>:
void BSP_IntHandlerCCU41_03 (void)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU41_03);
 8006d84:	2033      	movs	r0, #51	; 0x33
 8006d86:	f000 f9ab 	bl	80070e0 <BSP_IntHandler>
}
 8006d8a:	bf00      	nop
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop

08006d90 <BSP_IntHandlerCCU42_00>:
void BSP_IntHandlerCCU42_00 (void)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU42_00);
 8006d94:	2034      	movs	r0, #52	; 0x34
 8006d96:	f000 f9a3 	bl	80070e0 <BSP_IntHandler>
}
 8006d9a:	bf00      	nop
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop

08006da0 <BSP_IntHandlerCCU42_01>:
void BSP_IntHandlerCCU42_01 (void)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU42_01);
 8006da4:	2035      	movs	r0, #53	; 0x35
 8006da6:	f000 f99b 	bl	80070e0 <BSP_IntHandler>
}
 8006daa:	bf00      	nop
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop

08006db0 <BSP_IntHandlerCCU42_02>:
void BSP_IntHandlerCCU42_02 (void)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU42_02);
 8006db4:	2036      	movs	r0, #54	; 0x36
 8006db6:	f000 f993 	bl	80070e0 <BSP_IntHandler>
}
 8006dba:	bf00      	nop
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop

08006dc0 <BSP_IntHandlerCCU42_03>:
void BSP_IntHandlerCCU42_03 (void)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU42_03);
 8006dc4:	2037      	movs	r0, #55	; 0x37
 8006dc6:	f000 f98b 	bl	80070e0 <BSP_IntHandler>
}
 8006dca:	bf00      	nop
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop

08006dd0 <BSP_IntHandlerCCU43_00>:
void BSP_IntHandlerCCU43_00 (void)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU43_00);
 8006dd4:	2038      	movs	r0, #56	; 0x38
 8006dd6:	f000 f983 	bl	80070e0 <BSP_IntHandler>
}
 8006dda:	bf00      	nop
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop

08006de0 <BSP_IntHandlerCCU43_01>:
void BSP_IntHandlerCCU43_01 (void)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU43_01);
 8006de4:	2039      	movs	r0, #57	; 0x39
 8006de6:	f000 f97b 	bl	80070e0 <BSP_IntHandler>
}
 8006dea:	bf00      	nop
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop

08006df0 <BSP_IntHandlerCCU43_02>:
void BSP_IntHandlerCCU43_02 (void)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU43_02);
 8006df4:	203a      	movs	r0, #58	; 0x3a
 8006df6:	f000 f973 	bl	80070e0 <BSP_IntHandler>
}
 8006dfa:	bf00      	nop
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop

08006e00 <BSP_IntHandlerCCU43_03>:
void BSP_IntHandlerCCU43_03 (void)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU43_03);
 8006e04:	203b      	movs	r0, #59	; 0x3b
 8006e06:	f000 f96b 	bl	80070e0 <BSP_IntHandler>
}
 8006e0a:	bf00      	nop
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop

08006e10 <BSP_IntHandlerCCU80_00>:
void BSP_IntHandlerCCU80_00 (void)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU80_00);
 8006e14:	203c      	movs	r0, #60	; 0x3c
 8006e16:	f000 f963 	bl	80070e0 <BSP_IntHandler>
}
 8006e1a:	bf00      	nop
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop

08006e20 <BSP_IntHandlerCCU80_01>:
void BSP_IntHandlerCCU80_01 (void)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU80_01);
 8006e24:	203d      	movs	r0, #61	; 0x3d
 8006e26:	f000 f95b 	bl	80070e0 <BSP_IntHandler>
}
 8006e2a:	bf00      	nop
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop

08006e30 <BSP_IntHandlerCCU80_02>:
void BSP_IntHandlerCCU80_02 (void)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU80_02);
 8006e34:	203e      	movs	r0, #62	; 0x3e
 8006e36:	f000 f953 	bl	80070e0 <BSP_IntHandler>
}
 8006e3a:	bf00      	nop
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop

08006e40 <BSP_IntHandlerCCU80_03>:
void BSP_IntHandlerCCU80_03 (void)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU80_03);
 8006e44:	203f      	movs	r0, #63	; 0x3f
 8006e46:	f000 f94b 	bl	80070e0 <BSP_IntHandler>
}
 8006e4a:	bf00      	nop
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop

08006e50 <BSP_IntHandlerCCU81_00>:
void BSP_IntHandlerCCU81_00 (void)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU81_00);
 8006e54:	2040      	movs	r0, #64	; 0x40
 8006e56:	f000 f943 	bl	80070e0 <BSP_IntHandler>
}
 8006e5a:	bf00      	nop
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop

08006e60 <BSP_IntHandlerCCU81_01>:
void BSP_IntHandlerCCU81_01 (void)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU81_01);
 8006e64:	2041      	movs	r0, #65	; 0x41
 8006e66:	f000 f93b 	bl	80070e0 <BSP_IntHandler>
}
 8006e6a:	bf00      	nop
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop

08006e70 <BSP_IntHandlerCCU81_02>:
void BSP_IntHandlerCCU81_02 (void)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU81_02);
 8006e74:	2042      	movs	r0, #66	; 0x42
 8006e76:	f000 f933 	bl	80070e0 <BSP_IntHandler>
}
 8006e7a:	bf00      	nop
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop

08006e80 <BSP_IntHandlerCCU81_03>:
void BSP_IntHandlerCCU81_03 (void)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU81_03);
 8006e84:	2043      	movs	r0, #67	; 0x43
 8006e86:	f000 f92b 	bl	80070e0 <BSP_IntHandler>
}
 8006e8a:	bf00      	nop
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop

08006e90 <BSP_IntHandlerPOSIF0_00>:
void BSP_IntHandlerPOSIF0_00 (void)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_POSIF0_00);
 8006e94:	2044      	movs	r0, #68	; 0x44
 8006e96:	f000 f923 	bl	80070e0 <BSP_IntHandler>
}
 8006e9a:	bf00      	nop
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop

08006ea0 <BSP_IntHandlerPOSIF0_01>:
void BSP_IntHandlerPOSIF0_01 (void)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_POSIF0_01);
 8006ea4:	2045      	movs	r0, #69	; 0x45
 8006ea6:	f000 f91b 	bl	80070e0 <BSP_IntHandler>
}
 8006eaa:	bf00      	nop
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop

08006eb0 <BSP_IntHandlerPOSIF1_00>:
void BSP_IntHandlerPOSIF1_00 (void)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_POSIF1_00);
 8006eb4:	2046      	movs	r0, #70	; 0x46
 8006eb6:	f000 f913 	bl	80070e0 <BSP_IntHandler>
}
 8006eba:	bf00      	nop
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop

08006ec0 <BSP_IntHandlerPOSIF1_01>:
void BSP_IntHandlerPOSIF1_01 (void)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_POSIF1_01);
 8006ec4:	2047      	movs	r0, #71	; 0x47
 8006ec6:	f000 f90b 	bl	80070e0 <BSP_IntHandler>
}
 8006eca:	bf00      	nop
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop

08006ed0 <BSP_IntHandlerCAN0_00>:
void BSP_IntHandlerCAN0_00 (void)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_00);
 8006ed4:	204c      	movs	r0, #76	; 0x4c
 8006ed6:	f000 f903 	bl	80070e0 <BSP_IntHandler>
}
 8006eda:	bf00      	nop
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop

08006ee0 <BSP_IntHandlerCAN0_01>:
void BSP_IntHandlerCAN0_01 (void)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_01);
 8006ee4:	204d      	movs	r0, #77	; 0x4d
 8006ee6:	f000 f8fb 	bl	80070e0 <BSP_IntHandler>
}
 8006eea:	bf00      	nop
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop

08006ef0 <BSP_IntHandlerCAN0_02>:
void BSP_IntHandlerCAN0_02 (void)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_02);
 8006ef4:	204e      	movs	r0, #78	; 0x4e
 8006ef6:	f000 f8f3 	bl	80070e0 <BSP_IntHandler>
}
 8006efa:	bf00      	nop
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop

08006f00 <BSP_IntHandlerCAN0_03>:
void BSP_IntHandlerCAN0_03 (void)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_03);
 8006f04:	204f      	movs	r0, #79	; 0x4f
 8006f06:	f000 f8eb 	bl	80070e0 <BSP_IntHandler>
}
 8006f0a:	bf00      	nop
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop

08006f10 <BSP_IntHandlerCAN0_04>:
void BSP_IntHandlerCAN0_04 (void)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_04);
 8006f14:	2050      	movs	r0, #80	; 0x50
 8006f16:	f000 f8e3 	bl	80070e0 <BSP_IntHandler>
}
 8006f1a:	bf00      	nop
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop

08006f20 <BSP_IntHandlerCAN0_05>:
void BSP_IntHandlerCAN0_05 (void)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_05);
 8006f24:	2051      	movs	r0, #81	; 0x51
 8006f26:	f000 f8db 	bl	80070e0 <BSP_IntHandler>
}
 8006f2a:	bf00      	nop
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop

08006f30 <BSP_IntHandlerCAN0_06>:
void BSP_IntHandlerCAN0_06 (void)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_06);
 8006f34:	2052      	movs	r0, #82	; 0x52
 8006f36:	f000 f8d3 	bl	80070e0 <BSP_IntHandler>
}
 8006f3a:	bf00      	nop
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop

08006f40 <BSP_IntHandlerCAN0_07>:
void BSP_IntHandlerCAN0_07 (void)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_07);
 8006f44:	2053      	movs	r0, #83	; 0x53
 8006f46:	f000 f8cb 	bl	80070e0 <BSP_IntHandler>
}
 8006f4a:	bf00      	nop
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop

08006f50 <BSP_IntHandlerUSIC0_00>:
void BSP_IntHandlerUSIC0_00 (void)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC0_00);
 8006f54:	2054      	movs	r0, #84	; 0x54
 8006f56:	f000 f8c3 	bl	80070e0 <BSP_IntHandler>
}
 8006f5a:	bf00      	nop
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop

08006f60 <BSP_IntHandlerUSIC0_01>:
void BSP_IntHandlerUSIC0_01 (void)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC0_01);
 8006f64:	2055      	movs	r0, #85	; 0x55
 8006f66:	f000 f8bb 	bl	80070e0 <BSP_IntHandler>
}
 8006f6a:	bf00      	nop
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop

08006f70 <BSP_IntHandlerUSIC0_02>:
void BSP_IntHandlerUSIC0_02 (void)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC0_02);
 8006f74:	2056      	movs	r0, #86	; 0x56
 8006f76:	f000 f8b3 	bl	80070e0 <BSP_IntHandler>
}
 8006f7a:	bf00      	nop
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop

08006f80 <BSP_IntHandlerUSIC0_03>:
void BSP_IntHandlerUSIC0_03 (void)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC0_03);
 8006f84:	2057      	movs	r0, #87	; 0x57
 8006f86:	f000 f8ab 	bl	80070e0 <BSP_IntHandler>
}
 8006f8a:	bf00      	nop
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop

08006f90 <BSP_IntHandlerUSIC0_04>:
void BSP_IntHandlerUSIC0_04 (void)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC0_04);
 8006f94:	2058      	movs	r0, #88	; 0x58
 8006f96:	f000 f8a3 	bl	80070e0 <BSP_IntHandler>
}
 8006f9a:	bf00      	nop
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop

08006fa0 <BSP_IntHandlerUSIC0_05>:
void BSP_IntHandlerUSIC0_05 (void)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC0_05);
 8006fa4:	2059      	movs	r0, #89	; 0x59
 8006fa6:	f000 f89b 	bl	80070e0 <BSP_IntHandler>
}
 8006faa:	bf00      	nop
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop

08006fb0 <BSP_IntHandlerUSIC1_00>:
void BSP_IntHandlerUSIC1_00 (void)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC1_00);
 8006fb4:	205a      	movs	r0, #90	; 0x5a
 8006fb6:	f000 f893 	bl	80070e0 <BSP_IntHandler>
}
 8006fba:	bf00      	nop
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop

08006fc0 <BSP_IntHandlerUSIC1_01>:
void BSP_IntHandlerUSIC1_01 (void)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC1_01);
 8006fc4:	205b      	movs	r0, #91	; 0x5b
 8006fc6:	f000 f88b 	bl	80070e0 <BSP_IntHandler>
}
 8006fca:	bf00      	nop
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop

08006fd0 <BSP_IntHandlerUSIC1_02>:
void BSP_IntHandlerUSIC1_02 (void)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC1_02);
 8006fd4:	205c      	movs	r0, #92	; 0x5c
 8006fd6:	f000 f883 	bl	80070e0 <BSP_IntHandler>
}
 8006fda:	bf00      	nop
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop

08006fe0 <BSP_IntHandlerUSIC1_03>:
void BSP_IntHandlerUSIC1_03 (void)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC1_03);
 8006fe4:	205d      	movs	r0, #93	; 0x5d
 8006fe6:	f000 f87b 	bl	80070e0 <BSP_IntHandler>
}
 8006fea:	bf00      	nop
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop

08006ff0 <BSP_IntHandlerUSIC1_04>:
void BSP_IntHandlerUSIC1_04 (void)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC1_04);
 8006ff4:	205e      	movs	r0, #94	; 0x5e
 8006ff6:	f000 f873 	bl	80070e0 <BSP_IntHandler>
}
 8006ffa:	bf00      	nop
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop

08007000 <BSP_IntHandlerUSIC1_05>:
void BSP_IntHandlerUSIC1_05 (void)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC1_05);
 8007004:	205f      	movs	r0, #95	; 0x5f
 8007006:	f000 f86b 	bl	80070e0 <BSP_IntHandler>
}
 800700a:	bf00      	nop
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop

08007010 <BSP_IntHandlerUSIC2_00>:
void BSP_IntHandlerUSIC2_00 (void)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC2_00);
 8007014:	2060      	movs	r0, #96	; 0x60
 8007016:	f000 f863 	bl	80070e0 <BSP_IntHandler>
}
 800701a:	bf00      	nop
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop

08007020 <BSP_IntHandlerUSIC2_01>:
void BSP_IntHandlerUSIC2_01 (void)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC2_01);
 8007024:	2061      	movs	r0, #97	; 0x61
 8007026:	f000 f85b 	bl	80070e0 <BSP_IntHandler>
}
 800702a:	bf00      	nop
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop

08007030 <BSP_IntHandlerUSIC2_02>:
void BSP_IntHandlerUSIC2_02 (void)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC2_02);
 8007034:	2062      	movs	r0, #98	; 0x62
 8007036:	f000 f853 	bl	80070e0 <BSP_IntHandler>
}
 800703a:	bf00      	nop
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop

08007040 <BSP_IntHandlerUSIC2_03>:
void BSP_IntHandlerUSIC2_03 (void)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC2_03);
 8007044:	2063      	movs	r0, #99	; 0x63
 8007046:	f000 f84b 	bl	80070e0 <BSP_IntHandler>
}
 800704a:	bf00      	nop
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop

08007050 <BSP_IntHandlerUSIC2_04>:
void BSP_IntHandlerUSIC2_04 (void)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC2_04);
 8007054:	2064      	movs	r0, #100	; 0x64
 8007056:	f000 f843 	bl	80070e0 <BSP_IntHandler>
}
 800705a:	bf00      	nop
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop

08007060 <BSP_IntHandlerUSIC2_05>:
void BSP_IntHandlerUSIC2_05 (void)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC2_05);
 8007064:	2065      	movs	r0, #101	; 0x65
 8007066:	f000 f83b 	bl	80070e0 <BSP_IntHandler>
}
 800706a:	bf00      	nop
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop

08007070 <BSP_IntHandlerLEDTS0_00>:
void BSP_IntHandlerLEDTS0_00 (void)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_LEDTS0_00);
 8007074:	2066      	movs	r0, #102	; 0x66
 8007076:	f000 f833 	bl	80070e0 <BSP_IntHandler>
}
 800707a:	bf00      	nop
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop

08007080 <BSP_IntHandlerFCE0_00>:
void BSP_IntHandlerFCE0_00 (void)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_FCE0_00);
 8007084:	2068      	movs	r0, #104	; 0x68
 8007086:	f000 f82b 	bl	80070e0 <BSP_IntHandler>
}
 800708a:	bf00      	nop
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop

08007090 <BSP_IntHandlerGPDMA0_00>:
void BSP_IntHandlerGPDMA0_00 (void)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_GPDMA0_00);
 8007094:	2069      	movs	r0, #105	; 0x69
 8007096:	f000 f823 	bl	80070e0 <BSP_IntHandler>
}
 800709a:	bf00      	nop
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop

080070a0 <BSP_IntHandlerSDMMC0_00>:
void BSP_IntHandlerSDMMC0_00 (void)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_SDMMC0_00);
 80070a4:	206a      	movs	r0, #106	; 0x6a
 80070a6:	f000 f81b 	bl	80070e0 <BSP_IntHandler>
}
 80070aa:	bf00      	nop
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop

080070b0 <BSP_IntHandlerUSB0_00>:
void BSP_IntHandlerUSB0_00 (void)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USB0_00);
 80070b4:	206b      	movs	r0, #107	; 0x6b
 80070b6:	f000 f813 	bl	80070e0 <BSP_IntHandler>
}
 80070ba:	bf00      	nop
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop

080070c0 <BSP_IntHandlerETH0_00>:
void BSP_IntHandlerETH0_00 (void)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ETH0_00);
 80070c4:	206c      	movs	r0, #108	; 0x6c
 80070c6:	f000 f80b 	bl	80070e0 <BSP_IntHandler>
}
 80070ca:	bf00      	nop
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop

080070d0 <BSP_IntHandlerGPDMA1_00>:
void BSP_IntHandlerGPDMA1_00 (void)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_GPDMA1_00);
 80070d4:	206e      	movs	r0, #110	; 0x6e
 80070d6:	f000 f803 	bl	80070e0 <BSP_IntHandler>
}
 80070da:	bf00      	nop
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop

080070e0 <BSP_IntHandler>:
 * \params   int_id interrupt that will be handled
 * \returns  none
 * \brief    central interrupt handler
 */
static  void  BSP_IntHandler (CPU_DATA  int_id)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
	CPU_FNCT_VOID  isr;
	CPU_SR_ALLOC();
 80070e8:	2300      	movs	r3, #0
 80070ea:	60fb      	str	r3, [r7, #12]

	/* tell the OS that we are starting an ISR */
	CPU_CRITICAL_ENTER();
 80070ec:	f7f9 f8f8 	bl	80002e0 <CPU_SR_Save>
 80070f0:	60f8      	str	r0, [r7, #12]
	OSIntEnter();
 80070f2:	f7fc fc75 	bl	80039e0 <OSIntEnter>
	CPU_CRITICAL_EXIT();
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f7f9 f8f6 	bl	80002e8 <CPU_SR_Restore>

	if (int_id < BSP_INT_ID_MAX) {
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b6f      	cmp	r3, #111	; 0x6f
 8007100:	d809      	bhi.n	8007116 <BSP_IntHandler+0x36>
		isr = BSP_IntVectTbl[int_id];
 8007102:	4a08      	ldr	r2, [pc, #32]	; (8007124 <BSP_IntHandler+0x44>)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800710a:	60bb      	str	r3, [r7, #8]
		if (isr != (CPU_FNCT_VOID) 0) {
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d001      	beq.n	8007116 <BSP_IntHandler+0x36>
			isr();
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	4798      	blx	r3
		}
	}
	/* tell the OS that we are leaving an ISR */
	OSIntExit();
 8007116:	f7fc fc7f 	bl	8003a18 <OSIntExit>
}
 800711a:	bf00      	nop
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	20001cf8 	.word	0x20001cf8

08007128 <BSP_GPIO_Init>:
/**
 * @brief  Initialize UART1 CH1 - Tx=P0.1, Rx=P0.0, 9600-8N1
 * @return true on success, false otherwise
 */
_Bool BSP_GPIO_Init (void)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	af00      	add	r7, sp, #0

	XMC_GPIO_Init(SERVO_CCU4, &servo_config);
 800712c:	4a0d      	ldr	r2, [pc, #52]	; (8007164 <BSP_GPIO_Init+0x3c>)
 800712e:	2103      	movs	r1, #3
 8007130:	480d      	ldr	r0, [pc, #52]	; (8007168 <BSP_GPIO_Init+0x40>)
 8007132:	f001 f999 	bl	8008468 <XMC_GPIO_Init>

	XMC_GPIO_SetMode(ENDSTOP1,XMC_GPIO_MODE_INPUT_PULL_DOWN);
 8007136:	2208      	movs	r2, #8
 8007138:	210f      	movs	r1, #15
 800713a:	480b      	ldr	r0, [pc, #44]	; (8007168 <BSP_GPIO_Init+0x40>)
 800713c:	f001 f954 	bl	80083e8 <XMC_GPIO_SetMode>
	XMC_GPIO_SetMode(ENDSTOP2,XMC_GPIO_MODE_INPUT_PULL_DOWN);
 8007140:	2208      	movs	r2, #8
 8007142:	210d      	movs	r1, #13
 8007144:	4808      	ldr	r0, [pc, #32]	; (8007168 <BSP_GPIO_Init+0x40>)
 8007146:	f001 f94f 	bl	80083e8 <XMC_GPIO_SetMode>
	XMC_GPIO_SetMode(ENDSTOP3,XMC_GPIO_MODE_INPUT_PULL_DOWN);
 800714a:	2208      	movs	r2, #8
 800714c:	210e      	movs	r1, #14
 800714e:	4806      	ldr	r0, [pc, #24]	; (8007168 <BSP_GPIO_Init+0x40>)
 8007150:	f001 f94a 	bl	80083e8 <XMC_GPIO_SetMode>
	XMC_GPIO_SetMode(ENDSTOP4,XMC_GPIO_MODE_INPUT_PULL_DOWN);
 8007154:	2208      	movs	r2, #8
 8007156:	210c      	movs	r1, #12
 8007158:	4803      	ldr	r0, [pc, #12]	; (8007168 <BSP_GPIO_Init+0x40>)
 800715a:	f001 f945 	bl	80083e8 <XMC_GPIO_SetMode>

	return true;
 800715e:	2301      	movs	r3, #1
}
 8007160:	4618      	mov	r0, r3
 8007162:	bd80      	pop	{r7, pc}
 8007164:	20000004 	.word	0x20000004
 8007168:	48028100 	.word	0x48028100

0800716c <XMC_USIC_CH_SetInputSource>:
 * Baudrate is configured by considering the peripheral frequency and the desired baudrate.
 * Optimum values of FDR->STEP and BRG->PDIV are calulated and used for generating the desired
 * baudrate.
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetStartTransmisionMode(), XMC_USIC_CH_SetInputSource() \n\n\n
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	460b      	mov	r3, r1
 8007176:	70fb      	strb	r3, [r7, #3]
 8007178:	4613      	mov	r3, r2
 800717a:	70bb      	strb	r3, [r7, #2]
 */
 800717c:	78f8      	ldrb	r0, [r7, #3]
 800717e:	78fb      	ldrb	r3, [r7, #3]
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	3306      	adds	r3, #6
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	4413      	add	r3, r2
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	f023 0207 	bic.w	r2, r3, #7
XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling);
 800718e:	78bb      	ldrb	r3, [r7, #2]
 * Optimum values of FDR->STEP and BRG->PDIV are calulated and used for generating the desired
 * baudrate.
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetStartTransmisionMode(), XMC_USIC_CH_SetInputSource() \n\n\n
 */
 8007190:	431a      	orrs	r2, r3
 8007192:	6879      	ldr	r1, [r7, #4]
 8007194:	1d83      	adds	r3, r0, #6
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	440b      	add	r3, r1
 800719a:	605a      	str	r2, [r3, #4]
XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling);

 800719c:	bf00      	nop
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bc80      	pop	{r7}
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop

080071a8 <XMC_USIC_CH_SetMode>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	460b      	mov	r3, r1
 80071b2:	70fb      	strb	r3, [r7, #3]
  channel->TRBSCR |= (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b8:	f023 020f 	bic.w	r2, r3, #15
 80071bc:	78fb      	ldrb	r3, [r7, #3]
 80071be:	431a      	orrs	r2, r3
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80071c4:	bf00      	nop
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bc80      	pop	{r7}
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop

080071d0 <XMC_SPI_CH_Start>:
 * <li>Set polarity for the Slave signal,</li>
 * <li>Enable Frame end mode(MSLS signal is kept active after transmission of a frame)</li>
 * </ul>
 */
void XMC_SPI_CH_Init(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config);

 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
/**
 * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 80071d8:	2101      	movs	r1, #1
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f7ff ffe4 	bl	80071a8 <XMC_USIC_CH_SetMode>
 *
 80071e0:	bf00      	nop
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <XMC_SPI_CH_GetStatusFlag>:
 * After disabling the events, XMC_SPI_CH_EnableEvent() has to be invoked to re-enable the events.
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_EnableEvent()
 */
void XMC_SPI_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event);
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]

 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
/**
 80071f4:	4618      	mov	r0, r3
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bc80      	pop	{r7}
 80071fc:	4770      	bx	lr
 80071fe:	bf00      	nop

08007200 <XMC_SPI_CH_ClearStatusFlag>:
  return channel->PSR_SSCMode;
}

/**
 * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 * @param flag Protocol event status to be cleared for detection of next occurence.
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
 *              Refer @ XMC_SPI_CH_STATUS_FLAG_t for valid values. <b>OR</b> combinations of these enum item can be used 
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	431a      	orrs	r2, r3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	64da      	str	r2, [r3, #76]	; 0x4c
 *              as input.
 8007216:	bf00      	nop
 8007218:	370c      	adds	r7, #12
 800721a:	46bd      	mov	sp, r7
 800721c:	bc80      	pop	{r7}
 800721e:	4770      	bx	lr

08007220 <XMC_SPI_CH_SetInputSource>:
 * @param  channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 *
 * @return None
 *
 * \par<b>Description</b><br>
 * Configure the handling of end of frame through software, by setting TCSR.EOF bit.\n\n
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	460b      	mov	r3, r1
 800722a:	70fb      	strb	r3, [r7, #3]
 800722c:	4613      	mov	r3, r2
 800722e:	70bb      	strb	r3, [r7, #2]
 * This can be used if the software handles the TBUF data without FIFO. If EOF is set, a valid content of the TBUF is 
 8007230:	78fb      	ldrb	r3, [r7, #3]
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	3306      	adds	r3, #6
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	4413      	add	r3, r2
 800723a:	2210      	movs	r2, #16
 800723c:	605a      	str	r2, [r3, #4]
 * considered as last word of a frame. After transfer of the last word, MSLS signal becomes inactive. For software 
 800723e:	78ba      	ldrb	r2, [r7, #2]
 8007240:	78fb      	ldrb	r3, [r7, #3]
 8007242:	4619      	mov	r1, r3
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f7ff ff91 	bl	800716c <XMC_USIC_CH_SetInputSource>
 * handling of EOF bit, it is recommended to configure TCSR.WLEMD as 0. \n
 800724a:	bf00      	nop
 800724c:	3708      	adds	r7, #8
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop

08007254 <XMC_GPIO_SetOutputHigh>:

/**
 *
 * @param port constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	460b      	mov	r3, r1
 800725e:	70fb      	strb	r3, [r7, #3]
 * @param pin  port pin number.
 *
 * @return None
 8007260:	78fb      	ldrb	r3, [r7, #3]
 8007262:	2201      	movs	r2, #1
 8007264:	409a      	lsls	r2, r3
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	605a      	str	r2, [r3, #4]
 *
 800726a:	bf00      	nop
 800726c:	370c      	adds	r7, #12
 800726e:	46bd      	mov	sp, r7
 8007270:	bc80      	pop	{r7}
 8007272:	4770      	bx	lr

08007274 <BSP_SPI_Init>:
 *  @brief This function configures the SPI interface to communicate with the MCP23S08 & the MCP3004
 *  @param none
 *  @return on success this function returns SPI_OK (0)
 */
uint8_t BSP_SPI_Init(void)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	af00      	add	r7, sp, #0
	/*Initialize and Start SPI*/
	XMC_SPI_CH_Init(XMC_SPI1_CH0, &spi_config);
 8007278:	4929      	ldr	r1, [pc, #164]	; (8007320 <BSP_SPI_Init+0xac>)
 800727a:	482a      	ldr	r0, [pc, #168]	; (8007324 <BSP_SPI_Init+0xb0>)
 800727c:	f000 ff38 	bl	80080f0 <XMC_SPI_CH_Init>

	/*Input source selected*/
	XMC_SPI_CH_SetInputSource(XMC_SPI1_CH0,XMC_SPI_CH_INPUT_DIN0,USIC1_C0_DX0_P0_4);
 8007280:	2200      	movs	r2, #0
 8007282:	2100      	movs	r1, #0
 8007284:	4827      	ldr	r0, [pc, #156]	; (8007324 <BSP_SPI_Init+0xb0>)
 8007286:	f7ff ffcb 	bl	8007220 <XMC_SPI_CH_SetInputSource>
	XMC_SPI_CH_EnableEvent(XMC_SPI1_CH0,XMC_SPI_CH_EVENT_STANDARD_RECEIVE);
 800728a:	4927      	ldr	r1, [pc, #156]	; (8007328 <BSP_SPI_Init+0xb4>)
 800728c:	4825      	ldr	r0, [pc, #148]	; (8007324 <BSP_SPI_Init+0xb0>)
 800728e:	f000 ffc3 	bl	8008218 <XMC_SPI_CH_EnableEvent>
	XMC_SPI_CH_Start(XMC_SPI1_CH0);
 8007292:	4824      	ldr	r0, [pc, #144]	; (8007324 <BSP_SPI_Init+0xb0>)
 8007294:	f7ff ff9c 	bl	80071d0 <XMC_SPI_CH_Start>

	/*GPIO configuration*/
	XMC_GPIO_SetMode(SPI_MOSI, XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT2);
 8007298:	2290      	movs	r2, #144	; 0x90
 800729a:	2105      	movs	r1, #5
 800729c:	4823      	ldr	r0, [pc, #140]	; (800732c <BSP_SPI_Init+0xb8>)
 800729e:	f001 f8a3 	bl	80083e8 <XMC_GPIO_SetMode>
	XMC_GPIO_SetMode(SPI_MISO, XMC_GPIO_MODE_INPUT_TRISTATE);
 80072a2:	2200      	movs	r2, #0
 80072a4:	2104      	movs	r1, #4
 80072a6:	4821      	ldr	r0, [pc, #132]	; (800732c <BSP_SPI_Init+0xb8>)
 80072a8:	f001 f89e 	bl	80083e8 <XMC_GPIO_SetMode>
	XMC_GPIO_SetMode(SPI_SCLK, XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT2);
 80072ac:	2290      	movs	r2, #144	; 0x90
 80072ae:	210b      	movs	r1, #11
 80072b0:	481e      	ldr	r0, [pc, #120]	; (800732c <BSP_SPI_Init+0xb8>)
 80072b2:	f001 f899 	bl	80083e8 <XMC_GPIO_SetMode>

	gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL;
 80072b6:	4b1e      	ldr	r3, [pc, #120]	; (8007330 <BSP_SPI_Init+0xbc>)
 80072b8:	2280      	movs	r2, #128	; 0x80
 80072ba:	701a      	strb	r2, [r3, #0]
	gpio_config.output_level = XMC_GPIO_OUTPUT_LEVEL_HIGH;
 80072bc:	4b1c      	ldr	r3, [pc, #112]	; (8007330 <BSP_SPI_Init+0xbc>)
 80072be:	2201      	movs	r2, #1
 80072c0:	605a      	str	r2, [r3, #4]
	gpio_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_MEDIUM;
 80072c2:	4b1b      	ldr	r3, [pc, #108]	; (8007330 <BSP_SPI_Init+0xbc>)
 80072c4:	2204      	movs	r2, #4
 80072c6:	721a      	strb	r2, [r3, #8]

	XMC_GPIO_Init(MCP23S08_SS, &gpio_config); //IO-Expander CS
 80072c8:	4a19      	ldr	r2, [pc, #100]	; (8007330 <BSP_SPI_Init+0xbc>)
 80072ca:	2102      	movs	r1, #2
 80072cc:	4819      	ldr	r0, [pc, #100]	; (8007334 <BSP_SPI_Init+0xc0>)
 80072ce:	f001 f8cb 	bl	8008468 <XMC_GPIO_Init>
	XMC_GPIO_SetOutputHigh(MCP23S08_SS);
 80072d2:	2102      	movs	r1, #2
 80072d4:	4817      	ldr	r0, [pc, #92]	; (8007334 <BSP_SPI_Init+0xc0>)
 80072d6:	f7ff ffbd 	bl	8007254 <XMC_GPIO_SetOutputHigh>

	gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL;
 80072da:	4b15      	ldr	r3, [pc, #84]	; (8007330 <BSP_SPI_Init+0xbc>)
 80072dc:	2280      	movs	r2, #128	; 0x80
 80072de:	701a      	strb	r2, [r3, #0]
	gpio_config.output_level = XMC_GPIO_OUTPUT_LEVEL_HIGH;
 80072e0:	4b13      	ldr	r3, [pc, #76]	; (8007330 <BSP_SPI_Init+0xbc>)
 80072e2:	2201      	movs	r2, #1
 80072e4:	605a      	str	r2, [r3, #4]
	gpio_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_MEDIUM;
 80072e6:	4b12      	ldr	r3, [pc, #72]	; (8007330 <BSP_SPI_Init+0xbc>)
 80072e8:	2204      	movs	r2, #4
 80072ea:	721a      	strb	r2, [r3, #8]

	XMC_GPIO_Init(MCP3004_SS, &gpio_config); //ADC-CS
 80072ec:	4a10      	ldr	r2, [pc, #64]	; (8007330 <BSP_SPI_Init+0xbc>)
 80072ee:	2104      	movs	r1, #4
 80072f0:	4810      	ldr	r0, [pc, #64]	; (8007334 <BSP_SPI_Init+0xc0>)
 80072f2:	f001 f8b9 	bl	8008468 <XMC_GPIO_Init>
	XMC_GPIO_SetOutputHigh(MCP3004_SS);
 80072f6:	2104      	movs	r1, #4
 80072f8:	480e      	ldr	r0, [pc, #56]	; (8007334 <BSP_SPI_Init+0xc0>)
 80072fa:	f7ff ffab 	bl	8007254 <XMC_GPIO_SetOutputHigh>

	gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL;
 80072fe:	4b0c      	ldr	r3, [pc, #48]	; (8007330 <BSP_SPI_Init+0xbc>)
 8007300:	2280      	movs	r2, #128	; 0x80
 8007302:	701a      	strb	r2, [r3, #0]
	gpio_config.output_level = XMC_GPIO_OUTPUT_LEVEL_HIGH;
 8007304:	4b0a      	ldr	r3, [pc, #40]	; (8007330 <BSP_SPI_Init+0xbc>)
 8007306:	2201      	movs	r2, #1
 8007308:	605a      	str	r2, [r3, #4]
	gpio_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_MEDIUM;
 800730a:	4b09      	ldr	r3, [pc, #36]	; (8007330 <BSP_SPI_Init+0xbc>)
 800730c:	2204      	movs	r2, #4
 800730e:	721a      	strb	r2, [r3, #8]

	XMC_GPIO_Init(MCP23S08_RESET, &gpio_config); //IO-Expander Reset
 8007310:	4a07      	ldr	r2, [pc, #28]	; (8007330 <BSP_SPI_Init+0xbc>)
 8007312:	210c      	movs	r1, #12
 8007314:	4805      	ldr	r0, [pc, #20]	; (800732c <BSP_SPI_Init+0xb8>)
 8007316:	f001 f8a7 	bl	8008468 <XMC_GPIO_Init>

	return SPI_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	bd80      	pop	{r7, pc}
 8007320:	2000001c 	.word	0x2000001c
 8007324:	48020000 	.word	0x48020000
 8007328:	80004000 	.word	0x80004000
 800732c:	48028000 	.word	0x48028000
 8007330:	20000010 	.word	0x20000010
 8007334:	48028100 	.word	0x48028100

08007338 <_spi_transmit>:
 *  @param channel ... SPI channel
 *		   spi_data .. byte which should be transmitted
 *  @return on success this function returns SPI_OK (0)
 */
uint8_t _spi_transmit(XMC_USIC_CH_t *const channel, uint8_t spi_data)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	460b      	mov	r3, r1
 8007342:	70fb      	strb	r3, [r7, #3]
	XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

	XMC_SPI_CH_Transmit(channel, spi_data, XMC_SPI_CH_MODE_STANDARD);
 8007344:	78fb      	ldrb	r3, [r7, #3]
 8007346:	b29b      	uxth	r3, r3
 8007348:	2200      	movs	r2, #0
 800734a:	4619      	mov	r1, r3
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 ff05 	bl	800815c <XMC_SPI_CH_Transmit>
	while((XMC_SPI_CH_GetStatusFlag(channel) & XMC_SPI_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION) == 0U);
 8007352:	bf00      	nop
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f7ff ff47 	bl	80071e8 <XMC_SPI_CH_GetStatusFlag>
 800735a:	4603      	mov	r3, r0
 800735c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007360:	2b00      	cmp	r3, #0
 8007362:	d0f7      	beq.n	8007354 <_spi_transmit+0x1c>
	XMC_SPI_CH_ClearStatusFlag(channel, XMC_SPI_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION);
 8007364:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f7ff ff49 	bl	8007200 <XMC_SPI_CH_ClearStatusFlag>

	return SPI_OK;
 800736e:	2300      	movs	r3, #0
}
 8007370:	4618      	mov	r0, r3
 8007372:	3708      	adds	r7, #8
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <_spi_receive>:
 *  @brief This function reads data from a specific SPI channel
 *  @param channel ... SPI channel
 *  @return byte which was received and is valid
 */
uint8_t _spi_receive(XMC_USIC_CH_t *const channel)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
	XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

	return XMC_SPI_CH_GetReceivedData(channel);
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 ff21 	bl	80081c8 <XMC_SPI_CH_GetReceivedData>
 8007386:	4603      	mov	r3, r0
 8007388:	b2db      	uxtb	r3, r3
}
 800738a:	4618      	mov	r0, r3
 800738c:	3708      	adds	r7, #8
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop

08007394 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	4603      	mov	r3, r0
 800739c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800739e:	4908      	ldr	r1, [pc, #32]	; (80073c0 <NVIC_EnableIRQ+0x2c>)
 80073a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073a4:	095b      	lsrs	r3, r3, #5
 80073a6:	79fa      	ldrb	r2, [r7, #7]
 80073a8:	f002 021f 	and.w	r2, r2, #31
 80073ac:	2001      	movs	r0, #1
 80073ae:	fa00 f202 	lsl.w	r2, r0, r2
 80073b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80073b6:	bf00      	nop
 80073b8:	370c      	adds	r7, #12
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bc80      	pop	{r7}
 80073be:	4770      	bx	lr
 80073c0:	e000e100 	.word	0xe000e100

080073c4 <XMC_USIC_CH_SetInputSource>:
 * Baudrate is configured by considering the peripheral frequency and the desired baudrate.
 * Optimum values of FDR->STEP and BRG->PDIV are calulated and used for generating the desired
 * baudrate.
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetStartTransmisionMode(), XMC_USIC_CH_SetInputSource() \n\n\n
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	460b      	mov	r3, r1
 80073ce:	70fb      	strb	r3, [r7, #3]
 80073d0:	4613      	mov	r3, r2
 80073d2:	70bb      	strb	r3, [r7, #2]
 */
 80073d4:	78f8      	ldrb	r0, [r7, #3]
 80073d6:	78fb      	ldrb	r3, [r7, #3]
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	3306      	adds	r3, #6
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	4413      	add	r3, r2
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	f023 0207 	bic.w	r2, r3, #7
XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling);
 80073e6:	78bb      	ldrb	r3, [r7, #2]
 * Optimum values of FDR->STEP and BRG->PDIV are calulated and used for generating the desired
 * baudrate.
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetStartTransmisionMode(), XMC_USIC_CH_SetInputSource() \n\n\n
 */
 80073e8:	431a      	orrs	r2, r3
 80073ea:	6879      	ldr	r1, [r7, #4]
 80073ec:	1d83      	adds	r3, r0, #6
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	440b      	add	r3, r1
 80073f2:	605a      	str	r2, [r3, #4]
XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling);

 80073f4:	bf00      	nop
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bc80      	pop	{r7}
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop

08007400 <XMC_UART_CH_Start>:
 * \par<b>Description</b><br>
 * Sets the USIC channel operation mode to UART mode.\n\n
 * CCR register bitfield \a Mode is set to 2(UART mode). This API should be called after configuring
 * the USIC channel. Transmission and reception can happen only when the UART mode is set. 
 * This is an inline function.
 *
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 * \par<b>Related APIs:</b><BR>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740c:	f023 030f 	bic.w	r3, r3, #15
 8007410:	f043 0202 	orr.w	r2, r3, #2
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	641a      	str	r2, [r3, #64]	; 0x40
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 8007418:	bf00      	nop
 800741a:	370c      	adds	r7, #12
 800741c:	46bd      	mov	sp, r7
 800741e:	bc80      	pop	{r7}
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop

08007424 <XMC_UART_CH_SetInterruptNodePointer>:
 * For all the protocol events enlisted in the enumeration XMC_UART_CH_EVENT_t, one common
 * interrupt gets generated. The service request connects the interrupt node to the UART 
 * protocol events.
 * Note: NVIC node should be separately enabled to generate the interrupt.
 *
 * \par<b>Related APIs:</b><BR>
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	460b      	mov	r3, r1
 800742e:	70fb      	strb	r3, [r7, #3]
 * XMC_UART_CH_EnableEvent() \n\n\n
 8007430:	78fb      	ldrb	r3, [r7, #3]
 8007432:	461a      	mov	r2, r3
 8007434:	2110      	movs	r1, #16
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 fbe4 	bl	8007c04 <XMC_USIC_CH_SetInterruptNodePointer>
 */
__STATIC_INLINE void XMC_UART_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
 800743c:	bf00      	nop
 800743e:	3708      	adds	r7, #8
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <XMC_UART_CH_SetInputSource>:
 * \par<b>Description</b><br>
 * Sets input soource for the UART communication.\n\n
 * It is used for configuring the input stage for data reception.
 * Selects the input data signal source among DXnA, DXnB.. DXnG for the input stage. 
 * The API can be used for the input stages DX0, DX3 and DX5. 
 *
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	460b      	mov	r3, r1
 800744e:	70fb      	strb	r3, [r7, #3]
 8007450:	4613      	mov	r3, r2
 8007452:	70bb      	strb	r3, [r7, #2]
 * \par<b>Related APIs:</b><BR>
 8007454:	78fb      	ldrb	r3, [r7, #3]
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	3306      	adds	r3, #6
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	4413      	add	r3, r2
 800745e:	2200      	movs	r2, #0
 8007460:	605a      	str	r2, [r3, #4]
 * XMC_UART_CH_EnableInputInversion() \n\n\n
 8007462:	78ba      	ldrb	r2, [r7, #2]
 8007464:	78fb      	ldrb	r3, [r7, #3]
 8007466:	4619      	mov	r1, r3
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f7ff ffab 	bl	80073c4 <XMC_USIC_CH_SetInputSource>
 */
 800746e:	bf00      	nop
 8007470:	3708      	adds	r7, #8
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop

08007478 <BSP_UART_Init>:
/**
 * @brief  Initialize UART1 CH1 - Tx=P0.1, Rx=P0.0, 9600-8N1
 * @return true on success, false otherwise
 */
_Bool BSP_UART_Init (void)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	af00      	add	r7, sp, #0

	XMC_UART_CH_Init (XMC_UART1_CH1, &uart_config);
 800747c:	4917      	ldr	r1, [pc, #92]	; (80074dc <BSP_UART_Init+0x64>)
 800747e:	4818      	ldr	r0, [pc, #96]	; (80074e0 <BSP_UART_Init+0x68>)
 8007480:	f000 ff02 	bl	8008288 <XMC_UART_CH_Init>
	XMC_UART_CH_Init (XMC_UART1_CH0, &uart_config);
 8007484:	4915      	ldr	r1, [pc, #84]	; (80074dc <BSP_UART_Init+0x64>)
 8007486:	4817      	ldr	r0, [pc, #92]	; (80074e4 <BSP_UART_Init+0x6c>)
 8007488:	f000 fefe 	bl	8008288 <XMC_UART_CH_Init>
	XMC_UART_CH_SetInputSource (XMC_UART1_CH1, XMC_UART_CH_INPUT_RXD, 
 800748c:	2203      	movs	r2, #3
 800748e:	2100      	movs	r1, #0
 8007490:	4813      	ldr	r0, [pc, #76]	; (80074e0 <BSP_UART_Init+0x68>)
 8007492:	f7ff ffd7 	bl	8007444 <XMC_UART_CH_SetInputSource>
	                            USIC1_C1_DX0_P0_0);

	XMC_UART_CH_SetInterruptNodePointer	(XMC_UART1_CH1, 0) ;
 8007496:	2100      	movs	r1, #0
 8007498:	4811      	ldr	r0, [pc, #68]	; (80074e0 <BSP_UART_Init+0x68>)
 800749a:	f7ff ffc3 	bl	8007424 <XMC_UART_CH_SetInterruptNodePointer>
	XMC_UART_CH_EnableEvent (XMC_UART1_CH1, XMC_UART_CH_EVENT_STANDARD_RECEIVE);
 800749e:	4912      	ldr	r1, [pc, #72]	; (80074e8 <BSP_UART_Init+0x70>)
 80074a0:	480f      	ldr	r0, [pc, #60]	; (80074e0 <BSP_UART_Init+0x68>)
 80074a2:	f000 ff87 	bl	80083b4 <XMC_UART_CH_EnableEvent>
	XMC_UART_CH_EnableEvent (XMC_UART1_CH1, 
 80074a6:	f04f 2180 	mov.w	r1, #2147516416	; 0x80008000
 80074aa:	480d      	ldr	r0, [pc, #52]	; (80074e0 <BSP_UART_Init+0x68>)
 80074ac:	f000 ff82 	bl	80083b4 <XMC_UART_CH_EnableEvent>
	                         XMC_UART_CH_EVENT_ALTERNATIVE_RECEIVE);
	NVIC_EnableIRQ (USIC1_0_IRQn);
 80074b0:	205a      	movs	r0, #90	; 0x5a
 80074b2:	f7ff ff6f 	bl	8007394 <NVIC_EnableIRQ>

	XMC_UART_CH_Start (XMC_UART1_CH1);
 80074b6:	480a      	ldr	r0, [pc, #40]	; (80074e0 <BSP_UART_Init+0x68>)
 80074b8:	f7ff ffa2 	bl	8007400 <XMC_UART_CH_Start>
	XMC_UART_CH_Start (XMC_UART1_CH0);
 80074bc:	4809      	ldr	r0, [pc, #36]	; (80074e4 <BSP_UART_Init+0x6c>)
 80074be:	f7ff ff9f 	bl	8007400 <XMC_UART_CH_Start>

	XMC_GPIO_SetMode (UART_TX, XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT2);
 80074c2:	2290      	movs	r2, #144	; 0x90
 80074c4:	2101      	movs	r1, #1
 80074c6:	4809      	ldr	r0, [pc, #36]	; (80074ec <BSP_UART_Init+0x74>)
 80074c8:	f000 ff8e 	bl	80083e8 <XMC_GPIO_SetMode>
	XMC_GPIO_SetMode (UART_RX, XMC_GPIO_MODE_INPUT_TRISTATE);
 80074cc:	2200      	movs	r2, #0
 80074ce:	2100      	movs	r1, #0
 80074d0:	4806      	ldr	r0, [pc, #24]	; (80074ec <BSP_UART_Init+0x74>)
 80074d2:	f000 ff89 	bl	80083e8 <XMC_GPIO_SetMode>

	return true;
 80074d6:	2301      	movs	r3, #1
}
 80074d8:	4618      	mov	r0, r3
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	20000024 	.word	0x20000024
 80074e0:	48020200 	.word	0x48020200
 80074e4:	48020000 	.word	0x48020000
 80074e8:	80004000 	.word	0x80004000
 80074ec:	48028000 	.word	0x48028000

080074f0 <BSP_LowLevelInit>:
 * @note Problems with Branch prediction if accessing the flash via the cached
 *       memory interface. In this silicon(step A11), branch prediction has to
 *       be switched off by setting PCON.PBS = 1.
 */
void  BSP_LowLevelInit (void)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
	CPU_INT32U  reg_val;

	/* Disable Watchdog timer */
	DEF_BIT_CLR (BSP_REG_WDT_CTR, BSP_BIT_WDT_CTR_ENB);
 80074f6:	4a0d      	ldr	r2, [pc, #52]	; (800752c <BSP_LowLevelInit+0x3c>)
 80074f8:	4b0c      	ldr	r3, [pc, #48]	; (800752c <BSP_LowLevelInit+0x3c>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f023 0301 	bic.w	r3, r3, #1
 8007500:	6013      	str	r3, [r2, #0]
	DEF_BIT_SET (BSP_REG_PREF_PCON, BSP_BIT_PREF_PCON_PBS);
 8007502:	4a0b      	ldr	r2, [pc, #44]	; (8007530 <BSP_LowLevelInit+0x40>)
 8007504:	4b0a      	ldr	r3, [pc, #40]	; (8007530 <BSP_LowLevelInit+0x40>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800750c:	6013      	str	r3, [r2, #0]

	reg_val = BSP_REG_FLASH0_FCON;
 800750e:	4b09      	ldr	r3, [pc, #36]	; (8007534 <BSP_LowLevelInit+0x44>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	607b      	str	r3, [r7, #4]
	reg_val = 0x3;
 8007514:	2303      	movs	r3, #3
 8007516:	607b      	str	r3, [r7, #4]
	BSP_REG_FLASH0_FCON = reg_val;
 8007518:	4a06      	ldr	r2, [pc, #24]	; (8007534 <BSP_LowLevelInit+0x44>)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6013      	str	r3, [r2, #0]

	BSP_SysInit();
 800751e:	f000 f80b 	bl	8007538 <BSP_SysInit>
}
 8007522:	bf00      	nop
 8007524:	3708      	adds	r7, #8
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop
 800752c:	50008004 	.word	0x50008004
 8007530:	58004000 	.word	0x58004000
 8007534:	58002014 	.word	0x58002014

08007538 <BSP_SysInit>:
 *       result in multiple changes of the K2-Divider to avoid big frequency
 *       changes. Between the update of two K2-divider values 6 cycles of fpll
 *       should be waited.
 */
void  BSP_SysInit (void)
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
	CPU_INT32U  reg_to;
	CPU_INT32U  reg;

	/* Set VCO and PLL power saving mode to normal behavior */
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON0, (BSP_BIT_PLLCON0_VCOPWD |
 800753e:	4a74      	ldr	r2, [pc, #464]	; (8007710 <BSP_SysInit+0x1d8>)
 8007540:	4b73      	ldr	r3, [pc, #460]	; (8007710 <BSP_SysInit+0x1d8>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007548:	f023 0302 	bic.w	r3, r3, #2
 800754c:	6013      	str	r3, [r2, #0]
					   BSP_BIT_PLLCON0_PLLPWD));

	reg = BSP_REG_SCU_OSCHPCTRL;
 800754e:	4b71      	ldr	r3, [pc, #452]	; (8007714 <BSP_SysInit+0x1dc>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	603b      	str	r3, [r7, #0]
	/* Set Ext. Crystal mod; osc power saving isn't entered */
	DEF_BIT_CLR (reg, (BSP_BIT_OSCHPCTRL_MODE_MASK  |
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800755a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800755e:	603b      	str	r3, [r7, #0]
			   BSP_BIT_OSCHPCTRL_OSCVAL_MASK));
	/* Cfg. foscref = fosc / (OSCVAL + 1) */
	DEF_BIT_SET (reg, BSP_BIT_OSCHPCTRL_OSCVAL);
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007566:	603b      	str	r3, [r7, #0]
	BSP_REG_SCU_OSCHPCTRL = reg;
 8007568:	4a6a      	ldr	r2, [pc, #424]	; (8007714 <BSP_SysInit+0x1dc>)
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	6013      	str	r3, [r2, #0]

	/* Set ext. osc as PLL input */
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON2, BSP_BIT_PLLCON2_PINSEL);
 800756e:	4a6a      	ldr	r2, [pc, #424]	; (8007718 <BSP_SysInit+0x1e0>)
 8007570:	4b69      	ldr	r3, [pc, #420]	; (8007718 <BSP_SysInit+0x1e0>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f023 0301 	bic.w	r3, r3, #1
 8007578:	6013      	str	r3, [r2, #0]
	/* Restart osc watchdog of the PLL */
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_OSCRES);
 800757a:	4a65      	ldr	r2, [pc, #404]	; (8007710 <BSP_SysInit+0x1d8>)
 800757c:	4b64      	ldr	r3, [pc, #400]	; (8007710 <BSP_SysInit+0x1d8>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007584:	6013      	str	r3, [r2, #0]
	/* Wait for stable OSC frequency */
	reg_to = BSP_REG_VAL_TO;
 8007586:	4b65      	ldr	r3, [pc, #404]	; (800771c <BSP_SysInit+0x1e4>)
 8007588:	607b      	str	r3, [r7, #4]
	while ( (DEF_BIT_IS_CLR (BSP_REG_SCU_PLLSTAT, (BSP_BIT_PLLSTAT_PLLLV |
 800758a:	e002      	b.n	8007592 <BSP_SysInit+0x5a>
						       BSP_BIT_PLLSTAT_PLLHV |
						       BSP_BIT_PLLSTAT_PLLSP))) &
		(reg_to > 0u)) {
		reg_to--;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	3b01      	subs	r3, #1
 8007590:	607b      	str	r3, [r7, #4]
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON2, BSP_BIT_PLLCON2_PINSEL);
	/* Restart osc watchdog of the PLL */
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_OSCRES);
	/* Wait for stable OSC frequency */
	reg_to = BSP_REG_VAL_TO;
	while ( (DEF_BIT_IS_CLR (BSP_REG_SCU_PLLSTAT, (BSP_BIT_PLLSTAT_PLLLV |
 8007592:	4b63      	ldr	r3, [pc, #396]	; (8007720 <BSP_SysInit+0x1e8>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f403 7360 	and.w	r3, r3, #896	; 0x380
 800759a:	2b00      	cmp	r3, #0
 800759c:	d101      	bne.n	80075a2 <BSP_SysInit+0x6a>
 800759e:	2301      	movs	r3, #1
 80075a0:	e000      	b.n	80075a4 <BSP_SysInit+0x6c>
 80075a2:	2300      	movs	r3, #0
						       BSP_BIT_PLLSTAT_PLLHV |
						       BSP_BIT_PLLSTAT_PLLSP))) &
		(reg_to > 0u)) {
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	2a00      	cmp	r2, #0
 80075a8:	bf14      	ite	ne
 80075aa:	2201      	movne	r2, #1
 80075ac:	2200      	moveq	r2, #0
 80075ae:	b2d2      	uxtb	r2, r2
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_OSCRES);
	/* Wait for stable OSC frequency */
	reg_to = BSP_REG_VAL_TO;
	while ( (DEF_BIT_IS_CLR (BSP_REG_SCU_PLLSTAT, (BSP_BIT_PLLSTAT_PLLLV |
						       BSP_BIT_PLLSTAT_PLLHV |
						       BSP_BIT_PLLSTAT_PLLSP))) &
 80075b0:	4013      	ands	r3, r2
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON2, BSP_BIT_PLLCON2_PINSEL);
	/* Restart osc watchdog of the PLL */
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_OSCRES);
	/* Wait for stable OSC frequency */
	reg_to = BSP_REG_VAL_TO;
	while ( (DEF_BIT_IS_CLR (BSP_REG_SCU_PLLSTAT, (BSP_BIT_PLLSTAT_PLLLV |
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1ea      	bne.n	800758c <BSP_SysInit+0x54>
						       BSP_BIT_PLLSTAT_PLLHV |
						       BSP_BIT_PLLSTAT_PLLSP))) &
		(reg_to > 0u)) {
		reg_to--;
	}
	if (reg_to == 0u) {
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d100      	bne.n	80075be <BSP_SysInit+0x86>
		while (DEF_TRUE);
 80075bc:	e7fe      	b.n	80075bc <BSP_SysInit+0x84>
	}
	/* ---------------- PLL CONFIGURATION ----------------- */
	/* Select OSC_FI as system clk */
	BSP_REG_SCU_SYSCLKCR = BSP_BIT_SYSCLKCR_OSC_FI;
 80075be:	4b59      	ldr	r3, [pc, #356]	; (8007724 <BSP_SysInit+0x1ec>)
 80075c0:	2200      	movs	r2, #0
 80075c2:	601a      	str	r2, [r3, #0]
	/* PLL is bypassed */
	DEF_BIT_SET (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_VCOBYP);
 80075c4:	4a52      	ldr	r2, [pc, #328]	; (8007710 <BSP_SysInit+0x1d8>)
 80075c6:	4b52      	ldr	r3, [pc, #328]	; (8007710 <BSP_SysInit+0x1d8>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f043 0301 	orr.w	r3, r3, #1
 80075ce:	6013      	str	r3, [r2, #0]
	/* Disconnect OSC_HP from PLL */
	DEF_BIT_SET (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_FINDIS);
 80075d0:	4a4f      	ldr	r2, [pc, #316]	; (8007710 <BSP_SysInit+0x1d8>)
 80075d2:	4b4f      	ldr	r3, [pc, #316]	; (8007710 <BSP_SysInit+0x1d8>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f043 0310 	orr.w	r3, r3, #16
 80075da:	6013      	str	r3, [r2, #0]

	/* fpll = (NDIV  * fosc) / (PDIV * K2DIV))              */
	/*      = (40 * 12MHz) / (1 * 20)) = 24MHz              */
	BSP_REG_SCU_PLLCON1 = ( ( (BSP_PLLCON1_K1DIV       - 1u) <<  0u)
 80075dc:	4b52      	ldr	r3, [pc, #328]	; (8007728 <BSP_SysInit+0x1f0>)
 80075de:	4a53      	ldr	r2, [pc, #332]	; (800772c <BSP_SysInit+0x1f4>)
 80075e0:	601a      	str	r2, [r3, #0]
				| ( (BSP_PLLCON1_NDIV        - 1u) <<  8u)
				| ( (BSP_PLLCON1_K2DIV_STEP1 - 1u) << 16u)
				| ( (BSP_PLLCON1_PDIV        - 1u) << 24u));

	/* Keeps OSC clk conn. to VCO in case of Loss-of-lock */
	BSP_REG_SCU_PLLCON0 |= BSP_BIT_PLLCON0_OSCDISCDIS;
 80075e2:	4a4b      	ldr	r2, [pc, #300]	; (8007710 <BSP_SysInit+0x1d8>)
 80075e4:	4b4a      	ldr	r3, [pc, #296]	; (8007710 <BSP_SysInit+0x1d8>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075ec:	6013      	str	r3, [r2, #0]
	/* Connect OSC_HP to PLL */
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_FINDIS);
 80075ee:	4a48      	ldr	r2, [pc, #288]	; (8007710 <BSP_SysInit+0x1d8>)
 80075f0:	4b47      	ldr	r3, [pc, #284]	; (8007710 <BSP_SysInit+0x1d8>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f023 0310 	bic.w	r3, r3, #16
 80075f8:	6013      	str	r3, [r2, #0]
	/* Restart PLL lock detection */
	DEF_BIT_SET (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_RESLD);
 80075fa:	4a45      	ldr	r2, [pc, #276]	; (8007710 <BSP_SysInit+0x1d8>)
 80075fc:	4b44      	ldr	r3, [pc, #272]	; (8007710 <BSP_SysInit+0x1d8>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007604:	6013      	str	r3, [r2, #0]

	/* Wait for PLL Lock */
	reg_to = BSP_REG_VAL_TO;
 8007606:	4b45      	ldr	r3, [pc, #276]	; (800771c <BSP_SysInit+0x1e4>)
 8007608:	607b      	str	r3, [r7, #4]
	while ( (DEF_BIT_IS_CLR (BSP_REG_SCU_PLLSTAT, BSP_BIT_PLLSTAT_VCOLOCK)) &
 800760a:	e002      	b.n	8007612 <BSP_SysInit+0xda>
		(reg_to > 0u)) {
		reg_to--;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	3b01      	subs	r3, #1
 8007610:	607b      	str	r3, [r7, #4]
	/* Restart PLL lock detection */
	DEF_BIT_SET (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_RESLD);

	/* Wait for PLL Lock */
	reg_to = BSP_REG_VAL_TO;
	while ( (DEF_BIT_IS_CLR (BSP_REG_SCU_PLLSTAT, BSP_BIT_PLLSTAT_VCOLOCK)) &
 8007612:	4b43      	ldr	r3, [pc, #268]	; (8007720 <BSP_SysInit+0x1e8>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 0304 	and.w	r3, r3, #4
 800761a:	2b00      	cmp	r3, #0
 800761c:	d101      	bne.n	8007622 <BSP_SysInit+0xea>
 800761e:	2301      	movs	r3, #1
 8007620:	e000      	b.n	8007624 <BSP_SysInit+0xec>
 8007622:	2300      	movs	r3, #0
		(reg_to > 0u)) {
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	2a00      	cmp	r2, #0
 8007628:	bf14      	ite	ne
 800762a:	2201      	movne	r2, #1
 800762c:	2200      	moveq	r2, #0
 800762e:	b2d2      	uxtb	r2, r2
	/* Restart PLL lock detection */
	DEF_BIT_SET (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_RESLD);

	/* Wait for PLL Lock */
	reg_to = BSP_REG_VAL_TO;
	while ( (DEF_BIT_IS_CLR (BSP_REG_SCU_PLLSTAT, BSP_BIT_PLLSTAT_VCOLOCK)) &
 8007630:	4013      	ands	r3, r2
 8007632:	2b00      	cmp	r3, #0
 8007634:	d1ea      	bne.n	800760c <BSP_SysInit+0xd4>
		(reg_to > 0u)) {
		reg_to--;
	}
	if (reg_to == 0u) {
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d100      	bne.n	800763e <BSP_SysInit+0x106>
		while (DEF_TRUE);
 800763c:	e7fe      	b.n	800763c <BSP_SysInit+0x104>
	}

	/* Normal opertaion, PLL is not bypassed */
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_VCOBYP);
 800763e:	4a34      	ldr	r2, [pc, #208]	; (8007710 <BSP_SysInit+0x1d8>)
 8007640:	4b33      	ldr	r3, [pc, #204]	; (8007710 <BSP_SysInit+0x1d8>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f023 0301 	bic.w	r3, r3, #1
 8007648:	6013      	str	r3, [r2, #0]
	/* Enable MMC clock */
	DEF_BIT_SET (BSP_REG_SCU_CLKSET, BSP_BIT_CLKSET_MMCEN);
 800764a:	4a39      	ldr	r2, [pc, #228]	; (8007730 <BSP_SysInit+0x1f8>)
 800764c:	4b38      	ldr	r3, [pc, #224]	; (8007730 <BSP_SysInit+0x1f8>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f043 0302 	orr.w	r3, r3, #2
 8007654:	6013      	str	r3, [r2, #0]
	/* fcpu = fsys */
	DEF_BIT_CLR (BSP_REG_SCU_CPUCLKCR, BSP_BIT_CPUCLKCR_CPUDIV);
 8007656:	4a37      	ldr	r2, [pc, #220]	; (8007734 <BSP_SysInit+0x1fc>)
 8007658:	4b36      	ldr	r3, [pc, #216]	; (8007734 <BSP_SysInit+0x1fc>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f023 0301 	bic.w	r3, r3, #1
 8007660:	6013      	str	r3, [r2, #0]
	/* fpb  = fsys */
	DEF_BIT_CLR (BSP_REG_SCU_PBCLKCR,  BSP_BIT_PBCLKCR_PBDIV);
 8007662:	4a35      	ldr	r2, [pc, #212]	; (8007738 <BSP_SysInit+0x200>)
 8007664:	4b34      	ldr	r3, [pc, #208]	; (8007738 <BSP_SysInit+0x200>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f023 0301 	bic.w	r3, r3, #1
 800766c:	6013      	str	r3, [r2, #0]
	/* fccu = fsys */
	DEF_BIT_CLR (BSP_REG_SCU_CCUCLKCR, BSP_BIT_CCUCLKCR_CCUDIV);
 800766e:	4a33      	ldr	r2, [pc, #204]	; (800773c <BSP_SysInit+0x204>)
 8007670:	4b32      	ldr	r3, [pc, #200]	; (800773c <BSP_SysInit+0x204>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f023 0301 	bic.w	r3, r3, #1
 8007678:	6013      	str	r3, [r2, #0]
	/* Select PLL clock as system clk */
	BSP_REG_SCU_SYSCLKCR |= BSP_BIT_SYSCLKCR_PLL_CLK;
 800767a:	4a2a      	ldr	r2, [pc, #168]	; (8007724 <BSP_SysInit+0x1ec>)
 800767c:	4b29      	ldr	r3, [pc, #164]	; (8007724 <BSP_SysInit+0x1ec>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007684:	6013      	str	r3, [r2, #0]
	/* Wait between K2 divider updates */
	reg_to = BSP_REG_VAL_TO;
 8007686:	4b25      	ldr	r3, [pc, #148]	; (800771c <BSP_SysInit+0x1e4>)
 8007688:	607b      	str	r3, [r7, #4]
	while (reg_to > 0u) {
 800768a:	e002      	b.n	8007692 <BSP_SysInit+0x15a>
		reg_to--;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	3b01      	subs	r3, #1
 8007690:	607b      	str	r3, [r7, #4]
	DEF_BIT_CLR (BSP_REG_SCU_CCUCLKCR, BSP_BIT_CCUCLKCR_CCUDIV);
	/* Select PLL clock as system clk */
	BSP_REG_SCU_SYSCLKCR |= BSP_BIT_SYSCLKCR_PLL_CLK;
	/* Wait between K2 divider updates */
	reg_to = BSP_REG_VAL_TO;
	while (reg_to > 0u) {
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d1f9      	bne.n	800768c <BSP_SysInit+0x154>
		reg_to--;
	}
	/* fpll = (NDIV  * fosc) / (PDIV * K2DIV)) */
	/*      = (40 * 12MHz) / (1 * 8)) = 60MHz  */
	reg  = (BSP_REG_SCU_PLLCON1 & ~BSP_PLLCON1_K2DIV_MASK);
 8007698:	4b23      	ldr	r3, [pc, #140]	; (8007728 <BSP_SysInit+0x1f0>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80076a0:	603b      	str	r3, [r7, #0]
	reg |= ( (BSP_PLLCON1_K2DIV_STEP2 - 1u) << 16);
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80076a8:	603b      	str	r3, [r7, #0]
	BSP_REG_SCU_PLLCON1 = reg;
 80076aa:	4a1f      	ldr	r2, [pc, #124]	; (8007728 <BSP_SysInit+0x1f0>)
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	6013      	str	r3, [r2, #0]
	/* Wait between K2 divider updates */
	reg_to = BSP_REG_VAL_TO;
 80076b0:	4b1a      	ldr	r3, [pc, #104]	; (800771c <BSP_SysInit+0x1e4>)
 80076b2:	607b      	str	r3, [r7, #4]
	while (reg_to > 0u) {
 80076b4:	e002      	b.n	80076bc <BSP_SysInit+0x184>
		reg_to--;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	3b01      	subs	r3, #1
 80076ba:	607b      	str	r3, [r7, #4]
	reg  = (BSP_REG_SCU_PLLCON1 & ~BSP_PLLCON1_K2DIV_MASK);
	reg |= ( (BSP_PLLCON1_K2DIV_STEP2 - 1u) << 16);
	BSP_REG_SCU_PLLCON1 = reg;
	/* Wait between K2 divider updates */
	reg_to = BSP_REG_VAL_TO;
	while (reg_to > 0u) {
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d1f9      	bne.n	80076b6 <BSP_SysInit+0x17e>
		reg_to--;
	}

	/* fpll = (NDIV  * fosc) / (PDIV * K2DIV)) */
	/*      = (40 * 12MHz) / (1 * 5)) = 96MHz  */
	reg                 = (BSP_REG_SCU_PLLCON1 & ~BSP_PLLCON1_K2DIV_MASK);
 80076c2:	4b19      	ldr	r3, [pc, #100]	; (8007728 <BSP_SysInit+0x1f0>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80076ca:	603b      	str	r3, [r7, #0]
	reg                |= ( (BSP_PLLCON1_K2DIV_STEP3 - 1u) << 16);
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076d2:	603b      	str	r3, [r7, #0]
	BSP_REG_SCU_PLLCON1 = reg;
 80076d4:	4a14      	ldr	r2, [pc, #80]	; (8007728 <BSP_SysInit+0x1f0>)
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	6013      	str	r3, [r2, #0]
	/* Wait between K2 divider updates */
	reg_to = BSP_REG_VAL_TO;
 80076da:	4b10      	ldr	r3, [pc, #64]	; (800771c <BSP_SysInit+0x1e4>)
 80076dc:	607b      	str	r3, [r7, #4]
	while (reg_to > 0u) {
 80076de:	e002      	b.n	80076e6 <BSP_SysInit+0x1ae>
		reg_to--;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	3b01      	subs	r3, #1
 80076e4:	607b      	str	r3, [r7, #4]
	reg                 = (BSP_REG_SCU_PLLCON1 & ~BSP_PLLCON1_K2DIV_MASK);
	reg                |= ( (BSP_PLLCON1_K2DIV_STEP3 - 1u) << 16);
	BSP_REG_SCU_PLLCON1 = reg;
	/* Wait between K2 divider updates */
	reg_to = BSP_REG_VAL_TO;
	while (reg_to > 0u) {
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d1f9      	bne.n	80076e0 <BSP_SysInit+0x1a8>
		reg_to--;
	}
	/* fpll = (NDIV  * fosc) / (PDIV * K2DIV)) */
	/*      = (40 * 12MHz) / (1 * 4)) = 120MHz */
	reg                 = (BSP_REG_SCU_PLLCON1 & ~BSP_PLLCON1_K2DIV_MASK);
 80076ec:	4b0e      	ldr	r3, [pc, #56]	; (8007728 <BSP_SysInit+0x1f0>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80076f4:	603b      	str	r3, [r7, #0]
	reg                |= ( (BSP_PLLCON1_K2DIV_FINAL - 1u) << 16);
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80076fc:	603b      	str	r3, [r7, #0]
	BSP_REG_SCU_PLLCON1 = reg;
 80076fe:	4a0a      	ldr	r2, [pc, #40]	; (8007728 <BSP_SysInit+0x1f0>)
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	6013      	str	r3, [r2, #0]
}
 8007704:	bf00      	nop
 8007706:	370c      	adds	r7, #12
 8007708:	46bd      	mov	sp, r7
 800770a:	bc80      	pop	{r7}
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	50004714 	.word	0x50004714
 8007714:	50004704 	.word	0x50004704
 8007718:	5000471c 	.word	0x5000471c
 800771c:	0007ffff 	.word	0x0007ffff
 8007720:	50004710 	.word	0x50004710
 8007724:	5000460c 	.word	0x5000460c
 8007728:	50004718 	.word	0x50004718
 800772c:	00132700 	.word	0x00132700
 8007730:	50004604 	.word	0x50004604
 8007734:	50004610 	.word	0x50004610
 8007738:	50004614 	.word	0x50004614
 800773c:	50004620 	.word	0x50004620

08007740 <BSP_SysClkFreqGet>:
 *
 * @brief This function is used to retrieve system or CPU clock frequency
 *
 */
CPU_INT32U BSP_SysClkFreqGet (void)
{
 8007740:	b480      	push	{r7}
 8007742:	b085      	sub	sp, #20
 8007744:	af00      	add	r7, sp, #0
	CPU_INT08U  pll_p;
	CPU_INT08U  pll_k2;
	CPU_INT32U  cpu_freq;


	sysclk_src = (BSP_REG_SCU_SYSCLKCR & DEF_BIT_FIELD (2u, 16u)) >> 16u;
 8007746:	4b26      	ldr	r3, [pc, #152]	; (80077e0 <BSP_SysClkFreqGet+0xa0>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800774e:	0c1b      	lsrs	r3, r3, #16
 8007750:	72fb      	strb	r3, [r7, #11]
	sysclk_div = (BSP_REG_SCU_SYSCLKCR & DEF_BIT_FIELD (8u, 0u)) + 1u;
 8007752:	4b23      	ldr	r3, [pc, #140]	; (80077e0 <BSP_SysClkFreqGet+0xa0>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	b29b      	uxth	r3, r3
 8007758:	b2db      	uxtb	r3, r3
 800775a:	b29b      	uxth	r3, r3
 800775c:	3301      	adds	r3, #1
 800775e:	813b      	strh	r3, [r7, #8]

	switch (sysclk_src) {
 8007760:	7afb      	ldrb	r3, [r7, #11]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d002      	beq.n	800776c <BSP_SysClkFreqGet+0x2c>
 8007766:	2b01      	cmp	r3, #1
 8007768:	d003      	beq.n	8007772 <BSP_SysClkFreqGet+0x32>
 800776a:	e022      	b.n	80077b2 <BSP_SysClkFreqGet+0x72>
	case 0:
		/* Fast Internal Oscillator selected as system clk */
		cpu_freq = BSP_CFG_SYS_INT_OSC_FI_FREQ_HZ;
 800776c:	4b1d      	ldr	r3, [pc, #116]	; (80077e4 <BSP_SysClkFreqGet+0xa4>)
 800776e:	60fb      	str	r3, [r7, #12]
		break;
 8007770:	e021      	b.n	80077b6 <BSP_SysClkFreqGet+0x76>

	case 1:
		/* PLL clock is selected as system clk */
		cpu_freq = BSP_CFG_SYS_XTAL_OSC_FREQ_HZ;
 8007772:	4b1d      	ldr	r3, [pc, #116]	; (80077e8 <BSP_SysClkFreqGet+0xa8>)
 8007774:	60fb      	str	r3, [r7, #12]
		pll_n    = (BSP_REG_SCU_PLLCON1 >>  8u) + 1u;
 8007776:	4b1d      	ldr	r3, [pc, #116]	; (80077ec <BSP_SysClkFreqGet+0xac>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	0a1b      	lsrs	r3, r3, #8
 800777c:	b2db      	uxtb	r3, r3
 800777e:	3301      	adds	r3, #1
 8007780:	71fb      	strb	r3, [r7, #7]
		pll_p    = (BSP_REG_SCU_PLLCON1 >> 24u) + 1u;
 8007782:	4b1a      	ldr	r3, [pc, #104]	; (80077ec <BSP_SysClkFreqGet+0xac>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	0e1b      	lsrs	r3, r3, #24
 8007788:	b2db      	uxtb	r3, r3
 800778a:	3301      	adds	r3, #1
 800778c:	71bb      	strb	r3, [r7, #6]
		pll_k2   = (BSP_REG_SCU_PLLCON1 >> 16u) + 1u;
 800778e:	4b17      	ldr	r3, [pc, #92]	; (80077ec <BSP_SysClkFreqGet+0xac>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	0c1b      	lsrs	r3, r3, #16
 8007794:	b2db      	uxtb	r3, r3
 8007796:	3301      	adds	r3, #1
 8007798:	717b      	strb	r3, [r7, #5]
		cpu_freq = ( (cpu_freq / pll_p) * pll_n) / pll_k2;
 800779a:	79bb      	ldrb	r3, [r7, #6]
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	fbb2 f3f3 	udiv	r3, r2, r3
 80077a2:	79fa      	ldrb	r2, [r7, #7]
 80077a4:	fb02 f203 	mul.w	r2, r2, r3
 80077a8:	797b      	ldrb	r3, [r7, #5]
 80077aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80077ae:	60fb      	str	r3, [r7, #12]
		break;
 80077b0:	e001      	b.n	80077b6 <BSP_SysClkFreqGet+0x76>

	case 2:
	case 3:
	default:
		return ( (CPU_INT32U) 0u);
 80077b2:	2300      	movs	r3, #0
 80077b4:	e00e      	b.n	80077d4 <BSP_SysClkFreqGet+0x94>
	}
	cpu_freq /= sysclk_div;
 80077b6:	893b      	ldrh	r3, [r7, #8]
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80077be:	60fb      	str	r3, [r7, #12]
	if (DEF_BIT_IS_SET (BSP_REG_SCU_CPUCLKCR, BSP_BIT_CPUCLKCR_CPUDIV)) {
 80077c0:	4b0b      	ldr	r3, [pc, #44]	; (80077f0 <BSP_SysClkFreqGet+0xb0>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f003 0301 	and.w	r3, r3, #1
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d002      	beq.n	80077d2 <BSP_SysClkFreqGet+0x92>
		cpu_freq /= 2u;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	085b      	lsrs	r3, r3, #1
 80077d0:	60fb      	str	r3, [r7, #12]
	}
	return (cpu_freq);
 80077d2:	68fb      	ldr	r3, [r7, #12]
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3714      	adds	r7, #20
 80077d8:	46bd      	mov	sp, r7
 80077da:	bc80      	pop	{r7}
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	5000460c 	.word	0x5000460c
 80077e4:	016e3600 	.word	0x016e3600
 80077e8:	00b71b00 	.word	0x00b71b00
 80077ec:	50004718 	.word	0x50004718
 80077f0:	50004610 	.word	0x50004610

080077f4 <BSP_Init>:
 * @params none
 * @returns none
 * @brief Initialization of the board support.
 */
void  BSP_Init (void)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	af00      	add	r7, sp, #0
	BSP_IntInit();
 80077f8:	f7ff f88e 	bl	8006918 <BSP_IntInit>
	BSP_UART_Init();
 80077fc:	f7ff fe3c 	bl	8007478 <BSP_UART_Init>
	BSP_GPIO_Init();
 8007800:	f7ff fc92 	bl	8007128 <BSP_GPIO_Init>
	BSP_CCU4_Init();
 8007804:	f7fe ff80 	bl	8006708 <BSP_CCU4_Init>
	if(BSP_SPI_Init()!=SPI_OK){
 8007808:	f7ff fd34 	bl	8007274 <BSP_SPI_Init>
 800780c:	4603      	mov	r3, r0
 800780e:	2b00      	cmp	r3, #0
 8007810:	d002      	beq.n	8007818 <BSP_Init+0x24>
		APP_TRACE_INFO ("SPI NOT OK ...\n");
 8007812:	4802      	ldr	r0, [pc, #8]	; (800781c <BSP_Init+0x28>)
 8007814:	f000 ffd4 	bl	80087c0 <puts>
		/*Error should never get here*/
	}
}
 8007818:	bf00      	nop
 800781a:	bd80      	pop	{r7, pc}
 800781c:	0800ec4c 	.word	0x0800ec4c

08007820 <ITM_SendChar>:
    \param [in]     ch  Character to transmit.

    \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  if ((ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8007828:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800782c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8007830:	f003 0301 	and.w	r3, r3, #1
 8007834:	2b00      	cmp	r3, #0
 8007836:	d012      	beq.n	800785e <ITM_SendChar+0x3e>
      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
 8007838:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800783c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8007840:	f003 0301 	and.w	r3, r3, #1

    \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if ((ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00a      	beq.n	800785e <ITM_SendChar+0x3e>
      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0].u32 == 0);
 8007848:	bf00      	nop
 800784a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d0fa      	beq.n	800784a <ITM_SendChar+0x2a>
    ITM->PORT[0].u8 = (uint8_t) ch;
 8007854:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	b2d2      	uxtb	r2, r2
 800785c:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800785e:	687b      	ldr	r3, [r7, #4]
}
 8007860:	4618      	mov	r0, r3
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	bc80      	pop	{r7}
 8007868:	4770      	bx	lr
 800786a:	bf00      	nop

0800786c <initRetargetSwo>:
 *            CMSIS-Core > Reference > Debug Access
 *        (2) ARM Cortex-M4 Processor Technical Reference Manual
 *        (3) ARMv7-M Architecture Reference Manual
 */
void initRetargetSwo (void)
{
 800786c:	b480      	push	{r7}
 800786e:	af00      	add	r7, sp, #0
	// P2.1: After a system reset, this pin selects HWO0 (DB.TDO/DB.TRACESWO)
	// PORT2->HWSEL ... clear bits [3:2]
	PORT2->HWSEL &= ~PORT2_HWSEL_HW1_Msk;
 8007870:	4a1c      	ldr	r2, [pc, #112]	; (80078e4 <initRetargetSwo+0x78>)
 8007872:	4b1c      	ldr	r3, [pc, #112]	; (80078e4 <initRetargetSwo+0x78>)
 8007874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007876:	f023 030c 	bic.w	r3, r3, #12
 800787a:	6753      	str	r3, [r2, #116]	; 0x74
	// PORT2->HWSEL ... set bit [2] -> HWO0
	PORT2->HWSEL |= 0x01UL << PORT2_HWSEL_HW1_Pos;
 800787c:	4a19      	ldr	r2, [pc, #100]	; (80078e4 <initRetargetSwo+0x78>)
 800787e:	4b19      	ldr	r3, [pc, #100]	; (80078e4 <initRetargetSwo+0x78>)
 8007880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007882:	f043 0304 	orr.w	r3, r3, #4
 8007886:	6753      	str	r3, [r2, #116]	; 0x74

	// Enable trace systems
	// Source: ARMv7-M Architecture Reference Manual
	// DEMCR = Debug Exception and Monitor Control Register
	//         TRCENA ... global enable for DWT and ITM blocks
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8007888:	4a17      	ldr	r2, [pc, #92]	; (80078e8 <initRetargetSwo+0x7c>)
 800788a:	4b17      	ldr	r3, [pc, #92]	; (80078e8 <initRetargetSwo+0x7c>)
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007892:	60d3      	str	r3, [r2, #12]
	// SWO baud rate prescaler value
	// ACPR = Asynchronous Clock Prescaler Register
	//        fSWO = fCPU / (SWOSCALAR + 1)
	//        fSWO = 1MHz (maximum speed JLINK Lite CortexM)
	//        fCPU = 120MHz
	TPI->ACPR = 119UL;
 8007894:	4b15      	ldr	r3, [pc, #84]	; (80078ec <initRetargetSwo+0x80>)
 8007896:	2277      	movs	r2, #119	; 0x77
 8007898:	611a      	str	r2, [r3, #16]
	// Source: ARMv7-M Architecture Reference Manual
	// SPPR = Selected Pin Control Register
	//        0x0 ... Synchronous Trace Port Mode
	//        0x1 ... Asynchronous Serial Wire Output (Manchester)
	//        0x2 ... Asynchronous Serial Wire Output (NRZ)
	TPI->SPPR = 0x2UL;
 800789a:	4b14      	ldr	r3, [pc, #80]	; (80078ec <initRetargetSwo+0x80>)
 800789c:	2202      	movs	r2, #2
 800789e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	// Source: ARM Cortex-M4 Processor Technical Reference Manual
	// Source: infineonforums -> 358-ITM-printf-style-debugging-not-working
	// FFCR = Formatter and Flash Control Register
	//        0x0 ... continuous formatting disabled
	//        0x1 ... continuous formatting enabled
	TPI->FFCR &= ~TPI_FFCR_EnFCont_Msk;
 80078a2:	4a12      	ldr	r2, [pc, #72]	; (80078ec <initRetargetSwo+0x80>)
 80078a4:	4b11      	ldr	r3, [pc, #68]	; (80078ec <initRetargetSwo+0x80>)
 80078a6:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 80078aa:	f023 0302 	bic.w	r3, r3, #2
 80078ae:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

	// Unlock ITM
	// Source: infineonforums -> 358-ITM-printf-style-debugging-not-working
	ITM->LAR = 0xC5ACCE55;
 80078b2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80078b6:	4a0e      	ldr	r2, [pc, #56]	; (80078f0 <initRetargetSwo+0x84>)
 80078b8:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
	// Source: ARMv7-M Architecture Reference Manual, Sec. C1-7
	// TCR = Trace Control Register
	//       ITMENA ... enable ITM
	ITM->TCR |= ITM_TCR_ITMENA_Msk;
 80078bc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80078c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80078c4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80078c8:	f043 0301 	orr.w	r3, r3, #1
 80078cc:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
	// Source: ARMv7-M Architecture Reference Manual, Sec. C1-7
	// TER = Trace Enable Register
	//       STIMENA ... Stimulus Port #N is enabled when bit STIMENA[N]
	ITM->TER = 0xFFFFFFFF;
 80078d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80078d4:	f04f 32ff 	mov.w	r2, #4294967295
 80078d8:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
}
 80078dc:	bf00      	nop
 80078de:	46bd      	mov	sp, r7
 80078e0:	bc80      	pop	{r7}
 80078e2:	4770      	bx	lr
 80078e4:	48028200 	.word	0x48028200
 80078e8:	e000edf0 	.word	0xe000edf0
 80078ec:	e0040000 	.word	0xe0040000
 80078f0:	c5acce55 	.word	0xc5acce55

080078f4 <_write>:
 * @brief Retarget the printf() function to output via the ITM Debug module.
 *        This function relies on ITM_SendChar() defined in core_cm4.h of the
 *        CMSIS library.
 */
int _write (int file, char *buf, int nbytes)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b086      	sub	sp, #24
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	607a      	str	r2, [r7, #4]
	int i;

	for (i = 0; i < nbytes; i++) {
 8007900:	2300      	movs	r3, #0
 8007902:	617b      	str	r3, [r7, #20]
 8007904:	e00a      	b.n	800791c <_write+0x28>
		ITM_SendChar ( (*buf++));
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	1c5a      	adds	r2, r3, #1
 800790a:	60ba      	str	r2, [r7, #8]
 800790c:	f993 3000 	ldrsb.w	r3, [r3]
 8007910:	4618      	mov	r0, r3
 8007912:	f7ff ff85 	bl	8007820 <ITM_SendChar>
 */
int _write (int file, char *buf, int nbytes)
{
	int i;

	for (i = 0; i < nbytes; i++) {
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	3301      	adds	r3, #1
 800791a:	617b      	str	r3, [r7, #20]
 800791c:	697a      	ldr	r2, [r7, #20]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	429a      	cmp	r2, r3
 8007922:	dbf0      	blt.n	8007906 <_write+0x12>
		ITM_SendChar ( (*buf++));
	}
	return nbytes;
 8007924:	687b      	ldr	r3, [r7, #4]
}
 8007926:	4618      	mov	r0, r3
 8007928:	3718      	adds	r7, #24
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop

08007930 <CPU_TS_TmrInit>:
 *
 *              See also CPU_TS_TmrRd()
 */
#if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
void  CPU_TS_TmrInit (void)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
	CPU_INT32U  fclk_freq;

	fclk_freq = BSP_SysClkFreqGet();
 8007936:	f7ff ff03 	bl	8007740 <BSP_SysClkFreqGet>
 800793a:	6078      	str	r0, [r7, #4]

	CPU_BSP_REG_DEMCR  |= DEF_BIT_24;
 800793c:	4a09      	ldr	r2, [pc, #36]	; (8007964 <CPU_TS_TmrInit+0x34>)
 800793e:	4b09      	ldr	r3, [pc, #36]	; (8007964 <CPU_TS_TmrInit+0x34>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007946:	6013      	str	r3, [r2, #0]
	CPU_BSP_REG_DWT_CR |= DEF_BIT_00;
 8007948:	4a07      	ldr	r2, [pc, #28]	; (8007968 <CPU_TS_TmrInit+0x38>)
 800794a:	4b07      	ldr	r3, [pc, #28]	; (8007968 <CPU_TS_TmrInit+0x38>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f043 0301 	orr.w	r3, r3, #1
 8007952:	6013      	str	r3, [r2, #0]

	CPU_TS_TmrFreqSet ( (CPU_TS_TMR_FREQ) fclk_freq);
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f7fa fb99 	bl	800208c <CPU_TS_TmrFreqSet>
}
 800795a:	bf00      	nop
 800795c:	3708      	adds	r7, #8
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	e000edfc 	.word	0xe000edfc
 8007968:	e0001000 	.word	0xe0001000

0800796c <CPU_TS_TmrRd>:
 *             resolution inadequate to measure desired times.
 *
 */
#if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
CPU_TS_TMR  CPU_TS_TmrRd (void)
{
 800796c:	b480      	push	{r7}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
	CPU_TS_TMR  ts_tmr_cnts;


	ts_tmr_cnts = (CPU_TS_TMR) CPU_BSP_REG_DWT_CYCCNT;
 8007972:	4b04      	ldr	r3, [pc, #16]	; (8007984 <CPU_TS_TmrRd+0x18>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	607b      	str	r3, [r7, #4]

	return (ts_tmr_cnts);
 8007978:	687b      	ldr	r3, [r7, #4]
}
 800797a:	4618      	mov	r0, r3
 800797c:	370c      	adds	r7, #12
 800797e:	46bd      	mov	sp, r7
 8007980:	bc80      	pop	{r7}
 8007982:	4770      	bx	lr
 8007984:	e0001004 	.word	0xe0001004

08007988 <_lseek>:

/*
 * File position seek
 */
__attribute__((weak)) int _lseek(int file, int offset, int whence)
{
 8007988:	b480      	push	{r7}
 800798a:	b085      	sub	sp, #20
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	607a      	str	r2, [r7, #4]
 file = file;
 offset = offset;
 whence = whence;
 return -1;
 8007994:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007998:	4618      	mov	r0, r3
 800799a:	3714      	adds	r7, #20
 800799c:	46bd      	mov	sp, r7
 800799e:	bc80      	pop	{r7}
 80079a0:	4770      	bx	lr
 80079a2:	bf00      	nop

080079a4 <_read>:

/*
 * File read
 */
__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	60b9      	str	r1, [r7, #8]
 80079ae:	607a      	str	r2, [r7, #4]
 file = file;
 len  = len;
 return 0;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3714      	adds	r7, #20
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bc80      	pop	{r7}
 80079ba:	4770      	bx	lr

080079bc <_close>:

/*
 * File close
 */
__attribute__((weak)) int _close(void)
{
 80079bc:	b480      	push	{r7}
 80079be:	af00      	add	r7, sp, #0
 return -1;
 80079c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bc80      	pop	{r7}
 80079ca:	4770      	bx	lr

080079cc <_fstat>:

/*
 * File status
 */
__attribute__((weak)) int _fstat(int file, struct stat *st)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
 file = file;
 if(st)
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d002      	beq.n	80079e2 <_fstat+0x16>
  return -1;
 80079dc:	f04f 33ff 	mov.w	r3, #4294967295
 80079e0:	e001      	b.n	80079e6 <_fstat+0x1a>
 else
  return -2;
 80079e2:	f06f 0301 	mvn.w	r3, #1
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	370c      	adds	r7, #12
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bc80      	pop	{r7}
 80079ee:	4770      	bx	lr

080079f0 <_sbrk>:
/* ========================================================================= */
/*
 * Heap break (position)
 */
__attribute__((weak)) void *_sbrk(int RequestedSize)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b087      	sub	sp, #28
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 unsigned int  HeapSize;
 static unsigned char *HeapBound;
 static unsigned char * heap= (unsigned char *)NULL;


 HeapSize   = (unsigned int)(&Heap_Bank1_Size);
 80079f8:	4b15      	ldr	r3, [pc, #84]	; (8007a50 <_sbrk+0x60>)
 80079fa:	617b      	str	r3, [r7, #20]

 /*
  * If this is the first time malloc() was invoked, we start with the
  * begining of the heap.
  */
 if(heap == (unsigned char *)NULL)
 80079fc:	4b15      	ldr	r3, [pc, #84]	; (8007a54 <_sbrk+0x64>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d108      	bne.n	8007a16 <_sbrk+0x26>
  {
   heap = (unsigned char *)&Heap_Bank1_Start;
 8007a04:	4b13      	ldr	r3, [pc, #76]	; (8007a54 <_sbrk+0x64>)
 8007a06:	4a14      	ldr	r2, [pc, #80]	; (8007a58 <_sbrk+0x68>)
 8007a08:	601a      	str	r2, [r3, #0]
   HeapBound  = (unsigned char *) (heap + HeapSize);
 8007a0a:	4b12      	ldr	r3, [pc, #72]	; (8007a54 <_sbrk+0x64>)
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	4413      	add	r3, r2
 8007a12:	4a12      	ldr	r2, [pc, #72]	; (8007a5c <_sbrk+0x6c>)
 8007a14:	6013      	str	r3, [r2, #0]
  }

 /* Super duper algo to find out if we have memory for the latest request */
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;
 8007a16:	4b0f      	ldr	r3, [pc, #60]	; (8007a54 <_sbrk+0x64>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	613b      	str	r3, [r7, #16]

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
 8007a1c:	4b0d      	ldr	r3, [pc, #52]	; (8007a54 <_sbrk+0x64>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	461a      	mov	r2, r3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4413      	add	r3, r2
 8007a26:	3307      	adds	r3, #7
                                          & 0xFFFFFFF8);
 8007a28:	f023 0307 	bic.w	r3, r3, #7
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
 8007a2c:	60fb      	str	r3, [r7, #12]
                                          & 0xFFFFFFF8);

 /* Return no memory condition if we sense we are crossing the limit */
 if (NextBreak >=  HeapBound )
 8007a2e:	4b0b      	ldr	r3, [pc, #44]	; (8007a5c <_sbrk+0x6c>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d301      	bcc.n	8007a3c <_sbrk+0x4c>
  return ((unsigned char *)NULL);
 8007a38:	2300      	movs	r3, #0
 8007a3a:	e003      	b.n	8007a44 <_sbrk+0x54>
 else
 {
  heap = NextBreak;
 8007a3c:	4a05      	ldr	r2, [pc, #20]	; (8007a54 <_sbrk+0x64>)
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6013      	str	r3, [r2, #0]
  return CurrBreak;
 8007a42:	693b      	ldr	r3, [r7, #16]
 }
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	371c      	adds	r7, #28
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bc80      	pop	{r7}
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	0000c588 	.word	0x0000c588
 8007a54:	20001ec4 	.word	0x20001ec4
 8007a58:	20003a78 	.word	0x20003a78
 8007a5c:	20001ec8 	.word	0x20001ec8

08007a60 <_init>:
 while(1){}
}

/* Init */
__attribute__((weak)) void _init(void)
{}
 8007a60:	b480      	push	{r7}
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	bf00      	nop
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bc80      	pop	{r7}
 8007a6a:	4770      	bx	lr

08007a6c <_isatty>:

/*
 * Terminal type evaluation
 */
__attribute__((weak)) int _isatty(int file)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 file = file;
 return -1;
 8007a74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bc80      	pop	{r7}
 8007a80:	4770      	bx	lr
 8007a82:	bf00      	nop

08007a84 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a1b      	ldr	r2, [pc, #108]	; (8007afc <XMC_USIC_CH_Enable+0x78>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d003      	beq.n	8007a9c <XMC_USIC_CH_Enable+0x18>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	4a1a      	ldr	r2, [pc, #104]	; (8007b00 <XMC_USIC_CH_Enable+0x7c>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d103      	bne.n	8007aa4 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 8007a9c:	4819      	ldr	r0, [pc, #100]	; (8007b04 <XMC_USIC_CH_Enable+0x80>)
 8007a9e:	f000 f8cd 	bl	8007c3c <XMC_USIC_Enable>
 8007aa2:	e016      	b.n	8007ad2 <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	4a18      	ldr	r2, [pc, #96]	; (8007b08 <XMC_USIC_CH_Enable+0x84>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d003      	beq.n	8007ab4 <XMC_USIC_CH_Enable+0x30>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	4a17      	ldr	r2, [pc, #92]	; (8007b0c <XMC_USIC_CH_Enable+0x88>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d103      	bne.n	8007abc <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 8007ab4:	4816      	ldr	r0, [pc, #88]	; (8007b10 <XMC_USIC_CH_Enable+0x8c>)
 8007ab6:	f000 f8c1 	bl	8007c3c <XMC_USIC_Enable>
 8007aba:	e00a      	b.n	8007ad2 <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	4a15      	ldr	r2, [pc, #84]	; (8007b14 <XMC_USIC_CH_Enable+0x90>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d003      	beq.n	8007acc <XMC_USIC_CH_Enable+0x48>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	4a14      	ldr	r2, [pc, #80]	; (8007b18 <XMC_USIC_CH_Enable+0x94>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d102      	bne.n	8007ad2 <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 8007acc:	4813      	ldr	r0, [pc, #76]	; (8007b1c <XMC_USIC_CH_Enable+0x98>)
 8007ace:	f000 f8b5 	bl	8007c3c <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2203      	movs	r2, #3
 8007ad6:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8007ad8:	bf00      	nop
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	68db      	ldr	r3, [r3, #12]
 8007ade:	f003 0301 	and.w	r3, r3, #1
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d0f9      	beq.n	8007ada <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aea:	f023 020f 	bic.w	r2, r3, #15
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	641a      	str	r2, [r3, #64]	; 0x40
}
 8007af2:	bf00      	nop
 8007af4:	3708      	adds	r7, #8
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	40030000 	.word	0x40030000
 8007b00:	40030200 	.word	0x40030200
 8007b04:	40030008 	.word	0x40030008
 8007b08:	48020000 	.word	0x48020000
 8007b0c:	48020200 	.word	0x48020200
 8007b10:	48020008 	.word	0x48020008
 8007b14:	48024000 	.word	0x48024000
 8007b18:	48024200 	.word	0x48024200
 8007b1c:	48024008 	.word	0x48024008

08007b20 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b08e      	sub	sp, #56	; 0x38
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	2b63      	cmp	r3, #99	; 0x63
 8007b30:	d95a      	bls.n	8007be8 <XMC_USIC_CH_SetBaudrate+0xc8>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d057      	beq.n	8007be8 <XMC_USIC_CH_SetBaudrate+0xc8>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8007b38:	f000 fa8c 	bl	8008054 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	4b2f      	ldr	r3, [pc, #188]	; (8007bfc <XMC_USIC_CH_SetBaudrate+0xdc>)
 8007b40:	fba3 2302 	umull	r2, r3, r3, r2
 8007b44:	095b      	lsrs	r3, r3, #5
 8007b46:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	4a2c      	ldr	r2, [pc, #176]	; (8007bfc <XMC_USIC_CH_SetBaudrate+0xdc>)
 8007b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b50:	095b      	lsrs	r3, r3, #5
 8007b52:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
 8007b54:	2301      	movs	r3, #1
 8007b56:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 8007b5c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8007b60:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8007b62:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8007b66:	633b      	str	r3, [r7, #48]	; 0x30
 8007b68:	e022      	b.n	8007bb0 <XMC_USIC_CH_SetBaudrate+0x90>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 8007b6a:	6a3b      	ldr	r3, [r7, #32]
 8007b6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b6e:	fb02 f203 	mul.w	r2, r2, r3
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	6879      	ldr	r1, [r7, #4]
 8007b76:	fb01 f303 	mul.w	r3, r1, r3
 8007b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b7e:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	0a9b      	lsrs	r3, r3, #10
 8007b84:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b8c:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b94:	d209      	bcs.n	8007baa <XMC_USIC_CH_SetBaudrate+0x8a>
 8007b96:	697a      	ldr	r2, [r7, #20]
 8007b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d205      	bcs.n	8007baa <XMC_USIC_CH_SetBaudrate+0x8a>
      {
        pdiv_frac_min = pdiv_frac;
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 8007ba2:	69bb      	ldr	r3, [r7, #24]
 8007ba4:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 8007ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba8:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8007baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bac:	3b01      	subs	r3, #1
 8007bae:	633b      	str	r3, [r7, #48]	; 0x30
 8007bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1d9      	bne.n	8007b6a <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 8007bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb8:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    /*FHTW: BRG.SCLKCFG[31:30]-Bit (Bit 31:30 auf 01 setzen, damit mit positiver SCLK die Daten (MOSI) anliegen)*/
    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	695a      	ldr	r2, [r3, #20]
 8007bc4:	4b0e      	ldr	r3, [pc, #56]	; (8007c00 <XMC_USIC_CH_SetBaudrate+0xe0>)
 8007bc6:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	3a01      	subs	r2, #1
 8007bcc:	0292      	lsls	r2, r2, #10

    /*FHTW: BRG.SCLKCFG[31:30]-Bit (Bit 31:30 auf 01 setzen, damit mit positiver SCLK die Daten (MOSI) anliegen)*/
    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8007bce:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos) |
 8007bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	041b      	lsls	r3, r3, #16
    /*FHTW: BRG.SCLKCFG[31:30]-Bit (Bit 31:30 auf 01 setzen, damit mit positiver SCLK die Daten (MOSI) anliegen)*/
    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8007bd6:	4313      	orrs	r3, r2
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos) |
 8007bd8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    /*FHTW: BRG.SCLKCFG[31:30]-Bit (Bit 31:30 auf 01 setzen, damit mit positiver SCLK die Daten (MOSI) anliegen)*/
    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos) |
				   (0x1UL<<USIC_CH_BRG_SCLKCFG_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 8007be0:	2300      	movs	r3, #0
 8007be2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007be6:	e002      	b.n	8007bee <XMC_USIC_CH_SetBaudrate+0xce>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  return status;
 8007bee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3738      	adds	r7, #56	; 0x38
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	51eb851f 	.word	0x51eb851f
 8007c00:	fc0080ef 	.word	0xfc0080ef

08007c04 <XMC_USIC_CH_SetInterruptNodePointer>:
}

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b085      	sub	sp, #20
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	607a      	str	r2, [r7, #4]
 8007c10:	72fb      	strb	r3, [r7, #11]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	699a      	ldr	r2, [r3, #24]
 8007c16:	7afb      	ldrb	r3, [r7, #11]
 8007c18:	2107      	movs	r1, #7
 8007c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8007c1e:	43db      	mvns	r3, r3
 8007c20:	401a      	ands	r2, r3
                  (service_request << (uint32_t)interrupt_node));
 8007c22:	7afb      	ldrb	r3, [r7, #11]
 8007c24:	6879      	ldr	r1, [r7, #4]
 8007c26:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8007c2a:	431a      	orrs	r2, r3
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	619a      	str	r2, [r3, #24]
                  (service_request << (uint32_t)interrupt_node));
}
 8007c30:	bf00      	nop
 8007c32:	3714      	adds	r7, #20
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bc80      	pop	{r7}
 8007c38:	4770      	bx	lr
 8007c3a:	bf00      	nop

08007c3c <XMC_USIC_Enable>:
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
                   (service_request << (uint32_t)interrupt_node));
}

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	4a0d      	ldr	r2, [pc, #52]	; (8007c7c <XMC_USIC_Enable+0x40>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d104      	bne.n	8007c56 <XMC_USIC_Enable+0x1a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8007c4c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007c50:	f000 f9da 	bl	8008008 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8007c54:	e00e      	b.n	8007c74 <XMC_USIC_Enable+0x38>
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
#endif	
  }
#if defined(USIC1)  
  else if (usic == USIC1)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4a09      	ldr	r2, [pc, #36]	; (8007c80 <XMC_USIC_Enable+0x44>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d103      	bne.n	8007c66 <XMC_USIC_Enable+0x2a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
#endif	
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 8007c5e:	4809      	ldr	r0, [pc, #36]	; (8007c84 <XMC_USIC_Enable+0x48>)
 8007c60:	f000 f9d2 	bl	8008008 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8007c64:	e006      	b.n	8007c74 <XMC_USIC_Enable+0x38>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
#endif	
  }
#endif  
#if defined(USIC2)  
  else if (usic == USIC2)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	4a07      	ldr	r2, [pc, #28]	; (8007c88 <XMC_USIC_Enable+0x4c>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d102      	bne.n	8007c74 <XMC_USIC_Enable+0x38>
  {
#if defined(CLOCK_GATING_SUPPORTED) 
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 8007c6e:	4807      	ldr	r0, [pc, #28]	; (8007c8c <XMC_USIC_Enable+0x50>)
 8007c70:	f000 f9ca 	bl	8008008 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8007c74:	bf00      	nop
 8007c76:	3708      	adds	r7, #8
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	40030008 	.word	0x40030008
 8007c80:	48020008 	.word	0x48020008
 8007c84:	10000080 	.word	0x10000080
 8007c88:	48024008 	.word	0x48024008
 8007c8c:	10000100 	.word	0x10000100

08007c90 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b083      	sub	sp, #12
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	60da      	str	r2, [r3, #12]
}
 8007ca4:	bf00      	nop
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bc80      	pop	{r7}
 8007cac:	4770      	bx	lr
 8007cae:	bf00      	nop

08007cb0 <XMC_CCU4_lDeassertReset>:

  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  switch ((uint32_t)module)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4a12      	ldr	r2, [pc, #72]	; (8007d04 <XMC_CCU4_lDeassertReset+0x54>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d011      	beq.n	8007ce4 <XMC_CCU4_lDeassertReset+0x34>
 8007cc0:	4a10      	ldr	r2, [pc, #64]	; (8007d04 <XMC_CCU4_lDeassertReset+0x54>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d803      	bhi.n	8007cce <XMC_CCU4_lDeassertReset+0x1e>
 8007cc6:	4a10      	ldr	r2, [pc, #64]	; (8007d08 <XMC_CCU4_lDeassertReset+0x58>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d007      	beq.n	8007cdc <XMC_CCU4_lDeassertReset+0x2c>
      break;
#endif

    default:
      XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
      break;   
 8007ccc:	e016      	b.n	8007cfc <XMC_CCU4_lDeassertReset+0x4c>
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
  switch ((uint32_t)module)
 8007cce:	4a0f      	ldr	r2, [pc, #60]	; (8007d0c <XMC_CCU4_lDeassertReset+0x5c>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d00b      	beq.n	8007cec <XMC_CCU4_lDeassertReset+0x3c>
 8007cd4:	4a0e      	ldr	r2, [pc, #56]	; (8007d10 <XMC_CCU4_lDeassertReset+0x60>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d00c      	beq.n	8007cf4 <XMC_CCU4_lDeassertReset+0x44>
      break;
#endif

    default:
      XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
      break;   
 8007cda:	e00f      	b.n	8007cfc <XMC_CCU4_lDeassertReset+0x4c>
__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
  switch ((uint32_t)module)
  {
    case (uint32_t)CCU40:
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8007cdc:	2004      	movs	r0, #4
 8007cde:	f000 f993 	bl	8008008 <XMC_SCU_RESET_DeassertPeripheralReset>
      break;
 8007ce2:	e00b      	b.n	8007cfc <XMC_CCU4_lDeassertReset+0x4c>
      
#if defined(CCU41)
    case (uint32_t)CCU41:
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8007ce4:	2008      	movs	r0, #8
 8007ce6:	f000 f98f 	bl	8008008 <XMC_SCU_RESET_DeassertPeripheralReset>
      break;
 8007cea:	e007      	b.n	8007cfc <XMC_CCU4_lDeassertReset+0x4c>
#endif

#if defined(CCU42)
    case (uint32_t)CCU42:
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8007cec:	2010      	movs	r0, #16
 8007cee:	f000 f98b 	bl	8008008 <XMC_SCU_RESET_DeassertPeripheralReset>
      break;
 8007cf2:	e003      	b.n	8007cfc <XMC_CCU4_lDeassertReset+0x4c>
#endif

#if defined(CCU43)
    case (uint32_t)CCU43:
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8007cf4:	4807      	ldr	r0, [pc, #28]	; (8007d14 <XMC_CCU4_lDeassertReset+0x64>)
 8007cf6:	f000 f987 	bl	8008008 <XMC_SCU_RESET_DeassertPeripheralReset>
      break;
 8007cfa:	bf00      	nop
    default:
      XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
      break;   

  }
}
 8007cfc:	bf00      	nop
 8007cfe:	3708      	adds	r7, #8
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}
 8007d04:	40010000 	.word	0x40010000
 8007d08:	4000c000 	.word	0x4000c000
 8007d0c:	40014000 	.word	0x40014000
 8007d10:	48004000 	.word	0x48004000
 8007d14:	10000001 	.word	0x10000001

08007d18 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8007d20:	2010      	movs	r0, #16
 8007d22:	f000 f9a7 	bl	8008074 <XMC_SCU_CLOCK_EnableClock>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f7ff ffc2 	bl	8007cb0 <XMC_CCU4_lDeassertReset>
#endif
}
 8007d2c:	bf00      	nop
 8007d2e:	3708      	adds	r7, #8
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f7ff ffe9 	bl	8007d18 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f7ff ffa2 	bl	8007c90 <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007d58:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8007d5a:	78fb      	ldrb	r3, [r7, #3]
 8007d5c:	039b      	lsls	r3, r3, #14
 8007d5e:	68fa      	ldr	r2, [r7, #12]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	68fa      	ldr	r2, [r7, #12]
 8007d68:	601a      	str	r2, [r3, #0]
}
 8007d6a:	bf00      	nop
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop

08007d74 <XMC_CCU4_SetModuleClock>:

/* API to select CCU4 module clock */
void XMC_CCU4_SetModuleClock(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_CLOCK_t clock)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b085      	sub	sp, #20
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	70fb      	strb	r3, [r7, #3]
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Clock", XMC_CCU4_SLICE_CHECK_CLOCK(clock));

  gctrl = module->GCTRL;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_PCIS_Msk);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007d8c:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) clock) << CCU4_GCTRL_PCIS_Pos;
 8007d8e:	78fb      	ldrb	r3, [r7, #3]
 8007d90:	011b      	lsls	r3, r3, #4
 8007d92:	68fa      	ldr	r2, [r7, #12]
 8007d94:	4313      	orrs	r3, r2
 8007d96:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	601a      	str	r2, [r3, #0]
}
 8007d9e:	bf00      	nop
 8007da0:	3714      	adds	r7, #20
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bc80      	pop	{r7}
 8007da6:	4770      	bx	lr

08007da8 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
		                            const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	795b      	ldrb	r3, [r3, #5]
 8007dbe:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	051a      	lsls	r2, r3, #20
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	791b      	ldrb	r3, [r3, #4]
 8007dce:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	795b      	ldrb	r3, [r3, #5]
 8007dde:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	461a      	mov	r2, r3
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	795b      	ldrb	r3, [r3, #5]
 8007dee:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	461a      	mov	r2, r3
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	791b      	ldrb	r3, [r3, #4]
 8007dfe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	461a      	mov	r2, r3
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007e0a:	bf00      	nop
 8007e0c:	370c      	adds	r7, #12
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bc80      	pop	{r7}
 8007e12:	4770      	bx	lr

08007e14 <XMC_CCU4_SLICE_StartConfig>:

/* API to configure the Start trigger function of a slice */
void XMC_CCU4_SLICE_StartConfig(XMC_CCU4_SLICE_t *const slice,
		                        const XMC_CCU4_SLICE_EVENT_t event,
                                const XMC_CCU4_SLICE_START_MODE_t start_mode)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b085      	sub	sp, #20
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	70fb      	strb	r3, [r7, #3]
 8007e20:	4613      	mov	r3, r2
 8007e22:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Start Mode", 
             ((start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR) ||\
		          (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START)));
  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	60bb      	str	r3, [r7, #8]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_STRTS_Msk);
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	f023 0303 	bic.w	r3, r3, #3
 8007e30:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_STRTS_Pos;
 8007e32:	78fb      	ldrb	r3, [r7, #3]
 8007e34:	68ba      	ldr	r2, [r7, #8]
 8007e36:	4313      	orrs	r3, r2
 8007e38:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	68ba      	ldr	r2, [r7, #8]
 8007e3e:	605a      	str	r2, [r3, #4]
  
  tc  = slice->TC;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	695b      	ldr	r3, [r3, #20]
 8007e44:	60fb      	str	r3, [r7, #12]
  /* Next, Configure the start mode */
  if (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR)
 8007e46:	78bb      	ldrb	r3, [r7, #2]
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d104      	bne.n	8007e56 <XMC_CCU4_SLICE_StartConfig+0x42>
  {
    tc |= (uint32_t)CCU4_CC4_TC_STRM_Msk;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007e52:	60fb      	str	r3, [r7, #12]
 8007e54:	e003      	b.n	8007e5e <XMC_CCU4_SLICE_StartConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t)CCU4_CC4_TC_STRM_Msk);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e5c:	60fb      	str	r3, [r7, #12]
  }
  
  slice->TC = tc;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	615a      	str	r2, [r3, #20]
}
 8007e64:	bf00      	nop
 8007e66:	3714      	adds	r7, #20
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bc80      	pop	{r7}
 8007e6c:	4770      	bx	lr
 8007e6e:	bf00      	nop

08007e70 <XMC_CCU4_SLICE_ConfigureEvent>:

/* API to configure a slice trigger event */
void XMC_CCU4_SLICE_ConfigureEvent(XMC_CCU4_SLICE_t *const slice,
		                               const XMC_CCU4_SLICE_EVENT_t event,
                                   const XMC_CCU4_SLICE_EVENT_CONFIG_t *const config)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b089      	sub	sp, #36	; 0x24
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	460b      	mov	r3, r1
 8007e7a:	607a      	str	r2, [r7, #4]
 8007e7c:	72fb      	strb	r3, [r7, #11]
             ((config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
              (config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Debounce Period", 
             XMC_CCU4_SLICE_CHECK_EVENT_FILTER(config->duration));
  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
 8007e7e:	7afb      	ldrb	r3, [r7, #11]
 8007e80:	3b01      	subs	r3, #1
 8007e82:	77fb      	strb	r3, [r7, #31]
  ins |= ((uint32_t) config->mapped_input) << pos;

  slice->INS1 = ins;

#else
  ins = slice->INS;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	61bb      	str	r3, [r7, #24]
  
  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU4_CC4_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
 8007e8a:	7ffb      	ldrb	r3, [r7, #31]
 8007e8c:	005b      	lsls	r3, r3, #1
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	3310      	adds	r3, #16
 8007e92:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 8007e94:	7dfb      	ldrb	r3, [r7, #23]
 8007e96:	2203      	movs	r2, #3
 8007e98:	fa02 f303 	lsl.w	r3, r2, r3
 8007e9c:	43db      	mvns	r3, r3
 8007e9e:	69ba      	ldr	r2, [r7, #24]
 8007ea0:	4013      	ands	r3, r2
 8007ea2:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->edge) << pos;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	785b      	ldrb	r3, [r3, #1]
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	7dfb      	ldrb	r3, [r7, #23]
 8007eac:	fa02 f303 	lsl.w	r3, r2, r3
 8007eb0:	69ba      	ldr	r2, [r7, #24]
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	61bb      	str	r3, [r7, #24]
  
  /* Next, the level */
  pos = ((uint8_t) CCU4_CC4_INS_EV0LM_Pos) + offset;
 8007eb6:	7ffb      	ldrb	r3, [r7, #31]
 8007eb8:	3316      	adds	r3, #22
 8007eba:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 8007ebc:	7dfb      	ldrb	r3, [r7, #23]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec4:	43db      	mvns	r3, r3
 8007ec6:	69ba      	ldr	r2, [r7, #24]
 8007ec8:	4013      	ands	r3, r2
 8007eca:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->level) << pos;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	789b      	ldrb	r3, [r3, #2]
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	7dfb      	ldrb	r3, [r7, #23]
 8007ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed8:	69ba      	ldr	r2, [r7, #24]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	61bb      	str	r3, [r7, #24]
  
  /* Next, the debounce filter */
  pos = ((uint8_t) CCU4_CC4_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
 8007ede:	7ffb      	ldrb	r3, [r7, #31]
 8007ee0:	005b      	lsls	r3, r3, #1
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	3319      	adds	r3, #25
 8007ee6:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 8007ee8:	7dfb      	ldrb	r3, [r7, #23]
 8007eea:	2203      	movs	r2, #3
 8007eec:	fa02 f303 	lsl.w	r3, r2, r3
 8007ef0:	43db      	mvns	r3, r3
 8007ef2:	69ba      	ldr	r2, [r7, #24]
 8007ef4:	4013      	ands	r3, r2
 8007ef6:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->duration) << pos;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	78db      	ldrb	r3, [r3, #3]
 8007efc:	461a      	mov	r2, r3
 8007efe:	7dfb      	ldrb	r3, [r7, #23]
 8007f00:	fa02 f303 	lsl.w	r3, r2, r3
 8007f04:	69ba      	ldr	r2, [r7, #24]
 8007f06:	4313      	orrs	r3, r2
 8007f08:	61bb      	str	r3, [r7, #24]

  /* Finally the input */
  pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
 8007f0a:	7ffb      	ldrb	r3, [r7, #31]
 8007f0c:	009b      	lsls	r3, r3, #2
 8007f0e:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 8007f10:	7dfb      	ldrb	r3, [r7, #23]
 8007f12:	220f      	movs	r2, #15
 8007f14:	fa02 f303 	lsl.w	r3, r2, r3
 8007f18:	43db      	mvns	r3, r3
 8007f1a:	69ba      	ldr	r2, [r7, #24]
 8007f1c:	4013      	ands	r3, r2
 8007f1e:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->mapped_input) << pos;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	461a      	mov	r2, r3
 8007f26:	7dfb      	ldrb	r3, [r7, #23]
 8007f28:	fa02 f303 	lsl.w	r3, r2, r3
 8007f2c:	69ba      	ldr	r2, [r7, #24]
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	61bb      	str	r3, [r7, #24]

  slice->INS = ins;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	69ba      	ldr	r2, [r7, #24]
 8007f36:	601a      	str	r2, [r3, #0]
#endif
}
 8007f38:	bf00      	nop
 8007f3a:	3724      	adds	r7, #36	; 0x24
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bc80      	pop	{r7}
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop

08007f44 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b087      	sub	sp, #28
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	70fb      	strb	r3, [r7, #3]
 8007f50:	4613      	mov	r3, r2
 8007f52:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007f5a:	60fb      	str	r3, [r7, #12]
  
  switch(event)
 8007f5c:	78fb      	ldrb	r3, [r7, #3]
 8007f5e:	2b09      	cmp	r3, #9
 8007f60:	d82c      	bhi.n	8007fbc <XMC_CCU4_SLICE_SetInterruptNode+0x78>
 8007f62:	a201      	add	r2, pc, #4	; (adr r2, 8007f68 <XMC_CCU4_SLICE_SetInterruptNode+0x24>)
 8007f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f68:	08007f91 	.word	0x08007f91
 8007f6c:	08007f91 	.word	0x08007f91
 8007f70:	08007f9b 	.word	0x08007f9b
 8007f74:	08007f9b 	.word	0x08007f9b
 8007f78:	08007fbd 	.word	0x08007fbd
 8007f7c:	08007fbd 	.word	0x08007fbd
 8007f80:	08007fbd 	.word	0x08007fbd
 8007f84:	08007fbd 	.word	0x08007fbd
 8007f88:	08007fa5 	.word	0x08007fa5
 8007f8c:	08007fb1 	.word	0x08007fb1
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 8007f90:	2303      	movs	r3, #3
 8007f92:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 8007f94:	2300      	movs	r3, #0
 8007f96:	617b      	str	r3, [r7, #20]
      break;
 8007f98:	e016      	b.n	8007fc8 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 8007f9a:	230c      	movs	r3, #12
 8007f9c:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 8007f9e:	2302      	movs	r3, #2
 8007fa0:	617b      	str	r3, [r7, #20]
      break;
 8007fa2:	e011      	b.n	8007fc8 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 8007fa4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007fa8:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 8007faa:	2308      	movs	r3, #8
 8007fac:	617b      	str	r3, [r7, #20]
      break;
 8007fae:	e00b      	b.n	8007fc8 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 8007fb0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007fb4:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 8007fb6:	230a      	movs	r3, #10
 8007fb8:	617b      	str	r3, [r7, #20]
      break;
 8007fba:	e005      	b.n	8007fc8 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 8007fbc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8007fc0:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 8007fc2:	230c      	movs	r3, #12
 8007fc4:	617b      	str	r3, [r7, #20]
      break;
 8007fc6:	bf00      	nop
  }
  
  srs &= ~mask; 
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	43db      	mvns	r3, r3
 8007fcc:	68fa      	ldr	r2, [r7, #12]
 8007fce:	4013      	ands	r3, r2
 8007fd0:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 8007fd2:	78ba      	ldrb	r2, [r7, #2]
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007fda:	68fa      	ldr	r2, [r7, #12]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	68fa      	ldr	r2, [r7, #12]
 8007fe4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8007fe8:	bf00      	nop
 8007fea:	371c      	adds	r7, #28
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bc80      	pop	{r7}
 8007ff0:	4770      	bx	lr
 8007ff2:	bf00      	nop

08007ff4 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ff8:	4b02      	ldr	r3, [pc, #8]	; (8008004 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x10>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bc80      	pop	{r7}
 8008002:	4770      	bx	lr
 8008004:	20000030 	.word	0x20000030

08008008 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) |= (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	0f1b      	lsrs	r3, r3, #28
 8008014:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800801c:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) |= (uint32_t)mask;
 800801e:	68fa      	ldr	r2, [r7, #12]
 8008020:	4613      	mov	r3, r2
 8008022:	005b      	lsls	r3, r3, #1
 8008024:	4413      	add	r3, r2
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	4a09      	ldr	r2, [pc, #36]	; (8008050 <XMC_SCU_RESET_DeassertPeripheralReset+0x48>)
 800802a:	441a      	add	r2, r3
 800802c:	68f9      	ldr	r1, [r7, #12]
 800802e:	460b      	mov	r3, r1
 8008030:	005b      	lsls	r3, r3, #1
 8008032:	440b      	add	r3, r1
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	4619      	mov	r1, r3
 8008038:	4b05      	ldr	r3, [pc, #20]	; (8008050 <XMC_SCU_RESET_DeassertPeripheralReset+0x48>)
 800803a:	440b      	add	r3, r1
 800803c:	6819      	ldr	r1, [r3, #0]
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	430b      	orrs	r3, r1
 8008042:	6013      	str	r3, [r2, #0]
}
 8008044:	bf00      	nop
 8008046:	3714      	adds	r7, #20
 8008048:	46bd      	mov	sp, r7
 800804a:	bc80      	pop	{r7}
 800804c:	4770      	bx	lr
 800804e:	bf00      	nop
 8008050:	50004414 	.word	0x50004414

08008054 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8008058:	f7ff ffcc 	bl	8007ff4 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 800805c:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 800805e:	4b04      	ldr	r3, [pc, #16]	; (8008070 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8008060:	695b      	ldr	r3, [r3, #20]
 8008062:	f003 0301 	and.w	r3, r3, #1
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8008066:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 800806a:	4618      	mov	r0, r3
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	50004600 	.word	0x50004600

08008074 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8008074:	b480      	push	{r7}
 8008076:	b083      	sub	sp, #12
 8008078:	af00      	add	r7, sp, #0
 800807a:	4603      	mov	r3, r0
 800807c:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 800807e:	4a04      	ldr	r2, [pc, #16]	; (8008090 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8008080:	79fb      	ldrb	r3, [r7, #7]
 8008082:	6053      	str	r3, [r2, #4]
}
 8008084:	bf00      	nop
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	bc80      	pop	{r7}
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	50004600 	.word	0x50004600

08008094 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80080a6:	b2db      	uxtb	r3, r3
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	370c      	adds	r7, #12
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bc80      	pop	{r7}
 80080b0:	4770      	bx	lr
 80080b2:	bf00      	nop

080080b4 <XMC_USIC_CH_GetReceiveBufferStatus>:
 * can be read from RBUF.
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080c0:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bc80      	pop	{r7}
 80080cc:	4770      	bx	lr
 80080ce:	bf00      	nop

080080d0 <XMC_SPI_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_GetStatusFlag()
 */
__STATIC_INLINE void XMC_SPI_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	431a      	orrs	r2, r3
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80080e6:	bf00      	nop
 80080e8:	370c      	adds	r7, #12
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bc80      	pop	{r7}
 80080ee:	4770      	bx	lr

080080f0 <XMC_SPI_CH_Init>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/
 
/* Initializes the selected SPI channel with the config structure. */
void XMC_SPI_CH_Init(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
  XMC_USIC_CH_Enable(channel);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f7ff fcc2 	bl	8007a84 <XMC_USIC_CH_Enable>
  
  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	791b      	ldrb	r3, [r3, #4]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d106      	bne.n	8008116 <XMC_SPI_CH_Init+0x26>
  {
    /* Configure baud rate */
    (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING); 
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	2202      	movs	r2, #2
 800810e:	4619      	mov	r1, r3
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f7ff fd05 	bl	8007b20 <XMC_USIC_CH_SetBaudrate>
  
  /* Configuration of USIC Shift Control */
  /* Transmission Mode (TRM) = 1  */
  /* Passive Data Level (PDL) = 1 */
  /* FHTW: SDIR-Bit (Bit 0 of SCTR) to 1 in order to send MSB first */
  channel->SCTR = USIC_CH_SCTR_PDL_Msk |
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4a0f      	ldr	r2, [pc, #60]	; (8008158 <XMC_SPI_CH_Init+0x68>)
 800811a:	635a      	str	r2, [r3, #52]	; 0x34
				  (0x1UL << USIC_CH_SCTR_SDIR_Pos);

  /* Configuration of USIC Transmit Control/Status Register */
  /* TBUF Data Enable (TDEN) = 1 */
  /* TBUF Data Single Shot Mode (TDSSM) = 1 */
  channel->TCSR = (uint32_t)(USIC_CH_TCSR_HPCMD_Msk |
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 8008122:	639a      	str	r2, [r3, #56]	; 0x38
                  (0x01UL  << USIC_CH_TCSR_TDEN_Pos) |
                  USIC_CH_TCSR_TDSSM_Msk);

  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	791b      	ldrb	r3, [r3, #4]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d107      	bne.n	800813c <XMC_SPI_CH_Init+0x4c>
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
                           USIC_CH_PCR_SSCMode_SELCTR_Msk |
                           (uint32_t)config->selo_inversion |
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	795b      	ldrb	r3, [r3, #5]
                  USIC_CH_TCSR_TDSSM_Msk);

  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
 8008130:	f043 030b 	orr.w	r3, r3, #11
 8008134:	b2db      	uxtb	r3, r3
 8008136:	461a      	mov	r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	63da      	str	r2, [r3, #60]	; 0x3c
                           (uint32_t)config->selo_inversion |
                           USIC_CH_PCR_SSCMode_FEM_Msk);
  }

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f04f 32ff 	mov.w	r2, #4294967295
 8008142:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	88db      	ldrh	r3, [r3, #6]
 8008148:	461a      	mov	r2, r3
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800814e:	bf00      	nop
 8008150:	3708      	adds	r7, #8
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
 8008156:	bf00      	nop
 8008158:	073f0103 	.word	0x073f0103

0800815c <XMC_SPI_CH_Transmit>:
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SELO_Msk;
}

/* Puts the data into FIFO if FIFO mode is enabled or else into standard buffers, by setting the proper mode. */
void XMC_SPI_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data, const XMC_SPI_CH_MODE_t mode)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	460b      	mov	r3, r1
 8008166:	807b      	strh	r3, [r7, #2]
 8008168:	4613      	mov	r3, r2
 800816a:	707b      	strb	r3, [r7, #1]

  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008170:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
                 (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 8008174:	787b      	ldrb	r3, [r7, #1]
 8008176:	019b      	lsls	r3, r3, #6
 8008178:	b2db      	uxtb	r3, r3

/* Puts the data into FIFO if FIFO mode is enabled or else into standard buffers, by setting the proper mode. */
void XMC_SPI_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data, const XMC_SPI_CH_MODE_t mode)
{

  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 800817a:	431a      	orrs	r2, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	641a      	str	r2, [r3, #64]	; 0x40
                 (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);


  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008186:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800818a:	2b00      	cmp	r3, #0
 800818c:	d112      	bne.n	80081b4 <XMC_SPI_CH_Transmit+0x58>
  {
    while((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(channel) == (uint32_t)XMC_USIC_CH_TBUF_STATUS_BUSY)
 800818e:	bf00      	nop
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f7ff ff7f 	bl	8008094 <XMC_USIC_CH_GetTransmitBufferStatus>
 8008196:	4603      	mov	r3, r0
 8008198:	2b80      	cmp	r3, #128	; 0x80
 800819a:	d0f9      	beq.n	8008190 <XMC_SPI_CH_Transmit+0x34>
    {
    }
  
    XMC_SPI_CH_ClearStatusFlag(channel, (uint32_t)XMC_SPI_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 800819c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f7ff ff95 	bl	80080d0 <XMC_SPI_CH_ClearStatusFlag>
  
    channel->TBUF[mode] = data;
 80081a6:	787a      	ldrb	r2, [r7, #1]
 80081a8:	8879      	ldrh	r1, [r7, #2]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	3220      	adds	r2, #32
 80081ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  else
  {
    channel->IN[mode] = data;
  }
}
 80081b2:	e005      	b.n	80081c0 <XMC_SPI_CH_Transmit+0x64>
  
    channel->TBUF[mode] = data;
  }
  else
  {
    channel->IN[mode] = data;
 80081b4:	787a      	ldrb	r2, [r7, #1]
 80081b6:	8879      	ldrh	r1, [r7, #2]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	3260      	adds	r2, #96	; 0x60
 80081bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
}
 80081c0:	bf00      	nop
 80081c2:	3708      	adds	r7, #8
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <XMC_SPI_CH_GetReceivedData>:

/* Reads the data from the buffers based on the FIFO mode selection. */
uint16_t XMC_SPI_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80081d6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d112      	bne.n	8008204 <XMC_SPI_CH_GetReceivedData+0x3c>
  {
	/*FHTW: check ReceiveBuffer Status added */
	while(((uint32_t)XMC_USIC_CH_GetReceiveBufferStatus(channel) != (uint32_t)XMC_USIC_CH_RBUF_STATUS_DATA_VALID1)&&((uint32_t)XMC_USIC_CH_GetReceiveBufferStatus(channel) != (uint32_t)XMC_USIC_CH_RBUF_STATUS_DATA_VALID0))
 80081de:	bf00      	nop
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f7ff ff67 	bl	80080b4 <XMC_USIC_CH_GetReceiveBufferStatus>
 80081e6:	4603      	mov	r3, r0
 80081e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081ec:	d006      	beq.n	80081fc <XMC_SPI_CH_GetReceivedData+0x34>
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f7ff ff60 	bl	80080b4 <XMC_USIC_CH_GetReceiveBufferStatus>
 80081f4:	4603      	mov	r3, r0
 80081f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081fa:	d1f1      	bne.n	80081e0 <XMC_SPI_CH_GetReceivedData+0x18>
	{
	}
    retval = (uint16_t)channel->RBUF;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008200:	81fb      	strh	r3, [r7, #14]
 8008202:	e003      	b.n	800820c <XMC_SPI_CH_GetReceivedData+0x44>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800820a:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 800820c:	89fb      	ldrh	r3, [r7, #14]
}
 800820e:	4618      	mov	r0, r3
 8008210:	3710      	adds	r7, #16
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop

08008218 <XMC_SPI_CH_EnableEvent>:

  return status;
}

void XMC_SPI_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8008218:	b480      	push	{r7}
 800821a:	b083      	sub	sp, #12
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  channel->CCR |= (event&0x1fc00U);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	f403 33fe 	and.w	r3, r3, #130048	; 0x1fc00
 800822c:	431a      	orrs	r2, r3
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_SSCMode |= ((event << 13U) & 0xe000U);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	035b      	lsls	r3, r3, #13
 800823a:	b29b      	uxth	r3, r3
 800823c:	431a      	orrs	r2, r3
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008242:	bf00      	nop
 8008244:	370c      	adds	r7, #12
 8008246:	46bd      	mov	sp, r7
 8008248:	bc80      	pop	{r7}
 800824a:	4770      	bx	lr

0800824c <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008258:	b2db      	uxtb	r3, r3
 800825a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800825e:	b2db      	uxtb	r3, r3
}
 8008260:	4618      	mov	r0, r3
 8008262:	370c      	adds	r7, #12
 8008264:	46bd      	mov	sp, r7
 8008266:	bc80      	pop	{r7}
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop

0800826c <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 800826c:	b480      	push	{r7}
 800826e:	b083      	sub	sp, #12
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	683a      	ldr	r2, [r7, #0]
 800827a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800827c:	bf00      	nop
 800827e:	370c      	adds	r7, #12
 8008280:	46bd      	mov	sp, r7
 8008282:	bc80      	pop	{r7}
 8008284:	4770      	bx	lr
 8008286:	bf00      	nop

08008288 <XMC_UART_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 8008292:	2310      	movs	r3, #16
 8008294:	60fb      	str	r3, [r7, #12]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f7ff fbf4 	bl	8007a84 <XMC_USIC_CH_Enable>
  
  if(config->oversampling != 0U)
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	79db      	ldrb	r3, [r3, #7]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d002      	beq.n	80082aa <XMC_UART_CH_Init+0x22>
  {
    oversampling = (uint32_t)config->oversampling;
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	79db      	ldrb	r3, [r3, #7]
 80082a8:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure baud rate */
  (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	68fa      	ldr	r2, [r7, #12]
 80082b0:	4619      	mov	r1, r3
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f7ff fc34 	bl	8007b20 <XMC_USIC_CH_SetBaudrate>
   * Configure the number of stop bits
   * Pulse length is set to 0 to have standard UART signaling, 
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	799b      	ldrb	r3, [r3, #6]
 80082bc:	3b01      	subs	r3, #1
 80082be:	005a      	lsls	r2, r3, #1
			             (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	085b      	lsrs	r3, r3, #1
 80082c4:	3301      	adds	r3, #1
 80082c6:	021b      	lsls	r3, r3, #8
   * Configure the number of stop bits
   * Pulse length is set to 0 to have standard UART signaling, 
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 80082c8:	4313      	orrs	r3, r2
 80082ca:	f043 0201 	orr.w	r2, r3, #1
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	791b      	ldrb	r3, [r3, #4]
 80082d6:	3b01      	subs	r3, #1
 80082d8:	061b      	lsls	r3, r3, #24
 80082da:	f443 7281 	orr.w	r2, r3, #258	; 0x102
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	635a      	str	r2, [r3, #52]	; 0x34
		              ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	795b      	ldrb	r3, [r3, #5]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d009      	beq.n	80082fe <XMC_UART_CH_Init+0x76>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	795b      	ldrb	r3, [r3, #5]
 80082f2:	3b01      	subs	r3, #1
 80082f4:	041b      	lsls	r3, r3, #16
 80082f6:	431a      	orrs	r2, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	635a      	str	r2, [r3, #52]	; 0x34
 80082fc:	e008      	b.n	8008310 <XMC_UART_CH_Init+0x88>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	791b      	ldrb	r3, [r3, #4]
 8008306:	3b01      	subs	r3, #1
 8008308:	041b      	lsls	r3, r3, #16
 800830a:	431a      	orrs	r2, r3
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8008316:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f04f 32ff 	mov.w	r2, #4294967295
 800831e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	891b      	ldrh	r3, [r3, #8]
 8008324:	461a      	mov	r2, r3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	641a      	str	r2, [r3, #64]	; 0x40
}
 800832a:	bf00      	nop
 800832c:	3710      	adds	r7, #16
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
 8008332:	bf00      	nop

08008334 <XMC_UART_CH_Transmit>:
  } 
  return status;
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	460b      	mov	r3, r1
 800833e:	807b      	strh	r3, [r7, #2]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008346:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800834a:	2b00      	cmp	r3, #0
 800834c:	d110      	bne.n	8008370 <XMC_UART_CH_Transmit+0x3c>
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 800834e:	bf00      	nop
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f7ff ff7b 	bl	800824c <XMC_USIC_CH_GetTransmitBufferStatus>
 8008356:	4603      	mov	r3, r0
 8008358:	2b80      	cmp	r3, #128	; 0x80
 800835a:	d0f9      	beq.n	8008350 <XMC_UART_CH_Transmit+0x1c>
    {
    }
  
    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 800835c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f7ff ff83 	bl	800826c <XMC_UART_CH_ClearStatusFlag>
  
    /*Transmit data */
    channel->TBUF[0U] = data;
 8008366:	887a      	ldrh	r2, [r7, #2]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = data;
  }
}
 800836e:	e003      	b.n	8008378 <XMC_UART_CH_Transmit+0x44>
    /*Transmit data */
    channel->TBUF[0U] = data;
  }
  else
  {
    channel->IN[0U] = data;
 8008370:	887a      	ldrh	r2, [r7, #2]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8008378:	bf00      	nop
 800837a:	3708      	adds	r7, #8
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <XMC_UART_CH_GetReceivedData>:

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8008380:	b480      	push	{r7}
 8008382:	b085      	sub	sp, #20
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800838e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008392:	2b00      	cmp	r3, #0
 8008394:	d103      	bne.n	800839e <XMC_UART_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800839a:	81fb      	strh	r3, [r7, #14]
 800839c:	e003      	b.n	80083a6 <XMC_UART_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80083a4:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 80083a6:	89fb      	ldrh	r3, [r7, #14]
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3714      	adds	r7, #20
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bc80      	pop	{r7}
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop

080083b4 <XMC_UART_CH_EnableEvent>:
  }
  return status;
}

void XMC_UART_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6039      	str	r1, [r7, #0]
  channel->CCR |= (event&0x1fc00U);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	f403 33fe 	and.w	r3, r3, #130048	; 0x1fc00
 80083c8:	431a      	orrs	r2, r3
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_ASCMode |= (event&0xf8U);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80083d8:	431a      	orrs	r2, r3
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80083de:	bf00      	nop
 80083e0:	370c      	adds	r7, #12
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bc80      	pop	{r7}
 80083e6:	4770      	bx	lr

080083e8 <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	460b      	mov	r3, r1
 80083f2:	70fb      	strb	r3, [r7, #3]
 80083f4:	4613      	mov	r3, r2
 80083f6:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 80083f8:	78fb      	ldrb	r3, [r7, #3]
 80083fa:	089b      	lsrs	r3, r3, #2
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	4618      	mov	r0, r3
 8008400:	78fb      	ldrb	r3, [r7, #3]
 8008402:	089b      	lsrs	r3, r3, #2
 8008404:	b2db      	uxtb	r3, r3
 8008406:	461a      	mov	r2, r3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	3204      	adds	r2, #4
 800840c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008410:	78fb      	ldrb	r3, [r7, #3]
 8008412:	f003 0303 	and.w	r3, r3, #3
 8008416:	00db      	lsls	r3, r3, #3
 8008418:	21f8      	movs	r1, #248	; 0xf8
 800841a:	fa01 f303 	lsl.w	r3, r1, r3
 800841e:	43db      	mvns	r3, r3
 8008420:	ea02 0103 	and.w	r1, r2, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	1d02      	adds	r2, r0, #4
 8008428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 800842c:	78fb      	ldrb	r3, [r7, #3]
 800842e:	089b      	lsrs	r3, r3, #2
 8008430:	b2db      	uxtb	r3, r3
 8008432:	4618      	mov	r0, r3
 8008434:	78fb      	ldrb	r3, [r7, #3]
 8008436:	089b      	lsrs	r3, r3, #2
 8008438:	b2db      	uxtb	r3, r3
 800843a:	461a      	mov	r2, r3
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	3204      	adds	r2, #4
 8008440:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008444:	78b9      	ldrb	r1, [r7, #2]
 8008446:	78fb      	ldrb	r3, [r7, #3]
 8008448:	f003 0303 	and.w	r3, r3, #3
 800844c:	00db      	lsls	r3, r3, #3
 800844e:	fa01 f303 	lsl.w	r3, r1, r3
 8008452:	ea42 0103 	orr.w	r1, r2, r3
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	1d02      	adds	r2, r0, #4
 800845a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800845e:	bf00      	nop
 8008460:	370c      	adds	r7, #12
 8008462:	46bd      	mov	sp, r7
 8008464:	bc80      	pop	{r7}
 8008466:	4770      	bx	lr

08008468 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8008468:	b480      	push	{r7}
 800846a:	b085      	sub	sp, #20
 800846c:	af00      	add	r7, sp, #0
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	460b      	mov	r3, r1
 8008472:	607a      	str	r2, [r7, #4]
 8008474:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 8008476:	7afb      	ldrb	r3, [r7, #11]
 8008478:	089b      	lsrs	r3, r3, #2
 800847a:	b2db      	uxtb	r3, r3
 800847c:	4618      	mov	r0, r3
 800847e:	7afb      	ldrb	r3, [r7, #11]
 8008480:	089b      	lsrs	r3, r3, #2
 8008482:	b2db      	uxtb	r3, r3
 8008484:	461a      	mov	r2, r3
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	3204      	adds	r2, #4
 800848a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800848e:	7afb      	ldrb	r3, [r7, #11]
 8008490:	f003 0303 	and.w	r3, r3, #3
 8008494:	00db      	lsls	r3, r3, #3
 8008496:	21f8      	movs	r1, #248	; 0xf8
 8008498:	fa01 f303 	lsl.w	r3, r1, r3
 800849c:	43db      	mvns	r3, r3
 800849e:	ea02 0103 	and.w	r1, r2, r3
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	1d02      	adds	r2, r0, #4
 80084a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80084ae:	7afb      	ldrb	r3, [r7, #11]
 80084b0:	005b      	lsls	r3, r3, #1
 80084b2:	2103      	movs	r1, #3
 80084b4:	fa01 f303 	lsl.w	r3, r1, r3
 80084b8:	43db      	mvns	r3, r3
 80084ba:	401a      	ands	r2, r3
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	4a37      	ldr	r2, [pc, #220]	; (80085a0 <XMC_GPIO_Init+0x138>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d003      	beq.n	80084d0 <XMC_GPIO_Init+0x68>
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	4a36      	ldr	r2, [pc, #216]	; (80085a4 <XMC_GPIO_Init+0x13c>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d10a      	bne.n	80084e6 <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80084d4:	7afb      	ldrb	r3, [r7, #11]
 80084d6:	2101      	movs	r1, #1
 80084d8:	fa01 f303 	lsl.w	r3, r1, r3
 80084dc:	43db      	mvns	r3, r3
 80084de:	401a      	ands	r2, r3
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	661a      	str	r2, [r3, #96]	; 0x60
 80084e4:	e03c      	b.n	8008560 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	685a      	ldr	r2, [r3, #4]
 80084ea:	7afb      	ldrb	r3, [r7, #11]
 80084ec:	409a      	lsls	r2, r3
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 80084f2:	7afb      	ldrb	r3, [r7, #11]
 80084f4:	08db      	lsrs	r3, r3, #3
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	4618      	mov	r0, r3
 80084fa:	7afb      	ldrb	r3, [r7, #11]
 80084fc:	08db      	lsrs	r3, r3, #3
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	461a      	mov	r2, r3
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	3210      	adds	r2, #16
 8008506:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800850a:	7afb      	ldrb	r3, [r7, #11]
 800850c:	f003 0307 	and.w	r3, r3, #7
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	2107      	movs	r1, #7
 8008514:	fa01 f303 	lsl.w	r3, r1, r3
 8008518:	43db      	mvns	r3, r3
 800851a:	ea02 0103 	and.w	r1, r2, r3
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f100 0210 	add.w	r2, r0, #16
 8008524:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8008528:	7afb      	ldrb	r3, [r7, #11]
 800852a:	08db      	lsrs	r3, r3, #3
 800852c:	b2db      	uxtb	r3, r3
 800852e:	4618      	mov	r0, r3
 8008530:	7afb      	ldrb	r3, [r7, #11]
 8008532:	08db      	lsrs	r3, r3, #3
 8008534:	b2db      	uxtb	r3, r3
 8008536:	461a      	mov	r2, r3
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	3210      	adds	r2, #16
 800853c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	7a1b      	ldrb	r3, [r3, #8]
 8008544:	4619      	mov	r1, r3
 8008546:	7afb      	ldrb	r3, [r7, #11]
 8008548:	f003 0307 	and.w	r3, r3, #7
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	fa01 f303 	lsl.w	r3, r1, r3
 8008552:	ea42 0103 	orr.w	r1, r2, r3
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f100 0210 	add.w	r2, r0, #16
 800855c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8008560:	7afb      	ldrb	r3, [r7, #11]
 8008562:	089b      	lsrs	r3, r3, #2
 8008564:	b2db      	uxtb	r3, r3
 8008566:	4618      	mov	r0, r3
 8008568:	7afb      	ldrb	r3, [r7, #11]
 800856a:	089b      	lsrs	r3, r3, #2
 800856c:	b2db      	uxtb	r3, r3
 800856e:	461a      	mov	r2, r3
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	3204      	adds	r2, #4
 8008574:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	4619      	mov	r1, r3
 800857e:	7afb      	ldrb	r3, [r7, #11]
 8008580:	f003 0303 	and.w	r3, r3, #3
 8008584:	00db      	lsls	r3, r3, #3
 8008586:	fa01 f303 	lsl.w	r3, r1, r3
 800858a:	ea42 0103 	orr.w	r1, r2, r3
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	1d02      	adds	r2, r0, #4
 8008592:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8008596:	bf00      	nop
 8008598:	3714      	adds	r7, #20
 800859a:	46bd      	mov	sp, r7
 800859c:	bc80      	pop	{r7}
 800859e:	4770      	bx	lr
 80085a0:	48028e00 	.word	0x48028e00
 80085a4:	48028f00 	.word	0x48028f00

080085a8 <Reset_Handler>:
    .section  .text.Reset_Handler
    .weak  Reset_Handler
    .type  Reset_Handler, %function
Reset_Handler:
                                            @ Disable Branch prediction.
    ldr r0,=PREF_PCON
 80085a8:	4817      	ldr	r0, [pc, #92]	; (8008608 <LoopForever+0x2>)
    ldr r1,[r0]
 80085aa:	6801      	ldr	r1, [r0, #0]
    orr r1,r1,#0x00010000
 80085ac:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
    str r1,[r0]
 80085b0:	6001      	str	r1, [r0, #0]

                                            @ Clear existing parity errors if any.
    ldr r0,=SCU_GCU_PEFLAG
 80085b2:	4816      	ldr	r0, [pc, #88]	; (800860c <LoopForever+0x6>)
    ldr r1,=0xFFFFFFFF
 80085b4:	f04f 31ff 	mov.w	r1, #4294967295
    str r1,[r0]
 80085b8:	6001      	str	r1, [r0, #0]

                                            @ Disable parity.
    ldr r0,=SCU_GCU_PEEN
 80085ba:	4815      	ldr	r0, [pc, #84]	; (8008610 <LoopForever+0xa>)
    mov r1,#0
 80085bc:	f04f 0100 	mov.w	r1, #0
    str r1,[R0]
 80085c0:	6001      	str	r1, [r0, #0]
    AND     R1,  R1, #(0x3FFFFFFF)          @ Clear the LSPEN and ASPEN bits
    STR     R1, [R0]
    ISB                                     @ Reset pipeline now the FPU is enabled
#endif

    LDR     R1, =0xE000ED14                 @ Load address to CCR register
 80085c2:	4914      	ldr	r1, [pc, #80]	; (8008614 <LoopForever+0xe>)
    LDR.W   R0, [R1, #0x0]
 80085c4:	f8d1 0000 	ldr.w	r0, [r1]
    BIC     R0,  R0, #0x8                   @ Enable unaligned memory access
 80085c8:	f020 0008 	bic.w	r0, r0, #8
    STR.W   R0, [R1, #0x0]
 80085cc:	f8c1 0000 	str.w	r0, [r1]

    ldr sp, =_estack                        @ set stack pointer.
 80085d0:	f8df d044 	ldr.w	sp, [pc, #68]	; 8008618 <LoopForever+0x12>

                                            @ a) copy .data section (Copy from ROM to RAM).
    movs r1, #0
 80085d4:	2100      	movs	r1, #0
    b LoopCopyDataInit
 80085d6:	e003      	b.n	80085e0 <LoopCopyDataInit>

080085d8 <CopyDataInit>:

CopyDataInit:
    ldr r3, =_sidata
 80085d8:	4b10      	ldr	r3, [pc, #64]	; (800861c <LoopForever+0x16>)
    ldr r3, [r3, r1]
 80085da:	585b      	ldr	r3, [r3, r1]
    str r3, [r0, r1]
 80085dc:	5043      	str	r3, [r0, r1]
    adds r1, r1, #4
 80085de:	3104      	adds	r1, #4

080085e0 <LoopCopyDataInit>:

LoopCopyDataInit:
    ldr r0, =_sdata
 80085e0:	480f      	ldr	r0, [pc, #60]	; (8008620 <LoopForever+0x1a>)
    ldr r3, =_edata
 80085e2:	4b10      	ldr	r3, [pc, #64]	; (8008624 <LoopForever+0x1e>)
    adds r2, r0, r1
 80085e4:	1842      	adds	r2, r0, r1
    cmp r2, r3
 80085e6:	429a      	cmp	r2, r3
    bcc CopyDataInit
 80085e8:	d3f6      	bcc.n	80085d8 <CopyDataInit>
    ldr r2, =_sbss
 80085ea:	4a0f      	ldr	r2, [pc, #60]	; (8008628 <LoopForever+0x22>)
    b LoopFillZerobss
 80085ec:	e002      	b.n	80085f4 <LoopFillZerobss>

080085ee <FillZerobss>:

                                            @ b) Clear .bss section (Zero init).
FillZerobss:
    movs r3, #0
 80085ee:	2300      	movs	r3, #0
    str r3, [r2], #4
 80085f0:	f842 3b04 	str.w	r3, [r2], #4

080085f4 <LoopFillZerobss>:

LoopFillZerobss:
    ldr r3, = _ebss
 80085f4:	4b0d      	ldr	r3, [pc, #52]	; (800862c <LoopForever+0x26>)
    cmp r2, r3
 80085f6:	429a      	cmp	r2, r3
    bcc FillZerobss
 80085f8:	d3f9      	bcc.n	80085ee <FillZerobss>

    bl BSP_LowLevelInit                     @ c) Call system initialzation routine.
 80085fa:	f7fe ff79 	bl	80074f0 <BSP_LowLevelInit>

    bl __libc_init_array                    @ d) Run static constructors.
 80085fe:	f000 f821 	bl	8008644 <__libc_init_array>

    bl main                                 @ e) Enter main.
 8008602:	f7f8 fe0d 	bl	8001220 <main>

08008606 <LoopForever>:

                                            @ f) Loop forever if returning from main.
LoopForever:
    b LoopForever
 8008606:	e7fe      	b.n	8008606 <LoopForever>
    .section  .text.Reset_Handler
    .weak  Reset_Handler
    .type  Reset_Handler, %function
Reset_Handler:
                                            @ Disable Branch prediction.
    ldr r0,=PREF_PCON
 8008608:	58004000 	.word	0x58004000
    ldr r1,[r0]
    orr r1,r1,#0x00010000
    str r1,[r0]

                                            @ Clear existing parity errors if any.
    ldr r0,=SCU_GCU_PEFLAG
 800860c:	50004150 	.word	0x50004150
    ldr r1,=0xFFFFFFFF
    str r1,[r0]

                                            @ Disable parity.
    ldr r0,=SCU_GCU_PEEN
 8008610:	5000413c 	.word	0x5000413c
    AND     R1,  R1, #(0x3FFFFFFF)          @ Clear the LSPEN and ASPEN bits
    STR     R1, [R0]
    ISB                                     @ Reset pipeline now the FPU is enabled
#endif

    LDR     R1, =0xE000ED14                 @ Load address to CCR register
 8008614:	e000ed14 	.word	0xe000ed14
    LDR.W   R0, [R1, #0x0]
    BIC     R0,  R0, #0x8                   @ Enable unaligned memory access
    STR.W   R0, [R1, #0x0]

    ldr sp, =_estack                        @ set stack pointer.
 8008618:	20010000 	.word	0x20010000
                                            @ a) copy .data section (Copy from ROM to RAM).
    movs r1, #0
    b LoopCopyDataInit

CopyDataInit:
    ldr r3, =_sidata
 800861c:	0800f0dc 	.word	0x0800f0dc
    ldr r3, [r3, r1]
    str r3, [r0, r1]
    adds r1, r1, #4

LoopCopyDataInit:
    ldr r0, =_sdata
 8008620:	20000000 	.word	0x20000000
    ldr r3, =_edata
 8008624:	200009e0 	.word	0x200009e0
    adds r2, r0, r1
    cmp r2, r3
    bcc CopyDataInit
    ldr r2, =_sbss
 8008628:	200009e0 	.word	0x200009e0
FillZerobss:
    movs r3, #0
    str r3, [r2], #4

LoopFillZerobss:
    ldr r3, = _ebss
 800862c:	20003874 	.word	0x20003874

08008630 <App_NMI_ISR>:

@ Dummy Exception Handlers (infinite loops which can be modified)

    .section	.text.App_NMI_ISR
App_NMI_ISR:
	b	App_NMI_ISR
 8008630:	e7fe      	b.n	8008630 <App_NMI_ISR>

08008632 <App_Fault_ISR>:
	.size	App_NMI_ISR, .-App_NMI_ISR


    .section	.text.App_Fault_ISR
App_Fault_ISR:
	b	App_Fault_ISR
 8008632:	e7fe      	b.n	8008632 <App_Fault_ISR>

08008634 <App_MemFault_ISR>:
	.size	App_Fault_ISR, .-App_Fault_ISR


    .section	.text.App_MemFault_ISR
App_MemFault_ISR:
	b	App_MemFault_ISR
 8008634:	e7fe      	b.n	8008634 <App_MemFault_ISR>

08008636 <App_BusFault_ISR>:
	.size	App_MemFault_ISR, .-App_MemFault_ISR


    .section	.text.App_BusFault_ISR
App_BusFault_ISR:
	b	App_BusFault_ISR
 8008636:	e7fe      	b.n	8008636 <App_BusFault_ISR>

08008638 <App_UsageFault_ISR>:
	.size	App_BusFault_ISR, .-App_BusFault_ISR


    .section	.text.App_UsageFault_ISR
App_UsageFault_ISR:
	b	App_UsageFault_ISR
 8008638:	e7fe      	b.n	8008638 <App_UsageFault_ISR>

0800863a <App_Spurious_ISR>:
	.size	App_UsageFault_ISR, .-App_UsageFault_ISR

    .section	.text.App_Spurious_ISR
App_Spurious_ISR:
	b	App_Spurious_ISR
 800863a:	e7fe      	b.n	800863a <App_Spurious_ISR>

0800863c <atoi>:
 800863c:	220a      	movs	r2, #10
 800863e:	2100      	movs	r1, #0
 8008640:	f000 b988 	b.w	8008954 <strtol>

08008644 <__libc_init_array>:
 8008644:	b570      	push	{r4, r5, r6, lr}
 8008646:	4e0f      	ldr	r6, [pc, #60]	; (8008684 <__libc_init_array+0x40>)
 8008648:	4d0f      	ldr	r5, [pc, #60]	; (8008688 <__libc_init_array+0x44>)
 800864a:	1b76      	subs	r6, r6, r5
 800864c:	10b6      	asrs	r6, r6, #2
 800864e:	bf18      	it	ne
 8008650:	2400      	movne	r4, #0
 8008652:	d005      	beq.n	8008660 <__libc_init_array+0x1c>
 8008654:	3401      	adds	r4, #1
 8008656:	f855 3b04 	ldr.w	r3, [r5], #4
 800865a:	4798      	blx	r3
 800865c:	42a6      	cmp	r6, r4
 800865e:	d1f9      	bne.n	8008654 <__libc_init_array+0x10>
 8008660:	4e0a      	ldr	r6, [pc, #40]	; (800868c <__libc_init_array+0x48>)
 8008662:	4d0b      	ldr	r5, [pc, #44]	; (8008690 <__libc_init_array+0x4c>)
 8008664:	1b76      	subs	r6, r6, r5
 8008666:	f7ff f9fb 	bl	8007a60 <_init>
 800866a:	10b6      	asrs	r6, r6, #2
 800866c:	bf18      	it	ne
 800866e:	2400      	movne	r4, #0
 8008670:	d006      	beq.n	8008680 <__libc_init_array+0x3c>
 8008672:	3401      	adds	r4, #1
 8008674:	f855 3b04 	ldr.w	r3, [r5], #4
 8008678:	4798      	blx	r3
 800867a:	42a6      	cmp	r6, r4
 800867c:	d1f9      	bne.n	8008672 <__libc_init_array+0x2e>
 800867e:	bd70      	pop	{r4, r5, r6, pc}
 8008680:	bd70      	pop	{r4, r5, r6, pc}
 8008682:	bf00      	nop
 8008684:	0800f0dc 	.word	0x0800f0dc
 8008688:	0800f0dc 	.word	0x0800f0dc
 800868c:	0800f0dc 	.word	0x0800f0dc
 8008690:	0800f0dc 	.word	0x0800f0dc

08008694 <memset>:
 8008694:	b470      	push	{r4, r5, r6}
 8008696:	0784      	lsls	r4, r0, #30
 8008698:	d046      	beq.n	8008728 <memset+0x94>
 800869a:	1e54      	subs	r4, r2, #1
 800869c:	2a00      	cmp	r2, #0
 800869e:	d041      	beq.n	8008724 <memset+0x90>
 80086a0:	b2cd      	uxtb	r5, r1
 80086a2:	4603      	mov	r3, r0
 80086a4:	e002      	b.n	80086ac <memset+0x18>
 80086a6:	1e62      	subs	r2, r4, #1
 80086a8:	b3e4      	cbz	r4, 8008724 <memset+0x90>
 80086aa:	4614      	mov	r4, r2
 80086ac:	f803 5b01 	strb.w	r5, [r3], #1
 80086b0:	079a      	lsls	r2, r3, #30
 80086b2:	d1f8      	bne.n	80086a6 <memset+0x12>
 80086b4:	2c03      	cmp	r4, #3
 80086b6:	d92e      	bls.n	8008716 <memset+0x82>
 80086b8:	b2cd      	uxtb	r5, r1
 80086ba:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80086be:	2c0f      	cmp	r4, #15
 80086c0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80086c4:	d919      	bls.n	80086fa <memset+0x66>
 80086c6:	f103 0210 	add.w	r2, r3, #16
 80086ca:	4626      	mov	r6, r4
 80086cc:	3e10      	subs	r6, #16
 80086ce:	2e0f      	cmp	r6, #15
 80086d0:	f842 5c10 	str.w	r5, [r2, #-16]
 80086d4:	f842 5c0c 	str.w	r5, [r2, #-12]
 80086d8:	f842 5c08 	str.w	r5, [r2, #-8]
 80086dc:	f842 5c04 	str.w	r5, [r2, #-4]
 80086e0:	f102 0210 	add.w	r2, r2, #16
 80086e4:	d8f2      	bhi.n	80086cc <memset+0x38>
 80086e6:	f1a4 0210 	sub.w	r2, r4, #16
 80086ea:	f022 020f 	bic.w	r2, r2, #15
 80086ee:	f004 040f 	and.w	r4, r4, #15
 80086f2:	3210      	adds	r2, #16
 80086f4:	2c03      	cmp	r4, #3
 80086f6:	4413      	add	r3, r2
 80086f8:	d90d      	bls.n	8008716 <memset+0x82>
 80086fa:	461e      	mov	r6, r3
 80086fc:	4622      	mov	r2, r4
 80086fe:	3a04      	subs	r2, #4
 8008700:	2a03      	cmp	r2, #3
 8008702:	f846 5b04 	str.w	r5, [r6], #4
 8008706:	d8fa      	bhi.n	80086fe <memset+0x6a>
 8008708:	1f22      	subs	r2, r4, #4
 800870a:	f022 0203 	bic.w	r2, r2, #3
 800870e:	3204      	adds	r2, #4
 8008710:	4413      	add	r3, r2
 8008712:	f004 0403 	and.w	r4, r4, #3
 8008716:	b12c      	cbz	r4, 8008724 <memset+0x90>
 8008718:	b2c9      	uxtb	r1, r1
 800871a:	441c      	add	r4, r3
 800871c:	f803 1b01 	strb.w	r1, [r3], #1
 8008720:	42a3      	cmp	r3, r4
 8008722:	d1fb      	bne.n	800871c <memset+0x88>
 8008724:	bc70      	pop	{r4, r5, r6}
 8008726:	4770      	bx	lr
 8008728:	4614      	mov	r4, r2
 800872a:	4603      	mov	r3, r0
 800872c:	e7c2      	b.n	80086b4 <memset+0x20>
 800872e:	bf00      	nop

08008730 <printf>:
 8008730:	b40f      	push	{r0, r1, r2, r3}
 8008732:	b500      	push	{lr}
 8008734:	4907      	ldr	r1, [pc, #28]	; (8008754 <printf+0x24>)
 8008736:	b083      	sub	sp, #12
 8008738:	ab04      	add	r3, sp, #16
 800873a:	6808      	ldr	r0, [r1, #0]
 800873c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008740:	6881      	ldr	r1, [r0, #8]
 8008742:	9301      	str	r3, [sp, #4]
 8008744:	f001 fc74 	bl	800a030 <_vfprintf_r>
 8008748:	b003      	add	sp, #12
 800874a:	f85d eb04 	ldr.w	lr, [sp], #4
 800874e:	b004      	add	sp, #16
 8008750:	4770      	bx	lr
 8008752:	bf00      	nop
 8008754:	20000460 	.word	0x20000460

08008758 <_puts_r>:
 8008758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800875a:	4605      	mov	r5, r0
 800875c:	b089      	sub	sp, #36	; 0x24
 800875e:	4608      	mov	r0, r1
 8008760:	460c      	mov	r4, r1
 8008762:	f7f8 f80d 	bl	8000780 <strlen>
 8008766:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8008768:	4f14      	ldr	r7, [pc, #80]	; (80087bc <_puts_r+0x64>)
 800876a:	9404      	str	r4, [sp, #16]
 800876c:	2601      	movs	r6, #1
 800876e:	1c44      	adds	r4, r0, #1
 8008770:	a904      	add	r1, sp, #16
 8008772:	2202      	movs	r2, #2
 8008774:	9403      	str	r4, [sp, #12]
 8008776:	9005      	str	r0, [sp, #20]
 8008778:	68ac      	ldr	r4, [r5, #8]
 800877a:	9706      	str	r7, [sp, #24]
 800877c:	9607      	str	r6, [sp, #28]
 800877e:	9101      	str	r1, [sp, #4]
 8008780:	9202      	str	r2, [sp, #8]
 8008782:	b1b3      	cbz	r3, 80087b2 <_puts_r+0x5a>
 8008784:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008788:	049a      	lsls	r2, r3, #18
 800878a:	d406      	bmi.n	800879a <_puts_r+0x42>
 800878c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800878e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008792:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008796:	81a3      	strh	r3, [r4, #12]
 8008798:	6662      	str	r2, [r4, #100]	; 0x64
 800879a:	4621      	mov	r1, r4
 800879c:	4628      	mov	r0, r5
 800879e:	aa01      	add	r2, sp, #4
 80087a0:	f004 fa9a 	bl	800ccd8 <__sfvwrite_r>
 80087a4:	2800      	cmp	r0, #0
 80087a6:	bf14      	ite	ne
 80087a8:	f04f 30ff 	movne.w	r0, #4294967295
 80087ac:	200a      	moveq	r0, #10
 80087ae:	b009      	add	sp, #36	; 0x24
 80087b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087b2:	4628      	mov	r0, r5
 80087b4:	f004 f950 	bl	800ca58 <__sinit>
 80087b8:	e7e4      	b.n	8008784 <_puts_r+0x2c>
 80087ba:	bf00      	nop
 80087bc:	0800ee24 	.word	0x0800ee24

080087c0 <puts>:
 80087c0:	4b02      	ldr	r3, [pc, #8]	; (80087cc <puts+0xc>)
 80087c2:	4601      	mov	r1, r0
 80087c4:	6818      	ldr	r0, [r3, #0]
 80087c6:	f7ff bfc7 	b.w	8008758 <_puts_r>
 80087ca:	bf00      	nop
 80087cc:	20000460 	.word	0x20000460

080087d0 <sprintf>:
 80087d0:	b40e      	push	{r1, r2, r3}
 80087d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087d4:	b09c      	sub	sp, #112	; 0x70
 80087d6:	ab21      	add	r3, sp, #132	; 0x84
 80087d8:	490f      	ldr	r1, [pc, #60]	; (8008818 <sprintf+0x48>)
 80087da:	f853 2b04 	ldr.w	r2, [r3], #4
 80087de:	9301      	str	r3, [sp, #4]
 80087e0:	4605      	mov	r5, r0
 80087e2:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 80087e6:	6808      	ldr	r0, [r1, #0]
 80087e8:	9502      	str	r5, [sp, #8]
 80087ea:	f44f 7702 	mov.w	r7, #520	; 0x208
 80087ee:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80087f2:	a902      	add	r1, sp, #8
 80087f4:	9506      	str	r5, [sp, #24]
 80087f6:	f8ad 7014 	strh.w	r7, [sp, #20]
 80087fa:	9404      	str	r4, [sp, #16]
 80087fc:	9407      	str	r4, [sp, #28]
 80087fe:	f8ad 6016 	strh.w	r6, [sp, #22]
 8008802:	f000 f8bd 	bl	8008980 <_svfprintf_r>
 8008806:	9b02      	ldr	r3, [sp, #8]
 8008808:	2200      	movs	r2, #0
 800880a:	701a      	strb	r2, [r3, #0]
 800880c:	b01c      	add	sp, #112	; 0x70
 800880e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8008812:	b003      	add	sp, #12
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop
 8008818:	20000460 	.word	0x20000460

0800881c <_strtol_l.isra.0>:
 800881c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008820:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8008824:	460f      	mov	r7, r1
 8008826:	4680      	mov	r8, r0
 8008828:	4616      	mov	r6, r2
 800882a:	461d      	mov	r5, r3
 800882c:	468b      	mov	fp, r1
 800882e:	e000      	b.n	8008832 <_strtol_l.isra.0+0x16>
 8008830:	46a3      	mov	fp, r4
 8008832:	465c      	mov	r4, fp
 8008834:	4648      	mov	r0, r9
 8008836:	f814 ab01 	ldrb.w	sl, [r4], #1
 800883a:	f004 fc07 	bl	800d04c <__locale_ctype_ptr_l>
 800883e:	4450      	add	r0, sl
 8008840:	7841      	ldrb	r1, [r0, #1]
 8008842:	f001 0108 	and.w	r1, r1, #8
 8008846:	f001 0cff 	and.w	ip, r1, #255	; 0xff
 800884a:	2900      	cmp	r1, #0
 800884c:	d1f0      	bne.n	8008830 <_strtol_l.isra.0+0x14>
 800884e:	4652      	mov	r2, sl
 8008850:	2a2d      	cmp	r2, #45	; 0x2d
 8008852:	d061      	beq.n	8008918 <_strtol_l.isra.0+0xfc>
 8008854:	2a2b      	cmp	r2, #43	; 0x2b
 8008856:	bf04      	itt	eq
 8008858:	f89b 2001 	ldrbeq.w	r2, [fp, #1]
 800885c:	f10b 0402 	addeq.w	r4, fp, #2
 8008860:	2d00      	cmp	r5, #0
 8008862:	d043      	beq.n	80088ec <_strtol_l.isra.0+0xd0>
 8008864:	2d10      	cmp	r5, #16
 8008866:	d065      	beq.n	8008934 <_strtol_l.isra.0+0x118>
 8008868:	46a9      	mov	r9, r5
 800886a:	f1bc 0f00 	cmp.w	ip, #0
 800886e:	bf0c      	ite	eq
 8008870:	f06f 4a00 	mvneq.w	sl, #2147483648	; 0x80000000
 8008874:	f04f 4a00 	movne.w	sl, #2147483648	; 0x80000000
 8008878:	2100      	movs	r1, #0
 800887a:	fbba fef9 	udiv	lr, sl, r9
 800887e:	4608      	mov	r0, r1
 8008880:	fb09 aa1e 	mls	sl, r9, lr, sl
 8008884:	e005      	b.n	8008892 <_strtol_l.isra.0+0x76>
 8008886:	d029      	beq.n	80088dc <_strtol_l.isra.0+0xc0>
 8008888:	fb09 3000 	mla	r0, r9, r0, r3
 800888c:	2101      	movs	r1, #1
 800888e:	f814 2b01 	ldrb.w	r2, [r4], #1
 8008892:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008896:	2b09      	cmp	r3, #9
 8008898:	d905      	bls.n	80088a6 <_strtol_l.isra.0+0x8a>
 800889a:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 800889e:	2b19      	cmp	r3, #25
 80088a0:	d80a      	bhi.n	80088b8 <_strtol_l.isra.0+0x9c>
 80088a2:	f1a2 0337 	sub.w	r3, r2, #55	; 0x37
 80088a6:	429d      	cmp	r5, r3
 80088a8:	dd0e      	ble.n	80088c8 <_strtol_l.isra.0+0xac>
 80088aa:	1c4a      	adds	r2, r1, #1
 80088ac:	d0ef      	beq.n	800888e <_strtol_l.isra.0+0x72>
 80088ae:	4586      	cmp	lr, r0
 80088b0:	d2e9      	bcs.n	8008886 <_strtol_l.isra.0+0x6a>
 80088b2:	f04f 31ff 	mov.w	r1, #4294967295
 80088b6:	e7ea      	b.n	800888e <_strtol_l.isra.0+0x72>
 80088b8:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
 80088bc:	2b19      	cmp	r3, #25
 80088be:	d803      	bhi.n	80088c8 <_strtol_l.isra.0+0xac>
 80088c0:	f1a2 0357 	sub.w	r3, r2, #87	; 0x57
 80088c4:	429d      	cmp	r5, r3
 80088c6:	dcf0      	bgt.n	80088aa <_strtol_l.isra.0+0x8e>
 80088c8:	1c4b      	adds	r3, r1, #1
 80088ca:	d015      	beq.n	80088f8 <_strtol_l.isra.0+0xdc>
 80088cc:	f1bc 0f00 	cmp.w	ip, #0
 80088d0:	d110      	bne.n	80088f4 <_strtol_l.isra.0+0xd8>
 80088d2:	b14e      	cbz	r6, 80088e8 <_strtol_l.isra.0+0xcc>
 80088d4:	b9e1      	cbnz	r1, 8008910 <_strtol_l.isra.0+0xf4>
 80088d6:	6037      	str	r7, [r6, #0]
 80088d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088dc:	459a      	cmp	sl, r3
 80088de:	dad3      	bge.n	8008888 <_strtol_l.isra.0+0x6c>
 80088e0:	4670      	mov	r0, lr
 80088e2:	f04f 31ff 	mov.w	r1, #4294967295
 80088e6:	e7d2      	b.n	800888e <_strtol_l.isra.0+0x72>
 80088e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ec:	2a30      	cmp	r2, #48	; 0x30
 80088ee:	d01a      	beq.n	8008926 <_strtol_l.isra.0+0x10a>
 80088f0:	250a      	movs	r5, #10
 80088f2:	e7b9      	b.n	8008868 <_strtol_l.isra.0+0x4c>
 80088f4:	4240      	negs	r0, r0
 80088f6:	e7ec      	b.n	80088d2 <_strtol_l.isra.0+0xb6>
 80088f8:	f1bc 0f00 	cmp.w	ip, #0
 80088fc:	f04f 0322 	mov.w	r3, #34	; 0x22
 8008900:	bf0c      	ite	eq
 8008902:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008906:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 800890a:	f8c8 3000 	str.w	r3, [r8]
 800890e:	b1f6      	cbz	r6, 800894e <_strtol_l.isra.0+0x132>
 8008910:	1e67      	subs	r7, r4, #1
 8008912:	6037      	str	r7, [r6, #0]
 8008914:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008918:	f10b 0402 	add.w	r4, fp, #2
 800891c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8008920:	f04f 0c01 	mov.w	ip, #1
 8008924:	e79c      	b.n	8008860 <_strtol_l.isra.0+0x44>
 8008926:	7823      	ldrb	r3, [r4, #0]
 8008928:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800892c:	2b58      	cmp	r3, #88	; 0x58
 800892e:	d008      	beq.n	8008942 <_strtol_l.isra.0+0x126>
 8008930:	2508      	movs	r5, #8
 8008932:	e799      	b.n	8008868 <_strtol_l.isra.0+0x4c>
 8008934:	2a30      	cmp	r2, #48	; 0x30
 8008936:	d197      	bne.n	8008868 <_strtol_l.isra.0+0x4c>
 8008938:	7823      	ldrb	r3, [r4, #0]
 800893a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800893e:	2b58      	cmp	r3, #88	; 0x58
 8008940:	d192      	bne.n	8008868 <_strtol_l.isra.0+0x4c>
 8008942:	f04f 0910 	mov.w	r9, #16
 8008946:	7862      	ldrb	r2, [r4, #1]
 8008948:	464d      	mov	r5, r9
 800894a:	3402      	adds	r4, #2
 800894c:	e78d      	b.n	800886a <_strtol_l.isra.0+0x4e>
 800894e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008952:	bf00      	nop

08008954 <strtol>:
 8008954:	b530      	push	{r4, r5, lr}
 8008956:	4c08      	ldr	r4, [pc, #32]	; (8008978 <strtol+0x24>)
 8008958:	4b08      	ldr	r3, [pc, #32]	; (800897c <strtol+0x28>)
 800895a:	6825      	ldr	r5, [r4, #0]
 800895c:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 800895e:	b083      	sub	sp, #12
 8008960:	2c00      	cmp	r4, #0
 8008962:	bf08      	it	eq
 8008964:	461c      	moveq	r4, r3
 8008966:	9400      	str	r4, [sp, #0]
 8008968:	4613      	mov	r3, r2
 800896a:	460a      	mov	r2, r1
 800896c:	4601      	mov	r1, r0
 800896e:	4628      	mov	r0, r5
 8008970:	f7ff ff54 	bl	800881c <_strtol_l.isra.0>
 8008974:	b003      	add	sp, #12
 8008976:	bd30      	pop	{r4, r5, pc}
 8008978:	20000460 	.word	0x20000460
 800897c:	20000464 	.word	0x20000464

08008980 <_svfprintf_r>:
 8008980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008984:	b0c1      	sub	sp, #260	; 0x104
 8008986:	460c      	mov	r4, r1
 8008988:	9109      	str	r1, [sp, #36]	; 0x24
 800898a:	4615      	mov	r5, r2
 800898c:	930e      	str	r3, [sp, #56]	; 0x38
 800898e:	900a      	str	r0, [sp, #40]	; 0x28
 8008990:	f004 fb60 	bl	800d054 <_localeconv_r>
 8008994:	6803      	ldr	r3, [r0, #0]
 8008996:	9317      	str	r3, [sp, #92]	; 0x5c
 8008998:	4618      	mov	r0, r3
 800899a:	f7f7 fef1 	bl	8000780 <strlen>
 800899e:	89a3      	ldrh	r3, [r4, #12]
 80089a0:	9016      	str	r0, [sp, #88]	; 0x58
 80089a2:	061e      	lsls	r6, r3, #24
 80089a4:	d503      	bpl.n	80089ae <_svfprintf_r+0x2e>
 80089a6:	6923      	ldr	r3, [r4, #16]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	f001 811a 	beq.w	8009be2 <_svfprintf_r+0x1262>
 80089ae:	2300      	movs	r3, #0
 80089b0:	461a      	mov	r2, r3
 80089b2:	9312      	str	r3, [sp, #72]	; 0x48
 80089b4:	9325      	str	r3, [sp, #148]	; 0x94
 80089b6:	9324      	str	r3, [sp, #144]	; 0x90
 80089b8:	9319      	str	r3, [sp, #100]	; 0x64
 80089ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80089bc:	f8df a464 	ldr.w	sl, [pc, #1124]	; 8008e24 <_svfprintf_r+0x4a4>
 80089c0:	9214      	str	r2, [sp, #80]	; 0x50
 80089c2:	ab30      	add	r3, sp, #192	; 0xc0
 80089c4:	9323      	str	r3, [sp, #140]	; 0x8c
 80089c6:	4699      	mov	r9, r3
 80089c8:	9215      	str	r2, [sp, #84]	; 0x54
 80089ca:	46a8      	mov	r8, r5
 80089cc:	f898 3000 	ldrb.w	r3, [r8]
 80089d0:	4644      	mov	r4, r8
 80089d2:	b1eb      	cbz	r3, 8008a10 <_svfprintf_r+0x90>
 80089d4:	2b25      	cmp	r3, #37	; 0x25
 80089d6:	d102      	bne.n	80089de <_svfprintf_r+0x5e>
 80089d8:	e01a      	b.n	8008a10 <_svfprintf_r+0x90>
 80089da:	2b25      	cmp	r3, #37	; 0x25
 80089dc:	d003      	beq.n	80089e6 <_svfprintf_r+0x66>
 80089de:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d1f9      	bne.n	80089da <_svfprintf_r+0x5a>
 80089e6:	ebc8 0504 	rsb	r5, r8, r4
 80089ea:	b18d      	cbz	r5, 8008a10 <_svfprintf_r+0x90>
 80089ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80089ee:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80089f0:	f8c9 8000 	str.w	r8, [r9]
 80089f4:	3301      	adds	r3, #1
 80089f6:	442a      	add	r2, r5
 80089f8:	2b07      	cmp	r3, #7
 80089fa:	f8c9 5004 	str.w	r5, [r9, #4]
 80089fe:	9225      	str	r2, [sp, #148]	; 0x94
 8008a00:	9324      	str	r3, [sp, #144]	; 0x90
 8008a02:	f300 80a6 	bgt.w	8008b52 <_svfprintf_r+0x1d2>
 8008a06:	f109 0908 	add.w	r9, r9, #8
 8008a0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a0c:	442b      	add	r3, r5
 8008a0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a10:	7823      	ldrb	r3, [r4, #0]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	f000 80a6 	beq.w	8008b64 <_svfprintf_r+0x1e4>
 8008a18:	2300      	movs	r3, #0
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8008a20:	4619      	mov	r1, r3
 8008a22:	930c      	str	r3, [sp, #48]	; 0x30
 8008a24:	9307      	str	r3, [sp, #28]
 8008a26:	f04f 3bff 	mov.w	fp, #4294967295
 8008a2a:	7863      	ldrb	r3, [r4, #1]
 8008a2c:	f104 0801 	add.w	r8, r4, #1
 8008a30:	465d      	mov	r5, fp
 8008a32:	f108 0801 	add.w	r8, r8, #1
 8008a36:	f1a3 0020 	sub.w	r0, r3, #32
 8008a3a:	2858      	cmp	r0, #88	; 0x58
 8008a3c:	f200 8425 	bhi.w	800928a <_svfprintf_r+0x90a>
 8008a40:	e8df f010 	tbh	[pc, r0, lsl #1]
 8008a44:	04230388 	.word	0x04230388
 8008a48:	03900423 	.word	0x03900423
 8008a4c:	04230423 	.word	0x04230423
 8008a50:	04230423 	.word	0x04230423
 8008a54:	04230423 	.word	0x04230423
 8008a58:	03a50397 	.word	0x03a50397
 8008a5c:	005d0423 	.word	0x005d0423
 8008a60:	042300e2 	.word	0x042300e2
 8008a64:	010500fe 	.word	0x010500fe
 8008a68:	01050105 	.word	0x01050105
 8008a6c:	01050105 	.word	0x01050105
 8008a70:	01050105 	.word	0x01050105
 8008a74:	01050105 	.word	0x01050105
 8008a78:	04230423 	.word	0x04230423
 8008a7c:	04230423 	.word	0x04230423
 8008a80:	04230423 	.word	0x04230423
 8008a84:	04230423 	.word	0x04230423
 8008a88:	04230423 	.word	0x04230423
 8008a8c:	02810115 	.word	0x02810115
 8008a90:	02810423 	.word	0x02810423
 8008a94:	04230423 	.word	0x04230423
 8008a98:	04230423 	.word	0x04230423
 8008a9c:	042302c6 	.word	0x042302c6
 8008aa0:	02cd0423 	.word	0x02cd0423
 8008aa4:	04230423 	.word	0x04230423
 8008aa8:	04230423 	.word	0x04230423
 8008aac:	02f70423 	.word	0x02f70423
 8008ab0:	04230423 	.word	0x04230423
 8008ab4:	04230325 	.word	0x04230325
 8008ab8:	04230423 	.word	0x04230423
 8008abc:	04230423 	.word	0x04230423
 8008ac0:	04230423 	.word	0x04230423
 8008ac4:	04230423 	.word	0x04230423
 8008ac8:	03660423 	.word	0x03660423
 8008acc:	02810379 	.word	0x02810379
 8008ad0:	02810281 	.word	0x02810281
 8008ad4:	03790381 	.word	0x03790381
 8008ad8:	04230423 	.word	0x04230423
 8008adc:	042303d1 	.word	0x042303d1
 8008ae0:	00a303db 	.word	0x00a303db
 8008ae4:	03ee0064 	.word	0x03ee0064
 8008ae8:	03f50423 	.word	0x03f50423
 8008aec:	03aa0423 	.word	0x03aa0423
 8008af0:	04230423 	.word	0x04230423
 8008af4:	03bc      	.short	0x03bc
 8008af6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008af8:	930e      	str	r3, [sp, #56]	; 0x38
 8008afa:	4240      	negs	r0, r0
 8008afc:	900c      	str	r0, [sp, #48]	; 0x30
 8008afe:	9b07      	ldr	r3, [sp, #28]
 8008b00:	f043 0304 	orr.w	r3, r3, #4
 8008b04:	9307      	str	r3, [sp, #28]
 8008b06:	f898 3000 	ldrb.w	r3, [r8]
 8008b0a:	e792      	b.n	8008a32 <_svfprintf_r+0xb2>
 8008b0c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008b0e:	46ab      	mov	fp, r5
 8008b10:	2100      	movs	r1, #0
 8008b12:	6804      	ldr	r4, [r0, #0]
 8008b14:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8008b18:	1d07      	adds	r7, r0, #4
 8008b1a:	9807      	ldr	r0, [sp, #28]
 8008b1c:	2330      	movs	r3, #48	; 0x30
 8008b1e:	2278      	movs	r2, #120	; 0x78
 8008b20:	458b      	cmp	fp, r1
 8008b22:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8008b26:	f04f 0500 	mov.w	r5, #0
 8008b2a:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
 8008b2e:	f040 0302 	orr.w	r3, r0, #2
 8008b32:	f2c0 83c7 	blt.w	80092c4 <_svfprintf_r+0x944>
 8008b36:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 8008b3a:	f043 0302 	orr.w	r3, r3, #2
 8008b3e:	9307      	str	r3, [sp, #28]
 8008b40:	ea54 0305 	orrs.w	r3, r4, r5
 8008b44:	970e      	str	r7, [sp, #56]	; 0x38
 8008b46:	f000 8393 	beq.w	8009270 <_svfprintf_r+0x8f0>
 8008b4a:	460f      	mov	r7, r1
 8008b4c:	9211      	str	r2, [sp, #68]	; 0x44
 8008b4e:	48b3      	ldr	r0, [pc, #716]	; (8008e1c <_svfprintf_r+0x49c>)
 8008b50:	e2ce      	b.n	80090f0 <_svfprintf_r+0x770>
 8008b52:	aa23      	add	r2, sp, #140	; 0x8c
 8008b54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b56:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008b58:	f005 fb88 	bl	800e26c <__ssprint_r>
 8008b5c:	b948      	cbnz	r0, 8008b72 <_svfprintf_r+0x1f2>
 8008b5e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8008b62:	e752      	b.n	8008a0a <_svfprintf_r+0x8a>
 8008b64:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8008b66:	b123      	cbz	r3, 8008b72 <_svfprintf_r+0x1f2>
 8008b68:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008b6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b6c:	aa23      	add	r2, sp, #140	; 0x8c
 8008b6e:	f005 fb7d 	bl	800e26c <__ssprint_r>
 8008b72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b74:	899b      	ldrh	r3, [r3, #12]
 8008b76:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008b7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b7c:	bf18      	it	ne
 8008b7e:	f04f 33ff 	movne.w	r3, #4294967295
 8008b82:	4618      	mov	r0, r3
 8008b84:	b041      	add	sp, #260	; 0x104
 8008b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b8a:	9311      	str	r3, [sp, #68]	; 0x44
 8008b8c:	46ab      	mov	fp, r5
 8008b8e:	2a00      	cmp	r2, #0
 8008b90:	f041 8233 	bne.w	8009ffa <_svfprintf_r+0x167a>
 8008b94:	9a07      	ldr	r2, [sp, #28]
 8008b96:	f012 0320 	ands.w	r3, r2, #32
 8008b9a:	f000 822e 	beq.w	8008ffa <_svfprintf_r+0x67a>
 8008b9e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8008ba0:	3707      	adds	r7, #7
 8008ba2:	f027 0307 	bic.w	r3, r7, #7
 8008ba6:	2700      	movs	r7, #0
 8008ba8:	f103 0108 	add.w	r1, r3, #8
 8008bac:	45bb      	cmp	fp, r7
 8008bae:	910e      	str	r1, [sp, #56]	; 0x38
 8008bb0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008bb4:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 8008bb8:	f2c0 8779 	blt.w	8009aae <_svfprintf_r+0x112e>
 8008bbc:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8008bc0:	9307      	str	r3, [sp, #28]
 8008bc2:	ea54 0305 	orrs.w	r3, r4, r5
 8008bc6:	f000 8375 	beq.w	80092b4 <_svfprintf_r+0x934>
 8008bca:	ae30      	add	r6, sp, #192	; 0xc0
 8008bcc:	08e2      	lsrs	r2, r4, #3
 8008bce:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 8008bd2:	08e9      	lsrs	r1, r5, #3
 8008bd4:	f004 0307 	and.w	r3, r4, #7
 8008bd8:	460d      	mov	r5, r1
 8008bda:	4614      	mov	r4, r2
 8008bdc:	3330      	adds	r3, #48	; 0x30
 8008bde:	ea54 0205 	orrs.w	r2, r4, r5
 8008be2:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8008be6:	d1f1      	bne.n	8008bcc <_svfprintf_r+0x24c>
 8008be8:	9a07      	ldr	r2, [sp, #28]
 8008bea:	07d1      	lsls	r1, r2, #31
 8008bec:	f140 8084 	bpl.w	8008cf8 <_svfprintf_r+0x378>
 8008bf0:	2b30      	cmp	r3, #48	; 0x30
 8008bf2:	f000 8081 	beq.w	8008cf8 <_svfprintf_r+0x378>
 8008bf6:	2230      	movs	r2, #48	; 0x30
 8008bf8:	1e73      	subs	r3, r6, #1
 8008bfa:	f806 2c01 	strb.w	r2, [r6, #-1]
 8008bfe:	aa30      	add	r2, sp, #192	; 0xc0
 8008c00:	1ad2      	subs	r2, r2, r3
 8008c02:	920d      	str	r2, [sp, #52]	; 0x34
 8008c04:	461e      	mov	r6, r3
 8008c06:	e07a      	b.n	8008cfe <_svfprintf_r+0x37e>
 8008c08:	f898 3000 	ldrb.w	r3, [r8]
 8008c0c:	2b2a      	cmp	r3, #42	; 0x2a
 8008c0e:	f108 0401 	add.w	r4, r8, #1
 8008c12:	f001 81b9 	beq.w	8009f88 <_svfprintf_r+0x1608>
 8008c16:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8008c1a:	2809      	cmp	r0, #9
 8008c1c:	bf98      	it	ls
 8008c1e:	2500      	movls	r5, #0
 8008c20:	f201 816c 	bhi.w	8009efc <_svfprintf_r+0x157c>
 8008c24:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008c28:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8008c2c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8008c30:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8008c34:	2809      	cmp	r0, #9
 8008c36:	d9f5      	bls.n	8008c24 <_svfprintf_r+0x2a4>
 8008c38:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8008c3c:	46a0      	mov	r8, r4
 8008c3e:	e6fa      	b.n	8008a36 <_svfprintf_r+0xb6>
 8008c40:	9b07      	ldr	r3, [sp, #28]
 8008c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c46:	9307      	str	r3, [sp, #28]
 8008c48:	f898 3000 	ldrb.w	r3, [r8]
 8008c4c:	e6f1      	b.n	8008a32 <_svfprintf_r+0xb2>
 8008c4e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8008c52:	2300      	movs	r3, #0
 8008c54:	461c      	mov	r4, r3
 8008c56:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008c5a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8008c5e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8008c62:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8008c66:	2809      	cmp	r0, #9
 8008c68:	d9f5      	bls.n	8008c56 <_svfprintf_r+0x2d6>
 8008c6a:	940c      	str	r4, [sp, #48]	; 0x30
 8008c6c:	e6e3      	b.n	8008a36 <_svfprintf_r+0xb6>
 8008c6e:	9311      	str	r3, [sp, #68]	; 0x44
 8008c70:	46ab      	mov	fp, r5
 8008c72:	2a00      	cmp	r2, #0
 8008c74:	f041 81ab 	bne.w	8009fce <_svfprintf_r+0x164e>
 8008c78:	9b07      	ldr	r3, [sp, #28]
 8008c7a:	f043 0310 	orr.w	r3, r3, #16
 8008c7e:	9307      	str	r3, [sp, #28]
 8008c80:	9b07      	ldr	r3, [sp, #28]
 8008c82:	0698      	lsls	r0, r3, #26
 8008c84:	f140 8530 	bpl.w	80096e8 <_svfprintf_r+0xd68>
 8008c88:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8008c8a:	3707      	adds	r7, #7
 8008c8c:	f027 0707 	bic.w	r7, r7, #7
 8008c90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c94:	f107 0108 	add.w	r1, r7, #8
 8008c98:	910e      	str	r1, [sp, #56]	; 0x38
 8008c9a:	4614      	mov	r4, r2
 8008c9c:	461d      	mov	r5, r3
 8008c9e:	2a00      	cmp	r2, #0
 8008ca0:	f173 0300 	sbcs.w	r3, r3, #0
 8008ca4:	f2c0 855b 	blt.w	800975e <_svfprintf_r+0xdde>
 8008ca8:	f1bb 0f00 	cmp.w	fp, #0
 8008cac:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 8008cb0:	f2c0 8538 	blt.w	8009724 <_svfprintf_r+0xda4>
 8008cb4:	9b07      	ldr	r3, [sp, #28]
 8008cb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008cba:	9307      	str	r3, [sp, #28]
 8008cbc:	ea54 0305 	orrs.w	r3, r4, r5
 8008cc0:	f000 81db 	beq.w	800907a <_svfprintf_r+0x6fa>
 8008cc4:	2d00      	cmp	r5, #0
 8008cc6:	bf08      	it	eq
 8008cc8:	2c0a      	cmpeq	r4, #10
 8008cca:	f0c0 81db 	bcc.w	8009084 <_svfprintf_r+0x704>
 8008cce:	ae30      	add	r6, sp, #192	; 0xc0
 8008cd0:	4620      	mov	r0, r4
 8008cd2:	4629      	mov	r1, r5
 8008cd4:	220a      	movs	r2, #10
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	f7f7 fb18 	bl	800030c <__aeabi_uldivmod>
 8008cdc:	3230      	adds	r2, #48	; 0x30
 8008cde:	f806 2d01 	strb.w	r2, [r6, #-1]!
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	4629      	mov	r1, r5
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	220a      	movs	r2, #10
 8008cea:	f7f7 fb0f 	bl	800030c <__aeabi_uldivmod>
 8008cee:	4604      	mov	r4, r0
 8008cf0:	460d      	mov	r5, r1
 8008cf2:	ea54 0305 	orrs.w	r3, r4, r5
 8008cf6:	d1eb      	bne.n	8008cd0 <_svfprintf_r+0x350>
 8008cf8:	ab30      	add	r3, sp, #192	; 0xc0
 8008cfa:	1b9b      	subs	r3, r3, r6
 8008cfc:	930d      	str	r3, [sp, #52]	; 0x34
 8008cfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d00:	455b      	cmp	r3, fp
 8008d02:	bfb8      	it	lt
 8008d04:	465b      	movlt	r3, fp
 8008d06:	9308      	str	r3, [sp, #32]
 8008d08:	2300      	movs	r3, #0
 8008d0a:	9313      	str	r3, [sp, #76]	; 0x4c
 8008d0c:	b117      	cbz	r7, 8008d14 <_svfprintf_r+0x394>
 8008d0e:	9b08      	ldr	r3, [sp, #32]
 8008d10:	3301      	adds	r3, #1
 8008d12:	9308      	str	r3, [sp, #32]
 8008d14:	9b07      	ldr	r3, [sp, #28]
 8008d16:	f013 0302 	ands.w	r3, r3, #2
 8008d1a:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d1c:	d002      	beq.n	8008d24 <_svfprintf_r+0x3a4>
 8008d1e:	9b08      	ldr	r3, [sp, #32]
 8008d20:	3302      	adds	r3, #2
 8008d22:	9308      	str	r3, [sp, #32]
 8008d24:	9b07      	ldr	r3, [sp, #28]
 8008d26:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 8008d2a:	9310      	str	r3, [sp, #64]	; 0x40
 8008d2c:	f040 82d7 	bne.w	80092de <_svfprintf_r+0x95e>
 8008d30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d32:	9a08      	ldr	r2, [sp, #32]
 8008d34:	1a9d      	subs	r5, r3, r2
 8008d36:	2d00      	cmp	r5, #0
 8008d38:	f340 82d1 	ble.w	80092de <_svfprintf_r+0x95e>
 8008d3c:	2d10      	cmp	r5, #16
 8008d3e:	9925      	ldr	r1, [sp, #148]	; 0x94
 8008d40:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008d42:	4f37      	ldr	r7, [pc, #220]	; (8008e20 <_svfprintf_r+0x4a0>)
 8008d44:	dd27      	ble.n	8008d96 <_svfprintf_r+0x416>
 8008d46:	9618      	str	r6, [sp, #96]	; 0x60
 8008d48:	4648      	mov	r0, r9
 8008d4a:	2410      	movs	r4, #16
 8008d4c:	46b9      	mov	r9, r7
 8008d4e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008d50:	462f      	mov	r7, r5
 8008d52:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008d54:	e004      	b.n	8008d60 <_svfprintf_r+0x3e0>
 8008d56:	3f10      	subs	r7, #16
 8008d58:	2f10      	cmp	r7, #16
 8008d5a:	f100 0008 	add.w	r0, r0, #8
 8008d5e:	dd16      	ble.n	8008d8e <_svfprintf_r+0x40e>
 8008d60:	3201      	adds	r2, #1
 8008d62:	4b2f      	ldr	r3, [pc, #188]	; (8008e20 <_svfprintf_r+0x4a0>)
 8008d64:	9224      	str	r2, [sp, #144]	; 0x90
 8008d66:	3110      	adds	r1, #16
 8008d68:	2a07      	cmp	r2, #7
 8008d6a:	9125      	str	r1, [sp, #148]	; 0x94
 8008d6c:	e880 0018 	stmia.w	r0, {r3, r4}
 8008d70:	ddf1      	ble.n	8008d56 <_svfprintf_r+0x3d6>
 8008d72:	aa23      	add	r2, sp, #140	; 0x8c
 8008d74:	4631      	mov	r1, r6
 8008d76:	4628      	mov	r0, r5
 8008d78:	f005 fa78 	bl	800e26c <__ssprint_r>
 8008d7c:	2800      	cmp	r0, #0
 8008d7e:	f47f aef8 	bne.w	8008b72 <_svfprintf_r+0x1f2>
 8008d82:	3f10      	subs	r7, #16
 8008d84:	2f10      	cmp	r7, #16
 8008d86:	9925      	ldr	r1, [sp, #148]	; 0x94
 8008d88:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008d8a:	a830      	add	r0, sp, #192	; 0xc0
 8008d8c:	dce8      	bgt.n	8008d60 <_svfprintf_r+0x3e0>
 8008d8e:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8008d90:	463d      	mov	r5, r7
 8008d92:	464f      	mov	r7, r9
 8008d94:	4681      	mov	r9, r0
 8008d96:	3201      	adds	r2, #1
 8008d98:	186c      	adds	r4, r5, r1
 8008d9a:	2a07      	cmp	r2, #7
 8008d9c:	9425      	str	r4, [sp, #148]	; 0x94
 8008d9e:	9224      	str	r2, [sp, #144]	; 0x90
 8008da0:	f8c9 7000 	str.w	r7, [r9]
 8008da4:	f8c9 5004 	str.w	r5, [r9, #4]
 8008da8:	f300 8428 	bgt.w	80095fc <_svfprintf_r+0xc7c>
 8008dac:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 8008db0:	f109 0908 	add.w	r9, r9, #8
 8008db4:	b177      	cbz	r7, 8008dd4 <_svfprintf_r+0x454>
 8008db6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008db8:	3301      	adds	r3, #1
 8008dba:	3401      	adds	r4, #1
 8008dbc:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	2b07      	cmp	r3, #7
 8008dc4:	9425      	str	r4, [sp, #148]	; 0x94
 8008dc6:	9324      	str	r3, [sp, #144]	; 0x90
 8008dc8:	e889 0006 	stmia.w	r9, {r1, r2}
 8008dcc:	f300 83a0 	bgt.w	8009510 <_svfprintf_r+0xb90>
 8008dd0:	f109 0908 	add.w	r9, r9, #8
 8008dd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008dd6:	b16b      	cbz	r3, 8008df4 <_svfprintf_r+0x474>
 8008dd8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008dda:	3301      	adds	r3, #1
 8008ddc:	3402      	adds	r4, #2
 8008dde:	a91c      	add	r1, sp, #112	; 0x70
 8008de0:	2202      	movs	r2, #2
 8008de2:	2b07      	cmp	r3, #7
 8008de4:	9425      	str	r4, [sp, #148]	; 0x94
 8008de6:	9324      	str	r3, [sp, #144]	; 0x90
 8008de8:	e889 0006 	stmia.w	r9, {r1, r2}
 8008dec:	f300 839c 	bgt.w	8009528 <_svfprintf_r+0xba8>
 8008df0:	f109 0908 	add.w	r9, r9, #8
 8008df4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008df6:	2b80      	cmp	r3, #128	; 0x80
 8008df8:	f000 82d5 	beq.w	80093a6 <_svfprintf_r+0xa26>
 8008dfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008dfe:	ebc3 070b 	rsb	r7, r3, fp
 8008e02:	2f00      	cmp	r7, #0
 8008e04:	dd39      	ble.n	8008e7a <_svfprintf_r+0x4fa>
 8008e06:	4a07      	ldr	r2, [pc, #28]	; (8008e24 <_svfprintf_r+0x4a4>)
 8008e08:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008e0a:	920f      	str	r2, [sp, #60]	; 0x3c
 8008e0c:	2f10      	cmp	r7, #16
 8008e0e:	dd28      	ble.n	8008e62 <_svfprintf_r+0x4e2>
 8008e10:	4622      	mov	r2, r4
 8008e12:	f04f 0b10 	mov.w	fp, #16
 8008e16:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008e18:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008e1a:	e00a      	b.n	8008e32 <_svfprintf_r+0x4b2>
 8008e1c:	0800ee5c 	.word	0x0800ee5c
 8008e20:	0800ee7c 	.word	0x0800ee7c
 8008e24:	0800ee28 	.word	0x0800ee28
 8008e28:	3f10      	subs	r7, #16
 8008e2a:	2f10      	cmp	r7, #16
 8008e2c:	f109 0908 	add.w	r9, r9, #8
 8008e30:	dd16      	ble.n	8008e60 <_svfprintf_r+0x4e0>
 8008e32:	3301      	adds	r3, #1
 8008e34:	3210      	adds	r2, #16
 8008e36:	2b07      	cmp	r3, #7
 8008e38:	9225      	str	r2, [sp, #148]	; 0x94
 8008e3a:	9324      	str	r3, [sp, #144]	; 0x90
 8008e3c:	e889 0c00 	stmia.w	r9, {sl, fp}
 8008e40:	ddf2      	ble.n	8008e28 <_svfprintf_r+0x4a8>
 8008e42:	aa23      	add	r2, sp, #140	; 0x8c
 8008e44:	4621      	mov	r1, r4
 8008e46:	4628      	mov	r0, r5
 8008e48:	f005 fa10 	bl	800e26c <__ssprint_r>
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	f47f ae90 	bne.w	8008b72 <_svfprintf_r+0x1f2>
 8008e52:	3f10      	subs	r7, #16
 8008e54:	2f10      	cmp	r7, #16
 8008e56:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8008e58:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008e5a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8008e5e:	dce8      	bgt.n	8008e32 <_svfprintf_r+0x4b2>
 8008e60:	4614      	mov	r4, r2
 8008e62:	3301      	adds	r3, #1
 8008e64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008e66:	9324      	str	r3, [sp, #144]	; 0x90
 8008e68:	443c      	add	r4, r7
 8008e6a:	2b07      	cmp	r3, #7
 8008e6c:	9425      	str	r4, [sp, #148]	; 0x94
 8008e6e:	e889 0084 	stmia.w	r9, {r2, r7}
 8008e72:	f300 8341 	bgt.w	80094f8 <_svfprintf_r+0xb78>
 8008e76:	f109 0908 	add.w	r9, r9, #8
 8008e7a:	9b07      	ldr	r3, [sp, #28]
 8008e7c:	05da      	lsls	r2, r3, #23
 8008e7e:	f100 8230 	bmi.w	80092e2 <_svfprintf_r+0x962>
 8008e82:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008e84:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008e86:	f8c9 6000 	str.w	r6, [r9]
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	440c      	add	r4, r1
 8008e8e:	2b07      	cmp	r3, #7
 8008e90:	9425      	str	r4, [sp, #148]	; 0x94
 8008e92:	f8c9 1004 	str.w	r1, [r9, #4]
 8008e96:	9324      	str	r3, [sp, #144]	; 0x90
 8008e98:	f300 8318 	bgt.w	80094cc <_svfprintf_r+0xb4c>
 8008e9c:	f109 0908 	add.w	r9, r9, #8
 8008ea0:	9b07      	ldr	r3, [sp, #28]
 8008ea2:	0759      	lsls	r1, r3, #29
 8008ea4:	d53f      	bpl.n	8008f26 <_svfprintf_r+0x5a6>
 8008ea6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ea8:	9a08      	ldr	r2, [sp, #32]
 8008eaa:	1a9d      	subs	r5, r3, r2
 8008eac:	2d00      	cmp	r5, #0
 8008eae:	dd3a      	ble.n	8008f26 <_svfprintf_r+0x5a6>
 8008eb0:	2d10      	cmp	r5, #16
 8008eb2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008eb4:	4fbc      	ldr	r7, [pc, #752]	; (80091a8 <_svfprintf_r+0x828>)
 8008eb6:	dd23      	ble.n	8008f00 <_svfprintf_r+0x580>
 8008eb8:	4622      	mov	r2, r4
 8008eba:	2610      	movs	r6, #16
 8008ebc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8008ec0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008ec2:	e004      	b.n	8008ece <_svfprintf_r+0x54e>
 8008ec4:	3d10      	subs	r5, #16
 8008ec6:	2d10      	cmp	r5, #16
 8008ec8:	f109 0908 	add.w	r9, r9, #8
 8008ecc:	dd17      	ble.n	8008efe <_svfprintf_r+0x57e>
 8008ece:	3301      	adds	r3, #1
 8008ed0:	49b5      	ldr	r1, [pc, #724]	; (80091a8 <_svfprintf_r+0x828>)
 8008ed2:	9324      	str	r3, [sp, #144]	; 0x90
 8008ed4:	3210      	adds	r2, #16
 8008ed6:	2b07      	cmp	r3, #7
 8008ed8:	9225      	str	r2, [sp, #148]	; 0x94
 8008eda:	e889 0042 	stmia.w	r9, {r1, r6}
 8008ede:	ddf1      	ble.n	8008ec4 <_svfprintf_r+0x544>
 8008ee0:	aa23      	add	r2, sp, #140	; 0x8c
 8008ee2:	4621      	mov	r1, r4
 8008ee4:	4658      	mov	r0, fp
 8008ee6:	f005 f9c1 	bl	800e26c <__ssprint_r>
 8008eea:	2800      	cmp	r0, #0
 8008eec:	f47f ae41 	bne.w	8008b72 <_svfprintf_r+0x1f2>
 8008ef0:	3d10      	subs	r5, #16
 8008ef2:	2d10      	cmp	r5, #16
 8008ef4:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8008ef6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008ef8:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8008efc:	dce7      	bgt.n	8008ece <_svfprintf_r+0x54e>
 8008efe:	4614      	mov	r4, r2
 8008f00:	3301      	adds	r3, #1
 8008f02:	442c      	add	r4, r5
 8008f04:	2b07      	cmp	r3, #7
 8008f06:	9425      	str	r4, [sp, #148]	; 0x94
 8008f08:	9324      	str	r3, [sp, #144]	; 0x90
 8008f0a:	f8c9 7000 	str.w	r7, [r9]
 8008f0e:	f8c9 5004 	str.w	r5, [r9, #4]
 8008f12:	dd08      	ble.n	8008f26 <_svfprintf_r+0x5a6>
 8008f14:	aa23      	add	r2, sp, #140	; 0x8c
 8008f16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f18:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008f1a:	f005 f9a7 	bl	800e26c <__ssprint_r>
 8008f1e:	2800      	cmp	r0, #0
 8008f20:	f47f ae27 	bne.w	8008b72 <_svfprintf_r+0x1f2>
 8008f24:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8008f26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f2a:	9908      	ldr	r1, [sp, #32]
 8008f2c:	428a      	cmp	r2, r1
 8008f2e:	bfac      	ite	ge
 8008f30:	189b      	addge	r3, r3, r2
 8008f32:	185b      	addlt	r3, r3, r1
 8008f34:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f36:	2c00      	cmp	r4, #0
 8008f38:	f040 82d4 	bne.w	80094e4 <_svfprintf_r+0xb64>
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	9324      	str	r3, [sp, #144]	; 0x90
 8008f40:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8008f44:	e542      	b.n	80089cc <_svfprintf_r+0x4c>
 8008f46:	9311      	str	r3, [sp, #68]	; 0x44
 8008f48:	46ab      	mov	fp, r5
 8008f4a:	2a00      	cmp	r2, #0
 8008f4c:	f041 8051 	bne.w	8009ff2 <_svfprintf_r+0x1672>
 8008f50:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8008f52:	3707      	adds	r7, #7
 8008f54:	f027 0307 	bic.w	r3, r7, #7
 8008f58:	f103 0208 	add.w	r2, r3, #8
 8008f5c:	920e      	str	r2, [sp, #56]	; 0x38
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	9214      	str	r2, [sp, #80]	; 0x50
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	9315      	str	r3, [sp, #84]	; 0x54
 8008f66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f68:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8008f6a:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8008f6e:	4628      	mov	r0, r5
 8008f70:	4621      	mov	r1, r4
 8008f72:	f04f 32ff 	mov.w	r2, #4294967295
 8008f76:	4b8d      	ldr	r3, [pc, #564]	; (80091ac <_svfprintf_r+0x82c>)
 8008f78:	f7f8 f914 	bl	80011a4 <__aeabi_dcmpun>
 8008f7c:	2800      	cmp	r0, #0
 8008f7e:	f040 84c2 	bne.w	8009906 <_svfprintf_r+0xf86>
 8008f82:	4628      	mov	r0, r5
 8008f84:	4621      	mov	r1, r4
 8008f86:	f04f 32ff 	mov.w	r2, #4294967295
 8008f8a:	4b88      	ldr	r3, [pc, #544]	; (80091ac <_svfprintf_r+0x82c>)
 8008f8c:	f7f8 f8ec 	bl	8001168 <__aeabi_dcmple>
 8008f90:	2800      	cmp	r0, #0
 8008f92:	f040 84b8 	bne.w	8009906 <_svfprintf_r+0xf86>
 8008f96:	9814      	ldr	r0, [sp, #80]	; 0x50
 8008f98:	9915      	ldr	r1, [sp, #84]	; 0x54
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	f7f8 f8d9 	bl	8001154 <__aeabi_dcmplt>
 8008fa2:	2800      	cmp	r0, #0
 8008fa4:	f040 874f 	bne.w	8009e46 <_svfprintf_r+0x14c6>
 8008fa8:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 8008fac:	4e80      	ldr	r6, [pc, #512]	; (80091b0 <_svfprintf_r+0x830>)
 8008fae:	4b81      	ldr	r3, [pc, #516]	; (80091b4 <_svfprintf_r+0x834>)
 8008fb0:	9907      	ldr	r1, [sp, #28]
 8008fb2:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008fb6:	9107      	str	r1, [sp, #28]
 8008fb8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008fba:	2203      	movs	r2, #3
 8008fbc:	f04f 0b00 	mov.w	fp, #0
 8008fc0:	9208      	str	r2, [sp, #32]
 8008fc2:	2947      	cmp	r1, #71	; 0x47
 8008fc4:	bfd8      	it	le
 8008fc6:	461e      	movle	r6, r3
 8008fc8:	920d      	str	r2, [sp, #52]	; 0x34
 8008fca:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8008fce:	e69d      	b.n	8008d0c <_svfprintf_r+0x38c>
 8008fd0:	9b07      	ldr	r3, [sp, #28]
 8008fd2:	f043 0308 	orr.w	r3, r3, #8
 8008fd6:	9307      	str	r3, [sp, #28]
 8008fd8:	f898 3000 	ldrb.w	r3, [r8]
 8008fdc:	e529      	b.n	8008a32 <_svfprintf_r+0xb2>
 8008fde:	9311      	str	r3, [sp, #68]	; 0x44
 8008fe0:	46ab      	mov	fp, r5
 8008fe2:	2a00      	cmp	r2, #0
 8008fe4:	f041 8011 	bne.w	800a00a <_svfprintf_r+0x168a>
 8008fe8:	9b07      	ldr	r3, [sp, #28]
 8008fea:	f043 0310 	orr.w	r3, r3, #16
 8008fee:	9307      	str	r3, [sp, #28]
 8008ff0:	9a07      	ldr	r2, [sp, #28]
 8008ff2:	f012 0320 	ands.w	r3, r2, #32
 8008ff6:	f47f add2 	bne.w	8008b9e <_svfprintf_r+0x21e>
 8008ffa:	9907      	ldr	r1, [sp, #28]
 8008ffc:	f011 0210 	ands.w	r2, r1, #16
 8009000:	f000 852c 	beq.w	8009a5c <_svfprintf_r+0x10dc>
 8009004:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009006:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800900a:	f1bb 0f00 	cmp.w	fp, #0
 800900e:	6804      	ldr	r4, [r0, #0]
 8009010:	f100 0704 	add.w	r7, r0, #4
 8009014:	f04f 0500 	mov.w	r5, #0
 8009018:	f2c0 8548 	blt.w	8009aac <_svfprintf_r+0x112c>
 800901c:	460a      	mov	r2, r1
 800901e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009022:	9207      	str	r2, [sp, #28]
 8009024:	ea54 0205 	orrs.w	r2, r4, r5
 8009028:	970e      	str	r7, [sp, #56]	; 0x38
 800902a:	f000 8143 	beq.w	80092b4 <_svfprintf_r+0x934>
 800902e:	461f      	mov	r7, r3
 8009030:	e5cb      	b.n	8008bca <_svfprintf_r+0x24a>
 8009032:	9311      	str	r3, [sp, #68]	; 0x44
 8009034:	46ab      	mov	fp, r5
 8009036:	2a00      	cmp	r2, #0
 8009038:	f040 87e3 	bne.w	800a002 <_svfprintf_r+0x1682>
 800903c:	9b07      	ldr	r3, [sp, #28]
 800903e:	f043 0310 	orr.w	r3, r3, #16
 8009042:	9307      	str	r3, [sp, #28]
 8009044:	9a07      	ldr	r2, [sp, #28]
 8009046:	f012 0320 	ands.w	r3, r2, #32
 800904a:	f000 8332 	beq.w	80096b2 <_svfprintf_r+0xd32>
 800904e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8009050:	3707      	adds	r7, #7
 8009052:	f027 0307 	bic.w	r3, r7, #7
 8009056:	2700      	movs	r7, #0
 8009058:	f103 0108 	add.w	r1, r3, #8
 800905c:	45bb      	cmp	fp, r7
 800905e:	910e      	str	r1, [sp, #56]	; 0x38
 8009060:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009064:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 8009068:	f2c0 835c 	blt.w	8009724 <_svfprintf_r+0xda4>
 800906c:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8009070:	9307      	str	r3, [sp, #28]
 8009072:	ea54 0305 	orrs.w	r3, r4, r5
 8009076:	f47f ae25 	bne.w	8008cc4 <_svfprintf_r+0x344>
 800907a:	f1bb 0f00 	cmp.w	fp, #0
 800907e:	f000 80fe 	beq.w	800927e <_svfprintf_r+0x8fe>
 8009082:	2400      	movs	r4, #0
 8009084:	ae40      	add	r6, sp, #256	; 0x100
 8009086:	3430      	adds	r4, #48	; 0x30
 8009088:	f806 4d41 	strb.w	r4, [r6, #-65]!
 800908c:	e634      	b.n	8008cf8 <_svfprintf_r+0x378>
 800908e:	9311      	str	r3, [sp, #68]	; 0x44
 8009090:	46ab      	mov	fp, r5
 8009092:	2a00      	cmp	r2, #0
 8009094:	f040 8797 	bne.w	8009fc6 <_svfprintf_r+0x1646>
 8009098:	9b07      	ldr	r3, [sp, #28]
 800909a:	4847      	ldr	r0, [pc, #284]	; (80091b8 <_svfprintf_r+0x838>)
 800909c:	069d      	lsls	r5, r3, #26
 800909e:	f140 8097 	bpl.w	80091d0 <_svfprintf_r+0x850>
 80090a2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80090a4:	3707      	adds	r7, #7
 80090a6:	f027 0307 	bic.w	r3, r7, #7
 80090aa:	e9d3 4500 	ldrd	r4, r5, [r3]
 80090ae:	f103 0208 	add.w	r2, r3, #8
 80090b2:	920e      	str	r2, [sp, #56]	; 0x38
 80090b4:	9a07      	ldr	r2, [sp, #28]
 80090b6:	f012 0701 	ands.w	r7, r2, #1
 80090ba:	f000 8241 	beq.w	8009540 <_svfprintf_r+0xbc0>
 80090be:	ea54 0305 	orrs.w	r3, r4, r5
 80090c2:	f000 8505 	beq.w	8009ad0 <_svfprintf_r+0x1150>
 80090c6:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80090ca:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
 80090ce:	2700      	movs	r7, #0
 80090d0:	9a07      	ldr	r2, [sp, #28]
 80090d2:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 80090d6:	2330      	movs	r3, #48	; 0x30
 80090d8:	45bb      	cmp	fp, r7
 80090da:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 80090de:	f042 0302 	orr.w	r3, r2, #2
 80090e2:	f2c0 86b5 	blt.w	8009e50 <_svfprintf_r+0x14d0>
 80090e6:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 80090ea:	f043 0302 	orr.w	r3, r3, #2
 80090ee:	9307      	str	r3, [sp, #28]
 80090f0:	ae30      	add	r6, sp, #192	; 0xc0
 80090f2:	0923      	lsrs	r3, r4, #4
 80090f4:	f004 010f 	and.w	r1, r4, #15
 80090f8:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 80090fc:	092a      	lsrs	r2, r5, #4
 80090fe:	461c      	mov	r4, r3
 8009100:	4615      	mov	r5, r2
 8009102:	5c43      	ldrb	r3, [r0, r1]
 8009104:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8009108:	ea54 0305 	orrs.w	r3, r4, r5
 800910c:	d1f1      	bne.n	80090f2 <_svfprintf_r+0x772>
 800910e:	e5f3      	b.n	8008cf8 <_svfprintf_r+0x378>
 8009110:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009112:	9311      	str	r3, [sp, #68]	; 0x44
 8009114:	680a      	ldr	r2, [r1, #0]
 8009116:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 800911a:	2300      	movs	r3, #0
 800911c:	460a      	mov	r2, r1
 800911e:	461f      	mov	r7, r3
 8009120:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8009124:	3204      	adds	r2, #4
 8009126:	2301      	movs	r3, #1
 8009128:	9308      	str	r3, [sp, #32]
 800912a:	46bb      	mov	fp, r7
 800912c:	9713      	str	r7, [sp, #76]	; 0x4c
 800912e:	920e      	str	r2, [sp, #56]	; 0x38
 8009130:	930d      	str	r3, [sp, #52]	; 0x34
 8009132:	ae26      	add	r6, sp, #152	; 0x98
 8009134:	e5ee      	b.n	8008d14 <_svfprintf_r+0x394>
 8009136:	9311      	str	r3, [sp, #68]	; 0x44
 8009138:	46ab      	mov	fp, r5
 800913a:	2a00      	cmp	r2, #0
 800913c:	f43f ada0 	beq.w	8008c80 <_svfprintf_r+0x300>
 8009140:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8009144:	e59c      	b.n	8008c80 <_svfprintf_r+0x300>
 8009146:	9b07      	ldr	r3, [sp, #28]
 8009148:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800914c:	9307      	str	r3, [sp, #28]
 800914e:	f898 3000 	ldrb.w	r3, [r8]
 8009152:	e46e      	b.n	8008a32 <_svfprintf_r+0xb2>
 8009154:	f898 3000 	ldrb.w	r3, [r8]
 8009158:	2900      	cmp	r1, #0
 800915a:	f47f ac6a 	bne.w	8008a32 <_svfprintf_r+0xb2>
 800915e:	2201      	movs	r2, #1
 8009160:	2120      	movs	r1, #32
 8009162:	e466      	b.n	8008a32 <_svfprintf_r+0xb2>
 8009164:	9b07      	ldr	r3, [sp, #28]
 8009166:	f043 0301 	orr.w	r3, r3, #1
 800916a:	9307      	str	r3, [sp, #28]
 800916c:	f898 3000 	ldrb.w	r3, [r8]
 8009170:	e45f      	b.n	8008a32 <_svfprintf_r+0xb2>
 8009172:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8009174:	6823      	ldr	r3, [r4, #0]
 8009176:	930c      	str	r3, [sp, #48]	; 0x30
 8009178:	4618      	mov	r0, r3
 800917a:	2800      	cmp	r0, #0
 800917c:	4623      	mov	r3, r4
 800917e:	f103 0304 	add.w	r3, r3, #4
 8009182:	f6ff acb8 	blt.w	8008af6 <_svfprintf_r+0x176>
 8009186:	930e      	str	r3, [sp, #56]	; 0x38
 8009188:	f898 3000 	ldrb.w	r3, [r8]
 800918c:	e451      	b.n	8008a32 <_svfprintf_r+0xb2>
 800918e:	f898 3000 	ldrb.w	r3, [r8]
 8009192:	2201      	movs	r2, #1
 8009194:	212b      	movs	r1, #43	; 0x2b
 8009196:	e44c      	b.n	8008a32 <_svfprintf_r+0xb2>
 8009198:	9311      	str	r3, [sp, #68]	; 0x44
 800919a:	46ab      	mov	fp, r5
 800919c:	2a00      	cmp	r2, #0
 800919e:	f43f af51 	beq.w	8009044 <_svfprintf_r+0x6c4>
 80091a2:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 80091a6:	e74d      	b.n	8009044 <_svfprintf_r+0x6c4>
 80091a8:	0800ee7c 	.word	0x0800ee7c
 80091ac:	7fefffff 	.word	0x7fefffff
 80091b0:	0800ee3c 	.word	0x0800ee3c
 80091b4:	0800ee38 	.word	0x0800ee38
 80091b8:	0800ee48 	.word	0x0800ee48
 80091bc:	9311      	str	r3, [sp, #68]	; 0x44
 80091be:	46ab      	mov	fp, r5
 80091c0:	2a00      	cmp	r2, #0
 80091c2:	f040 872a 	bne.w	800a01a <_svfprintf_r+0x169a>
 80091c6:	9b07      	ldr	r3, [sp, #28]
 80091c8:	4899      	ldr	r0, [pc, #612]	; (8009430 <_svfprintf_r+0xab0>)
 80091ca:	069d      	lsls	r5, r3, #26
 80091cc:	f53f af69 	bmi.w	80090a2 <_svfprintf_r+0x722>
 80091d0:	9b07      	ldr	r3, [sp, #28]
 80091d2:	06dc      	lsls	r4, r3, #27
 80091d4:	f140 8435 	bpl.w	8009a42 <_svfprintf_r+0x10c2>
 80091d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80091da:	4613      	mov	r3, r2
 80091dc:	3304      	adds	r3, #4
 80091de:	6814      	ldr	r4, [r2, #0]
 80091e0:	930e      	str	r3, [sp, #56]	; 0x38
 80091e2:	2500      	movs	r5, #0
 80091e4:	e766      	b.n	80090b4 <_svfprintf_r+0x734>
 80091e6:	f898 3000 	ldrb.w	r3, [r8]
 80091ea:	2b6c      	cmp	r3, #108	; 0x6c
 80091ec:	f000 84e2 	beq.w	8009bb4 <_svfprintf_r+0x1234>
 80091f0:	9807      	ldr	r0, [sp, #28]
 80091f2:	f040 0010 	orr.w	r0, r0, #16
 80091f6:	9007      	str	r0, [sp, #28]
 80091f8:	e41b      	b.n	8008a32 <_svfprintf_r+0xb2>
 80091fa:	2a00      	cmp	r2, #0
 80091fc:	f040 8709 	bne.w	800a012 <_svfprintf_r+0x1692>
 8009200:	9b07      	ldr	r3, [sp, #28]
 8009202:	069b      	lsls	r3, r3, #26
 8009204:	f140 8406 	bpl.w	8009a14 <_svfprintf_r+0x1094>
 8009208:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800920a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800920c:	6813      	ldr	r3, [r2, #0]
 800920e:	17cd      	asrs	r5, r1, #31
 8009210:	4608      	mov	r0, r1
 8009212:	3204      	adds	r2, #4
 8009214:	4629      	mov	r1, r5
 8009216:	920e      	str	r2, [sp, #56]	; 0x38
 8009218:	e9c3 0100 	strd	r0, r1, [r3]
 800921c:	f7ff bbd6 	b.w	80089cc <_svfprintf_r+0x4c>
 8009220:	9b07      	ldr	r3, [sp, #28]
 8009222:	f043 0320 	orr.w	r3, r3, #32
 8009226:	9307      	str	r3, [sp, #28]
 8009228:	f898 3000 	ldrb.w	r3, [r8]
 800922c:	e401      	b.n	8008a32 <_svfprintf_r+0xb2>
 800922e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009230:	9311      	str	r3, [sp, #68]	; 0x44
 8009232:	6816      	ldr	r6, [r2, #0]
 8009234:	2400      	movs	r4, #0
 8009236:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
 800923a:	1d17      	adds	r7, r2, #4
 800923c:	2e00      	cmp	r6, #0
 800923e:	f000 85cd 	beq.w	8009ddc <_svfprintf_r+0x145c>
 8009242:	2d00      	cmp	r5, #0
 8009244:	f2c0 8518 	blt.w	8009c78 <_svfprintf_r+0x12f8>
 8009248:	462a      	mov	r2, r5
 800924a:	4621      	mov	r1, r4
 800924c:	4630      	mov	r0, r6
 800924e:	f7f7 fb07 	bl	8000860 <memchr>
 8009252:	2800      	cmp	r0, #0
 8009254:	f000 862a 	beq.w	8009eac <_svfprintf_r+0x152c>
 8009258:	1b83      	subs	r3, r0, r6
 800925a:	930d      	str	r3, [sp, #52]	; 0x34
 800925c:	46a3      	mov	fp, r4
 800925e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009262:	970e      	str	r7, [sp, #56]	; 0x38
 8009264:	9308      	str	r3, [sp, #32]
 8009266:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 800926a:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800926e:	e54d      	b.n	8008d0c <_svfprintf_r+0x38c>
 8009270:	486f      	ldr	r0, [pc, #444]	; (8009430 <_svfprintf_r+0xab0>)
 8009272:	9211      	str	r2, [sp, #68]	; 0x44
 8009274:	f1bb 0f00 	cmp.w	fp, #0
 8009278:	f040 8173 	bne.w	8009562 <_svfprintf_r+0xbe2>
 800927c:	465f      	mov	r7, fp
 800927e:	f04f 0b00 	mov.w	fp, #0
 8009282:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8009286:	ae30      	add	r6, sp, #192	; 0xc0
 8009288:	e539      	b.n	8008cfe <_svfprintf_r+0x37e>
 800928a:	9311      	str	r3, [sp, #68]	; 0x44
 800928c:	2a00      	cmp	r2, #0
 800928e:	f040 86ac 	bne.w	8009fea <_svfprintf_r+0x166a>
 8009292:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009294:	2a00      	cmp	r2, #0
 8009296:	f43f ac65 	beq.w	8008b64 <_svfprintf_r+0x1e4>
 800929a:	2300      	movs	r3, #0
 800929c:	2101      	movs	r1, #1
 800929e:	461f      	mov	r7, r3
 80092a0:	9108      	str	r1, [sp, #32]
 80092a2:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 80092a6:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 80092aa:	469b      	mov	fp, r3
 80092ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80092ae:	910d      	str	r1, [sp, #52]	; 0x34
 80092b0:	ae26      	add	r6, sp, #152	; 0x98
 80092b2:	e52f      	b.n	8008d14 <_svfprintf_r+0x394>
 80092b4:	f1bb 0f00 	cmp.w	fp, #0
 80092b8:	f000 8603 	beq.w	8009ec2 <_svfprintf_r+0x1542>
 80092bc:	2700      	movs	r7, #0
 80092be:	2400      	movs	r4, #0
 80092c0:	2500      	movs	r5, #0
 80092c2:	e482      	b.n	8008bca <_svfprintf_r+0x24a>
 80092c4:	485a      	ldr	r0, [pc, #360]	; (8009430 <_svfprintf_r+0xab0>)
 80092c6:	9307      	str	r3, [sp, #28]
 80092c8:	9211      	str	r2, [sp, #68]	; 0x44
 80092ca:	ea54 0305 	orrs.w	r3, r4, r5
 80092ce:	970e      	str	r7, [sp, #56]	; 0x38
 80092d0:	f04f 0700 	mov.w	r7, #0
 80092d4:	f47f af0c 	bne.w	80090f0 <_svfprintf_r+0x770>
 80092d8:	2400      	movs	r4, #0
 80092da:	2500      	movs	r5, #0
 80092dc:	e708      	b.n	80090f0 <_svfprintf_r+0x770>
 80092de:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80092e0:	e568      	b.n	8008db4 <_svfprintf_r+0x434>
 80092e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80092e4:	2b65      	cmp	r3, #101	; 0x65
 80092e6:	f340 80a9 	ble.w	800943c <_svfprintf_r+0xabc>
 80092ea:	9814      	ldr	r0, [sp, #80]	; 0x50
 80092ec:	9915      	ldr	r1, [sp, #84]	; 0x54
 80092ee:	2200      	movs	r2, #0
 80092f0:	2300      	movs	r3, #0
 80092f2:	f7f7 ff25 	bl	8001140 <__aeabi_dcmpeq>
 80092f6:	2800      	cmp	r0, #0
 80092f8:	f000 8135 	beq.w	8009566 <_svfprintf_r+0xbe6>
 80092fc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80092fe:	4a4d      	ldr	r2, [pc, #308]	; (8009434 <_svfprintf_r+0xab4>)
 8009300:	f8c9 2000 	str.w	r2, [r9]
 8009304:	3301      	adds	r3, #1
 8009306:	3401      	adds	r4, #1
 8009308:	2201      	movs	r2, #1
 800930a:	2b07      	cmp	r3, #7
 800930c:	9425      	str	r4, [sp, #148]	; 0x94
 800930e:	9324      	str	r3, [sp, #144]	; 0x90
 8009310:	f8c9 2004 	str.w	r2, [r9, #4]
 8009314:	f300 83e8 	bgt.w	8009ae8 <_svfprintf_r+0x1168>
 8009318:	f109 0908 	add.w	r9, r9, #8
 800931c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800931e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009320:	4293      	cmp	r3, r2
 8009322:	db03      	blt.n	800932c <_svfprintf_r+0x9ac>
 8009324:	9b07      	ldr	r3, [sp, #28]
 8009326:	07db      	lsls	r3, r3, #31
 8009328:	f57f adba 	bpl.w	8008ea0 <_svfprintf_r+0x520>
 800932c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800932e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009330:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009332:	f8c9 2000 	str.w	r2, [r9]
 8009336:	3301      	adds	r3, #1
 8009338:	440c      	add	r4, r1
 800933a:	2b07      	cmp	r3, #7
 800933c:	9425      	str	r4, [sp, #148]	; 0x94
 800933e:	f8c9 1004 	str.w	r1, [r9, #4]
 8009342:	9324      	str	r3, [sp, #144]	; 0x90
 8009344:	f300 8440 	bgt.w	8009bc8 <_svfprintf_r+0x1248>
 8009348:	f109 0908 	add.w	r9, r9, #8
 800934c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800934e:	1e5d      	subs	r5, r3, #1
 8009350:	2d00      	cmp	r5, #0
 8009352:	f77f ada5 	ble.w	8008ea0 <_svfprintf_r+0x520>
 8009356:	4a38      	ldr	r2, [pc, #224]	; (8009438 <_svfprintf_r+0xab8>)
 8009358:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800935a:	920f      	str	r2, [sp, #60]	; 0x3c
 800935c:	2d10      	cmp	r5, #16
 800935e:	f340 81e6 	ble.w	800972e <_svfprintf_r+0xdae>
 8009362:	2610      	movs	r6, #16
 8009364:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8009366:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800936a:	e005      	b.n	8009378 <_svfprintf_r+0x9f8>
 800936c:	f109 0908 	add.w	r9, r9, #8
 8009370:	3d10      	subs	r5, #16
 8009372:	2d10      	cmp	r5, #16
 8009374:	f340 81db 	ble.w	800972e <_svfprintf_r+0xdae>
 8009378:	3301      	adds	r3, #1
 800937a:	3410      	adds	r4, #16
 800937c:	2b07      	cmp	r3, #7
 800937e:	9425      	str	r4, [sp, #148]	; 0x94
 8009380:	9324      	str	r3, [sp, #144]	; 0x90
 8009382:	f8c9 a000 	str.w	sl, [r9]
 8009386:	f8c9 6004 	str.w	r6, [r9, #4]
 800938a:	ddef      	ble.n	800936c <_svfprintf_r+0x9ec>
 800938c:	aa23      	add	r2, sp, #140	; 0x8c
 800938e:	4659      	mov	r1, fp
 8009390:	4638      	mov	r0, r7
 8009392:	f004 ff6b 	bl	800e26c <__ssprint_r>
 8009396:	2800      	cmp	r0, #0
 8009398:	f47f abeb 	bne.w	8008b72 <_svfprintf_r+0x1f2>
 800939c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800939e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80093a0:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 80093a4:	e7e4      	b.n	8009370 <_svfprintf_r+0x9f0>
 80093a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093a8:	9a08      	ldr	r2, [sp, #32]
 80093aa:	1a9f      	subs	r7, r3, r2
 80093ac:	2f00      	cmp	r7, #0
 80093ae:	f77f ad25 	ble.w	8008dfc <_svfprintf_r+0x47c>
 80093b2:	4a21      	ldr	r2, [pc, #132]	; (8009438 <_svfprintf_r+0xab8>)
 80093b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80093b6:	920f      	str	r2, [sp, #60]	; 0x3c
 80093b8:	2f10      	cmp	r7, #16
 80093ba:	dd2b      	ble.n	8009414 <_svfprintf_r+0xa94>
 80093bc:	464a      	mov	r2, r9
 80093be:	4621      	mov	r1, r4
 80093c0:	46b9      	mov	r9, r7
 80093c2:	2510      	movs	r5, #16
 80093c4:	4637      	mov	r7, r6
 80093c6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80093c8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80093ca:	e006      	b.n	80093da <_svfprintf_r+0xa5a>
 80093cc:	f1a9 0910 	sub.w	r9, r9, #16
 80093d0:	f1b9 0f10 	cmp.w	r9, #16
 80093d4:	f102 0208 	add.w	r2, r2, #8
 80093d8:	dd18      	ble.n	800940c <_svfprintf_r+0xa8c>
 80093da:	3301      	adds	r3, #1
 80093dc:	3110      	adds	r1, #16
 80093de:	2b07      	cmp	r3, #7
 80093e0:	9125      	str	r1, [sp, #148]	; 0x94
 80093e2:	9324      	str	r3, [sp, #144]	; 0x90
 80093e4:	f8c2 a000 	str.w	sl, [r2]
 80093e8:	6055      	str	r5, [r2, #4]
 80093ea:	ddef      	ble.n	80093cc <_svfprintf_r+0xa4c>
 80093ec:	aa23      	add	r2, sp, #140	; 0x8c
 80093ee:	4631      	mov	r1, r6
 80093f0:	4620      	mov	r0, r4
 80093f2:	f004 ff3b 	bl	800e26c <__ssprint_r>
 80093f6:	2800      	cmp	r0, #0
 80093f8:	f47f abbb 	bne.w	8008b72 <_svfprintf_r+0x1f2>
 80093fc:	f1a9 0910 	sub.w	r9, r9, #16
 8009400:	f1b9 0f10 	cmp.w	r9, #16
 8009404:	9925      	ldr	r1, [sp, #148]	; 0x94
 8009406:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009408:	aa30      	add	r2, sp, #192	; 0xc0
 800940a:	dce6      	bgt.n	80093da <_svfprintf_r+0xa5a>
 800940c:	463e      	mov	r6, r7
 800940e:	460c      	mov	r4, r1
 8009410:	464f      	mov	r7, r9
 8009412:	4691      	mov	r9, r2
 8009414:	3301      	adds	r3, #1
 8009416:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009418:	9324      	str	r3, [sp, #144]	; 0x90
 800941a:	443c      	add	r4, r7
 800941c:	2b07      	cmp	r3, #7
 800941e:	9425      	str	r4, [sp, #148]	; 0x94
 8009420:	e889 0084 	stmia.w	r9, {r2, r7}
 8009424:	f300 8245 	bgt.w	80098b2 <_svfprintf_r+0xf32>
 8009428:	f109 0908 	add.w	r9, r9, #8
 800942c:	e4e6      	b.n	8008dfc <_svfprintf_r+0x47c>
 800942e:	bf00      	nop
 8009430:	0800ee5c 	.word	0x0800ee5c
 8009434:	0800ee78 	.word	0x0800ee78
 8009438:	0800ee28 	.word	0x0800ee28
 800943c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800943e:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8009440:	2b01      	cmp	r3, #1
 8009442:	f340 8208 	ble.w	8009856 <_svfprintf_r+0xed6>
 8009446:	3501      	adds	r5, #1
 8009448:	3401      	adds	r4, #1
 800944a:	2301      	movs	r3, #1
 800944c:	2d07      	cmp	r5, #7
 800944e:	9425      	str	r4, [sp, #148]	; 0x94
 8009450:	9524      	str	r5, [sp, #144]	; 0x90
 8009452:	f8c9 6000 	str.w	r6, [r9]
 8009456:	f8c9 3004 	str.w	r3, [r9, #4]
 800945a:	f300 820d 	bgt.w	8009878 <_svfprintf_r+0xef8>
 800945e:	f109 0908 	add.w	r9, r9, #8
 8009462:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009464:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009466:	f8c9 3000 	str.w	r3, [r9]
 800946a:	3501      	adds	r5, #1
 800946c:	4414      	add	r4, r2
 800946e:	2d07      	cmp	r5, #7
 8009470:	9425      	str	r4, [sp, #148]	; 0x94
 8009472:	9524      	str	r5, [sp, #144]	; 0x90
 8009474:	f8c9 2004 	str.w	r2, [r9, #4]
 8009478:	f300 820e 	bgt.w	8009898 <_svfprintf_r+0xf18>
 800947c:	f109 0908 	add.w	r9, r9, #8
 8009480:	2300      	movs	r3, #0
 8009482:	9814      	ldr	r0, [sp, #80]	; 0x50
 8009484:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009486:	2200      	movs	r2, #0
 8009488:	f7f7 fe5a 	bl	8001140 <__aeabi_dcmpeq>
 800948c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800948e:	2800      	cmp	r0, #0
 8009490:	f040 80c3 	bne.w	800961a <_svfprintf_r+0xc9a>
 8009494:	3b01      	subs	r3, #1
 8009496:	3501      	adds	r5, #1
 8009498:	3601      	adds	r6, #1
 800949a:	441c      	add	r4, r3
 800949c:	2d07      	cmp	r5, #7
 800949e:	9524      	str	r5, [sp, #144]	; 0x90
 80094a0:	9425      	str	r4, [sp, #148]	; 0x94
 80094a2:	f8c9 6000 	str.w	r6, [r9]
 80094a6:	f8c9 3004 	str.w	r3, [r9, #4]
 80094aa:	f300 80f5 	bgt.w	8009698 <_svfprintf_r+0xd18>
 80094ae:	f109 0908 	add.w	r9, r9, #8
 80094b2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80094b4:	f8c9 2004 	str.w	r2, [r9, #4]
 80094b8:	3501      	adds	r5, #1
 80094ba:	4414      	add	r4, r2
 80094bc:	ab1f      	add	r3, sp, #124	; 0x7c
 80094be:	2d07      	cmp	r5, #7
 80094c0:	9425      	str	r4, [sp, #148]	; 0x94
 80094c2:	9524      	str	r5, [sp, #144]	; 0x90
 80094c4:	f8c9 3000 	str.w	r3, [r9]
 80094c8:	f77f ace8 	ble.w	8008e9c <_svfprintf_r+0x51c>
 80094cc:	aa23      	add	r2, sp, #140	; 0x8c
 80094ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094d0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80094d2:	f004 fecb 	bl	800e26c <__ssprint_r>
 80094d6:	2800      	cmp	r0, #0
 80094d8:	f47f ab4b 	bne.w	8008b72 <_svfprintf_r+0x1f2>
 80094dc:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80094de:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 80094e2:	e4dd      	b.n	8008ea0 <_svfprintf_r+0x520>
 80094e4:	aa23      	add	r2, sp, #140	; 0x8c
 80094e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094e8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80094ea:	f004 febf 	bl	800e26c <__ssprint_r>
 80094ee:	2800      	cmp	r0, #0
 80094f0:	f43f ad24 	beq.w	8008f3c <_svfprintf_r+0x5bc>
 80094f4:	f7ff bb3d 	b.w	8008b72 <_svfprintf_r+0x1f2>
 80094f8:	aa23      	add	r2, sp, #140	; 0x8c
 80094fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80094fe:	f004 feb5 	bl	800e26c <__ssprint_r>
 8009502:	2800      	cmp	r0, #0
 8009504:	f47f ab35 	bne.w	8008b72 <_svfprintf_r+0x1f2>
 8009508:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800950a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800950e:	e4b4      	b.n	8008e7a <_svfprintf_r+0x4fa>
 8009510:	aa23      	add	r2, sp, #140	; 0x8c
 8009512:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009514:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009516:	f004 fea9 	bl	800e26c <__ssprint_r>
 800951a:	2800      	cmp	r0, #0
 800951c:	f47f ab29 	bne.w	8008b72 <_svfprintf_r+0x1f2>
 8009520:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8009522:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8009526:	e455      	b.n	8008dd4 <_svfprintf_r+0x454>
 8009528:	aa23      	add	r2, sp, #140	; 0x8c
 800952a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800952c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800952e:	f004 fe9d 	bl	800e26c <__ssprint_r>
 8009532:	2800      	cmp	r0, #0
 8009534:	f47f ab1d 	bne.w	8008b72 <_svfprintf_r+0x1f2>
 8009538:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800953a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800953e:	e459      	b.n	8008df4 <_svfprintf_r+0x474>
 8009540:	f1bb 0f00 	cmp.w	fp, #0
 8009544:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 8009548:	f2c0 82da 	blt.w	8009b00 <_svfprintf_r+0x1180>
 800954c:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8009550:	9307      	str	r3, [sp, #28]
 8009552:	ea54 0305 	orrs.w	r3, r4, r5
 8009556:	f47f adcb 	bne.w	80090f0 <_svfprintf_r+0x770>
 800955a:	f1bb 0f00 	cmp.w	fp, #0
 800955e:	f43f ae8d 	beq.w	800927c <_svfprintf_r+0x8fc>
 8009562:	2700      	movs	r7, #0
 8009564:	e6b8      	b.n	80092d8 <_svfprintf_r+0x958>
 8009566:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8009568:	2d00      	cmp	r5, #0
 800956a:	f340 82cc 	ble.w	8009b06 <_svfprintf_r+0x1186>
 800956e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009570:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009572:	4293      	cmp	r3, r2
 8009574:	bfa8      	it	ge
 8009576:	4613      	movge	r3, r2
 8009578:	2b00      	cmp	r3, #0
 800957a:	461d      	mov	r5, r3
 800957c:	dd0d      	ble.n	800959a <_svfprintf_r+0xc1a>
 800957e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009580:	f8c9 6000 	str.w	r6, [r9]
 8009584:	3301      	adds	r3, #1
 8009586:	442c      	add	r4, r5
 8009588:	2b07      	cmp	r3, #7
 800958a:	9425      	str	r4, [sp, #148]	; 0x94
 800958c:	f8c9 5004 	str.w	r5, [r9, #4]
 8009590:	9324      	str	r3, [sp, #144]	; 0x90
 8009592:	f300 83a3 	bgt.w	8009cdc <_svfprintf_r+0x135c>
 8009596:	f109 0908 	add.w	r9, r9, #8
 800959a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800959c:	2d00      	cmp	r5, #0
 800959e:	bfa8      	it	ge
 80095a0:	1b5b      	subge	r3, r3, r5
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	461d      	mov	r5, r3
 80095a6:	f340 80f6 	ble.w	8009796 <_svfprintf_r+0xe16>
 80095aa:	4aba      	ldr	r2, [pc, #744]	; (8009894 <_svfprintf_r+0xf14>)
 80095ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80095ae:	920f      	str	r2, [sp, #60]	; 0x3c
 80095b0:	2d10      	cmp	r5, #16
 80095b2:	f340 8280 	ble.w	8009ab6 <_svfprintf_r+0x1136>
 80095b6:	4622      	mov	r2, r4
 80095b8:	2710      	movs	r7, #16
 80095ba:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80095be:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80095c0:	e005      	b.n	80095ce <_svfprintf_r+0xc4e>
 80095c2:	f109 0908 	add.w	r9, r9, #8
 80095c6:	3d10      	subs	r5, #16
 80095c8:	2d10      	cmp	r5, #16
 80095ca:	f340 8273 	ble.w	8009ab4 <_svfprintf_r+0x1134>
 80095ce:	3301      	adds	r3, #1
 80095d0:	3210      	adds	r2, #16
 80095d2:	2b07      	cmp	r3, #7
 80095d4:	9225      	str	r2, [sp, #148]	; 0x94
 80095d6:	9324      	str	r3, [sp, #144]	; 0x90
 80095d8:	f8c9 a000 	str.w	sl, [r9]
 80095dc:	f8c9 7004 	str.w	r7, [r9, #4]
 80095e0:	ddef      	ble.n	80095c2 <_svfprintf_r+0xc42>
 80095e2:	aa23      	add	r2, sp, #140	; 0x8c
 80095e4:	4621      	mov	r1, r4
 80095e6:	4658      	mov	r0, fp
 80095e8:	f004 fe40 	bl	800e26c <__ssprint_r>
 80095ec:	2800      	cmp	r0, #0
 80095ee:	f47f aac0 	bne.w	8008b72 <_svfprintf_r+0x1f2>
 80095f2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80095f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80095f6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 80095fa:	e7e4      	b.n	80095c6 <_svfprintf_r+0xc46>
 80095fc:	aa23      	add	r2, sp, #140	; 0x8c
 80095fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009600:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009602:	f004 fe33 	bl	800e26c <__ssprint_r>
 8009606:	2800      	cmp	r0, #0
 8009608:	f47f aab3 	bne.w	8008b72 <_svfprintf_r+0x1f2>
 800960c:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 8009610:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8009612:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8009616:	f7ff bbcd 	b.w	8008db4 <_svfprintf_r+0x434>
 800961a:	1e5e      	subs	r6, r3, #1
 800961c:	2e00      	cmp	r6, #0
 800961e:	f77f af48 	ble.w	80094b2 <_svfprintf_r+0xb32>
 8009622:	4b9c      	ldr	r3, [pc, #624]	; (8009894 <_svfprintf_r+0xf14>)
 8009624:	930f      	str	r3, [sp, #60]	; 0x3c
 8009626:	2e10      	cmp	r6, #16
 8009628:	dd2c      	ble.n	8009684 <_svfprintf_r+0xd04>
 800962a:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 800962e:	2710      	movs	r7, #16
 8009630:	46b0      	mov	r8, r6
 8009632:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8009636:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009638:	e006      	b.n	8009648 <_svfprintf_r+0xcc8>
 800963a:	f1a8 0810 	sub.w	r8, r8, #16
 800963e:	f1b8 0f10 	cmp.w	r8, #16
 8009642:	f109 0908 	add.w	r9, r9, #8
 8009646:	dd1a      	ble.n	800967e <_svfprintf_r+0xcfe>
 8009648:	3501      	adds	r5, #1
 800964a:	3410      	adds	r4, #16
 800964c:	2d07      	cmp	r5, #7
 800964e:	9425      	str	r4, [sp, #148]	; 0x94
 8009650:	9524      	str	r5, [sp, #144]	; 0x90
 8009652:	f8c9 a000 	str.w	sl, [r9]
 8009656:	f8c9 7004 	str.w	r7, [r9, #4]
 800965a:	ddee      	ble.n	800963a <_svfprintf_r+0xcba>
 800965c:	aa23      	add	r2, sp, #140	; 0x8c
 800965e:	4631      	mov	r1, r6
 8009660:	4658      	mov	r0, fp
 8009662:	f004 fe03 	bl	800e26c <__ssprint_r>
 8009666:	2800      	cmp	r0, #0
 8009668:	f47f aa83 	bne.w	8008b72 <_svfprintf_r+0x1f2>
 800966c:	f1a8 0810 	sub.w	r8, r8, #16
 8009670:	f1b8 0f10 	cmp.w	r8, #16
 8009674:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8009676:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8009678:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800967c:	dce4      	bgt.n	8009648 <_svfprintf_r+0xcc8>
 800967e:	4646      	mov	r6, r8
 8009680:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8009684:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009686:	3501      	adds	r5, #1
 8009688:	4434      	add	r4, r6
 800968a:	2d07      	cmp	r5, #7
 800968c:	9425      	str	r4, [sp, #148]	; 0x94
 800968e:	9524      	str	r5, [sp, #144]	; 0x90
 8009690:	e889 0048 	stmia.w	r9, {r3, r6}
 8009694:	f77f af0b 	ble.w	80094ae <_svfprintf_r+0xb2e>
 8009698:	aa23      	add	r2, sp, #140	; 0x8c
 800969a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800969c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800969e:	f004 fde5 	bl	800e26c <__ssprint_r>
 80096a2:	2800      	cmp	r0, #0
 80096a4:	f47f aa65 	bne.w	8008b72 <_svfprintf_r+0x1f2>
 80096a8:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80096aa:	9d24      	ldr	r5, [sp, #144]	; 0x90
 80096ac:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 80096b0:	e6ff      	b.n	80094b2 <_svfprintf_r+0xb32>
 80096b2:	9907      	ldr	r1, [sp, #28]
 80096b4:	f011 0210 	ands.w	r2, r1, #16
 80096b8:	f000 8108 	beq.w	80098cc <_svfprintf_r+0xf4c>
 80096bc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80096be:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 80096c2:	f1bb 0f00 	cmp.w	fp, #0
 80096c6:	6804      	ldr	r4, [r0, #0]
 80096c8:	f100 0704 	add.w	r7, r0, #4
 80096cc:	f04f 0500 	mov.w	r5, #0
 80096d0:	db26      	blt.n	8009720 <_svfprintf_r+0xda0>
 80096d2:	460a      	mov	r2, r1
 80096d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80096d8:	9207      	str	r2, [sp, #28]
 80096da:	ea54 0205 	orrs.w	r2, r4, r5
 80096de:	970e      	str	r7, [sp, #56]	; 0x38
 80096e0:	461f      	mov	r7, r3
 80096e2:	f47f aaef 	bne.w	8008cc4 <_svfprintf_r+0x344>
 80096e6:	e4c8      	b.n	800907a <_svfprintf_r+0x6fa>
 80096e8:	9b07      	ldr	r3, [sp, #28]
 80096ea:	06d9      	lsls	r1, r3, #27
 80096ec:	d42a      	bmi.n	8009744 <_svfprintf_r+0xdc4>
 80096ee:	9b07      	ldr	r3, [sp, #28]
 80096f0:	065a      	lsls	r2, r3, #25
 80096f2:	d527      	bpl.n	8009744 <_svfprintf_r+0xdc4>
 80096f4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80096f6:	f9b1 4000 	ldrsh.w	r4, [r1]
 80096fa:	3104      	adds	r1, #4
 80096fc:	17e5      	asrs	r5, r4, #31
 80096fe:	4622      	mov	r2, r4
 8009700:	462b      	mov	r3, r5
 8009702:	910e      	str	r1, [sp, #56]	; 0x38
 8009704:	f7ff bacb 	b.w	8008c9e <_svfprintf_r+0x31e>
 8009708:	990e      	ldr	r1, [sp, #56]	; 0x38
 800970a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800970e:	f1bb 0f00 	cmp.w	fp, #0
 8009712:	680c      	ldr	r4, [r1, #0]
 8009714:	f101 0704 	add.w	r7, r1, #4
 8009718:	f04f 0500 	mov.w	r5, #0
 800971c:	f280 8245 	bge.w	8009baa <_svfprintf_r+0x122a>
 8009720:	970e      	str	r7, [sp, #56]	; 0x38
 8009722:	461f      	mov	r7, r3
 8009724:	ea54 0305 	orrs.w	r3, r4, r5
 8009728:	f47f aacc 	bne.w	8008cc4 <_svfprintf_r+0x344>
 800972c:	e4aa      	b.n	8009084 <_svfprintf_r+0x704>
 800972e:	3301      	adds	r3, #1
 8009730:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009732:	9324      	str	r3, [sp, #144]	; 0x90
 8009734:	442c      	add	r4, r5
 8009736:	2b07      	cmp	r3, #7
 8009738:	9425      	str	r4, [sp, #148]	; 0x94
 800973a:	e889 0024 	stmia.w	r9, {r2, r5}
 800973e:	f77f abad 	ble.w	8008e9c <_svfprintf_r+0x51c>
 8009742:	e6c3      	b.n	80094cc <_svfprintf_r+0xb4c>
 8009744:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009746:	6814      	ldr	r4, [r2, #0]
 8009748:	4613      	mov	r3, r2
 800974a:	3304      	adds	r3, #4
 800974c:	17e5      	asrs	r5, r4, #31
 800974e:	4622      	mov	r2, r4
 8009750:	930e      	str	r3, [sp, #56]	; 0x38
 8009752:	2a00      	cmp	r2, #0
 8009754:	462b      	mov	r3, r5
 8009756:	f173 0300 	sbcs.w	r3, r3, #0
 800975a:	f6bf aaa5 	bge.w	8008ca8 <_svfprintf_r+0x328>
 800975e:	4264      	negs	r4, r4
 8009760:	f04f 072d 	mov.w	r7, #45	; 0x2d
 8009764:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8009768:	f1bb 0f00 	cmp.w	fp, #0
 800976c:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 8009770:	f6ff aaa8 	blt.w	8008cc4 <_svfprintf_r+0x344>
 8009774:	9b07      	ldr	r3, [sp, #28]
 8009776:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800977a:	9307      	str	r3, [sp, #28]
 800977c:	f7ff baa2 	b.w	8008cc4 <_svfprintf_r+0x344>
 8009780:	aa23      	add	r2, sp, #140	; 0x8c
 8009782:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009784:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009786:	f004 fd71 	bl	800e26c <__ssprint_r>
 800978a:	2800      	cmp	r0, #0
 800978c:	f47f a9f1 	bne.w	8008b72 <_svfprintf_r+0x1f2>
 8009790:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8009792:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8009796:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009798:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800979a:	4432      	add	r2, r6
 800979c:	4617      	mov	r7, r2
 800979e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80097a0:	4293      	cmp	r3, r2
 80097a2:	db47      	blt.n	8009834 <_svfprintf_r+0xeb4>
 80097a4:	9a07      	ldr	r2, [sp, #28]
 80097a6:	07d5      	lsls	r5, r2, #31
 80097a8:	d444      	bmi.n	8009834 <_svfprintf_r+0xeb4>
 80097aa:	9912      	ldr	r1, [sp, #72]	; 0x48
 80097ac:	440e      	add	r6, r1
 80097ae:	1bf5      	subs	r5, r6, r7
 80097b0:	1acb      	subs	r3, r1, r3
 80097b2:	429d      	cmp	r5, r3
 80097b4:	bfa8      	it	ge
 80097b6:	461d      	movge	r5, r3
 80097b8:	2d00      	cmp	r5, #0
 80097ba:	462e      	mov	r6, r5
 80097bc:	dd0d      	ble.n	80097da <_svfprintf_r+0xe5a>
 80097be:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80097c0:	f8c9 7000 	str.w	r7, [r9]
 80097c4:	3201      	adds	r2, #1
 80097c6:	442c      	add	r4, r5
 80097c8:	2a07      	cmp	r2, #7
 80097ca:	9425      	str	r4, [sp, #148]	; 0x94
 80097cc:	f8c9 5004 	str.w	r5, [r9, #4]
 80097d0:	9224      	str	r2, [sp, #144]	; 0x90
 80097d2:	f300 8312 	bgt.w	8009dfa <_svfprintf_r+0x147a>
 80097d6:	f109 0908 	add.w	r9, r9, #8
 80097da:	2e00      	cmp	r6, #0
 80097dc:	bfac      	ite	ge
 80097de:	1b9d      	subge	r5, r3, r6
 80097e0:	461d      	movlt	r5, r3
 80097e2:	2d00      	cmp	r5, #0
 80097e4:	f77f ab5c 	ble.w	8008ea0 <_svfprintf_r+0x520>
 80097e8:	4a2a      	ldr	r2, [pc, #168]	; (8009894 <_svfprintf_r+0xf14>)
 80097ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80097ec:	920f      	str	r2, [sp, #60]	; 0x3c
 80097ee:	2d10      	cmp	r5, #16
 80097f0:	dd9d      	ble.n	800972e <_svfprintf_r+0xdae>
 80097f2:	2610      	movs	r6, #16
 80097f4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80097f6:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80097fa:	e004      	b.n	8009806 <_svfprintf_r+0xe86>
 80097fc:	f109 0908 	add.w	r9, r9, #8
 8009800:	3d10      	subs	r5, #16
 8009802:	2d10      	cmp	r5, #16
 8009804:	dd93      	ble.n	800972e <_svfprintf_r+0xdae>
 8009806:	3301      	adds	r3, #1
 8009808:	3410      	adds	r4, #16
 800980a:	2b07      	cmp	r3, #7
 800980c:	9425      	str	r4, [sp, #148]	; 0x94
 800980e:	9324      	str	r3, [sp, #144]	; 0x90
 8009810:	f8c9 a000 	str.w	sl, [r9]
 8009814:	f8c9 6004 	str.w	r6, [r9, #4]
 8009818:	ddf0      	ble.n	80097fc <_svfprintf_r+0xe7c>
 800981a:	aa23      	add	r2, sp, #140	; 0x8c
 800981c:	4659      	mov	r1, fp
 800981e:	4638      	mov	r0, r7
 8009820:	f004 fd24 	bl	800e26c <__ssprint_r>
 8009824:	2800      	cmp	r0, #0
 8009826:	f47f a9a4 	bne.w	8008b72 <_svfprintf_r+0x1f2>
 800982a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800982c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800982e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8009832:	e7e5      	b.n	8009800 <_svfprintf_r+0xe80>
 8009834:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009836:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009838:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800983a:	f8c9 1000 	str.w	r1, [r9]
 800983e:	3201      	adds	r2, #1
 8009840:	4404      	add	r4, r0
 8009842:	2a07      	cmp	r2, #7
 8009844:	9425      	str	r4, [sp, #148]	; 0x94
 8009846:	f8c9 0004 	str.w	r0, [r9, #4]
 800984a:	9224      	str	r2, [sp, #144]	; 0x90
 800984c:	f300 82a5 	bgt.w	8009d9a <_svfprintf_r+0x141a>
 8009850:	f109 0908 	add.w	r9, r9, #8
 8009854:	e7a9      	b.n	80097aa <_svfprintf_r+0xe2a>
 8009856:	9b07      	ldr	r3, [sp, #28]
 8009858:	07d8      	lsls	r0, r3, #31
 800985a:	f53f adf4 	bmi.w	8009446 <_svfprintf_r+0xac6>
 800985e:	3501      	adds	r5, #1
 8009860:	3401      	adds	r4, #1
 8009862:	2301      	movs	r3, #1
 8009864:	2d07      	cmp	r5, #7
 8009866:	9425      	str	r4, [sp, #148]	; 0x94
 8009868:	9524      	str	r5, [sp, #144]	; 0x90
 800986a:	f8c9 6000 	str.w	r6, [r9]
 800986e:	f8c9 3004 	str.w	r3, [r9, #4]
 8009872:	f77f ae1c 	ble.w	80094ae <_svfprintf_r+0xb2e>
 8009876:	e70f      	b.n	8009698 <_svfprintf_r+0xd18>
 8009878:	aa23      	add	r2, sp, #140	; 0x8c
 800987a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800987c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800987e:	f004 fcf5 	bl	800e26c <__ssprint_r>
 8009882:	2800      	cmp	r0, #0
 8009884:	f47f a975 	bne.w	8008b72 <_svfprintf_r+0x1f2>
 8009888:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800988a:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800988c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8009890:	e5e7      	b.n	8009462 <_svfprintf_r+0xae2>
 8009892:	bf00      	nop
 8009894:	0800ee28 	.word	0x0800ee28
 8009898:	aa23      	add	r2, sp, #140	; 0x8c
 800989a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800989c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800989e:	f004 fce5 	bl	800e26c <__ssprint_r>
 80098a2:	2800      	cmp	r0, #0
 80098a4:	f47f a965 	bne.w	8008b72 <_svfprintf_r+0x1f2>
 80098a8:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80098aa:	9d24      	ldr	r5, [sp, #144]	; 0x90
 80098ac:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 80098b0:	e5e6      	b.n	8009480 <_svfprintf_r+0xb00>
 80098b2:	aa23      	add	r2, sp, #140	; 0x8c
 80098b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80098b6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80098b8:	f004 fcd8 	bl	800e26c <__ssprint_r>
 80098bc:	2800      	cmp	r0, #0
 80098be:	f47f a958 	bne.w	8008b72 <_svfprintf_r+0x1f2>
 80098c2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80098c4:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 80098c8:	f7ff ba98 	b.w	8008dfc <_svfprintf_r+0x47c>
 80098cc:	9907      	ldr	r1, [sp, #28]
 80098ce:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 80098d2:	f43f af19 	beq.w	8009708 <_svfprintf_r+0xd88>
 80098d6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80098d8:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
 80098dc:	4603      	mov	r3, r0
 80098de:	f1bb 0f00 	cmp.w	fp, #0
 80098e2:	f103 0304 	add.w	r3, r3, #4
 80098e6:	8804      	ldrh	r4, [r0, #0]
 80098e8:	f04f 0500 	mov.w	r5, #0
 80098ec:	f2c0 81b9 	blt.w	8009c62 <_svfprintf_r+0x12e2>
 80098f0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80098f4:	9107      	str	r1, [sp, #28]
 80098f6:	ea54 0105 	orrs.w	r1, r4, r5
 80098fa:	930e      	str	r3, [sp, #56]	; 0x38
 80098fc:	4617      	mov	r7, r2
 80098fe:	f47f a9e1 	bne.w	8008cc4 <_svfprintf_r+0x344>
 8009902:	f7ff bbba 	b.w	800907a <_svfprintf_r+0x6fa>
 8009906:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8009908:	4622      	mov	r2, r4
 800990a:	4620      	mov	r0, r4
 800990c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800990e:	4623      	mov	r3, r4
 8009910:	4621      	mov	r1, r4
 8009912:	f7f7 fc47 	bl	80011a4 <__aeabi_dcmpun>
 8009916:	2800      	cmp	r0, #0
 8009918:	f040 8315 	bne.w	8009f46 <_svfprintf_r+0x15c6>
 800991c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800991e:	f1bb 3fff 	cmp.w	fp, #4294967295
 8009922:	f023 0320 	bic.w	r3, r3, #32
 8009926:	930d      	str	r3, [sp, #52]	; 0x34
 8009928:	f000 8276 	beq.w	8009e18 <_svfprintf_r+0x1498>
 800992c:	2b47      	cmp	r3, #71	; 0x47
 800992e:	f000 8192 	beq.w	8009c56 <_svfprintf_r+0x12d6>
 8009932:	9b07      	ldr	r3, [sp, #28]
 8009934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009938:	9310      	str	r3, [sp, #64]	; 0x40
 800993a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800993c:	1e1f      	subs	r7, r3, #0
 800993e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009940:	9308      	str	r3, [sp, #32]
 8009942:	bfbb      	ittet	lt
 8009944:	463b      	movlt	r3, r7
 8009946:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
 800994a:	2300      	movge	r3, #0
 800994c:	232d      	movlt	r3, #45	; 0x2d
 800994e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009950:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009952:	2b66      	cmp	r3, #102	; 0x66
 8009954:	f000 8263 	beq.w	8009e1e <_svfprintf_r+0x149e>
 8009958:	2b46      	cmp	r3, #70	; 0x46
 800995a:	f000 815e 	beq.w	8009c1a <_svfprintf_r+0x129a>
 800995e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009960:	9a08      	ldr	r2, [sp, #32]
 8009962:	2b45      	cmp	r3, #69	; 0x45
 8009964:	a821      	add	r0, sp, #132	; 0x84
 8009966:	a91e      	add	r1, sp, #120	; 0x78
 8009968:	bf0c      	ite	eq
 800996a:	f10b 0501 	addeq.w	r5, fp, #1
 800996e:	465d      	movne	r5, fp
 8009970:	9004      	str	r0, [sp, #16]
 8009972:	9103      	str	r1, [sp, #12]
 8009974:	a81d      	add	r0, sp, #116	; 0x74
 8009976:	2102      	movs	r1, #2
 8009978:	463b      	mov	r3, r7
 800997a:	9002      	str	r0, [sp, #8]
 800997c:	9501      	str	r5, [sp, #4]
 800997e:	9100      	str	r1, [sp, #0]
 8009980:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009982:	f002 f805 	bl	800b990 <_dtoa_r>
 8009986:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009988:	2b67      	cmp	r3, #103	; 0x67
 800998a:	4606      	mov	r6, r0
 800998c:	f040 827d 	bne.w	8009e8a <_svfprintf_r+0x150a>
 8009990:	9b07      	ldr	r3, [sp, #28]
 8009992:	07da      	lsls	r2, r3, #31
 8009994:	f140 82bf 	bpl.w	8009f16 <_svfprintf_r+0x1596>
 8009998:	1974      	adds	r4, r6, r5
 800999a:	9808      	ldr	r0, [sp, #32]
 800999c:	4639      	mov	r1, r7
 800999e:	2200      	movs	r2, #0
 80099a0:	2300      	movs	r3, #0
 80099a2:	f7f7 fbcd 	bl	8001140 <__aeabi_dcmpeq>
 80099a6:	2800      	cmp	r0, #0
 80099a8:	f040 81a4 	bne.w	8009cf4 <_svfprintf_r+0x1374>
 80099ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099ae:	429c      	cmp	r4, r3
 80099b0:	d906      	bls.n	80099c0 <_svfprintf_r+0x1040>
 80099b2:	2130      	movs	r1, #48	; 0x30
 80099b4:	1c5a      	adds	r2, r3, #1
 80099b6:	9221      	str	r2, [sp, #132]	; 0x84
 80099b8:	7019      	strb	r1, [r3, #0]
 80099ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099bc:	429c      	cmp	r4, r3
 80099be:	d8f9      	bhi.n	80099b4 <_svfprintf_r+0x1034>
 80099c0:	1b9b      	subs	r3, r3, r6
 80099c2:	9312      	str	r3, [sp, #72]	; 0x48
 80099c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099c6:	2b47      	cmp	r3, #71	; 0x47
 80099c8:	f000 8181 	beq.w	8009cce <_svfprintf_r+0x134e>
 80099cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80099ce:	2b65      	cmp	r3, #101	; 0x65
 80099d0:	f340 826a 	ble.w	8009ea8 <_svfprintf_r+0x1528>
 80099d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80099d6:	2b66      	cmp	r3, #102	; 0x66
 80099d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80099da:	9313      	str	r3, [sp, #76]	; 0x4c
 80099dc:	f000 8247 	beq.w	8009e6e <_svfprintf_r+0x14ee>
 80099e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80099e2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80099e4:	428a      	cmp	r2, r1
 80099e6:	f2c0 8236 	blt.w	8009e56 <_svfprintf_r+0x14d6>
 80099ea:	9b07      	ldr	r3, [sp, #28]
 80099ec:	07d9      	lsls	r1, r3, #31
 80099ee:	f100 8289 	bmi.w	8009f04 <_svfprintf_r+0x1584>
 80099f2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80099f6:	920d      	str	r2, [sp, #52]	; 0x34
 80099f8:	2267      	movs	r2, #103	; 0x67
 80099fa:	9211      	str	r2, [sp, #68]	; 0x44
 80099fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80099fe:	2a00      	cmp	r2, #0
 8009a00:	f040 815b 	bne.w	8009cba <_svfprintf_r+0x133a>
 8009a04:	9308      	str	r3, [sp, #32]
 8009a06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009a08:	9307      	str	r3, [sp, #28]
 8009a0a:	4693      	mov	fp, r2
 8009a0c:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 8009a10:	f7ff b97c 	b.w	8008d0c <_svfprintf_r+0x38c>
 8009a14:	9b07      	ldr	r3, [sp, #28]
 8009a16:	06df      	lsls	r7, r3, #27
 8009a18:	d40b      	bmi.n	8009a32 <_svfprintf_r+0x10b2>
 8009a1a:	9b07      	ldr	r3, [sp, #28]
 8009a1c:	065e      	lsls	r6, r3, #25
 8009a1e:	d508      	bpl.n	8009a32 <_svfprintf_r+0x10b2>
 8009a20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a22:	6813      	ldr	r3, [r2, #0]
 8009a24:	3204      	adds	r2, #4
 8009a26:	920e      	str	r2, [sp, #56]	; 0x38
 8009a28:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8009a2c:	801a      	strh	r2, [r3, #0]
 8009a2e:	f7fe bfcd 	b.w	80089cc <_svfprintf_r+0x4c>
 8009a32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a34:	6813      	ldr	r3, [r2, #0]
 8009a36:	3204      	adds	r2, #4
 8009a38:	920e      	str	r2, [sp, #56]	; 0x38
 8009a3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a3c:	601a      	str	r2, [r3, #0]
 8009a3e:	f7fe bfc5 	b.w	80089cc <_svfprintf_r+0x4c>
 8009a42:	9b07      	ldr	r3, [sp, #28]
 8009a44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a46:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009a4a:	4613      	mov	r3, r2
 8009a4c:	f000 810e 	beq.w	8009c6c <_svfprintf_r+0x12ec>
 8009a50:	3304      	adds	r3, #4
 8009a52:	8814      	ldrh	r4, [r2, #0]
 8009a54:	930e      	str	r3, [sp, #56]	; 0x38
 8009a56:	2500      	movs	r5, #0
 8009a58:	f7ff bb2c 	b.w	80090b4 <_svfprintf_r+0x734>
 8009a5c:	9907      	ldr	r1, [sp, #28]
 8009a5e:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 8009a62:	d017      	beq.n	8009a94 <_svfprintf_r+0x1114>
 8009a64:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009a66:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	f1bb 0f00 	cmp.w	fp, #0
 8009a70:	f103 0304 	add.w	r3, r3, #4
 8009a74:	8804      	ldrh	r4, [r0, #0]
 8009a76:	f04f 0500 	mov.w	r5, #0
 8009a7a:	f2c0 80f5 	blt.w	8009c68 <_svfprintf_r+0x12e8>
 8009a7e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009a82:	9107      	str	r1, [sp, #28]
 8009a84:	ea54 0105 	orrs.w	r1, r4, r5
 8009a88:	930e      	str	r3, [sp, #56]	; 0x38
 8009a8a:	f43f ac13 	beq.w	80092b4 <_svfprintf_r+0x934>
 8009a8e:	4617      	mov	r7, r2
 8009a90:	f7ff b89b 	b.w	8008bca <_svfprintf_r+0x24a>
 8009a94:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009a96:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8009a9a:	f1bb 0f00 	cmp.w	fp, #0
 8009a9e:	680c      	ldr	r4, [r1, #0]
 8009aa0:	f101 0704 	add.w	r7, r1, #4
 8009aa4:	f04f 0500 	mov.w	r5, #0
 8009aa8:	f280 8081 	bge.w	8009bae <_svfprintf_r+0x122e>
 8009aac:	970e      	str	r7, [sp, #56]	; 0x38
 8009aae:	2700      	movs	r7, #0
 8009ab0:	f7ff b88b 	b.w	8008bca <_svfprintf_r+0x24a>
 8009ab4:	4614      	mov	r4, r2
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009aba:	9324      	str	r3, [sp, #144]	; 0x90
 8009abc:	442c      	add	r4, r5
 8009abe:	2b07      	cmp	r3, #7
 8009ac0:	9425      	str	r4, [sp, #148]	; 0x94
 8009ac2:	e889 0024 	stmia.w	r9, {r2, r5}
 8009ac6:	f73f ae5b 	bgt.w	8009780 <_svfprintf_r+0xe00>
 8009aca:	f109 0908 	add.w	r9, r9, #8
 8009ace:	e662      	b.n	8009796 <_svfprintf_r+0xe16>
 8009ad0:	2700      	movs	r7, #0
 8009ad2:	45bb      	cmp	fp, r7
 8009ad4:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 8009ad8:	f6ff abfe 	blt.w	80092d8 <_svfprintf_r+0x958>
 8009adc:	9b07      	ldr	r3, [sp, #28]
 8009ade:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ae2:	9307      	str	r3, [sp, #28]
 8009ae4:	f7ff bbc6 	b.w	8009274 <_svfprintf_r+0x8f4>
 8009ae8:	aa23      	add	r2, sp, #140	; 0x8c
 8009aea:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009aec:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009aee:	f004 fbbd 	bl	800e26c <__ssprint_r>
 8009af2:	2800      	cmp	r0, #0
 8009af4:	f47f a83d 	bne.w	8008b72 <_svfprintf_r+0x1f2>
 8009af8:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8009afa:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8009afe:	e40d      	b.n	800931c <_svfprintf_r+0x99c>
 8009b00:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8009b02:	f7ff bbe2 	b.w	80092ca <_svfprintf_r+0x94a>
 8009b06:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009b08:	4ab1      	ldr	r2, [pc, #708]	; (8009dd0 <_svfprintf_r+0x1450>)
 8009b0a:	f8c9 2000 	str.w	r2, [r9]
 8009b0e:	3301      	adds	r3, #1
 8009b10:	3401      	adds	r4, #1
 8009b12:	2201      	movs	r2, #1
 8009b14:	2b07      	cmp	r3, #7
 8009b16:	9425      	str	r4, [sp, #148]	; 0x94
 8009b18:	9324      	str	r3, [sp, #144]	; 0x90
 8009b1a:	f8c9 2004 	str.w	r2, [r9, #4]
 8009b1e:	dc6f      	bgt.n	8009c00 <_svfprintf_r+0x1280>
 8009b20:	f109 0908 	add.w	r9, r9, #8
 8009b24:	b92d      	cbnz	r5, 8009b32 <_svfprintf_r+0x11b2>
 8009b26:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009b28:	b91b      	cbnz	r3, 8009b32 <_svfprintf_r+0x11b2>
 8009b2a:	9b07      	ldr	r3, [sp, #28]
 8009b2c:	07df      	lsls	r7, r3, #31
 8009b2e:	f57f a9b7 	bpl.w	8008ea0 <_svfprintf_r+0x520>
 8009b32:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009b34:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009b36:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009b38:	f8c9 2000 	str.w	r2, [r9]
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	440c      	add	r4, r1
 8009b40:	2b07      	cmp	r3, #7
 8009b42:	9425      	str	r4, [sp, #148]	; 0x94
 8009b44:	f8c9 1004 	str.w	r1, [r9, #4]
 8009b48:	9324      	str	r3, [sp, #144]	; 0x90
 8009b4a:	f300 81c9 	bgt.w	8009ee0 <_svfprintf_r+0x1560>
 8009b4e:	f109 0908 	add.w	r9, r9, #8
 8009b52:	426d      	negs	r5, r5
 8009b54:	2d00      	cmp	r5, #0
 8009b56:	f340 80a3 	ble.w	8009ca0 <_svfprintf_r+0x1320>
 8009b5a:	4a9e      	ldr	r2, [pc, #632]	; (8009dd4 <_svfprintf_r+0x1454>)
 8009b5c:	920f      	str	r2, [sp, #60]	; 0x3c
 8009b5e:	2d10      	cmp	r5, #16
 8009b60:	f340 8129 	ble.w	8009db6 <_svfprintf_r+0x1436>
 8009b64:	4622      	mov	r2, r4
 8009b66:	2710      	movs	r7, #16
 8009b68:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8009b6c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009b6e:	e005      	b.n	8009b7c <_svfprintf_r+0x11fc>
 8009b70:	f109 0908 	add.w	r9, r9, #8
 8009b74:	3d10      	subs	r5, #16
 8009b76:	2d10      	cmp	r5, #16
 8009b78:	f340 811c 	ble.w	8009db4 <_svfprintf_r+0x1434>
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	3210      	adds	r2, #16
 8009b80:	2b07      	cmp	r3, #7
 8009b82:	9225      	str	r2, [sp, #148]	; 0x94
 8009b84:	9324      	str	r3, [sp, #144]	; 0x90
 8009b86:	f8c9 a000 	str.w	sl, [r9]
 8009b8a:	f8c9 7004 	str.w	r7, [r9, #4]
 8009b8e:	ddef      	ble.n	8009b70 <_svfprintf_r+0x11f0>
 8009b90:	aa23      	add	r2, sp, #140	; 0x8c
 8009b92:	4621      	mov	r1, r4
 8009b94:	4658      	mov	r0, fp
 8009b96:	f004 fb69 	bl	800e26c <__ssprint_r>
 8009b9a:	2800      	cmp	r0, #0
 8009b9c:	f47e afe9 	bne.w	8008b72 <_svfprintf_r+0x1f2>
 8009ba0:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8009ba2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009ba4:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8009ba8:	e7e4      	b.n	8009b74 <_svfprintf_r+0x11f4>
 8009baa:	9a07      	ldr	r2, [sp, #28]
 8009bac:	e592      	b.n	80096d4 <_svfprintf_r+0xd54>
 8009bae:	9a07      	ldr	r2, [sp, #28]
 8009bb0:	f7ff ba35 	b.w	800901e <_svfprintf_r+0x69e>
 8009bb4:	9b07      	ldr	r3, [sp, #28]
 8009bb6:	f043 0320 	orr.w	r3, r3, #32
 8009bba:	9307      	str	r3, [sp, #28]
 8009bbc:	f108 0801 	add.w	r8, r8, #1
 8009bc0:	f898 3000 	ldrb.w	r3, [r8]
 8009bc4:	f7fe bf35 	b.w	8008a32 <_svfprintf_r+0xb2>
 8009bc8:	aa23      	add	r2, sp, #140	; 0x8c
 8009bca:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009bcc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009bce:	f004 fb4d 	bl	800e26c <__ssprint_r>
 8009bd2:	2800      	cmp	r0, #0
 8009bd4:	f47e afcd 	bne.w	8008b72 <_svfprintf_r+0x1f2>
 8009bd8:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8009bda:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8009bde:	f7ff bbb5 	b.w	800934c <_svfprintf_r+0x9cc>
 8009be2:	2140      	movs	r1, #64	; 0x40
 8009be4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009be6:	f003 fab7 	bl	800d158 <_malloc_r>
 8009bea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bec:	6010      	str	r0, [r2, #0]
 8009bee:	6110      	str	r0, [r2, #16]
 8009bf0:	2800      	cmp	r0, #0
 8009bf2:	f000 81f3 	beq.w	8009fdc <_svfprintf_r+0x165c>
 8009bf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bf8:	2340      	movs	r3, #64	; 0x40
 8009bfa:	6153      	str	r3, [r2, #20]
 8009bfc:	f7fe bed7 	b.w	80089ae <_svfprintf_r+0x2e>
 8009c00:	aa23      	add	r2, sp, #140	; 0x8c
 8009c02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c04:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009c06:	f004 fb31 	bl	800e26c <__ssprint_r>
 8009c0a:	2800      	cmp	r0, #0
 8009c0c:	f47e afb1 	bne.w	8008b72 <_svfprintf_r+0x1f2>
 8009c10:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8009c12:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8009c14:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8009c18:	e784      	b.n	8009b24 <_svfprintf_r+0x11a4>
 8009c1a:	a821      	add	r0, sp, #132	; 0x84
 8009c1c:	a91e      	add	r1, sp, #120	; 0x78
 8009c1e:	9004      	str	r0, [sp, #16]
 8009c20:	9103      	str	r1, [sp, #12]
 8009c22:	a81d      	add	r0, sp, #116	; 0x74
 8009c24:	2103      	movs	r1, #3
 8009c26:	9002      	str	r0, [sp, #8]
 8009c28:	9a08      	ldr	r2, [sp, #32]
 8009c2a:	f8cd b004 	str.w	fp, [sp, #4]
 8009c2e:	463b      	mov	r3, r7
 8009c30:	9100      	str	r1, [sp, #0]
 8009c32:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009c34:	f001 feac 	bl	800b990 <_dtoa_r>
 8009c38:	465d      	mov	r5, fp
 8009c3a:	4606      	mov	r6, r0
 8009c3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c3e:	2b46      	cmp	r3, #70	; 0x46
 8009c40:	eb06 0405 	add.w	r4, r6, r5
 8009c44:	f47f aea9 	bne.w	800999a <_svfprintf_r+0x101a>
 8009c48:	7833      	ldrb	r3, [r6, #0]
 8009c4a:	2b30      	cmp	r3, #48	; 0x30
 8009c4c:	f000 816d 	beq.w	8009f2a <_svfprintf_r+0x15aa>
 8009c50:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8009c52:	442c      	add	r4, r5
 8009c54:	e6a1      	b.n	800999a <_svfprintf_r+0x101a>
 8009c56:	f1bb 0f00 	cmp.w	fp, #0
 8009c5a:	bf08      	it	eq
 8009c5c:	f04f 0b01 	moveq.w	fp, #1
 8009c60:	e667      	b.n	8009932 <_svfprintf_r+0xfb2>
 8009c62:	930e      	str	r3, [sp, #56]	; 0x38
 8009c64:	4617      	mov	r7, r2
 8009c66:	e55d      	b.n	8009724 <_svfprintf_r+0xda4>
 8009c68:	930e      	str	r3, [sp, #56]	; 0x38
 8009c6a:	e720      	b.n	8009aae <_svfprintf_r+0x112e>
 8009c6c:	3304      	adds	r3, #4
 8009c6e:	6814      	ldr	r4, [r2, #0]
 8009c70:	930e      	str	r3, [sp, #56]	; 0x38
 8009c72:	2500      	movs	r5, #0
 8009c74:	f7ff ba1e 	b.w	80090b4 <_svfprintf_r+0x734>
 8009c78:	4630      	mov	r0, r6
 8009c7a:	f7f6 fd81 	bl	8000780 <strlen>
 8009c7e:	46a3      	mov	fp, r4
 8009c80:	4603      	mov	r3, r0
 8009c82:	900d      	str	r0, [sp, #52]	; 0x34
 8009c84:	f7ff baeb 	b.w	800925e <_svfprintf_r+0x8de>
 8009c88:	aa23      	add	r2, sp, #140	; 0x8c
 8009c8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c8c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009c8e:	f004 faed 	bl	800e26c <__ssprint_r>
 8009c92:	2800      	cmp	r0, #0
 8009c94:	f47e af6d 	bne.w	8008b72 <_svfprintf_r+0x1f2>
 8009c98:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8009c9a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009c9c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8009ca0:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009ca2:	f8c9 6000 	str.w	r6, [r9]
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	440c      	add	r4, r1
 8009caa:	2b07      	cmp	r3, #7
 8009cac:	9425      	str	r4, [sp, #148]	; 0x94
 8009cae:	9324      	str	r3, [sp, #144]	; 0x90
 8009cb0:	f8c9 1004 	str.w	r1, [r9, #4]
 8009cb4:	f77f a8f2 	ble.w	8008e9c <_svfprintf_r+0x51c>
 8009cb8:	e408      	b.n	80094cc <_svfprintf_r+0xb4c>
 8009cba:	272d      	movs	r7, #45	; 0x2d
 8009cbc:	9308      	str	r3, [sp, #32]
 8009cbe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009cc0:	9307      	str	r3, [sp, #28]
 8009cc2:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 8009cc6:	f04f 0b00 	mov.w	fp, #0
 8009cca:	f7ff b820 	b.w	8008d0e <_svfprintf_r+0x38e>
 8009cce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009cd0:	1cdd      	adds	r5, r3, #3
 8009cd2:	db11      	blt.n	8009cf8 <_svfprintf_r+0x1378>
 8009cd4:	459b      	cmp	fp, r3
 8009cd6:	db0f      	blt.n	8009cf8 <_svfprintf_r+0x1378>
 8009cd8:	9313      	str	r3, [sp, #76]	; 0x4c
 8009cda:	e681      	b.n	80099e0 <_svfprintf_r+0x1060>
 8009cdc:	aa23      	add	r2, sp, #140	; 0x8c
 8009cde:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ce0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009ce2:	f004 fac3 	bl	800e26c <__ssprint_r>
 8009ce6:	2800      	cmp	r0, #0
 8009ce8:	f47e af43 	bne.w	8008b72 <_svfprintf_r+0x1f2>
 8009cec:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8009cee:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8009cf2:	e452      	b.n	800959a <_svfprintf_r+0xc1a>
 8009cf4:	4623      	mov	r3, r4
 8009cf6:	e663      	b.n	80099c0 <_svfprintf_r+0x1040>
 8009cf8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009cfa:	3a02      	subs	r2, #2
 8009cfc:	9211      	str	r2, [sp, #68]	; 0x44
 8009cfe:	3b01      	subs	r3, #1
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8009d06:	931d      	str	r3, [sp, #116]	; 0x74
 8009d08:	bfb8      	it	lt
 8009d0a:	425b      	neglt	r3, r3
 8009d0c:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
 8009d10:	bfb4      	ite	lt
 8009d12:	222d      	movlt	r2, #45	; 0x2d
 8009d14:	222b      	movge	r2, #43	; 0x2b
 8009d16:	2b09      	cmp	r3, #9
 8009d18:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
 8009d1c:	f340 80fd 	ble.w	8009f1a <_svfprintf_r+0x159a>
 8009d20:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
 8009d24:	4604      	mov	r4, r0
 8009d26:	4a2c      	ldr	r2, [pc, #176]	; (8009dd8 <_svfprintf_r+0x1458>)
 8009d28:	fb82 2103 	smull	r2, r1, r2, r3
 8009d2c:	17da      	asrs	r2, r3, #31
 8009d2e:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8009d32:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8009d36:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8009d3a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009d3e:	2a09      	cmp	r2, #9
 8009d40:	4613      	mov	r3, r2
 8009d42:	f804 1d01 	strb.w	r1, [r4, #-1]!
 8009d46:	dcee      	bgt.n	8009d26 <_svfprintf_r+0x13a6>
 8009d48:	4621      	mov	r1, r4
 8009d4a:	3330      	adds	r3, #48	; 0x30
 8009d4c:	b2da      	uxtb	r2, r3
 8009d4e:	f801 2d01 	strb.w	r2, [r1, #-1]!
 8009d52:	4288      	cmp	r0, r1
 8009d54:	f240 813f 	bls.w	8009fd6 <_svfprintf_r+0x1656>
 8009d58:	f10d 017e 	add.w	r1, sp, #126	; 0x7e
 8009d5c:	4623      	mov	r3, r4
 8009d5e:	e001      	b.n	8009d64 <_svfprintf_r+0x13e4>
 8009d60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d64:	f801 2b01 	strb.w	r2, [r1], #1
 8009d68:	4298      	cmp	r0, r3
 8009d6a:	d1f9      	bne.n	8009d60 <_svfprintf_r+0x13e0>
 8009d6c:	1c43      	adds	r3, r0, #1
 8009d6e:	1b1b      	subs	r3, r3, r4
 8009d70:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
 8009d74:	4413      	add	r3, r2
 8009d76:	aa1f      	add	r2, sp, #124	; 0x7c
 8009d78:	1a9b      	subs	r3, r3, r2
 8009d7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009d7c:	9319      	str	r3, [sp, #100]	; 0x64
 8009d7e:	2a01      	cmp	r2, #1
 8009d80:	4413      	add	r3, r2
 8009d82:	930d      	str	r3, [sp, #52]	; 0x34
 8009d84:	f340 80f6 	ble.w	8009f74 <_svfprintf_r+0x15f4>
 8009d88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d8a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009d8c:	4413      	add	r3, r2
 8009d8e:	2200      	movs	r2, #0
 8009d90:	930d      	str	r3, [sp, #52]	; 0x34
 8009d92:	9213      	str	r2, [sp, #76]	; 0x4c
 8009d94:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009d98:	e630      	b.n	80099fc <_svfprintf_r+0x107c>
 8009d9a:	aa23      	add	r2, sp, #140	; 0x8c
 8009d9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d9e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009da0:	f004 fa64 	bl	800e26c <__ssprint_r>
 8009da4:	2800      	cmp	r0, #0
 8009da6:	f47e aee4 	bne.w	8008b72 <_svfprintf_r+0x1f2>
 8009daa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009dac:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8009dae:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8009db2:	e4fa      	b.n	80097aa <_svfprintf_r+0xe2a>
 8009db4:	4614      	mov	r4, r2
 8009db6:	3301      	adds	r3, #1
 8009db8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009dba:	9324      	str	r3, [sp, #144]	; 0x90
 8009dbc:	442c      	add	r4, r5
 8009dbe:	2b07      	cmp	r3, #7
 8009dc0:	9425      	str	r4, [sp, #148]	; 0x94
 8009dc2:	e889 0024 	stmia.w	r9, {r2, r5}
 8009dc6:	f73f af5f 	bgt.w	8009c88 <_svfprintf_r+0x1308>
 8009dca:	f109 0908 	add.w	r9, r9, #8
 8009dce:	e767      	b.n	8009ca0 <_svfprintf_r+0x1320>
 8009dd0:	0800ee78 	.word	0x0800ee78
 8009dd4:	0800ee28 	.word	0x0800ee28
 8009dd8:	66666667 	.word	0x66666667
 8009ddc:	2d06      	cmp	r5, #6
 8009dde:	462b      	mov	r3, r5
 8009de0:	bf28      	it	cs
 8009de2:	2306      	movcs	r3, #6
 8009de4:	930d      	str	r3, [sp, #52]	; 0x34
 8009de6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009dea:	46b3      	mov	fp, r6
 8009dec:	970e      	str	r7, [sp, #56]	; 0x38
 8009dee:	9613      	str	r6, [sp, #76]	; 0x4c
 8009df0:	4637      	mov	r7, r6
 8009df2:	9308      	str	r3, [sp, #32]
 8009df4:	4e8b      	ldr	r6, [pc, #556]	; (800a024 <_svfprintf_r+0x16a4>)
 8009df6:	f7fe bf89 	b.w	8008d0c <_svfprintf_r+0x38c>
 8009dfa:	aa23      	add	r2, sp, #140	; 0x8c
 8009dfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009dfe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009e00:	f004 fa34 	bl	800e26c <__ssprint_r>
 8009e04:	2800      	cmp	r0, #0
 8009e06:	f47e aeb4 	bne.w	8008b72 <_svfprintf_r+0x1f2>
 8009e0a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009e0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009e0e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8009e10:	1ad3      	subs	r3, r2, r3
 8009e12:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8009e16:	e4e0      	b.n	80097da <_svfprintf_r+0xe5a>
 8009e18:	f04f 0b06 	mov.w	fp, #6
 8009e1c:	e589      	b.n	8009932 <_svfprintf_r+0xfb2>
 8009e1e:	a821      	add	r0, sp, #132	; 0x84
 8009e20:	a91e      	add	r1, sp, #120	; 0x78
 8009e22:	9004      	str	r0, [sp, #16]
 8009e24:	9103      	str	r1, [sp, #12]
 8009e26:	a81d      	add	r0, sp, #116	; 0x74
 8009e28:	2103      	movs	r1, #3
 8009e2a:	9002      	str	r0, [sp, #8]
 8009e2c:	9a08      	ldr	r2, [sp, #32]
 8009e2e:	f8cd b004 	str.w	fp, [sp, #4]
 8009e32:	463b      	mov	r3, r7
 8009e34:	9100      	str	r1, [sp, #0]
 8009e36:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009e38:	f001 fdaa 	bl	800b990 <_dtoa_r>
 8009e3c:	465d      	mov	r5, fp
 8009e3e:	4606      	mov	r6, r0
 8009e40:	eb00 040b 	add.w	r4, r0, fp
 8009e44:	e700      	b.n	8009c48 <_svfprintf_r+0x12c8>
 8009e46:	272d      	movs	r7, #45	; 0x2d
 8009e48:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 8009e4c:	f7ff b8ae 	b.w	8008fac <_svfprintf_r+0x62c>
 8009e50:	9307      	str	r3, [sp, #28]
 8009e52:	f7ff b94d 	b.w	80090f0 <_svfprintf_r+0x770>
 8009e56:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009e58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e5a:	4413      	add	r3, r2
 8009e5c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009e5e:	930d      	str	r3, [sp, #52]	; 0x34
 8009e60:	2a00      	cmp	r2, #0
 8009e62:	dd7f      	ble.n	8009f64 <_svfprintf_r+0x15e4>
 8009e64:	2267      	movs	r2, #103	; 0x67
 8009e66:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009e6a:	9211      	str	r2, [sp, #68]	; 0x44
 8009e6c:	e5c6      	b.n	80099fc <_svfprintf_r+0x107c>
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	f340 8098 	ble.w	8009fa4 <_svfprintf_r+0x1624>
 8009e74:	f1bb 0f00 	cmp.w	fp, #0
 8009e78:	d16b      	bne.n	8009f52 <_svfprintf_r+0x15d2>
 8009e7a:	9a07      	ldr	r2, [sp, #28]
 8009e7c:	07d4      	lsls	r4, r2, #31
 8009e7e:	d468      	bmi.n	8009f52 <_svfprintf_r+0x15d2>
 8009e80:	461a      	mov	r2, r3
 8009e82:	920d      	str	r2, [sp, #52]	; 0x34
 8009e84:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009e88:	e5b8      	b.n	80099fc <_svfprintf_r+0x107c>
 8009e8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e8c:	2b47      	cmp	r3, #71	; 0x47
 8009e8e:	f47f ad83 	bne.w	8009998 <_svfprintf_r+0x1018>
 8009e92:	9b07      	ldr	r3, [sp, #28]
 8009e94:	07db      	lsls	r3, r3, #31
 8009e96:	f53f aed1 	bmi.w	8009c3c <_svfprintf_r+0x12bc>
 8009e9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e9c:	1b9b      	subs	r3, r3, r6
 8009e9e:	9312      	str	r3, [sp, #72]	; 0x48
 8009ea0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ea2:	2b47      	cmp	r3, #71	; 0x47
 8009ea4:	f43f af13 	beq.w	8009cce <_svfprintf_r+0x134e>
 8009ea8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009eaa:	e728      	b.n	8009cfe <_svfprintf_r+0x137e>
 8009eac:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8009eb0:	970e      	str	r7, [sp, #56]	; 0x38
 8009eb2:	9308      	str	r3, [sp, #32]
 8009eb4:	950d      	str	r5, [sp, #52]	; 0x34
 8009eb6:	4683      	mov	fp, r0
 8009eb8:	9013      	str	r0, [sp, #76]	; 0x4c
 8009eba:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 8009ebe:	f7fe bf25 	b.w	8008d0c <_svfprintf_r+0x38c>
 8009ec2:	9b07      	ldr	r3, [sp, #28]
 8009ec4:	07db      	lsls	r3, r3, #31
 8009ec6:	465f      	mov	r7, fp
 8009ec8:	d505      	bpl.n	8009ed6 <_svfprintf_r+0x1556>
 8009eca:	ae40      	add	r6, sp, #256	; 0x100
 8009ecc:	2330      	movs	r3, #48	; 0x30
 8009ece:	f806 3d41 	strb.w	r3, [r6, #-65]!
 8009ed2:	f7fe bf11 	b.w	8008cf8 <_svfprintf_r+0x378>
 8009ed6:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8009eda:	ae30      	add	r6, sp, #192	; 0xc0
 8009edc:	f7fe bf0f 	b.w	8008cfe <_svfprintf_r+0x37e>
 8009ee0:	aa23      	add	r2, sp, #140	; 0x8c
 8009ee2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ee4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009ee6:	f004 f9c1 	bl	800e26c <__ssprint_r>
 8009eea:	2800      	cmp	r0, #0
 8009eec:	f47e ae41 	bne.w	8008b72 <_svfprintf_r+0x1f2>
 8009ef0:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8009ef2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8009ef4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009ef6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8009efa:	e62a      	b.n	8009b52 <_svfprintf_r+0x11d2>
 8009efc:	46a0      	mov	r8, r4
 8009efe:	2500      	movs	r5, #0
 8009f00:	f7fe bd99 	b.w	8008a36 <_svfprintf_r+0xb6>
 8009f04:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009f06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009f08:	4413      	add	r3, r2
 8009f0a:	2267      	movs	r2, #103	; 0x67
 8009f0c:	930d      	str	r3, [sp, #52]	; 0x34
 8009f0e:	9211      	str	r2, [sp, #68]	; 0x44
 8009f10:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009f14:	e572      	b.n	80099fc <_svfprintf_r+0x107c>
 8009f16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f18:	e552      	b.n	80099c0 <_svfprintf_r+0x1040>
 8009f1a:	3330      	adds	r3, #48	; 0x30
 8009f1c:	2230      	movs	r2, #48	; 0x30
 8009f1e:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8009f22:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
 8009f26:	ab20      	add	r3, sp, #128	; 0x80
 8009f28:	e725      	b.n	8009d76 <_svfprintf_r+0x13f6>
 8009f2a:	9808      	ldr	r0, [sp, #32]
 8009f2c:	4639      	mov	r1, r7
 8009f2e:	2200      	movs	r2, #0
 8009f30:	2300      	movs	r3, #0
 8009f32:	f7f7 f905 	bl	8001140 <__aeabi_dcmpeq>
 8009f36:	2800      	cmp	r0, #0
 8009f38:	f47f ae8a 	bne.w	8009c50 <_svfprintf_r+0x12d0>
 8009f3c:	f1c5 0501 	rsb	r5, r5, #1
 8009f40:	951d      	str	r5, [sp, #116]	; 0x74
 8009f42:	442c      	add	r4, r5
 8009f44:	e529      	b.n	800999a <_svfprintf_r+0x101a>
 8009f46:	4e38      	ldr	r6, [pc, #224]	; (800a028 <_svfprintf_r+0x16a8>)
 8009f48:	4b38      	ldr	r3, [pc, #224]	; (800a02c <_svfprintf_r+0x16ac>)
 8009f4a:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 8009f4e:	f7ff b82f 	b.w	8008fb0 <_svfprintf_r+0x630>
 8009f52:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009f54:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009f56:	189d      	adds	r5, r3, r2
 8009f58:	eb05 030b 	add.w	r3, r5, fp
 8009f5c:	930d      	str	r3, [sp, #52]	; 0x34
 8009f5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009f62:	e54b      	b.n	80099fc <_svfprintf_r+0x107c>
 8009f64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009f66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f68:	f1c3 0301 	rsb	r3, r3, #1
 8009f6c:	441a      	add	r2, r3
 8009f6e:	4613      	mov	r3, r2
 8009f70:	920d      	str	r2, [sp, #52]	; 0x34
 8009f72:	e777      	b.n	8009e64 <_svfprintf_r+0x14e4>
 8009f74:	9b07      	ldr	r3, [sp, #28]
 8009f76:	f013 0301 	ands.w	r3, r3, #1
 8009f7a:	f47f af05 	bne.w	8009d88 <_svfprintf_r+0x1408>
 8009f7e:	9313      	str	r3, [sp, #76]	; 0x4c
 8009f80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f82:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009f86:	e539      	b.n	80099fc <_svfprintf_r+0x107c>
 8009f88:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009f8a:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009f8e:	6805      	ldr	r5, [r0, #0]
 8009f90:	3004      	adds	r0, #4
 8009f92:	2d00      	cmp	r5, #0
 8009f94:	900e      	str	r0, [sp, #56]	; 0x38
 8009f96:	46a0      	mov	r8, r4
 8009f98:	f6be ad4b 	bge.w	8008a32 <_svfprintf_r+0xb2>
 8009f9c:	f04f 35ff 	mov.w	r5, #4294967295
 8009fa0:	f7fe bd47 	b.w	8008a32 <_svfprintf_r+0xb2>
 8009fa4:	f1bb 0f00 	cmp.w	fp, #0
 8009fa8:	d102      	bne.n	8009fb0 <_svfprintf_r+0x1630>
 8009faa:	9b07      	ldr	r3, [sp, #28]
 8009fac:	07d8      	lsls	r0, r3, #31
 8009fae:	d507      	bpl.n	8009fc0 <_svfprintf_r+0x1640>
 8009fb0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009fb2:	1c5d      	adds	r5, r3, #1
 8009fb4:	eb05 030b 	add.w	r3, r5, fp
 8009fb8:	930d      	str	r3, [sp, #52]	; 0x34
 8009fba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009fbe:	e51d      	b.n	80099fc <_svfprintf_r+0x107c>
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	930d      	str	r3, [sp, #52]	; 0x34
 8009fc4:	e51a      	b.n	80099fc <_svfprintf_r+0x107c>
 8009fc6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8009fca:	f7ff b865 	b.w	8009098 <_svfprintf_r+0x718>
 8009fce:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8009fd2:	f7fe be51 	b.w	8008c78 <_svfprintf_r+0x2f8>
 8009fd6:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
 8009fda:	e6cc      	b.n	8009d76 <_svfprintf_r+0x13f6>
 8009fdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009fde:	230c      	movs	r3, #12
 8009fe0:	6013      	str	r3, [r2, #0]
 8009fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8009fe6:	f7fe bdcd 	b.w	8008b84 <_svfprintf_r+0x204>
 8009fea:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8009fee:	f7ff b950 	b.w	8009292 <_svfprintf_r+0x912>
 8009ff2:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8009ff6:	f7fe bfab 	b.w	8008f50 <_svfprintf_r+0x5d0>
 8009ffa:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8009ffe:	f7fe bdc9 	b.w	8008b94 <_svfprintf_r+0x214>
 800a002:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800a006:	f7ff b819 	b.w	800903c <_svfprintf_r+0x6bc>
 800a00a:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800a00e:	f7fe bfeb 	b.w	8008fe8 <_svfprintf_r+0x668>
 800a012:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800a016:	f7ff b8f3 	b.w	8009200 <_svfprintf_r+0x880>
 800a01a:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800a01e:	f7ff b8d2 	b.w	80091c6 <_svfprintf_r+0x846>
 800a022:	bf00      	nop
 800a024:	0800ee70 	.word	0x0800ee70
 800a028:	0800ee44 	.word	0x0800ee44
 800a02c:	0800ee40 	.word	0x0800ee40

0800a030 <_vfprintf_r>:
 800a030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a034:	b0c1      	sub	sp, #260	; 0x104
 800a036:	461c      	mov	r4, r3
 800a038:	9108      	str	r1, [sp, #32]
 800a03a:	4616      	mov	r6, r2
 800a03c:	4605      	mov	r5, r0
 800a03e:	900a      	str	r0, [sp, #40]	; 0x28
 800a040:	f003 f808 	bl	800d054 <_localeconv_r>
 800a044:	6803      	ldr	r3, [r0, #0]
 800a046:	9317      	str	r3, [sp, #92]	; 0x5c
 800a048:	4618      	mov	r0, r3
 800a04a:	f7f6 fb99 	bl	8000780 <strlen>
 800a04e:	940e      	str	r4, [sp, #56]	; 0x38
 800a050:	9016      	str	r0, [sp, #88]	; 0x58
 800a052:	b11d      	cbz	r5, 800a05c <_vfprintf_r+0x2c>
 800a054:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800a056:	2b00      	cmp	r3, #0
 800a058:	f000 8122 	beq.w	800a2a0 <_vfprintf_r+0x270>
 800a05c:	9808      	ldr	r0, [sp, #32]
 800a05e:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
 800a062:	b293      	uxth	r3, r2
 800a064:	0499      	lsls	r1, r3, #18
 800a066:	d407      	bmi.n	800a078 <_vfprintf_r+0x48>
 800a068:	6e41      	ldr	r1, [r0, #100]	; 0x64
 800a06a:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 800a06e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800a072:	8183      	strh	r3, [r0, #12]
 800a074:	6641      	str	r1, [r0, #100]	; 0x64
 800a076:	b29b      	uxth	r3, r3
 800a078:	071a      	lsls	r2, r3, #28
 800a07a:	f140 80dc 	bpl.w	800a236 <_vfprintf_r+0x206>
 800a07e:	9a08      	ldr	r2, [sp, #32]
 800a080:	6912      	ldr	r2, [r2, #16]
 800a082:	2a00      	cmp	r2, #0
 800a084:	f000 80d7 	beq.w	800a236 <_vfprintf_r+0x206>
 800a088:	f003 031a 	and.w	r3, r3, #26
 800a08c:	2b0a      	cmp	r3, #10
 800a08e:	f000 80e0 	beq.w	800a252 <_vfprintf_r+0x222>
 800a092:	2300      	movs	r3, #0
 800a094:	461a      	mov	r2, r3
 800a096:	9312      	str	r3, [sp, #72]	; 0x48
 800a098:	9325      	str	r3, [sp, #148]	; 0x94
 800a09a:	9324      	str	r3, [sp, #144]	; 0x90
 800a09c:	9319      	str	r3, [sp, #100]	; 0x64
 800a09e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0a0:	f8df a3fc 	ldr.w	sl, [pc, #1020]	; 800a4a0 <_vfprintf_r+0x470>
 800a0a4:	9214      	str	r2, [sp, #80]	; 0x50
 800a0a6:	ab30      	add	r3, sp, #192	; 0xc0
 800a0a8:	9323      	str	r3, [sp, #140]	; 0x8c
 800a0aa:	4699      	mov	r9, r3
 800a0ac:	9215      	str	r2, [sp, #84]	; 0x54
 800a0ae:	46b0      	mov	r8, r6
 800a0b0:	f898 3000 	ldrb.w	r3, [r8]
 800a0b4:	4644      	mov	r4, r8
 800a0b6:	b1eb      	cbz	r3, 800a0f4 <_vfprintf_r+0xc4>
 800a0b8:	2b25      	cmp	r3, #37	; 0x25
 800a0ba:	d102      	bne.n	800a0c2 <_vfprintf_r+0x92>
 800a0bc:	e01a      	b.n	800a0f4 <_vfprintf_r+0xc4>
 800a0be:	2b25      	cmp	r3, #37	; 0x25
 800a0c0:	d003      	beq.n	800a0ca <_vfprintf_r+0x9a>
 800a0c2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d1f9      	bne.n	800a0be <_vfprintf_r+0x8e>
 800a0ca:	ebc8 0504 	rsb	r5, r8, r4
 800a0ce:	b18d      	cbz	r5, 800a0f4 <_vfprintf_r+0xc4>
 800a0d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a0d2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800a0d4:	f8c9 8000 	str.w	r8, [r9]
 800a0d8:	3301      	adds	r3, #1
 800a0da:	442a      	add	r2, r5
 800a0dc:	2b07      	cmp	r3, #7
 800a0de:	f8c9 5004 	str.w	r5, [r9, #4]
 800a0e2:	9225      	str	r2, [sp, #148]	; 0x94
 800a0e4:	9324      	str	r3, [sp, #144]	; 0x90
 800a0e6:	f300 80c2 	bgt.w	800a26e <_vfprintf_r+0x23e>
 800a0ea:	f109 0908 	add.w	r9, r9, #8
 800a0ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0f0:	442b      	add	r3, r5
 800a0f2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0f4:	7823      	ldrb	r3, [r4, #0]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	f000 80c2 	beq.w	800a280 <_vfprintf_r+0x250>
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	461a      	mov	r2, r3
 800a100:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800a104:	4619      	mov	r1, r3
 800a106:	930c      	str	r3, [sp, #48]	; 0x30
 800a108:	9307      	str	r3, [sp, #28]
 800a10a:	f04f 3bff 	mov.w	fp, #4294967295
 800a10e:	7863      	ldrb	r3, [r4, #1]
 800a110:	f104 0801 	add.w	r8, r4, #1
 800a114:	465d      	mov	r5, fp
 800a116:	f108 0801 	add.w	r8, r8, #1
 800a11a:	f1a3 0020 	sub.w	r0, r3, #32
 800a11e:	2858      	cmp	r0, #88	; 0x58
 800a120:	f200 844b 	bhi.w	800a9ba <_vfprintf_r+0x98a>
 800a124:	e8df f010 	tbh	[pc, r0, lsl #1]
 800a128:	04490401 	.word	0x04490401
 800a12c:	040a0449 	.word	0x040a0449
 800a130:	04490449 	.word	0x04490449
 800a134:	04490449 	.word	0x04490449
 800a138:	04490449 	.word	0x04490449
 800a13c:	043b035d 	.word	0x043b035d
 800a140:	005d0449 	.word	0x005d0449
 800a144:	044900fe 	.word	0x044900fe
 800a148:	036b011a 	.word	0x036b011a
 800a14c:	036b036b 	.word	0x036b036b
 800a150:	036b036b 	.word	0x036b036b
 800a154:	036b036b 	.word	0x036b036b
 800a158:	036b036b 	.word	0x036b036b
 800a15c:	04490449 	.word	0x04490449
 800a160:	04490449 	.word	0x04490449
 800a164:	04490449 	.word	0x04490449
 800a168:	04490449 	.word	0x04490449
 800a16c:	04490449 	.word	0x04490449
 800a170:	0398037b 	.word	0x0398037b
 800a174:	03980449 	.word	0x03980449
 800a178:	04490449 	.word	0x04490449
 800a17c:	04490449 	.word	0x04490449
 800a180:	044903dd 	.word	0x044903dd
 800a184:	01210449 	.word	0x01210449
 800a188:	04490449 	.word	0x04490449
 800a18c:	04490449 	.word	0x04490449
 800a190:	014a0449 	.word	0x014a0449
 800a194:	04490449 	.word	0x04490449
 800a198:	044902b0 	.word	0x044902b0
 800a19c:	04490449 	.word	0x04490449
 800a1a0:	04490449 	.word	0x04490449
 800a1a4:	04490449 	.word	0x04490449
 800a1a8:	04490449 	.word	0x04490449
 800a1ac:	02f10449 	.word	0x02f10449
 800a1b0:	03980304 	.word	0x03980304
 800a1b4:	03980398 	.word	0x03980398
 800a1b8:	0304033a 	.word	0x0304033a
 800a1bc:	04490449 	.word	0x04490449
 800a1c0:	04490341 	.word	0x04490341
 800a1c4:	00c0034b 	.word	0x00c0034b
 800a1c8:	04120064 	.word	0x04120064
 800a1cc:	041a0449 	.word	0x041a0449
 800a1d0:	03e40449 	.word	0x03e40449
 800a1d4:	04490449 	.word	0x04490449
 800a1d8:	03ec      	.short	0x03ec
 800a1da:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a1dc:	930e      	str	r3, [sp, #56]	; 0x38
 800a1de:	4240      	negs	r0, r0
 800a1e0:	900c      	str	r0, [sp, #48]	; 0x30
 800a1e2:	9b07      	ldr	r3, [sp, #28]
 800a1e4:	f043 0304 	orr.w	r3, r3, #4
 800a1e8:	9307      	str	r3, [sp, #28]
 800a1ea:	f898 3000 	ldrb.w	r3, [r8]
 800a1ee:	e792      	b.n	800a116 <_vfprintf_r+0xe6>
 800a1f0:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a1f2:	46ab      	mov	fp, r5
 800a1f4:	2100      	movs	r1, #0
 800a1f6:	6804      	ldr	r4, [r0, #0]
 800a1f8:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800a1fc:	1d07      	adds	r7, r0, #4
 800a1fe:	9807      	ldr	r0, [sp, #28]
 800a200:	2330      	movs	r3, #48	; 0x30
 800a202:	2278      	movs	r2, #120	; 0x78
 800a204:	458b      	cmp	fp, r1
 800a206:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 800a20a:	f04f 0500 	mov.w	r5, #0
 800a20e:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
 800a212:	f040 0302 	orr.w	r3, r0, #2
 800a216:	f2c0 83ed 	blt.w	800a9f4 <_vfprintf_r+0x9c4>
 800a21a:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 800a21e:	f043 0302 	orr.w	r3, r3, #2
 800a222:	9307      	str	r3, [sp, #28]
 800a224:	ea54 0305 	orrs.w	r3, r4, r5
 800a228:	970e      	str	r7, [sp, #56]	; 0x38
 800a22a:	f000 83be 	beq.w	800a9aa <_vfprintf_r+0x97a>
 800a22e:	460f      	mov	r7, r1
 800a230:	9211      	str	r2, [sp, #68]	; 0x44
 800a232:	4899      	ldr	r0, [pc, #612]	; (800a498 <_vfprintf_r+0x468>)
 800a234:	e259      	b.n	800a6ea <_vfprintf_r+0x6ba>
 800a236:	9908      	ldr	r1, [sp, #32]
 800a238:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a23a:	f001 faaf 	bl	800b79c <__swsetup_r>
 800a23e:	2800      	cmp	r0, #0
 800a240:	f041 8015 	bne.w	800b26e <_vfprintf_r+0x123e>
 800a244:	9b08      	ldr	r3, [sp, #32]
 800a246:	899b      	ldrh	r3, [r3, #12]
 800a248:	f003 031a 	and.w	r3, r3, #26
 800a24c:	2b0a      	cmp	r3, #10
 800a24e:	f47f af20 	bne.w	800a092 <_vfprintf_r+0x62>
 800a252:	9908      	ldr	r1, [sp, #32]
 800a254:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	f6ff af1a 	blt.w	800a092 <_vfprintf_r+0x62>
 800a25e:	4623      	mov	r3, r4
 800a260:	4632      	mov	r2, r6
 800a262:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a264:	f001 fa64 	bl	800b730 <__sbprintf>
 800a268:	b041      	add	sp, #260	; 0x104
 800a26a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a26e:	aa23      	add	r2, sp, #140	; 0x8c
 800a270:	9908      	ldr	r1, [sp, #32]
 800a272:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a274:	f004 f8b6 	bl	800e3e4 <__sprint_r>
 800a278:	b948      	cbnz	r0, 800a28e <_vfprintf_r+0x25e>
 800a27a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a27e:	e736      	b.n	800a0ee <_vfprintf_r+0xbe>
 800a280:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800a282:	b123      	cbz	r3, 800a28e <_vfprintf_r+0x25e>
 800a284:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a286:	9908      	ldr	r1, [sp, #32]
 800a288:	aa23      	add	r2, sp, #140	; 0x8c
 800a28a:	f004 f8ab 	bl	800e3e4 <__sprint_r>
 800a28e:	9b08      	ldr	r3, [sp, #32]
 800a290:	899b      	ldrh	r3, [r3, #12]
 800a292:	0659      	lsls	r1, r3, #25
 800a294:	f100 87eb 	bmi.w	800b26e <_vfprintf_r+0x123e>
 800a298:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a29a:	b041      	add	sp, #260	; 0x104
 800a29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2a0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a2a2:	f002 fbd9 	bl	800ca58 <__sinit>
 800a2a6:	e6d9      	b.n	800a05c <_vfprintf_r+0x2c>
 800a2a8:	9311      	str	r3, [sp, #68]	; 0x44
 800a2aa:	46ab      	mov	fp, r5
 800a2ac:	2a00      	cmp	r2, #0
 800a2ae:	f041 8221 	bne.w	800b6f4 <_vfprintf_r+0x16c4>
 800a2b2:	9a07      	ldr	r2, [sp, #28]
 800a2b4:	f012 0320 	ands.w	r3, r2, #32
 800a2b8:	d064      	beq.n	800a384 <_vfprintf_r+0x354>
 800a2ba:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800a2bc:	3707      	adds	r7, #7
 800a2be:	f027 0307 	bic.w	r3, r7, #7
 800a2c2:	2700      	movs	r7, #0
 800a2c4:	f103 0108 	add.w	r1, r3, #8
 800a2c8:	45bb      	cmp	fp, r7
 800a2ca:	910e      	str	r1, [sp, #56]	; 0x38
 800a2cc:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a2d0:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800a2d4:	f2c0 873c 	blt.w	800b150 <_vfprintf_r+0x1120>
 800a2d8:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 800a2dc:	9307      	str	r3, [sp, #28]
 800a2de:	ea54 0305 	orrs.w	r3, r4, r5
 800a2e2:	f000 837f 	beq.w	800a9e4 <_vfprintf_r+0x9b4>
 800a2e6:	ae30      	add	r6, sp, #192	; 0xc0
 800a2e8:	08e2      	lsrs	r2, r4, #3
 800a2ea:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 800a2ee:	08e9      	lsrs	r1, r5, #3
 800a2f0:	f004 0307 	and.w	r3, r4, #7
 800a2f4:	460d      	mov	r5, r1
 800a2f6:	4614      	mov	r4, r2
 800a2f8:	3330      	adds	r3, #48	; 0x30
 800a2fa:	ea54 0205 	orrs.w	r2, r4, r5
 800a2fe:	f806 3d01 	strb.w	r3, [r6, #-1]!
 800a302:	d1f1      	bne.n	800a2e8 <_vfprintf_r+0x2b8>
 800a304:	9a07      	ldr	r2, [sp, #28]
 800a306:	07d2      	lsls	r2, r2, #31
 800a308:	f140 8096 	bpl.w	800a438 <_vfprintf_r+0x408>
 800a30c:	2b30      	cmp	r3, #48	; 0x30
 800a30e:	f000 8093 	beq.w	800a438 <_vfprintf_r+0x408>
 800a312:	2230      	movs	r2, #48	; 0x30
 800a314:	1e73      	subs	r3, r6, #1
 800a316:	f806 2c01 	strb.w	r2, [r6, #-1]
 800a31a:	aa30      	add	r2, sp, #192	; 0xc0
 800a31c:	1ad2      	subs	r2, r2, r3
 800a31e:	920d      	str	r2, [sp, #52]	; 0x34
 800a320:	461e      	mov	r6, r3
 800a322:	e08c      	b.n	800a43e <_vfprintf_r+0x40e>
 800a324:	f898 3000 	ldrb.w	r3, [r8]
 800a328:	2b2a      	cmp	r3, #42	; 0x2a
 800a32a:	f108 0401 	add.w	r4, r8, #1
 800a32e:	f001 81bf 	beq.w	800b6b0 <_vfprintf_r+0x1680>
 800a332:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800a336:	2809      	cmp	r0, #9
 800a338:	bf98      	it	ls
 800a33a:	2500      	movls	r5, #0
 800a33c:	f201 814e 	bhi.w	800b5dc <_vfprintf_r+0x15ac>
 800a340:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a344:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800a348:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800a34c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800a350:	2809      	cmp	r0, #9
 800a352:	d9f5      	bls.n	800a340 <_vfprintf_r+0x310>
 800a354:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 800a358:	46a0      	mov	r8, r4
 800a35a:	e6de      	b.n	800a11a <_vfprintf_r+0xea>
 800a35c:	9b07      	ldr	r3, [sp, #28]
 800a35e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a362:	9307      	str	r3, [sp, #28]
 800a364:	f898 3000 	ldrb.w	r3, [r8]
 800a368:	e6d5      	b.n	800a116 <_vfprintf_r+0xe6>
 800a36a:	9311      	str	r3, [sp, #68]	; 0x44
 800a36c:	46ab      	mov	fp, r5
 800a36e:	2a00      	cmp	r2, #0
 800a370:	f041 81c4 	bne.w	800b6fc <_vfprintf_r+0x16cc>
 800a374:	9b07      	ldr	r3, [sp, #28]
 800a376:	f043 0310 	orr.w	r3, r3, #16
 800a37a:	9307      	str	r3, [sp, #28]
 800a37c:	9a07      	ldr	r2, [sp, #28]
 800a37e:	f012 0320 	ands.w	r3, r2, #32
 800a382:	d19a      	bne.n	800a2ba <_vfprintf_r+0x28a>
 800a384:	9907      	ldr	r1, [sp, #28]
 800a386:	f011 0210 	ands.w	r2, r1, #16
 800a38a:	f000 86d0 	beq.w	800b12e <_vfprintf_r+0x10fe>
 800a38e:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a390:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800a394:	f1bb 0f00 	cmp.w	fp, #0
 800a398:	6804      	ldr	r4, [r0, #0]
 800a39a:	f100 0704 	add.w	r7, r0, #4
 800a39e:	f04f 0500 	mov.w	r5, #0
 800a3a2:	f2c0 86d4 	blt.w	800b14e <_vfprintf_r+0x111e>
 800a3a6:	460a      	mov	r2, r1
 800a3a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a3ac:	9207      	str	r2, [sp, #28]
 800a3ae:	ea54 0205 	orrs.w	r2, r4, r5
 800a3b2:	970e      	str	r7, [sp, #56]	; 0x38
 800a3b4:	f000 8316 	beq.w	800a9e4 <_vfprintf_r+0x9b4>
 800a3b8:	461f      	mov	r7, r3
 800a3ba:	e794      	b.n	800a2e6 <_vfprintf_r+0x2b6>
 800a3bc:	9311      	str	r3, [sp, #68]	; 0x44
 800a3be:	46ab      	mov	fp, r5
 800a3c0:	2a00      	cmp	r2, #0
 800a3c2:	f041 818f 	bne.w	800b6e4 <_vfprintf_r+0x16b4>
 800a3c6:	9b07      	ldr	r3, [sp, #28]
 800a3c8:	f043 0310 	orr.w	r3, r3, #16
 800a3cc:	9307      	str	r3, [sp, #28]
 800a3ce:	9a07      	ldr	r2, [sp, #28]
 800a3d0:	f012 0320 	ands.w	r3, r2, #32
 800a3d4:	f000 84f8 	beq.w	800adc8 <_vfprintf_r+0xd98>
 800a3d8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800a3da:	3707      	adds	r7, #7
 800a3dc:	f027 0307 	bic.w	r3, r7, #7
 800a3e0:	2700      	movs	r7, #0
 800a3e2:	f103 0108 	add.w	r1, r3, #8
 800a3e6:	45bb      	cmp	fp, r7
 800a3e8:	910e      	str	r1, [sp, #56]	; 0x38
 800a3ea:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a3ee:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800a3f2:	f2c0 8516 	blt.w	800ae22 <_vfprintf_r+0xdf2>
 800a3f6:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 800a3fa:	9307      	str	r3, [sp, #28]
 800a3fc:	ea54 0305 	orrs.w	r3, r4, r5
 800a400:	f000 81bc 	beq.w	800a77c <_vfprintf_r+0x74c>
 800a404:	2d00      	cmp	r5, #0
 800a406:	bf08      	it	eq
 800a408:	2c0a      	cmpeq	r4, #10
 800a40a:	f0c0 850e 	bcc.w	800ae2a <_vfprintf_r+0xdfa>
 800a40e:	ae30      	add	r6, sp, #192	; 0xc0
 800a410:	4620      	mov	r0, r4
 800a412:	4629      	mov	r1, r5
 800a414:	220a      	movs	r2, #10
 800a416:	2300      	movs	r3, #0
 800a418:	f7f5 ff78 	bl	800030c <__aeabi_uldivmod>
 800a41c:	3230      	adds	r2, #48	; 0x30
 800a41e:	f806 2d01 	strb.w	r2, [r6, #-1]!
 800a422:	4620      	mov	r0, r4
 800a424:	4629      	mov	r1, r5
 800a426:	2300      	movs	r3, #0
 800a428:	220a      	movs	r2, #10
 800a42a:	f7f5 ff6f 	bl	800030c <__aeabi_uldivmod>
 800a42e:	4604      	mov	r4, r0
 800a430:	460d      	mov	r5, r1
 800a432:	ea54 0305 	orrs.w	r3, r4, r5
 800a436:	d1eb      	bne.n	800a410 <_vfprintf_r+0x3e0>
 800a438:	ab30      	add	r3, sp, #192	; 0xc0
 800a43a:	1b9b      	subs	r3, r3, r6
 800a43c:	930d      	str	r3, [sp, #52]	; 0x34
 800a43e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a440:	455b      	cmp	r3, fp
 800a442:	bfb8      	it	lt
 800a444:	465b      	movlt	r3, fp
 800a446:	9309      	str	r3, [sp, #36]	; 0x24
 800a448:	2300      	movs	r3, #0
 800a44a:	9313      	str	r3, [sp, #76]	; 0x4c
 800a44c:	b117      	cbz	r7, 800a454 <_vfprintf_r+0x424>
 800a44e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a450:	3301      	adds	r3, #1
 800a452:	9309      	str	r3, [sp, #36]	; 0x24
 800a454:	9b07      	ldr	r3, [sp, #28]
 800a456:	f013 0302 	ands.w	r3, r3, #2
 800a45a:	930f      	str	r3, [sp, #60]	; 0x3c
 800a45c:	d002      	beq.n	800a464 <_vfprintf_r+0x434>
 800a45e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a460:	3302      	adds	r3, #2
 800a462:	9309      	str	r3, [sp, #36]	; 0x24
 800a464:	9b07      	ldr	r3, [sp, #28]
 800a466:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 800a46a:	9310      	str	r3, [sp, #64]	; 0x40
 800a46c:	f040 82cf 	bne.w	800aa0e <_vfprintf_r+0x9de>
 800a470:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a472:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a474:	1a9d      	subs	r5, r3, r2
 800a476:	2d00      	cmp	r5, #0
 800a478:	f340 82c9 	ble.w	800aa0e <_vfprintf_r+0x9de>
 800a47c:	2d10      	cmp	r5, #16
 800a47e:	9925      	ldr	r1, [sp, #148]	; 0x94
 800a480:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a482:	4f06      	ldr	r7, [pc, #24]	; (800a49c <_vfprintf_r+0x46c>)
 800a484:	dd2e      	ble.n	800a4e4 <_vfprintf_r+0x4b4>
 800a486:	9618      	str	r6, [sp, #96]	; 0x60
 800a488:	4648      	mov	r0, r9
 800a48a:	2410      	movs	r4, #16
 800a48c:	46b9      	mov	r9, r7
 800a48e:	9e08      	ldr	r6, [sp, #32]
 800a490:	462f      	mov	r7, r5
 800a492:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a494:	e00b      	b.n	800a4ae <_vfprintf_r+0x47e>
 800a496:	bf00      	nop
 800a498:	0800ee5c 	.word	0x0800ee5c
 800a49c:	0800ee9c 	.word	0x0800ee9c
 800a4a0:	0800ee8c 	.word	0x0800ee8c
 800a4a4:	3f10      	subs	r7, #16
 800a4a6:	2f10      	cmp	r7, #16
 800a4a8:	f100 0008 	add.w	r0, r0, #8
 800a4ac:	dd16      	ble.n	800a4dc <_vfprintf_r+0x4ac>
 800a4ae:	3201      	adds	r2, #1
 800a4b0:	4bb7      	ldr	r3, [pc, #732]	; (800a790 <_vfprintf_r+0x760>)
 800a4b2:	9224      	str	r2, [sp, #144]	; 0x90
 800a4b4:	3110      	adds	r1, #16
 800a4b6:	2a07      	cmp	r2, #7
 800a4b8:	9125      	str	r1, [sp, #148]	; 0x94
 800a4ba:	e880 0018 	stmia.w	r0, {r3, r4}
 800a4be:	ddf1      	ble.n	800a4a4 <_vfprintf_r+0x474>
 800a4c0:	aa23      	add	r2, sp, #140	; 0x8c
 800a4c2:	4631      	mov	r1, r6
 800a4c4:	4628      	mov	r0, r5
 800a4c6:	f003 ff8d 	bl	800e3e4 <__sprint_r>
 800a4ca:	2800      	cmp	r0, #0
 800a4cc:	f47f aedf 	bne.w	800a28e <_vfprintf_r+0x25e>
 800a4d0:	3f10      	subs	r7, #16
 800a4d2:	2f10      	cmp	r7, #16
 800a4d4:	9925      	ldr	r1, [sp, #148]	; 0x94
 800a4d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a4d8:	a830      	add	r0, sp, #192	; 0xc0
 800a4da:	dce8      	bgt.n	800a4ae <_vfprintf_r+0x47e>
 800a4dc:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800a4de:	463d      	mov	r5, r7
 800a4e0:	464f      	mov	r7, r9
 800a4e2:	4681      	mov	r9, r0
 800a4e4:	3201      	adds	r2, #1
 800a4e6:	186c      	adds	r4, r5, r1
 800a4e8:	2a07      	cmp	r2, #7
 800a4ea:	9425      	str	r4, [sp, #148]	; 0x94
 800a4ec:	9224      	str	r2, [sp, #144]	; 0x90
 800a4ee:	f8c9 7000 	str.w	r7, [r9]
 800a4f2:	f8c9 5004 	str.w	r5, [r9, #4]
 800a4f6:	f300 841f 	bgt.w	800ad38 <_vfprintf_r+0xd08>
 800a4fa:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800a4fe:	f109 0908 	add.w	r9, r9, #8
 800a502:	b177      	cbz	r7, 800a522 <_vfprintf_r+0x4f2>
 800a504:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a506:	3301      	adds	r3, #1
 800a508:	3401      	adds	r4, #1
 800a50a:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
 800a50e:	2201      	movs	r2, #1
 800a510:	2b07      	cmp	r3, #7
 800a512:	9425      	str	r4, [sp, #148]	; 0x94
 800a514:	9324      	str	r3, [sp, #144]	; 0x90
 800a516:	e889 0006 	stmia.w	r9, {r1, r2}
 800a51a:	f300 8397 	bgt.w	800ac4c <_vfprintf_r+0xc1c>
 800a51e:	f109 0908 	add.w	r9, r9, #8
 800a522:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a524:	b16b      	cbz	r3, 800a542 <_vfprintf_r+0x512>
 800a526:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a528:	3301      	adds	r3, #1
 800a52a:	3402      	adds	r4, #2
 800a52c:	a91c      	add	r1, sp, #112	; 0x70
 800a52e:	2202      	movs	r2, #2
 800a530:	2b07      	cmp	r3, #7
 800a532:	9425      	str	r4, [sp, #148]	; 0x94
 800a534:	9324      	str	r3, [sp, #144]	; 0x90
 800a536:	e889 0006 	stmia.w	r9, {r1, r2}
 800a53a:	f300 8393 	bgt.w	800ac64 <_vfprintf_r+0xc34>
 800a53e:	f109 0908 	add.w	r9, r9, #8
 800a542:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a544:	2b80      	cmp	r3, #128	; 0x80
 800a546:	f000 82c6 	beq.w	800aad6 <_vfprintf_r+0xaa6>
 800a54a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a54c:	ebc3 070b 	rsb	r7, r3, fp
 800a550:	2f00      	cmp	r7, #0
 800a552:	dd33      	ble.n	800a5bc <_vfprintf_r+0x58c>
 800a554:	4a8f      	ldr	r2, [pc, #572]	; (800a794 <_vfprintf_r+0x764>)
 800a556:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a558:	920f      	str	r2, [sp, #60]	; 0x3c
 800a55a:	2f10      	cmp	r7, #16
 800a55c:	dd22      	ble.n	800a5a4 <_vfprintf_r+0x574>
 800a55e:	4622      	mov	r2, r4
 800a560:	f04f 0b10 	mov.w	fp, #16
 800a564:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a566:	9c08      	ldr	r4, [sp, #32]
 800a568:	e004      	b.n	800a574 <_vfprintf_r+0x544>
 800a56a:	3f10      	subs	r7, #16
 800a56c:	2f10      	cmp	r7, #16
 800a56e:	f109 0908 	add.w	r9, r9, #8
 800a572:	dd16      	ble.n	800a5a2 <_vfprintf_r+0x572>
 800a574:	3301      	adds	r3, #1
 800a576:	3210      	adds	r2, #16
 800a578:	2b07      	cmp	r3, #7
 800a57a:	9225      	str	r2, [sp, #148]	; 0x94
 800a57c:	9324      	str	r3, [sp, #144]	; 0x90
 800a57e:	e889 0c00 	stmia.w	r9, {sl, fp}
 800a582:	ddf2      	ble.n	800a56a <_vfprintf_r+0x53a>
 800a584:	aa23      	add	r2, sp, #140	; 0x8c
 800a586:	4621      	mov	r1, r4
 800a588:	4628      	mov	r0, r5
 800a58a:	f003 ff2b 	bl	800e3e4 <__sprint_r>
 800a58e:	2800      	cmp	r0, #0
 800a590:	f47f ae7d 	bne.w	800a28e <_vfprintf_r+0x25e>
 800a594:	3f10      	subs	r7, #16
 800a596:	2f10      	cmp	r7, #16
 800a598:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800a59a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a59c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a5a0:	dce8      	bgt.n	800a574 <_vfprintf_r+0x544>
 800a5a2:	4614      	mov	r4, r2
 800a5a4:	3301      	adds	r3, #1
 800a5a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a5a8:	9324      	str	r3, [sp, #144]	; 0x90
 800a5aa:	443c      	add	r4, r7
 800a5ac:	2b07      	cmp	r3, #7
 800a5ae:	9425      	str	r4, [sp, #148]	; 0x94
 800a5b0:	e889 0084 	stmia.w	r9, {r2, r7}
 800a5b4:	f300 833e 	bgt.w	800ac34 <_vfprintf_r+0xc04>
 800a5b8:	f109 0908 	add.w	r9, r9, #8
 800a5bc:	9b07      	ldr	r3, [sp, #28]
 800a5be:	05dd      	lsls	r5, r3, #23
 800a5c0:	f100 8227 	bmi.w	800aa12 <_vfprintf_r+0x9e2>
 800a5c4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a5c6:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a5c8:	f8c9 6000 	str.w	r6, [r9]
 800a5cc:	3301      	adds	r3, #1
 800a5ce:	440c      	add	r4, r1
 800a5d0:	2b07      	cmp	r3, #7
 800a5d2:	9425      	str	r4, [sp, #148]	; 0x94
 800a5d4:	f8c9 1004 	str.w	r1, [r9, #4]
 800a5d8:	9324      	str	r3, [sp, #144]	; 0x90
 800a5da:	f300 8315 	bgt.w	800ac08 <_vfprintf_r+0xbd8>
 800a5de:	f109 0908 	add.w	r9, r9, #8
 800a5e2:	9b07      	ldr	r3, [sp, #28]
 800a5e4:	0758      	lsls	r0, r3, #29
 800a5e6:	d53f      	bpl.n	800a668 <_vfprintf_r+0x638>
 800a5e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5ec:	1a9d      	subs	r5, r3, r2
 800a5ee:	2d00      	cmp	r5, #0
 800a5f0:	dd3a      	ble.n	800a668 <_vfprintf_r+0x638>
 800a5f2:	2d10      	cmp	r5, #16
 800a5f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a5f6:	4f66      	ldr	r7, [pc, #408]	; (800a790 <_vfprintf_r+0x760>)
 800a5f8:	dd23      	ble.n	800a642 <_vfprintf_r+0x612>
 800a5fa:	4622      	mov	r2, r4
 800a5fc:	2610      	movs	r6, #16
 800a5fe:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800a602:	9c08      	ldr	r4, [sp, #32]
 800a604:	e004      	b.n	800a610 <_vfprintf_r+0x5e0>
 800a606:	3d10      	subs	r5, #16
 800a608:	2d10      	cmp	r5, #16
 800a60a:	f109 0908 	add.w	r9, r9, #8
 800a60e:	dd17      	ble.n	800a640 <_vfprintf_r+0x610>
 800a610:	3301      	adds	r3, #1
 800a612:	495f      	ldr	r1, [pc, #380]	; (800a790 <_vfprintf_r+0x760>)
 800a614:	9324      	str	r3, [sp, #144]	; 0x90
 800a616:	3210      	adds	r2, #16
 800a618:	2b07      	cmp	r3, #7
 800a61a:	9225      	str	r2, [sp, #148]	; 0x94
 800a61c:	e889 0042 	stmia.w	r9, {r1, r6}
 800a620:	ddf1      	ble.n	800a606 <_vfprintf_r+0x5d6>
 800a622:	aa23      	add	r2, sp, #140	; 0x8c
 800a624:	4621      	mov	r1, r4
 800a626:	4658      	mov	r0, fp
 800a628:	f003 fedc 	bl	800e3e4 <__sprint_r>
 800a62c:	2800      	cmp	r0, #0
 800a62e:	f47f ae2e 	bne.w	800a28e <_vfprintf_r+0x25e>
 800a632:	3d10      	subs	r5, #16
 800a634:	2d10      	cmp	r5, #16
 800a636:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800a638:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a63a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a63e:	dce7      	bgt.n	800a610 <_vfprintf_r+0x5e0>
 800a640:	4614      	mov	r4, r2
 800a642:	3301      	adds	r3, #1
 800a644:	442c      	add	r4, r5
 800a646:	2b07      	cmp	r3, #7
 800a648:	9425      	str	r4, [sp, #148]	; 0x94
 800a64a:	9324      	str	r3, [sp, #144]	; 0x90
 800a64c:	f8c9 7000 	str.w	r7, [r9]
 800a650:	f8c9 5004 	str.w	r5, [r9, #4]
 800a654:	dd08      	ble.n	800a668 <_vfprintf_r+0x638>
 800a656:	aa23      	add	r2, sp, #140	; 0x8c
 800a658:	9908      	ldr	r1, [sp, #32]
 800a65a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a65c:	f003 fec2 	bl	800e3e4 <__sprint_r>
 800a660:	2800      	cmp	r0, #0
 800a662:	f47f ae14 	bne.w	800a28e <_vfprintf_r+0x25e>
 800a666:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800a668:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a66a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a66c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a66e:	428a      	cmp	r2, r1
 800a670:	bfac      	ite	ge
 800a672:	189b      	addge	r3, r3, r2
 800a674:	185b      	addlt	r3, r3, r1
 800a676:	930b      	str	r3, [sp, #44]	; 0x2c
 800a678:	2c00      	cmp	r4, #0
 800a67a:	f040 82d1 	bne.w	800ac20 <_vfprintf_r+0xbf0>
 800a67e:	2300      	movs	r3, #0
 800a680:	9324      	str	r3, [sp, #144]	; 0x90
 800a682:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a686:	e513      	b.n	800a0b0 <_vfprintf_r+0x80>
 800a688:	9311      	str	r3, [sp, #68]	; 0x44
 800a68a:	46ab      	mov	fp, r5
 800a68c:	2a00      	cmp	r2, #0
 800a68e:	f041 8025 	bne.w	800b6dc <_vfprintf_r+0x16ac>
 800a692:	9b07      	ldr	r3, [sp, #28]
 800a694:	4840      	ldr	r0, [pc, #256]	; (800a798 <_vfprintf_r+0x768>)
 800a696:	069c      	lsls	r4, r3, #26
 800a698:	f140 813c 	bpl.w	800a914 <_vfprintf_r+0x8e4>
 800a69c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800a69e:	3707      	adds	r7, #7
 800a6a0:	f027 0307 	bic.w	r3, r7, #7
 800a6a4:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a6a8:	f103 0208 	add.w	r2, r3, #8
 800a6ac:	920e      	str	r2, [sp, #56]	; 0x38
 800a6ae:	9a07      	ldr	r2, [sp, #28]
 800a6b0:	f012 0701 	ands.w	r7, r2, #1
 800a6b4:	f000 82e2 	beq.w	800ac7c <_vfprintf_r+0xc4c>
 800a6b8:	ea54 0305 	orrs.w	r3, r4, r5
 800a6bc:	f000 856b 	beq.w	800b196 <_vfprintf_r+0x1166>
 800a6c0:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800a6c4:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
 800a6c8:	2700      	movs	r7, #0
 800a6ca:	9a07      	ldr	r2, [sp, #28]
 800a6cc:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800a6d0:	2330      	movs	r3, #48	; 0x30
 800a6d2:	45bb      	cmp	fp, r7
 800a6d4:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 800a6d8:	f042 0302 	orr.w	r3, r2, #2
 800a6dc:	f2c0 872d 	blt.w	800b53a <_vfprintf_r+0x150a>
 800a6e0:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 800a6e4:	f043 0302 	orr.w	r3, r3, #2
 800a6e8:	9307      	str	r3, [sp, #28]
 800a6ea:	ae30      	add	r6, sp, #192	; 0xc0
 800a6ec:	0923      	lsrs	r3, r4, #4
 800a6ee:	f004 010f 	and.w	r1, r4, #15
 800a6f2:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 800a6f6:	092a      	lsrs	r2, r5, #4
 800a6f8:	461c      	mov	r4, r3
 800a6fa:	4615      	mov	r5, r2
 800a6fc:	5c43      	ldrb	r3, [r0, r1]
 800a6fe:	f806 3d01 	strb.w	r3, [r6, #-1]!
 800a702:	ea54 0305 	orrs.w	r3, r4, r5
 800a706:	d1f1      	bne.n	800a6ec <_vfprintf_r+0x6bc>
 800a708:	e696      	b.n	800a438 <_vfprintf_r+0x408>
 800a70a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a70c:	9311      	str	r3, [sp, #68]	; 0x44
 800a70e:	680a      	ldr	r2, [r1, #0]
 800a710:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 800a714:	2300      	movs	r3, #0
 800a716:	460a      	mov	r2, r1
 800a718:	461f      	mov	r7, r3
 800a71a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800a71e:	3204      	adds	r2, #4
 800a720:	2301      	movs	r3, #1
 800a722:	9309      	str	r3, [sp, #36]	; 0x24
 800a724:	46bb      	mov	fp, r7
 800a726:	9713      	str	r7, [sp, #76]	; 0x4c
 800a728:	920e      	str	r2, [sp, #56]	; 0x38
 800a72a:	930d      	str	r3, [sp, #52]	; 0x34
 800a72c:	ae26      	add	r6, sp, #152	; 0x98
 800a72e:	e691      	b.n	800a454 <_vfprintf_r+0x424>
 800a730:	9311      	str	r3, [sp, #68]	; 0x44
 800a732:	46ab      	mov	fp, r5
 800a734:	2a00      	cmp	r2, #0
 800a736:	f040 87cd 	bne.w	800b6d4 <_vfprintf_r+0x16a4>
 800a73a:	9b07      	ldr	r3, [sp, #28]
 800a73c:	069f      	lsls	r7, r3, #26
 800a73e:	d57a      	bpl.n	800a836 <_vfprintf_r+0x806>
 800a740:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800a742:	3707      	adds	r7, #7
 800a744:	f027 0707 	bic.w	r7, r7, #7
 800a748:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a74c:	f107 0108 	add.w	r1, r7, #8
 800a750:	910e      	str	r1, [sp, #56]	; 0x38
 800a752:	4614      	mov	r4, r2
 800a754:	461d      	mov	r5, r3
 800a756:	2a00      	cmp	r2, #0
 800a758:	f173 0300 	sbcs.w	r3, r3, #0
 800a75c:	f2c0 8438 	blt.w	800afd0 <_vfprintf_r+0xfa0>
 800a760:	f1bb 0f00 	cmp.w	fp, #0
 800a764:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800a768:	f2c0 835b 	blt.w	800ae22 <_vfprintf_r+0xdf2>
 800a76c:	9b07      	ldr	r3, [sp, #28]
 800a76e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a772:	9307      	str	r3, [sp, #28]
 800a774:	ea54 0305 	orrs.w	r3, r4, r5
 800a778:	f47f ae44 	bne.w	800a404 <_vfprintf_r+0x3d4>
 800a77c:	f1bb 0f00 	cmp.w	fp, #0
 800a780:	f040 8414 	bne.w	800afac <_vfprintf_r+0xf7c>
 800a784:	f04f 0b00 	mov.w	fp, #0
 800a788:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 800a78c:	ae30      	add	r6, sp, #192	; 0xc0
 800a78e:	e656      	b.n	800a43e <_vfprintf_r+0x40e>
 800a790:	0800ee9c 	.word	0x0800ee9c
 800a794:	0800ee8c 	.word	0x0800ee8c
 800a798:	0800ee48 	.word	0x0800ee48
 800a79c:	9b07      	ldr	r3, [sp, #28]
 800a79e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7a2:	9307      	str	r3, [sp, #28]
 800a7a4:	f898 3000 	ldrb.w	r3, [r8]
 800a7a8:	e4b5      	b.n	800a116 <_vfprintf_r+0xe6>
 800a7aa:	f898 3000 	ldrb.w	r3, [r8]
 800a7ae:	2b6c      	cmp	r3, #108	; 0x6c
 800a7b0:	f000 85c8 	beq.w	800b344 <_vfprintf_r+0x1314>
 800a7b4:	9807      	ldr	r0, [sp, #28]
 800a7b6:	f040 0010 	orr.w	r0, r0, #16
 800a7ba:	9007      	str	r0, [sp, #28]
 800a7bc:	e4ab      	b.n	800a116 <_vfprintf_r+0xe6>
 800a7be:	2a00      	cmp	r2, #0
 800a7c0:	f040 8784 	bne.w	800b6cc <_vfprintf_r+0x169c>
 800a7c4:	9b07      	ldr	r3, [sp, #28]
 800a7c6:	069f      	lsls	r7, r3, #26
 800a7c8:	f140 8413 	bpl.w	800aff2 <_vfprintf_r+0xfc2>
 800a7cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a7ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a7d0:	6813      	ldr	r3, [r2, #0]
 800a7d2:	17cd      	asrs	r5, r1, #31
 800a7d4:	4608      	mov	r0, r1
 800a7d6:	3204      	adds	r2, #4
 800a7d8:	4629      	mov	r1, r5
 800a7da:	920e      	str	r2, [sp, #56]	; 0x38
 800a7dc:	e9c3 0100 	strd	r0, r1, [r3]
 800a7e0:	e466      	b.n	800a0b0 <_vfprintf_r+0x80>
 800a7e2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800a7e4:	6823      	ldr	r3, [r4, #0]
 800a7e6:	930c      	str	r3, [sp, #48]	; 0x30
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	2800      	cmp	r0, #0
 800a7ec:	4623      	mov	r3, r4
 800a7ee:	f103 0304 	add.w	r3, r3, #4
 800a7f2:	f6ff acf2 	blt.w	800a1da <_vfprintf_r+0x1aa>
 800a7f6:	930e      	str	r3, [sp, #56]	; 0x38
 800a7f8:	f898 3000 	ldrb.w	r3, [r8]
 800a7fc:	e48b      	b.n	800a116 <_vfprintf_r+0xe6>
 800a7fe:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800a802:	2300      	movs	r3, #0
 800a804:	461c      	mov	r4, r3
 800a806:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a80a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800a80e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800a812:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800a816:	2809      	cmp	r0, #9
 800a818:	d9f5      	bls.n	800a806 <_vfprintf_r+0x7d6>
 800a81a:	940c      	str	r4, [sp, #48]	; 0x30
 800a81c:	e47d      	b.n	800a11a <_vfprintf_r+0xea>
 800a81e:	9311      	str	r3, [sp, #68]	; 0x44
 800a820:	46ab      	mov	fp, r5
 800a822:	2a00      	cmp	r2, #0
 800a824:	f040 8771 	bne.w	800b70a <_vfprintf_r+0x16da>
 800a828:	9b07      	ldr	r3, [sp, #28]
 800a82a:	f043 0310 	orr.w	r3, r3, #16
 800a82e:	9307      	str	r3, [sp, #28]
 800a830:	9b07      	ldr	r3, [sp, #28]
 800a832:	069f      	lsls	r7, r3, #26
 800a834:	d484      	bmi.n	800a740 <_vfprintf_r+0x710>
 800a836:	9b07      	ldr	r3, [sp, #28]
 800a838:	06de      	lsls	r6, r3, #27
 800a83a:	f100 82bc 	bmi.w	800adb6 <_vfprintf_r+0xd86>
 800a83e:	9b07      	ldr	r3, [sp, #28]
 800a840:	065d      	lsls	r5, r3, #25
 800a842:	f140 82b8 	bpl.w	800adb6 <_vfprintf_r+0xd86>
 800a846:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a848:	f9b1 4000 	ldrsh.w	r4, [r1]
 800a84c:	3104      	adds	r1, #4
 800a84e:	17e5      	asrs	r5, r4, #31
 800a850:	4622      	mov	r2, r4
 800a852:	462b      	mov	r3, r5
 800a854:	910e      	str	r1, [sp, #56]	; 0x38
 800a856:	e77e      	b.n	800a756 <_vfprintf_r+0x726>
 800a858:	9311      	str	r3, [sp, #68]	; 0x44
 800a85a:	46ab      	mov	fp, r5
 800a85c:	2a00      	cmp	r2, #0
 800a85e:	f040 8758 	bne.w	800b712 <_vfprintf_r+0x16e2>
 800a862:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800a864:	3707      	adds	r7, #7
 800a866:	f027 0307 	bic.w	r3, r7, #7
 800a86a:	f103 0208 	add.w	r2, r3, #8
 800a86e:	920e      	str	r2, [sp, #56]	; 0x38
 800a870:	681a      	ldr	r2, [r3, #0]
 800a872:	9214      	str	r2, [sp, #80]	; 0x50
 800a874:	685b      	ldr	r3, [r3, #4]
 800a876:	9315      	str	r3, [sp, #84]	; 0x54
 800a878:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a87a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800a87c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800a880:	4628      	mov	r0, r5
 800a882:	4621      	mov	r1, r4
 800a884:	f04f 32ff 	mov.w	r2, #4294967295
 800a888:	4bb5      	ldr	r3, [pc, #724]	; (800ab60 <_vfprintf_r+0xb30>)
 800a88a:	f7f6 fc8b 	bl	80011a4 <__aeabi_dcmpun>
 800a88e:	2800      	cmp	r0, #0
 800a890:	f040 83c6 	bne.w	800b020 <_vfprintf_r+0xff0>
 800a894:	4628      	mov	r0, r5
 800a896:	4621      	mov	r1, r4
 800a898:	f04f 32ff 	mov.w	r2, #4294967295
 800a89c:	4bb0      	ldr	r3, [pc, #704]	; (800ab60 <_vfprintf_r+0xb30>)
 800a89e:	f7f6 fc63 	bl	8001168 <__aeabi_dcmple>
 800a8a2:	2800      	cmp	r0, #0
 800a8a4:	f040 83bc 	bne.w	800b020 <_vfprintf_r+0xff0>
 800a8a8:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a8aa:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	f7f6 fc50 	bl	8001154 <__aeabi_dcmplt>
 800a8b4:	2800      	cmp	r0, #0
 800a8b6:	f040 8646 	bne.w	800b546 <_vfprintf_r+0x1516>
 800a8ba:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800a8be:	4ea9      	ldr	r6, [pc, #676]	; (800ab64 <_vfprintf_r+0xb34>)
 800a8c0:	4ba9      	ldr	r3, [pc, #676]	; (800ab68 <_vfprintf_r+0xb38>)
 800a8c2:	9907      	ldr	r1, [sp, #28]
 800a8c4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a8c8:	9107      	str	r1, [sp, #28]
 800a8ca:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a8cc:	2203      	movs	r2, #3
 800a8ce:	f04f 0b00 	mov.w	fp, #0
 800a8d2:	9209      	str	r2, [sp, #36]	; 0x24
 800a8d4:	2947      	cmp	r1, #71	; 0x47
 800a8d6:	bfd8      	it	le
 800a8d8:	461e      	movle	r6, r3
 800a8da:	920d      	str	r2, [sp, #52]	; 0x34
 800a8dc:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 800a8e0:	e5b4      	b.n	800a44c <_vfprintf_r+0x41c>
 800a8e2:	9b07      	ldr	r3, [sp, #28]
 800a8e4:	f043 0308 	orr.w	r3, r3, #8
 800a8e8:	9307      	str	r3, [sp, #28]
 800a8ea:	f898 3000 	ldrb.w	r3, [r8]
 800a8ee:	e412      	b.n	800a116 <_vfprintf_r+0xe6>
 800a8f0:	9311      	str	r3, [sp, #68]	; 0x44
 800a8f2:	46ab      	mov	fp, r5
 800a8f4:	2a00      	cmp	r2, #0
 800a8f6:	f43f ad6a 	beq.w	800a3ce <_vfprintf_r+0x39e>
 800a8fa:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800a8fe:	e566      	b.n	800a3ce <_vfprintf_r+0x39e>
 800a900:	9311      	str	r3, [sp, #68]	; 0x44
 800a902:	46ab      	mov	fp, r5
 800a904:	2a00      	cmp	r2, #0
 800a906:	f040 8708 	bne.w	800b71a <_vfprintf_r+0x16ea>
 800a90a:	9b07      	ldr	r3, [sp, #28]
 800a90c:	4897      	ldr	r0, [pc, #604]	; (800ab6c <_vfprintf_r+0xb3c>)
 800a90e:	069c      	lsls	r4, r3, #26
 800a910:	f53f aec4 	bmi.w	800a69c <_vfprintf_r+0x66c>
 800a914:	9b07      	ldr	r3, [sp, #28]
 800a916:	06d9      	lsls	r1, r3, #27
 800a918:	f140 841f 	bpl.w	800b15a <_vfprintf_r+0x112a>
 800a91c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a91e:	4613      	mov	r3, r2
 800a920:	3304      	adds	r3, #4
 800a922:	6814      	ldr	r4, [r2, #0]
 800a924:	930e      	str	r3, [sp, #56]	; 0x38
 800a926:	2500      	movs	r5, #0
 800a928:	e6c1      	b.n	800a6ae <_vfprintf_r+0x67e>
 800a92a:	f898 3000 	ldrb.w	r3, [r8]
 800a92e:	2900      	cmp	r1, #0
 800a930:	f47f abf1 	bne.w	800a116 <_vfprintf_r+0xe6>
 800a934:	2201      	movs	r2, #1
 800a936:	2120      	movs	r1, #32
 800a938:	f7ff bbed 	b.w	800a116 <_vfprintf_r+0xe6>
 800a93c:	9b07      	ldr	r3, [sp, #28]
 800a93e:	f043 0301 	orr.w	r3, r3, #1
 800a942:	9307      	str	r3, [sp, #28]
 800a944:	f898 3000 	ldrb.w	r3, [r8]
 800a948:	f7ff bbe5 	b.w	800a116 <_vfprintf_r+0xe6>
 800a94c:	9b07      	ldr	r3, [sp, #28]
 800a94e:	f043 0320 	orr.w	r3, r3, #32
 800a952:	9307      	str	r3, [sp, #28]
 800a954:	f898 3000 	ldrb.w	r3, [r8]
 800a958:	f7ff bbdd 	b.w	800a116 <_vfprintf_r+0xe6>
 800a95c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a95e:	9311      	str	r3, [sp, #68]	; 0x44
 800a960:	6816      	ldr	r6, [r2, #0]
 800a962:	2400      	movs	r4, #0
 800a964:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
 800a968:	1d17      	adds	r7, r2, #4
 800a96a:	2e00      	cmp	r6, #0
 800a96c:	f000 85c2 	beq.w	800b4f4 <_vfprintf_r+0x14c4>
 800a970:	2d00      	cmp	r5, #0
 800a972:	f2c0 84fe 	blt.w	800b372 <_vfprintf_r+0x1342>
 800a976:	462a      	mov	r2, r5
 800a978:	4621      	mov	r1, r4
 800a97a:	4630      	mov	r0, r6
 800a97c:	f7f5 ff70 	bl	8000860 <memchr>
 800a980:	2800      	cmp	r0, #0
 800a982:	f000 8600 	beq.w	800b586 <_vfprintf_r+0x1556>
 800a986:	1b83      	subs	r3, r0, r6
 800a988:	930d      	str	r3, [sp, #52]	; 0x34
 800a98a:	46a3      	mov	fp, r4
 800a98c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a990:	970e      	str	r7, [sp, #56]	; 0x38
 800a992:	9309      	str	r3, [sp, #36]	; 0x24
 800a994:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 800a998:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800a99c:	e556      	b.n	800a44c <_vfprintf_r+0x41c>
 800a99e:	f898 3000 	ldrb.w	r3, [r8]
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	212b      	movs	r1, #43	; 0x2b
 800a9a6:	f7ff bbb6 	b.w	800a116 <_vfprintf_r+0xe6>
 800a9aa:	4870      	ldr	r0, [pc, #448]	; (800ab6c <_vfprintf_r+0xb3c>)
 800a9ac:	9211      	str	r2, [sp, #68]	; 0x44
 800a9ae:	f1bb 0f00 	cmp.w	fp, #0
 800a9b2:	f040 8174 	bne.w	800ac9e <_vfprintf_r+0xc6e>
 800a9b6:	465f      	mov	r7, fp
 800a9b8:	e6e4      	b.n	800a784 <_vfprintf_r+0x754>
 800a9ba:	9311      	str	r3, [sp, #68]	; 0x44
 800a9bc:	2a00      	cmp	r2, #0
 800a9be:	f040 8695 	bne.w	800b6ec <_vfprintf_r+0x16bc>
 800a9c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a9c4:	2a00      	cmp	r2, #0
 800a9c6:	f43f ac5b 	beq.w	800a280 <_vfprintf_r+0x250>
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	2101      	movs	r1, #1
 800a9ce:	461f      	mov	r7, r3
 800a9d0:	9109      	str	r1, [sp, #36]	; 0x24
 800a9d2:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 800a9d6:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800a9da:	469b      	mov	fp, r3
 800a9dc:	9313      	str	r3, [sp, #76]	; 0x4c
 800a9de:	910d      	str	r1, [sp, #52]	; 0x34
 800a9e0:	ae26      	add	r6, sp, #152	; 0x98
 800a9e2:	e537      	b.n	800a454 <_vfprintf_r+0x424>
 800a9e4:	f1bb 0f00 	cmp.w	fp, #0
 800a9e8:	f000 85d8 	beq.w	800b59c <_vfprintf_r+0x156c>
 800a9ec:	2700      	movs	r7, #0
 800a9ee:	2400      	movs	r4, #0
 800a9f0:	2500      	movs	r5, #0
 800a9f2:	e478      	b.n	800a2e6 <_vfprintf_r+0x2b6>
 800a9f4:	485d      	ldr	r0, [pc, #372]	; (800ab6c <_vfprintf_r+0xb3c>)
 800a9f6:	9307      	str	r3, [sp, #28]
 800a9f8:	9211      	str	r2, [sp, #68]	; 0x44
 800a9fa:	ea54 0305 	orrs.w	r3, r4, r5
 800a9fe:	970e      	str	r7, [sp, #56]	; 0x38
 800aa00:	f04f 0700 	mov.w	r7, #0
 800aa04:	f47f ae71 	bne.w	800a6ea <_vfprintf_r+0x6ba>
 800aa08:	2400      	movs	r4, #0
 800aa0a:	2500      	movs	r5, #0
 800aa0c:	e66d      	b.n	800a6ea <_vfprintf_r+0x6ba>
 800aa0e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800aa10:	e577      	b.n	800a502 <_vfprintf_r+0x4d2>
 800aa12:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aa14:	2b65      	cmp	r3, #101	; 0x65
 800aa16:	f340 80af 	ble.w	800ab78 <_vfprintf_r+0xb48>
 800aa1a:	9814      	ldr	r0, [sp, #80]	; 0x50
 800aa1c:	9915      	ldr	r1, [sp, #84]	; 0x54
 800aa1e:	2200      	movs	r2, #0
 800aa20:	2300      	movs	r3, #0
 800aa22:	f7f6 fb8d 	bl	8001140 <__aeabi_dcmpeq>
 800aa26:	2800      	cmp	r0, #0
 800aa28:	f000 813b 	beq.w	800aca2 <_vfprintf_r+0xc72>
 800aa2c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800aa2e:	4a50      	ldr	r2, [pc, #320]	; (800ab70 <_vfprintf_r+0xb40>)
 800aa30:	f8c9 2000 	str.w	r2, [r9]
 800aa34:	3301      	adds	r3, #1
 800aa36:	3401      	adds	r4, #1
 800aa38:	2201      	movs	r2, #1
 800aa3a:	2b07      	cmp	r3, #7
 800aa3c:	9425      	str	r4, [sp, #148]	; 0x94
 800aa3e:	9324      	str	r3, [sp, #144]	; 0x90
 800aa40:	f8c9 2004 	str.w	r2, [r9, #4]
 800aa44:	f300 83b2 	bgt.w	800b1ac <_vfprintf_r+0x117c>
 800aa48:	f109 0908 	add.w	r9, r9, #8
 800aa4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aa4e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aa50:	4293      	cmp	r3, r2
 800aa52:	db03      	blt.n	800aa5c <_vfprintf_r+0xa2c>
 800aa54:	9b07      	ldr	r3, [sp, #28]
 800aa56:	07d8      	lsls	r0, r3, #31
 800aa58:	f57f adc3 	bpl.w	800a5e2 <_vfprintf_r+0x5b2>
 800aa5c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800aa5e:	9916      	ldr	r1, [sp, #88]	; 0x58
 800aa60:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aa62:	f8c9 2000 	str.w	r2, [r9]
 800aa66:	3301      	adds	r3, #1
 800aa68:	440c      	add	r4, r1
 800aa6a:	2b07      	cmp	r3, #7
 800aa6c:	9425      	str	r4, [sp, #148]	; 0x94
 800aa6e:	f8c9 1004 	str.w	r1, [r9, #4]
 800aa72:	9324      	str	r3, [sp, #144]	; 0x90
 800aa74:	f300 8470 	bgt.w	800b358 <_vfprintf_r+0x1328>
 800aa78:	f109 0908 	add.w	r9, r9, #8
 800aa7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aa7e:	1e5d      	subs	r5, r3, #1
 800aa80:	2d00      	cmp	r5, #0
 800aa82:	f77f adae 	ble.w	800a5e2 <_vfprintf_r+0x5b2>
 800aa86:	4a3b      	ldr	r2, [pc, #236]	; (800ab74 <_vfprintf_r+0xb44>)
 800aa88:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800aa8a:	920f      	str	r2, [sp, #60]	; 0x3c
 800aa8c:	2d10      	cmp	r5, #16
 800aa8e:	f340 81d2 	ble.w	800ae36 <_vfprintf_r+0xe06>
 800aa92:	2610      	movs	r6, #16
 800aa94:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800aa96:	f8dd b020 	ldr.w	fp, [sp, #32]
 800aa9a:	e005      	b.n	800aaa8 <_vfprintf_r+0xa78>
 800aa9c:	f109 0908 	add.w	r9, r9, #8
 800aaa0:	3d10      	subs	r5, #16
 800aaa2:	2d10      	cmp	r5, #16
 800aaa4:	f340 81c7 	ble.w	800ae36 <_vfprintf_r+0xe06>
 800aaa8:	3301      	adds	r3, #1
 800aaaa:	3410      	adds	r4, #16
 800aaac:	2b07      	cmp	r3, #7
 800aaae:	9425      	str	r4, [sp, #148]	; 0x94
 800aab0:	9324      	str	r3, [sp, #144]	; 0x90
 800aab2:	f8c9 a000 	str.w	sl, [r9]
 800aab6:	f8c9 6004 	str.w	r6, [r9, #4]
 800aaba:	ddef      	ble.n	800aa9c <_vfprintf_r+0xa6c>
 800aabc:	aa23      	add	r2, sp, #140	; 0x8c
 800aabe:	4659      	mov	r1, fp
 800aac0:	4638      	mov	r0, r7
 800aac2:	f003 fc8f 	bl	800e3e4 <__sprint_r>
 800aac6:	2800      	cmp	r0, #0
 800aac8:	f47f abe1 	bne.w	800a28e <_vfprintf_r+0x25e>
 800aacc:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800aace:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800aad0:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800aad4:	e7e4      	b.n	800aaa0 <_vfprintf_r+0xa70>
 800aad6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aad8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aada:	1a9f      	subs	r7, r3, r2
 800aadc:	2f00      	cmp	r7, #0
 800aade:	f77f ad34 	ble.w	800a54a <_vfprintf_r+0x51a>
 800aae2:	4a24      	ldr	r2, [pc, #144]	; (800ab74 <_vfprintf_r+0xb44>)
 800aae4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800aae6:	920f      	str	r2, [sp, #60]	; 0x3c
 800aae8:	2f10      	cmp	r7, #16
 800aaea:	dd2b      	ble.n	800ab44 <_vfprintf_r+0xb14>
 800aaec:	464a      	mov	r2, r9
 800aaee:	4621      	mov	r1, r4
 800aaf0:	46b9      	mov	r9, r7
 800aaf2:	2510      	movs	r5, #16
 800aaf4:	4637      	mov	r7, r6
 800aaf6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800aaf8:	9e08      	ldr	r6, [sp, #32]
 800aafa:	e006      	b.n	800ab0a <_vfprintf_r+0xada>
 800aafc:	f1a9 0910 	sub.w	r9, r9, #16
 800ab00:	f1b9 0f10 	cmp.w	r9, #16
 800ab04:	f102 0208 	add.w	r2, r2, #8
 800ab08:	dd18      	ble.n	800ab3c <_vfprintf_r+0xb0c>
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	3110      	adds	r1, #16
 800ab0e:	2b07      	cmp	r3, #7
 800ab10:	9125      	str	r1, [sp, #148]	; 0x94
 800ab12:	9324      	str	r3, [sp, #144]	; 0x90
 800ab14:	f8c2 a000 	str.w	sl, [r2]
 800ab18:	6055      	str	r5, [r2, #4]
 800ab1a:	ddef      	ble.n	800aafc <_vfprintf_r+0xacc>
 800ab1c:	aa23      	add	r2, sp, #140	; 0x8c
 800ab1e:	4631      	mov	r1, r6
 800ab20:	4620      	mov	r0, r4
 800ab22:	f003 fc5f 	bl	800e3e4 <__sprint_r>
 800ab26:	2800      	cmp	r0, #0
 800ab28:	f47f abb1 	bne.w	800a28e <_vfprintf_r+0x25e>
 800ab2c:	f1a9 0910 	sub.w	r9, r9, #16
 800ab30:	f1b9 0f10 	cmp.w	r9, #16
 800ab34:	9925      	ldr	r1, [sp, #148]	; 0x94
 800ab36:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ab38:	aa30      	add	r2, sp, #192	; 0xc0
 800ab3a:	dce6      	bgt.n	800ab0a <_vfprintf_r+0xada>
 800ab3c:	463e      	mov	r6, r7
 800ab3e:	460c      	mov	r4, r1
 800ab40:	464f      	mov	r7, r9
 800ab42:	4691      	mov	r9, r2
 800ab44:	3301      	adds	r3, #1
 800ab46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ab48:	9324      	str	r3, [sp, #144]	; 0x90
 800ab4a:	443c      	add	r4, r7
 800ab4c:	2b07      	cmp	r3, #7
 800ab4e:	9425      	str	r4, [sp, #148]	; 0x94
 800ab50:	e889 0084 	stmia.w	r9, {r2, r7}
 800ab54:	f300 822c 	bgt.w	800afb0 <_vfprintf_r+0xf80>
 800ab58:	f109 0908 	add.w	r9, r9, #8
 800ab5c:	e4f5      	b.n	800a54a <_vfprintf_r+0x51a>
 800ab5e:	bf00      	nop
 800ab60:	7fefffff 	.word	0x7fefffff
 800ab64:	0800ee3c 	.word	0x0800ee3c
 800ab68:	0800ee38 	.word	0x0800ee38
 800ab6c:	0800ee5c 	.word	0x0800ee5c
 800ab70:	0800ee78 	.word	0x0800ee78
 800ab74:	0800ee8c 	.word	0x0800ee8c
 800ab78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab7a:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	f340 81d0 	ble.w	800af22 <_vfprintf_r+0xef2>
 800ab82:	3501      	adds	r5, #1
 800ab84:	3401      	adds	r4, #1
 800ab86:	2301      	movs	r3, #1
 800ab88:	2d07      	cmp	r5, #7
 800ab8a:	9425      	str	r4, [sp, #148]	; 0x94
 800ab8c:	9524      	str	r5, [sp, #144]	; 0x90
 800ab8e:	f8c9 6000 	str.w	r6, [r9]
 800ab92:	f8c9 3004 	str.w	r3, [r9, #4]
 800ab96:	f300 81e1 	bgt.w	800af5c <_vfprintf_r+0xf2c>
 800ab9a:	f109 0908 	add.w	r9, r9, #8
 800ab9e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800aba0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aba2:	f8c9 3000 	str.w	r3, [r9]
 800aba6:	3501      	adds	r5, #1
 800aba8:	4414      	add	r4, r2
 800abaa:	2d07      	cmp	r5, #7
 800abac:	9425      	str	r4, [sp, #148]	; 0x94
 800abae:	9524      	str	r5, [sp, #144]	; 0x90
 800abb0:	f8c9 2004 	str.w	r2, [r9, #4]
 800abb4:	f300 81ed 	bgt.w	800af92 <_vfprintf_r+0xf62>
 800abb8:	f109 0908 	add.w	r9, r9, #8
 800abbc:	2300      	movs	r3, #0
 800abbe:	9814      	ldr	r0, [sp, #80]	; 0x50
 800abc0:	9915      	ldr	r1, [sp, #84]	; 0x54
 800abc2:	2200      	movs	r2, #0
 800abc4:	f7f6 fabc 	bl	8001140 <__aeabi_dcmpeq>
 800abc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800abca:	2800      	cmp	r0, #0
 800abcc:	f040 80c3 	bne.w	800ad56 <_vfprintf_r+0xd26>
 800abd0:	3b01      	subs	r3, #1
 800abd2:	3501      	adds	r5, #1
 800abd4:	3601      	adds	r6, #1
 800abd6:	441c      	add	r4, r3
 800abd8:	2d07      	cmp	r5, #7
 800abda:	9524      	str	r5, [sp, #144]	; 0x90
 800abdc:	9425      	str	r4, [sp, #148]	; 0x94
 800abde:	f8c9 6000 	str.w	r6, [r9]
 800abe2:	f8c9 3004 	str.w	r3, [r9, #4]
 800abe6:	f300 81ac 	bgt.w	800af42 <_vfprintf_r+0xf12>
 800abea:	f109 0908 	add.w	r9, r9, #8
 800abee:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800abf0:	f8c9 2004 	str.w	r2, [r9, #4]
 800abf4:	3501      	adds	r5, #1
 800abf6:	4414      	add	r4, r2
 800abf8:	ab1f      	add	r3, sp, #124	; 0x7c
 800abfa:	2d07      	cmp	r5, #7
 800abfc:	9425      	str	r4, [sp, #148]	; 0x94
 800abfe:	9524      	str	r5, [sp, #144]	; 0x90
 800ac00:	f8c9 3000 	str.w	r3, [r9]
 800ac04:	f77f aceb 	ble.w	800a5de <_vfprintf_r+0x5ae>
 800ac08:	aa23      	add	r2, sp, #140	; 0x8c
 800ac0a:	9908      	ldr	r1, [sp, #32]
 800ac0c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ac0e:	f003 fbe9 	bl	800e3e4 <__sprint_r>
 800ac12:	2800      	cmp	r0, #0
 800ac14:	f47f ab3b 	bne.w	800a28e <_vfprintf_r+0x25e>
 800ac18:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800ac1a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800ac1e:	e4e0      	b.n	800a5e2 <_vfprintf_r+0x5b2>
 800ac20:	aa23      	add	r2, sp, #140	; 0x8c
 800ac22:	9908      	ldr	r1, [sp, #32]
 800ac24:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ac26:	f003 fbdd 	bl	800e3e4 <__sprint_r>
 800ac2a:	2800      	cmp	r0, #0
 800ac2c:	f43f ad27 	beq.w	800a67e <_vfprintf_r+0x64e>
 800ac30:	f7ff bb2d 	b.w	800a28e <_vfprintf_r+0x25e>
 800ac34:	aa23      	add	r2, sp, #140	; 0x8c
 800ac36:	9908      	ldr	r1, [sp, #32]
 800ac38:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ac3a:	f003 fbd3 	bl	800e3e4 <__sprint_r>
 800ac3e:	2800      	cmp	r0, #0
 800ac40:	f47f ab25 	bne.w	800a28e <_vfprintf_r+0x25e>
 800ac44:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800ac46:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800ac4a:	e4b7      	b.n	800a5bc <_vfprintf_r+0x58c>
 800ac4c:	aa23      	add	r2, sp, #140	; 0x8c
 800ac4e:	9908      	ldr	r1, [sp, #32]
 800ac50:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ac52:	f003 fbc7 	bl	800e3e4 <__sprint_r>
 800ac56:	2800      	cmp	r0, #0
 800ac58:	f47f ab19 	bne.w	800a28e <_vfprintf_r+0x25e>
 800ac5c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800ac5e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800ac62:	e45e      	b.n	800a522 <_vfprintf_r+0x4f2>
 800ac64:	aa23      	add	r2, sp, #140	; 0x8c
 800ac66:	9908      	ldr	r1, [sp, #32]
 800ac68:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ac6a:	f003 fbbb 	bl	800e3e4 <__sprint_r>
 800ac6e:	2800      	cmp	r0, #0
 800ac70:	f47f ab0d 	bne.w	800a28e <_vfprintf_r+0x25e>
 800ac74:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800ac76:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800ac7a:	e462      	b.n	800a542 <_vfprintf_r+0x512>
 800ac7c:	f1bb 0f00 	cmp.w	fp, #0
 800ac80:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800ac84:	f2c0 829e 	blt.w	800b1c4 <_vfprintf_r+0x1194>
 800ac88:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 800ac8c:	9307      	str	r3, [sp, #28]
 800ac8e:	ea54 0305 	orrs.w	r3, r4, r5
 800ac92:	f47f ad2a 	bne.w	800a6ea <_vfprintf_r+0x6ba>
 800ac96:	f1bb 0f00 	cmp.w	fp, #0
 800ac9a:	f43f ae8c 	beq.w	800a9b6 <_vfprintf_r+0x986>
 800ac9e:	2700      	movs	r7, #0
 800aca0:	e6b2      	b.n	800aa08 <_vfprintf_r+0x9d8>
 800aca2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800aca4:	2d00      	cmp	r5, #0
 800aca6:	f340 828f 	ble.w	800b1c8 <_vfprintf_r+0x1198>
 800acaa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800acac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800acae:	4293      	cmp	r3, r2
 800acb0:	bfa8      	it	ge
 800acb2:	4613      	movge	r3, r2
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	461d      	mov	r5, r3
 800acb8:	dd0d      	ble.n	800acd6 <_vfprintf_r+0xca6>
 800acba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800acbc:	f8c9 6000 	str.w	r6, [r9]
 800acc0:	3301      	adds	r3, #1
 800acc2:	442c      	add	r4, r5
 800acc4:	2b07      	cmp	r3, #7
 800acc6:	9425      	str	r4, [sp, #148]	; 0x94
 800acc8:	f8c9 5004 	str.w	r5, [r9, #4]
 800accc:	9324      	str	r3, [sp, #144]	; 0x90
 800acce:	f300 8384 	bgt.w	800b3da <_vfprintf_r+0x13aa>
 800acd2:	f109 0908 	add.w	r9, r9, #8
 800acd6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800acd8:	2d00      	cmp	r5, #0
 800acda:	bfa8      	it	ge
 800acdc:	1b5b      	subge	r3, r3, r5
 800acde:	2b00      	cmp	r3, #0
 800ace0:	461d      	mov	r5, r3
 800ace2:	f340 80be 	ble.w	800ae62 <_vfprintf_r+0xe32>
 800ace6:	4ab9      	ldr	r2, [pc, #740]	; (800afcc <_vfprintf_r+0xf9c>)
 800ace8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800acea:	920f      	str	r2, [sp, #60]	; 0x3c
 800acec:	2d10      	cmp	r5, #16
 800acee:	f340 8245 	ble.w	800b17c <_vfprintf_r+0x114c>
 800acf2:	4622      	mov	r2, r4
 800acf4:	2710      	movs	r7, #16
 800acf6:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800acfa:	9c08      	ldr	r4, [sp, #32]
 800acfc:	e005      	b.n	800ad0a <_vfprintf_r+0xcda>
 800acfe:	f109 0908 	add.w	r9, r9, #8
 800ad02:	3d10      	subs	r5, #16
 800ad04:	2d10      	cmp	r5, #16
 800ad06:	f340 8238 	ble.w	800b17a <_vfprintf_r+0x114a>
 800ad0a:	3301      	adds	r3, #1
 800ad0c:	3210      	adds	r2, #16
 800ad0e:	2b07      	cmp	r3, #7
 800ad10:	9225      	str	r2, [sp, #148]	; 0x94
 800ad12:	9324      	str	r3, [sp, #144]	; 0x90
 800ad14:	f8c9 a000 	str.w	sl, [r9]
 800ad18:	f8c9 7004 	str.w	r7, [r9, #4]
 800ad1c:	ddef      	ble.n	800acfe <_vfprintf_r+0xcce>
 800ad1e:	aa23      	add	r2, sp, #140	; 0x8c
 800ad20:	4621      	mov	r1, r4
 800ad22:	4658      	mov	r0, fp
 800ad24:	f003 fb5e 	bl	800e3e4 <__sprint_r>
 800ad28:	2800      	cmp	r0, #0
 800ad2a:	f47f aab0 	bne.w	800a28e <_vfprintf_r+0x25e>
 800ad2e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800ad30:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ad32:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800ad36:	e7e4      	b.n	800ad02 <_vfprintf_r+0xcd2>
 800ad38:	aa23      	add	r2, sp, #140	; 0x8c
 800ad3a:	9908      	ldr	r1, [sp, #32]
 800ad3c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ad3e:	f003 fb51 	bl	800e3e4 <__sprint_r>
 800ad42:	2800      	cmp	r0, #0
 800ad44:	f47f aaa3 	bne.w	800a28e <_vfprintf_r+0x25e>
 800ad48:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800ad4c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800ad4e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800ad52:	f7ff bbd6 	b.w	800a502 <_vfprintf_r+0x4d2>
 800ad56:	1e5e      	subs	r6, r3, #1
 800ad58:	2e00      	cmp	r6, #0
 800ad5a:	f77f af48 	ble.w	800abee <_vfprintf_r+0xbbe>
 800ad5e:	4b9b      	ldr	r3, [pc, #620]	; (800afcc <_vfprintf_r+0xf9c>)
 800ad60:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad62:	2e10      	cmp	r6, #16
 800ad64:	f340 810a 	ble.w	800af7c <_vfprintf_r+0xf4c>
 800ad68:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 800ad6c:	2710      	movs	r7, #16
 800ad6e:	46b0      	mov	r8, r6
 800ad70:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800ad74:	9e08      	ldr	r6, [sp, #32]
 800ad76:	e007      	b.n	800ad88 <_vfprintf_r+0xd58>
 800ad78:	f109 0908 	add.w	r9, r9, #8
 800ad7c:	f1a8 0810 	sub.w	r8, r8, #16
 800ad80:	f1b8 0f10 	cmp.w	r8, #16
 800ad84:	f340 80f7 	ble.w	800af76 <_vfprintf_r+0xf46>
 800ad88:	3501      	adds	r5, #1
 800ad8a:	3410      	adds	r4, #16
 800ad8c:	2d07      	cmp	r5, #7
 800ad8e:	9425      	str	r4, [sp, #148]	; 0x94
 800ad90:	9524      	str	r5, [sp, #144]	; 0x90
 800ad92:	f8c9 a000 	str.w	sl, [r9]
 800ad96:	f8c9 7004 	str.w	r7, [r9, #4]
 800ad9a:	dded      	ble.n	800ad78 <_vfprintf_r+0xd48>
 800ad9c:	aa23      	add	r2, sp, #140	; 0x8c
 800ad9e:	4631      	mov	r1, r6
 800ada0:	4658      	mov	r0, fp
 800ada2:	f003 fb1f 	bl	800e3e4 <__sprint_r>
 800ada6:	2800      	cmp	r0, #0
 800ada8:	f47f aa71 	bne.w	800a28e <_vfprintf_r+0x25e>
 800adac:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800adae:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800adb0:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800adb4:	e7e2      	b.n	800ad7c <_vfprintf_r+0xd4c>
 800adb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800adb8:	6814      	ldr	r4, [r2, #0]
 800adba:	4613      	mov	r3, r2
 800adbc:	3304      	adds	r3, #4
 800adbe:	17e5      	asrs	r5, r4, #31
 800adc0:	930e      	str	r3, [sp, #56]	; 0x38
 800adc2:	4622      	mov	r2, r4
 800adc4:	462b      	mov	r3, r5
 800adc6:	e4c6      	b.n	800a756 <_vfprintf_r+0x726>
 800adc8:	9907      	ldr	r1, [sp, #28]
 800adca:	f011 0210 	ands.w	r2, r1, #16
 800adce:	d015      	beq.n	800adfc <_vfprintf_r+0xdcc>
 800add0:	980e      	ldr	r0, [sp, #56]	; 0x38
 800add2:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800add6:	f1bb 0f00 	cmp.w	fp, #0
 800adda:	6804      	ldr	r4, [r0, #0]
 800addc:	f100 0704 	add.w	r7, r0, #4
 800ade0:	f04f 0500 	mov.w	r5, #0
 800ade4:	db1b      	blt.n	800ae1e <_vfprintf_r+0xdee>
 800ade6:	460a      	mov	r2, r1
 800ade8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800adec:	9207      	str	r2, [sp, #28]
 800adee:	ea54 0205 	orrs.w	r2, r4, r5
 800adf2:	970e      	str	r7, [sp, #56]	; 0x38
 800adf4:	461f      	mov	r7, r3
 800adf6:	f47f ab05 	bne.w	800a404 <_vfprintf_r+0x3d4>
 800adfa:	e4bf      	b.n	800a77c <_vfprintf_r+0x74c>
 800adfc:	9907      	ldr	r1, [sp, #28]
 800adfe:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 800ae02:	f040 8256 	bne.w	800b2b2 <_vfprintf_r+0x1282>
 800ae06:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ae08:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800ae0c:	f1bb 0f00 	cmp.w	fp, #0
 800ae10:	680c      	ldr	r4, [r1, #0]
 800ae12:	f101 0704 	add.w	r7, r1, #4
 800ae16:	f04f 0500 	mov.w	r5, #0
 800ae1a:	f280 819c 	bge.w	800b156 <_vfprintf_r+0x1126>
 800ae1e:	970e      	str	r7, [sp, #56]	; 0x38
 800ae20:	461f      	mov	r7, r3
 800ae22:	ea54 0305 	orrs.w	r3, r4, r5
 800ae26:	f47f aaed 	bne.w	800a404 <_vfprintf_r+0x3d4>
 800ae2a:	ae40      	add	r6, sp, #256	; 0x100
 800ae2c:	3430      	adds	r4, #48	; 0x30
 800ae2e:	f806 4d41 	strb.w	r4, [r6, #-65]!
 800ae32:	f7ff bb01 	b.w	800a438 <_vfprintf_r+0x408>
 800ae36:	3301      	adds	r3, #1
 800ae38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ae3a:	9324      	str	r3, [sp, #144]	; 0x90
 800ae3c:	442c      	add	r4, r5
 800ae3e:	2b07      	cmp	r3, #7
 800ae40:	9425      	str	r4, [sp, #148]	; 0x94
 800ae42:	e889 0024 	stmia.w	r9, {r2, r5}
 800ae46:	f77f abca 	ble.w	800a5de <_vfprintf_r+0x5ae>
 800ae4a:	e6dd      	b.n	800ac08 <_vfprintf_r+0xbd8>
 800ae4c:	aa23      	add	r2, sp, #140	; 0x8c
 800ae4e:	9908      	ldr	r1, [sp, #32]
 800ae50:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ae52:	f003 fac7 	bl	800e3e4 <__sprint_r>
 800ae56:	2800      	cmp	r0, #0
 800ae58:	f47f aa19 	bne.w	800a28e <_vfprintf_r+0x25e>
 800ae5c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800ae5e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800ae62:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ae64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ae66:	4432      	add	r2, r6
 800ae68:	4617      	mov	r7, r2
 800ae6a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	db47      	blt.n	800af00 <_vfprintf_r+0xed0>
 800ae70:	9a07      	ldr	r2, [sp, #28]
 800ae72:	07d2      	lsls	r2, r2, #31
 800ae74:	d444      	bmi.n	800af00 <_vfprintf_r+0xed0>
 800ae76:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ae78:	440e      	add	r6, r1
 800ae7a:	1bf5      	subs	r5, r6, r7
 800ae7c:	1acb      	subs	r3, r1, r3
 800ae7e:	429d      	cmp	r5, r3
 800ae80:	bfa8      	it	ge
 800ae82:	461d      	movge	r5, r3
 800ae84:	2d00      	cmp	r5, #0
 800ae86:	462e      	mov	r6, r5
 800ae88:	dd0d      	ble.n	800aea6 <_vfprintf_r+0xe76>
 800ae8a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ae8c:	f8c9 7000 	str.w	r7, [r9]
 800ae90:	3201      	adds	r2, #1
 800ae92:	442c      	add	r4, r5
 800ae94:	2a07      	cmp	r2, #7
 800ae96:	9425      	str	r4, [sp, #148]	; 0x94
 800ae98:	f8c9 5004 	str.w	r5, [r9, #4]
 800ae9c:	9224      	str	r2, [sp, #144]	; 0x90
 800ae9e:	f300 831a 	bgt.w	800b4d6 <_vfprintf_r+0x14a6>
 800aea2:	f109 0908 	add.w	r9, r9, #8
 800aea6:	2e00      	cmp	r6, #0
 800aea8:	bfac      	ite	ge
 800aeaa:	1b9d      	subge	r5, r3, r6
 800aeac:	461d      	movlt	r5, r3
 800aeae:	2d00      	cmp	r5, #0
 800aeb0:	f77f ab97 	ble.w	800a5e2 <_vfprintf_r+0x5b2>
 800aeb4:	4a45      	ldr	r2, [pc, #276]	; (800afcc <_vfprintf_r+0xf9c>)
 800aeb6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800aeb8:	920f      	str	r2, [sp, #60]	; 0x3c
 800aeba:	2d10      	cmp	r5, #16
 800aebc:	ddbb      	ble.n	800ae36 <_vfprintf_r+0xe06>
 800aebe:	2610      	movs	r6, #16
 800aec0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800aec2:	f8dd b020 	ldr.w	fp, [sp, #32]
 800aec6:	e004      	b.n	800aed2 <_vfprintf_r+0xea2>
 800aec8:	f109 0908 	add.w	r9, r9, #8
 800aecc:	3d10      	subs	r5, #16
 800aece:	2d10      	cmp	r5, #16
 800aed0:	ddb1      	ble.n	800ae36 <_vfprintf_r+0xe06>
 800aed2:	3301      	adds	r3, #1
 800aed4:	3410      	adds	r4, #16
 800aed6:	2b07      	cmp	r3, #7
 800aed8:	9425      	str	r4, [sp, #148]	; 0x94
 800aeda:	9324      	str	r3, [sp, #144]	; 0x90
 800aedc:	f8c9 a000 	str.w	sl, [r9]
 800aee0:	f8c9 6004 	str.w	r6, [r9, #4]
 800aee4:	ddf0      	ble.n	800aec8 <_vfprintf_r+0xe98>
 800aee6:	aa23      	add	r2, sp, #140	; 0x8c
 800aee8:	4659      	mov	r1, fp
 800aeea:	4638      	mov	r0, r7
 800aeec:	f003 fa7a 	bl	800e3e4 <__sprint_r>
 800aef0:	2800      	cmp	r0, #0
 800aef2:	f47f a9cc 	bne.w	800a28e <_vfprintf_r+0x25e>
 800aef6:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800aef8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800aefa:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800aefe:	e7e5      	b.n	800aecc <_vfprintf_r+0xe9c>
 800af00:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800af02:	9816      	ldr	r0, [sp, #88]	; 0x58
 800af04:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800af06:	f8c9 1000 	str.w	r1, [r9]
 800af0a:	3201      	adds	r2, #1
 800af0c:	4404      	add	r4, r0
 800af0e:	2a07      	cmp	r2, #7
 800af10:	9425      	str	r4, [sp, #148]	; 0x94
 800af12:	f8c9 0004 	str.w	r0, [r9, #4]
 800af16:	9224      	str	r2, [sp, #144]	; 0x90
 800af18:	f300 8278 	bgt.w	800b40c <_vfprintf_r+0x13dc>
 800af1c:	f109 0908 	add.w	r9, r9, #8
 800af20:	e7a9      	b.n	800ae76 <_vfprintf_r+0xe46>
 800af22:	9b07      	ldr	r3, [sp, #28]
 800af24:	07df      	lsls	r7, r3, #31
 800af26:	f53f ae2c 	bmi.w	800ab82 <_vfprintf_r+0xb52>
 800af2a:	3501      	adds	r5, #1
 800af2c:	3401      	adds	r4, #1
 800af2e:	2301      	movs	r3, #1
 800af30:	2d07      	cmp	r5, #7
 800af32:	9425      	str	r4, [sp, #148]	; 0x94
 800af34:	9524      	str	r5, [sp, #144]	; 0x90
 800af36:	f8c9 6000 	str.w	r6, [r9]
 800af3a:	f8c9 3004 	str.w	r3, [r9, #4]
 800af3e:	f77f ae54 	ble.w	800abea <_vfprintf_r+0xbba>
 800af42:	aa23      	add	r2, sp, #140	; 0x8c
 800af44:	9908      	ldr	r1, [sp, #32]
 800af46:	980a      	ldr	r0, [sp, #40]	; 0x28
 800af48:	f003 fa4c 	bl	800e3e4 <__sprint_r>
 800af4c:	2800      	cmp	r0, #0
 800af4e:	f47f a99e 	bne.w	800a28e <_vfprintf_r+0x25e>
 800af52:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800af54:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800af56:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800af5a:	e648      	b.n	800abee <_vfprintf_r+0xbbe>
 800af5c:	aa23      	add	r2, sp, #140	; 0x8c
 800af5e:	9908      	ldr	r1, [sp, #32]
 800af60:	980a      	ldr	r0, [sp, #40]	; 0x28
 800af62:	f003 fa3f 	bl	800e3e4 <__sprint_r>
 800af66:	2800      	cmp	r0, #0
 800af68:	f47f a991 	bne.w	800a28e <_vfprintf_r+0x25e>
 800af6c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800af6e:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800af70:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800af74:	e613      	b.n	800ab9e <_vfprintf_r+0xb6e>
 800af76:	4646      	mov	r6, r8
 800af78:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800af7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af7e:	3501      	adds	r5, #1
 800af80:	4434      	add	r4, r6
 800af82:	2d07      	cmp	r5, #7
 800af84:	9425      	str	r4, [sp, #148]	; 0x94
 800af86:	9524      	str	r5, [sp, #144]	; 0x90
 800af88:	e889 0048 	stmia.w	r9, {r3, r6}
 800af8c:	f77f ae2d 	ble.w	800abea <_vfprintf_r+0xbba>
 800af90:	e7d7      	b.n	800af42 <_vfprintf_r+0xf12>
 800af92:	aa23      	add	r2, sp, #140	; 0x8c
 800af94:	9908      	ldr	r1, [sp, #32]
 800af96:	980a      	ldr	r0, [sp, #40]	; 0x28
 800af98:	f003 fa24 	bl	800e3e4 <__sprint_r>
 800af9c:	2800      	cmp	r0, #0
 800af9e:	f47f a976 	bne.w	800a28e <_vfprintf_r+0x25e>
 800afa2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800afa4:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800afa6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800afaa:	e607      	b.n	800abbc <_vfprintf_r+0xb8c>
 800afac:	2400      	movs	r4, #0
 800afae:	e73c      	b.n	800ae2a <_vfprintf_r+0xdfa>
 800afb0:	aa23      	add	r2, sp, #140	; 0x8c
 800afb2:	9908      	ldr	r1, [sp, #32]
 800afb4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800afb6:	f003 fa15 	bl	800e3e4 <__sprint_r>
 800afba:	2800      	cmp	r0, #0
 800afbc:	f47f a967 	bne.w	800a28e <_vfprintf_r+0x25e>
 800afc0:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800afc2:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800afc6:	f7ff bac0 	b.w	800a54a <_vfprintf_r+0x51a>
 800afca:	bf00      	nop
 800afcc:	0800ee8c 	.word	0x0800ee8c
 800afd0:	4264      	negs	r4, r4
 800afd2:	f04f 072d 	mov.w	r7, #45	; 0x2d
 800afd6:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800afda:	f1bb 0f00 	cmp.w	fp, #0
 800afde:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800afe2:	f6ff aa0f 	blt.w	800a404 <_vfprintf_r+0x3d4>
 800afe6:	9b07      	ldr	r3, [sp, #28]
 800afe8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800afec:	9307      	str	r3, [sp, #28]
 800afee:	f7ff ba09 	b.w	800a404 <_vfprintf_r+0x3d4>
 800aff2:	9b07      	ldr	r3, [sp, #28]
 800aff4:	06de      	lsls	r6, r3, #27
 800aff6:	d40b      	bmi.n	800b010 <_vfprintf_r+0xfe0>
 800aff8:	9b07      	ldr	r3, [sp, #28]
 800affa:	065d      	lsls	r5, r3, #25
 800affc:	d508      	bpl.n	800b010 <_vfprintf_r+0xfe0>
 800affe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b000:	6813      	ldr	r3, [r2, #0]
 800b002:	3204      	adds	r2, #4
 800b004:	920e      	str	r2, [sp, #56]	; 0x38
 800b006:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800b00a:	801a      	strh	r2, [r3, #0]
 800b00c:	f7ff b850 	b.w	800a0b0 <_vfprintf_r+0x80>
 800b010:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b012:	6813      	ldr	r3, [r2, #0]
 800b014:	3204      	adds	r2, #4
 800b016:	920e      	str	r2, [sp, #56]	; 0x38
 800b018:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b01a:	601a      	str	r2, [r3, #0]
 800b01c:	f7ff b848 	b.w	800a0b0 <_vfprintf_r+0x80>
 800b020:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800b022:	4622      	mov	r2, r4
 800b024:	4620      	mov	r0, r4
 800b026:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800b028:	4623      	mov	r3, r4
 800b02a:	4621      	mov	r1, r4
 800b02c:	f7f6 f8ba 	bl	80011a4 <__aeabi_dcmpun>
 800b030:	2800      	cmp	r0, #0
 800b032:	f040 8306 	bne.w	800b642 <_vfprintf_r+0x1612>
 800b036:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b038:	f1bb 3fff 	cmp.w	fp, #4294967295
 800b03c:	f023 0320 	bic.w	r3, r3, #32
 800b040:	930d      	str	r3, [sp, #52]	; 0x34
 800b042:	f000 827d 	beq.w	800b540 <_vfprintf_r+0x1510>
 800b046:	2b47      	cmp	r3, #71	; 0x47
 800b048:	f000 8176 	beq.w	800b338 <_vfprintf_r+0x1308>
 800b04c:	9b07      	ldr	r3, [sp, #28]
 800b04e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b052:	9310      	str	r3, [sp, #64]	; 0x40
 800b054:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b056:	1e1f      	subs	r7, r3, #0
 800b058:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b05a:	9309      	str	r3, [sp, #36]	; 0x24
 800b05c:	bfbb      	ittet	lt
 800b05e:	463b      	movlt	r3, r7
 800b060:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
 800b064:	2300      	movge	r3, #0
 800b066:	232d      	movlt	r3, #45	; 0x2d
 800b068:	930f      	str	r3, [sp, #60]	; 0x3c
 800b06a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b06c:	2b66      	cmp	r3, #102	; 0x66
 800b06e:	f000 8250 	beq.w	800b512 <_vfprintf_r+0x14e2>
 800b072:	2b46      	cmp	r3, #70	; 0x46
 800b074:	f000 8135 	beq.w	800b2e2 <_vfprintf_r+0x12b2>
 800b078:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b07a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b07c:	2b45      	cmp	r3, #69	; 0x45
 800b07e:	a821      	add	r0, sp, #132	; 0x84
 800b080:	a91e      	add	r1, sp, #120	; 0x78
 800b082:	bf0c      	ite	eq
 800b084:	f10b 0501 	addeq.w	r5, fp, #1
 800b088:	465d      	movne	r5, fp
 800b08a:	9004      	str	r0, [sp, #16]
 800b08c:	9103      	str	r1, [sp, #12]
 800b08e:	a81d      	add	r0, sp, #116	; 0x74
 800b090:	2102      	movs	r1, #2
 800b092:	463b      	mov	r3, r7
 800b094:	9002      	str	r0, [sp, #8]
 800b096:	9501      	str	r5, [sp, #4]
 800b098:	9100      	str	r1, [sp, #0]
 800b09a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b09c:	f000 fc78 	bl	800b990 <_dtoa_r>
 800b0a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b0a2:	2b67      	cmp	r3, #103	; 0x67
 800b0a4:	4606      	mov	r6, r0
 800b0a6:	f040 8288 	bne.w	800b5ba <_vfprintf_r+0x158a>
 800b0aa:	9b07      	ldr	r3, [sp, #28]
 800b0ac:	07da      	lsls	r2, r3, #31
 800b0ae:	f140 82bd 	bpl.w	800b62c <_vfprintf_r+0x15fc>
 800b0b2:	1974      	adds	r4, r6, r5
 800b0b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b0b6:	4639      	mov	r1, r7
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	f7f6 f840 	bl	8001140 <__aeabi_dcmpeq>
 800b0c0:	2800      	cmp	r0, #0
 800b0c2:	f040 8188 	bne.w	800b3d6 <_vfprintf_r+0x13a6>
 800b0c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0c8:	429c      	cmp	r4, r3
 800b0ca:	d906      	bls.n	800b0da <_vfprintf_r+0x10aa>
 800b0cc:	2130      	movs	r1, #48	; 0x30
 800b0ce:	1c5a      	adds	r2, r3, #1
 800b0d0:	9221      	str	r2, [sp, #132]	; 0x84
 800b0d2:	7019      	strb	r1, [r3, #0]
 800b0d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0d6:	429c      	cmp	r4, r3
 800b0d8:	d8f9      	bhi.n	800b0ce <_vfprintf_r+0x109e>
 800b0da:	1b9b      	subs	r3, r3, r6
 800b0dc:	9312      	str	r3, [sp, #72]	; 0x48
 800b0de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b0e0:	2b47      	cmp	r3, #71	; 0x47
 800b0e2:	f000 8171 	beq.w	800b3c8 <_vfprintf_r+0x1398>
 800b0e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b0e8:	2b65      	cmp	r3, #101	; 0x65
 800b0ea:	f340 8275 	ble.w	800b5d8 <_vfprintf_r+0x15a8>
 800b0ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b0f0:	2b66      	cmp	r3, #102	; 0x66
 800b0f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b0f4:	9313      	str	r3, [sp, #76]	; 0x4c
 800b0f6:	f000 8238 	beq.w	800b56a <_vfprintf_r+0x153a>
 800b0fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b0fc:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b0fe:	428a      	cmp	r2, r1
 800b100:	f2c0 8226 	blt.w	800b550 <_vfprintf_r+0x1520>
 800b104:	9b07      	ldr	r3, [sp, #28]
 800b106:	07db      	lsls	r3, r3, #31
 800b108:	f100 827d 	bmi.w	800b606 <_vfprintf_r+0x15d6>
 800b10c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b110:	920d      	str	r2, [sp, #52]	; 0x34
 800b112:	2267      	movs	r2, #103	; 0x67
 800b114:	9211      	str	r2, [sp, #68]	; 0x44
 800b116:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b118:	2a00      	cmp	r2, #0
 800b11a:	f040 814b 	bne.w	800b3b4 <_vfprintf_r+0x1384>
 800b11e:	9309      	str	r3, [sp, #36]	; 0x24
 800b120:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b122:	9307      	str	r3, [sp, #28]
 800b124:	4693      	mov	fp, r2
 800b126:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800b12a:	f7ff b98f 	b.w	800a44c <_vfprintf_r+0x41c>
 800b12e:	9907      	ldr	r1, [sp, #28]
 800b130:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 800b134:	f040 809f 	bne.w	800b276 <_vfprintf_r+0x1246>
 800b138:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b13a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800b13e:	f1bb 0f00 	cmp.w	fp, #0
 800b142:	680c      	ldr	r4, [r1, #0]
 800b144:	f101 0704 	add.w	r7, r1, #4
 800b148:	f04f 0500 	mov.w	r5, #0
 800b14c:	da12      	bge.n	800b174 <_vfprintf_r+0x1144>
 800b14e:	970e      	str	r7, [sp, #56]	; 0x38
 800b150:	2700      	movs	r7, #0
 800b152:	f7ff b8c8 	b.w	800a2e6 <_vfprintf_r+0x2b6>
 800b156:	9a07      	ldr	r2, [sp, #28]
 800b158:	e646      	b.n	800ade8 <_vfprintf_r+0xdb8>
 800b15a:	9b07      	ldr	r3, [sp, #28]
 800b15c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b15e:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b162:	4613      	mov	r3, r2
 800b164:	f000 809f 	beq.w	800b2a6 <_vfprintf_r+0x1276>
 800b168:	3304      	adds	r3, #4
 800b16a:	8814      	ldrh	r4, [r2, #0]
 800b16c:	930e      	str	r3, [sp, #56]	; 0x38
 800b16e:	2500      	movs	r5, #0
 800b170:	f7ff ba9d 	b.w	800a6ae <_vfprintf_r+0x67e>
 800b174:	9a07      	ldr	r2, [sp, #28]
 800b176:	f7ff b917 	b.w	800a3a8 <_vfprintf_r+0x378>
 800b17a:	4614      	mov	r4, r2
 800b17c:	3301      	adds	r3, #1
 800b17e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b180:	9324      	str	r3, [sp, #144]	; 0x90
 800b182:	442c      	add	r4, r5
 800b184:	2b07      	cmp	r3, #7
 800b186:	9425      	str	r4, [sp, #148]	; 0x94
 800b188:	e889 0024 	stmia.w	r9, {r2, r5}
 800b18c:	f73f ae5e 	bgt.w	800ae4c <_vfprintf_r+0xe1c>
 800b190:	f109 0908 	add.w	r9, r9, #8
 800b194:	e665      	b.n	800ae62 <_vfprintf_r+0xe32>
 800b196:	2700      	movs	r7, #0
 800b198:	45bb      	cmp	fp, r7
 800b19a:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800b19e:	f6ff ac33 	blt.w	800aa08 <_vfprintf_r+0x9d8>
 800b1a2:	9b07      	ldr	r3, [sp, #28]
 800b1a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b1a8:	9307      	str	r3, [sp, #28]
 800b1aa:	e400      	b.n	800a9ae <_vfprintf_r+0x97e>
 800b1ac:	aa23      	add	r2, sp, #140	; 0x8c
 800b1ae:	9908      	ldr	r1, [sp, #32]
 800b1b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b1b2:	f003 f917 	bl	800e3e4 <__sprint_r>
 800b1b6:	2800      	cmp	r0, #0
 800b1b8:	f47f a869 	bne.w	800a28e <_vfprintf_r+0x25e>
 800b1bc:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800b1be:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b1c2:	e443      	b.n	800aa4c <_vfprintf_r+0xa1c>
 800b1c4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800b1c6:	e418      	b.n	800a9fa <_vfprintf_r+0x9ca>
 800b1c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b1ca:	4ab1      	ldr	r2, [pc, #708]	; (800b490 <_vfprintf_r+0x1460>)
 800b1cc:	f8c9 2000 	str.w	r2, [r9]
 800b1d0:	3301      	adds	r3, #1
 800b1d2:	3401      	adds	r4, #1
 800b1d4:	2201      	movs	r2, #1
 800b1d6:	2b07      	cmp	r3, #7
 800b1d8:	9425      	str	r4, [sp, #148]	; 0x94
 800b1da:	9324      	str	r3, [sp, #144]	; 0x90
 800b1dc:	f8c9 2004 	str.w	r2, [r9, #4]
 800b1e0:	f300 809d 	bgt.w	800b31e <_vfprintf_r+0x12ee>
 800b1e4:	f109 0908 	add.w	r9, r9, #8
 800b1e8:	b92d      	cbnz	r5, 800b1f6 <_vfprintf_r+0x11c6>
 800b1ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b1ec:	b91b      	cbnz	r3, 800b1f6 <_vfprintf_r+0x11c6>
 800b1ee:	9b07      	ldr	r3, [sp, #28]
 800b1f0:	07d9      	lsls	r1, r3, #31
 800b1f2:	f57f a9f6 	bpl.w	800a5e2 <_vfprintf_r+0x5b2>
 800b1f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b1f8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b1fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b1fc:	f8c9 2000 	str.w	r2, [r9]
 800b200:	3301      	adds	r3, #1
 800b202:	440c      	add	r4, r1
 800b204:	2b07      	cmp	r3, #7
 800b206:	9425      	str	r4, [sp, #148]	; 0x94
 800b208:	f8c9 1004 	str.w	r1, [r9, #4]
 800b20c:	9324      	str	r3, [sp, #144]	; 0x90
 800b20e:	f300 81e9 	bgt.w	800b5e4 <_vfprintf_r+0x15b4>
 800b212:	f109 0908 	add.w	r9, r9, #8
 800b216:	426d      	negs	r5, r5
 800b218:	2d00      	cmp	r5, #0
 800b21a:	f340 80be 	ble.w	800b39a <_vfprintf_r+0x136a>
 800b21e:	4a9d      	ldr	r2, [pc, #628]	; (800b494 <_vfprintf_r+0x1464>)
 800b220:	920f      	str	r2, [sp, #60]	; 0x3c
 800b222:	2d10      	cmp	r5, #16
 800b224:	f340 80e6 	ble.w	800b3f4 <_vfprintf_r+0x13c4>
 800b228:	4622      	mov	r2, r4
 800b22a:	2710      	movs	r7, #16
 800b22c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800b230:	9c08      	ldr	r4, [sp, #32]
 800b232:	e005      	b.n	800b240 <_vfprintf_r+0x1210>
 800b234:	f109 0908 	add.w	r9, r9, #8
 800b238:	3d10      	subs	r5, #16
 800b23a:	2d10      	cmp	r5, #16
 800b23c:	f340 80d9 	ble.w	800b3f2 <_vfprintf_r+0x13c2>
 800b240:	3301      	adds	r3, #1
 800b242:	3210      	adds	r2, #16
 800b244:	2b07      	cmp	r3, #7
 800b246:	9225      	str	r2, [sp, #148]	; 0x94
 800b248:	9324      	str	r3, [sp, #144]	; 0x90
 800b24a:	f8c9 a000 	str.w	sl, [r9]
 800b24e:	f8c9 7004 	str.w	r7, [r9, #4]
 800b252:	ddef      	ble.n	800b234 <_vfprintf_r+0x1204>
 800b254:	aa23      	add	r2, sp, #140	; 0x8c
 800b256:	4621      	mov	r1, r4
 800b258:	4658      	mov	r0, fp
 800b25a:	f003 f8c3 	bl	800e3e4 <__sprint_r>
 800b25e:	2800      	cmp	r0, #0
 800b260:	f47f a815 	bne.w	800a28e <_vfprintf_r+0x25e>
 800b264:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800b266:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b268:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b26c:	e7e4      	b.n	800b238 <_vfprintf_r+0x1208>
 800b26e:	f04f 30ff 	mov.w	r0, #4294967295
 800b272:	f7ff b812 	b.w	800a29a <_vfprintf_r+0x26a>
 800b276:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b278:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
 800b27c:	4603      	mov	r3, r0
 800b27e:	f1bb 0f00 	cmp.w	fp, #0
 800b282:	f103 0304 	add.w	r3, r3, #4
 800b286:	8804      	ldrh	r4, [r0, #0]
 800b288:	f04f 0500 	mov.w	r5, #0
 800b28c:	f2c0 81c4 	blt.w	800b618 <_vfprintf_r+0x15e8>
 800b290:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b294:	9107      	str	r1, [sp, #28]
 800b296:	ea54 0105 	orrs.w	r1, r4, r5
 800b29a:	930e      	str	r3, [sp, #56]	; 0x38
 800b29c:	f43f aba2 	beq.w	800a9e4 <_vfprintf_r+0x9b4>
 800b2a0:	4617      	mov	r7, r2
 800b2a2:	f7ff b820 	b.w	800a2e6 <_vfprintf_r+0x2b6>
 800b2a6:	3304      	adds	r3, #4
 800b2a8:	6814      	ldr	r4, [r2, #0]
 800b2aa:	930e      	str	r3, [sp, #56]	; 0x38
 800b2ac:	2500      	movs	r5, #0
 800b2ae:	f7ff b9fe 	b.w	800a6ae <_vfprintf_r+0x67e>
 800b2b2:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b2b4:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	f1bb 0f00 	cmp.w	fp, #0
 800b2be:	f103 0304 	add.w	r3, r3, #4
 800b2c2:	8804      	ldrh	r4, [r0, #0]
 800b2c4:	f04f 0500 	mov.w	r5, #0
 800b2c8:	f2c0 819a 	blt.w	800b600 <_vfprintf_r+0x15d0>
 800b2cc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b2d0:	9107      	str	r1, [sp, #28]
 800b2d2:	ea54 0105 	orrs.w	r1, r4, r5
 800b2d6:	930e      	str	r3, [sp, #56]	; 0x38
 800b2d8:	4617      	mov	r7, r2
 800b2da:	f47f a893 	bne.w	800a404 <_vfprintf_r+0x3d4>
 800b2de:	f7ff ba4d 	b.w	800a77c <_vfprintf_r+0x74c>
 800b2e2:	a821      	add	r0, sp, #132	; 0x84
 800b2e4:	a91e      	add	r1, sp, #120	; 0x78
 800b2e6:	9004      	str	r0, [sp, #16]
 800b2e8:	9103      	str	r1, [sp, #12]
 800b2ea:	a81d      	add	r0, sp, #116	; 0x74
 800b2ec:	2103      	movs	r1, #3
 800b2ee:	9002      	str	r0, [sp, #8]
 800b2f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2f2:	f8cd b004 	str.w	fp, [sp, #4]
 800b2f6:	463b      	mov	r3, r7
 800b2f8:	9100      	str	r1, [sp, #0]
 800b2fa:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b2fc:	f000 fb48 	bl	800b990 <_dtoa_r>
 800b300:	465d      	mov	r5, fp
 800b302:	4606      	mov	r6, r0
 800b304:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b306:	2b46      	cmp	r3, #70	; 0x46
 800b308:	eb06 0405 	add.w	r4, r6, r5
 800b30c:	f47f aed2 	bne.w	800b0b4 <_vfprintf_r+0x1084>
 800b310:	7833      	ldrb	r3, [r6, #0]
 800b312:	2b30      	cmp	r3, #48	; 0x30
 800b314:	f000 819b 	beq.w	800b64e <_vfprintf_r+0x161e>
 800b318:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800b31a:	442c      	add	r4, r5
 800b31c:	e6ca      	b.n	800b0b4 <_vfprintf_r+0x1084>
 800b31e:	aa23      	add	r2, sp, #140	; 0x8c
 800b320:	9908      	ldr	r1, [sp, #32]
 800b322:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b324:	f003 f85e 	bl	800e3e4 <__sprint_r>
 800b328:	2800      	cmp	r0, #0
 800b32a:	f47e afb0 	bne.w	800a28e <_vfprintf_r+0x25e>
 800b32e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800b330:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800b332:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b336:	e757      	b.n	800b1e8 <_vfprintf_r+0x11b8>
 800b338:	f1bb 0f00 	cmp.w	fp, #0
 800b33c:	bf08      	it	eq
 800b33e:	f04f 0b01 	moveq.w	fp, #1
 800b342:	e683      	b.n	800b04c <_vfprintf_r+0x101c>
 800b344:	9b07      	ldr	r3, [sp, #28]
 800b346:	f043 0320 	orr.w	r3, r3, #32
 800b34a:	9307      	str	r3, [sp, #28]
 800b34c:	f108 0801 	add.w	r8, r8, #1
 800b350:	f898 3000 	ldrb.w	r3, [r8]
 800b354:	f7fe bedf 	b.w	800a116 <_vfprintf_r+0xe6>
 800b358:	aa23      	add	r2, sp, #140	; 0x8c
 800b35a:	9908      	ldr	r1, [sp, #32]
 800b35c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b35e:	f003 f841 	bl	800e3e4 <__sprint_r>
 800b362:	2800      	cmp	r0, #0
 800b364:	f47e af93 	bne.w	800a28e <_vfprintf_r+0x25e>
 800b368:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800b36a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b36e:	f7ff bb85 	b.w	800aa7c <_vfprintf_r+0xa4c>
 800b372:	4630      	mov	r0, r6
 800b374:	f7f5 fa04 	bl	8000780 <strlen>
 800b378:	46a3      	mov	fp, r4
 800b37a:	4603      	mov	r3, r0
 800b37c:	900d      	str	r0, [sp, #52]	; 0x34
 800b37e:	f7ff bb05 	b.w	800a98c <_vfprintf_r+0x95c>
 800b382:	aa23      	add	r2, sp, #140	; 0x8c
 800b384:	9908      	ldr	r1, [sp, #32]
 800b386:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b388:	f003 f82c 	bl	800e3e4 <__sprint_r>
 800b38c:	2800      	cmp	r0, #0
 800b38e:	f47e af7e 	bne.w	800a28e <_vfprintf_r+0x25e>
 800b392:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800b394:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b396:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b39a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b39c:	f8c9 6000 	str.w	r6, [r9]
 800b3a0:	3301      	adds	r3, #1
 800b3a2:	440c      	add	r4, r1
 800b3a4:	2b07      	cmp	r3, #7
 800b3a6:	9425      	str	r4, [sp, #148]	; 0x94
 800b3a8:	9324      	str	r3, [sp, #144]	; 0x90
 800b3aa:	f8c9 1004 	str.w	r1, [r9, #4]
 800b3ae:	f77f a916 	ble.w	800a5de <_vfprintf_r+0x5ae>
 800b3b2:	e429      	b.n	800ac08 <_vfprintf_r+0xbd8>
 800b3b4:	272d      	movs	r7, #45	; 0x2d
 800b3b6:	9309      	str	r3, [sp, #36]	; 0x24
 800b3b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b3ba:	9307      	str	r3, [sp, #28]
 800b3bc:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800b3c0:	f04f 0b00 	mov.w	fp, #0
 800b3c4:	f7ff b843 	b.w	800a44e <_vfprintf_r+0x41e>
 800b3c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b3ca:	1cd8      	adds	r0, r3, #3
 800b3cc:	db2b      	blt.n	800b426 <_vfprintf_r+0x13f6>
 800b3ce:	459b      	cmp	fp, r3
 800b3d0:	db29      	blt.n	800b426 <_vfprintf_r+0x13f6>
 800b3d2:	9313      	str	r3, [sp, #76]	; 0x4c
 800b3d4:	e691      	b.n	800b0fa <_vfprintf_r+0x10ca>
 800b3d6:	4623      	mov	r3, r4
 800b3d8:	e67f      	b.n	800b0da <_vfprintf_r+0x10aa>
 800b3da:	aa23      	add	r2, sp, #140	; 0x8c
 800b3dc:	9908      	ldr	r1, [sp, #32]
 800b3de:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b3e0:	f003 f800 	bl	800e3e4 <__sprint_r>
 800b3e4:	2800      	cmp	r0, #0
 800b3e6:	f47e af52 	bne.w	800a28e <_vfprintf_r+0x25e>
 800b3ea:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800b3ec:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b3f0:	e471      	b.n	800acd6 <_vfprintf_r+0xca6>
 800b3f2:	4614      	mov	r4, r2
 800b3f4:	3301      	adds	r3, #1
 800b3f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b3f8:	9324      	str	r3, [sp, #144]	; 0x90
 800b3fa:	442c      	add	r4, r5
 800b3fc:	2b07      	cmp	r3, #7
 800b3fe:	9425      	str	r4, [sp, #148]	; 0x94
 800b400:	e889 0024 	stmia.w	r9, {r2, r5}
 800b404:	dcbd      	bgt.n	800b382 <_vfprintf_r+0x1352>
 800b406:	f109 0908 	add.w	r9, r9, #8
 800b40a:	e7c6      	b.n	800b39a <_vfprintf_r+0x136a>
 800b40c:	aa23      	add	r2, sp, #140	; 0x8c
 800b40e:	9908      	ldr	r1, [sp, #32]
 800b410:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b412:	f002 ffe7 	bl	800e3e4 <__sprint_r>
 800b416:	2800      	cmp	r0, #0
 800b418:	f47e af39 	bne.w	800a28e <_vfprintf_r+0x25e>
 800b41c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b41e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800b420:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b424:	e527      	b.n	800ae76 <_vfprintf_r+0xe46>
 800b426:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b428:	3a02      	subs	r2, #2
 800b42a:	9211      	str	r2, [sp, #68]	; 0x44
 800b42c:	3b01      	subs	r3, #1
 800b42e:	2b00      	cmp	r3, #0
 800b430:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800b434:	931d      	str	r3, [sp, #116]	; 0x74
 800b436:	bfb8      	it	lt
 800b438:	425b      	neglt	r3, r3
 800b43a:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
 800b43e:	bfb4      	ite	lt
 800b440:	222d      	movlt	r2, #45	; 0x2d
 800b442:	222b      	movge	r2, #43	; 0x2b
 800b444:	2b09      	cmp	r3, #9
 800b446:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
 800b44a:	f340 80e7 	ble.w	800b61c <_vfprintf_r+0x15ec>
 800b44e:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
 800b452:	4604      	mov	r4, r0
 800b454:	4a10      	ldr	r2, [pc, #64]	; (800b498 <_vfprintf_r+0x1468>)
 800b456:	fb82 2103 	smull	r2, r1, r2, r3
 800b45a:	17da      	asrs	r2, r3, #31
 800b45c:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 800b460:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800b464:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 800b468:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b46c:	2a09      	cmp	r2, #9
 800b46e:	4613      	mov	r3, r2
 800b470:	f804 1d01 	strb.w	r1, [r4, #-1]!
 800b474:	dcee      	bgt.n	800b454 <_vfprintf_r+0x1424>
 800b476:	4621      	mov	r1, r4
 800b478:	3330      	adds	r3, #48	; 0x30
 800b47a:	b2da      	uxtb	r2, r3
 800b47c:	f801 2d01 	strb.w	r2, [r1, #-1]!
 800b480:	4288      	cmp	r0, r1
 800b482:	f240 813f 	bls.w	800b704 <_vfprintf_r+0x16d4>
 800b486:	f10d 017e 	add.w	r1, sp, #126	; 0x7e
 800b48a:	4623      	mov	r3, r4
 800b48c:	e008      	b.n	800b4a0 <_vfprintf_r+0x1470>
 800b48e:	bf00      	nop
 800b490:	0800ee78 	.word	0x0800ee78
 800b494:	0800ee8c 	.word	0x0800ee8c
 800b498:	66666667 	.word	0x66666667
 800b49c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4a0:	f801 2b01 	strb.w	r2, [r1], #1
 800b4a4:	4298      	cmp	r0, r3
 800b4a6:	d1f9      	bne.n	800b49c <_vfprintf_r+0x146c>
 800b4a8:	1c43      	adds	r3, r0, #1
 800b4aa:	1b1b      	subs	r3, r3, r4
 800b4ac:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
 800b4b0:	4413      	add	r3, r2
 800b4b2:	aa1f      	add	r2, sp, #124	; 0x7c
 800b4b4:	1a9b      	subs	r3, r3, r2
 800b4b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b4b8:	9319      	str	r3, [sp, #100]	; 0x64
 800b4ba:	2a01      	cmp	r2, #1
 800b4bc:	4413      	add	r3, r2
 800b4be:	930d      	str	r3, [sp, #52]	; 0x34
 800b4c0:	f340 80db 	ble.w	800b67a <_vfprintf_r+0x164a>
 800b4c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4c6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b4c8:	4413      	add	r3, r2
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	930d      	str	r3, [sp, #52]	; 0x34
 800b4ce:	9213      	str	r2, [sp, #76]	; 0x4c
 800b4d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b4d4:	e61f      	b.n	800b116 <_vfprintf_r+0x10e6>
 800b4d6:	aa23      	add	r2, sp, #140	; 0x8c
 800b4d8:	9908      	ldr	r1, [sp, #32]
 800b4da:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b4dc:	f002 ff82 	bl	800e3e4 <__sprint_r>
 800b4e0:	2800      	cmp	r0, #0
 800b4e2:	f47e aed4 	bne.w	800a28e <_vfprintf_r+0x25e>
 800b4e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b4e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b4ea:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800b4ec:	1ad3      	subs	r3, r2, r3
 800b4ee:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b4f2:	e4d8      	b.n	800aea6 <_vfprintf_r+0xe76>
 800b4f4:	2d06      	cmp	r5, #6
 800b4f6:	462b      	mov	r3, r5
 800b4f8:	bf28      	it	cs
 800b4fa:	2306      	movcs	r3, #6
 800b4fc:	930d      	str	r3, [sp, #52]	; 0x34
 800b4fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b502:	46b3      	mov	fp, r6
 800b504:	970e      	str	r7, [sp, #56]	; 0x38
 800b506:	9613      	str	r6, [sp, #76]	; 0x4c
 800b508:	4637      	mov	r7, r6
 800b50a:	9309      	str	r3, [sp, #36]	; 0x24
 800b50c:	4e85      	ldr	r6, [pc, #532]	; (800b724 <_vfprintf_r+0x16f4>)
 800b50e:	f7fe bf9d 	b.w	800a44c <_vfprintf_r+0x41c>
 800b512:	a821      	add	r0, sp, #132	; 0x84
 800b514:	a91e      	add	r1, sp, #120	; 0x78
 800b516:	9004      	str	r0, [sp, #16]
 800b518:	9103      	str	r1, [sp, #12]
 800b51a:	a81d      	add	r0, sp, #116	; 0x74
 800b51c:	2103      	movs	r1, #3
 800b51e:	9002      	str	r0, [sp, #8]
 800b520:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b522:	f8cd b004 	str.w	fp, [sp, #4]
 800b526:	463b      	mov	r3, r7
 800b528:	9100      	str	r1, [sp, #0]
 800b52a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b52c:	f000 fa30 	bl	800b990 <_dtoa_r>
 800b530:	465d      	mov	r5, fp
 800b532:	4606      	mov	r6, r0
 800b534:	eb00 040b 	add.w	r4, r0, fp
 800b538:	e6ea      	b.n	800b310 <_vfprintf_r+0x12e0>
 800b53a:	9307      	str	r3, [sp, #28]
 800b53c:	f7ff b8d5 	b.w	800a6ea <_vfprintf_r+0x6ba>
 800b540:	f04f 0b06 	mov.w	fp, #6
 800b544:	e582      	b.n	800b04c <_vfprintf_r+0x101c>
 800b546:	272d      	movs	r7, #45	; 0x2d
 800b548:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800b54c:	f7ff b9b7 	b.w	800a8be <_vfprintf_r+0x88e>
 800b550:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b552:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b554:	4413      	add	r3, r2
 800b556:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b558:	930d      	str	r3, [sp, #52]	; 0x34
 800b55a:	2a00      	cmp	r2, #0
 800b55c:	f340 8085 	ble.w	800b66a <_vfprintf_r+0x163a>
 800b560:	2267      	movs	r2, #103	; 0x67
 800b562:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b566:	9211      	str	r2, [sp, #68]	; 0x44
 800b568:	e5d5      	b.n	800b116 <_vfprintf_r+0x10e6>
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	f340 808f 	ble.w	800b68e <_vfprintf_r+0x165e>
 800b570:	f1bb 0f00 	cmp.w	fp, #0
 800b574:	d15c      	bne.n	800b630 <_vfprintf_r+0x1600>
 800b576:	9a07      	ldr	r2, [sp, #28]
 800b578:	07d1      	lsls	r1, r2, #31
 800b57a:	d459      	bmi.n	800b630 <_vfprintf_r+0x1600>
 800b57c:	461a      	mov	r2, r3
 800b57e:	920d      	str	r2, [sp, #52]	; 0x34
 800b580:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b584:	e5c7      	b.n	800b116 <_vfprintf_r+0x10e6>
 800b586:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 800b58a:	970e      	str	r7, [sp, #56]	; 0x38
 800b58c:	9309      	str	r3, [sp, #36]	; 0x24
 800b58e:	950d      	str	r5, [sp, #52]	; 0x34
 800b590:	4683      	mov	fp, r0
 800b592:	9013      	str	r0, [sp, #76]	; 0x4c
 800b594:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800b598:	f7fe bf58 	b.w	800a44c <_vfprintf_r+0x41c>
 800b59c:	9b07      	ldr	r3, [sp, #28]
 800b59e:	07db      	lsls	r3, r3, #31
 800b5a0:	465f      	mov	r7, fp
 800b5a2:	d505      	bpl.n	800b5b0 <_vfprintf_r+0x1580>
 800b5a4:	ae40      	add	r6, sp, #256	; 0x100
 800b5a6:	2330      	movs	r3, #48	; 0x30
 800b5a8:	f806 3d41 	strb.w	r3, [r6, #-65]!
 800b5ac:	f7fe bf44 	b.w	800a438 <_vfprintf_r+0x408>
 800b5b0:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 800b5b4:	ae30      	add	r6, sp, #192	; 0xc0
 800b5b6:	f7fe bf42 	b.w	800a43e <_vfprintf_r+0x40e>
 800b5ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b5bc:	2b47      	cmp	r3, #71	; 0x47
 800b5be:	f47f ad78 	bne.w	800b0b2 <_vfprintf_r+0x1082>
 800b5c2:	9b07      	ldr	r3, [sp, #28]
 800b5c4:	07dc      	lsls	r4, r3, #31
 800b5c6:	f53f ae9d 	bmi.w	800b304 <_vfprintf_r+0x12d4>
 800b5ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b5cc:	1b9b      	subs	r3, r3, r6
 800b5ce:	9312      	str	r3, [sp, #72]	; 0x48
 800b5d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5d2:	2b47      	cmp	r3, #71	; 0x47
 800b5d4:	f43f aef8 	beq.w	800b3c8 <_vfprintf_r+0x1398>
 800b5d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b5da:	e727      	b.n	800b42c <_vfprintf_r+0x13fc>
 800b5dc:	46a0      	mov	r8, r4
 800b5de:	2500      	movs	r5, #0
 800b5e0:	f7fe bd9b 	b.w	800a11a <_vfprintf_r+0xea>
 800b5e4:	aa23      	add	r2, sp, #140	; 0x8c
 800b5e6:	9908      	ldr	r1, [sp, #32]
 800b5e8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b5ea:	f002 fefb 	bl	800e3e4 <__sprint_r>
 800b5ee:	2800      	cmp	r0, #0
 800b5f0:	f47e ae4d 	bne.w	800a28e <_vfprintf_r+0x25e>
 800b5f4:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800b5f6:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800b5f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b5fa:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b5fe:	e60a      	b.n	800b216 <_vfprintf_r+0x11e6>
 800b600:	930e      	str	r3, [sp, #56]	; 0x38
 800b602:	4617      	mov	r7, r2
 800b604:	e40d      	b.n	800ae22 <_vfprintf_r+0xdf2>
 800b606:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b608:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b60a:	4413      	add	r3, r2
 800b60c:	2267      	movs	r2, #103	; 0x67
 800b60e:	930d      	str	r3, [sp, #52]	; 0x34
 800b610:	9211      	str	r2, [sp, #68]	; 0x44
 800b612:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b616:	e57e      	b.n	800b116 <_vfprintf_r+0x10e6>
 800b618:	930e      	str	r3, [sp, #56]	; 0x38
 800b61a:	e599      	b.n	800b150 <_vfprintf_r+0x1120>
 800b61c:	3330      	adds	r3, #48	; 0x30
 800b61e:	2230      	movs	r2, #48	; 0x30
 800b620:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 800b624:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
 800b628:	ab20      	add	r3, sp, #128	; 0x80
 800b62a:	e742      	b.n	800b4b2 <_vfprintf_r+0x1482>
 800b62c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b62e:	e554      	b.n	800b0da <_vfprintf_r+0x10aa>
 800b630:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b632:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b634:	189d      	adds	r5, r3, r2
 800b636:	eb05 030b 	add.w	r3, r5, fp
 800b63a:	930d      	str	r3, [sp, #52]	; 0x34
 800b63c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b640:	e569      	b.n	800b116 <_vfprintf_r+0x10e6>
 800b642:	4e39      	ldr	r6, [pc, #228]	; (800b728 <_vfprintf_r+0x16f8>)
 800b644:	4b39      	ldr	r3, [pc, #228]	; (800b72c <_vfprintf_r+0x16fc>)
 800b646:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800b64a:	f7ff b93a 	b.w	800a8c2 <_vfprintf_r+0x892>
 800b64e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b650:	4639      	mov	r1, r7
 800b652:	2200      	movs	r2, #0
 800b654:	2300      	movs	r3, #0
 800b656:	f7f5 fd73 	bl	8001140 <__aeabi_dcmpeq>
 800b65a:	2800      	cmp	r0, #0
 800b65c:	f47f ae5c 	bne.w	800b318 <_vfprintf_r+0x12e8>
 800b660:	f1c5 0501 	rsb	r5, r5, #1
 800b664:	951d      	str	r5, [sp, #116]	; 0x74
 800b666:	442c      	add	r4, r5
 800b668:	e524      	b.n	800b0b4 <_vfprintf_r+0x1084>
 800b66a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b66c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b66e:	f1c3 0301 	rsb	r3, r3, #1
 800b672:	441a      	add	r2, r3
 800b674:	4613      	mov	r3, r2
 800b676:	920d      	str	r2, [sp, #52]	; 0x34
 800b678:	e772      	b.n	800b560 <_vfprintf_r+0x1530>
 800b67a:	9b07      	ldr	r3, [sp, #28]
 800b67c:	f013 0301 	ands.w	r3, r3, #1
 800b680:	f47f af20 	bne.w	800b4c4 <_vfprintf_r+0x1494>
 800b684:	9313      	str	r3, [sp, #76]	; 0x4c
 800b686:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b688:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b68c:	e543      	b.n	800b116 <_vfprintf_r+0x10e6>
 800b68e:	f1bb 0f00 	cmp.w	fp, #0
 800b692:	d102      	bne.n	800b69a <_vfprintf_r+0x166a>
 800b694:	9b07      	ldr	r3, [sp, #28]
 800b696:	07da      	lsls	r2, r3, #31
 800b698:	d507      	bpl.n	800b6aa <_vfprintf_r+0x167a>
 800b69a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b69c:	1c5d      	adds	r5, r3, #1
 800b69e:	eb05 030b 	add.w	r3, r5, fp
 800b6a2:	930d      	str	r3, [sp, #52]	; 0x34
 800b6a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b6a8:	e535      	b.n	800b116 <_vfprintf_r+0x10e6>
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	930d      	str	r3, [sp, #52]	; 0x34
 800b6ae:	e532      	b.n	800b116 <_vfprintf_r+0x10e6>
 800b6b0:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b6b2:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b6b6:	6805      	ldr	r5, [r0, #0]
 800b6b8:	3004      	adds	r0, #4
 800b6ba:	2d00      	cmp	r5, #0
 800b6bc:	900e      	str	r0, [sp, #56]	; 0x38
 800b6be:	46a0      	mov	r8, r4
 800b6c0:	f6be ad29 	bge.w	800a116 <_vfprintf_r+0xe6>
 800b6c4:	f04f 35ff 	mov.w	r5, #4294967295
 800b6c8:	f7fe bd25 	b.w	800a116 <_vfprintf_r+0xe6>
 800b6cc:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800b6d0:	f7ff b878 	b.w	800a7c4 <_vfprintf_r+0x794>
 800b6d4:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800b6d8:	f7ff b82f 	b.w	800a73a <_vfprintf_r+0x70a>
 800b6dc:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800b6e0:	f7fe bfd7 	b.w	800a692 <_vfprintf_r+0x662>
 800b6e4:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800b6e8:	f7fe be6d 	b.w	800a3c6 <_vfprintf_r+0x396>
 800b6ec:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800b6f0:	f7ff b967 	b.w	800a9c2 <_vfprintf_r+0x992>
 800b6f4:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800b6f8:	f7fe bddb 	b.w	800a2b2 <_vfprintf_r+0x282>
 800b6fc:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800b700:	f7fe be38 	b.w	800a374 <_vfprintf_r+0x344>
 800b704:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
 800b708:	e6d3      	b.n	800b4b2 <_vfprintf_r+0x1482>
 800b70a:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800b70e:	f7ff b88b 	b.w	800a828 <_vfprintf_r+0x7f8>
 800b712:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800b716:	f7ff b8a4 	b.w	800a862 <_vfprintf_r+0x832>
 800b71a:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800b71e:	f7ff b8f4 	b.w	800a90a <_vfprintf_r+0x8da>
 800b722:	bf00      	nop
 800b724:	0800ee70 	.word	0x0800ee70
 800b728:	0800ee44 	.word	0x0800ee44
 800b72c:	0800ee40 	.word	0x0800ee40

0800b730 <__sbprintf>:
 800b730:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b732:	460c      	mov	r4, r1
 800b734:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 800b738:	8989      	ldrh	r1, [r1, #12]
 800b73a:	6e66      	ldr	r6, [r4, #100]	; 0x64
 800b73c:	89e5      	ldrh	r5, [r4, #14]
 800b73e:	9619      	str	r6, [sp, #100]	; 0x64
 800b740:	f021 0102 	bic.w	r1, r1, #2
 800b744:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b746:	f8ad 500e 	strh.w	r5, [sp, #14]
 800b74a:	2500      	movs	r5, #0
 800b74c:	69e7      	ldr	r7, [r4, #28]
 800b74e:	f8ad 100c 	strh.w	r1, [sp, #12]
 800b752:	9609      	str	r6, [sp, #36]	; 0x24
 800b754:	9506      	str	r5, [sp, #24]
 800b756:	ae1a      	add	r6, sp, #104	; 0x68
 800b758:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800b75c:	4669      	mov	r1, sp
 800b75e:	9600      	str	r6, [sp, #0]
 800b760:	9604      	str	r6, [sp, #16]
 800b762:	9502      	str	r5, [sp, #8]
 800b764:	9505      	str	r5, [sp, #20]
 800b766:	9707      	str	r7, [sp, #28]
 800b768:	4606      	mov	r6, r0
 800b76a:	f7fe fc61 	bl	800a030 <_vfprintf_r>
 800b76e:	1e05      	subs	r5, r0, #0
 800b770:	db07      	blt.n	800b782 <__sbprintf+0x52>
 800b772:	4630      	mov	r0, r6
 800b774:	4669      	mov	r1, sp
 800b776:	f001 f8db 	bl	800c930 <_fflush_r>
 800b77a:	2800      	cmp	r0, #0
 800b77c:	bf18      	it	ne
 800b77e:	f04f 35ff 	movne.w	r5, #4294967295
 800b782:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800b786:	065b      	lsls	r3, r3, #25
 800b788:	d503      	bpl.n	800b792 <__sbprintf+0x62>
 800b78a:	89a3      	ldrh	r3, [r4, #12]
 800b78c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b790:	81a3      	strh	r3, [r4, #12]
 800b792:	4628      	mov	r0, r5
 800b794:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 800b798:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b79a:	bf00      	nop

0800b79c <__swsetup_r>:
 800b79c:	b538      	push	{r3, r4, r5, lr}
 800b79e:	4b30      	ldr	r3, [pc, #192]	; (800b860 <__swsetup_r+0xc4>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	4605      	mov	r5, r0
 800b7a4:	460c      	mov	r4, r1
 800b7a6:	b113      	cbz	r3, 800b7ae <__swsetup_r+0x12>
 800b7a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7aa:	2a00      	cmp	r2, #0
 800b7ac:	d038      	beq.n	800b820 <__swsetup_r+0x84>
 800b7ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b7b2:	b293      	uxth	r3, r2
 800b7b4:	0718      	lsls	r0, r3, #28
 800b7b6:	d50c      	bpl.n	800b7d2 <__swsetup_r+0x36>
 800b7b8:	6920      	ldr	r0, [r4, #16]
 800b7ba:	b1a8      	cbz	r0, 800b7e8 <__swsetup_r+0x4c>
 800b7bc:	f013 0201 	ands.w	r2, r3, #1
 800b7c0:	d01e      	beq.n	800b800 <__swsetup_r+0x64>
 800b7c2:	6963      	ldr	r3, [r4, #20]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	425b      	negs	r3, r3
 800b7c8:	61a3      	str	r3, [r4, #24]
 800b7ca:	60a2      	str	r2, [r4, #8]
 800b7cc:	b1f0      	cbz	r0, 800b80c <__swsetup_r+0x70>
 800b7ce:	2000      	movs	r0, #0
 800b7d0:	bd38      	pop	{r3, r4, r5, pc}
 800b7d2:	06d9      	lsls	r1, r3, #27
 800b7d4:	d53c      	bpl.n	800b850 <__swsetup_r+0xb4>
 800b7d6:	0758      	lsls	r0, r3, #29
 800b7d8:	d426      	bmi.n	800b828 <__swsetup_r+0x8c>
 800b7da:	6920      	ldr	r0, [r4, #16]
 800b7dc:	f042 0308 	orr.w	r3, r2, #8
 800b7e0:	81a3      	strh	r3, [r4, #12]
 800b7e2:	b29b      	uxth	r3, r3
 800b7e4:	2800      	cmp	r0, #0
 800b7e6:	d1e9      	bne.n	800b7bc <__swsetup_r+0x20>
 800b7e8:	f403 7220 	and.w	r2, r3, #640	; 0x280
 800b7ec:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800b7f0:	d0e4      	beq.n	800b7bc <__swsetup_r+0x20>
 800b7f2:	4628      	mov	r0, r5
 800b7f4:	4621      	mov	r1, r4
 800b7f6:	f001 fc6b 	bl	800d0d0 <__smakebuf_r>
 800b7fa:	89a3      	ldrh	r3, [r4, #12]
 800b7fc:	6920      	ldr	r0, [r4, #16]
 800b7fe:	e7dd      	b.n	800b7bc <__swsetup_r+0x20>
 800b800:	0799      	lsls	r1, r3, #30
 800b802:	bf58      	it	pl
 800b804:	6962      	ldrpl	r2, [r4, #20]
 800b806:	60a2      	str	r2, [r4, #8]
 800b808:	2800      	cmp	r0, #0
 800b80a:	d1e0      	bne.n	800b7ce <__swsetup_r+0x32>
 800b80c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b810:	061a      	lsls	r2, r3, #24
 800b812:	d5dd      	bpl.n	800b7d0 <__swsetup_r+0x34>
 800b814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b818:	81a3      	strh	r3, [r4, #12]
 800b81a:	f04f 30ff 	mov.w	r0, #4294967295
 800b81e:	bd38      	pop	{r3, r4, r5, pc}
 800b820:	4618      	mov	r0, r3
 800b822:	f001 f919 	bl	800ca58 <__sinit>
 800b826:	e7c2      	b.n	800b7ae <__swsetup_r+0x12>
 800b828:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b82a:	b151      	cbz	r1, 800b842 <__swsetup_r+0xa6>
 800b82c:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800b830:	4299      	cmp	r1, r3
 800b832:	d004      	beq.n	800b83e <__swsetup_r+0xa2>
 800b834:	4628      	mov	r0, r5
 800b836:	f001 f967 	bl	800cb08 <_free_r>
 800b83a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b83e:	2300      	movs	r3, #0
 800b840:	6323      	str	r3, [r4, #48]	; 0x30
 800b842:	2300      	movs	r3, #0
 800b844:	6920      	ldr	r0, [r4, #16]
 800b846:	6063      	str	r3, [r4, #4]
 800b848:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 800b84c:	6020      	str	r0, [r4, #0]
 800b84e:	e7c5      	b.n	800b7dc <__swsetup_r+0x40>
 800b850:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b854:	2309      	movs	r3, #9
 800b856:	602b      	str	r3, [r5, #0]
 800b858:	f04f 30ff 	mov.w	r0, #4294967295
 800b85c:	81a2      	strh	r2, [r4, #12]
 800b85e:	bd38      	pop	{r3, r4, r5, pc}
 800b860:	20000460 	.word	0x20000460

0800b864 <quorem>:
 800b864:	6902      	ldr	r2, [r0, #16]
 800b866:	690b      	ldr	r3, [r1, #16]
 800b868:	4293      	cmp	r3, r2
 800b86a:	f300 808d 	bgt.w	800b988 <quorem+0x124>
 800b86e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b872:	f103 38ff 	add.w	r8, r3, #4294967295
 800b876:	f101 0714 	add.w	r7, r1, #20
 800b87a:	f100 0b14 	add.w	fp, r0, #20
 800b87e:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 800b882:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 800b886:	ea4f 0488 	mov.w	r4, r8, lsl #2
 800b88a:	b083      	sub	sp, #12
 800b88c:	3201      	adds	r2, #1
 800b88e:	fbb3 f9f2 	udiv	r9, r3, r2
 800b892:	eb0b 0304 	add.w	r3, fp, r4
 800b896:	9400      	str	r4, [sp, #0]
 800b898:	eb07 0a04 	add.w	sl, r7, r4
 800b89c:	9301      	str	r3, [sp, #4]
 800b89e:	f1b9 0f00 	cmp.w	r9, #0
 800b8a2:	d039      	beq.n	800b918 <quorem+0xb4>
 800b8a4:	2500      	movs	r5, #0
 800b8a6:	46bc      	mov	ip, r7
 800b8a8:	46de      	mov	lr, fp
 800b8aa:	462b      	mov	r3, r5
 800b8ac:	f85c 6b04 	ldr.w	r6, [ip], #4
 800b8b0:	f8de 2000 	ldr.w	r2, [lr]
 800b8b4:	b2b4      	uxth	r4, r6
 800b8b6:	fb09 5504 	mla	r5, r9, r4, r5
 800b8ba:	0c36      	lsrs	r6, r6, #16
 800b8bc:	0c2c      	lsrs	r4, r5, #16
 800b8be:	fb09 4406 	mla	r4, r9, r6, r4
 800b8c2:	b2ad      	uxth	r5, r5
 800b8c4:	1b5b      	subs	r3, r3, r5
 800b8c6:	b2a6      	uxth	r6, r4
 800b8c8:	fa13 f382 	uxtah	r3, r3, r2
 800b8cc:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
 800b8d0:	eb06 4623 	add.w	r6, r6, r3, asr #16
 800b8d4:	b29b      	uxth	r3, r3
 800b8d6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800b8da:	45e2      	cmp	sl, ip
 800b8dc:	f84e 3b04 	str.w	r3, [lr], #4
 800b8e0:	ea4f 4514 	mov.w	r5, r4, lsr #16
 800b8e4:	ea4f 4326 	mov.w	r3, r6, asr #16
 800b8e8:	d2e0      	bcs.n	800b8ac <quorem+0x48>
 800b8ea:	9b00      	ldr	r3, [sp, #0]
 800b8ec:	f85b 3003 	ldr.w	r3, [fp, r3]
 800b8f0:	b993      	cbnz	r3, 800b918 <quorem+0xb4>
 800b8f2:	9c01      	ldr	r4, [sp, #4]
 800b8f4:	1f23      	subs	r3, r4, #4
 800b8f6:	459b      	cmp	fp, r3
 800b8f8:	d20c      	bcs.n	800b914 <quorem+0xb0>
 800b8fa:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800b8fe:	b94b      	cbnz	r3, 800b914 <quorem+0xb0>
 800b900:	f1a4 0308 	sub.w	r3, r4, #8
 800b904:	e002      	b.n	800b90c <quorem+0xa8>
 800b906:	681a      	ldr	r2, [r3, #0]
 800b908:	3b04      	subs	r3, #4
 800b90a:	b91a      	cbnz	r2, 800b914 <quorem+0xb0>
 800b90c:	459b      	cmp	fp, r3
 800b90e:	f108 38ff 	add.w	r8, r8, #4294967295
 800b912:	d3f8      	bcc.n	800b906 <quorem+0xa2>
 800b914:	f8c0 8010 	str.w	r8, [r0, #16]
 800b918:	4604      	mov	r4, r0
 800b91a:	f002 f95b 	bl	800dbd4 <__mcmp>
 800b91e:	2800      	cmp	r0, #0
 800b920:	db2e      	blt.n	800b980 <quorem+0x11c>
 800b922:	f109 0901 	add.w	r9, r9, #1
 800b926:	465d      	mov	r5, fp
 800b928:	2300      	movs	r3, #0
 800b92a:	f857 1b04 	ldr.w	r1, [r7], #4
 800b92e:	6828      	ldr	r0, [r5, #0]
 800b930:	b28a      	uxth	r2, r1
 800b932:	1a9a      	subs	r2, r3, r2
 800b934:	0c09      	lsrs	r1, r1, #16
 800b936:	fa12 f280 	uxtah	r2, r2, r0
 800b93a:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 800b93e:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800b942:	b291      	uxth	r1, r2
 800b944:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800b948:	45ba      	cmp	sl, r7
 800b94a:	f845 1b04 	str.w	r1, [r5], #4
 800b94e:	ea4f 4323 	mov.w	r3, r3, asr #16
 800b952:	d2ea      	bcs.n	800b92a <quorem+0xc6>
 800b954:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 800b958:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 800b95c:	b982      	cbnz	r2, 800b980 <quorem+0x11c>
 800b95e:	1f1a      	subs	r2, r3, #4
 800b960:	4593      	cmp	fp, r2
 800b962:	d20b      	bcs.n	800b97c <quorem+0x118>
 800b964:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800b968:	b942      	cbnz	r2, 800b97c <quorem+0x118>
 800b96a:	3b08      	subs	r3, #8
 800b96c:	e002      	b.n	800b974 <quorem+0x110>
 800b96e:	681a      	ldr	r2, [r3, #0]
 800b970:	3b04      	subs	r3, #4
 800b972:	b91a      	cbnz	r2, 800b97c <quorem+0x118>
 800b974:	459b      	cmp	fp, r3
 800b976:	f108 38ff 	add.w	r8, r8, #4294967295
 800b97a:	d3f8      	bcc.n	800b96e <quorem+0x10a>
 800b97c:	f8c4 8010 	str.w	r8, [r4, #16]
 800b980:	4648      	mov	r0, r9
 800b982:	b003      	add	sp, #12
 800b984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b988:	2000      	movs	r0, #0
 800b98a:	4770      	bx	lr
 800b98c:	0000      	movs	r0, r0
	...

0800b990 <_dtoa_r>:
 800b990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b994:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800b996:	b097      	sub	sp, #92	; 0x5c
 800b998:	4681      	mov	r9, r0
 800b99a:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800b99c:	4692      	mov	sl, r2
 800b99e:	469b      	mov	fp, r3
 800b9a0:	b149      	cbz	r1, 800b9b6 <_dtoa_r+0x26>
 800b9a2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b9a4:	604a      	str	r2, [r1, #4]
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	4093      	lsls	r3, r2
 800b9aa:	608b      	str	r3, [r1, #8]
 800b9ac:	f001 ff30 	bl	800d810 <_Bfree>
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 800b9b6:	f1bb 0f00 	cmp.w	fp, #0
 800b9ba:	46d8      	mov	r8, fp
 800b9bc:	db33      	blt.n	800ba26 <_dtoa_r+0x96>
 800b9be:	2300      	movs	r3, #0
 800b9c0:	6023      	str	r3, [r4, #0]
 800b9c2:	4ba5      	ldr	r3, [pc, #660]	; (800bc58 <_dtoa_r+0x2c8>)
 800b9c4:	461a      	mov	r2, r3
 800b9c6:	ea08 0303 	and.w	r3, r8, r3
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d014      	beq.n	800b9f8 <_dtoa_r+0x68>
 800b9ce:	4650      	mov	r0, sl
 800b9d0:	4659      	mov	r1, fp
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	f7f5 fbb3 	bl	8001140 <__aeabi_dcmpeq>
 800b9da:	4605      	mov	r5, r0
 800b9dc:	b348      	cbz	r0, 800ba32 <_dtoa_r+0xa2>
 800b9de:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b9e0:	2301      	movs	r3, #1
 800b9e2:	6013      	str	r3, [r2, #0]
 800b9e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	f000 80c5 	beq.w	800bb76 <_dtoa_r+0x1e6>
 800b9ec:	489b      	ldr	r0, [pc, #620]	; (800bc5c <_dtoa_r+0x2cc>)
 800b9ee:	6018      	str	r0, [r3, #0]
 800b9f0:	3801      	subs	r0, #1
 800b9f2:	b017      	add	sp, #92	; 0x5c
 800b9f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9f8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b9fa:	f242 730f 	movw	r3, #9999	; 0x270f
 800b9fe:	6013      	str	r3, [r2, #0]
 800ba00:	f1ba 0f00 	cmp.w	sl, #0
 800ba04:	f000 80a2 	beq.w	800bb4c <_dtoa_r+0x1bc>
 800ba08:	4895      	ldr	r0, [pc, #596]	; (800bc60 <_dtoa_r+0x2d0>)
 800ba0a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d0f0      	beq.n	800b9f2 <_dtoa_r+0x62>
 800ba10:	78c3      	ldrb	r3, [r0, #3]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	f000 80b1 	beq.w	800bb7a <_dtoa_r+0x1ea>
 800ba18:	f100 0308 	add.w	r3, r0, #8
 800ba1c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ba1e:	6013      	str	r3, [r2, #0]
 800ba20:	b017      	add	sp, #92	; 0x5c
 800ba22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba26:	2301      	movs	r3, #1
 800ba28:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
 800ba2c:	6023      	str	r3, [r4, #0]
 800ba2e:	46c3      	mov	fp, r8
 800ba30:	e7c7      	b.n	800b9c2 <_dtoa_r+0x32>
 800ba32:	aa14      	add	r2, sp, #80	; 0x50
 800ba34:	ab15      	add	r3, sp, #84	; 0x54
 800ba36:	9201      	str	r2, [sp, #4]
 800ba38:	9300      	str	r3, [sp, #0]
 800ba3a:	4652      	mov	r2, sl
 800ba3c:	465b      	mov	r3, fp
 800ba3e:	4648      	mov	r0, r9
 800ba40:	f002 f972 	bl	800dd28 <__d2b>
 800ba44:	ea5f 5418 	movs.w	r4, r8, lsr #20
 800ba48:	9008      	str	r0, [sp, #32]
 800ba4a:	f040 8088 	bne.w	800bb5e <_dtoa_r+0x1ce>
 800ba4e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800ba50:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800ba52:	442c      	add	r4, r5
 800ba54:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800ba58:	2b20      	cmp	r3, #32
 800ba5a:	f340 8291 	ble.w	800bf80 <_dtoa_r+0x5f0>
 800ba5e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800ba62:	f204 4012 	addw	r0, r4, #1042	; 0x412
 800ba66:	fa08 f803 	lsl.w	r8, r8, r3
 800ba6a:	fa2a f000 	lsr.w	r0, sl, r0
 800ba6e:	ea40 0008 	orr.w	r0, r0, r8
 800ba72:	f7f5 f887 	bl	8000b84 <__aeabi_ui2d>
 800ba76:	2301      	movs	r3, #1
 800ba78:	3c01      	subs	r4, #1
 800ba7a:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800ba7e:	9310      	str	r3, [sp, #64]	; 0x40
 800ba80:	2200      	movs	r2, #0
 800ba82:	4b78      	ldr	r3, [pc, #480]	; (800bc64 <_dtoa_r+0x2d4>)
 800ba84:	f7f4 ff40 	bl	8000908 <__aeabi_dsub>
 800ba88:	a36d      	add	r3, pc, #436	; (adr r3, 800bc40 <_dtoa_r+0x2b0>)
 800ba8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba8e:	f7f5 f8ef 	bl	8000c70 <__aeabi_dmul>
 800ba92:	a36d      	add	r3, pc, #436	; (adr r3, 800bc48 <_dtoa_r+0x2b8>)
 800ba94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba98:	f7f4 ff38 	bl	800090c <__adddf3>
 800ba9c:	4606      	mov	r6, r0
 800ba9e:	4620      	mov	r0, r4
 800baa0:	460f      	mov	r7, r1
 800baa2:	f7f5 f87f 	bl	8000ba4 <__aeabi_i2d>
 800baa6:	a36a      	add	r3, pc, #424	; (adr r3, 800bc50 <_dtoa_r+0x2c0>)
 800baa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baac:	f7f5 f8e0 	bl	8000c70 <__aeabi_dmul>
 800bab0:	4602      	mov	r2, r0
 800bab2:	460b      	mov	r3, r1
 800bab4:	4630      	mov	r0, r6
 800bab6:	4639      	mov	r1, r7
 800bab8:	f7f4 ff28 	bl	800090c <__adddf3>
 800babc:	4606      	mov	r6, r0
 800babe:	460f      	mov	r7, r1
 800bac0:	f7f5 fb86 	bl	80011d0 <__aeabi_d2iz>
 800bac4:	2200      	movs	r2, #0
 800bac6:	9004      	str	r0, [sp, #16]
 800bac8:	2300      	movs	r3, #0
 800baca:	4630      	mov	r0, r6
 800bacc:	4639      	mov	r1, r7
 800bace:	f7f5 fb41 	bl	8001154 <__aeabi_dcmplt>
 800bad2:	2800      	cmp	r0, #0
 800bad4:	f040 8230 	bne.w	800bf38 <_dtoa_r+0x5a8>
 800bad8:	9e04      	ldr	r6, [sp, #16]
 800bada:	2e16      	cmp	r6, #22
 800badc:	f200 8229 	bhi.w	800bf32 <_dtoa_r+0x5a2>
 800bae0:	4b61      	ldr	r3, [pc, #388]	; (800bc68 <_dtoa_r+0x2d8>)
 800bae2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bae6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800baea:	4652      	mov	r2, sl
 800baec:	465b      	mov	r3, fp
 800baee:	f7f5 fb4f 	bl	8001190 <__aeabi_dcmpgt>
 800baf2:	2800      	cmp	r0, #0
 800baf4:	f000 8249 	beq.w	800bf8a <_dtoa_r+0x5fa>
 800baf8:	1e73      	subs	r3, r6, #1
 800bafa:	9304      	str	r3, [sp, #16]
 800bafc:	2300      	movs	r3, #0
 800bafe:	930c      	str	r3, [sp, #48]	; 0x30
 800bb00:	1b2c      	subs	r4, r5, r4
 800bb02:	1e63      	subs	r3, r4, #1
 800bb04:	9302      	str	r3, [sp, #8]
 800bb06:	f100 8232 	bmi.w	800bf6e <_dtoa_r+0x5de>
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	9305      	str	r3, [sp, #20]
 800bb0e:	9b04      	ldr	r3, [sp, #16]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	f2c0 8223 	blt.w	800bf5c <_dtoa_r+0x5cc>
 800bb16:	9a02      	ldr	r2, [sp, #8]
 800bb18:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb1a:	4611      	mov	r1, r2
 800bb1c:	4419      	add	r1, r3
 800bb1e:	2300      	movs	r3, #0
 800bb20:	9102      	str	r1, [sp, #8]
 800bb22:	930a      	str	r3, [sp, #40]	; 0x28
 800bb24:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800bb26:	2b09      	cmp	r3, #9
 800bb28:	d829      	bhi.n	800bb7e <_dtoa_r+0x1ee>
 800bb2a:	2b05      	cmp	r3, #5
 800bb2c:	f340 8658 	ble.w	800c7e0 <_dtoa_r+0xe50>
 800bb30:	3b04      	subs	r3, #4
 800bb32:	9320      	str	r3, [sp, #128]	; 0x80
 800bb34:	2500      	movs	r5, #0
 800bb36:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800bb38:	3b02      	subs	r3, #2
 800bb3a:	2b03      	cmp	r3, #3
 800bb3c:	f200 8635 	bhi.w	800c7aa <_dtoa_r+0xe1a>
 800bb40:	e8df f013 	tbh	[pc, r3, lsl #1]
 800bb44:	0228032c 	.word	0x0228032c
 800bb48:	04590337 	.word	0x04590337
 800bb4c:	4b44      	ldr	r3, [pc, #272]	; (800bc60 <_dtoa_r+0x2d0>)
 800bb4e:	4a47      	ldr	r2, [pc, #284]	; (800bc6c <_dtoa_r+0x2dc>)
 800bb50:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800bb54:	2800      	cmp	r0, #0
 800bb56:	bf14      	ite	ne
 800bb58:	4618      	movne	r0, r3
 800bb5a:	4610      	moveq	r0, r2
 800bb5c:	e755      	b.n	800ba0a <_dtoa_r+0x7a>
 800bb5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bb62:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800bb66:	9510      	str	r5, [sp, #64]	; 0x40
 800bb68:	4650      	mov	r0, sl
 800bb6a:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800bb6e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800bb72:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800bb74:	e784      	b.n	800ba80 <_dtoa_r+0xf0>
 800bb76:	483e      	ldr	r0, [pc, #248]	; (800bc70 <_dtoa_r+0x2e0>)
 800bb78:	e73b      	b.n	800b9f2 <_dtoa_r+0x62>
 800bb7a:	1cc3      	adds	r3, r0, #3
 800bb7c:	e74e      	b.n	800ba1c <_dtoa_r+0x8c>
 800bb7e:	2100      	movs	r1, #0
 800bb80:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800bb84:	4648      	mov	r0, r9
 800bb86:	9120      	str	r1, [sp, #128]	; 0x80
 800bb88:	f001 fe1c 	bl	800d7c4 <_Balloc>
 800bb8c:	f04f 33ff 	mov.w	r3, #4294967295
 800bb90:	9306      	str	r3, [sp, #24]
 800bb92:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bb94:	930d      	str	r3, [sp, #52]	; 0x34
 800bb96:	2301      	movs	r3, #1
 800bb98:	9007      	str	r0, [sp, #28]
 800bb9a:	9221      	str	r2, [sp, #132]	; 0x84
 800bb9c:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800bba0:	9309      	str	r3, [sp, #36]	; 0x24
 800bba2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	f2c0 80d1 	blt.w	800bd4c <_dtoa_r+0x3bc>
 800bbaa:	9a04      	ldr	r2, [sp, #16]
 800bbac:	2a0e      	cmp	r2, #14
 800bbae:	f300 80cd 	bgt.w	800bd4c <_dtoa_r+0x3bc>
 800bbb2:	4b2d      	ldr	r3, [pc, #180]	; (800bc68 <_dtoa_r+0x2d8>)
 800bbb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bbb8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bbbc:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bbc0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	f2c0 8300 	blt.w	800c1c8 <_dtoa_r+0x838>
 800bbc8:	4656      	mov	r6, sl
 800bbca:	465f      	mov	r7, fp
 800bbcc:	4650      	mov	r0, sl
 800bbce:	4659      	mov	r1, fp
 800bbd0:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 800bbd4:	4652      	mov	r2, sl
 800bbd6:	465b      	mov	r3, fp
 800bbd8:	f7f5 f974 	bl	8000ec4 <__aeabi_ddiv>
 800bbdc:	f7f5 faf8 	bl	80011d0 <__aeabi_d2iz>
 800bbe0:	4604      	mov	r4, r0
 800bbe2:	f7f4 ffdf 	bl	8000ba4 <__aeabi_i2d>
 800bbe6:	4652      	mov	r2, sl
 800bbe8:	465b      	mov	r3, fp
 800bbea:	f7f5 f841 	bl	8000c70 <__aeabi_dmul>
 800bbee:	460b      	mov	r3, r1
 800bbf0:	4602      	mov	r2, r0
 800bbf2:	4639      	mov	r1, r7
 800bbf4:	4630      	mov	r0, r6
 800bbf6:	f7f4 fe87 	bl	8000908 <__aeabi_dsub>
 800bbfa:	9d07      	ldr	r5, [sp, #28]
 800bbfc:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800bc00:	702b      	strb	r3, [r5, #0]
 800bc02:	9b06      	ldr	r3, [sp, #24]
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	4606      	mov	r6, r0
 800bc08:	460f      	mov	r7, r1
 800bc0a:	f105 0501 	add.w	r5, r5, #1
 800bc0e:	d062      	beq.n	800bcd6 <_dtoa_r+0x346>
 800bc10:	2200      	movs	r2, #0
 800bc12:	4b18      	ldr	r3, [pc, #96]	; (800bc74 <_dtoa_r+0x2e4>)
 800bc14:	f7f5 f82c 	bl	8000c70 <__aeabi_dmul>
 800bc18:	2200      	movs	r2, #0
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	4606      	mov	r6, r0
 800bc1e:	460f      	mov	r7, r1
 800bc20:	f7f5 fa8e 	bl	8001140 <__aeabi_dcmpeq>
 800bc24:	2800      	cmp	r0, #0
 800bc26:	d17e      	bne.n	800bd26 <_dtoa_r+0x396>
 800bc28:	f8cd 9014 	str.w	r9, [sp, #20]
 800bc2c:	f8dd a018 	ldr.w	sl, [sp, #24]
 800bc30:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800bc34:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bc38:	e029      	b.n	800bc8e <_dtoa_r+0x2fe>
 800bc3a:	bf00      	nop
 800bc3c:	f3af 8000 	nop.w
 800bc40:	636f4361 	.word	0x636f4361
 800bc44:	3fd287a7 	.word	0x3fd287a7
 800bc48:	8b60c8b3 	.word	0x8b60c8b3
 800bc4c:	3fc68a28 	.word	0x3fc68a28
 800bc50:	509f79fb 	.word	0x509f79fb
 800bc54:	3fd34413 	.word	0x3fd34413
 800bc58:	7ff00000 	.word	0x7ff00000
 800bc5c:	0800ee79 	.word	0x0800ee79
 800bc60:	0800eeb8 	.word	0x0800eeb8
 800bc64:	3ff80000 	.word	0x3ff80000
 800bc68:	0800eed0 	.word	0x0800eed0
 800bc6c:	0800eeac 	.word	0x0800eeac
 800bc70:	0800ee78 	.word	0x0800ee78
 800bc74:	40240000 	.word	0x40240000
 800bc78:	f7f4 fffa 	bl	8000c70 <__aeabi_dmul>
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	2300      	movs	r3, #0
 800bc80:	4606      	mov	r6, r0
 800bc82:	460f      	mov	r7, r1
 800bc84:	f7f5 fa5c 	bl	8001140 <__aeabi_dcmpeq>
 800bc88:	2800      	cmp	r0, #0
 800bc8a:	f040 83b7 	bne.w	800c3fc <_dtoa_r+0xa6c>
 800bc8e:	4642      	mov	r2, r8
 800bc90:	464b      	mov	r3, r9
 800bc92:	4630      	mov	r0, r6
 800bc94:	4639      	mov	r1, r7
 800bc96:	f7f5 f915 	bl	8000ec4 <__aeabi_ddiv>
 800bc9a:	f7f5 fa99 	bl	80011d0 <__aeabi_d2iz>
 800bc9e:	4604      	mov	r4, r0
 800bca0:	f7f4 ff80 	bl	8000ba4 <__aeabi_i2d>
 800bca4:	4642      	mov	r2, r8
 800bca6:	464b      	mov	r3, r9
 800bca8:	f7f4 ffe2 	bl	8000c70 <__aeabi_dmul>
 800bcac:	4602      	mov	r2, r0
 800bcae:	460b      	mov	r3, r1
 800bcb0:	4630      	mov	r0, r6
 800bcb2:	4639      	mov	r1, r7
 800bcb4:	f7f4 fe28 	bl	8000908 <__aeabi_dsub>
 800bcb8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800bcbc:	f805 eb01 	strb.w	lr, [r5], #1
 800bcc0:	ebcb 0e05 	rsb	lr, fp, r5
 800bcc4:	45d6      	cmp	lr, sl
 800bcc6:	4606      	mov	r6, r0
 800bcc8:	460f      	mov	r7, r1
 800bcca:	f04f 0200 	mov.w	r2, #0
 800bcce:	4bb0      	ldr	r3, [pc, #704]	; (800bf90 <_dtoa_r+0x600>)
 800bcd0:	d1d2      	bne.n	800bc78 <_dtoa_r+0x2e8>
 800bcd2:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800bcd6:	4632      	mov	r2, r6
 800bcd8:	463b      	mov	r3, r7
 800bcda:	4630      	mov	r0, r6
 800bcdc:	4639      	mov	r1, r7
 800bcde:	f7f4 fe15 	bl	800090c <__adddf3>
 800bce2:	4606      	mov	r6, r0
 800bce4:	460f      	mov	r7, r1
 800bce6:	4602      	mov	r2, r0
 800bce8:	460b      	mov	r3, r1
 800bcea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcee:	f7f5 fa31 	bl	8001154 <__aeabi_dcmplt>
 800bcf2:	b940      	cbnz	r0, 800bd06 <_dtoa_r+0x376>
 800bcf4:	4632      	mov	r2, r6
 800bcf6:	463b      	mov	r3, r7
 800bcf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcfc:	f7f5 fa20 	bl	8001140 <__aeabi_dcmpeq>
 800bd00:	b188      	cbz	r0, 800bd26 <_dtoa_r+0x396>
 800bd02:	07e3      	lsls	r3, r4, #31
 800bd04:	d50f      	bpl.n	800bd26 <_dtoa_r+0x396>
 800bd06:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 800bd0a:	9a07      	ldr	r2, [sp, #28]
 800bd0c:	1e6b      	subs	r3, r5, #1
 800bd0e:	e004      	b.n	800bd1a <_dtoa_r+0x38a>
 800bd10:	429a      	cmp	r2, r3
 800bd12:	f000 842c 	beq.w	800c56e <_dtoa_r+0xbde>
 800bd16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd1a:	2c39      	cmp	r4, #57	; 0x39
 800bd1c:	f103 0501 	add.w	r5, r3, #1
 800bd20:	d0f6      	beq.n	800bd10 <_dtoa_r+0x380>
 800bd22:	3401      	adds	r4, #1
 800bd24:	701c      	strb	r4, [r3, #0]
 800bd26:	9908      	ldr	r1, [sp, #32]
 800bd28:	4648      	mov	r0, r9
 800bd2a:	f001 fd71 	bl	800d810 <_Bfree>
 800bd2e:	2200      	movs	r2, #0
 800bd30:	9b04      	ldr	r3, [sp, #16]
 800bd32:	702a      	strb	r2, [r5, #0]
 800bd34:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800bd36:	3301      	adds	r3, #1
 800bd38:	6013      	str	r3, [r2, #0]
 800bd3a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	f000 83a7 	beq.w	800c490 <_dtoa_r+0xb00>
 800bd42:	9807      	ldr	r0, [sp, #28]
 800bd44:	601d      	str	r5, [r3, #0]
 800bd46:	b017      	add	sp, #92	; 0x5c
 800bd48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd4e:	2a00      	cmp	r2, #0
 800bd50:	f000 8112 	beq.w	800bf78 <_dtoa_r+0x5e8>
 800bd54:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bd56:	2a01      	cmp	r2, #1
 800bd58:	f340 8258 	ble.w	800c20c <_dtoa_r+0x87c>
 800bd5c:	9b06      	ldr	r3, [sp, #24]
 800bd5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd60:	1e5f      	subs	r7, r3, #1
 800bd62:	42ba      	cmp	r2, r7
 800bd64:	f2c0 8397 	blt.w	800c496 <_dtoa_r+0xb06>
 800bd68:	1bd7      	subs	r7, r2, r7
 800bd6a:	9b06      	ldr	r3, [sp, #24]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	f2c0 848a 	blt.w	800c686 <_dtoa_r+0xcf6>
 800bd72:	9d05      	ldr	r5, [sp, #20]
 800bd74:	9b06      	ldr	r3, [sp, #24]
 800bd76:	9a05      	ldr	r2, [sp, #20]
 800bd78:	441a      	add	r2, r3
 800bd7a:	9205      	str	r2, [sp, #20]
 800bd7c:	9a02      	ldr	r2, [sp, #8]
 800bd7e:	2101      	movs	r1, #1
 800bd80:	441a      	add	r2, r3
 800bd82:	4648      	mov	r0, r9
 800bd84:	9202      	str	r2, [sp, #8]
 800bd86:	f001 fddb 	bl	800d940 <__i2b>
 800bd8a:	4606      	mov	r6, r0
 800bd8c:	b165      	cbz	r5, 800bda8 <_dtoa_r+0x418>
 800bd8e:	9902      	ldr	r1, [sp, #8]
 800bd90:	2900      	cmp	r1, #0
 800bd92:	460b      	mov	r3, r1
 800bd94:	dd08      	ble.n	800bda8 <_dtoa_r+0x418>
 800bd96:	42a9      	cmp	r1, r5
 800bd98:	9a05      	ldr	r2, [sp, #20]
 800bd9a:	bfa8      	it	ge
 800bd9c:	462b      	movge	r3, r5
 800bd9e:	1ad2      	subs	r2, r2, r3
 800bda0:	1aed      	subs	r5, r5, r3
 800bda2:	1acb      	subs	r3, r1, r3
 800bda4:	9205      	str	r2, [sp, #20]
 800bda6:	9302      	str	r3, [sp, #8]
 800bda8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	f340 82fc 	ble.w	800c3a8 <_dtoa_r+0xa18>
 800bdb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bdb2:	2a00      	cmp	r2, #0
 800bdb4:	f000 8201 	beq.w	800c1ba <_dtoa_r+0x82a>
 800bdb8:	2f00      	cmp	r7, #0
 800bdba:	f000 81fe 	beq.w	800c1ba <_dtoa_r+0x82a>
 800bdbe:	4631      	mov	r1, r6
 800bdc0:	463a      	mov	r2, r7
 800bdc2:	4648      	mov	r0, r9
 800bdc4:	f001 fe5e 	bl	800da84 <__pow5mult>
 800bdc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bdcc:	4601      	mov	r1, r0
 800bdce:	4642      	mov	r2, r8
 800bdd0:	4606      	mov	r6, r0
 800bdd2:	4648      	mov	r0, r9
 800bdd4:	f001 fdbe 	bl	800d954 <__multiply>
 800bdd8:	4641      	mov	r1, r8
 800bdda:	4604      	mov	r4, r0
 800bddc:	4648      	mov	r0, r9
 800bdde:	f001 fd17 	bl	800d810 <_Bfree>
 800bde2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bde4:	1bdb      	subs	r3, r3, r7
 800bde6:	930a      	str	r3, [sp, #40]	; 0x28
 800bde8:	f040 81e6 	bne.w	800c1b8 <_dtoa_r+0x828>
 800bdec:	2101      	movs	r1, #1
 800bdee:	4648      	mov	r0, r9
 800bdf0:	f001 fda6 	bl	800d940 <__i2b>
 800bdf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bdf6:	4680      	mov	r8, r0
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	f000 8219 	beq.w	800c230 <_dtoa_r+0x8a0>
 800bdfe:	4601      	mov	r1, r0
 800be00:	461a      	mov	r2, r3
 800be02:	4648      	mov	r0, r9
 800be04:	f001 fe3e 	bl	800da84 <__pow5mult>
 800be08:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800be0a:	2b01      	cmp	r3, #1
 800be0c:	4680      	mov	r8, r0
 800be0e:	f340 82f8 	ble.w	800c402 <_dtoa_r+0xa72>
 800be12:	2700      	movs	r7, #0
 800be14:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800be18:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800be1c:	6918      	ldr	r0, [r3, #16]
 800be1e:	f001 fd41 	bl	800d8a4 <__hi0bits>
 800be22:	f1c0 0020 	rsb	r0, r0, #32
 800be26:	9a02      	ldr	r2, [sp, #8]
 800be28:	4410      	add	r0, r2
 800be2a:	f010 001f 	ands.w	r0, r0, #31
 800be2e:	f000 81f6 	beq.w	800c21e <_dtoa_r+0x88e>
 800be32:	f1c0 0320 	rsb	r3, r0, #32
 800be36:	2b04      	cmp	r3, #4
 800be38:	f340 84ca 	ble.w	800c7d0 <_dtoa_r+0xe40>
 800be3c:	9b05      	ldr	r3, [sp, #20]
 800be3e:	f1c0 001c 	rsb	r0, r0, #28
 800be42:	4403      	add	r3, r0
 800be44:	9305      	str	r3, [sp, #20]
 800be46:	4613      	mov	r3, r2
 800be48:	4403      	add	r3, r0
 800be4a:	4405      	add	r5, r0
 800be4c:	9302      	str	r3, [sp, #8]
 800be4e:	9b05      	ldr	r3, [sp, #20]
 800be50:	2b00      	cmp	r3, #0
 800be52:	dd05      	ble.n	800be60 <_dtoa_r+0x4d0>
 800be54:	4621      	mov	r1, r4
 800be56:	461a      	mov	r2, r3
 800be58:	4648      	mov	r0, r9
 800be5a:	f001 fe63 	bl	800db24 <__lshift>
 800be5e:	4604      	mov	r4, r0
 800be60:	9b02      	ldr	r3, [sp, #8]
 800be62:	2b00      	cmp	r3, #0
 800be64:	dd05      	ble.n	800be72 <_dtoa_r+0x4e2>
 800be66:	4641      	mov	r1, r8
 800be68:	461a      	mov	r2, r3
 800be6a:	4648      	mov	r0, r9
 800be6c:	f001 fe5a 	bl	800db24 <__lshift>
 800be70:	4680      	mov	r8, r0
 800be72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be74:	2b00      	cmp	r3, #0
 800be76:	f040 827c 	bne.w	800c372 <_dtoa_r+0x9e2>
 800be7a:	9b06      	ldr	r3, [sp, #24]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	f340 8295 	ble.w	800c3ac <_dtoa_r+0xa1c>
 800be82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be84:	2b00      	cmp	r3, #0
 800be86:	f040 81f5 	bne.w	800c274 <_dtoa_r+0x8e4>
 800be8a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800be8e:	9f06      	ldr	r7, [sp, #24]
 800be90:	465d      	mov	r5, fp
 800be92:	e002      	b.n	800be9a <_dtoa_r+0x50a>
 800be94:	f001 fcc6 	bl	800d824 <__multadd>
 800be98:	4604      	mov	r4, r0
 800be9a:	4641      	mov	r1, r8
 800be9c:	4620      	mov	r0, r4
 800be9e:	f7ff fce1 	bl	800b864 <quorem>
 800bea2:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bea6:	f805 ab01 	strb.w	sl, [r5], #1
 800beaa:	ebcb 0305 	rsb	r3, fp, r5
 800beae:	42bb      	cmp	r3, r7
 800beb0:	f04f 020a 	mov.w	r2, #10
 800beb4:	f04f 0300 	mov.w	r3, #0
 800beb8:	4621      	mov	r1, r4
 800beba:	4648      	mov	r0, r9
 800bebc:	dbea      	blt.n	800be94 <_dtoa_r+0x504>
 800bebe:	9b07      	ldr	r3, [sp, #28]
 800bec0:	9a06      	ldr	r2, [sp, #24]
 800bec2:	2a01      	cmp	r2, #1
 800bec4:	bfac      	ite	ge
 800bec6:	189b      	addge	r3, r3, r2
 800bec8:	3301      	addlt	r3, #1
 800beca:	461d      	mov	r5, r3
 800becc:	f04f 0b00 	mov.w	fp, #0
 800bed0:	4621      	mov	r1, r4
 800bed2:	2201      	movs	r2, #1
 800bed4:	4648      	mov	r0, r9
 800bed6:	f001 fe25 	bl	800db24 <__lshift>
 800beda:	4641      	mov	r1, r8
 800bedc:	9008      	str	r0, [sp, #32]
 800bede:	f001 fe79 	bl	800dbd4 <__mcmp>
 800bee2:	2800      	cmp	r0, #0
 800bee4:	f340 830d 	ble.w	800c502 <_dtoa_r+0xb72>
 800bee8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800beec:	9907      	ldr	r1, [sp, #28]
 800beee:	1e6b      	subs	r3, r5, #1
 800bef0:	e004      	b.n	800befc <_dtoa_r+0x56c>
 800bef2:	428b      	cmp	r3, r1
 800bef4:	f000 8278 	beq.w	800c3e8 <_dtoa_r+0xa58>
 800bef8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800befc:	2a39      	cmp	r2, #57	; 0x39
 800befe:	f103 0501 	add.w	r5, r3, #1
 800bf02:	d0f6      	beq.n	800bef2 <_dtoa_r+0x562>
 800bf04:	3201      	adds	r2, #1
 800bf06:	701a      	strb	r2, [r3, #0]
 800bf08:	4641      	mov	r1, r8
 800bf0a:	4648      	mov	r0, r9
 800bf0c:	f001 fc80 	bl	800d810 <_Bfree>
 800bf10:	2e00      	cmp	r6, #0
 800bf12:	f43f af08 	beq.w	800bd26 <_dtoa_r+0x396>
 800bf16:	f1bb 0f00 	cmp.w	fp, #0
 800bf1a:	d005      	beq.n	800bf28 <_dtoa_r+0x598>
 800bf1c:	45b3      	cmp	fp, r6
 800bf1e:	d003      	beq.n	800bf28 <_dtoa_r+0x598>
 800bf20:	4659      	mov	r1, fp
 800bf22:	4648      	mov	r0, r9
 800bf24:	f001 fc74 	bl	800d810 <_Bfree>
 800bf28:	4631      	mov	r1, r6
 800bf2a:	4648      	mov	r0, r9
 800bf2c:	f001 fc70 	bl	800d810 <_Bfree>
 800bf30:	e6f9      	b.n	800bd26 <_dtoa_r+0x396>
 800bf32:	2301      	movs	r3, #1
 800bf34:	930c      	str	r3, [sp, #48]	; 0x30
 800bf36:	e5e3      	b.n	800bb00 <_dtoa_r+0x170>
 800bf38:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800bf3c:	4640      	mov	r0, r8
 800bf3e:	f7f4 fe31 	bl	8000ba4 <__aeabi_i2d>
 800bf42:	4602      	mov	r2, r0
 800bf44:	460b      	mov	r3, r1
 800bf46:	4630      	mov	r0, r6
 800bf48:	4639      	mov	r1, r7
 800bf4a:	f7f5 f8f9 	bl	8001140 <__aeabi_dcmpeq>
 800bf4e:	2800      	cmp	r0, #0
 800bf50:	f47f adc2 	bne.w	800bad8 <_dtoa_r+0x148>
 800bf54:	f108 33ff 	add.w	r3, r8, #4294967295
 800bf58:	9304      	str	r3, [sp, #16]
 800bf5a:	e5bd      	b.n	800bad8 <_dtoa_r+0x148>
 800bf5c:	9a05      	ldr	r2, [sp, #20]
 800bf5e:	9b04      	ldr	r3, [sp, #16]
 800bf60:	1ad2      	subs	r2, r2, r3
 800bf62:	425b      	negs	r3, r3
 800bf64:	930a      	str	r3, [sp, #40]	; 0x28
 800bf66:	2300      	movs	r3, #0
 800bf68:	9205      	str	r2, [sp, #20]
 800bf6a:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf6c:	e5da      	b.n	800bb24 <_dtoa_r+0x194>
 800bf6e:	425b      	negs	r3, r3
 800bf70:	9305      	str	r3, [sp, #20]
 800bf72:	2300      	movs	r3, #0
 800bf74:	9302      	str	r3, [sp, #8]
 800bf76:	e5ca      	b.n	800bb0e <_dtoa_r+0x17e>
 800bf78:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800bf7a:	9d05      	ldr	r5, [sp, #20]
 800bf7c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800bf7e:	e705      	b.n	800bd8c <_dtoa_r+0x3fc>
 800bf80:	f1c3 0820 	rsb	r8, r3, #32
 800bf84:	fa0a f008 	lsl.w	r0, sl, r8
 800bf88:	e573      	b.n	800ba72 <_dtoa_r+0xe2>
 800bf8a:	900c      	str	r0, [sp, #48]	; 0x30
 800bf8c:	e5b8      	b.n	800bb00 <_dtoa_r+0x170>
 800bf8e:	bf00      	nop
 800bf90:	40240000 	.word	0x40240000
 800bf94:	2300      	movs	r3, #0
 800bf96:	9309      	str	r3, [sp, #36]	; 0x24
 800bf98:	9b04      	ldr	r3, [sp, #16]
 800bf9a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bf9c:	4413      	add	r3, r2
 800bf9e:	930d      	str	r3, [sp, #52]	; 0x34
 800bfa0:	3301      	adds	r3, #1
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	9306      	str	r3, [sp, #24]
 800bfa6:	f340 8283 	ble.w	800c4b0 <_dtoa_r+0xb20>
 800bfaa:	9c06      	ldr	r4, [sp, #24]
 800bfac:	4626      	mov	r6, r4
 800bfae:	2100      	movs	r1, #0
 800bfb0:	2e17      	cmp	r6, #23
 800bfb2:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800bfb6:	d90b      	bls.n	800bfd0 <_dtoa_r+0x640>
 800bfb8:	2201      	movs	r2, #1
 800bfba:	2304      	movs	r3, #4
 800bfbc:	005b      	lsls	r3, r3, #1
 800bfbe:	f103 0014 	add.w	r0, r3, #20
 800bfc2:	42b0      	cmp	r0, r6
 800bfc4:	4611      	mov	r1, r2
 800bfc6:	f102 0201 	add.w	r2, r2, #1
 800bfca:	d9f7      	bls.n	800bfbc <_dtoa_r+0x62c>
 800bfcc:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800bfd0:	4648      	mov	r0, r9
 800bfd2:	f001 fbf7 	bl	800d7c4 <_Balloc>
 800bfd6:	2c0e      	cmp	r4, #14
 800bfd8:	9007      	str	r0, [sp, #28]
 800bfda:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800bfde:	f63f ade0 	bhi.w	800bba2 <_dtoa_r+0x212>
 800bfe2:	2d00      	cmp	r5, #0
 800bfe4:	f43f addd 	beq.w	800bba2 <_dtoa_r+0x212>
 800bfe8:	9904      	ldr	r1, [sp, #16]
 800bfea:	4657      	mov	r7, sl
 800bfec:	46d8      	mov	r8, fp
 800bfee:	2900      	cmp	r1, #0
 800bff0:	e9cd 780e 	strd	r7, r8, [sp, #56]	; 0x38
 800bff4:	f340 8292 	ble.w	800c51c <_dtoa_r+0xb8c>
 800bff8:	4b91      	ldr	r3, [pc, #580]	; (800c240 <_dtoa_r+0x8b0>)
 800bffa:	f001 020f 	and.w	r2, r1, #15
 800bffe:	110e      	asrs	r6, r1, #4
 800c000:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c004:	06f0      	lsls	r0, r6, #27
 800c006:	e9d3 4500 	ldrd	r4, r5, [r3]
 800c00a:	f140 824c 	bpl.w	800c4a6 <_dtoa_r+0xb16>
 800c00e:	4b8d      	ldr	r3, [pc, #564]	; (800c244 <_dtoa_r+0x8b4>)
 800c010:	4650      	mov	r0, sl
 800c012:	4659      	mov	r1, fp
 800c014:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c018:	f7f4 ff54 	bl	8000ec4 <__aeabi_ddiv>
 800c01c:	f006 060f 	and.w	r6, r6, #15
 800c020:	4682      	mov	sl, r0
 800c022:	468b      	mov	fp, r1
 800c024:	f04f 0803 	mov.w	r8, #3
 800c028:	b186      	cbz	r6, 800c04c <_dtoa_r+0x6bc>
 800c02a:	4f86      	ldr	r7, [pc, #536]	; (800c244 <_dtoa_r+0x8b4>)
 800c02c:	07f1      	lsls	r1, r6, #31
 800c02e:	d509      	bpl.n	800c044 <_dtoa_r+0x6b4>
 800c030:	4620      	mov	r0, r4
 800c032:	4629      	mov	r1, r5
 800c034:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c038:	f7f4 fe1a 	bl	8000c70 <__aeabi_dmul>
 800c03c:	f108 0801 	add.w	r8, r8, #1
 800c040:	4604      	mov	r4, r0
 800c042:	460d      	mov	r5, r1
 800c044:	1076      	asrs	r6, r6, #1
 800c046:	f107 0708 	add.w	r7, r7, #8
 800c04a:	d1ef      	bne.n	800c02c <_dtoa_r+0x69c>
 800c04c:	4622      	mov	r2, r4
 800c04e:	462b      	mov	r3, r5
 800c050:	4650      	mov	r0, sl
 800c052:	4659      	mov	r1, fp
 800c054:	f7f4 ff36 	bl	8000ec4 <__aeabi_ddiv>
 800c058:	4606      	mov	r6, r0
 800c05a:	460f      	mov	r7, r1
 800c05c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c05e:	b143      	cbz	r3, 800c072 <_dtoa_r+0x6e2>
 800c060:	2200      	movs	r2, #0
 800c062:	4b79      	ldr	r3, [pc, #484]	; (800c248 <_dtoa_r+0x8b8>)
 800c064:	4630      	mov	r0, r6
 800c066:	4639      	mov	r1, r7
 800c068:	f7f5 f874 	bl	8001154 <__aeabi_dcmplt>
 800c06c:	2800      	cmp	r0, #0
 800c06e:	f040 8320 	bne.w	800c6b2 <_dtoa_r+0xd22>
 800c072:	4640      	mov	r0, r8
 800c074:	f7f4 fd96 	bl	8000ba4 <__aeabi_i2d>
 800c078:	4632      	mov	r2, r6
 800c07a:	463b      	mov	r3, r7
 800c07c:	f7f4 fdf8 	bl	8000c70 <__aeabi_dmul>
 800c080:	4b72      	ldr	r3, [pc, #456]	; (800c24c <_dtoa_r+0x8bc>)
 800c082:	2200      	movs	r2, #0
 800c084:	f7f4 fc42 	bl	800090c <__adddf3>
 800c088:	9b06      	ldr	r3, [sp, #24]
 800c08a:	4604      	mov	r4, r0
 800c08c:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800c090:	2b00      	cmp	r3, #0
 800c092:	f000 81df 	beq.w	800c454 <_dtoa_r+0xac4>
 800c096:	9b04      	ldr	r3, [sp, #16]
 800c098:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800c09c:	9311      	str	r3, [sp, #68]	; 0x44
 800c09e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	f000 8297 	beq.w	800c5d4 <_dtoa_r+0xc44>
 800c0a6:	4b66      	ldr	r3, [pc, #408]	; (800c240 <_dtoa_r+0x8b0>)
 800c0a8:	4969      	ldr	r1, [pc, #420]	; (800c250 <_dtoa_r+0x8c0>)
 800c0aa:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c0ae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c0b2:	2000      	movs	r0, #0
 800c0b4:	f7f4 ff06 	bl	8000ec4 <__aeabi_ddiv>
 800c0b8:	4622      	mov	r2, r4
 800c0ba:	462b      	mov	r3, r5
 800c0bc:	f7f4 fc24 	bl	8000908 <__aeabi_dsub>
 800c0c0:	4682      	mov	sl, r0
 800c0c2:	468b      	mov	fp, r1
 800c0c4:	4630      	mov	r0, r6
 800c0c6:	4639      	mov	r1, r7
 800c0c8:	f7f5 f882 	bl	80011d0 <__aeabi_d2iz>
 800c0cc:	4604      	mov	r4, r0
 800c0ce:	f7f4 fd69 	bl	8000ba4 <__aeabi_i2d>
 800c0d2:	4602      	mov	r2, r0
 800c0d4:	460b      	mov	r3, r1
 800c0d6:	4630      	mov	r0, r6
 800c0d8:	4639      	mov	r1, r7
 800c0da:	f7f4 fc15 	bl	8000908 <__aeabi_dsub>
 800c0de:	3430      	adds	r4, #48	; 0x30
 800c0e0:	9d07      	ldr	r5, [sp, #28]
 800c0e2:	b2e4      	uxtb	r4, r4
 800c0e4:	4606      	mov	r6, r0
 800c0e6:	460f      	mov	r7, r1
 800c0e8:	702c      	strb	r4, [r5, #0]
 800c0ea:	4602      	mov	r2, r0
 800c0ec:	460b      	mov	r3, r1
 800c0ee:	4650      	mov	r0, sl
 800c0f0:	4659      	mov	r1, fp
 800c0f2:	3501      	adds	r5, #1
 800c0f4:	f7f5 f84c 	bl	8001190 <__aeabi_dcmpgt>
 800c0f8:	2800      	cmp	r0, #0
 800c0fa:	d14c      	bne.n	800c196 <_dtoa_r+0x806>
 800c0fc:	4632      	mov	r2, r6
 800c0fe:	463b      	mov	r3, r7
 800c100:	2000      	movs	r0, #0
 800c102:	4951      	ldr	r1, [pc, #324]	; (800c248 <_dtoa_r+0x8b8>)
 800c104:	f7f4 fc00 	bl	8000908 <__aeabi_dsub>
 800c108:	4602      	mov	r2, r0
 800c10a:	460b      	mov	r3, r1
 800c10c:	4650      	mov	r0, sl
 800c10e:	4659      	mov	r1, fp
 800c110:	f7f5 f83e 	bl	8001190 <__aeabi_dcmpgt>
 800c114:	2800      	cmp	r0, #0
 800c116:	f040 830d 	bne.w	800c734 <_dtoa_r+0xda4>
 800c11a:	f1b8 0f01 	cmp.w	r8, #1
 800c11e:	f340 81b3 	ble.w	800c488 <_dtoa_r+0xaf8>
 800c122:	9b07      	ldr	r3, [sp, #28]
 800c124:	4498      	add	r8, r3
 800c126:	e00d      	b.n	800c144 <_dtoa_r+0x7b4>
 800c128:	2000      	movs	r0, #0
 800c12a:	4947      	ldr	r1, [pc, #284]	; (800c248 <_dtoa_r+0x8b8>)
 800c12c:	f7f4 fbec 	bl	8000908 <__aeabi_dsub>
 800c130:	4652      	mov	r2, sl
 800c132:	465b      	mov	r3, fp
 800c134:	f7f5 f80e 	bl	8001154 <__aeabi_dcmplt>
 800c138:	2800      	cmp	r0, #0
 800c13a:	f040 82fb 	bne.w	800c734 <_dtoa_r+0xda4>
 800c13e:	4545      	cmp	r5, r8
 800c140:	f000 81a2 	beq.w	800c488 <_dtoa_r+0xaf8>
 800c144:	4650      	mov	r0, sl
 800c146:	4659      	mov	r1, fp
 800c148:	2200      	movs	r2, #0
 800c14a:	4b42      	ldr	r3, [pc, #264]	; (800c254 <_dtoa_r+0x8c4>)
 800c14c:	f7f4 fd90 	bl	8000c70 <__aeabi_dmul>
 800c150:	2200      	movs	r2, #0
 800c152:	4b40      	ldr	r3, [pc, #256]	; (800c254 <_dtoa_r+0x8c4>)
 800c154:	4682      	mov	sl, r0
 800c156:	468b      	mov	fp, r1
 800c158:	4630      	mov	r0, r6
 800c15a:	4639      	mov	r1, r7
 800c15c:	f7f4 fd88 	bl	8000c70 <__aeabi_dmul>
 800c160:	460f      	mov	r7, r1
 800c162:	4606      	mov	r6, r0
 800c164:	f7f5 f834 	bl	80011d0 <__aeabi_d2iz>
 800c168:	4604      	mov	r4, r0
 800c16a:	f7f4 fd1b 	bl	8000ba4 <__aeabi_i2d>
 800c16e:	4602      	mov	r2, r0
 800c170:	460b      	mov	r3, r1
 800c172:	4630      	mov	r0, r6
 800c174:	4639      	mov	r1, r7
 800c176:	f7f4 fbc7 	bl	8000908 <__aeabi_dsub>
 800c17a:	3430      	adds	r4, #48	; 0x30
 800c17c:	b2e4      	uxtb	r4, r4
 800c17e:	4652      	mov	r2, sl
 800c180:	465b      	mov	r3, fp
 800c182:	f805 4b01 	strb.w	r4, [r5], #1
 800c186:	4606      	mov	r6, r0
 800c188:	460f      	mov	r7, r1
 800c18a:	f7f4 ffe3 	bl	8001154 <__aeabi_dcmplt>
 800c18e:	4632      	mov	r2, r6
 800c190:	463b      	mov	r3, r7
 800c192:	2800      	cmp	r0, #0
 800c194:	d0c8      	beq.n	800c128 <_dtoa_r+0x798>
 800c196:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c198:	9304      	str	r3, [sp, #16]
 800c19a:	e5c4      	b.n	800bd26 <_dtoa_r+0x396>
 800c19c:	2300      	movs	r3, #0
 800c19e:	9309      	str	r3, [sp, #36]	; 0x24
 800c1a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	f340 8189 	ble.w	800c4ba <_dtoa_r+0xb2a>
 800c1a8:	461e      	mov	r6, r3
 800c1aa:	461c      	mov	r4, r3
 800c1ac:	930d      	str	r3, [sp, #52]	; 0x34
 800c1ae:	9306      	str	r3, [sp, #24]
 800c1b0:	e6fd      	b.n	800bfae <_dtoa_r+0x61e>
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	9309      	str	r3, [sp, #36]	; 0x24
 800c1b6:	e7f3      	b.n	800c1a0 <_dtoa_r+0x810>
 800c1b8:	9408      	str	r4, [sp, #32]
 800c1ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c1bc:	9908      	ldr	r1, [sp, #32]
 800c1be:	4648      	mov	r0, r9
 800c1c0:	f001 fc60 	bl	800da84 <__pow5mult>
 800c1c4:	4604      	mov	r4, r0
 800c1c6:	e611      	b.n	800bdec <_dtoa_r+0x45c>
 800c1c8:	9b06      	ldr	r3, [sp, #24]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	f73f acfc 	bgt.w	800bbc8 <_dtoa_r+0x238>
 800c1d0:	f040 82da 	bne.w	800c788 <_dtoa_r+0xdf8>
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	4b20      	ldr	r3, [pc, #128]	; (800c258 <_dtoa_r+0x8c8>)
 800c1d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1dc:	f7f4 fd48 	bl	8000c70 <__aeabi_dmul>
 800c1e0:	4652      	mov	r2, sl
 800c1e2:	465b      	mov	r3, fp
 800c1e4:	f7f4 ffca 	bl	800117c <__aeabi_dcmpge>
 800c1e8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800c1ec:	4646      	mov	r6, r8
 800c1ee:	2800      	cmp	r0, #0
 800c1f0:	f000 80f2 	beq.w	800c3d8 <_dtoa_r+0xa48>
 800c1f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c1f6:	9d07      	ldr	r5, [sp, #28]
 800c1f8:	43db      	mvns	r3, r3
 800c1fa:	9304      	str	r3, [sp, #16]
 800c1fc:	4641      	mov	r1, r8
 800c1fe:	4648      	mov	r0, r9
 800c200:	f001 fb06 	bl	800d810 <_Bfree>
 800c204:	2e00      	cmp	r6, #0
 800c206:	f43f ad8e 	beq.w	800bd26 <_dtoa_r+0x396>
 800c20a:	e68d      	b.n	800bf28 <_dtoa_r+0x598>
 800c20c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c20e:	2a00      	cmp	r2, #0
 800c210:	f000 8241 	beq.w	800c696 <_dtoa_r+0xd06>
 800c214:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c218:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c21a:	9d05      	ldr	r5, [sp, #20]
 800c21c:	e5ab      	b.n	800bd76 <_dtoa_r+0x3e6>
 800c21e:	201c      	movs	r0, #28
 800c220:	9b05      	ldr	r3, [sp, #20]
 800c222:	4403      	add	r3, r0
 800c224:	9305      	str	r3, [sp, #20]
 800c226:	9b02      	ldr	r3, [sp, #8]
 800c228:	4403      	add	r3, r0
 800c22a:	4405      	add	r5, r0
 800c22c:	9302      	str	r3, [sp, #8]
 800c22e:	e60e      	b.n	800be4e <_dtoa_r+0x4be>
 800c230:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c232:	2b01      	cmp	r3, #1
 800c234:	f340 8282 	ble.w	800c73c <_dtoa_r+0xdac>
 800c238:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800c23a:	2001      	movs	r0, #1
 800c23c:	e5f3      	b.n	800be26 <_dtoa_r+0x496>
 800c23e:	bf00      	nop
 800c240:	0800eed0 	.word	0x0800eed0
 800c244:	0800efa8 	.word	0x0800efa8
 800c248:	3ff00000 	.word	0x3ff00000
 800c24c:	401c0000 	.word	0x401c0000
 800c250:	3fe00000 	.word	0x3fe00000
 800c254:	40240000 	.word	0x40240000
 800c258:	40140000 	.word	0x40140000
 800c25c:	4631      	mov	r1, r6
 800c25e:	2300      	movs	r3, #0
 800c260:	220a      	movs	r2, #10
 800c262:	4648      	mov	r0, r9
 800c264:	f001 fade 	bl	800d824 <__multadd>
 800c268:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	4606      	mov	r6, r0
 800c26e:	f340 8297 	ble.w	800c7a0 <_dtoa_r+0xe10>
 800c272:	9306      	str	r3, [sp, #24]
 800c274:	2d00      	cmp	r5, #0
 800c276:	dd05      	ble.n	800c284 <_dtoa_r+0x8f4>
 800c278:	4631      	mov	r1, r6
 800c27a:	462a      	mov	r2, r5
 800c27c:	4648      	mov	r0, r9
 800c27e:	f001 fc51 	bl	800db24 <__lshift>
 800c282:	4606      	mov	r6, r0
 800c284:	2f00      	cmp	r7, #0
 800c286:	f040 817c 	bne.w	800c582 <_dtoa_r+0xbf2>
 800c28a:	9605      	str	r6, [sp, #20]
 800c28c:	9b06      	ldr	r3, [sp, #24]
 800c28e:	9a07      	ldr	r2, [sp, #28]
 800c290:	f8dd b014 	ldr.w	fp, [sp, #20]
 800c294:	3b01      	subs	r3, #1
 800c296:	18d3      	adds	r3, r2, r3
 800c298:	9308      	str	r3, [sp, #32]
 800c29a:	f00a 0301 	and.w	r3, sl, #1
 800c29e:	9309      	str	r3, [sp, #36]	; 0x24
 800c2a0:	4617      	mov	r7, r2
 800c2a2:	46c2      	mov	sl, r8
 800c2a4:	4651      	mov	r1, sl
 800c2a6:	4620      	mov	r0, r4
 800c2a8:	f7ff fadc 	bl	800b864 <quorem>
 800c2ac:	4631      	mov	r1, r6
 800c2ae:	4605      	mov	r5, r0
 800c2b0:	4620      	mov	r0, r4
 800c2b2:	f001 fc8f 	bl	800dbd4 <__mcmp>
 800c2b6:	465a      	mov	r2, fp
 800c2b8:	9002      	str	r0, [sp, #8]
 800c2ba:	4651      	mov	r1, sl
 800c2bc:	4648      	mov	r0, r9
 800c2be:	f001 fca9 	bl	800dc14 <__mdiff>
 800c2c2:	68c2      	ldr	r2, [r0, #12]
 800c2c4:	4680      	mov	r8, r0
 800c2c6:	f105 0330 	add.w	r3, r5, #48	; 0x30
 800c2ca:	2a00      	cmp	r2, #0
 800c2cc:	d149      	bne.n	800c362 <_dtoa_r+0x9d2>
 800c2ce:	4601      	mov	r1, r0
 800c2d0:	4620      	mov	r0, r4
 800c2d2:	9306      	str	r3, [sp, #24]
 800c2d4:	f001 fc7e 	bl	800dbd4 <__mcmp>
 800c2d8:	4641      	mov	r1, r8
 800c2da:	9005      	str	r0, [sp, #20]
 800c2dc:	4648      	mov	r0, r9
 800c2de:	f001 fa97 	bl	800d810 <_Bfree>
 800c2e2:	9a05      	ldr	r2, [sp, #20]
 800c2e4:	9b06      	ldr	r3, [sp, #24]
 800c2e6:	b92a      	cbnz	r2, 800c2f4 <_dtoa_r+0x964>
 800c2e8:	9920      	ldr	r1, [sp, #128]	; 0x80
 800c2ea:	b919      	cbnz	r1, 800c2f4 <_dtoa_r+0x964>
 800c2ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c2ee:	2900      	cmp	r1, #0
 800c2f0:	f000 8236 	beq.w	800c760 <_dtoa_r+0xdd0>
 800c2f4:	9902      	ldr	r1, [sp, #8]
 800c2f6:	2900      	cmp	r1, #0
 800c2f8:	f2c0 80e4 	blt.w	800c4c4 <_dtoa_r+0xb34>
 800c2fc:	d105      	bne.n	800c30a <_dtoa_r+0x97a>
 800c2fe:	9920      	ldr	r1, [sp, #128]	; 0x80
 800c300:	b919      	cbnz	r1, 800c30a <_dtoa_r+0x97a>
 800c302:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c304:	2900      	cmp	r1, #0
 800c306:	f000 80dd 	beq.w	800c4c4 <_dtoa_r+0xb34>
 800c30a:	2a00      	cmp	r2, #0
 800c30c:	f300 814d 	bgt.w	800c5aa <_dtoa_r+0xc1a>
 800c310:	9a08      	ldr	r2, [sp, #32]
 800c312:	703b      	strb	r3, [r7, #0]
 800c314:	f107 0801 	add.w	r8, r7, #1
 800c318:	4297      	cmp	r7, r2
 800c31a:	4645      	mov	r5, r8
 800c31c:	f000 8154 	beq.w	800c5c8 <_dtoa_r+0xc38>
 800c320:	4621      	mov	r1, r4
 800c322:	2300      	movs	r3, #0
 800c324:	220a      	movs	r2, #10
 800c326:	4648      	mov	r0, r9
 800c328:	f001 fa7c 	bl	800d824 <__multadd>
 800c32c:	455e      	cmp	r6, fp
 800c32e:	4604      	mov	r4, r0
 800c330:	4631      	mov	r1, r6
 800c332:	f04f 0300 	mov.w	r3, #0
 800c336:	f04f 020a 	mov.w	r2, #10
 800c33a:	4648      	mov	r0, r9
 800c33c:	d00b      	beq.n	800c356 <_dtoa_r+0x9c6>
 800c33e:	f001 fa71 	bl	800d824 <__multadd>
 800c342:	4659      	mov	r1, fp
 800c344:	4606      	mov	r6, r0
 800c346:	2300      	movs	r3, #0
 800c348:	220a      	movs	r2, #10
 800c34a:	4648      	mov	r0, r9
 800c34c:	f001 fa6a 	bl	800d824 <__multadd>
 800c350:	4647      	mov	r7, r8
 800c352:	4683      	mov	fp, r0
 800c354:	e7a6      	b.n	800c2a4 <_dtoa_r+0x914>
 800c356:	f001 fa65 	bl	800d824 <__multadd>
 800c35a:	4647      	mov	r7, r8
 800c35c:	4606      	mov	r6, r0
 800c35e:	4683      	mov	fp, r0
 800c360:	e7a0      	b.n	800c2a4 <_dtoa_r+0x914>
 800c362:	4601      	mov	r1, r0
 800c364:	4648      	mov	r0, r9
 800c366:	9305      	str	r3, [sp, #20]
 800c368:	f001 fa52 	bl	800d810 <_Bfree>
 800c36c:	2201      	movs	r2, #1
 800c36e:	9b05      	ldr	r3, [sp, #20]
 800c370:	e7c0      	b.n	800c2f4 <_dtoa_r+0x964>
 800c372:	4641      	mov	r1, r8
 800c374:	4620      	mov	r0, r4
 800c376:	f001 fc2d 	bl	800dbd4 <__mcmp>
 800c37a:	2800      	cmp	r0, #0
 800c37c:	f6bf ad7d 	bge.w	800be7a <_dtoa_r+0x4ea>
 800c380:	4621      	mov	r1, r4
 800c382:	9c04      	ldr	r4, [sp, #16]
 800c384:	2300      	movs	r3, #0
 800c386:	3c01      	subs	r4, #1
 800c388:	220a      	movs	r2, #10
 800c38a:	4648      	mov	r0, r9
 800c38c:	9404      	str	r4, [sp, #16]
 800c38e:	f001 fa49 	bl	800d824 <__multadd>
 800c392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c394:	4604      	mov	r4, r0
 800c396:	2b00      	cmp	r3, #0
 800c398:	f47f af60 	bne.w	800c25c <_dtoa_r+0x8cc>
 800c39c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	f340 81f6 	ble.w	800c790 <_dtoa_r+0xe00>
 800c3a4:	9306      	str	r3, [sp, #24]
 800c3a6:	e570      	b.n	800be8a <_dtoa_r+0x4fa>
 800c3a8:	9c08      	ldr	r4, [sp, #32]
 800c3aa:	e51f      	b.n	800bdec <_dtoa_r+0x45c>
 800c3ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c3ae:	2b02      	cmp	r3, #2
 800c3b0:	f77f ad67 	ble.w	800be82 <_dtoa_r+0x4f2>
 800c3b4:	9b06      	ldr	r3, [sp, #24]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	f040 8179 	bne.w	800c6ae <_dtoa_r+0xd1e>
 800c3bc:	4641      	mov	r1, r8
 800c3be:	2205      	movs	r2, #5
 800c3c0:	4648      	mov	r0, r9
 800c3c2:	f001 fa2f 	bl	800d824 <__multadd>
 800c3c6:	4601      	mov	r1, r0
 800c3c8:	4680      	mov	r8, r0
 800c3ca:	4620      	mov	r0, r4
 800c3cc:	f001 fc02 	bl	800dbd4 <__mcmp>
 800c3d0:	2800      	cmp	r0, #0
 800c3d2:	9408      	str	r4, [sp, #32]
 800c3d4:	f77f af0e 	ble.w	800c1f4 <_dtoa_r+0x864>
 800c3d8:	9a04      	ldr	r2, [sp, #16]
 800c3da:	9907      	ldr	r1, [sp, #28]
 800c3dc:	2331      	movs	r3, #49	; 0x31
 800c3de:	3201      	adds	r2, #1
 800c3e0:	9204      	str	r2, [sp, #16]
 800c3e2:	700b      	strb	r3, [r1, #0]
 800c3e4:	1c4d      	adds	r5, r1, #1
 800c3e6:	e709      	b.n	800c1fc <_dtoa_r+0x86c>
 800c3e8:	9a04      	ldr	r2, [sp, #16]
 800c3ea:	3201      	adds	r2, #1
 800c3ec:	9204      	str	r2, [sp, #16]
 800c3ee:	9a07      	ldr	r2, [sp, #28]
 800c3f0:	2331      	movs	r3, #49	; 0x31
 800c3f2:	7013      	strb	r3, [r2, #0]
 800c3f4:	e588      	b.n	800bf08 <_dtoa_r+0x578>
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	9309      	str	r3, [sp, #36]	; 0x24
 800c3fa:	e5cd      	b.n	800bf98 <_dtoa_r+0x608>
 800c3fc:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800c400:	e491      	b.n	800bd26 <_dtoa_r+0x396>
 800c402:	f1ba 0f00 	cmp.w	sl, #0
 800c406:	f47f ad04 	bne.w	800be12 <_dtoa_r+0x482>
 800c40a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c40e:	2b00      	cmp	r3, #0
 800c410:	f040 813f 	bne.w	800c692 <_dtoa_r+0xd02>
 800c414:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800c418:	0d3f      	lsrs	r7, r7, #20
 800c41a:	053f      	lsls	r7, r7, #20
 800c41c:	b137      	cbz	r7, 800c42c <_dtoa_r+0xa9c>
 800c41e:	9b05      	ldr	r3, [sp, #20]
 800c420:	3301      	adds	r3, #1
 800c422:	9305      	str	r3, [sp, #20]
 800c424:	9b02      	ldr	r3, [sp, #8]
 800c426:	3301      	adds	r3, #1
 800c428:	9302      	str	r3, [sp, #8]
 800c42a:	2701      	movs	r7, #1
 800c42c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c42e:	2001      	movs	r0, #1
 800c430:	2b00      	cmp	r3, #0
 800c432:	f43f acf8 	beq.w	800be26 <_dtoa_r+0x496>
 800c436:	e4ed      	b.n	800be14 <_dtoa_r+0x484>
 800c438:	4640      	mov	r0, r8
 800c43a:	f7f4 fbb3 	bl	8000ba4 <__aeabi_i2d>
 800c43e:	4632      	mov	r2, r6
 800c440:	463b      	mov	r3, r7
 800c442:	f7f4 fc15 	bl	8000c70 <__aeabi_dmul>
 800c446:	2200      	movs	r2, #0
 800c448:	4bbf      	ldr	r3, [pc, #764]	; (800c748 <_dtoa_r+0xdb8>)
 800c44a:	f7f4 fa5f 	bl	800090c <__adddf3>
 800c44e:	4604      	mov	r4, r0
 800c450:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800c454:	4630      	mov	r0, r6
 800c456:	4639      	mov	r1, r7
 800c458:	2200      	movs	r2, #0
 800c45a:	4bbc      	ldr	r3, [pc, #752]	; (800c74c <_dtoa_r+0xdbc>)
 800c45c:	f7f4 fa54 	bl	8000908 <__aeabi_dsub>
 800c460:	4622      	mov	r2, r4
 800c462:	462b      	mov	r3, r5
 800c464:	4606      	mov	r6, r0
 800c466:	460f      	mov	r7, r1
 800c468:	f7f4 fe92 	bl	8001190 <__aeabi_dcmpgt>
 800c46c:	4680      	mov	r8, r0
 800c46e:	2800      	cmp	r0, #0
 800c470:	f040 8105 	bne.w	800c67e <_dtoa_r+0xcee>
 800c474:	4622      	mov	r2, r4
 800c476:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800c47a:	4630      	mov	r0, r6
 800c47c:	4639      	mov	r1, r7
 800c47e:	f7f4 fe69 	bl	8001154 <__aeabi_dcmplt>
 800c482:	b108      	cbz	r0, 800c488 <_dtoa_r+0xaf8>
 800c484:	4646      	mov	r6, r8
 800c486:	e6b5      	b.n	800c1f4 <_dtoa_r+0x864>
 800c488:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
 800c48c:	f7ff bb89 	b.w	800bba2 <_dtoa_r+0x212>
 800c490:	9807      	ldr	r0, [sp, #28]
 800c492:	f7ff baae 	b.w	800b9f2 <_dtoa_r+0x62>
 800c496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c498:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c49a:	970a      	str	r7, [sp, #40]	; 0x28
 800c49c:	1afb      	subs	r3, r7, r3
 800c49e:	441a      	add	r2, r3
 800c4a0:	920b      	str	r2, [sp, #44]	; 0x2c
 800c4a2:	2700      	movs	r7, #0
 800c4a4:	e461      	b.n	800bd6a <_dtoa_r+0x3da>
 800c4a6:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
 800c4aa:	f04f 0802 	mov.w	r8, #2
 800c4ae:	e5bb      	b.n	800c028 <_dtoa_r+0x698>
 800c4b0:	461c      	mov	r4, r3
 800c4b2:	2100      	movs	r1, #0
 800c4b4:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800c4b8:	e58a      	b.n	800bfd0 <_dtoa_r+0x640>
 800c4ba:	2401      	movs	r4, #1
 800c4bc:	9421      	str	r4, [sp, #132]	; 0x84
 800c4be:	940d      	str	r4, [sp, #52]	; 0x34
 800c4c0:	9406      	str	r4, [sp, #24]
 800c4c2:	e7f6      	b.n	800c4b2 <_dtoa_r+0xb22>
 800c4c4:	2a00      	cmp	r2, #0
 800c4c6:	46d0      	mov	r8, sl
 800c4c8:	f8cd b014 	str.w	fp, [sp, #20]
 800c4cc:	469a      	mov	sl, r3
 800c4ce:	dd11      	ble.n	800c4f4 <_dtoa_r+0xb64>
 800c4d0:	4621      	mov	r1, r4
 800c4d2:	2201      	movs	r2, #1
 800c4d4:	4648      	mov	r0, r9
 800c4d6:	f001 fb25 	bl	800db24 <__lshift>
 800c4da:	4641      	mov	r1, r8
 800c4dc:	4604      	mov	r4, r0
 800c4de:	f001 fb79 	bl	800dbd4 <__mcmp>
 800c4e2:	2800      	cmp	r0, #0
 800c4e4:	f340 8149 	ble.w	800c77a <_dtoa_r+0xdea>
 800c4e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c4ec:	f000 8106 	beq.w	800c6fc <_dtoa_r+0xd6c>
 800c4f0:	f105 0a31 	add.w	sl, r5, #49	; 0x31
 800c4f4:	46b3      	mov	fp, r6
 800c4f6:	f887 a000 	strb.w	sl, [r7]
 800c4fa:	1c7d      	adds	r5, r7, #1
 800c4fc:	9e05      	ldr	r6, [sp, #20]
 800c4fe:	9408      	str	r4, [sp, #32]
 800c500:	e502      	b.n	800bf08 <_dtoa_r+0x578>
 800c502:	d104      	bne.n	800c50e <_dtoa_r+0xb7e>
 800c504:	f01a 0f01 	tst.w	sl, #1
 800c508:	d001      	beq.n	800c50e <_dtoa_r+0xb7e>
 800c50a:	e4ed      	b.n	800bee8 <_dtoa_r+0x558>
 800c50c:	4615      	mov	r5, r2
 800c50e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c512:	2b30      	cmp	r3, #48	; 0x30
 800c514:	f105 32ff 	add.w	r2, r5, #4294967295
 800c518:	d0f8      	beq.n	800c50c <_dtoa_r+0xb7c>
 800c51a:	e4f5      	b.n	800bf08 <_dtoa_r+0x578>
 800c51c:	9b04      	ldr	r3, [sp, #16]
 800c51e:	425c      	negs	r4, r3
 800c520:	2c00      	cmp	r4, #0
 800c522:	f000 80bf 	beq.w	800c6a4 <_dtoa_r+0xd14>
 800c526:	4b8a      	ldr	r3, [pc, #552]	; (800c750 <_dtoa_r+0xdc0>)
 800c528:	f004 020f 	and.w	r2, r4, #15
 800c52c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c534:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c538:	f7f4 fb9a 	bl	8000c70 <__aeabi_dmul>
 800c53c:	1124      	asrs	r4, r4, #4
 800c53e:	4606      	mov	r6, r0
 800c540:	460f      	mov	r7, r1
 800c542:	f000 812a 	beq.w	800c79a <_dtoa_r+0xe0a>
 800c546:	4d83      	ldr	r5, [pc, #524]	; (800c754 <_dtoa_r+0xdc4>)
 800c548:	f04f 0802 	mov.w	r8, #2
 800c54c:	07e2      	lsls	r2, r4, #31
 800c54e:	d509      	bpl.n	800c564 <_dtoa_r+0xbd4>
 800c550:	4630      	mov	r0, r6
 800c552:	4639      	mov	r1, r7
 800c554:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c558:	f7f4 fb8a 	bl	8000c70 <__aeabi_dmul>
 800c55c:	f108 0801 	add.w	r8, r8, #1
 800c560:	4606      	mov	r6, r0
 800c562:	460f      	mov	r7, r1
 800c564:	1064      	asrs	r4, r4, #1
 800c566:	f105 0508 	add.w	r5, r5, #8
 800c56a:	d1ef      	bne.n	800c54c <_dtoa_r+0xbbc>
 800c56c:	e576      	b.n	800c05c <_dtoa_r+0x6cc>
 800c56e:	9907      	ldr	r1, [sp, #28]
 800c570:	2230      	movs	r2, #48	; 0x30
 800c572:	700a      	strb	r2, [r1, #0]
 800c574:	9a04      	ldr	r2, [sp, #16]
 800c576:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 800c57a:	3201      	adds	r2, #1
 800c57c:	9204      	str	r2, [sp, #16]
 800c57e:	f7ff bbd0 	b.w	800bd22 <_dtoa_r+0x392>
 800c582:	6871      	ldr	r1, [r6, #4]
 800c584:	4648      	mov	r0, r9
 800c586:	f001 f91d 	bl	800d7c4 <_Balloc>
 800c58a:	6933      	ldr	r3, [r6, #16]
 800c58c:	1c9a      	adds	r2, r3, #2
 800c58e:	4605      	mov	r5, r0
 800c590:	0092      	lsls	r2, r2, #2
 800c592:	f106 010c 	add.w	r1, r6, #12
 800c596:	300c      	adds	r0, #12
 800c598:	f7f4 f844 	bl	8000624 <memcpy>
 800c59c:	4629      	mov	r1, r5
 800c59e:	2201      	movs	r2, #1
 800c5a0:	4648      	mov	r0, r9
 800c5a2:	f001 fabf 	bl	800db24 <__lshift>
 800c5a6:	9005      	str	r0, [sp, #20]
 800c5a8:	e670      	b.n	800c28c <_dtoa_r+0x8fc>
 800c5aa:	2b39      	cmp	r3, #57	; 0x39
 800c5ac:	f8cd b014 	str.w	fp, [sp, #20]
 800c5b0:	46d0      	mov	r8, sl
 800c5b2:	f000 80a3 	beq.w	800c6fc <_dtoa_r+0xd6c>
 800c5b6:	f103 0a01 	add.w	sl, r3, #1
 800c5ba:	46b3      	mov	fp, r6
 800c5bc:	f887 a000 	strb.w	sl, [r7]
 800c5c0:	1c7d      	adds	r5, r7, #1
 800c5c2:	9e05      	ldr	r6, [sp, #20]
 800c5c4:	9408      	str	r4, [sp, #32]
 800c5c6:	e49f      	b.n	800bf08 <_dtoa_r+0x578>
 800c5c8:	465a      	mov	r2, fp
 800c5ca:	46d0      	mov	r8, sl
 800c5cc:	46b3      	mov	fp, r6
 800c5ce:	469a      	mov	sl, r3
 800c5d0:	4616      	mov	r6, r2
 800c5d2:	e47d      	b.n	800bed0 <_dtoa_r+0x540>
 800c5d4:	495e      	ldr	r1, [pc, #376]	; (800c750 <_dtoa_r+0xdc0>)
 800c5d6:	f108 3aff 	add.w	sl, r8, #4294967295
 800c5da:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c5de:	4622      	mov	r2, r4
 800c5e0:	462b      	mov	r3, r5
 800c5e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5e6:	f7f4 fb43 	bl	8000c70 <__aeabi_dmul>
 800c5ea:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800c5ee:	4639      	mov	r1, r7
 800c5f0:	4630      	mov	r0, r6
 800c5f2:	f7f4 fded 	bl	80011d0 <__aeabi_d2iz>
 800c5f6:	4604      	mov	r4, r0
 800c5f8:	f7f4 fad4 	bl	8000ba4 <__aeabi_i2d>
 800c5fc:	4602      	mov	r2, r0
 800c5fe:	460b      	mov	r3, r1
 800c600:	4630      	mov	r0, r6
 800c602:	4639      	mov	r1, r7
 800c604:	f7f4 f980 	bl	8000908 <__aeabi_dsub>
 800c608:	9a07      	ldr	r2, [sp, #28]
 800c60a:	3430      	adds	r4, #48	; 0x30
 800c60c:	f1b8 0f01 	cmp.w	r8, #1
 800c610:	4606      	mov	r6, r0
 800c612:	460f      	mov	r7, r1
 800c614:	7014      	strb	r4, [r2, #0]
 800c616:	f102 0501 	add.w	r5, r2, #1
 800c61a:	d01e      	beq.n	800c65a <_dtoa_r+0xcca>
 800c61c:	9b07      	ldr	r3, [sp, #28]
 800c61e:	eb03 0b08 	add.w	fp, r3, r8
 800c622:	46a8      	mov	r8, r5
 800c624:	2200      	movs	r2, #0
 800c626:	4b4c      	ldr	r3, [pc, #304]	; (800c758 <_dtoa_r+0xdc8>)
 800c628:	4630      	mov	r0, r6
 800c62a:	4639      	mov	r1, r7
 800c62c:	f7f4 fb20 	bl	8000c70 <__aeabi_dmul>
 800c630:	460f      	mov	r7, r1
 800c632:	4606      	mov	r6, r0
 800c634:	f7f4 fdcc 	bl	80011d0 <__aeabi_d2iz>
 800c638:	4604      	mov	r4, r0
 800c63a:	f7f4 fab3 	bl	8000ba4 <__aeabi_i2d>
 800c63e:	3430      	adds	r4, #48	; 0x30
 800c640:	4602      	mov	r2, r0
 800c642:	460b      	mov	r3, r1
 800c644:	4630      	mov	r0, r6
 800c646:	4639      	mov	r1, r7
 800c648:	f7f4 f95e 	bl	8000908 <__aeabi_dsub>
 800c64c:	f808 4b01 	strb.w	r4, [r8], #1
 800c650:	45c3      	cmp	fp, r8
 800c652:	4606      	mov	r6, r0
 800c654:	460f      	mov	r7, r1
 800c656:	d1e5      	bne.n	800c624 <_dtoa_r+0xc94>
 800c658:	4455      	add	r5, sl
 800c65a:	2200      	movs	r2, #0
 800c65c:	4b3f      	ldr	r3, [pc, #252]	; (800c75c <_dtoa_r+0xdcc>)
 800c65e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800c662:	f7f4 f953 	bl	800090c <__adddf3>
 800c666:	4632      	mov	r2, r6
 800c668:	463b      	mov	r3, r7
 800c66a:	f7f4 fd73 	bl	8001154 <__aeabi_dcmplt>
 800c66e:	2800      	cmp	r0, #0
 800c670:	d04c      	beq.n	800c70c <_dtoa_r+0xd7c>
 800c672:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c674:	9304      	str	r3, [sp, #16]
 800c676:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 800c67a:	f7ff bb46 	b.w	800bd0a <_dtoa_r+0x37a>
 800c67e:	f04f 0800 	mov.w	r8, #0
 800c682:	4646      	mov	r6, r8
 800c684:	e6a8      	b.n	800c3d8 <_dtoa_r+0xa48>
 800c686:	9b05      	ldr	r3, [sp, #20]
 800c688:	9a06      	ldr	r2, [sp, #24]
 800c68a:	1a9d      	subs	r5, r3, r2
 800c68c:	2300      	movs	r3, #0
 800c68e:	f7ff bb72 	b.w	800bd76 <_dtoa_r+0x3e6>
 800c692:	2700      	movs	r7, #0
 800c694:	e6ca      	b.n	800c42c <_dtoa_r+0xa9c>
 800c696:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c698:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c69a:	9d05      	ldr	r5, [sp, #20]
 800c69c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c6a0:	f7ff bb69 	b.w	800bd76 <_dtoa_r+0x3e6>
 800c6a4:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 800c6a8:	f04f 0802 	mov.w	r8, #2
 800c6ac:	e4d6      	b.n	800c05c <_dtoa_r+0x6cc>
 800c6ae:	9408      	str	r4, [sp, #32]
 800c6b0:	e5a0      	b.n	800c1f4 <_dtoa_r+0x864>
 800c6b2:	9b06      	ldr	r3, [sp, #24]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	f43f aebf 	beq.w	800c438 <_dtoa_r+0xaa8>
 800c6ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	f77f aee3 	ble.w	800c488 <_dtoa_r+0xaf8>
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	4b24      	ldr	r3, [pc, #144]	; (800c758 <_dtoa_r+0xdc8>)
 800c6c6:	4630      	mov	r0, r6
 800c6c8:	4639      	mov	r1, r7
 800c6ca:	f7f4 fad1 	bl	8000c70 <__aeabi_dmul>
 800c6ce:	4606      	mov	r6, r0
 800c6d0:	460f      	mov	r7, r1
 800c6d2:	f108 0001 	add.w	r0, r8, #1
 800c6d6:	f7f4 fa65 	bl	8000ba4 <__aeabi_i2d>
 800c6da:	4632      	mov	r2, r6
 800c6dc:	463b      	mov	r3, r7
 800c6de:	f7f4 fac7 	bl	8000c70 <__aeabi_dmul>
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	4b18      	ldr	r3, [pc, #96]	; (800c748 <_dtoa_r+0xdb8>)
 800c6e6:	f7f4 f911 	bl	800090c <__adddf3>
 800c6ea:	9a04      	ldr	r2, [sp, #16]
 800c6ec:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800c6f0:	3a01      	subs	r2, #1
 800c6f2:	4604      	mov	r4, r0
 800c6f4:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800c6f8:	9211      	str	r2, [sp, #68]	; 0x44
 800c6fa:	e4d0      	b.n	800c09e <_dtoa_r+0x70e>
 800c6fc:	2239      	movs	r2, #57	; 0x39
 800c6fe:	46b3      	mov	fp, r6
 800c700:	9408      	str	r4, [sp, #32]
 800c702:	9e05      	ldr	r6, [sp, #20]
 800c704:	703a      	strb	r2, [r7, #0]
 800c706:	1c7d      	adds	r5, r7, #1
 800c708:	f7ff bbf0 	b.w	800beec <_dtoa_r+0x55c>
 800c70c:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800c710:	2000      	movs	r0, #0
 800c712:	4912      	ldr	r1, [pc, #72]	; (800c75c <_dtoa_r+0xdcc>)
 800c714:	f7f4 f8f8 	bl	8000908 <__aeabi_dsub>
 800c718:	4632      	mov	r2, r6
 800c71a:	463b      	mov	r3, r7
 800c71c:	f7f4 fd38 	bl	8001190 <__aeabi_dcmpgt>
 800c720:	b908      	cbnz	r0, 800c726 <_dtoa_r+0xd96>
 800c722:	e6b1      	b.n	800c488 <_dtoa_r+0xaf8>
 800c724:	4615      	mov	r5, r2
 800c726:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c72a:	2b30      	cmp	r3, #48	; 0x30
 800c72c:	f105 32ff 	add.w	r2, r5, #4294967295
 800c730:	d0f8      	beq.n	800c724 <_dtoa_r+0xd94>
 800c732:	e530      	b.n	800c196 <_dtoa_r+0x806>
 800c734:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c736:	9304      	str	r3, [sp, #16]
 800c738:	f7ff bae7 	b.w	800bd0a <_dtoa_r+0x37a>
 800c73c:	f1ba 0f00 	cmp.w	sl, #0
 800c740:	f47f ad7a 	bne.w	800c238 <_dtoa_r+0x8a8>
 800c744:	e661      	b.n	800c40a <_dtoa_r+0xa7a>
 800c746:	bf00      	nop
 800c748:	401c0000 	.word	0x401c0000
 800c74c:	40140000 	.word	0x40140000
 800c750:	0800eed0 	.word	0x0800eed0
 800c754:	0800efa8 	.word	0x0800efa8
 800c758:	40240000 	.word	0x40240000
 800c75c:	3fe00000 	.word	0x3fe00000
 800c760:	2b39      	cmp	r3, #57	; 0x39
 800c762:	f8cd b014 	str.w	fp, [sp, #20]
 800c766:	46d0      	mov	r8, sl
 800c768:	f8dd b008 	ldr.w	fp, [sp, #8]
 800c76c:	469a      	mov	sl, r3
 800c76e:	d0c5      	beq.n	800c6fc <_dtoa_r+0xd6c>
 800c770:	f1bb 0f00 	cmp.w	fp, #0
 800c774:	f73f aebc 	bgt.w	800c4f0 <_dtoa_r+0xb60>
 800c778:	e6bc      	b.n	800c4f4 <_dtoa_r+0xb64>
 800c77a:	f47f aebb 	bne.w	800c4f4 <_dtoa_r+0xb64>
 800c77e:	f01a 0f01 	tst.w	sl, #1
 800c782:	f43f aeb7 	beq.w	800c4f4 <_dtoa_r+0xb64>
 800c786:	e6af      	b.n	800c4e8 <_dtoa_r+0xb58>
 800c788:	f04f 0800 	mov.w	r8, #0
 800c78c:	4646      	mov	r6, r8
 800c78e:	e531      	b.n	800c1f4 <_dtoa_r+0x864>
 800c790:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c792:	2b02      	cmp	r3, #2
 800c794:	dc21      	bgt.n	800c7da <_dtoa_r+0xe4a>
 800c796:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c798:	e604      	b.n	800c3a4 <_dtoa_r+0xa14>
 800c79a:	f04f 0802 	mov.w	r8, #2
 800c79e:	e45d      	b.n	800c05c <_dtoa_r+0x6cc>
 800c7a0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c7a2:	2b02      	cmp	r3, #2
 800c7a4:	dc19      	bgt.n	800c7da <_dtoa_r+0xe4a>
 800c7a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7a8:	e563      	b.n	800c272 <_dtoa_r+0x8e2>
 800c7aa:	2400      	movs	r4, #0
 800c7ac:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 800c7b0:	4621      	mov	r1, r4
 800c7b2:	4648      	mov	r0, r9
 800c7b4:	f001 f806 	bl	800d7c4 <_Balloc>
 800c7b8:	f04f 33ff 	mov.w	r3, #4294967295
 800c7bc:	9306      	str	r3, [sp, #24]
 800c7be:	930d      	str	r3, [sp, #52]	; 0x34
 800c7c0:	2301      	movs	r3, #1
 800c7c2:	9007      	str	r0, [sp, #28]
 800c7c4:	9421      	str	r4, [sp, #132]	; 0x84
 800c7c6:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800c7ca:	9309      	str	r3, [sp, #36]	; 0x24
 800c7cc:	f7ff b9e9 	b.w	800bba2 <_dtoa_r+0x212>
 800c7d0:	f43f ab3d 	beq.w	800be4e <_dtoa_r+0x4be>
 800c7d4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 800c7d8:	e522      	b.n	800c220 <_dtoa_r+0x890>
 800c7da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7dc:	9306      	str	r3, [sp, #24]
 800c7de:	e5e9      	b.n	800c3b4 <_dtoa_r+0xa24>
 800c7e0:	2501      	movs	r5, #1
 800c7e2:	f7ff b9a8 	b.w	800bb36 <_dtoa_r+0x1a6>
 800c7e6:	bf00      	nop

0800c7e8 <__sflush_r>:
 800c7e8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 800c7ec:	b29a      	uxth	r2, r3
 800c7ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7f2:	460d      	mov	r5, r1
 800c7f4:	0711      	lsls	r1, r2, #28
 800c7f6:	4680      	mov	r8, r0
 800c7f8:	d43c      	bmi.n	800c874 <__sflush_r+0x8c>
 800c7fa:	686a      	ldr	r2, [r5, #4]
 800c7fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c800:	2a00      	cmp	r2, #0
 800c802:	81ab      	strh	r3, [r5, #12]
 800c804:	dd73      	ble.n	800c8ee <__sflush_r+0x106>
 800c806:	6aac      	ldr	r4, [r5, #40]	; 0x28
 800c808:	2c00      	cmp	r4, #0
 800c80a:	d04b      	beq.n	800c8a4 <__sflush_r+0xbc>
 800c80c:	b29b      	uxth	r3, r3
 800c80e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800c812:	2100      	movs	r1, #0
 800c814:	b292      	uxth	r2, r2
 800c816:	f8d8 6000 	ldr.w	r6, [r8]
 800c81a:	f8c8 1000 	str.w	r1, [r8]
 800c81e:	2a00      	cmp	r2, #0
 800c820:	d069      	beq.n	800c8f6 <__sflush_r+0x10e>
 800c822:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800c824:	075f      	lsls	r7, r3, #29
 800c826:	d505      	bpl.n	800c834 <__sflush_r+0x4c>
 800c828:	6869      	ldr	r1, [r5, #4]
 800c82a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800c82c:	1a52      	subs	r2, r2, r1
 800c82e:	b10b      	cbz	r3, 800c834 <__sflush_r+0x4c>
 800c830:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800c832:	1ad2      	subs	r2, r2, r3
 800c834:	2300      	movs	r3, #0
 800c836:	69e9      	ldr	r1, [r5, #28]
 800c838:	4640      	mov	r0, r8
 800c83a:	47a0      	blx	r4
 800c83c:	1c44      	adds	r4, r0, #1
 800c83e:	d03c      	beq.n	800c8ba <__sflush_r+0xd2>
 800c840:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 800c844:	692a      	ldr	r2, [r5, #16]
 800c846:	602a      	str	r2, [r5, #0]
 800c848:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c84c:	2200      	movs	r2, #0
 800c84e:	81ab      	strh	r3, [r5, #12]
 800c850:	04db      	lsls	r3, r3, #19
 800c852:	606a      	str	r2, [r5, #4]
 800c854:	d449      	bmi.n	800c8ea <__sflush_r+0x102>
 800c856:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800c858:	f8c8 6000 	str.w	r6, [r8]
 800c85c:	b311      	cbz	r1, 800c8a4 <__sflush_r+0xbc>
 800c85e:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800c862:	4299      	cmp	r1, r3
 800c864:	d002      	beq.n	800c86c <__sflush_r+0x84>
 800c866:	4640      	mov	r0, r8
 800c868:	f000 f94e 	bl	800cb08 <_free_r>
 800c86c:	2000      	movs	r0, #0
 800c86e:	6328      	str	r0, [r5, #48]	; 0x30
 800c870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c874:	692e      	ldr	r6, [r5, #16]
 800c876:	b1ae      	cbz	r6, 800c8a4 <__sflush_r+0xbc>
 800c878:	682c      	ldr	r4, [r5, #0]
 800c87a:	602e      	str	r6, [r5, #0]
 800c87c:	0790      	lsls	r0, r2, #30
 800c87e:	bf0c      	ite	eq
 800c880:	696b      	ldreq	r3, [r5, #20]
 800c882:	2300      	movne	r3, #0
 800c884:	1ba4      	subs	r4, r4, r6
 800c886:	60ab      	str	r3, [r5, #8]
 800c888:	e00a      	b.n	800c8a0 <__sflush_r+0xb8>
 800c88a:	4623      	mov	r3, r4
 800c88c:	4632      	mov	r2, r6
 800c88e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800c890:	69e9      	ldr	r1, [r5, #28]
 800c892:	4640      	mov	r0, r8
 800c894:	47b8      	blx	r7
 800c896:	2800      	cmp	r0, #0
 800c898:	eba4 0400 	sub.w	r4, r4, r0
 800c89c:	4406      	add	r6, r0
 800c89e:	dd04      	ble.n	800c8aa <__sflush_r+0xc2>
 800c8a0:	2c00      	cmp	r4, #0
 800c8a2:	dcf2      	bgt.n	800c88a <__sflush_r+0xa2>
 800c8a4:	2000      	movs	r0, #0
 800c8a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8aa:	89ab      	ldrh	r3, [r5, #12]
 800c8ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8b0:	81ab      	strh	r3, [r5, #12]
 800c8b2:	f04f 30ff 	mov.w	r0, #4294967295
 800c8b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8ba:	f8d8 2000 	ldr.w	r2, [r8]
 800c8be:	2a1d      	cmp	r2, #29
 800c8c0:	d8f3      	bhi.n	800c8aa <__sflush_r+0xc2>
 800c8c2:	4b1a      	ldr	r3, [pc, #104]	; (800c92c <__sflush_r+0x144>)
 800c8c4:	40d3      	lsrs	r3, r2
 800c8c6:	f003 0301 	and.w	r3, r3, #1
 800c8ca:	f083 0401 	eor.w	r4, r3, #1
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d0eb      	beq.n	800c8aa <__sflush_r+0xc2>
 800c8d2:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 800c8d6:	6929      	ldr	r1, [r5, #16]
 800c8d8:	6029      	str	r1, [r5, #0]
 800c8da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c8de:	04d9      	lsls	r1, r3, #19
 800c8e0:	606c      	str	r4, [r5, #4]
 800c8e2:	81ab      	strh	r3, [r5, #12]
 800c8e4:	d5b7      	bpl.n	800c856 <__sflush_r+0x6e>
 800c8e6:	2a00      	cmp	r2, #0
 800c8e8:	d1b5      	bne.n	800c856 <__sflush_r+0x6e>
 800c8ea:	6528      	str	r0, [r5, #80]	; 0x50
 800c8ec:	e7b3      	b.n	800c856 <__sflush_r+0x6e>
 800c8ee:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800c8f0:	2a00      	cmp	r2, #0
 800c8f2:	dc88      	bgt.n	800c806 <__sflush_r+0x1e>
 800c8f4:	e7d6      	b.n	800c8a4 <__sflush_r+0xbc>
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	69e9      	ldr	r1, [r5, #28]
 800c8fa:	4640      	mov	r0, r8
 800c8fc:	47a0      	blx	r4
 800c8fe:	1c43      	adds	r3, r0, #1
 800c900:	4602      	mov	r2, r0
 800c902:	d002      	beq.n	800c90a <__sflush_r+0x122>
 800c904:	89ab      	ldrh	r3, [r5, #12]
 800c906:	6aac      	ldr	r4, [r5, #40]	; 0x28
 800c908:	e78c      	b.n	800c824 <__sflush_r+0x3c>
 800c90a:	f8d8 3000 	ldr.w	r3, [r8]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d0f8      	beq.n	800c904 <__sflush_r+0x11c>
 800c912:	2b1d      	cmp	r3, #29
 800c914:	d001      	beq.n	800c91a <__sflush_r+0x132>
 800c916:	2b16      	cmp	r3, #22
 800c918:	d102      	bne.n	800c920 <__sflush_r+0x138>
 800c91a:	f8c8 6000 	str.w	r6, [r8]
 800c91e:	e7c1      	b.n	800c8a4 <__sflush_r+0xbc>
 800c920:	89ab      	ldrh	r3, [r5, #12]
 800c922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c926:	81ab      	strh	r3, [r5, #12]
 800c928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c92c:	20400001 	.word	0x20400001

0800c930 <_fflush_r>:
 800c930:	b510      	push	{r4, lr}
 800c932:	4604      	mov	r4, r0
 800c934:	b082      	sub	sp, #8
 800c936:	b108      	cbz	r0, 800c93c <_fflush_r+0xc>
 800c938:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c93a:	b153      	cbz	r3, 800c952 <_fflush_r+0x22>
 800c93c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 800c940:	b908      	cbnz	r0, 800c946 <_fflush_r+0x16>
 800c942:	b002      	add	sp, #8
 800c944:	bd10      	pop	{r4, pc}
 800c946:	4620      	mov	r0, r4
 800c948:	b002      	add	sp, #8
 800c94a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c94e:	f7ff bf4b 	b.w	800c7e8 <__sflush_r>
 800c952:	9101      	str	r1, [sp, #4]
 800c954:	f000 f880 	bl	800ca58 <__sinit>
 800c958:	9901      	ldr	r1, [sp, #4]
 800c95a:	e7ef      	b.n	800c93c <_fflush_r+0xc>

0800c95c <_cleanup_r>:
 800c95c:	4901      	ldr	r1, [pc, #4]	; (800c964 <_cleanup_r+0x8>)
 800c95e:	f000 bb3d 	b.w	800cfdc <_fwalk_reent>
 800c962:	bf00      	nop
 800c964:	0800e4c5 	.word	0x0800e4c5

0800c968 <__sinit.part.1>:
 800c968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c96c:	4b35      	ldr	r3, [pc, #212]	; (800ca44 <__sinit.part.1+0xdc>)
 800c96e:	6845      	ldr	r5, [r0, #4]
 800c970:	63c3      	str	r3, [r0, #60]	; 0x3c
 800c972:	2400      	movs	r4, #0
 800c974:	4607      	mov	r7, r0
 800c976:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 800c97a:	2304      	movs	r3, #4
 800c97c:	2103      	movs	r1, #3
 800c97e:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
 800c982:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 800c986:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 800c98a:	b083      	sub	sp, #12
 800c98c:	602c      	str	r4, [r5, #0]
 800c98e:	606c      	str	r4, [r5, #4]
 800c990:	60ac      	str	r4, [r5, #8]
 800c992:	666c      	str	r4, [r5, #100]	; 0x64
 800c994:	81ec      	strh	r4, [r5, #14]
 800c996:	612c      	str	r4, [r5, #16]
 800c998:	616c      	str	r4, [r5, #20]
 800c99a:	61ac      	str	r4, [r5, #24]
 800c99c:	81ab      	strh	r3, [r5, #12]
 800c99e:	4621      	mov	r1, r4
 800c9a0:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 800c9a4:	2208      	movs	r2, #8
 800c9a6:	f7fb fe75 	bl	8008694 <memset>
 800c9aa:	68be      	ldr	r6, [r7, #8]
 800c9ac:	f8df b098 	ldr.w	fp, [pc, #152]	; 800ca48 <__sinit.part.1+0xe0>
 800c9b0:	f8df a098 	ldr.w	sl, [pc, #152]	; 800ca4c <__sinit.part.1+0xe4>
 800c9b4:	f8df 9098 	ldr.w	r9, [pc, #152]	; 800ca50 <__sinit.part.1+0xe8>
 800c9b8:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800ca54 <__sinit.part.1+0xec>
 800c9bc:	f8c5 b020 	str.w	fp, [r5, #32]
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	2209      	movs	r2, #9
 800c9c4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 800c9c8:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 800c9cc:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 800c9d0:	61ed      	str	r5, [r5, #28]
 800c9d2:	4621      	mov	r1, r4
 800c9d4:	81f3      	strh	r3, [r6, #14]
 800c9d6:	81b2      	strh	r2, [r6, #12]
 800c9d8:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 800c9dc:	6034      	str	r4, [r6, #0]
 800c9de:	6074      	str	r4, [r6, #4]
 800c9e0:	60b4      	str	r4, [r6, #8]
 800c9e2:	6674      	str	r4, [r6, #100]	; 0x64
 800c9e4:	6134      	str	r4, [r6, #16]
 800c9e6:	6174      	str	r4, [r6, #20]
 800c9e8:	61b4      	str	r4, [r6, #24]
 800c9ea:	2208      	movs	r2, #8
 800c9ec:	9301      	str	r3, [sp, #4]
 800c9ee:	f7fb fe51 	bl	8008694 <memset>
 800c9f2:	68fd      	ldr	r5, [r7, #12]
 800c9f4:	61f6      	str	r6, [r6, #28]
 800c9f6:	2012      	movs	r0, #18
 800c9f8:	2202      	movs	r2, #2
 800c9fa:	f8c6 b020 	str.w	fp, [r6, #32]
 800c9fe:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 800ca02:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 800ca06:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 800ca0a:	4621      	mov	r1, r4
 800ca0c:	81a8      	strh	r0, [r5, #12]
 800ca0e:	81ea      	strh	r2, [r5, #14]
 800ca10:	602c      	str	r4, [r5, #0]
 800ca12:	606c      	str	r4, [r5, #4]
 800ca14:	60ac      	str	r4, [r5, #8]
 800ca16:	666c      	str	r4, [r5, #100]	; 0x64
 800ca18:	612c      	str	r4, [r5, #16]
 800ca1a:	616c      	str	r4, [r5, #20]
 800ca1c:	61ac      	str	r4, [r5, #24]
 800ca1e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 800ca22:	2208      	movs	r2, #8
 800ca24:	f7fb fe36 	bl	8008694 <memset>
 800ca28:	9b01      	ldr	r3, [sp, #4]
 800ca2a:	61ed      	str	r5, [r5, #28]
 800ca2c:	f8c5 b020 	str.w	fp, [r5, #32]
 800ca30:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 800ca34:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 800ca38:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 800ca3c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ca3e:	b003      	add	sp, #12
 800ca40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca44:	0800c95d 	.word	0x0800c95d
 800ca48:	0800e1e5 	.word	0x0800e1e5
 800ca4c:	0800e209 	.word	0x0800e209
 800ca50:	0800e245 	.word	0x0800e245
 800ca54:	0800e265 	.word	0x0800e265

0800ca58 <__sinit>:
 800ca58:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ca5a:	b103      	cbz	r3, 800ca5e <__sinit+0x6>
 800ca5c:	4770      	bx	lr
 800ca5e:	f7ff bf83 	b.w	800c968 <__sinit.part.1>
 800ca62:	bf00      	nop

0800ca64 <__sfp_lock_acquire>:
 800ca64:	4770      	bx	lr
 800ca66:	bf00      	nop

0800ca68 <__sfp_lock_release>:
 800ca68:	4770      	bx	lr
 800ca6a:	bf00      	nop

0800ca6c <_malloc_trim_r>:
 800ca6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca6e:	4f23      	ldr	r7, [pc, #140]	; (800cafc <_malloc_trim_r+0x90>)
 800ca70:	460c      	mov	r4, r1
 800ca72:	4606      	mov	r6, r0
 800ca74:	f000 fea2 	bl	800d7bc <__malloc_lock>
 800ca78:	68bb      	ldr	r3, [r7, #8]
 800ca7a:	685d      	ldr	r5, [r3, #4]
 800ca7c:	f025 0503 	bic.w	r5, r5, #3
 800ca80:	1b29      	subs	r1, r5, r4
 800ca82:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 800ca86:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 800ca8a:	f021 010f 	bic.w	r1, r1, #15
 800ca8e:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 800ca92:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800ca96:	db07      	blt.n	800caa8 <_malloc_trim_r+0x3c>
 800ca98:	2100      	movs	r1, #0
 800ca9a:	4630      	mov	r0, r6
 800ca9c:	f001 fb90 	bl	800e1c0 <_sbrk_r>
 800caa0:	68bb      	ldr	r3, [r7, #8]
 800caa2:	442b      	add	r3, r5
 800caa4:	4298      	cmp	r0, r3
 800caa6:	d004      	beq.n	800cab2 <_malloc_trim_r+0x46>
 800caa8:	4630      	mov	r0, r6
 800caaa:	f000 fe89 	bl	800d7c0 <__malloc_unlock>
 800caae:	2000      	movs	r0, #0
 800cab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cab2:	4261      	negs	r1, r4
 800cab4:	4630      	mov	r0, r6
 800cab6:	f001 fb83 	bl	800e1c0 <_sbrk_r>
 800caba:	3001      	adds	r0, #1
 800cabc:	d00d      	beq.n	800cada <_malloc_trim_r+0x6e>
 800cabe:	4b10      	ldr	r3, [pc, #64]	; (800cb00 <_malloc_trim_r+0x94>)
 800cac0:	68ba      	ldr	r2, [r7, #8]
 800cac2:	6819      	ldr	r1, [r3, #0]
 800cac4:	1b2d      	subs	r5, r5, r4
 800cac6:	f045 0501 	orr.w	r5, r5, #1
 800caca:	4630      	mov	r0, r6
 800cacc:	1b09      	subs	r1, r1, r4
 800cace:	6055      	str	r5, [r2, #4]
 800cad0:	6019      	str	r1, [r3, #0]
 800cad2:	f000 fe75 	bl	800d7c0 <__malloc_unlock>
 800cad6:	2001      	movs	r0, #1
 800cad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cada:	2100      	movs	r1, #0
 800cadc:	4630      	mov	r0, r6
 800cade:	f001 fb6f 	bl	800e1c0 <_sbrk_r>
 800cae2:	68ba      	ldr	r2, [r7, #8]
 800cae4:	1a83      	subs	r3, r0, r2
 800cae6:	2b0f      	cmp	r3, #15
 800cae8:	ddde      	ble.n	800caa8 <_malloc_trim_r+0x3c>
 800caea:	4c06      	ldr	r4, [pc, #24]	; (800cb04 <_malloc_trim_r+0x98>)
 800caec:	4904      	ldr	r1, [pc, #16]	; (800cb00 <_malloc_trim_r+0x94>)
 800caee:	6824      	ldr	r4, [r4, #0]
 800caf0:	f043 0301 	orr.w	r3, r3, #1
 800caf4:	1b00      	subs	r0, r0, r4
 800caf6:	6053      	str	r3, [r2, #4]
 800caf8:	6008      	str	r0, [r1, #0]
 800cafa:	e7d5      	b.n	800caa8 <_malloc_trim_r+0x3c>
 800cafc:	200005d0 	.word	0x200005d0
 800cb00:	20001ed8 	.word	0x20001ed8
 800cb04:	200009dc 	.word	0x200009dc

0800cb08 <_free_r>:
 800cb08:	2900      	cmp	r1, #0
 800cb0a:	d045      	beq.n	800cb98 <_free_r+0x90>
 800cb0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb10:	460d      	mov	r5, r1
 800cb12:	4680      	mov	r8, r0
 800cb14:	f000 fe52 	bl	800d7bc <__malloc_lock>
 800cb18:	f855 7c04 	ldr.w	r7, [r5, #-4]
 800cb1c:	496a      	ldr	r1, [pc, #424]	; (800ccc8 <_free_r+0x1c0>)
 800cb1e:	f027 0301 	bic.w	r3, r7, #1
 800cb22:	f1a5 0408 	sub.w	r4, r5, #8
 800cb26:	18e2      	adds	r2, r4, r3
 800cb28:	688e      	ldr	r6, [r1, #8]
 800cb2a:	6850      	ldr	r0, [r2, #4]
 800cb2c:	42b2      	cmp	r2, r6
 800cb2e:	f020 0003 	bic.w	r0, r0, #3
 800cb32:	d062      	beq.n	800cbfa <_free_r+0xf2>
 800cb34:	07fe      	lsls	r6, r7, #31
 800cb36:	6050      	str	r0, [r2, #4]
 800cb38:	d40b      	bmi.n	800cb52 <_free_r+0x4a>
 800cb3a:	f855 7c08 	ldr.w	r7, [r5, #-8]
 800cb3e:	1be4      	subs	r4, r4, r7
 800cb40:	f101 0e08 	add.w	lr, r1, #8
 800cb44:	68a5      	ldr	r5, [r4, #8]
 800cb46:	4575      	cmp	r5, lr
 800cb48:	443b      	add	r3, r7
 800cb4a:	d06f      	beq.n	800cc2c <_free_r+0x124>
 800cb4c:	68e7      	ldr	r7, [r4, #12]
 800cb4e:	60ef      	str	r7, [r5, #12]
 800cb50:	60bd      	str	r5, [r7, #8]
 800cb52:	1815      	adds	r5, r2, r0
 800cb54:	686d      	ldr	r5, [r5, #4]
 800cb56:	07ed      	lsls	r5, r5, #31
 800cb58:	d542      	bpl.n	800cbe0 <_free_r+0xd8>
 800cb5a:	f043 0201 	orr.w	r2, r3, #1
 800cb5e:	6062      	str	r2, [r4, #4]
 800cb60:	50e3      	str	r3, [r4, r3]
 800cb62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb66:	d218      	bcs.n	800cb9a <_free_r+0x92>
 800cb68:	08db      	lsrs	r3, r3, #3
 800cb6a:	1c5a      	adds	r2, r3, #1
 800cb6c:	684d      	ldr	r5, [r1, #4]
 800cb6e:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
 800cb72:	60a7      	str	r7, [r4, #8]
 800cb74:	2001      	movs	r0, #1
 800cb76:	109b      	asrs	r3, r3, #2
 800cb78:	fa00 f303 	lsl.w	r3, r0, r3
 800cb7c:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
 800cb80:	431d      	orrs	r5, r3
 800cb82:	3808      	subs	r0, #8
 800cb84:	60e0      	str	r0, [r4, #12]
 800cb86:	604d      	str	r5, [r1, #4]
 800cb88:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
 800cb8c:	60fc      	str	r4, [r7, #12]
 800cb8e:	4640      	mov	r0, r8
 800cb90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb94:	f000 be14 	b.w	800d7c0 <__malloc_unlock>
 800cb98:	4770      	bx	lr
 800cb9a:	0a5a      	lsrs	r2, r3, #9
 800cb9c:	2a04      	cmp	r2, #4
 800cb9e:	d853      	bhi.n	800cc48 <_free_r+0x140>
 800cba0:	099a      	lsrs	r2, r3, #6
 800cba2:	f102 0739 	add.w	r7, r2, #57	; 0x39
 800cba6:	007f      	lsls	r7, r7, #1
 800cba8:	f102 0538 	add.w	r5, r2, #56	; 0x38
 800cbac:	eb01 0087 	add.w	r0, r1, r7, lsl #2
 800cbb0:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
 800cbb4:	4944      	ldr	r1, [pc, #272]	; (800ccc8 <_free_r+0x1c0>)
 800cbb6:	3808      	subs	r0, #8
 800cbb8:	4290      	cmp	r0, r2
 800cbba:	d04d      	beq.n	800cc58 <_free_r+0x150>
 800cbbc:	6851      	ldr	r1, [r2, #4]
 800cbbe:	f021 0103 	bic.w	r1, r1, #3
 800cbc2:	428b      	cmp	r3, r1
 800cbc4:	d202      	bcs.n	800cbcc <_free_r+0xc4>
 800cbc6:	6892      	ldr	r2, [r2, #8]
 800cbc8:	4290      	cmp	r0, r2
 800cbca:	d1f7      	bne.n	800cbbc <_free_r+0xb4>
 800cbcc:	68d0      	ldr	r0, [r2, #12]
 800cbce:	60e0      	str	r0, [r4, #12]
 800cbd0:	60a2      	str	r2, [r4, #8]
 800cbd2:	6084      	str	r4, [r0, #8]
 800cbd4:	60d4      	str	r4, [r2, #12]
 800cbd6:	4640      	mov	r0, r8
 800cbd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cbdc:	f000 bdf0 	b.w	800d7c0 <__malloc_unlock>
 800cbe0:	6895      	ldr	r5, [r2, #8]
 800cbe2:	4f3a      	ldr	r7, [pc, #232]	; (800cccc <_free_r+0x1c4>)
 800cbe4:	42bd      	cmp	r5, r7
 800cbe6:	4403      	add	r3, r0
 800cbe8:	d03f      	beq.n	800cc6a <_free_r+0x162>
 800cbea:	68d0      	ldr	r0, [r2, #12]
 800cbec:	60e8      	str	r0, [r5, #12]
 800cbee:	f043 0201 	orr.w	r2, r3, #1
 800cbf2:	6085      	str	r5, [r0, #8]
 800cbf4:	6062      	str	r2, [r4, #4]
 800cbf6:	50e3      	str	r3, [r4, r3]
 800cbf8:	e7b3      	b.n	800cb62 <_free_r+0x5a>
 800cbfa:	07ff      	lsls	r7, r7, #31
 800cbfc:	4403      	add	r3, r0
 800cbfe:	d407      	bmi.n	800cc10 <_free_r+0x108>
 800cc00:	f855 2c08 	ldr.w	r2, [r5, #-8]
 800cc04:	1aa4      	subs	r4, r4, r2
 800cc06:	4413      	add	r3, r2
 800cc08:	68a0      	ldr	r0, [r4, #8]
 800cc0a:	68e2      	ldr	r2, [r4, #12]
 800cc0c:	60c2      	str	r2, [r0, #12]
 800cc0e:	6090      	str	r0, [r2, #8]
 800cc10:	4a2f      	ldr	r2, [pc, #188]	; (800ccd0 <_free_r+0x1c8>)
 800cc12:	6812      	ldr	r2, [r2, #0]
 800cc14:	f043 0001 	orr.w	r0, r3, #1
 800cc18:	4293      	cmp	r3, r2
 800cc1a:	6060      	str	r0, [r4, #4]
 800cc1c:	608c      	str	r4, [r1, #8]
 800cc1e:	d3b6      	bcc.n	800cb8e <_free_r+0x86>
 800cc20:	4b2c      	ldr	r3, [pc, #176]	; (800ccd4 <_free_r+0x1cc>)
 800cc22:	4640      	mov	r0, r8
 800cc24:	6819      	ldr	r1, [r3, #0]
 800cc26:	f7ff ff21 	bl	800ca6c <_malloc_trim_r>
 800cc2a:	e7b0      	b.n	800cb8e <_free_r+0x86>
 800cc2c:	1811      	adds	r1, r2, r0
 800cc2e:	6849      	ldr	r1, [r1, #4]
 800cc30:	07c9      	lsls	r1, r1, #31
 800cc32:	d444      	bmi.n	800ccbe <_free_r+0x1b6>
 800cc34:	6891      	ldr	r1, [r2, #8]
 800cc36:	68d2      	ldr	r2, [r2, #12]
 800cc38:	60ca      	str	r2, [r1, #12]
 800cc3a:	4403      	add	r3, r0
 800cc3c:	f043 0001 	orr.w	r0, r3, #1
 800cc40:	6091      	str	r1, [r2, #8]
 800cc42:	6060      	str	r0, [r4, #4]
 800cc44:	50e3      	str	r3, [r4, r3]
 800cc46:	e7a2      	b.n	800cb8e <_free_r+0x86>
 800cc48:	2a14      	cmp	r2, #20
 800cc4a:	d817      	bhi.n	800cc7c <_free_r+0x174>
 800cc4c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 800cc50:	007f      	lsls	r7, r7, #1
 800cc52:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 800cc56:	e7a9      	b.n	800cbac <_free_r+0xa4>
 800cc58:	10aa      	asrs	r2, r5, #2
 800cc5a:	684b      	ldr	r3, [r1, #4]
 800cc5c:	2501      	movs	r5, #1
 800cc5e:	fa05 f202 	lsl.w	r2, r5, r2
 800cc62:	4313      	orrs	r3, r2
 800cc64:	604b      	str	r3, [r1, #4]
 800cc66:	4602      	mov	r2, r0
 800cc68:	e7b1      	b.n	800cbce <_free_r+0xc6>
 800cc6a:	f043 0201 	orr.w	r2, r3, #1
 800cc6e:	614c      	str	r4, [r1, #20]
 800cc70:	610c      	str	r4, [r1, #16]
 800cc72:	60e5      	str	r5, [r4, #12]
 800cc74:	60a5      	str	r5, [r4, #8]
 800cc76:	6062      	str	r2, [r4, #4]
 800cc78:	50e3      	str	r3, [r4, r3]
 800cc7a:	e788      	b.n	800cb8e <_free_r+0x86>
 800cc7c:	2a54      	cmp	r2, #84	; 0x54
 800cc7e:	d806      	bhi.n	800cc8e <_free_r+0x186>
 800cc80:	0b1a      	lsrs	r2, r3, #12
 800cc82:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 800cc86:	007f      	lsls	r7, r7, #1
 800cc88:	f102 056e 	add.w	r5, r2, #110	; 0x6e
 800cc8c:	e78e      	b.n	800cbac <_free_r+0xa4>
 800cc8e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800cc92:	d806      	bhi.n	800cca2 <_free_r+0x19a>
 800cc94:	0bda      	lsrs	r2, r3, #15
 800cc96:	f102 0778 	add.w	r7, r2, #120	; 0x78
 800cc9a:	007f      	lsls	r7, r7, #1
 800cc9c:	f102 0577 	add.w	r5, r2, #119	; 0x77
 800cca0:	e784      	b.n	800cbac <_free_r+0xa4>
 800cca2:	f240 5054 	movw	r0, #1364	; 0x554
 800cca6:	4282      	cmp	r2, r0
 800cca8:	d806      	bhi.n	800ccb8 <_free_r+0x1b0>
 800ccaa:	0c9a      	lsrs	r2, r3, #18
 800ccac:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 800ccb0:	007f      	lsls	r7, r7, #1
 800ccb2:	f102 057c 	add.w	r5, r2, #124	; 0x7c
 800ccb6:	e779      	b.n	800cbac <_free_r+0xa4>
 800ccb8:	27fe      	movs	r7, #254	; 0xfe
 800ccba:	257e      	movs	r5, #126	; 0x7e
 800ccbc:	e776      	b.n	800cbac <_free_r+0xa4>
 800ccbe:	f043 0201 	orr.w	r2, r3, #1
 800ccc2:	6062      	str	r2, [r4, #4]
 800ccc4:	50e3      	str	r3, [r4, r3]
 800ccc6:	e762      	b.n	800cb8e <_free_r+0x86>
 800ccc8:	200005d0 	.word	0x200005d0
 800cccc:	200005d8 	.word	0x200005d8
 800ccd0:	200009d8 	.word	0x200009d8
 800ccd4:	20001ed4 	.word	0x20001ed4

0800ccd8 <__sfvwrite_r>:
 800ccd8:	6893      	ldr	r3, [r2, #8]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d076      	beq.n	800cdcc <__sfvwrite_r+0xf4>
 800ccde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cce2:	898b      	ldrh	r3, [r1, #12]
 800cce4:	b085      	sub	sp, #20
 800cce6:	460c      	mov	r4, r1
 800cce8:	0719      	lsls	r1, r3, #28
 800ccea:	9001      	str	r0, [sp, #4]
 800ccec:	4616      	mov	r6, r2
 800ccee:	d529      	bpl.n	800cd44 <__sfvwrite_r+0x6c>
 800ccf0:	6922      	ldr	r2, [r4, #16]
 800ccf2:	b33a      	cbz	r2, 800cd44 <__sfvwrite_r+0x6c>
 800ccf4:	f003 0802 	and.w	r8, r3, #2
 800ccf8:	fa1f f088 	uxth.w	r0, r8
 800ccfc:	6835      	ldr	r5, [r6, #0]
 800ccfe:	2800      	cmp	r0, #0
 800cd00:	d02f      	beq.n	800cd62 <__sfvwrite_r+0x8a>
 800cd02:	f04f 0900 	mov.w	r9, #0
 800cd06:	4fb4      	ldr	r7, [pc, #720]	; (800cfd8 <__sfvwrite_r+0x300>)
 800cd08:	46c8      	mov	r8, r9
 800cd0a:	46b2      	mov	sl, r6
 800cd0c:	45b8      	cmp	r8, r7
 800cd0e:	4643      	mov	r3, r8
 800cd10:	464a      	mov	r2, r9
 800cd12:	bf28      	it	cs
 800cd14:	463b      	movcs	r3, r7
 800cd16:	9801      	ldr	r0, [sp, #4]
 800cd18:	f1b8 0f00 	cmp.w	r8, #0
 800cd1c:	d050      	beq.n	800cdc0 <__sfvwrite_r+0xe8>
 800cd1e:	69e1      	ldr	r1, [r4, #28]
 800cd20:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cd22:	47b0      	blx	r6
 800cd24:	2800      	cmp	r0, #0
 800cd26:	dd71      	ble.n	800ce0c <__sfvwrite_r+0x134>
 800cd28:	f8da 3008 	ldr.w	r3, [sl, #8]
 800cd2c:	1a1b      	subs	r3, r3, r0
 800cd2e:	4481      	add	r9, r0
 800cd30:	ebc0 0808 	rsb	r8, r0, r8
 800cd34:	f8ca 3008 	str.w	r3, [sl, #8]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d1e7      	bne.n	800cd0c <__sfvwrite_r+0x34>
 800cd3c:	2000      	movs	r0, #0
 800cd3e:	b005      	add	sp, #20
 800cd40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd44:	4621      	mov	r1, r4
 800cd46:	9801      	ldr	r0, [sp, #4]
 800cd48:	f7fe fd28 	bl	800b79c <__swsetup_r>
 800cd4c:	2800      	cmp	r0, #0
 800cd4e:	f040 813a 	bne.w	800cfc6 <__sfvwrite_r+0x2ee>
 800cd52:	89a3      	ldrh	r3, [r4, #12]
 800cd54:	6835      	ldr	r5, [r6, #0]
 800cd56:	f003 0802 	and.w	r8, r3, #2
 800cd5a:	fa1f f088 	uxth.w	r0, r8
 800cd5e:	2800      	cmp	r0, #0
 800cd60:	d1cf      	bne.n	800cd02 <__sfvwrite_r+0x2a>
 800cd62:	f013 0901 	ands.w	r9, r3, #1
 800cd66:	d15b      	bne.n	800ce20 <__sfvwrite_r+0x148>
 800cd68:	464f      	mov	r7, r9
 800cd6a:	9602      	str	r6, [sp, #8]
 800cd6c:	b31f      	cbz	r7, 800cdb6 <__sfvwrite_r+0xde>
 800cd6e:	059a      	lsls	r2, r3, #22
 800cd70:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800cd74:	d52c      	bpl.n	800cdd0 <__sfvwrite_r+0xf8>
 800cd76:	4547      	cmp	r7, r8
 800cd78:	46c2      	mov	sl, r8
 800cd7a:	f0c0 80a4 	bcc.w	800cec6 <__sfvwrite_r+0x1ee>
 800cd7e:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800cd82:	f040 80b1 	bne.w	800cee8 <__sfvwrite_r+0x210>
 800cd86:	6820      	ldr	r0, [r4, #0]
 800cd88:	4652      	mov	r2, sl
 800cd8a:	4649      	mov	r1, r9
 800cd8c:	f000 fcb2 	bl	800d6f4 <memmove>
 800cd90:	68a0      	ldr	r0, [r4, #8]
 800cd92:	6823      	ldr	r3, [r4, #0]
 800cd94:	ebc8 0000 	rsb	r0, r8, r0
 800cd98:	4453      	add	r3, sl
 800cd9a:	60a0      	str	r0, [r4, #8]
 800cd9c:	6023      	str	r3, [r4, #0]
 800cd9e:	4638      	mov	r0, r7
 800cda0:	9a02      	ldr	r2, [sp, #8]
 800cda2:	6893      	ldr	r3, [r2, #8]
 800cda4:	1a1b      	subs	r3, r3, r0
 800cda6:	4481      	add	r9, r0
 800cda8:	1a3f      	subs	r7, r7, r0
 800cdaa:	6093      	str	r3, [r2, #8]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d0c5      	beq.n	800cd3c <__sfvwrite_r+0x64>
 800cdb0:	89a3      	ldrh	r3, [r4, #12]
 800cdb2:	2f00      	cmp	r7, #0
 800cdb4:	d1db      	bne.n	800cd6e <__sfvwrite_r+0x96>
 800cdb6:	f8d5 9000 	ldr.w	r9, [r5]
 800cdba:	686f      	ldr	r7, [r5, #4]
 800cdbc:	3508      	adds	r5, #8
 800cdbe:	e7d5      	b.n	800cd6c <__sfvwrite_r+0x94>
 800cdc0:	f8d5 9000 	ldr.w	r9, [r5]
 800cdc4:	f8d5 8004 	ldr.w	r8, [r5, #4]
 800cdc8:	3508      	adds	r5, #8
 800cdca:	e79f      	b.n	800cd0c <__sfvwrite_r+0x34>
 800cdcc:	2000      	movs	r0, #0
 800cdce:	4770      	bx	lr
 800cdd0:	6820      	ldr	r0, [r4, #0]
 800cdd2:	6923      	ldr	r3, [r4, #16]
 800cdd4:	4298      	cmp	r0, r3
 800cdd6:	d803      	bhi.n	800cde0 <__sfvwrite_r+0x108>
 800cdd8:	6961      	ldr	r1, [r4, #20]
 800cdda:	428f      	cmp	r7, r1
 800cddc:	f080 80b7 	bcs.w	800cf4e <__sfvwrite_r+0x276>
 800cde0:	45b8      	cmp	r8, r7
 800cde2:	bf28      	it	cs
 800cde4:	46b8      	movcs	r8, r7
 800cde6:	4642      	mov	r2, r8
 800cde8:	4649      	mov	r1, r9
 800cdea:	f000 fc83 	bl	800d6f4 <memmove>
 800cdee:	68a3      	ldr	r3, [r4, #8]
 800cdf0:	6822      	ldr	r2, [r4, #0]
 800cdf2:	ebc8 0303 	rsb	r3, r8, r3
 800cdf6:	4442      	add	r2, r8
 800cdf8:	60a3      	str	r3, [r4, #8]
 800cdfa:	6022      	str	r2, [r4, #0]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d149      	bne.n	800ce94 <__sfvwrite_r+0x1bc>
 800ce00:	4621      	mov	r1, r4
 800ce02:	9801      	ldr	r0, [sp, #4]
 800ce04:	f7ff fd94 	bl	800c930 <_fflush_r>
 800ce08:	2800      	cmp	r0, #0
 800ce0a:	d043      	beq.n	800ce94 <__sfvwrite_r+0x1bc>
 800ce0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce14:	f04f 30ff 	mov.w	r0, #4294967295
 800ce18:	81a3      	strh	r3, [r4, #12]
 800ce1a:	b005      	add	sp, #20
 800ce1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce20:	4680      	mov	r8, r0
 800ce22:	9002      	str	r0, [sp, #8]
 800ce24:	4682      	mov	sl, r0
 800ce26:	4681      	mov	r9, r0
 800ce28:	f1b9 0f00 	cmp.w	r9, #0
 800ce2c:	d02a      	beq.n	800ce84 <__sfvwrite_r+0x1ac>
 800ce2e:	9b02      	ldr	r3, [sp, #8]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d04c      	beq.n	800cece <__sfvwrite_r+0x1f6>
 800ce34:	6820      	ldr	r0, [r4, #0]
 800ce36:	6923      	ldr	r3, [r4, #16]
 800ce38:	6962      	ldr	r2, [r4, #20]
 800ce3a:	45c8      	cmp	r8, r9
 800ce3c:	46c3      	mov	fp, r8
 800ce3e:	bf28      	it	cs
 800ce40:	46cb      	movcs	fp, r9
 800ce42:	4298      	cmp	r0, r3
 800ce44:	465f      	mov	r7, fp
 800ce46:	d904      	bls.n	800ce52 <__sfvwrite_r+0x17a>
 800ce48:	68a3      	ldr	r3, [r4, #8]
 800ce4a:	4413      	add	r3, r2
 800ce4c:	459b      	cmp	fp, r3
 800ce4e:	f300 8090 	bgt.w	800cf72 <__sfvwrite_r+0x29a>
 800ce52:	4593      	cmp	fp, r2
 800ce54:	db20      	blt.n	800ce98 <__sfvwrite_r+0x1c0>
 800ce56:	4613      	mov	r3, r2
 800ce58:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800ce5a:	69e1      	ldr	r1, [r4, #28]
 800ce5c:	9801      	ldr	r0, [sp, #4]
 800ce5e:	4652      	mov	r2, sl
 800ce60:	47b8      	blx	r7
 800ce62:	1e07      	subs	r7, r0, #0
 800ce64:	ddd2      	ble.n	800ce0c <__sfvwrite_r+0x134>
 800ce66:	ebb8 0807 	subs.w	r8, r8, r7
 800ce6a:	d023      	beq.n	800ceb4 <__sfvwrite_r+0x1dc>
 800ce6c:	68b3      	ldr	r3, [r6, #8]
 800ce6e:	1bdb      	subs	r3, r3, r7
 800ce70:	44ba      	add	sl, r7
 800ce72:	ebc7 0909 	rsb	r9, r7, r9
 800ce76:	60b3      	str	r3, [r6, #8]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	f43f af5f 	beq.w	800cd3c <__sfvwrite_r+0x64>
 800ce7e:	f1b9 0f00 	cmp.w	r9, #0
 800ce82:	d1d4      	bne.n	800ce2e <__sfvwrite_r+0x156>
 800ce84:	2300      	movs	r3, #0
 800ce86:	f8d5 a000 	ldr.w	sl, [r5]
 800ce8a:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800ce8e:	9302      	str	r3, [sp, #8]
 800ce90:	3508      	adds	r5, #8
 800ce92:	e7c9      	b.n	800ce28 <__sfvwrite_r+0x150>
 800ce94:	4640      	mov	r0, r8
 800ce96:	e783      	b.n	800cda0 <__sfvwrite_r+0xc8>
 800ce98:	465a      	mov	r2, fp
 800ce9a:	4651      	mov	r1, sl
 800ce9c:	f000 fc2a 	bl	800d6f4 <memmove>
 800cea0:	68a2      	ldr	r2, [r4, #8]
 800cea2:	6823      	ldr	r3, [r4, #0]
 800cea4:	ebcb 0202 	rsb	r2, fp, r2
 800cea8:	445b      	add	r3, fp
 800ceaa:	ebb8 0807 	subs.w	r8, r8, r7
 800ceae:	60a2      	str	r2, [r4, #8]
 800ceb0:	6023      	str	r3, [r4, #0]
 800ceb2:	d1db      	bne.n	800ce6c <__sfvwrite_r+0x194>
 800ceb4:	4621      	mov	r1, r4
 800ceb6:	9801      	ldr	r0, [sp, #4]
 800ceb8:	f7ff fd3a 	bl	800c930 <_fflush_r>
 800cebc:	2800      	cmp	r0, #0
 800cebe:	d1a5      	bne.n	800ce0c <__sfvwrite_r+0x134>
 800cec0:	f8cd 8008 	str.w	r8, [sp, #8]
 800cec4:	e7d2      	b.n	800ce6c <__sfvwrite_r+0x194>
 800cec6:	6820      	ldr	r0, [r4, #0]
 800cec8:	46b8      	mov	r8, r7
 800ceca:	46ba      	mov	sl, r7
 800cecc:	e75c      	b.n	800cd88 <__sfvwrite_r+0xb0>
 800cece:	464a      	mov	r2, r9
 800ced0:	210a      	movs	r1, #10
 800ced2:	4650      	mov	r0, sl
 800ced4:	f7f3 fcc4 	bl	8000860 <memchr>
 800ced8:	2800      	cmp	r0, #0
 800ceda:	d06f      	beq.n	800cfbc <__sfvwrite_r+0x2e4>
 800cedc:	3001      	adds	r0, #1
 800cede:	2301      	movs	r3, #1
 800cee0:	ebca 0800 	rsb	r8, sl, r0
 800cee4:	9302      	str	r3, [sp, #8]
 800cee6:	e7a5      	b.n	800ce34 <__sfvwrite_r+0x15c>
 800cee8:	6962      	ldr	r2, [r4, #20]
 800ceea:	6820      	ldr	r0, [r4, #0]
 800ceec:	6921      	ldr	r1, [r4, #16]
 800ceee:	eb02 0842 	add.w	r8, r2, r2, lsl #1
 800cef2:	ebc1 0a00 	rsb	sl, r1, r0
 800cef6:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
 800cefa:	f10a 0001 	add.w	r0, sl, #1
 800cefe:	ea4f 0868 	mov.w	r8, r8, asr #1
 800cf02:	4438      	add	r0, r7
 800cf04:	4540      	cmp	r0, r8
 800cf06:	4642      	mov	r2, r8
 800cf08:	bf84      	itt	hi
 800cf0a:	4680      	movhi	r8, r0
 800cf0c:	4642      	movhi	r2, r8
 800cf0e:	055b      	lsls	r3, r3, #21
 800cf10:	d542      	bpl.n	800cf98 <__sfvwrite_r+0x2c0>
 800cf12:	4611      	mov	r1, r2
 800cf14:	9801      	ldr	r0, [sp, #4]
 800cf16:	f000 f91f 	bl	800d158 <_malloc_r>
 800cf1a:	4683      	mov	fp, r0
 800cf1c:	2800      	cmp	r0, #0
 800cf1e:	d055      	beq.n	800cfcc <__sfvwrite_r+0x2f4>
 800cf20:	4652      	mov	r2, sl
 800cf22:	6921      	ldr	r1, [r4, #16]
 800cf24:	f7f3 fb7e 	bl	8000624 <memcpy>
 800cf28:	89a3      	ldrh	r3, [r4, #12]
 800cf2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cf2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf32:	81a3      	strh	r3, [r4, #12]
 800cf34:	ebca 0308 	rsb	r3, sl, r8
 800cf38:	eb0b 000a 	add.w	r0, fp, sl
 800cf3c:	f8c4 8014 	str.w	r8, [r4, #20]
 800cf40:	f8c4 b010 	str.w	fp, [r4, #16]
 800cf44:	6020      	str	r0, [r4, #0]
 800cf46:	60a3      	str	r3, [r4, #8]
 800cf48:	46b8      	mov	r8, r7
 800cf4a:	46ba      	mov	sl, r7
 800cf4c:	e71c      	b.n	800cd88 <__sfvwrite_r+0xb0>
 800cf4e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800cf52:	42bb      	cmp	r3, r7
 800cf54:	bf28      	it	cs
 800cf56:	463b      	movcs	r3, r7
 800cf58:	464a      	mov	r2, r9
 800cf5a:	fb93 f3f1 	sdiv	r3, r3, r1
 800cf5e:	9801      	ldr	r0, [sp, #4]
 800cf60:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cf62:	fb01 f303 	mul.w	r3, r1, r3
 800cf66:	69e1      	ldr	r1, [r4, #28]
 800cf68:	47b0      	blx	r6
 800cf6a:	2800      	cmp	r0, #0
 800cf6c:	f73f af18 	bgt.w	800cda0 <__sfvwrite_r+0xc8>
 800cf70:	e74c      	b.n	800ce0c <__sfvwrite_r+0x134>
 800cf72:	461a      	mov	r2, r3
 800cf74:	4651      	mov	r1, sl
 800cf76:	9303      	str	r3, [sp, #12]
 800cf78:	f000 fbbc 	bl	800d6f4 <memmove>
 800cf7c:	6822      	ldr	r2, [r4, #0]
 800cf7e:	9b03      	ldr	r3, [sp, #12]
 800cf80:	9801      	ldr	r0, [sp, #4]
 800cf82:	441a      	add	r2, r3
 800cf84:	6022      	str	r2, [r4, #0]
 800cf86:	4621      	mov	r1, r4
 800cf88:	f7ff fcd2 	bl	800c930 <_fflush_r>
 800cf8c:	9b03      	ldr	r3, [sp, #12]
 800cf8e:	2800      	cmp	r0, #0
 800cf90:	f47f af3c 	bne.w	800ce0c <__sfvwrite_r+0x134>
 800cf94:	461f      	mov	r7, r3
 800cf96:	e766      	b.n	800ce66 <__sfvwrite_r+0x18e>
 800cf98:	9801      	ldr	r0, [sp, #4]
 800cf9a:	f000 ff21 	bl	800dde0 <_realloc_r>
 800cf9e:	4683      	mov	fp, r0
 800cfa0:	2800      	cmp	r0, #0
 800cfa2:	d1c7      	bne.n	800cf34 <__sfvwrite_r+0x25c>
 800cfa4:	9d01      	ldr	r5, [sp, #4]
 800cfa6:	6921      	ldr	r1, [r4, #16]
 800cfa8:	4628      	mov	r0, r5
 800cfaa:	f7ff fdad 	bl	800cb08 <_free_r>
 800cfae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfb2:	220c      	movs	r2, #12
 800cfb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cfb8:	602a      	str	r2, [r5, #0]
 800cfba:	e729      	b.n	800ce10 <__sfvwrite_r+0x138>
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	f109 0801 	add.w	r8, r9, #1
 800cfc2:	9302      	str	r3, [sp, #8]
 800cfc4:	e736      	b.n	800ce34 <__sfvwrite_r+0x15c>
 800cfc6:	f04f 30ff 	mov.w	r0, #4294967295
 800cfca:	e6b8      	b.n	800cd3e <__sfvwrite_r+0x66>
 800cfcc:	9a01      	ldr	r2, [sp, #4]
 800cfce:	230c      	movs	r3, #12
 800cfd0:	6013      	str	r3, [r2, #0]
 800cfd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfd6:	e71b      	b.n	800ce10 <__sfvwrite_r+0x138>
 800cfd8:	7ffffc00 	.word	0x7ffffc00

0800cfdc <_fwalk_reent>:
 800cfdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfe0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 800cfe4:	d01f      	beq.n	800d026 <_fwalk_reent+0x4a>
 800cfe6:	4688      	mov	r8, r1
 800cfe8:	4606      	mov	r6, r0
 800cfea:	f04f 0900 	mov.w	r9, #0
 800cfee:	687d      	ldr	r5, [r7, #4]
 800cff0:	68bc      	ldr	r4, [r7, #8]
 800cff2:	3d01      	subs	r5, #1
 800cff4:	d411      	bmi.n	800d01a <_fwalk_reent+0x3e>
 800cff6:	89a3      	ldrh	r3, [r4, #12]
 800cff8:	2b01      	cmp	r3, #1
 800cffa:	f105 35ff 	add.w	r5, r5, #4294967295
 800cffe:	d908      	bls.n	800d012 <_fwalk_reent+0x36>
 800d000:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800d004:	3301      	adds	r3, #1
 800d006:	4621      	mov	r1, r4
 800d008:	4630      	mov	r0, r6
 800d00a:	d002      	beq.n	800d012 <_fwalk_reent+0x36>
 800d00c:	47c0      	blx	r8
 800d00e:	ea49 0900 	orr.w	r9, r9, r0
 800d012:	1c6b      	adds	r3, r5, #1
 800d014:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800d018:	d1ed      	bne.n	800cff6 <_fwalk_reent+0x1a>
 800d01a:	683f      	ldr	r7, [r7, #0]
 800d01c:	2f00      	cmp	r7, #0
 800d01e:	d1e6      	bne.n	800cfee <_fwalk_reent+0x12>
 800d020:	4648      	mov	r0, r9
 800d022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d026:	46b9      	mov	r9, r7
 800d028:	4648      	mov	r0, r9
 800d02a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d02e:	bf00      	nop

0800d030 <__locale_mb_cur_max>:
 800d030:	4b04      	ldr	r3, [pc, #16]	; (800d044 <__locale_mb_cur_max+0x14>)
 800d032:	4a05      	ldr	r2, [pc, #20]	; (800d048 <__locale_mb_cur_max+0x18>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d038:	2b00      	cmp	r3, #0
 800d03a:	bf08      	it	eq
 800d03c:	4613      	moveq	r3, r2
 800d03e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800d042:	4770      	bx	lr
 800d044:	20000460 	.word	0x20000460
 800d048:	20000464 	.word	0x20000464

0800d04c <__locale_ctype_ptr_l>:
 800d04c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800d050:	4770      	bx	lr
 800d052:	bf00      	nop

0800d054 <_localeconv_r>:
 800d054:	4a04      	ldr	r2, [pc, #16]	; (800d068 <_localeconv_r+0x14>)
 800d056:	4b05      	ldr	r3, [pc, #20]	; (800d06c <_localeconv_r+0x18>)
 800d058:	6812      	ldr	r2, [r2, #0]
 800d05a:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800d05c:	2800      	cmp	r0, #0
 800d05e:	bf08      	it	eq
 800d060:	4618      	moveq	r0, r3
 800d062:	30f0      	adds	r0, #240	; 0xf0
 800d064:	4770      	bx	lr
 800d066:	bf00      	nop
 800d068:	20000460 	.word	0x20000460
 800d06c:	20000464 	.word	0x20000464

0800d070 <__swhatbuf_r>:
 800d070:	b570      	push	{r4, r5, r6, lr}
 800d072:	460d      	mov	r5, r1
 800d074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d078:	2900      	cmp	r1, #0
 800d07a:	b090      	sub	sp, #64	; 0x40
 800d07c:	4614      	mov	r4, r2
 800d07e:	461e      	mov	r6, r3
 800d080:	db14      	blt.n	800d0ac <__swhatbuf_r+0x3c>
 800d082:	aa01      	add	r2, sp, #4
 800d084:	f001 fabe 	bl	800e604 <_fstat_r>
 800d088:	2800      	cmp	r0, #0
 800d08a:	db0f      	blt.n	800d0ac <__swhatbuf_r+0x3c>
 800d08c:	9a02      	ldr	r2, [sp, #8]
 800d08e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d092:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
 800d096:	fab2 f282 	clz	r2, r2
 800d09a:	0952      	lsrs	r2, r2, #5
 800d09c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d0a0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800d0a4:	6032      	str	r2, [r6, #0]
 800d0a6:	6023      	str	r3, [r4, #0]
 800d0a8:	b010      	add	sp, #64	; 0x40
 800d0aa:	bd70      	pop	{r4, r5, r6, pc}
 800d0ac:	89a8      	ldrh	r0, [r5, #12]
 800d0ae:	f000 0080 	and.w	r0, r0, #128	; 0x80
 800d0b2:	b282      	uxth	r2, r0
 800d0b4:	2000      	movs	r0, #0
 800d0b6:	6030      	str	r0, [r6, #0]
 800d0b8:	b11a      	cbz	r2, 800d0c2 <__swhatbuf_r+0x52>
 800d0ba:	2340      	movs	r3, #64	; 0x40
 800d0bc:	6023      	str	r3, [r4, #0]
 800d0be:	b010      	add	sp, #64	; 0x40
 800d0c0:	bd70      	pop	{r4, r5, r6, pc}
 800d0c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d0c6:	4610      	mov	r0, r2
 800d0c8:	6023      	str	r3, [r4, #0]
 800d0ca:	b010      	add	sp, #64	; 0x40
 800d0cc:	bd70      	pop	{r4, r5, r6, pc}
 800d0ce:	bf00      	nop

0800d0d0 <__smakebuf_r>:
 800d0d0:	898a      	ldrh	r2, [r1, #12]
 800d0d2:	0792      	lsls	r2, r2, #30
 800d0d4:	460b      	mov	r3, r1
 800d0d6:	d506      	bpl.n	800d0e6 <__smakebuf_r+0x16>
 800d0d8:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d0dc:	2101      	movs	r1, #1
 800d0de:	601a      	str	r2, [r3, #0]
 800d0e0:	611a      	str	r2, [r3, #16]
 800d0e2:	6159      	str	r1, [r3, #20]
 800d0e4:	4770      	bx	lr
 800d0e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0e8:	b083      	sub	sp, #12
 800d0ea:	ab01      	add	r3, sp, #4
 800d0ec:	466a      	mov	r2, sp
 800d0ee:	460c      	mov	r4, r1
 800d0f0:	4605      	mov	r5, r0
 800d0f2:	f7ff ffbd 	bl	800d070 <__swhatbuf_r>
 800d0f6:	9900      	ldr	r1, [sp, #0]
 800d0f8:	4606      	mov	r6, r0
 800d0fa:	4628      	mov	r0, r5
 800d0fc:	f000 f82c 	bl	800d158 <_malloc_r>
 800d100:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d104:	b1d0      	cbz	r0, 800d13c <__smakebuf_r+0x6c>
 800d106:	9a01      	ldr	r2, [sp, #4]
 800d108:	4f12      	ldr	r7, [pc, #72]	; (800d154 <__smakebuf_r+0x84>)
 800d10a:	9900      	ldr	r1, [sp, #0]
 800d10c:	63ef      	str	r7, [r5, #60]	; 0x3c
 800d10e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d112:	81a3      	strh	r3, [r4, #12]
 800d114:	6020      	str	r0, [r4, #0]
 800d116:	6120      	str	r0, [r4, #16]
 800d118:	6161      	str	r1, [r4, #20]
 800d11a:	b91a      	cbnz	r2, 800d124 <__smakebuf_r+0x54>
 800d11c:	4333      	orrs	r3, r6
 800d11e:	81a3      	strh	r3, [r4, #12]
 800d120:	b003      	add	sp, #12
 800d122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d124:	4628      	mov	r0, r5
 800d126:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d12a:	f001 fa7f 	bl	800e62c <_isatty_r>
 800d12e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d132:	2800      	cmp	r0, #0
 800d134:	d0f2      	beq.n	800d11c <__smakebuf_r+0x4c>
 800d136:	f043 0301 	orr.w	r3, r3, #1
 800d13a:	e7ef      	b.n	800d11c <__smakebuf_r+0x4c>
 800d13c:	059a      	lsls	r2, r3, #22
 800d13e:	d4ef      	bmi.n	800d120 <__smakebuf_r+0x50>
 800d140:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d144:	f043 0302 	orr.w	r3, r3, #2
 800d148:	2101      	movs	r1, #1
 800d14a:	81a3      	strh	r3, [r4, #12]
 800d14c:	6022      	str	r2, [r4, #0]
 800d14e:	6122      	str	r2, [r4, #16]
 800d150:	6161      	str	r1, [r4, #20]
 800d152:	e7e5      	b.n	800d120 <__smakebuf_r+0x50>
 800d154:	0800c95d 	.word	0x0800c95d

0800d158 <_malloc_r>:
 800d158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d15c:	f101 050b 	add.w	r5, r1, #11
 800d160:	2d16      	cmp	r5, #22
 800d162:	b083      	sub	sp, #12
 800d164:	4606      	mov	r6, r0
 800d166:	f240 809f 	bls.w	800d2a8 <_malloc_r+0x150>
 800d16a:	f035 0507 	bics.w	r5, r5, #7
 800d16e:	f100 80bf 	bmi.w	800d2f0 <_malloc_r+0x198>
 800d172:	42a9      	cmp	r1, r5
 800d174:	f200 80bc 	bhi.w	800d2f0 <_malloc_r+0x198>
 800d178:	f000 fb20 	bl	800d7bc <__malloc_lock>
 800d17c:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 800d180:	f0c0 829c 	bcc.w	800d6bc <_malloc_r+0x564>
 800d184:	0a6b      	lsrs	r3, r5, #9
 800d186:	f000 80ba 	beq.w	800d2fe <_malloc_r+0x1a6>
 800d18a:	2b04      	cmp	r3, #4
 800d18c:	f200 8183 	bhi.w	800d496 <_malloc_r+0x33e>
 800d190:	09a8      	lsrs	r0, r5, #6
 800d192:	f100 0e39 	add.w	lr, r0, #57	; 0x39
 800d196:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800d19a:	3038      	adds	r0, #56	; 0x38
 800d19c:	4fc4      	ldr	r7, [pc, #784]	; (800d4b0 <_malloc_r+0x358>)
 800d19e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800d1a2:	f1a3 0108 	sub.w	r1, r3, #8
 800d1a6:	685c      	ldr	r4, [r3, #4]
 800d1a8:	42a1      	cmp	r1, r4
 800d1aa:	d107      	bne.n	800d1bc <_malloc_r+0x64>
 800d1ac:	e0ac      	b.n	800d308 <_malloc_r+0x1b0>
 800d1ae:	2a00      	cmp	r2, #0
 800d1b0:	f280 80ac 	bge.w	800d30c <_malloc_r+0x1b4>
 800d1b4:	68e4      	ldr	r4, [r4, #12]
 800d1b6:	42a1      	cmp	r1, r4
 800d1b8:	f000 80a6 	beq.w	800d308 <_malloc_r+0x1b0>
 800d1bc:	6863      	ldr	r3, [r4, #4]
 800d1be:	f023 0303 	bic.w	r3, r3, #3
 800d1c2:	1b5a      	subs	r2, r3, r5
 800d1c4:	2a0f      	cmp	r2, #15
 800d1c6:	ddf2      	ble.n	800d1ae <_malloc_r+0x56>
 800d1c8:	49b9      	ldr	r1, [pc, #740]	; (800d4b0 <_malloc_r+0x358>)
 800d1ca:	693c      	ldr	r4, [r7, #16]
 800d1cc:	f101 0e08 	add.w	lr, r1, #8
 800d1d0:	4574      	cmp	r4, lr
 800d1d2:	f000 81b3 	beq.w	800d53c <_malloc_r+0x3e4>
 800d1d6:	6863      	ldr	r3, [r4, #4]
 800d1d8:	f023 0303 	bic.w	r3, r3, #3
 800d1dc:	1b5a      	subs	r2, r3, r5
 800d1de:	2a0f      	cmp	r2, #15
 800d1e0:	f300 8199 	bgt.w	800d516 <_malloc_r+0x3be>
 800d1e4:	2a00      	cmp	r2, #0
 800d1e6:	f8c1 e014 	str.w	lr, [r1, #20]
 800d1ea:	f8c1 e010 	str.w	lr, [r1, #16]
 800d1ee:	f280 809e 	bge.w	800d32e <_malloc_r+0x1d6>
 800d1f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d1f6:	f080 8167 	bcs.w	800d4c8 <_malloc_r+0x370>
 800d1fa:	08db      	lsrs	r3, r3, #3
 800d1fc:	f103 0c01 	add.w	ip, r3, #1
 800d200:	2201      	movs	r2, #1
 800d202:	109b      	asrs	r3, r3, #2
 800d204:	fa02 f303 	lsl.w	r3, r2, r3
 800d208:	684a      	ldr	r2, [r1, #4]
 800d20a:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
 800d20e:	f8c4 8008 	str.w	r8, [r4, #8]
 800d212:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
 800d216:	431a      	orrs	r2, r3
 800d218:	f1a9 0308 	sub.w	r3, r9, #8
 800d21c:	60e3      	str	r3, [r4, #12]
 800d21e:	604a      	str	r2, [r1, #4]
 800d220:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
 800d224:	f8c8 400c 	str.w	r4, [r8, #12]
 800d228:	1083      	asrs	r3, r0, #2
 800d22a:	2401      	movs	r4, #1
 800d22c:	409c      	lsls	r4, r3
 800d22e:	4294      	cmp	r4, r2
 800d230:	f200 808a 	bhi.w	800d348 <_malloc_r+0x1f0>
 800d234:	4214      	tst	r4, r2
 800d236:	d106      	bne.n	800d246 <_malloc_r+0xee>
 800d238:	f020 0003 	bic.w	r0, r0, #3
 800d23c:	0064      	lsls	r4, r4, #1
 800d23e:	4214      	tst	r4, r2
 800d240:	f100 0004 	add.w	r0, r0, #4
 800d244:	d0fa      	beq.n	800d23c <_malloc_r+0xe4>
 800d246:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 800d24a:	46cc      	mov	ip, r9
 800d24c:	4680      	mov	r8, r0
 800d24e:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800d252:	458c      	cmp	ip, r1
 800d254:	d107      	bne.n	800d266 <_malloc_r+0x10e>
 800d256:	e173      	b.n	800d540 <_malloc_r+0x3e8>
 800d258:	2a00      	cmp	r2, #0
 800d25a:	f280 8181 	bge.w	800d560 <_malloc_r+0x408>
 800d25e:	68c9      	ldr	r1, [r1, #12]
 800d260:	458c      	cmp	ip, r1
 800d262:	f000 816d 	beq.w	800d540 <_malloc_r+0x3e8>
 800d266:	684b      	ldr	r3, [r1, #4]
 800d268:	f023 0303 	bic.w	r3, r3, #3
 800d26c:	1b5a      	subs	r2, r3, r5
 800d26e:	2a0f      	cmp	r2, #15
 800d270:	ddf2      	ble.n	800d258 <_malloc_r+0x100>
 800d272:	460c      	mov	r4, r1
 800d274:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800d278:	f854 8f08 	ldr.w	r8, [r4, #8]!
 800d27c:	194b      	adds	r3, r1, r5
 800d27e:	f045 0501 	orr.w	r5, r5, #1
 800d282:	604d      	str	r5, [r1, #4]
 800d284:	f042 0101 	orr.w	r1, r2, #1
 800d288:	f8c8 c00c 	str.w	ip, [r8, #12]
 800d28c:	4630      	mov	r0, r6
 800d28e:	f8cc 8008 	str.w	r8, [ip, #8]
 800d292:	617b      	str	r3, [r7, #20]
 800d294:	613b      	str	r3, [r7, #16]
 800d296:	f8c3 e00c 	str.w	lr, [r3, #12]
 800d29a:	f8c3 e008 	str.w	lr, [r3, #8]
 800d29e:	6059      	str	r1, [r3, #4]
 800d2a0:	509a      	str	r2, [r3, r2]
 800d2a2:	f000 fa8d 	bl	800d7c0 <__malloc_unlock>
 800d2a6:	e01f      	b.n	800d2e8 <_malloc_r+0x190>
 800d2a8:	2910      	cmp	r1, #16
 800d2aa:	d821      	bhi.n	800d2f0 <_malloc_r+0x198>
 800d2ac:	f000 fa86 	bl	800d7bc <__malloc_lock>
 800d2b0:	2510      	movs	r5, #16
 800d2b2:	2306      	movs	r3, #6
 800d2b4:	2002      	movs	r0, #2
 800d2b6:	4f7e      	ldr	r7, [pc, #504]	; (800d4b0 <_malloc_r+0x358>)
 800d2b8:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800d2bc:	f1a3 0208 	sub.w	r2, r3, #8
 800d2c0:	685c      	ldr	r4, [r3, #4]
 800d2c2:	4294      	cmp	r4, r2
 800d2c4:	f000 8145 	beq.w	800d552 <_malloc_r+0x3fa>
 800d2c8:	6863      	ldr	r3, [r4, #4]
 800d2ca:	68e1      	ldr	r1, [r4, #12]
 800d2cc:	68a5      	ldr	r5, [r4, #8]
 800d2ce:	f023 0303 	bic.w	r3, r3, #3
 800d2d2:	4423      	add	r3, r4
 800d2d4:	4630      	mov	r0, r6
 800d2d6:	685a      	ldr	r2, [r3, #4]
 800d2d8:	60e9      	str	r1, [r5, #12]
 800d2da:	f042 0201 	orr.w	r2, r2, #1
 800d2de:	608d      	str	r5, [r1, #8]
 800d2e0:	605a      	str	r2, [r3, #4]
 800d2e2:	f000 fa6d 	bl	800d7c0 <__malloc_unlock>
 800d2e6:	3408      	adds	r4, #8
 800d2e8:	4620      	mov	r0, r4
 800d2ea:	b003      	add	sp, #12
 800d2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2f0:	2400      	movs	r4, #0
 800d2f2:	230c      	movs	r3, #12
 800d2f4:	4620      	mov	r0, r4
 800d2f6:	6033      	str	r3, [r6, #0]
 800d2f8:	b003      	add	sp, #12
 800d2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2fe:	2380      	movs	r3, #128	; 0x80
 800d300:	f04f 0e40 	mov.w	lr, #64	; 0x40
 800d304:	203f      	movs	r0, #63	; 0x3f
 800d306:	e749      	b.n	800d19c <_malloc_r+0x44>
 800d308:	4670      	mov	r0, lr
 800d30a:	e75d      	b.n	800d1c8 <_malloc_r+0x70>
 800d30c:	4423      	add	r3, r4
 800d30e:	68e1      	ldr	r1, [r4, #12]
 800d310:	685a      	ldr	r2, [r3, #4]
 800d312:	68a5      	ldr	r5, [r4, #8]
 800d314:	f042 0201 	orr.w	r2, r2, #1
 800d318:	60e9      	str	r1, [r5, #12]
 800d31a:	4630      	mov	r0, r6
 800d31c:	608d      	str	r5, [r1, #8]
 800d31e:	605a      	str	r2, [r3, #4]
 800d320:	f000 fa4e 	bl	800d7c0 <__malloc_unlock>
 800d324:	3408      	adds	r4, #8
 800d326:	4620      	mov	r0, r4
 800d328:	b003      	add	sp, #12
 800d32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d32e:	4423      	add	r3, r4
 800d330:	4630      	mov	r0, r6
 800d332:	685a      	ldr	r2, [r3, #4]
 800d334:	f042 0201 	orr.w	r2, r2, #1
 800d338:	605a      	str	r2, [r3, #4]
 800d33a:	f000 fa41 	bl	800d7c0 <__malloc_unlock>
 800d33e:	3408      	adds	r4, #8
 800d340:	4620      	mov	r0, r4
 800d342:	b003      	add	sp, #12
 800d344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d348:	68bc      	ldr	r4, [r7, #8]
 800d34a:	6863      	ldr	r3, [r4, #4]
 800d34c:	f023 0803 	bic.w	r8, r3, #3
 800d350:	45a8      	cmp	r8, r5
 800d352:	d304      	bcc.n	800d35e <_malloc_r+0x206>
 800d354:	ebc5 0308 	rsb	r3, r5, r8
 800d358:	2b0f      	cmp	r3, #15
 800d35a:	f300 808c 	bgt.w	800d476 <_malloc_r+0x31e>
 800d35e:	4b55      	ldr	r3, [pc, #340]	; (800d4b4 <_malloc_r+0x35c>)
 800d360:	f8df 9160 	ldr.w	r9, [pc, #352]	; 800d4c4 <_malloc_r+0x36c>
 800d364:	681a      	ldr	r2, [r3, #0]
 800d366:	f8d9 3000 	ldr.w	r3, [r9]
 800d36a:	3301      	adds	r3, #1
 800d36c:	442a      	add	r2, r5
 800d36e:	eb04 0a08 	add.w	sl, r4, r8
 800d372:	f000 8160 	beq.w	800d636 <_malloc_r+0x4de>
 800d376:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d37a:	320f      	adds	r2, #15
 800d37c:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800d380:	f022 020f 	bic.w	r2, r2, #15
 800d384:	4611      	mov	r1, r2
 800d386:	4630      	mov	r0, r6
 800d388:	9201      	str	r2, [sp, #4]
 800d38a:	f000 ff19 	bl	800e1c0 <_sbrk_r>
 800d38e:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d392:	4683      	mov	fp, r0
 800d394:	9a01      	ldr	r2, [sp, #4]
 800d396:	f000 8158 	beq.w	800d64a <_malloc_r+0x4f2>
 800d39a:	4582      	cmp	sl, r0
 800d39c:	f200 80fc 	bhi.w	800d598 <_malloc_r+0x440>
 800d3a0:	4b45      	ldr	r3, [pc, #276]	; (800d4b8 <_malloc_r+0x360>)
 800d3a2:	6819      	ldr	r1, [r3, #0]
 800d3a4:	45da      	cmp	sl, fp
 800d3a6:	4411      	add	r1, r2
 800d3a8:	6019      	str	r1, [r3, #0]
 800d3aa:	f000 8153 	beq.w	800d654 <_malloc_r+0x4fc>
 800d3ae:	f8d9 0000 	ldr.w	r0, [r9]
 800d3b2:	f8df e110 	ldr.w	lr, [pc, #272]	; 800d4c4 <_malloc_r+0x36c>
 800d3b6:	3001      	adds	r0, #1
 800d3b8:	bf1b      	ittet	ne
 800d3ba:	ebca 0a0b 	rsbne	sl, sl, fp
 800d3be:	4451      	addne	r1, sl
 800d3c0:	f8ce b000 	streq.w	fp, [lr]
 800d3c4:	6019      	strne	r1, [r3, #0]
 800d3c6:	f01b 0107 	ands.w	r1, fp, #7
 800d3ca:	f000 8117 	beq.w	800d5fc <_malloc_r+0x4a4>
 800d3ce:	f1c1 0008 	rsb	r0, r1, #8
 800d3d2:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 800d3d6:	4483      	add	fp, r0
 800d3d8:	3108      	adds	r1, #8
 800d3da:	445a      	add	r2, fp
 800d3dc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800d3e0:	ebc2 0901 	rsb	r9, r2, r1
 800d3e4:	4649      	mov	r1, r9
 800d3e6:	4630      	mov	r0, r6
 800d3e8:	9301      	str	r3, [sp, #4]
 800d3ea:	f000 fee9 	bl	800e1c0 <_sbrk_r>
 800d3ee:	1c43      	adds	r3, r0, #1
 800d3f0:	9b01      	ldr	r3, [sp, #4]
 800d3f2:	f000 813f 	beq.w	800d674 <_malloc_r+0x51c>
 800d3f6:	ebcb 0200 	rsb	r2, fp, r0
 800d3fa:	444a      	add	r2, r9
 800d3fc:	f042 0201 	orr.w	r2, r2, #1
 800d400:	6819      	ldr	r1, [r3, #0]
 800d402:	f8c7 b008 	str.w	fp, [r7, #8]
 800d406:	4449      	add	r1, r9
 800d408:	42bc      	cmp	r4, r7
 800d40a:	f8cb 2004 	str.w	r2, [fp, #4]
 800d40e:	6019      	str	r1, [r3, #0]
 800d410:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 800d4b8 <_malloc_r+0x360>
 800d414:	d016      	beq.n	800d444 <_malloc_r+0x2ec>
 800d416:	f1b8 0f0f 	cmp.w	r8, #15
 800d41a:	f240 80fd 	bls.w	800d618 <_malloc_r+0x4c0>
 800d41e:	6862      	ldr	r2, [r4, #4]
 800d420:	f1a8 030c 	sub.w	r3, r8, #12
 800d424:	f023 0307 	bic.w	r3, r3, #7
 800d428:	18e0      	adds	r0, r4, r3
 800d42a:	f002 0201 	and.w	r2, r2, #1
 800d42e:	f04f 0e05 	mov.w	lr, #5
 800d432:	431a      	orrs	r2, r3
 800d434:	2b0f      	cmp	r3, #15
 800d436:	6062      	str	r2, [r4, #4]
 800d438:	f8c0 e004 	str.w	lr, [r0, #4]
 800d43c:	f8c0 e008 	str.w	lr, [r0, #8]
 800d440:	f200 811c 	bhi.w	800d67c <_malloc_r+0x524>
 800d444:	4b1d      	ldr	r3, [pc, #116]	; (800d4bc <_malloc_r+0x364>)
 800d446:	68bc      	ldr	r4, [r7, #8]
 800d448:	681a      	ldr	r2, [r3, #0]
 800d44a:	4291      	cmp	r1, r2
 800d44c:	bf88      	it	hi
 800d44e:	6019      	strhi	r1, [r3, #0]
 800d450:	4b1b      	ldr	r3, [pc, #108]	; (800d4c0 <_malloc_r+0x368>)
 800d452:	681a      	ldr	r2, [r3, #0]
 800d454:	4291      	cmp	r1, r2
 800d456:	6862      	ldr	r2, [r4, #4]
 800d458:	bf88      	it	hi
 800d45a:	6019      	strhi	r1, [r3, #0]
 800d45c:	f022 0203 	bic.w	r2, r2, #3
 800d460:	4295      	cmp	r5, r2
 800d462:	eba2 0305 	sub.w	r3, r2, r5
 800d466:	d801      	bhi.n	800d46c <_malloc_r+0x314>
 800d468:	2b0f      	cmp	r3, #15
 800d46a:	dc04      	bgt.n	800d476 <_malloc_r+0x31e>
 800d46c:	4630      	mov	r0, r6
 800d46e:	f000 f9a7 	bl	800d7c0 <__malloc_unlock>
 800d472:	2400      	movs	r4, #0
 800d474:	e738      	b.n	800d2e8 <_malloc_r+0x190>
 800d476:	1962      	adds	r2, r4, r5
 800d478:	f043 0301 	orr.w	r3, r3, #1
 800d47c:	f045 0501 	orr.w	r5, r5, #1
 800d480:	6065      	str	r5, [r4, #4]
 800d482:	4630      	mov	r0, r6
 800d484:	60ba      	str	r2, [r7, #8]
 800d486:	6053      	str	r3, [r2, #4]
 800d488:	f000 f99a 	bl	800d7c0 <__malloc_unlock>
 800d48c:	3408      	adds	r4, #8
 800d48e:	4620      	mov	r0, r4
 800d490:	b003      	add	sp, #12
 800d492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d496:	2b14      	cmp	r3, #20
 800d498:	d971      	bls.n	800d57e <_malloc_r+0x426>
 800d49a:	2b54      	cmp	r3, #84	; 0x54
 800d49c:	f200 80a4 	bhi.w	800d5e8 <_malloc_r+0x490>
 800d4a0:	0b28      	lsrs	r0, r5, #12
 800d4a2:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
 800d4a6:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800d4aa:	306e      	adds	r0, #110	; 0x6e
 800d4ac:	e676      	b.n	800d19c <_malloc_r+0x44>
 800d4ae:	bf00      	nop
 800d4b0:	200005d0 	.word	0x200005d0
 800d4b4:	20001ed4 	.word	0x20001ed4
 800d4b8:	20001ed8 	.word	0x20001ed8
 800d4bc:	20001ed0 	.word	0x20001ed0
 800d4c0:	20001ecc 	.word	0x20001ecc
 800d4c4:	200009dc 	.word	0x200009dc
 800d4c8:	0a5a      	lsrs	r2, r3, #9
 800d4ca:	2a04      	cmp	r2, #4
 800d4cc:	d95e      	bls.n	800d58c <_malloc_r+0x434>
 800d4ce:	2a14      	cmp	r2, #20
 800d4d0:	f200 80b3 	bhi.w	800d63a <_malloc_r+0x4e2>
 800d4d4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 800d4d8:	0049      	lsls	r1, r1, #1
 800d4da:	325b      	adds	r2, #91	; 0x5b
 800d4dc:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
 800d4e0:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800d4e4:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 800d6c4 <_malloc_r+0x56c>
 800d4e8:	f1ac 0c08 	sub.w	ip, ip, #8
 800d4ec:	458c      	cmp	ip, r1
 800d4ee:	f000 8088 	beq.w	800d602 <_malloc_r+0x4aa>
 800d4f2:	684a      	ldr	r2, [r1, #4]
 800d4f4:	f022 0203 	bic.w	r2, r2, #3
 800d4f8:	4293      	cmp	r3, r2
 800d4fa:	d202      	bcs.n	800d502 <_malloc_r+0x3aa>
 800d4fc:	6889      	ldr	r1, [r1, #8]
 800d4fe:	458c      	cmp	ip, r1
 800d500:	d1f7      	bne.n	800d4f2 <_malloc_r+0x39a>
 800d502:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800d506:	687a      	ldr	r2, [r7, #4]
 800d508:	f8c4 c00c 	str.w	ip, [r4, #12]
 800d50c:	60a1      	str	r1, [r4, #8]
 800d50e:	f8cc 4008 	str.w	r4, [ip, #8]
 800d512:	60cc      	str	r4, [r1, #12]
 800d514:	e688      	b.n	800d228 <_malloc_r+0xd0>
 800d516:	1963      	adds	r3, r4, r5
 800d518:	f042 0701 	orr.w	r7, r2, #1
 800d51c:	f045 0501 	orr.w	r5, r5, #1
 800d520:	6065      	str	r5, [r4, #4]
 800d522:	4630      	mov	r0, r6
 800d524:	614b      	str	r3, [r1, #20]
 800d526:	610b      	str	r3, [r1, #16]
 800d528:	f8c3 e00c 	str.w	lr, [r3, #12]
 800d52c:	f8c3 e008 	str.w	lr, [r3, #8]
 800d530:	605f      	str	r7, [r3, #4]
 800d532:	509a      	str	r2, [r3, r2]
 800d534:	3408      	adds	r4, #8
 800d536:	f000 f943 	bl	800d7c0 <__malloc_unlock>
 800d53a:	e6d5      	b.n	800d2e8 <_malloc_r+0x190>
 800d53c:	684a      	ldr	r2, [r1, #4]
 800d53e:	e673      	b.n	800d228 <_malloc_r+0xd0>
 800d540:	f108 0801 	add.w	r8, r8, #1
 800d544:	f018 0f03 	tst.w	r8, #3
 800d548:	f10c 0c08 	add.w	ip, ip, #8
 800d54c:	f47f ae7f 	bne.w	800d24e <_malloc_r+0xf6>
 800d550:	e030      	b.n	800d5b4 <_malloc_r+0x45c>
 800d552:	68dc      	ldr	r4, [r3, #12]
 800d554:	42a3      	cmp	r3, r4
 800d556:	bf08      	it	eq
 800d558:	3002      	addeq	r0, #2
 800d55a:	f43f ae35 	beq.w	800d1c8 <_malloc_r+0x70>
 800d55e:	e6b3      	b.n	800d2c8 <_malloc_r+0x170>
 800d560:	440b      	add	r3, r1
 800d562:	460c      	mov	r4, r1
 800d564:	685a      	ldr	r2, [r3, #4]
 800d566:	68c9      	ldr	r1, [r1, #12]
 800d568:	f854 5f08 	ldr.w	r5, [r4, #8]!
 800d56c:	f042 0201 	orr.w	r2, r2, #1
 800d570:	605a      	str	r2, [r3, #4]
 800d572:	4630      	mov	r0, r6
 800d574:	60e9      	str	r1, [r5, #12]
 800d576:	608d      	str	r5, [r1, #8]
 800d578:	f000 f922 	bl	800d7c0 <__malloc_unlock>
 800d57c:	e6b4      	b.n	800d2e8 <_malloc_r+0x190>
 800d57e:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
 800d582:	f103 005b 	add.w	r0, r3, #91	; 0x5b
 800d586:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800d58a:	e607      	b.n	800d19c <_malloc_r+0x44>
 800d58c:	099a      	lsrs	r2, r3, #6
 800d58e:	f102 0139 	add.w	r1, r2, #57	; 0x39
 800d592:	0049      	lsls	r1, r1, #1
 800d594:	3238      	adds	r2, #56	; 0x38
 800d596:	e7a1      	b.n	800d4dc <_malloc_r+0x384>
 800d598:	42bc      	cmp	r4, r7
 800d59a:	4b4a      	ldr	r3, [pc, #296]	; (800d6c4 <_malloc_r+0x56c>)
 800d59c:	f43f af00 	beq.w	800d3a0 <_malloc_r+0x248>
 800d5a0:	689c      	ldr	r4, [r3, #8]
 800d5a2:	6862      	ldr	r2, [r4, #4]
 800d5a4:	f022 0203 	bic.w	r2, r2, #3
 800d5a8:	e75a      	b.n	800d460 <_malloc_r+0x308>
 800d5aa:	f859 3908 	ldr.w	r3, [r9], #-8
 800d5ae:	4599      	cmp	r9, r3
 800d5b0:	f040 8082 	bne.w	800d6b8 <_malloc_r+0x560>
 800d5b4:	f010 0f03 	tst.w	r0, #3
 800d5b8:	f100 30ff 	add.w	r0, r0, #4294967295
 800d5bc:	d1f5      	bne.n	800d5aa <_malloc_r+0x452>
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	ea23 0304 	bic.w	r3, r3, r4
 800d5c4:	607b      	str	r3, [r7, #4]
 800d5c6:	0064      	lsls	r4, r4, #1
 800d5c8:	429c      	cmp	r4, r3
 800d5ca:	f63f aebd 	bhi.w	800d348 <_malloc_r+0x1f0>
 800d5ce:	2c00      	cmp	r4, #0
 800d5d0:	f43f aeba 	beq.w	800d348 <_malloc_r+0x1f0>
 800d5d4:	421c      	tst	r4, r3
 800d5d6:	4640      	mov	r0, r8
 800d5d8:	f47f ae35 	bne.w	800d246 <_malloc_r+0xee>
 800d5dc:	0064      	lsls	r4, r4, #1
 800d5de:	421c      	tst	r4, r3
 800d5e0:	f100 0004 	add.w	r0, r0, #4
 800d5e4:	d0fa      	beq.n	800d5dc <_malloc_r+0x484>
 800d5e6:	e62e      	b.n	800d246 <_malloc_r+0xee>
 800d5e8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800d5ec:	d818      	bhi.n	800d620 <_malloc_r+0x4c8>
 800d5ee:	0be8      	lsrs	r0, r5, #15
 800d5f0:	f100 0e78 	add.w	lr, r0, #120	; 0x78
 800d5f4:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800d5f8:	3077      	adds	r0, #119	; 0x77
 800d5fa:	e5cf      	b.n	800d19c <_malloc_r+0x44>
 800d5fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d600:	e6eb      	b.n	800d3da <_malloc_r+0x282>
 800d602:	2101      	movs	r1, #1
 800d604:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d608:	1092      	asrs	r2, r2, #2
 800d60a:	fa01 f202 	lsl.w	r2, r1, r2
 800d60e:	431a      	orrs	r2, r3
 800d610:	f8c8 2004 	str.w	r2, [r8, #4]
 800d614:	4661      	mov	r1, ip
 800d616:	e777      	b.n	800d508 <_malloc_r+0x3b0>
 800d618:	2301      	movs	r3, #1
 800d61a:	f8cb 3004 	str.w	r3, [fp, #4]
 800d61e:	e725      	b.n	800d46c <_malloc_r+0x314>
 800d620:	f240 5254 	movw	r2, #1364	; 0x554
 800d624:	4293      	cmp	r3, r2
 800d626:	d820      	bhi.n	800d66a <_malloc_r+0x512>
 800d628:	0ca8      	lsrs	r0, r5, #18
 800d62a:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
 800d62e:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800d632:	307c      	adds	r0, #124	; 0x7c
 800d634:	e5b2      	b.n	800d19c <_malloc_r+0x44>
 800d636:	3210      	adds	r2, #16
 800d638:	e6a4      	b.n	800d384 <_malloc_r+0x22c>
 800d63a:	2a54      	cmp	r2, #84	; 0x54
 800d63c:	d826      	bhi.n	800d68c <_malloc_r+0x534>
 800d63e:	0b1a      	lsrs	r2, r3, #12
 800d640:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 800d644:	0049      	lsls	r1, r1, #1
 800d646:	326e      	adds	r2, #110	; 0x6e
 800d648:	e748      	b.n	800d4dc <_malloc_r+0x384>
 800d64a:	68bc      	ldr	r4, [r7, #8]
 800d64c:	6862      	ldr	r2, [r4, #4]
 800d64e:	f022 0203 	bic.w	r2, r2, #3
 800d652:	e705      	b.n	800d460 <_malloc_r+0x308>
 800d654:	f3ca 000b 	ubfx	r0, sl, #0, #12
 800d658:	2800      	cmp	r0, #0
 800d65a:	f47f aea8 	bne.w	800d3ae <_malloc_r+0x256>
 800d65e:	4442      	add	r2, r8
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	f042 0201 	orr.w	r2, r2, #1
 800d666:	605a      	str	r2, [r3, #4]
 800d668:	e6ec      	b.n	800d444 <_malloc_r+0x2ec>
 800d66a:	23fe      	movs	r3, #254	; 0xfe
 800d66c:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
 800d670:	207e      	movs	r0, #126	; 0x7e
 800d672:	e593      	b.n	800d19c <_malloc_r+0x44>
 800d674:	2201      	movs	r2, #1
 800d676:	f04f 0900 	mov.w	r9, #0
 800d67a:	e6c1      	b.n	800d400 <_malloc_r+0x2a8>
 800d67c:	f104 0108 	add.w	r1, r4, #8
 800d680:	4630      	mov	r0, r6
 800d682:	f7ff fa41 	bl	800cb08 <_free_r>
 800d686:	f8d9 1000 	ldr.w	r1, [r9]
 800d68a:	e6db      	b.n	800d444 <_malloc_r+0x2ec>
 800d68c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800d690:	d805      	bhi.n	800d69e <_malloc_r+0x546>
 800d692:	0bda      	lsrs	r2, r3, #15
 800d694:	f102 0178 	add.w	r1, r2, #120	; 0x78
 800d698:	0049      	lsls	r1, r1, #1
 800d69a:	3277      	adds	r2, #119	; 0x77
 800d69c:	e71e      	b.n	800d4dc <_malloc_r+0x384>
 800d69e:	f240 5154 	movw	r1, #1364	; 0x554
 800d6a2:	428a      	cmp	r2, r1
 800d6a4:	d805      	bhi.n	800d6b2 <_malloc_r+0x55a>
 800d6a6:	0c9a      	lsrs	r2, r3, #18
 800d6a8:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 800d6ac:	0049      	lsls	r1, r1, #1
 800d6ae:	327c      	adds	r2, #124	; 0x7c
 800d6b0:	e714      	b.n	800d4dc <_malloc_r+0x384>
 800d6b2:	21fe      	movs	r1, #254	; 0xfe
 800d6b4:	227e      	movs	r2, #126	; 0x7e
 800d6b6:	e711      	b.n	800d4dc <_malloc_r+0x384>
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	e784      	b.n	800d5c6 <_malloc_r+0x46e>
 800d6bc:	08e8      	lsrs	r0, r5, #3
 800d6be:	1c43      	adds	r3, r0, #1
 800d6c0:	005b      	lsls	r3, r3, #1
 800d6c2:	e5f8      	b.n	800d2b6 <_malloc_r+0x15e>
 800d6c4:	200005d0 	.word	0x200005d0

0800d6c8 <__ascii_mbtowc>:
 800d6c8:	b082      	sub	sp, #8
 800d6ca:	b149      	cbz	r1, 800d6e0 <__ascii_mbtowc+0x18>
 800d6cc:	b15a      	cbz	r2, 800d6e6 <__ascii_mbtowc+0x1e>
 800d6ce:	b16b      	cbz	r3, 800d6ec <__ascii_mbtowc+0x24>
 800d6d0:	7813      	ldrb	r3, [r2, #0]
 800d6d2:	600b      	str	r3, [r1, #0]
 800d6d4:	7812      	ldrb	r2, [r2, #0]
 800d6d6:	1c10      	adds	r0, r2, #0
 800d6d8:	bf18      	it	ne
 800d6da:	2001      	movne	r0, #1
 800d6dc:	b002      	add	sp, #8
 800d6de:	4770      	bx	lr
 800d6e0:	a901      	add	r1, sp, #4
 800d6e2:	2a00      	cmp	r2, #0
 800d6e4:	d1f3      	bne.n	800d6ce <__ascii_mbtowc+0x6>
 800d6e6:	4610      	mov	r0, r2
 800d6e8:	b002      	add	sp, #8
 800d6ea:	4770      	bx	lr
 800d6ec:	f06f 0001 	mvn.w	r0, #1
 800d6f0:	e7f4      	b.n	800d6dc <__ascii_mbtowc+0x14>
 800d6f2:	bf00      	nop

0800d6f4 <memmove>:
 800d6f4:	4288      	cmp	r0, r1
 800d6f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6f8:	d90d      	bls.n	800d716 <memmove+0x22>
 800d6fa:	188b      	adds	r3, r1, r2
 800d6fc:	4298      	cmp	r0, r3
 800d6fe:	d20a      	bcs.n	800d716 <memmove+0x22>
 800d700:	1881      	adds	r1, r0, r2
 800d702:	2a00      	cmp	r2, #0
 800d704:	d051      	beq.n	800d7aa <memmove+0xb6>
 800d706:	1a9a      	subs	r2, r3, r2
 800d708:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d70c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d710:	4293      	cmp	r3, r2
 800d712:	d1f9      	bne.n	800d708 <memmove+0x14>
 800d714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d716:	2a0f      	cmp	r2, #15
 800d718:	d948      	bls.n	800d7ac <memmove+0xb8>
 800d71a:	ea41 0300 	orr.w	r3, r1, r0
 800d71e:	079b      	lsls	r3, r3, #30
 800d720:	d146      	bne.n	800d7b0 <memmove+0xbc>
 800d722:	f100 0410 	add.w	r4, r0, #16
 800d726:	f101 0310 	add.w	r3, r1, #16
 800d72a:	4615      	mov	r5, r2
 800d72c:	f853 6c10 	ldr.w	r6, [r3, #-16]
 800d730:	f844 6c10 	str.w	r6, [r4, #-16]
 800d734:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 800d738:	f844 6c0c 	str.w	r6, [r4, #-12]
 800d73c:	f853 6c08 	ldr.w	r6, [r3, #-8]
 800d740:	f844 6c08 	str.w	r6, [r4, #-8]
 800d744:	3d10      	subs	r5, #16
 800d746:	f853 6c04 	ldr.w	r6, [r3, #-4]
 800d74a:	f844 6c04 	str.w	r6, [r4, #-4]
 800d74e:	2d0f      	cmp	r5, #15
 800d750:	f103 0310 	add.w	r3, r3, #16
 800d754:	f104 0410 	add.w	r4, r4, #16
 800d758:	d8e8      	bhi.n	800d72c <memmove+0x38>
 800d75a:	f1a2 0310 	sub.w	r3, r2, #16
 800d75e:	f023 030f 	bic.w	r3, r3, #15
 800d762:	f002 0e0f 	and.w	lr, r2, #15
 800d766:	3310      	adds	r3, #16
 800d768:	f1be 0f03 	cmp.w	lr, #3
 800d76c:	4419      	add	r1, r3
 800d76e:	4403      	add	r3, r0
 800d770:	d921      	bls.n	800d7b6 <memmove+0xc2>
 800d772:	1f1e      	subs	r6, r3, #4
 800d774:	460d      	mov	r5, r1
 800d776:	4674      	mov	r4, lr
 800d778:	3c04      	subs	r4, #4
 800d77a:	f855 7b04 	ldr.w	r7, [r5], #4
 800d77e:	f846 7f04 	str.w	r7, [r6, #4]!
 800d782:	2c03      	cmp	r4, #3
 800d784:	d8f8      	bhi.n	800d778 <memmove+0x84>
 800d786:	f1ae 0404 	sub.w	r4, lr, #4
 800d78a:	f024 0403 	bic.w	r4, r4, #3
 800d78e:	3404      	adds	r4, #4
 800d790:	4423      	add	r3, r4
 800d792:	4421      	add	r1, r4
 800d794:	f002 0203 	and.w	r2, r2, #3
 800d798:	b162      	cbz	r2, 800d7b4 <memmove+0xc0>
 800d79a:	3b01      	subs	r3, #1
 800d79c:	440a      	add	r2, r1
 800d79e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d7a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d7a6:	428a      	cmp	r2, r1
 800d7a8:	d1f9      	bne.n	800d79e <memmove+0xaa>
 800d7aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	e7f3      	b.n	800d798 <memmove+0xa4>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	e7f2      	b.n	800d79a <memmove+0xa6>
 800d7b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7b6:	4672      	mov	r2, lr
 800d7b8:	e7ee      	b.n	800d798 <memmove+0xa4>
 800d7ba:	bf00      	nop

0800d7bc <__malloc_lock>:
 800d7bc:	4770      	bx	lr
 800d7be:	bf00      	nop

0800d7c0 <__malloc_unlock>:
 800d7c0:	4770      	bx	lr
 800d7c2:	bf00      	nop

0800d7c4 <_Balloc>:
 800d7c4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800d7c6:	b570      	push	{r4, r5, r6, lr}
 800d7c8:	4605      	mov	r5, r0
 800d7ca:	460c      	mov	r4, r1
 800d7cc:	b14b      	cbz	r3, 800d7e2 <_Balloc+0x1e>
 800d7ce:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d7d2:	b180      	cbz	r0, 800d7f6 <_Balloc+0x32>
 800d7d4:	6802      	ldr	r2, [r0, #0]
 800d7d6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800d7da:	2300      	movs	r3, #0
 800d7dc:	6103      	str	r3, [r0, #16]
 800d7de:	60c3      	str	r3, [r0, #12]
 800d7e0:	bd70      	pop	{r4, r5, r6, pc}
 800d7e2:	2221      	movs	r2, #33	; 0x21
 800d7e4:	2104      	movs	r1, #4
 800d7e6:	f000 fe2b 	bl	800e440 <_calloc_r>
 800d7ea:	64e8      	str	r0, [r5, #76]	; 0x4c
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	2800      	cmp	r0, #0
 800d7f0:	d1ed      	bne.n	800d7ce <_Balloc+0xa>
 800d7f2:	2000      	movs	r0, #0
 800d7f4:	bd70      	pop	{r4, r5, r6, pc}
 800d7f6:	2101      	movs	r1, #1
 800d7f8:	fa01 f604 	lsl.w	r6, r1, r4
 800d7fc:	1d72      	adds	r2, r6, #5
 800d7fe:	4628      	mov	r0, r5
 800d800:	0092      	lsls	r2, r2, #2
 800d802:	f000 fe1d 	bl	800e440 <_calloc_r>
 800d806:	2800      	cmp	r0, #0
 800d808:	d0f3      	beq.n	800d7f2 <_Balloc+0x2e>
 800d80a:	6044      	str	r4, [r0, #4]
 800d80c:	6086      	str	r6, [r0, #8]
 800d80e:	e7e4      	b.n	800d7da <_Balloc+0x16>

0800d810 <_Bfree>:
 800d810:	b131      	cbz	r1, 800d820 <_Bfree+0x10>
 800d812:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800d814:	684a      	ldr	r2, [r1, #4]
 800d816:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d81a:	6008      	str	r0, [r1, #0]
 800d81c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800d820:	4770      	bx	lr
 800d822:	bf00      	nop

0800d824 <__multadd>:
 800d824:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d826:	690c      	ldr	r4, [r1, #16]
 800d828:	b083      	sub	sp, #12
 800d82a:	460d      	mov	r5, r1
 800d82c:	4606      	mov	r6, r0
 800d82e:	f101 0e14 	add.w	lr, r1, #20
 800d832:	2700      	movs	r7, #0
 800d834:	f8de 0000 	ldr.w	r0, [lr]
 800d838:	b281      	uxth	r1, r0
 800d83a:	fb02 3101 	mla	r1, r2, r1, r3
 800d83e:	0c0b      	lsrs	r3, r1, #16
 800d840:	0c00      	lsrs	r0, r0, #16
 800d842:	fb02 3300 	mla	r3, r2, r0, r3
 800d846:	b289      	uxth	r1, r1
 800d848:	3701      	adds	r7, #1
 800d84a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d84e:	42bc      	cmp	r4, r7
 800d850:	f84e 1b04 	str.w	r1, [lr], #4
 800d854:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800d858:	dcec      	bgt.n	800d834 <__multadd+0x10>
 800d85a:	b13b      	cbz	r3, 800d86c <__multadd+0x48>
 800d85c:	68aa      	ldr	r2, [r5, #8]
 800d85e:	4294      	cmp	r4, r2
 800d860:	da07      	bge.n	800d872 <__multadd+0x4e>
 800d862:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 800d866:	3401      	adds	r4, #1
 800d868:	6153      	str	r3, [r2, #20]
 800d86a:	612c      	str	r4, [r5, #16]
 800d86c:	4628      	mov	r0, r5
 800d86e:	b003      	add	sp, #12
 800d870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d872:	6869      	ldr	r1, [r5, #4]
 800d874:	9301      	str	r3, [sp, #4]
 800d876:	3101      	adds	r1, #1
 800d878:	4630      	mov	r0, r6
 800d87a:	f7ff ffa3 	bl	800d7c4 <_Balloc>
 800d87e:	692a      	ldr	r2, [r5, #16]
 800d880:	3202      	adds	r2, #2
 800d882:	f105 010c 	add.w	r1, r5, #12
 800d886:	4607      	mov	r7, r0
 800d888:	0092      	lsls	r2, r2, #2
 800d88a:	300c      	adds	r0, #12
 800d88c:	f7f2 feca 	bl	8000624 <memcpy>
 800d890:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 800d892:	6869      	ldr	r1, [r5, #4]
 800d894:	9b01      	ldr	r3, [sp, #4]
 800d896:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800d89a:	6028      	str	r0, [r5, #0]
 800d89c:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 800d8a0:	463d      	mov	r5, r7
 800d8a2:	e7de      	b.n	800d862 <__multadd+0x3e>

0800d8a4 <__hi0bits>:
 800d8a4:	0c03      	lsrs	r3, r0, #16
 800d8a6:	041b      	lsls	r3, r3, #16
 800d8a8:	b9b3      	cbnz	r3, 800d8d8 <__hi0bits+0x34>
 800d8aa:	0400      	lsls	r0, r0, #16
 800d8ac:	2310      	movs	r3, #16
 800d8ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d8b2:	bf04      	itt	eq
 800d8b4:	0200      	lsleq	r0, r0, #8
 800d8b6:	3308      	addeq	r3, #8
 800d8b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d8bc:	bf04      	itt	eq
 800d8be:	0100      	lsleq	r0, r0, #4
 800d8c0:	3304      	addeq	r3, #4
 800d8c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d8c6:	bf04      	itt	eq
 800d8c8:	0080      	lsleq	r0, r0, #2
 800d8ca:	3302      	addeq	r3, #2
 800d8cc:	2800      	cmp	r0, #0
 800d8ce:	db07      	blt.n	800d8e0 <__hi0bits+0x3c>
 800d8d0:	0042      	lsls	r2, r0, #1
 800d8d2:	d403      	bmi.n	800d8dc <__hi0bits+0x38>
 800d8d4:	2020      	movs	r0, #32
 800d8d6:	4770      	bx	lr
 800d8d8:	2300      	movs	r3, #0
 800d8da:	e7e8      	b.n	800d8ae <__hi0bits+0xa>
 800d8dc:	1c58      	adds	r0, r3, #1
 800d8de:	4770      	bx	lr
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	4770      	bx	lr

0800d8e4 <__lo0bits>:
 800d8e4:	6803      	ldr	r3, [r0, #0]
 800d8e6:	f013 0207 	ands.w	r2, r3, #7
 800d8ea:	d007      	beq.n	800d8fc <__lo0bits+0x18>
 800d8ec:	07d9      	lsls	r1, r3, #31
 800d8ee:	d420      	bmi.n	800d932 <__lo0bits+0x4e>
 800d8f0:	079a      	lsls	r2, r3, #30
 800d8f2:	d420      	bmi.n	800d936 <__lo0bits+0x52>
 800d8f4:	089b      	lsrs	r3, r3, #2
 800d8f6:	6003      	str	r3, [r0, #0]
 800d8f8:	2002      	movs	r0, #2
 800d8fa:	4770      	bx	lr
 800d8fc:	b299      	uxth	r1, r3
 800d8fe:	b909      	cbnz	r1, 800d904 <__lo0bits+0x20>
 800d900:	0c1b      	lsrs	r3, r3, #16
 800d902:	2210      	movs	r2, #16
 800d904:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d908:	bf04      	itt	eq
 800d90a:	0a1b      	lsreq	r3, r3, #8
 800d90c:	3208      	addeq	r2, #8
 800d90e:	0719      	lsls	r1, r3, #28
 800d910:	bf04      	itt	eq
 800d912:	091b      	lsreq	r3, r3, #4
 800d914:	3204      	addeq	r2, #4
 800d916:	0799      	lsls	r1, r3, #30
 800d918:	bf04      	itt	eq
 800d91a:	089b      	lsreq	r3, r3, #2
 800d91c:	3202      	addeq	r2, #2
 800d91e:	07d9      	lsls	r1, r3, #31
 800d920:	d404      	bmi.n	800d92c <__lo0bits+0x48>
 800d922:	085b      	lsrs	r3, r3, #1
 800d924:	d101      	bne.n	800d92a <__lo0bits+0x46>
 800d926:	2020      	movs	r0, #32
 800d928:	4770      	bx	lr
 800d92a:	3201      	adds	r2, #1
 800d92c:	6003      	str	r3, [r0, #0]
 800d92e:	4610      	mov	r0, r2
 800d930:	4770      	bx	lr
 800d932:	2000      	movs	r0, #0
 800d934:	4770      	bx	lr
 800d936:	085b      	lsrs	r3, r3, #1
 800d938:	6003      	str	r3, [r0, #0]
 800d93a:	2001      	movs	r0, #1
 800d93c:	4770      	bx	lr
 800d93e:	bf00      	nop

0800d940 <__i2b>:
 800d940:	b510      	push	{r4, lr}
 800d942:	460c      	mov	r4, r1
 800d944:	2101      	movs	r1, #1
 800d946:	f7ff ff3d 	bl	800d7c4 <_Balloc>
 800d94a:	2201      	movs	r2, #1
 800d94c:	6144      	str	r4, [r0, #20]
 800d94e:	6102      	str	r2, [r0, #16]
 800d950:	bd10      	pop	{r4, pc}
 800d952:	bf00      	nop

0800d954 <__multiply>:
 800d954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d958:	690d      	ldr	r5, [r1, #16]
 800d95a:	6917      	ldr	r7, [r2, #16]
 800d95c:	42bd      	cmp	r5, r7
 800d95e:	b083      	sub	sp, #12
 800d960:	460c      	mov	r4, r1
 800d962:	4616      	mov	r6, r2
 800d964:	da04      	bge.n	800d970 <__multiply+0x1c>
 800d966:	462a      	mov	r2, r5
 800d968:	4634      	mov	r4, r6
 800d96a:	463d      	mov	r5, r7
 800d96c:	460e      	mov	r6, r1
 800d96e:	4617      	mov	r7, r2
 800d970:	68a3      	ldr	r3, [r4, #8]
 800d972:	6861      	ldr	r1, [r4, #4]
 800d974:	eb05 0807 	add.w	r8, r5, r7
 800d978:	4598      	cmp	r8, r3
 800d97a:	bfc8      	it	gt
 800d97c:	3101      	addgt	r1, #1
 800d97e:	f7ff ff21 	bl	800d7c4 <_Balloc>
 800d982:	f100 0c14 	add.w	ip, r0, #20
 800d986:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 800d98a:	45cc      	cmp	ip, r9
 800d98c:	9000      	str	r0, [sp, #0]
 800d98e:	d205      	bcs.n	800d99c <__multiply+0x48>
 800d990:	4663      	mov	r3, ip
 800d992:	2100      	movs	r1, #0
 800d994:	f843 1b04 	str.w	r1, [r3], #4
 800d998:	4599      	cmp	r9, r3
 800d99a:	d8fb      	bhi.n	800d994 <__multiply+0x40>
 800d99c:	f106 0214 	add.w	r2, r6, #20
 800d9a0:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 800d9a4:	f104 0314 	add.w	r3, r4, #20
 800d9a8:	4552      	cmp	r2, sl
 800d9aa:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
 800d9ae:	d254      	bcs.n	800da5a <__multiply+0x106>
 800d9b0:	f8cd 9004 	str.w	r9, [sp, #4]
 800d9b4:	4699      	mov	r9, r3
 800d9b6:	f852 3b04 	ldr.w	r3, [r2], #4
 800d9ba:	fa1f fb83 	uxth.w	fp, r3
 800d9be:	f1bb 0f00 	cmp.w	fp, #0
 800d9c2:	d020      	beq.n	800da06 <__multiply+0xb2>
 800d9c4:	2000      	movs	r0, #0
 800d9c6:	464f      	mov	r7, r9
 800d9c8:	4666      	mov	r6, ip
 800d9ca:	4605      	mov	r5, r0
 800d9cc:	e000      	b.n	800d9d0 <__multiply+0x7c>
 800d9ce:	461e      	mov	r6, r3
 800d9d0:	f857 4b04 	ldr.w	r4, [r7], #4
 800d9d4:	6830      	ldr	r0, [r6, #0]
 800d9d6:	b2a1      	uxth	r1, r4
 800d9d8:	b283      	uxth	r3, r0
 800d9da:	fb0b 3101 	mla	r1, fp, r1, r3
 800d9de:	0c24      	lsrs	r4, r4, #16
 800d9e0:	0c00      	lsrs	r0, r0, #16
 800d9e2:	194b      	adds	r3, r1, r5
 800d9e4:	fb0b 0004 	mla	r0, fp, r4, r0
 800d9e8:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 800d9ec:	b299      	uxth	r1, r3
 800d9ee:	4633      	mov	r3, r6
 800d9f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d9f4:	45be      	cmp	lr, r7
 800d9f6:	ea4f 4510 	mov.w	r5, r0, lsr #16
 800d9fa:	f843 1b04 	str.w	r1, [r3], #4
 800d9fe:	d8e6      	bhi.n	800d9ce <__multiply+0x7a>
 800da00:	6075      	str	r5, [r6, #4]
 800da02:	f852 3c04 	ldr.w	r3, [r2, #-4]
 800da06:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 800da0a:	d020      	beq.n	800da4e <__multiply+0xfa>
 800da0c:	f8dc 3000 	ldr.w	r3, [ip]
 800da10:	4667      	mov	r7, ip
 800da12:	4618      	mov	r0, r3
 800da14:	464d      	mov	r5, r9
 800da16:	2100      	movs	r1, #0
 800da18:	e000      	b.n	800da1c <__multiply+0xc8>
 800da1a:	4637      	mov	r7, r6
 800da1c:	882c      	ldrh	r4, [r5, #0]
 800da1e:	0c00      	lsrs	r0, r0, #16
 800da20:	fb0b 0004 	mla	r0, fp, r4, r0
 800da24:	4401      	add	r1, r0
 800da26:	b29c      	uxth	r4, r3
 800da28:	463e      	mov	r6, r7
 800da2a:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 800da2e:	f846 3b04 	str.w	r3, [r6], #4
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	f855 4b04 	ldr.w	r4, [r5], #4
 800da38:	b283      	uxth	r3, r0
 800da3a:	0c24      	lsrs	r4, r4, #16
 800da3c:	fb0b 3404 	mla	r4, fp, r4, r3
 800da40:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 800da44:	45ae      	cmp	lr, r5
 800da46:	ea4f 4113 	mov.w	r1, r3, lsr #16
 800da4a:	d8e6      	bhi.n	800da1a <__multiply+0xc6>
 800da4c:	607b      	str	r3, [r7, #4]
 800da4e:	4592      	cmp	sl, r2
 800da50:	f10c 0c04 	add.w	ip, ip, #4
 800da54:	d8af      	bhi.n	800d9b6 <__multiply+0x62>
 800da56:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800da5a:	f1b8 0f00 	cmp.w	r8, #0
 800da5e:	dd0b      	ble.n	800da78 <__multiply+0x124>
 800da60:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800da64:	f1a9 0904 	sub.w	r9, r9, #4
 800da68:	b11b      	cbz	r3, 800da72 <__multiply+0x11e>
 800da6a:	e005      	b.n	800da78 <__multiply+0x124>
 800da6c:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 800da70:	b913      	cbnz	r3, 800da78 <__multiply+0x124>
 800da72:	f1b8 0801 	subs.w	r8, r8, #1
 800da76:	d1f9      	bne.n	800da6c <__multiply+0x118>
 800da78:	9800      	ldr	r0, [sp, #0]
 800da7a:	f8c0 8010 	str.w	r8, [r0, #16]
 800da7e:	b003      	add	sp, #12
 800da80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800da84 <__pow5mult>:
 800da84:	f012 0303 	ands.w	r3, r2, #3
 800da88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da8c:	4614      	mov	r4, r2
 800da8e:	4607      	mov	r7, r0
 800da90:	d12e      	bne.n	800daf0 <__pow5mult+0x6c>
 800da92:	460e      	mov	r6, r1
 800da94:	10a4      	asrs	r4, r4, #2
 800da96:	d01c      	beq.n	800dad2 <__pow5mult+0x4e>
 800da98:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 800da9a:	b395      	cbz	r5, 800db02 <__pow5mult+0x7e>
 800da9c:	07e3      	lsls	r3, r4, #31
 800da9e:	f04f 0800 	mov.w	r8, #0
 800daa2:	d406      	bmi.n	800dab2 <__pow5mult+0x2e>
 800daa4:	1064      	asrs	r4, r4, #1
 800daa6:	d014      	beq.n	800dad2 <__pow5mult+0x4e>
 800daa8:	6828      	ldr	r0, [r5, #0]
 800daaa:	b1a8      	cbz	r0, 800dad8 <__pow5mult+0x54>
 800daac:	4605      	mov	r5, r0
 800daae:	07e3      	lsls	r3, r4, #31
 800dab0:	d5f8      	bpl.n	800daa4 <__pow5mult+0x20>
 800dab2:	462a      	mov	r2, r5
 800dab4:	4631      	mov	r1, r6
 800dab6:	4638      	mov	r0, r7
 800dab8:	f7ff ff4c 	bl	800d954 <__multiply>
 800dabc:	b1b6      	cbz	r6, 800daec <__pow5mult+0x68>
 800dabe:	6872      	ldr	r2, [r6, #4]
 800dac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dac2:	1064      	asrs	r4, r4, #1
 800dac4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dac8:	6031      	str	r1, [r6, #0]
 800daca:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 800dace:	4606      	mov	r6, r0
 800dad0:	d1ea      	bne.n	800daa8 <__pow5mult+0x24>
 800dad2:	4630      	mov	r0, r6
 800dad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dad8:	462a      	mov	r2, r5
 800dada:	4629      	mov	r1, r5
 800dadc:	4638      	mov	r0, r7
 800dade:	f7ff ff39 	bl	800d954 <__multiply>
 800dae2:	6028      	str	r0, [r5, #0]
 800dae4:	f8c0 8000 	str.w	r8, [r0]
 800dae8:	4605      	mov	r5, r0
 800daea:	e7e0      	b.n	800daae <__pow5mult+0x2a>
 800daec:	4606      	mov	r6, r0
 800daee:	e7d9      	b.n	800daa4 <__pow5mult+0x20>
 800daf0:	1e5a      	subs	r2, r3, #1
 800daf2:	4d0b      	ldr	r5, [pc, #44]	; (800db20 <__pow5mult+0x9c>)
 800daf4:	2300      	movs	r3, #0
 800daf6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800dafa:	f7ff fe93 	bl	800d824 <__multadd>
 800dafe:	4606      	mov	r6, r0
 800db00:	e7c8      	b.n	800da94 <__pow5mult+0x10>
 800db02:	2101      	movs	r1, #1
 800db04:	4638      	mov	r0, r7
 800db06:	f7ff fe5d 	bl	800d7c4 <_Balloc>
 800db0a:	f240 2171 	movw	r1, #625	; 0x271
 800db0e:	2201      	movs	r2, #1
 800db10:	2300      	movs	r3, #0
 800db12:	6141      	str	r1, [r0, #20]
 800db14:	6102      	str	r2, [r0, #16]
 800db16:	4605      	mov	r5, r0
 800db18:	64b8      	str	r0, [r7, #72]	; 0x48
 800db1a:	6003      	str	r3, [r0, #0]
 800db1c:	e7be      	b.n	800da9c <__pow5mult+0x18>
 800db1e:	bf00      	nop
 800db20:	0800ef98 	.word	0x0800ef98

0800db24 <__lshift>:
 800db24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db28:	4691      	mov	r9, r2
 800db2a:	690a      	ldr	r2, [r1, #16]
 800db2c:	688b      	ldr	r3, [r1, #8]
 800db2e:	ea4f 1469 	mov.w	r4, r9, asr #5
 800db32:	eb04 0802 	add.w	r8, r4, r2
 800db36:	f108 0501 	add.w	r5, r8, #1
 800db3a:	429d      	cmp	r5, r3
 800db3c:	460e      	mov	r6, r1
 800db3e:	4682      	mov	sl, r0
 800db40:	6849      	ldr	r1, [r1, #4]
 800db42:	dd04      	ble.n	800db4e <__lshift+0x2a>
 800db44:	005b      	lsls	r3, r3, #1
 800db46:	429d      	cmp	r5, r3
 800db48:	f101 0101 	add.w	r1, r1, #1
 800db4c:	dcfa      	bgt.n	800db44 <__lshift+0x20>
 800db4e:	4650      	mov	r0, sl
 800db50:	f7ff fe38 	bl	800d7c4 <_Balloc>
 800db54:	2c00      	cmp	r4, #0
 800db56:	f100 0214 	add.w	r2, r0, #20
 800db5a:	dd38      	ble.n	800dbce <__lshift+0xaa>
 800db5c:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 800db60:	2100      	movs	r1, #0
 800db62:	f842 1b04 	str.w	r1, [r2], #4
 800db66:	4293      	cmp	r3, r2
 800db68:	d1fb      	bne.n	800db62 <__lshift+0x3e>
 800db6a:	6934      	ldr	r4, [r6, #16]
 800db6c:	f106 0114 	add.w	r1, r6, #20
 800db70:	f019 091f 	ands.w	r9, r9, #31
 800db74:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
 800db78:	d021      	beq.n	800dbbe <__lshift+0x9a>
 800db7a:	f1c9 0220 	rsb	r2, r9, #32
 800db7e:	2400      	movs	r4, #0
 800db80:	680f      	ldr	r7, [r1, #0]
 800db82:	fa07 fc09 	lsl.w	ip, r7, r9
 800db86:	ea4c 0404 	orr.w	r4, ip, r4
 800db8a:	469c      	mov	ip, r3
 800db8c:	f843 4b04 	str.w	r4, [r3], #4
 800db90:	f851 4b04 	ldr.w	r4, [r1], #4
 800db94:	458e      	cmp	lr, r1
 800db96:	fa24 f402 	lsr.w	r4, r4, r2
 800db9a:	d8f1      	bhi.n	800db80 <__lshift+0x5c>
 800db9c:	f8cc 4004 	str.w	r4, [ip, #4]
 800dba0:	b10c      	cbz	r4, 800dba6 <__lshift+0x82>
 800dba2:	f108 0502 	add.w	r5, r8, #2
 800dba6:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 800dbaa:	6872      	ldr	r2, [r6, #4]
 800dbac:	3d01      	subs	r5, #1
 800dbae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dbb2:	6105      	str	r5, [r0, #16]
 800dbb4:	6031      	str	r1, [r6, #0]
 800dbb6:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 800dbba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbbe:	3b04      	subs	r3, #4
 800dbc0:	f851 2b04 	ldr.w	r2, [r1], #4
 800dbc4:	f843 2f04 	str.w	r2, [r3, #4]!
 800dbc8:	458e      	cmp	lr, r1
 800dbca:	d8f9      	bhi.n	800dbc0 <__lshift+0x9c>
 800dbcc:	e7eb      	b.n	800dba6 <__lshift+0x82>
 800dbce:	4613      	mov	r3, r2
 800dbd0:	e7cb      	b.n	800db6a <__lshift+0x46>
 800dbd2:	bf00      	nop

0800dbd4 <__mcmp>:
 800dbd4:	6902      	ldr	r2, [r0, #16]
 800dbd6:	690b      	ldr	r3, [r1, #16]
 800dbd8:	1ad2      	subs	r2, r2, r3
 800dbda:	d112      	bne.n	800dc02 <__mcmp+0x2e>
 800dbdc:	009b      	lsls	r3, r3, #2
 800dbde:	3014      	adds	r0, #20
 800dbe0:	3114      	adds	r1, #20
 800dbe2:	4419      	add	r1, r3
 800dbe4:	b410      	push	{r4}
 800dbe6:	4403      	add	r3, r0
 800dbe8:	e001      	b.n	800dbee <__mcmp+0x1a>
 800dbea:	4298      	cmp	r0, r3
 800dbec:	d20b      	bcs.n	800dc06 <__mcmp+0x32>
 800dbee:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800dbf2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800dbf6:	4294      	cmp	r4, r2
 800dbf8:	d0f7      	beq.n	800dbea <__mcmp+0x16>
 800dbfa:	d307      	bcc.n	800dc0c <__mcmp+0x38>
 800dbfc:	2001      	movs	r0, #1
 800dbfe:	bc10      	pop	{r4}
 800dc00:	4770      	bx	lr
 800dc02:	4610      	mov	r0, r2
 800dc04:	4770      	bx	lr
 800dc06:	2000      	movs	r0, #0
 800dc08:	bc10      	pop	{r4}
 800dc0a:	4770      	bx	lr
 800dc0c:	f04f 30ff 	mov.w	r0, #4294967295
 800dc10:	e7f5      	b.n	800dbfe <__mcmp+0x2a>
 800dc12:	bf00      	nop

0800dc14 <__mdiff>:
 800dc14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc18:	690b      	ldr	r3, [r1, #16]
 800dc1a:	460f      	mov	r7, r1
 800dc1c:	6911      	ldr	r1, [r2, #16]
 800dc1e:	1a5b      	subs	r3, r3, r1
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	4690      	mov	r8, r2
 800dc24:	d117      	bne.n	800dc56 <__mdiff+0x42>
 800dc26:	0089      	lsls	r1, r1, #2
 800dc28:	f107 0214 	add.w	r2, r7, #20
 800dc2c:	f108 0514 	add.w	r5, r8, #20
 800dc30:	1853      	adds	r3, r2, r1
 800dc32:	4429      	add	r1, r5
 800dc34:	e001      	b.n	800dc3a <__mdiff+0x26>
 800dc36:	429a      	cmp	r2, r3
 800dc38:	d25e      	bcs.n	800dcf8 <__mdiff+0xe4>
 800dc3a:	f853 6d04 	ldr.w	r6, [r3, #-4]!
 800dc3e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dc42:	42a6      	cmp	r6, r4
 800dc44:	d0f7      	beq.n	800dc36 <__mdiff+0x22>
 800dc46:	d260      	bcs.n	800dd0a <__mdiff+0xf6>
 800dc48:	463b      	mov	r3, r7
 800dc4a:	4614      	mov	r4, r2
 800dc4c:	4647      	mov	r7, r8
 800dc4e:	f04f 0901 	mov.w	r9, #1
 800dc52:	4698      	mov	r8, r3
 800dc54:	e006      	b.n	800dc64 <__mdiff+0x50>
 800dc56:	db5d      	blt.n	800dd14 <__mdiff+0x100>
 800dc58:	f107 0514 	add.w	r5, r7, #20
 800dc5c:	f102 0414 	add.w	r4, r2, #20
 800dc60:	f04f 0900 	mov.w	r9, #0
 800dc64:	6879      	ldr	r1, [r7, #4]
 800dc66:	f7ff fdad 	bl	800d7c4 <_Balloc>
 800dc6a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800dc6e:	693e      	ldr	r6, [r7, #16]
 800dc70:	f8c0 900c 	str.w	r9, [r0, #12]
 800dc74:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 800dc78:	46a6      	mov	lr, r4
 800dc7a:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 800dc7e:	f100 0414 	add.w	r4, r0, #20
 800dc82:	2300      	movs	r3, #0
 800dc84:	f85e 1b04 	ldr.w	r1, [lr], #4
 800dc88:	f855 8b04 	ldr.w	r8, [r5], #4
 800dc8c:	b28a      	uxth	r2, r1
 800dc8e:	fa13 f388 	uxtah	r3, r3, r8
 800dc92:	0c09      	lsrs	r1, r1, #16
 800dc94:	1a9a      	subs	r2, r3, r2
 800dc96:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
 800dc9a:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800dc9e:	b292      	uxth	r2, r2
 800dca0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800dca4:	45f4      	cmp	ip, lr
 800dca6:	f844 2b04 	str.w	r2, [r4], #4
 800dcaa:	ea4f 4323 	mov.w	r3, r3, asr #16
 800dcae:	d8e9      	bhi.n	800dc84 <__mdiff+0x70>
 800dcb0:	42af      	cmp	r7, r5
 800dcb2:	d917      	bls.n	800dce4 <__mdiff+0xd0>
 800dcb4:	46a4      	mov	ip, r4
 800dcb6:	4629      	mov	r1, r5
 800dcb8:	f851 eb04 	ldr.w	lr, [r1], #4
 800dcbc:	fa13 f28e 	uxtah	r2, r3, lr
 800dcc0:	1413      	asrs	r3, r2, #16
 800dcc2:	eb03 431e 	add.w	r3, r3, lr, lsr #16
 800dcc6:	b292      	uxth	r2, r2
 800dcc8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800dccc:	428f      	cmp	r7, r1
 800dcce:	f84c 2b04 	str.w	r2, [ip], #4
 800dcd2:	ea4f 4323 	mov.w	r3, r3, asr #16
 800dcd6:	d8ef      	bhi.n	800dcb8 <__mdiff+0xa4>
 800dcd8:	43ed      	mvns	r5, r5
 800dcda:	443d      	add	r5, r7
 800dcdc:	f025 0503 	bic.w	r5, r5, #3
 800dce0:	3504      	adds	r5, #4
 800dce2:	442c      	add	r4, r5
 800dce4:	3c04      	subs	r4, #4
 800dce6:	b922      	cbnz	r2, 800dcf2 <__mdiff+0xde>
 800dce8:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 800dcec:	3e01      	subs	r6, #1
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d0fa      	beq.n	800dce8 <__mdiff+0xd4>
 800dcf2:	6106      	str	r6, [r0, #16]
 800dcf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcf8:	2100      	movs	r1, #0
 800dcfa:	f7ff fd63 	bl	800d7c4 <_Balloc>
 800dcfe:	2201      	movs	r2, #1
 800dd00:	2300      	movs	r3, #0
 800dd02:	6102      	str	r2, [r0, #16]
 800dd04:	6143      	str	r3, [r0, #20]
 800dd06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd0a:	462c      	mov	r4, r5
 800dd0c:	f04f 0900 	mov.w	r9, #0
 800dd10:	4615      	mov	r5, r2
 800dd12:	e7a7      	b.n	800dc64 <__mdiff+0x50>
 800dd14:	463b      	mov	r3, r7
 800dd16:	f107 0414 	add.w	r4, r7, #20
 800dd1a:	f108 0514 	add.w	r5, r8, #20
 800dd1e:	4647      	mov	r7, r8
 800dd20:	f04f 0901 	mov.w	r9, #1
 800dd24:	4698      	mov	r8, r3
 800dd26:	e79d      	b.n	800dc64 <__mdiff+0x50>

0800dd28 <__d2b>:
 800dd28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd2c:	b082      	sub	sp, #8
 800dd2e:	2101      	movs	r1, #1
 800dd30:	461c      	mov	r4, r3
 800dd32:	f3c3 570a 	ubfx	r7, r3, #20, #11
 800dd36:	4615      	mov	r5, r2
 800dd38:	9e08      	ldr	r6, [sp, #32]
 800dd3a:	f7ff fd43 	bl	800d7c4 <_Balloc>
 800dd3e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800dd42:	4680      	mov	r8, r0
 800dd44:	b10f      	cbz	r7, 800dd4a <__d2b+0x22>
 800dd46:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800dd4a:	9401      	str	r4, [sp, #4]
 800dd4c:	b31d      	cbz	r5, 800dd96 <__d2b+0x6e>
 800dd4e:	a802      	add	r0, sp, #8
 800dd50:	f840 5d08 	str.w	r5, [r0, #-8]!
 800dd54:	f7ff fdc6 	bl	800d8e4 <__lo0bits>
 800dd58:	2800      	cmp	r0, #0
 800dd5a:	d134      	bne.n	800ddc6 <__d2b+0x9e>
 800dd5c:	e89d 000c 	ldmia.w	sp, {r2, r3}
 800dd60:	f8c8 2014 	str.w	r2, [r8, #20]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	bf0c      	ite	eq
 800dd68:	2101      	moveq	r1, #1
 800dd6a:	2102      	movne	r1, #2
 800dd6c:	f8c8 3018 	str.w	r3, [r8, #24]
 800dd70:	f8c8 1010 	str.w	r1, [r8, #16]
 800dd74:	b9df      	cbnz	r7, 800ddae <__d2b+0x86>
 800dd76:	eb08 0381 	add.w	r3, r8, r1, lsl #2
 800dd7a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dd7e:	6030      	str	r0, [r6, #0]
 800dd80:	6918      	ldr	r0, [r3, #16]
 800dd82:	f7ff fd8f 	bl	800d8a4 <__hi0bits>
 800dd86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd88:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800dd8c:	6018      	str	r0, [r3, #0]
 800dd8e:	4640      	mov	r0, r8
 800dd90:	b002      	add	sp, #8
 800dd92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd96:	a801      	add	r0, sp, #4
 800dd98:	f7ff fda4 	bl	800d8e4 <__lo0bits>
 800dd9c:	9b01      	ldr	r3, [sp, #4]
 800dd9e:	f8c8 3014 	str.w	r3, [r8, #20]
 800dda2:	2101      	movs	r1, #1
 800dda4:	3020      	adds	r0, #32
 800dda6:	f8c8 1010 	str.w	r1, [r8, #16]
 800ddaa:	2f00      	cmp	r7, #0
 800ddac:	d0e3      	beq.n	800dd76 <__d2b+0x4e>
 800ddae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddb0:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
 800ddb4:	4407      	add	r7, r0
 800ddb6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ddba:	6037      	str	r7, [r6, #0]
 800ddbc:	6018      	str	r0, [r3, #0]
 800ddbe:	4640      	mov	r0, r8
 800ddc0:	b002      	add	sp, #8
 800ddc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddc6:	e89d 000c 	ldmia.w	sp, {r2, r3}
 800ddca:	f1c0 0120 	rsb	r1, r0, #32
 800ddce:	fa03 f101 	lsl.w	r1, r3, r1
 800ddd2:	430a      	orrs	r2, r1
 800ddd4:	40c3      	lsrs	r3, r0
 800ddd6:	9301      	str	r3, [sp, #4]
 800ddd8:	f8c8 2014 	str.w	r2, [r8, #20]
 800dddc:	e7c2      	b.n	800dd64 <__d2b+0x3c>
 800ddde:	bf00      	nop

0800dde0 <_realloc_r>:
 800dde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dde4:	4617      	mov	r7, r2
 800dde6:	b083      	sub	sp, #12
 800dde8:	2900      	cmp	r1, #0
 800ddea:	f000 80c1 	beq.w	800df70 <_realloc_r+0x190>
 800ddee:	460e      	mov	r6, r1
 800ddf0:	4681      	mov	r9, r0
 800ddf2:	f107 050b 	add.w	r5, r7, #11
 800ddf6:	f7ff fce1 	bl	800d7bc <__malloc_lock>
 800ddfa:	f856 ec04 	ldr.w	lr, [r6, #-4]
 800ddfe:	2d16      	cmp	r5, #22
 800de00:	f02e 0403 	bic.w	r4, lr, #3
 800de04:	f1a6 0808 	sub.w	r8, r6, #8
 800de08:	d840      	bhi.n	800de8c <_realloc_r+0xac>
 800de0a:	2210      	movs	r2, #16
 800de0c:	4615      	mov	r5, r2
 800de0e:	42af      	cmp	r7, r5
 800de10:	d841      	bhi.n	800de96 <_realloc_r+0xb6>
 800de12:	4294      	cmp	r4, r2
 800de14:	da75      	bge.n	800df02 <_realloc_r+0x122>
 800de16:	4bc9      	ldr	r3, [pc, #804]	; (800e13c <_realloc_r+0x35c>)
 800de18:	6899      	ldr	r1, [r3, #8]
 800de1a:	eb08 0004 	add.w	r0, r8, r4
 800de1e:	4288      	cmp	r0, r1
 800de20:	6841      	ldr	r1, [r0, #4]
 800de22:	f000 80d9 	beq.w	800dfd8 <_realloc_r+0x1f8>
 800de26:	f021 0301 	bic.w	r3, r1, #1
 800de2a:	4403      	add	r3, r0
 800de2c:	685b      	ldr	r3, [r3, #4]
 800de2e:	07db      	lsls	r3, r3, #31
 800de30:	d57d      	bpl.n	800df2e <_realloc_r+0x14e>
 800de32:	f01e 0f01 	tst.w	lr, #1
 800de36:	d035      	beq.n	800dea4 <_realloc_r+0xc4>
 800de38:	4639      	mov	r1, r7
 800de3a:	4648      	mov	r0, r9
 800de3c:	f7ff f98c 	bl	800d158 <_malloc_r>
 800de40:	4607      	mov	r7, r0
 800de42:	b1e0      	cbz	r0, 800de7e <_realloc_r+0x9e>
 800de44:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800de48:	f023 0301 	bic.w	r3, r3, #1
 800de4c:	4443      	add	r3, r8
 800de4e:	f1a0 0208 	sub.w	r2, r0, #8
 800de52:	429a      	cmp	r2, r3
 800de54:	f000 8144 	beq.w	800e0e0 <_realloc_r+0x300>
 800de58:	1f22      	subs	r2, r4, #4
 800de5a:	2a24      	cmp	r2, #36	; 0x24
 800de5c:	f200 8131 	bhi.w	800e0c2 <_realloc_r+0x2e2>
 800de60:	2a13      	cmp	r2, #19
 800de62:	f200 8104 	bhi.w	800e06e <_realloc_r+0x28e>
 800de66:	4603      	mov	r3, r0
 800de68:	4632      	mov	r2, r6
 800de6a:	6811      	ldr	r1, [r2, #0]
 800de6c:	6019      	str	r1, [r3, #0]
 800de6e:	6851      	ldr	r1, [r2, #4]
 800de70:	6059      	str	r1, [r3, #4]
 800de72:	6892      	ldr	r2, [r2, #8]
 800de74:	609a      	str	r2, [r3, #8]
 800de76:	4631      	mov	r1, r6
 800de78:	4648      	mov	r0, r9
 800de7a:	f7fe fe45 	bl	800cb08 <_free_r>
 800de7e:	4648      	mov	r0, r9
 800de80:	f7ff fc9e 	bl	800d7c0 <__malloc_unlock>
 800de84:	4638      	mov	r0, r7
 800de86:	b003      	add	sp, #12
 800de88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de8c:	f025 0507 	bic.w	r5, r5, #7
 800de90:	2d00      	cmp	r5, #0
 800de92:	462a      	mov	r2, r5
 800de94:	dabb      	bge.n	800de0e <_realloc_r+0x2e>
 800de96:	230c      	movs	r3, #12
 800de98:	2000      	movs	r0, #0
 800de9a:	f8c9 3000 	str.w	r3, [r9]
 800de9e:	b003      	add	sp, #12
 800dea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dea4:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800dea8:	ebc3 0a08 	rsb	sl, r3, r8
 800deac:	f8da 3004 	ldr.w	r3, [sl, #4]
 800deb0:	f023 0c03 	bic.w	ip, r3, #3
 800deb4:	eb04 030c 	add.w	r3, r4, ip
 800deb8:	4293      	cmp	r3, r2
 800deba:	dbbd      	blt.n	800de38 <_realloc_r+0x58>
 800debc:	4657      	mov	r7, sl
 800debe:	f8da 100c 	ldr.w	r1, [sl, #12]
 800dec2:	f857 0f08 	ldr.w	r0, [r7, #8]!
 800dec6:	1f22      	subs	r2, r4, #4
 800dec8:	2a24      	cmp	r2, #36	; 0x24
 800deca:	60c1      	str	r1, [r0, #12]
 800decc:	6088      	str	r0, [r1, #8]
 800dece:	f200 8117 	bhi.w	800e100 <_realloc_r+0x320>
 800ded2:	2a13      	cmp	r2, #19
 800ded4:	f240 8112 	bls.w	800e0fc <_realloc_r+0x31c>
 800ded8:	6831      	ldr	r1, [r6, #0]
 800deda:	f8ca 1008 	str.w	r1, [sl, #8]
 800dede:	6871      	ldr	r1, [r6, #4]
 800dee0:	f8ca 100c 	str.w	r1, [sl, #12]
 800dee4:	2a1b      	cmp	r2, #27
 800dee6:	f200 812b 	bhi.w	800e140 <_realloc_r+0x360>
 800deea:	3608      	adds	r6, #8
 800deec:	f10a 0210 	add.w	r2, sl, #16
 800def0:	6831      	ldr	r1, [r6, #0]
 800def2:	6011      	str	r1, [r2, #0]
 800def4:	6871      	ldr	r1, [r6, #4]
 800def6:	6051      	str	r1, [r2, #4]
 800def8:	68b1      	ldr	r1, [r6, #8]
 800defa:	6091      	str	r1, [r2, #8]
 800defc:	463e      	mov	r6, r7
 800defe:	461c      	mov	r4, r3
 800df00:	46d0      	mov	r8, sl
 800df02:	1b63      	subs	r3, r4, r5
 800df04:	2b0f      	cmp	r3, #15
 800df06:	d81d      	bhi.n	800df44 <_realloc_r+0x164>
 800df08:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800df0c:	f003 0301 	and.w	r3, r3, #1
 800df10:	4323      	orrs	r3, r4
 800df12:	4444      	add	r4, r8
 800df14:	f8c8 3004 	str.w	r3, [r8, #4]
 800df18:	6863      	ldr	r3, [r4, #4]
 800df1a:	f043 0301 	orr.w	r3, r3, #1
 800df1e:	6063      	str	r3, [r4, #4]
 800df20:	4648      	mov	r0, r9
 800df22:	f7ff fc4d 	bl	800d7c0 <__malloc_unlock>
 800df26:	4630      	mov	r0, r6
 800df28:	b003      	add	sp, #12
 800df2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df2e:	f021 0103 	bic.w	r1, r1, #3
 800df32:	4421      	add	r1, r4
 800df34:	4291      	cmp	r1, r2
 800df36:	db21      	blt.n	800df7c <_realloc_r+0x19c>
 800df38:	68c3      	ldr	r3, [r0, #12]
 800df3a:	6882      	ldr	r2, [r0, #8]
 800df3c:	460c      	mov	r4, r1
 800df3e:	60d3      	str	r3, [r2, #12]
 800df40:	609a      	str	r2, [r3, #8]
 800df42:	e7de      	b.n	800df02 <_realloc_r+0x122>
 800df44:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800df48:	eb08 0105 	add.w	r1, r8, r5
 800df4c:	f002 0201 	and.w	r2, r2, #1
 800df50:	4315      	orrs	r5, r2
 800df52:	f043 0201 	orr.w	r2, r3, #1
 800df56:	440b      	add	r3, r1
 800df58:	f8c8 5004 	str.w	r5, [r8, #4]
 800df5c:	604a      	str	r2, [r1, #4]
 800df5e:	685a      	ldr	r2, [r3, #4]
 800df60:	f042 0201 	orr.w	r2, r2, #1
 800df64:	3108      	adds	r1, #8
 800df66:	605a      	str	r2, [r3, #4]
 800df68:	4648      	mov	r0, r9
 800df6a:	f7fe fdcd 	bl	800cb08 <_free_r>
 800df6e:	e7d7      	b.n	800df20 <_realloc_r+0x140>
 800df70:	4611      	mov	r1, r2
 800df72:	b003      	add	sp, #12
 800df74:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df78:	f7ff b8ee 	b.w	800d158 <_malloc_r>
 800df7c:	f01e 0f01 	tst.w	lr, #1
 800df80:	f47f af5a 	bne.w	800de38 <_realloc_r+0x58>
 800df84:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800df88:	ebc3 0a08 	rsb	sl, r3, r8
 800df8c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800df90:	f023 0c03 	bic.w	ip, r3, #3
 800df94:	eb01 0e0c 	add.w	lr, r1, ip
 800df98:	4596      	cmp	lr, r2
 800df9a:	db8b      	blt.n	800deb4 <_realloc_r+0xd4>
 800df9c:	68c3      	ldr	r3, [r0, #12]
 800df9e:	6882      	ldr	r2, [r0, #8]
 800dfa0:	4657      	mov	r7, sl
 800dfa2:	60d3      	str	r3, [r2, #12]
 800dfa4:	609a      	str	r2, [r3, #8]
 800dfa6:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800dfaa:	f8da 300c 	ldr.w	r3, [sl, #12]
 800dfae:	60cb      	str	r3, [r1, #12]
 800dfb0:	1f22      	subs	r2, r4, #4
 800dfb2:	2a24      	cmp	r2, #36	; 0x24
 800dfb4:	6099      	str	r1, [r3, #8]
 800dfb6:	f200 8099 	bhi.w	800e0ec <_realloc_r+0x30c>
 800dfba:	2a13      	cmp	r2, #19
 800dfbc:	d962      	bls.n	800e084 <_realloc_r+0x2a4>
 800dfbe:	6833      	ldr	r3, [r6, #0]
 800dfc0:	f8ca 3008 	str.w	r3, [sl, #8]
 800dfc4:	6873      	ldr	r3, [r6, #4]
 800dfc6:	f8ca 300c 	str.w	r3, [sl, #12]
 800dfca:	2a1b      	cmp	r2, #27
 800dfcc:	f200 80a0 	bhi.w	800e110 <_realloc_r+0x330>
 800dfd0:	3608      	adds	r6, #8
 800dfd2:	f10a 0310 	add.w	r3, sl, #16
 800dfd6:	e056      	b.n	800e086 <_realloc_r+0x2a6>
 800dfd8:	f021 0b03 	bic.w	fp, r1, #3
 800dfdc:	44a3      	add	fp, r4
 800dfde:	f105 0010 	add.w	r0, r5, #16
 800dfe2:	4583      	cmp	fp, r0
 800dfe4:	da59      	bge.n	800e09a <_realloc_r+0x2ba>
 800dfe6:	f01e 0f01 	tst.w	lr, #1
 800dfea:	f47f af25 	bne.w	800de38 <_realloc_r+0x58>
 800dfee:	f856 1c08 	ldr.w	r1, [r6, #-8]
 800dff2:	ebc1 0a08 	rsb	sl, r1, r8
 800dff6:	f8da 1004 	ldr.w	r1, [sl, #4]
 800dffa:	f021 0c03 	bic.w	ip, r1, #3
 800dffe:	44e3      	add	fp, ip
 800e000:	4558      	cmp	r0, fp
 800e002:	f73f af57 	bgt.w	800deb4 <_realloc_r+0xd4>
 800e006:	4657      	mov	r7, sl
 800e008:	f8da 100c 	ldr.w	r1, [sl, #12]
 800e00c:	f857 0f08 	ldr.w	r0, [r7, #8]!
 800e010:	1f22      	subs	r2, r4, #4
 800e012:	2a24      	cmp	r2, #36	; 0x24
 800e014:	60c1      	str	r1, [r0, #12]
 800e016:	6088      	str	r0, [r1, #8]
 800e018:	f200 80b4 	bhi.w	800e184 <_realloc_r+0x3a4>
 800e01c:	2a13      	cmp	r2, #19
 800e01e:	f240 80a5 	bls.w	800e16c <_realloc_r+0x38c>
 800e022:	6831      	ldr	r1, [r6, #0]
 800e024:	f8ca 1008 	str.w	r1, [sl, #8]
 800e028:	6871      	ldr	r1, [r6, #4]
 800e02a:	f8ca 100c 	str.w	r1, [sl, #12]
 800e02e:	2a1b      	cmp	r2, #27
 800e030:	f200 80af 	bhi.w	800e192 <_realloc_r+0x3b2>
 800e034:	3608      	adds	r6, #8
 800e036:	f10a 0210 	add.w	r2, sl, #16
 800e03a:	6831      	ldr	r1, [r6, #0]
 800e03c:	6011      	str	r1, [r2, #0]
 800e03e:	6871      	ldr	r1, [r6, #4]
 800e040:	6051      	str	r1, [r2, #4]
 800e042:	68b1      	ldr	r1, [r6, #8]
 800e044:	6091      	str	r1, [r2, #8]
 800e046:	eb0a 0105 	add.w	r1, sl, r5
 800e04a:	ebc5 020b 	rsb	r2, r5, fp
 800e04e:	f042 0201 	orr.w	r2, r2, #1
 800e052:	6099      	str	r1, [r3, #8]
 800e054:	604a      	str	r2, [r1, #4]
 800e056:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e05a:	f003 0301 	and.w	r3, r3, #1
 800e05e:	431d      	orrs	r5, r3
 800e060:	4648      	mov	r0, r9
 800e062:	f8ca 5004 	str.w	r5, [sl, #4]
 800e066:	f7ff fbab 	bl	800d7c0 <__malloc_unlock>
 800e06a:	4638      	mov	r0, r7
 800e06c:	e75c      	b.n	800df28 <_realloc_r+0x148>
 800e06e:	6833      	ldr	r3, [r6, #0]
 800e070:	6003      	str	r3, [r0, #0]
 800e072:	6873      	ldr	r3, [r6, #4]
 800e074:	6043      	str	r3, [r0, #4]
 800e076:	2a1b      	cmp	r2, #27
 800e078:	d827      	bhi.n	800e0ca <_realloc_r+0x2ea>
 800e07a:	f100 0308 	add.w	r3, r0, #8
 800e07e:	f106 0208 	add.w	r2, r6, #8
 800e082:	e6f2      	b.n	800de6a <_realloc_r+0x8a>
 800e084:	463b      	mov	r3, r7
 800e086:	6832      	ldr	r2, [r6, #0]
 800e088:	601a      	str	r2, [r3, #0]
 800e08a:	6872      	ldr	r2, [r6, #4]
 800e08c:	605a      	str	r2, [r3, #4]
 800e08e:	68b2      	ldr	r2, [r6, #8]
 800e090:	609a      	str	r2, [r3, #8]
 800e092:	463e      	mov	r6, r7
 800e094:	4674      	mov	r4, lr
 800e096:	46d0      	mov	r8, sl
 800e098:	e733      	b.n	800df02 <_realloc_r+0x122>
 800e09a:	eb08 0105 	add.w	r1, r8, r5
 800e09e:	ebc5 0b0b 	rsb	fp, r5, fp
 800e0a2:	f04b 0201 	orr.w	r2, fp, #1
 800e0a6:	6099      	str	r1, [r3, #8]
 800e0a8:	604a      	str	r2, [r1, #4]
 800e0aa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e0ae:	f003 0301 	and.w	r3, r3, #1
 800e0b2:	431d      	orrs	r5, r3
 800e0b4:	4648      	mov	r0, r9
 800e0b6:	f846 5c04 	str.w	r5, [r6, #-4]
 800e0ba:	f7ff fb81 	bl	800d7c0 <__malloc_unlock>
 800e0be:	4630      	mov	r0, r6
 800e0c0:	e732      	b.n	800df28 <_realloc_r+0x148>
 800e0c2:	4631      	mov	r1, r6
 800e0c4:	f7ff fb16 	bl	800d6f4 <memmove>
 800e0c8:	e6d5      	b.n	800de76 <_realloc_r+0x96>
 800e0ca:	68b3      	ldr	r3, [r6, #8]
 800e0cc:	6083      	str	r3, [r0, #8]
 800e0ce:	68f3      	ldr	r3, [r6, #12]
 800e0d0:	60c3      	str	r3, [r0, #12]
 800e0d2:	2a24      	cmp	r2, #36	; 0x24
 800e0d4:	d028      	beq.n	800e128 <_realloc_r+0x348>
 800e0d6:	f100 0310 	add.w	r3, r0, #16
 800e0da:	f106 0210 	add.w	r2, r6, #16
 800e0de:	e6c4      	b.n	800de6a <_realloc_r+0x8a>
 800e0e0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800e0e4:	f023 0303 	bic.w	r3, r3, #3
 800e0e8:	441c      	add	r4, r3
 800e0ea:	e70a      	b.n	800df02 <_realloc_r+0x122>
 800e0ec:	4631      	mov	r1, r6
 800e0ee:	4638      	mov	r0, r7
 800e0f0:	4674      	mov	r4, lr
 800e0f2:	46d0      	mov	r8, sl
 800e0f4:	f7ff fafe 	bl	800d6f4 <memmove>
 800e0f8:	463e      	mov	r6, r7
 800e0fa:	e702      	b.n	800df02 <_realloc_r+0x122>
 800e0fc:	463a      	mov	r2, r7
 800e0fe:	e6f7      	b.n	800def0 <_realloc_r+0x110>
 800e100:	4631      	mov	r1, r6
 800e102:	4638      	mov	r0, r7
 800e104:	461c      	mov	r4, r3
 800e106:	46d0      	mov	r8, sl
 800e108:	f7ff faf4 	bl	800d6f4 <memmove>
 800e10c:	463e      	mov	r6, r7
 800e10e:	e6f8      	b.n	800df02 <_realloc_r+0x122>
 800e110:	68b3      	ldr	r3, [r6, #8]
 800e112:	f8ca 3010 	str.w	r3, [sl, #16]
 800e116:	68f3      	ldr	r3, [r6, #12]
 800e118:	f8ca 3014 	str.w	r3, [sl, #20]
 800e11c:	2a24      	cmp	r2, #36	; 0x24
 800e11e:	d01b      	beq.n	800e158 <_realloc_r+0x378>
 800e120:	3610      	adds	r6, #16
 800e122:	f10a 0318 	add.w	r3, sl, #24
 800e126:	e7ae      	b.n	800e086 <_realloc_r+0x2a6>
 800e128:	6933      	ldr	r3, [r6, #16]
 800e12a:	6103      	str	r3, [r0, #16]
 800e12c:	6973      	ldr	r3, [r6, #20]
 800e12e:	6143      	str	r3, [r0, #20]
 800e130:	f106 0218 	add.w	r2, r6, #24
 800e134:	f100 0318 	add.w	r3, r0, #24
 800e138:	e697      	b.n	800de6a <_realloc_r+0x8a>
 800e13a:	bf00      	nop
 800e13c:	200005d0 	.word	0x200005d0
 800e140:	68b1      	ldr	r1, [r6, #8]
 800e142:	f8ca 1010 	str.w	r1, [sl, #16]
 800e146:	68f1      	ldr	r1, [r6, #12]
 800e148:	f8ca 1014 	str.w	r1, [sl, #20]
 800e14c:	2a24      	cmp	r2, #36	; 0x24
 800e14e:	d00f      	beq.n	800e170 <_realloc_r+0x390>
 800e150:	3610      	adds	r6, #16
 800e152:	f10a 0218 	add.w	r2, sl, #24
 800e156:	e6cb      	b.n	800def0 <_realloc_r+0x110>
 800e158:	6933      	ldr	r3, [r6, #16]
 800e15a:	f8ca 3018 	str.w	r3, [sl, #24]
 800e15e:	6973      	ldr	r3, [r6, #20]
 800e160:	f8ca 301c 	str.w	r3, [sl, #28]
 800e164:	3618      	adds	r6, #24
 800e166:	f10a 0320 	add.w	r3, sl, #32
 800e16a:	e78c      	b.n	800e086 <_realloc_r+0x2a6>
 800e16c:	463a      	mov	r2, r7
 800e16e:	e764      	b.n	800e03a <_realloc_r+0x25a>
 800e170:	6932      	ldr	r2, [r6, #16]
 800e172:	f8ca 2018 	str.w	r2, [sl, #24]
 800e176:	6972      	ldr	r2, [r6, #20]
 800e178:	f8ca 201c 	str.w	r2, [sl, #28]
 800e17c:	3618      	adds	r6, #24
 800e17e:	f10a 0220 	add.w	r2, sl, #32
 800e182:	e6b5      	b.n	800def0 <_realloc_r+0x110>
 800e184:	4631      	mov	r1, r6
 800e186:	4638      	mov	r0, r7
 800e188:	9301      	str	r3, [sp, #4]
 800e18a:	f7ff fab3 	bl	800d6f4 <memmove>
 800e18e:	9b01      	ldr	r3, [sp, #4]
 800e190:	e759      	b.n	800e046 <_realloc_r+0x266>
 800e192:	68b1      	ldr	r1, [r6, #8]
 800e194:	f8ca 1010 	str.w	r1, [sl, #16]
 800e198:	68f1      	ldr	r1, [r6, #12]
 800e19a:	f8ca 1014 	str.w	r1, [sl, #20]
 800e19e:	2a24      	cmp	r2, #36	; 0x24
 800e1a0:	d003      	beq.n	800e1aa <_realloc_r+0x3ca>
 800e1a2:	3610      	adds	r6, #16
 800e1a4:	f10a 0218 	add.w	r2, sl, #24
 800e1a8:	e747      	b.n	800e03a <_realloc_r+0x25a>
 800e1aa:	6932      	ldr	r2, [r6, #16]
 800e1ac:	f8ca 2018 	str.w	r2, [sl, #24]
 800e1b0:	6972      	ldr	r2, [r6, #20]
 800e1b2:	f8ca 201c 	str.w	r2, [sl, #28]
 800e1b6:	3618      	adds	r6, #24
 800e1b8:	f10a 0220 	add.w	r2, sl, #32
 800e1bc:	e73d      	b.n	800e03a <_realloc_r+0x25a>
 800e1be:	bf00      	nop

0800e1c0 <_sbrk_r>:
 800e1c0:	b538      	push	{r3, r4, r5, lr}
 800e1c2:	4c07      	ldr	r4, [pc, #28]	; (800e1e0 <_sbrk_r+0x20>)
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	4605      	mov	r5, r0
 800e1c8:	4608      	mov	r0, r1
 800e1ca:	6023      	str	r3, [r4, #0]
 800e1cc:	f7f9 fc10 	bl	80079f0 <_sbrk>
 800e1d0:	1c43      	adds	r3, r0, #1
 800e1d2:	d000      	beq.n	800e1d6 <_sbrk_r+0x16>
 800e1d4:	bd38      	pop	{r3, r4, r5, pc}
 800e1d6:	6823      	ldr	r3, [r4, #0]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d0fb      	beq.n	800e1d4 <_sbrk_r+0x14>
 800e1dc:	602b      	str	r3, [r5, #0]
 800e1de:	bd38      	pop	{r3, r4, r5, pc}
 800e1e0:	20003870 	.word	0x20003870

0800e1e4 <__sread>:
 800e1e4:	b510      	push	{r4, lr}
 800e1e6:	460c      	mov	r4, r1
 800e1e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1ec:	f000 fa46 	bl	800e67c <_read_r>
 800e1f0:	2800      	cmp	r0, #0
 800e1f2:	db03      	blt.n	800e1fc <__sread+0x18>
 800e1f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e1f6:	4403      	add	r3, r0
 800e1f8:	6523      	str	r3, [r4, #80]	; 0x50
 800e1fa:	bd10      	pop	{r4, pc}
 800e1fc:	89a3      	ldrh	r3, [r4, #12]
 800e1fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e202:	81a3      	strh	r3, [r4, #12]
 800e204:	bd10      	pop	{r4, pc}
 800e206:	bf00      	nop

0800e208 <__swrite>:
 800e208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e20c:	4616      	mov	r6, r2
 800e20e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e212:	461f      	mov	r7, r3
 800e214:	05d3      	lsls	r3, r2, #23
 800e216:	460c      	mov	r4, r1
 800e218:	4605      	mov	r5, r0
 800e21a:	d507      	bpl.n	800e22c <__swrite+0x24>
 800e21c:	2200      	movs	r2, #0
 800e21e:	2302      	movs	r3, #2
 800e220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e224:	f000 fa14 	bl	800e650 <_lseek_r>
 800e228:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e22c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e230:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e234:	81a2      	strh	r2, [r4, #12]
 800e236:	463b      	mov	r3, r7
 800e238:	4632      	mov	r2, r6
 800e23a:	4628      	mov	r0, r5
 800e23c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e240:	f000 b8e8 	b.w	800e414 <_write_r>

0800e244 <__sseek>:
 800e244:	b510      	push	{r4, lr}
 800e246:	460c      	mov	r4, r1
 800e248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e24c:	f000 fa00 	bl	800e650 <_lseek_r>
 800e250:	89a3      	ldrh	r3, [r4, #12]
 800e252:	1c42      	adds	r2, r0, #1
 800e254:	bf0e      	itee	eq
 800e256:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e25a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e25e:	6520      	strne	r0, [r4, #80]	; 0x50
 800e260:	81a3      	strh	r3, [r4, #12]
 800e262:	bd10      	pop	{r4, pc}

0800e264 <__sclose>:
 800e264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e268:	f000 b91a 	b.w	800e4a0 <_close_r>

0800e26c <__ssprint_r>:
 800e26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e270:	6893      	ldr	r3, [r2, #8]
 800e272:	b083      	sub	sp, #12
 800e274:	4690      	mov	r8, r2
 800e276:	2b00      	cmp	r3, #0
 800e278:	d072      	beq.n	800e360 <__ssprint_r+0xf4>
 800e27a:	4683      	mov	fp, r0
 800e27c:	f04f 0900 	mov.w	r9, #0
 800e280:	6816      	ldr	r6, [r2, #0]
 800e282:	6808      	ldr	r0, [r1, #0]
 800e284:	688b      	ldr	r3, [r1, #8]
 800e286:	460d      	mov	r5, r1
 800e288:	464c      	mov	r4, r9
 800e28a:	2c00      	cmp	r4, #0
 800e28c:	d045      	beq.n	800e31a <__ssprint_r+0xae>
 800e28e:	429c      	cmp	r4, r3
 800e290:	461f      	mov	r7, r3
 800e292:	469a      	mov	sl, r3
 800e294:	d346      	bcc.n	800e324 <__ssprint_r+0xb8>
 800e296:	89ab      	ldrh	r3, [r5, #12]
 800e298:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800e29c:	d02d      	beq.n	800e2fa <__ssprint_r+0x8e>
 800e29e:	696f      	ldr	r7, [r5, #20]
 800e2a0:	6929      	ldr	r1, [r5, #16]
 800e2a2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800e2a6:	ebc1 0a00 	rsb	sl, r1, r0
 800e2aa:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 800e2ae:	1c60      	adds	r0, r4, #1
 800e2b0:	107f      	asrs	r7, r7, #1
 800e2b2:	4450      	add	r0, sl
 800e2b4:	42b8      	cmp	r0, r7
 800e2b6:	463a      	mov	r2, r7
 800e2b8:	bf84      	itt	hi
 800e2ba:	4607      	movhi	r7, r0
 800e2bc:	463a      	movhi	r2, r7
 800e2be:	055b      	lsls	r3, r3, #21
 800e2c0:	d533      	bpl.n	800e32a <__ssprint_r+0xbe>
 800e2c2:	4611      	mov	r1, r2
 800e2c4:	4658      	mov	r0, fp
 800e2c6:	f7fe ff47 	bl	800d158 <_malloc_r>
 800e2ca:	2800      	cmp	r0, #0
 800e2cc:	d037      	beq.n	800e33e <__ssprint_r+0xd2>
 800e2ce:	4652      	mov	r2, sl
 800e2d0:	6929      	ldr	r1, [r5, #16]
 800e2d2:	9001      	str	r0, [sp, #4]
 800e2d4:	f7f2 f9a6 	bl	8000624 <memcpy>
 800e2d8:	89aa      	ldrh	r2, [r5, #12]
 800e2da:	9b01      	ldr	r3, [sp, #4]
 800e2dc:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800e2e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e2e4:	81aa      	strh	r2, [r5, #12]
 800e2e6:	ebca 0207 	rsb	r2, sl, r7
 800e2ea:	eb03 000a 	add.w	r0, r3, sl
 800e2ee:	616f      	str	r7, [r5, #20]
 800e2f0:	612b      	str	r3, [r5, #16]
 800e2f2:	6028      	str	r0, [r5, #0]
 800e2f4:	60aa      	str	r2, [r5, #8]
 800e2f6:	4627      	mov	r7, r4
 800e2f8:	46a2      	mov	sl, r4
 800e2fa:	4652      	mov	r2, sl
 800e2fc:	4649      	mov	r1, r9
 800e2fe:	f7ff f9f9 	bl	800d6f4 <memmove>
 800e302:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800e306:	68ab      	ldr	r3, [r5, #8]
 800e308:	6828      	ldr	r0, [r5, #0]
 800e30a:	1bdb      	subs	r3, r3, r7
 800e30c:	4450      	add	r0, sl
 800e30e:	1b14      	subs	r4, r2, r4
 800e310:	60ab      	str	r3, [r5, #8]
 800e312:	6028      	str	r0, [r5, #0]
 800e314:	f8c8 4008 	str.w	r4, [r8, #8]
 800e318:	b314      	cbz	r4, 800e360 <__ssprint_r+0xf4>
 800e31a:	f8d6 9000 	ldr.w	r9, [r6]
 800e31e:	6874      	ldr	r4, [r6, #4]
 800e320:	3608      	adds	r6, #8
 800e322:	e7b2      	b.n	800e28a <__ssprint_r+0x1e>
 800e324:	4627      	mov	r7, r4
 800e326:	46a2      	mov	sl, r4
 800e328:	e7e7      	b.n	800e2fa <__ssprint_r+0x8e>
 800e32a:	4658      	mov	r0, fp
 800e32c:	f7ff fd58 	bl	800dde0 <_realloc_r>
 800e330:	4603      	mov	r3, r0
 800e332:	2800      	cmp	r0, #0
 800e334:	d1d7      	bne.n	800e2e6 <__ssprint_r+0x7a>
 800e336:	6929      	ldr	r1, [r5, #16]
 800e338:	4658      	mov	r0, fp
 800e33a:	f7fe fbe5 	bl	800cb08 <_free_r>
 800e33e:	230c      	movs	r3, #12
 800e340:	f8cb 3000 	str.w	r3, [fp]
 800e344:	89ab      	ldrh	r3, [r5, #12]
 800e346:	2200      	movs	r2, #0
 800e348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e34c:	f04f 30ff 	mov.w	r0, #4294967295
 800e350:	81ab      	strh	r3, [r5, #12]
 800e352:	f8c8 2008 	str.w	r2, [r8, #8]
 800e356:	f8c8 2004 	str.w	r2, [r8, #4]
 800e35a:	b003      	add	sp, #12
 800e35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e360:	2000      	movs	r0, #0
 800e362:	f8c8 0004 	str.w	r0, [r8, #4]
 800e366:	b003      	add	sp, #12
 800e368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e36c <__sprint_r.part.0>:
 800e36c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800e36e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e372:	049c      	lsls	r4, r3, #18
 800e374:	4692      	mov	sl, r2
 800e376:	d52c      	bpl.n	800e3d2 <__sprint_r.part.0+0x66>
 800e378:	6893      	ldr	r3, [r2, #8]
 800e37a:	6812      	ldr	r2, [r2, #0]
 800e37c:	b33b      	cbz	r3, 800e3ce <__sprint_r.part.0+0x62>
 800e37e:	460f      	mov	r7, r1
 800e380:	4680      	mov	r8, r0
 800e382:	f102 0908 	add.w	r9, r2, #8
 800e386:	e919 0060 	ldmdb	r9, {r5, r6}
 800e38a:	08b6      	lsrs	r6, r6, #2
 800e38c:	d017      	beq.n	800e3be <__sprint_r.part.0+0x52>
 800e38e:	3d04      	subs	r5, #4
 800e390:	2400      	movs	r4, #0
 800e392:	e001      	b.n	800e398 <__sprint_r.part.0+0x2c>
 800e394:	42a6      	cmp	r6, r4
 800e396:	d010      	beq.n	800e3ba <__sprint_r.part.0+0x4e>
 800e398:	463a      	mov	r2, r7
 800e39a:	f855 1f04 	ldr.w	r1, [r5, #4]!
 800e39e:	4640      	mov	r0, r8
 800e3a0:	f000 f91e 	bl	800e5e0 <_fputwc_r>
 800e3a4:	1c43      	adds	r3, r0, #1
 800e3a6:	f104 0401 	add.w	r4, r4, #1
 800e3aa:	d1f3      	bne.n	800e394 <__sprint_r.part.0+0x28>
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	f8ca 3008 	str.w	r3, [sl, #8]
 800e3b2:	f8ca 3004 	str.w	r3, [sl, #4]
 800e3b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3ba:	f8da 3008 	ldr.w	r3, [sl, #8]
 800e3be:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
 800e3c2:	f8ca 3008 	str.w	r3, [sl, #8]
 800e3c6:	f109 0908 	add.w	r9, r9, #8
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d1db      	bne.n	800e386 <__sprint_r.part.0+0x1a>
 800e3ce:	2000      	movs	r0, #0
 800e3d0:	e7ec      	b.n	800e3ac <__sprint_r.part.0+0x40>
 800e3d2:	f7fe fc81 	bl	800ccd8 <__sfvwrite_r>
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	f8ca 3008 	str.w	r3, [sl, #8]
 800e3dc:	f8ca 3004 	str.w	r3, [sl, #4]
 800e3e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e3e4 <__sprint_r>:
 800e3e4:	6893      	ldr	r3, [r2, #8]
 800e3e6:	b10b      	cbz	r3, 800e3ec <__sprint_r+0x8>
 800e3e8:	f7ff bfc0 	b.w	800e36c <__sprint_r.part.0>
 800e3ec:	b410      	push	{r4}
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	6053      	str	r3, [r2, #4]
 800e3f2:	bc10      	pop	{r4}
 800e3f4:	4770      	bx	lr
 800e3f6:	bf00      	nop

0800e3f8 <__ascii_wctomb>:
 800e3f8:	b121      	cbz	r1, 800e404 <__ascii_wctomb+0xc>
 800e3fa:	2aff      	cmp	r2, #255	; 0xff
 800e3fc:	d804      	bhi.n	800e408 <__ascii_wctomb+0x10>
 800e3fe:	700a      	strb	r2, [r1, #0]
 800e400:	2001      	movs	r0, #1
 800e402:	4770      	bx	lr
 800e404:	4608      	mov	r0, r1
 800e406:	4770      	bx	lr
 800e408:	238a      	movs	r3, #138	; 0x8a
 800e40a:	6003      	str	r3, [r0, #0]
 800e40c:	f04f 30ff 	mov.w	r0, #4294967295
 800e410:	4770      	bx	lr
 800e412:	bf00      	nop

0800e414 <_write_r>:
 800e414:	b570      	push	{r4, r5, r6, lr}
 800e416:	460d      	mov	r5, r1
 800e418:	4c08      	ldr	r4, [pc, #32]	; (800e43c <_write_r+0x28>)
 800e41a:	4611      	mov	r1, r2
 800e41c:	4606      	mov	r6, r0
 800e41e:	461a      	mov	r2, r3
 800e420:	4628      	mov	r0, r5
 800e422:	2300      	movs	r3, #0
 800e424:	6023      	str	r3, [r4, #0]
 800e426:	f7f9 fa65 	bl	80078f4 <_write>
 800e42a:	1c43      	adds	r3, r0, #1
 800e42c:	d000      	beq.n	800e430 <_write_r+0x1c>
 800e42e:	bd70      	pop	{r4, r5, r6, pc}
 800e430:	6823      	ldr	r3, [r4, #0]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d0fb      	beq.n	800e42e <_write_r+0x1a>
 800e436:	6033      	str	r3, [r6, #0]
 800e438:	bd70      	pop	{r4, r5, r6, pc}
 800e43a:	bf00      	nop
 800e43c:	20003870 	.word	0x20003870

0800e440 <_calloc_r>:
 800e440:	b510      	push	{r4, lr}
 800e442:	fb02 f101 	mul.w	r1, r2, r1
 800e446:	f7fe fe87 	bl	800d158 <_malloc_r>
 800e44a:	4604      	mov	r4, r0
 800e44c:	b1d8      	cbz	r0, 800e486 <_calloc_r+0x46>
 800e44e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800e452:	f022 0203 	bic.w	r2, r2, #3
 800e456:	3a04      	subs	r2, #4
 800e458:	2a24      	cmp	r2, #36	; 0x24
 800e45a:	d818      	bhi.n	800e48e <_calloc_r+0x4e>
 800e45c:	2a13      	cmp	r2, #19
 800e45e:	d914      	bls.n	800e48a <_calloc_r+0x4a>
 800e460:	2300      	movs	r3, #0
 800e462:	2a1b      	cmp	r2, #27
 800e464:	6003      	str	r3, [r0, #0]
 800e466:	6043      	str	r3, [r0, #4]
 800e468:	d916      	bls.n	800e498 <_calloc_r+0x58>
 800e46a:	2a24      	cmp	r2, #36	; 0x24
 800e46c:	6083      	str	r3, [r0, #8]
 800e46e:	60c3      	str	r3, [r0, #12]
 800e470:	bf11      	iteee	ne
 800e472:	f100 0210 	addne.w	r2, r0, #16
 800e476:	6103      	streq	r3, [r0, #16]
 800e478:	6143      	streq	r3, [r0, #20]
 800e47a:	f100 0218 	addeq.w	r2, r0, #24
 800e47e:	2300      	movs	r3, #0
 800e480:	6013      	str	r3, [r2, #0]
 800e482:	6053      	str	r3, [r2, #4]
 800e484:	6093      	str	r3, [r2, #8]
 800e486:	4620      	mov	r0, r4
 800e488:	bd10      	pop	{r4, pc}
 800e48a:	4602      	mov	r2, r0
 800e48c:	e7f7      	b.n	800e47e <_calloc_r+0x3e>
 800e48e:	2100      	movs	r1, #0
 800e490:	f7fa f900 	bl	8008694 <memset>
 800e494:	4620      	mov	r0, r4
 800e496:	bd10      	pop	{r4, pc}
 800e498:	f100 0208 	add.w	r2, r0, #8
 800e49c:	e7ef      	b.n	800e47e <_calloc_r+0x3e>
 800e49e:	bf00      	nop

0800e4a0 <_close_r>:
 800e4a0:	b538      	push	{r3, r4, r5, lr}
 800e4a2:	4c07      	ldr	r4, [pc, #28]	; (800e4c0 <_close_r+0x20>)
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	4605      	mov	r5, r0
 800e4a8:	4608      	mov	r0, r1
 800e4aa:	6023      	str	r3, [r4, #0]
 800e4ac:	f7f9 fa86 	bl	80079bc <_close>
 800e4b0:	1c43      	adds	r3, r0, #1
 800e4b2:	d000      	beq.n	800e4b6 <_close_r+0x16>
 800e4b4:	bd38      	pop	{r3, r4, r5, pc}
 800e4b6:	6823      	ldr	r3, [r4, #0]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d0fb      	beq.n	800e4b4 <_close_r+0x14>
 800e4bc:	602b      	str	r3, [r5, #0]
 800e4be:	bd38      	pop	{r3, r4, r5, pc}
 800e4c0:	20003870 	.word	0x20003870

0800e4c4 <_fclose_r>:
 800e4c4:	2900      	cmp	r1, #0
 800e4c6:	d03d      	beq.n	800e544 <_fclose_r+0x80>
 800e4c8:	b570      	push	{r4, r5, r6, lr}
 800e4ca:	4605      	mov	r5, r0
 800e4cc:	460c      	mov	r4, r1
 800e4ce:	b108      	cbz	r0, 800e4d4 <_fclose_r+0x10>
 800e4d0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e4d2:	b37b      	cbz	r3, 800e534 <_fclose_r+0x70>
 800e4d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4d8:	b90b      	cbnz	r3, 800e4de <_fclose_r+0x1a>
 800e4da:	2000      	movs	r0, #0
 800e4dc:	bd70      	pop	{r4, r5, r6, pc}
 800e4de:	4621      	mov	r1, r4
 800e4e0:	4628      	mov	r0, r5
 800e4e2:	f7fe f981 	bl	800c7e8 <__sflush_r>
 800e4e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e4e8:	4606      	mov	r6, r0
 800e4ea:	b133      	cbz	r3, 800e4fa <_fclose_r+0x36>
 800e4ec:	69e1      	ldr	r1, [r4, #28]
 800e4ee:	4628      	mov	r0, r5
 800e4f0:	4798      	blx	r3
 800e4f2:	2800      	cmp	r0, #0
 800e4f4:	bfb8      	it	lt
 800e4f6:	f04f 36ff 	movlt.w	r6, #4294967295
 800e4fa:	89a3      	ldrh	r3, [r4, #12]
 800e4fc:	061b      	lsls	r3, r3, #24
 800e4fe:	d41c      	bmi.n	800e53a <_fclose_r+0x76>
 800e500:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e502:	b141      	cbz	r1, 800e516 <_fclose_r+0x52>
 800e504:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800e508:	4299      	cmp	r1, r3
 800e50a:	d002      	beq.n	800e512 <_fclose_r+0x4e>
 800e50c:	4628      	mov	r0, r5
 800e50e:	f7fe fafb 	bl	800cb08 <_free_r>
 800e512:	2300      	movs	r3, #0
 800e514:	6323      	str	r3, [r4, #48]	; 0x30
 800e516:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e518:	b121      	cbz	r1, 800e524 <_fclose_r+0x60>
 800e51a:	4628      	mov	r0, r5
 800e51c:	f7fe faf4 	bl	800cb08 <_free_r>
 800e520:	2300      	movs	r3, #0
 800e522:	6463      	str	r3, [r4, #68]	; 0x44
 800e524:	f7fe fa9e 	bl	800ca64 <__sfp_lock_acquire>
 800e528:	2300      	movs	r3, #0
 800e52a:	81a3      	strh	r3, [r4, #12]
 800e52c:	f7fe fa9c 	bl	800ca68 <__sfp_lock_release>
 800e530:	4630      	mov	r0, r6
 800e532:	bd70      	pop	{r4, r5, r6, pc}
 800e534:	f7fe fa90 	bl	800ca58 <__sinit>
 800e538:	e7cc      	b.n	800e4d4 <_fclose_r+0x10>
 800e53a:	6921      	ldr	r1, [r4, #16]
 800e53c:	4628      	mov	r0, r5
 800e53e:	f7fe fae3 	bl	800cb08 <_free_r>
 800e542:	e7dd      	b.n	800e500 <_fclose_r+0x3c>
 800e544:	2000      	movs	r0, #0
 800e546:	4770      	bx	lr

0800e548 <__fputwc>:
 800e548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e54c:	b082      	sub	sp, #8
 800e54e:	4680      	mov	r8, r0
 800e550:	4689      	mov	r9, r1
 800e552:	4614      	mov	r4, r2
 800e554:	f7fe fd6c 	bl	800d030 <__locale_mb_cur_max>
 800e558:	2801      	cmp	r0, #1
 800e55a:	d033      	beq.n	800e5c4 <__fputwc+0x7c>
 800e55c:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800e560:	464a      	mov	r2, r9
 800e562:	a901      	add	r1, sp, #4
 800e564:	4640      	mov	r0, r8
 800e566:	f000 f8f5 	bl	800e754 <_wcrtomb_r>
 800e56a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e56e:	4682      	mov	sl, r0
 800e570:	d021      	beq.n	800e5b6 <__fputwc+0x6e>
 800e572:	b388      	cbz	r0, 800e5d8 <__fputwc+0x90>
 800e574:	f89d 6004 	ldrb.w	r6, [sp, #4]
 800e578:	2500      	movs	r5, #0
 800e57a:	e008      	b.n	800e58e <__fputwc+0x46>
 800e57c:	6823      	ldr	r3, [r4, #0]
 800e57e:	1c5a      	adds	r2, r3, #1
 800e580:	6022      	str	r2, [r4, #0]
 800e582:	701e      	strb	r6, [r3, #0]
 800e584:	3501      	adds	r5, #1
 800e586:	4555      	cmp	r5, sl
 800e588:	d226      	bcs.n	800e5d8 <__fputwc+0x90>
 800e58a:	ab01      	add	r3, sp, #4
 800e58c:	5d5e      	ldrb	r6, [r3, r5]
 800e58e:	68a3      	ldr	r3, [r4, #8]
 800e590:	3b01      	subs	r3, #1
 800e592:	2b00      	cmp	r3, #0
 800e594:	60a3      	str	r3, [r4, #8]
 800e596:	daf1      	bge.n	800e57c <__fputwc+0x34>
 800e598:	69a7      	ldr	r7, [r4, #24]
 800e59a:	42bb      	cmp	r3, r7
 800e59c:	4631      	mov	r1, r6
 800e59e:	4622      	mov	r2, r4
 800e5a0:	4640      	mov	r0, r8
 800e5a2:	db01      	blt.n	800e5a8 <__fputwc+0x60>
 800e5a4:	2e0a      	cmp	r6, #10
 800e5a6:	d1e9      	bne.n	800e57c <__fputwc+0x34>
 800e5a8:	f000 f87e 	bl	800e6a8 <__swbuf_r>
 800e5ac:	1c43      	adds	r3, r0, #1
 800e5ae:	d1e9      	bne.n	800e584 <__fputwc+0x3c>
 800e5b0:	b002      	add	sp, #8
 800e5b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5b6:	89a3      	ldrh	r3, [r4, #12]
 800e5b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5bc:	81a3      	strh	r3, [r4, #12]
 800e5be:	b002      	add	sp, #8
 800e5c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5c4:	f109 33ff 	add.w	r3, r9, #4294967295
 800e5c8:	2bfe      	cmp	r3, #254	; 0xfe
 800e5ca:	d8c7      	bhi.n	800e55c <__fputwc+0x14>
 800e5cc:	fa5f f689 	uxtb.w	r6, r9
 800e5d0:	4682      	mov	sl, r0
 800e5d2:	f88d 6004 	strb.w	r6, [sp, #4]
 800e5d6:	e7cf      	b.n	800e578 <__fputwc+0x30>
 800e5d8:	4648      	mov	r0, r9
 800e5da:	b002      	add	sp, #8
 800e5dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e5e0 <_fputwc_r>:
 800e5e0:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 800e5e4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800e5e8:	d10a      	bne.n	800e600 <_fputwc_r+0x20>
 800e5ea:	b410      	push	{r4}
 800e5ec:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800e5ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e5f2:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 800e5f6:	6654      	str	r4, [r2, #100]	; 0x64
 800e5f8:	8193      	strh	r3, [r2, #12]
 800e5fa:	bc10      	pop	{r4}
 800e5fc:	f7ff bfa4 	b.w	800e548 <__fputwc>
 800e600:	f7ff bfa2 	b.w	800e548 <__fputwc>

0800e604 <_fstat_r>:
 800e604:	b538      	push	{r3, r4, r5, lr}
 800e606:	460b      	mov	r3, r1
 800e608:	4c07      	ldr	r4, [pc, #28]	; (800e628 <_fstat_r+0x24>)
 800e60a:	4605      	mov	r5, r0
 800e60c:	4611      	mov	r1, r2
 800e60e:	4618      	mov	r0, r3
 800e610:	2300      	movs	r3, #0
 800e612:	6023      	str	r3, [r4, #0]
 800e614:	f7f9 f9da 	bl	80079cc <_fstat>
 800e618:	1c43      	adds	r3, r0, #1
 800e61a:	d000      	beq.n	800e61e <_fstat_r+0x1a>
 800e61c:	bd38      	pop	{r3, r4, r5, pc}
 800e61e:	6823      	ldr	r3, [r4, #0]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d0fb      	beq.n	800e61c <_fstat_r+0x18>
 800e624:	602b      	str	r3, [r5, #0]
 800e626:	bd38      	pop	{r3, r4, r5, pc}
 800e628:	20003870 	.word	0x20003870

0800e62c <_isatty_r>:
 800e62c:	b538      	push	{r3, r4, r5, lr}
 800e62e:	4c07      	ldr	r4, [pc, #28]	; (800e64c <_isatty_r+0x20>)
 800e630:	2300      	movs	r3, #0
 800e632:	4605      	mov	r5, r0
 800e634:	4608      	mov	r0, r1
 800e636:	6023      	str	r3, [r4, #0]
 800e638:	f7f9 fa18 	bl	8007a6c <_isatty>
 800e63c:	1c43      	adds	r3, r0, #1
 800e63e:	d000      	beq.n	800e642 <_isatty_r+0x16>
 800e640:	bd38      	pop	{r3, r4, r5, pc}
 800e642:	6823      	ldr	r3, [r4, #0]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d0fb      	beq.n	800e640 <_isatty_r+0x14>
 800e648:	602b      	str	r3, [r5, #0]
 800e64a:	bd38      	pop	{r3, r4, r5, pc}
 800e64c:	20003870 	.word	0x20003870

0800e650 <_lseek_r>:
 800e650:	b570      	push	{r4, r5, r6, lr}
 800e652:	460d      	mov	r5, r1
 800e654:	4c08      	ldr	r4, [pc, #32]	; (800e678 <_lseek_r+0x28>)
 800e656:	4611      	mov	r1, r2
 800e658:	4606      	mov	r6, r0
 800e65a:	461a      	mov	r2, r3
 800e65c:	4628      	mov	r0, r5
 800e65e:	2300      	movs	r3, #0
 800e660:	6023      	str	r3, [r4, #0]
 800e662:	f7f9 f991 	bl	8007988 <_lseek>
 800e666:	1c43      	adds	r3, r0, #1
 800e668:	d000      	beq.n	800e66c <_lseek_r+0x1c>
 800e66a:	bd70      	pop	{r4, r5, r6, pc}
 800e66c:	6823      	ldr	r3, [r4, #0]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d0fb      	beq.n	800e66a <_lseek_r+0x1a>
 800e672:	6033      	str	r3, [r6, #0]
 800e674:	bd70      	pop	{r4, r5, r6, pc}
 800e676:	bf00      	nop
 800e678:	20003870 	.word	0x20003870

0800e67c <_read_r>:
 800e67c:	b570      	push	{r4, r5, r6, lr}
 800e67e:	460d      	mov	r5, r1
 800e680:	4c08      	ldr	r4, [pc, #32]	; (800e6a4 <_read_r+0x28>)
 800e682:	4611      	mov	r1, r2
 800e684:	4606      	mov	r6, r0
 800e686:	461a      	mov	r2, r3
 800e688:	4628      	mov	r0, r5
 800e68a:	2300      	movs	r3, #0
 800e68c:	6023      	str	r3, [r4, #0]
 800e68e:	f7f9 f989 	bl	80079a4 <_read>
 800e692:	1c43      	adds	r3, r0, #1
 800e694:	d000      	beq.n	800e698 <_read_r+0x1c>
 800e696:	bd70      	pop	{r4, r5, r6, pc}
 800e698:	6823      	ldr	r3, [r4, #0]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d0fb      	beq.n	800e696 <_read_r+0x1a>
 800e69e:	6033      	str	r3, [r6, #0]
 800e6a0:	bd70      	pop	{r4, r5, r6, pc}
 800e6a2:	bf00      	nop
 800e6a4:	20003870 	.word	0x20003870

0800e6a8 <__swbuf_r>:
 800e6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6aa:	460d      	mov	r5, r1
 800e6ac:	4614      	mov	r4, r2
 800e6ae:	4606      	mov	r6, r0
 800e6b0:	b110      	cbz	r0, 800e6b8 <__swbuf_r+0x10>
 800e6b2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d04a      	beq.n	800e74e <__swbuf_r+0xa6>
 800e6b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e6bc:	69a3      	ldr	r3, [r4, #24]
 800e6be:	60a3      	str	r3, [r4, #8]
 800e6c0:	b291      	uxth	r1, r2
 800e6c2:	0708      	lsls	r0, r1, #28
 800e6c4:	d538      	bpl.n	800e738 <__swbuf_r+0x90>
 800e6c6:	6923      	ldr	r3, [r4, #16]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d035      	beq.n	800e738 <__swbuf_r+0x90>
 800e6cc:	0489      	lsls	r1, r1, #18
 800e6ce:	b2ef      	uxtb	r7, r5
 800e6d0:	d515      	bpl.n	800e6fe <__swbuf_r+0x56>
 800e6d2:	6822      	ldr	r2, [r4, #0]
 800e6d4:	6961      	ldr	r1, [r4, #20]
 800e6d6:	1ad3      	subs	r3, r2, r3
 800e6d8:	428b      	cmp	r3, r1
 800e6da:	da1c      	bge.n	800e716 <__swbuf_r+0x6e>
 800e6dc:	3301      	adds	r3, #1
 800e6de:	68a1      	ldr	r1, [r4, #8]
 800e6e0:	1c50      	adds	r0, r2, #1
 800e6e2:	3901      	subs	r1, #1
 800e6e4:	60a1      	str	r1, [r4, #8]
 800e6e6:	6020      	str	r0, [r4, #0]
 800e6e8:	7015      	strb	r5, [r2, #0]
 800e6ea:	6962      	ldr	r2, [r4, #20]
 800e6ec:	429a      	cmp	r2, r3
 800e6ee:	d01a      	beq.n	800e726 <__swbuf_r+0x7e>
 800e6f0:	89a3      	ldrh	r3, [r4, #12]
 800e6f2:	07db      	lsls	r3, r3, #31
 800e6f4:	d501      	bpl.n	800e6fa <__swbuf_r+0x52>
 800e6f6:	2f0a      	cmp	r7, #10
 800e6f8:	d015      	beq.n	800e726 <__swbuf_r+0x7e>
 800e6fa:	4638      	mov	r0, r7
 800e6fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6fe:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800e700:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e704:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800e708:	81a2      	strh	r2, [r4, #12]
 800e70a:	6822      	ldr	r2, [r4, #0]
 800e70c:	6661      	str	r1, [r4, #100]	; 0x64
 800e70e:	6961      	ldr	r1, [r4, #20]
 800e710:	1ad3      	subs	r3, r2, r3
 800e712:	428b      	cmp	r3, r1
 800e714:	dbe2      	blt.n	800e6dc <__swbuf_r+0x34>
 800e716:	4621      	mov	r1, r4
 800e718:	4630      	mov	r0, r6
 800e71a:	f7fe f909 	bl	800c930 <_fflush_r>
 800e71e:	b940      	cbnz	r0, 800e732 <__swbuf_r+0x8a>
 800e720:	6822      	ldr	r2, [r4, #0]
 800e722:	2301      	movs	r3, #1
 800e724:	e7db      	b.n	800e6de <__swbuf_r+0x36>
 800e726:	4621      	mov	r1, r4
 800e728:	4630      	mov	r0, r6
 800e72a:	f7fe f901 	bl	800c930 <_fflush_r>
 800e72e:	2800      	cmp	r0, #0
 800e730:	d0e3      	beq.n	800e6fa <__swbuf_r+0x52>
 800e732:	f04f 37ff 	mov.w	r7, #4294967295
 800e736:	e7e0      	b.n	800e6fa <__swbuf_r+0x52>
 800e738:	4621      	mov	r1, r4
 800e73a:	4630      	mov	r0, r6
 800e73c:	f7fd f82e 	bl	800b79c <__swsetup_r>
 800e740:	2800      	cmp	r0, #0
 800e742:	d1f6      	bne.n	800e732 <__swbuf_r+0x8a>
 800e744:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e748:	6923      	ldr	r3, [r4, #16]
 800e74a:	b291      	uxth	r1, r2
 800e74c:	e7be      	b.n	800e6cc <__swbuf_r+0x24>
 800e74e:	f7fe f983 	bl	800ca58 <__sinit>
 800e752:	e7b1      	b.n	800e6b8 <__swbuf_r+0x10>

0800e754 <_wcrtomb_r>:
 800e754:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e756:	4606      	mov	r6, r0
 800e758:	b085      	sub	sp, #20
 800e75a:	461f      	mov	r7, r3
 800e75c:	b189      	cbz	r1, 800e782 <_wcrtomb_r+0x2e>
 800e75e:	4c10      	ldr	r4, [pc, #64]	; (800e7a0 <_wcrtomb_r+0x4c>)
 800e760:	4d10      	ldr	r5, [pc, #64]	; (800e7a4 <_wcrtomb_r+0x50>)
 800e762:	6824      	ldr	r4, [r4, #0]
 800e764:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800e766:	2c00      	cmp	r4, #0
 800e768:	bf08      	it	eq
 800e76a:	462c      	moveq	r4, r5
 800e76c:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 800e770:	47a0      	blx	r4
 800e772:	1c43      	adds	r3, r0, #1
 800e774:	d103      	bne.n	800e77e <_wcrtomb_r+0x2a>
 800e776:	2200      	movs	r2, #0
 800e778:	238a      	movs	r3, #138	; 0x8a
 800e77a:	603a      	str	r2, [r7, #0]
 800e77c:	6033      	str	r3, [r6, #0]
 800e77e:	b005      	add	sp, #20
 800e780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e782:	460c      	mov	r4, r1
 800e784:	4906      	ldr	r1, [pc, #24]	; (800e7a0 <_wcrtomb_r+0x4c>)
 800e786:	4a07      	ldr	r2, [pc, #28]	; (800e7a4 <_wcrtomb_r+0x50>)
 800e788:	6809      	ldr	r1, [r1, #0]
 800e78a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e78c:	2900      	cmp	r1, #0
 800e78e:	bf08      	it	eq
 800e790:	4611      	moveq	r1, r2
 800e792:	4622      	mov	r2, r4
 800e794:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
 800e798:	a901      	add	r1, sp, #4
 800e79a:	47a0      	blx	r4
 800e79c:	e7e9      	b.n	800e772 <_wcrtomb_r+0x1e>
 800e79e:	bf00      	nop
 800e7a0:	20000460 	.word	0x20000460
 800e7a4:	20000464 	.word	0x20000464

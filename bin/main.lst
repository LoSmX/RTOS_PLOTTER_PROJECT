
./bin/main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000200 <OSStartHighRdy>:
@              e) Enable interrupts (tasks will run with interrupts enabled).
@********************************************************************************************************

.thumb_func
OSStartHighRdy:
    CPSID   I                                                   @ Prevent interruption during context switch
 8000200:	b672      	cpsid	i
    MOVW    R0, #:lower16:NVIC_SYSPRI14                         @ Set the PendSV exception priority
 8000202:	f64e 5022 	movw	r0, #60706	; 0xed22
    MOVT    R0, #:upper16:NVIC_SYSPRI14
 8000206:	f2ce 0000 	movt	r0, #57344	; 0xe000

    MOVW    R1, #:lower16:NVIC_PENDSV_PRI
 800020a:	f240 01ff 	movw	r1, #255	; 0xff
    MOVT    R1, #:upper16:NVIC_PENDSV_PRI
 800020e:	f2c0 0100 	movt	r1, #0
    STRB    R1, [R0]
 8000212:	7001      	strb	r1, [r0, #0]

    MOVW    R0, #:lower16:OS_CPU_ExceptStkBase                  @ Initialize the MSP to the OS_CPU_ExceptStkBase
 8000214:	f643 0044 	movw	r0, #14404	; 0x3844
    MOVT    R0, #:upper16:OS_CPU_ExceptStkBase
 8000218:	f2c2 0000 	movt	r0, #8192	; 0x2000
    LDR     R1, [R0]
 800021c:	6801      	ldr	r1, [r0, #0]
    MSR     MSP, R1
 800021e:	f381 8808 	msr	MSP, r1

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 8000222:	f242 50e0 	movw	r0, #9696	; 0x25e0
    MOVT    R0, #:upper16:OSPrioCur
 8000226:	f2c2 0000 	movt	r0, #8192	; 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 800022a:	f242 51d4 	movw	r1, #9684	; 0x25d4
    MOVT    R1, #:upper16:OSPrioHighRdy
 800022e:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDRB    R2, [R1]
 8000232:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 8000234:	7002      	strb	r2, [r0, #0]

    MOVW    R5, #:lower16:OSTCBCurPtr
 8000236:	f242 65ac 	movw	r5, #9900	; 0x26ac
    MOVT    R5, #:upper16:OSTCBCurPtr
 800023a:	f2c2 0500 	movt	r5, #8192	; 0x2000
    MOVW    R1, #:lower16:OSTCBHighRdyPtr                       @ OSTCBCurPtr = OSTCBHighRdyPtr;
 800023e:	f242 61b8 	movw	r1, #9912	; 0x26b8
    MOVT    R1, #:upper16:OSTCBHighRdyPtr
 8000242:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDR     R2, [R1]
 8000246:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R5]
 8000248:	602a      	str	r2, [r5, #0]

    LDR     R0, [R2]                                            @ R0 is new process SP; SP = OSTCBHighRdyPtr->StkPtr;
 800024a:	6810      	ldr	r0, [r2, #0]
    MSR     PSP, R0                                             @ Load PSP with new process SP
 800024c:	f380 8809 	msr	PSP, r0

    MRS     R0, CONTROL
 8000250:	f3ef 8014 	mrs	r0, CONTROL
    ORR     R0, R0, #2
 8000254:	f040 0002 	orr.w	r0, r0, #2
    MSR     CONTROL, R0
 8000258:	f380 8814 	msr	CONTROL, r0
    ISB                                                         @ Sync instruction stream
 800025c:	f3bf 8f6f 	isb	sy

    LDMFD    SP!, {R4-R11}                                      @ Restore r4-11 from new process stack
 8000260:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    LDMFD    SP!, {R0-R3}                                       @ Restore r0, r3
 8000264:	bc0f      	pop	{r0, r1, r2, r3}
    LDMFD    SP!, {R12, LR}                                     @ Load R12 and LR
 8000266:	e8bd 5000 	ldmia.w	sp!, {ip, lr}
    LDMFD    SP!, {R1, R2}                                      @ Load PC and discard xPSR
 800026a:	bc06      	pop	{r1, r2}
    CPSIE    I
 800026c:	b662      	cpsie	i
    BX       R1
 800026e:	4708      	bx	r1

08000270 <OSCtxSw>:
@              triggers the PendSV exception which is where the real work is done.
@********************************************************************************************************

.thumb_func
OSCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 8000270:	4818      	ldr	r0, [pc, #96]	; (80002d4 <OS_CPU_PendSVHandler+0x50>)
    LDR     R1, =NVIC_PENDSVSET
 8000272:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    STR     R1, [R0]
 8000276:	6001      	str	r1, [r0, #0]
    BX      LR
 8000278:	4770      	bx	lr

0800027a <OSIntCtxSw>:
@              be handled when there are no more interrupts active and interrupts are enabled.
@********************************************************************************************************

.thumb_func
OSIntCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 800027a:	4816      	ldr	r0, [pc, #88]	; (80002d4 <OS_CPU_PendSVHandler+0x50>)
    LDR     R1, =NVIC_PENDSVSET
 800027c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    STR     R1, [R0]
 8000280:	6001      	str	r1, [r0, #0]
    BX      LR
 8000282:	4770      	bx	lr

08000284 <OS_CPU_PendSVHandler>:
@              therefore safe to assume that context being switched out was using the process stack (PSP).
@********************************************************************************************************

.thumb_func
OS_CPU_PendSVHandler:
    CPSID   I                                                   @ Prevent interruption during context switch
 8000284:	b672      	cpsid	i
    MRS     R0, PSP                                             @ PSP is process stack pointer
 8000286:	f3ef 8009 	mrs	r0, PSP
    STMFD   R0!, {R4-R11}                                       @ Save remaining regs r4-11 on process stack
 800028a:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

    MOVW    R5, #:lower16:OSTCBCurPtr                           @ OSTCBCurPtr->OSTCBStkPtr = SP;
 800028e:	f242 65ac 	movw	r5, #9900	; 0x26ac
    MOVT    R5, #:upper16:OSTCBCurPtr
 8000292:	f2c2 0500 	movt	r5, #8192	; 0x2000
    LDR     R6, [R5]
 8000296:	682e      	ldr	r6, [r5, #0]
    STR     R0, [R6]                                            @ R0 is SP of process being switched out
 8000298:	6030      	str	r0, [r6, #0]

                                                                @ At this point, entire context of process has been saved
    MOV     R4, LR                                              @ Save LR exc_return value
 800029a:	4674      	mov	r4, lr
    BL      OSTaskSwHook                                        @ OSTaskSwHook();
 800029c:	f005 fece 	bl	800603c <OSTaskSwHook>

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 80002a0:	f242 50e0 	movw	r0, #9696	; 0x25e0
    MOVT    R0, #:upper16:OSPrioCur
 80002a4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 80002a8:	f242 51d4 	movw	r1, #9684	; 0x25d4
    MOVT    R1, #:upper16:OSPrioHighRdy
 80002ac:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDRB    R2, [R1]
 80002b0:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 80002b2:	7002      	strb	r2, [r0, #0]

    MOVW    R1, #:lower16:OSTCBHighRdyPtr                      @ OSTCBCurPtr = OSTCBHighRdyPtr;
 80002b4:	f242 61b8 	movw	r1, #9912	; 0x26b8
    MOVT    R1, #:upper16:OSTCBHighRdyPtr
 80002b8:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDR     R2, [R1]
 80002bc:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R5]
 80002be:	602a      	str	r2, [r5, #0]

    ORR     LR, R4, #0xF4                                       @ Ensure exception return uses process stack
 80002c0:	f044 0ef4 	orr.w	lr, r4, #244	; 0xf4
    LDR     R0, [R2]                                            @ R0 is new process SP; SP = OSTCBHighRdyPtr->StkPtr;
 80002c4:	6810      	ldr	r0, [r2, #0]
    LDMFD   R0!, {R4-R11}                                       @ Restore r4-11 from new process stack
 80002c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, R0                                             @ Load PSP with new process SP
 80002ca:	f380 8809 	msr	PSP, r0
    CPSIE   I
 80002ce:	b662      	cpsie	i
    BX      LR                                                  @ Exception return will restore remaining context
 80002d0:	4770      	bx	lr
 80002d2:	0000      	.short	0x0000
@              triggers the PendSV exception which is where the real work is done.
@********************************************************************************************************

.thumb_func
OSCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 80002d4:	e000ed04 	.word	0xe000ed04

080002d8 <CPU_IntDis>:
@              void  CPU_IntEn (void);
@********************************************************************************************************

.thumb_func
CPU_IntDis:
        CPSID   I
 80002d8:	b672      	cpsid	i
        BX      LR
 80002da:	4770      	bx	lr

080002dc <CPU_IntEn>:

.thumb_func
CPU_IntEn:
        CPSIE   I
 80002dc:	b662      	cpsie	i
        BX      LR
 80002de:	4770      	bx	lr

080002e0 <CPU_SR_Save>:
@                       }
@********************************************************************************************************

.thumb_func
CPU_SR_Save:
        MRS     R0, PRIMASK                     @ Set prio int mask to mask all (except faults)
 80002e0:	f3ef 8010 	mrs	r0, PRIMASK
        CPSID   I
 80002e4:	b672      	cpsid	i
        BX      LR
 80002e6:	4770      	bx	lr

080002e8 <CPU_SR_Restore>:

.thumb_func
CPU_SR_Restore:                                  @ See Note #2.
        MSR     PRIMASK, R0
 80002e8:	f380 8810 	msr	PRIMASK, r0
        BX      LR
 80002ec:	4770      	bx	lr

080002ee <CPU_WaitForInt>:
@ Argument(s) : none.
@********************************************************************************************************

.thumb_func
CPU_WaitForInt:
        WFI                                     @ Wait for interrupt
 80002ee:	bf30      	wfi
        BX      LR
 80002f0:	4770      	bx	lr

080002f2 <CPU_WaitForExcept>:
@ Argument(s) : none.
@********************************************************************************************************

.thumb_func
CPU_WaitForExcept:
        WFE                                     @ Wait for exception
 80002f2:	bf20      	wfe
        BX      LR
 80002f4:	4770      	bx	lr

080002f6 <CPU_CntLeadZeros>:
@                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
@********************************************************************************************************

.thumb_func
CPU_CntLeadZeros:
        CLZ     R0, R0                          @ Count leading zeros
 80002f6:	fab0 f080 	clz	r0, r0
        BX      LR
 80002fa:	4770      	bx	lr

080002fc <CPU_CntTrailZeros>:
@                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
@********************************************************************************************************

.thumb_func
CPU_CntTrailZeros:
        RBIT    R0, R0                          @ Reverse bits
 80002fc:	fa90 f0a0 	rbit	r0, r0
        CLZ     R0, R0                          @ Count trailing zeros
 8000300:	fab0 f080 	clz	r0, r0
        BX      LR
 8000304:	4770      	bx	lr

08000306 <CPU_RevBits>:
@                       'val's final bit  N       =  'val's original bit  0
@********************************************************************************************************

.thumb_func
CPU_RevBits:
        RBIT    R0, R0                          @ Reverse bits
 8000306:	fa90 f0a0 	rbit	r0, r0
        BX      LR
 800030a:	4770      	bx	lr

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b97e 	b.w	8000620 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	468c      	mov	ip, r1
 8000342:	460e      	mov	r6, r1
 8000344:	4604      	mov	r4, r0
 8000346:	9d08      	ldr	r5, [sp, #32]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d150      	bne.n	80003ee <__udivmoddi4+0xb2>
 800034c:	428a      	cmp	r2, r1
 800034e:	4617      	mov	r7, r2
 8000350:	d96c      	bls.n	800042c <__udivmoddi4+0xf0>
 8000352:	fab2 fe82 	clz	lr, r2
 8000356:	f1be 0f00 	cmp.w	lr, #0
 800035a:	d00b      	beq.n	8000374 <__udivmoddi4+0x38>
 800035c:	f1ce 0420 	rsb	r4, lr, #32
 8000360:	fa20 f404 	lsr.w	r4, r0, r4
 8000364:	fa01 f60e 	lsl.w	r6, r1, lr
 8000368:	ea44 0c06 	orr.w	ip, r4, r6
 800036c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000370:	fa00 f40e 	lsl.w	r4, r0, lr
 8000374:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000378:	0c22      	lsrs	r2, r4, #16
 800037a:	fbbc f0f9 	udiv	r0, ip, r9
 800037e:	fa1f f887 	uxth.w	r8, r7
 8000382:	fb09 c610 	mls	r6, r9, r0, ip
 8000386:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800038a:	fb00 f308 	mul.w	r3, r0, r8
 800038e:	42b3      	cmp	r3, r6
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0x6a>
 8000392:	19f6      	adds	r6, r6, r7
 8000394:	f100 32ff 	add.w	r2, r0, #4294967295
 8000398:	f080 8122 	bcs.w	80005e0 <__udivmoddi4+0x2a4>
 800039c:	42b3      	cmp	r3, r6
 800039e:	f240 811f 	bls.w	80005e0 <__udivmoddi4+0x2a4>
 80003a2:	3802      	subs	r0, #2
 80003a4:	443e      	add	r6, r7
 80003a6:	1af6      	subs	r6, r6, r3
 80003a8:	b2a2      	uxth	r2, r4
 80003aa:	fbb6 f3f9 	udiv	r3, r6, r9
 80003ae:	fb09 6613 	mls	r6, r9, r3, r6
 80003b2:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 80003b6:	fb03 f808 	mul.w	r8, r3, r8
 80003ba:	45a0      	cmp	r8, r4
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0x96>
 80003be:	19e4      	adds	r4, r4, r7
 80003c0:	f103 32ff 	add.w	r2, r3, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x2a0>
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x2a0>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ebc8 0404 	rsb	r4, r8, r4
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	2100      	movs	r1, #0
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d062      	beq.n	80004a6 <__udivmoddi4+0x16a>
 80003e0:	fa24 f40e 	lsr.w	r4, r4, lr
 80003e4:	2300      	movs	r3, #0
 80003e6:	602c      	str	r4, [r5, #0]
 80003e8:	606b      	str	r3, [r5, #4]
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	428b      	cmp	r3, r1
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0xc6>
 80003f2:	2d00      	cmp	r5, #0
 80003f4:	d055      	beq.n	80004a2 <__udivmoddi4+0x166>
 80003f6:	2100      	movs	r1, #0
 80003f8:	e885 0041 	stmia.w	r5, {r0, r6}
 80003fc:	4608      	mov	r0, r1
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f183 	clz	r1, r3
 8000406:	2900      	cmp	r1, #0
 8000408:	f040 8090 	bne.w	800052c <__udivmoddi4+0x1f0>
 800040c:	42b3      	cmp	r3, r6
 800040e:	d302      	bcc.n	8000416 <__udivmoddi4+0xda>
 8000410:	4282      	cmp	r2, r0
 8000412:	f200 80f8 	bhi.w	8000606 <__udivmoddi4+0x2ca>
 8000416:	1a84      	subs	r4, r0, r2
 8000418:	eb66 0603 	sbc.w	r6, r6, r3
 800041c:	2001      	movs	r0, #1
 800041e:	46b4      	mov	ip, r6
 8000420:	2d00      	cmp	r5, #0
 8000422:	d040      	beq.n	80004a6 <__udivmoddi4+0x16a>
 8000424:	e885 1010 	stmia.w	r5, {r4, ip}
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	b912      	cbnz	r2, 8000434 <__udivmoddi4+0xf8>
 800042e:	2701      	movs	r7, #1
 8000430:	fbb7 f7f2 	udiv	r7, r7, r2
 8000434:	fab7 fe87 	clz	lr, r7
 8000438:	f1be 0f00 	cmp.w	lr, #0
 800043c:	d135      	bne.n	80004aa <__udivmoddi4+0x16e>
 800043e:	1bf3      	subs	r3, r6, r7
 8000440:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	2101      	movs	r1, #1
 800044a:	fbb3 f0f8 	udiv	r0, r3, r8
 800044e:	0c22      	lsrs	r2, r4, #16
 8000450:	fb08 3610 	mls	r6, r8, r0, r3
 8000454:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000458:	fb0c f300 	mul.w	r3, ip, r0
 800045c:	42b3      	cmp	r3, r6
 800045e:	d907      	bls.n	8000470 <__udivmoddi4+0x134>
 8000460:	19f6      	adds	r6, r6, r7
 8000462:	f100 32ff 	add.w	r2, r0, #4294967295
 8000466:	d202      	bcs.n	800046e <__udivmoddi4+0x132>
 8000468:	42b3      	cmp	r3, r6
 800046a:	f200 80ce 	bhi.w	800060a <__udivmoddi4+0x2ce>
 800046e:	4610      	mov	r0, r2
 8000470:	1af6      	subs	r6, r6, r3
 8000472:	b2a2      	uxth	r2, r4
 8000474:	fbb6 f3f8 	udiv	r3, r6, r8
 8000478:	fb08 6613 	mls	r6, r8, r3, r6
 800047c:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000480:	fb0c fc03 	mul.w	ip, ip, r3
 8000484:	45a4      	cmp	ip, r4
 8000486:	d907      	bls.n	8000498 <__udivmoddi4+0x15c>
 8000488:	19e4      	adds	r4, r4, r7
 800048a:	f103 32ff 	add.w	r2, r3, #4294967295
 800048e:	d202      	bcs.n	8000496 <__udivmoddi4+0x15a>
 8000490:	45a4      	cmp	ip, r4
 8000492:	f200 80b5 	bhi.w	8000600 <__udivmoddi4+0x2c4>
 8000496:	4613      	mov	r3, r2
 8000498:	ebcc 0404 	rsb	r4, ip, r4
 800049c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a0:	e79c      	b.n	80003dc <__udivmoddi4+0xa0>
 80004a2:	4629      	mov	r1, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004aa:	f1ce 0120 	rsb	r1, lr, #32
 80004ae:	fa06 f30e 	lsl.w	r3, r6, lr
 80004b2:	fa07 f70e 	lsl.w	r7, r7, lr
 80004b6:	fa20 f901 	lsr.w	r9, r0, r1
 80004ba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80004be:	40ce      	lsrs	r6, r1
 80004c0:	ea49 0903 	orr.w	r9, r9, r3
 80004c4:	fbb6 faf8 	udiv	sl, r6, r8
 80004c8:	ea4f 4419 	mov.w	r4, r9, lsr #16
 80004cc:	fb08 661a 	mls	r6, r8, sl, r6
 80004d0:	fa1f fc87 	uxth.w	ip, r7
 80004d4:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 80004d8:	fb0a f20c 	mul.w	r2, sl, ip
 80004dc:	429a      	cmp	r2, r3
 80004de:	fa00 f40e 	lsl.w	r4, r0, lr
 80004e2:	d90a      	bls.n	80004fa <__udivmoddi4+0x1be>
 80004e4:	19db      	adds	r3, r3, r7
 80004e6:	f10a 31ff 	add.w	r1, sl, #4294967295
 80004ea:	f080 8087 	bcs.w	80005fc <__udivmoddi4+0x2c0>
 80004ee:	429a      	cmp	r2, r3
 80004f0:	f240 8084 	bls.w	80005fc <__udivmoddi4+0x2c0>
 80004f4:	f1aa 0a02 	sub.w	sl, sl, #2
 80004f8:	443b      	add	r3, r7
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	fa1f f989 	uxth.w	r9, r9
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 800050c:	fb01 f60c 	mul.w	r6, r1, ip
 8000510:	429e      	cmp	r6, r3
 8000512:	d907      	bls.n	8000524 <__udivmoddi4+0x1e8>
 8000514:	19db      	adds	r3, r3, r7
 8000516:	f101 32ff 	add.w	r2, r1, #4294967295
 800051a:	d26b      	bcs.n	80005f4 <__udivmoddi4+0x2b8>
 800051c:	429e      	cmp	r6, r3
 800051e:	d969      	bls.n	80005f4 <__udivmoddi4+0x2b8>
 8000520:	3902      	subs	r1, #2
 8000522:	443b      	add	r3, r7
 8000524:	1b9b      	subs	r3, r3, r6
 8000526:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800052a:	e78e      	b.n	800044a <__udivmoddi4+0x10e>
 800052c:	f1c1 0e20 	rsb	lr, r1, #32
 8000530:	fa22 f40e 	lsr.w	r4, r2, lr
 8000534:	408b      	lsls	r3, r1
 8000536:	4323      	orrs	r3, r4
 8000538:	fa20 f70e 	lsr.w	r7, r0, lr
 800053c:	fa06 f401 	lsl.w	r4, r6, r1
 8000540:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000544:	fa26 f60e 	lsr.w	r6, r6, lr
 8000548:	433c      	orrs	r4, r7
 800054a:	fbb6 f9fc 	udiv	r9, r6, ip
 800054e:	0c27      	lsrs	r7, r4, #16
 8000550:	fb0c 6619 	mls	r6, ip, r9, r6
 8000554:	fa1f f883 	uxth.w	r8, r3
 8000558:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 800055c:	fb09 f708 	mul.w	r7, r9, r8
 8000560:	42b7      	cmp	r7, r6
 8000562:	fa02 f201 	lsl.w	r2, r2, r1
 8000566:	fa00 fa01 	lsl.w	sl, r0, r1
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x242>
 800056c:	18f6      	adds	r6, r6, r3
 800056e:	f109 30ff 	add.w	r0, r9, #4294967295
 8000572:	d241      	bcs.n	80005f8 <__udivmoddi4+0x2bc>
 8000574:	42b7      	cmp	r7, r6
 8000576:	d93f      	bls.n	80005f8 <__udivmoddi4+0x2bc>
 8000578:	f1a9 0902 	sub.w	r9, r9, #2
 800057c:	441e      	add	r6, r3
 800057e:	1bf6      	subs	r6, r6, r7
 8000580:	b2a0      	uxth	r0, r4
 8000582:	fbb6 f4fc 	udiv	r4, r6, ip
 8000586:	fb0c 6614 	mls	r6, ip, r4, r6
 800058a:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 800058e:	fb04 f808 	mul.w	r8, r4, r8
 8000592:	45b8      	cmp	r8, r7
 8000594:	d907      	bls.n	80005a6 <__udivmoddi4+0x26a>
 8000596:	18ff      	adds	r7, r7, r3
 8000598:	f104 30ff 	add.w	r0, r4, #4294967295
 800059c:	d228      	bcs.n	80005f0 <__udivmoddi4+0x2b4>
 800059e:	45b8      	cmp	r8, r7
 80005a0:	d926      	bls.n	80005f0 <__udivmoddi4+0x2b4>
 80005a2:	3c02      	subs	r4, #2
 80005a4:	441f      	add	r7, r3
 80005a6:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 80005aa:	ebc8 0707 	rsb	r7, r8, r7
 80005ae:	fba0 8902 	umull	r8, r9, r0, r2
 80005b2:	454f      	cmp	r7, r9
 80005b4:	4644      	mov	r4, r8
 80005b6:	464e      	mov	r6, r9
 80005b8:	d314      	bcc.n	80005e4 <__udivmoddi4+0x2a8>
 80005ba:	d029      	beq.n	8000610 <__udivmoddi4+0x2d4>
 80005bc:	b365      	cbz	r5, 8000618 <__udivmoddi4+0x2dc>
 80005be:	ebba 0304 	subs.w	r3, sl, r4
 80005c2:	eb67 0706 	sbc.w	r7, r7, r6
 80005c6:	fa07 fe0e 	lsl.w	lr, r7, lr
 80005ca:	40cb      	lsrs	r3, r1
 80005cc:	40cf      	lsrs	r7, r1
 80005ce:	ea4e 0303 	orr.w	r3, lr, r3
 80005d2:	e885 0088 	stmia.w	r5, {r3, r7}
 80005d6:	2100      	movs	r1, #0
 80005d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005dc:	4613      	mov	r3, r2
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x96>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e6e0      	b.n	80003a6 <__udivmoddi4+0x6a>
 80005e4:	ebb8 0402 	subs.w	r4, r8, r2
 80005e8:	eb69 0603 	sbc.w	r6, r9, r3
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7e5      	b.n	80005bc <__udivmoddi4+0x280>
 80005f0:	4604      	mov	r4, r0
 80005f2:	e7d8      	b.n	80005a6 <__udivmoddi4+0x26a>
 80005f4:	4611      	mov	r1, r2
 80005f6:	e795      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005f8:	4681      	mov	r9, r0
 80005fa:	e7c0      	b.n	800057e <__udivmoddi4+0x242>
 80005fc:	468a      	mov	sl, r1
 80005fe:	e77c      	b.n	80004fa <__udivmoddi4+0x1be>
 8000600:	3b02      	subs	r3, #2
 8000602:	443c      	add	r4, r7
 8000604:	e748      	b.n	8000498 <__udivmoddi4+0x15c>
 8000606:	4608      	mov	r0, r1
 8000608:	e70a      	b.n	8000420 <__udivmoddi4+0xe4>
 800060a:	3802      	subs	r0, #2
 800060c:	443e      	add	r6, r7
 800060e:	e72f      	b.n	8000470 <__udivmoddi4+0x134>
 8000610:	45c2      	cmp	sl, r8
 8000612:	d3e7      	bcc.n	80005e4 <__udivmoddi4+0x2a8>
 8000614:	463e      	mov	r6, r7
 8000616:	e7d1      	b.n	80005bc <__udivmoddi4+0x280>
 8000618:	4629      	mov	r1, r5
 800061a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800061e:	bf00      	nop

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <memcpy>:
 8000624:	4684      	mov	ip, r0
 8000626:	ea41 0300 	orr.w	r3, r1, r0
 800062a:	f013 0303 	ands.w	r3, r3, #3
 800062e:	d16d      	bne.n	800070c <memcpy+0xe8>
 8000630:	3a40      	subs	r2, #64	; 0x40
 8000632:	d341      	bcc.n	80006b8 <memcpy+0x94>
 8000634:	f851 3b04 	ldr.w	r3, [r1], #4
 8000638:	f840 3b04 	str.w	r3, [r0], #4
 800063c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000640:	f840 3b04 	str.w	r3, [r0], #4
 8000644:	f851 3b04 	ldr.w	r3, [r1], #4
 8000648:	f840 3b04 	str.w	r3, [r0], #4
 800064c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000650:	f840 3b04 	str.w	r3, [r0], #4
 8000654:	f851 3b04 	ldr.w	r3, [r1], #4
 8000658:	f840 3b04 	str.w	r3, [r0], #4
 800065c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000660:	f840 3b04 	str.w	r3, [r0], #4
 8000664:	f851 3b04 	ldr.w	r3, [r1], #4
 8000668:	f840 3b04 	str.w	r3, [r0], #4
 800066c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000670:	f840 3b04 	str.w	r3, [r0], #4
 8000674:	f851 3b04 	ldr.w	r3, [r1], #4
 8000678:	f840 3b04 	str.w	r3, [r0], #4
 800067c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000680:	f840 3b04 	str.w	r3, [r0], #4
 8000684:	f851 3b04 	ldr.w	r3, [r1], #4
 8000688:	f840 3b04 	str.w	r3, [r0], #4
 800068c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000690:	f840 3b04 	str.w	r3, [r0], #4
 8000694:	f851 3b04 	ldr.w	r3, [r1], #4
 8000698:	f840 3b04 	str.w	r3, [r0], #4
 800069c:	f851 3b04 	ldr.w	r3, [r1], #4
 80006a0:	f840 3b04 	str.w	r3, [r0], #4
 80006a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80006a8:	f840 3b04 	str.w	r3, [r0], #4
 80006ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80006b0:	f840 3b04 	str.w	r3, [r0], #4
 80006b4:	3a40      	subs	r2, #64	; 0x40
 80006b6:	d2bd      	bcs.n	8000634 <memcpy+0x10>
 80006b8:	3230      	adds	r2, #48	; 0x30
 80006ba:	d311      	bcc.n	80006e0 <memcpy+0xbc>
 80006bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80006c0:	f840 3b04 	str.w	r3, [r0], #4
 80006c4:	f851 3b04 	ldr.w	r3, [r1], #4
 80006c8:	f840 3b04 	str.w	r3, [r0], #4
 80006cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80006d0:	f840 3b04 	str.w	r3, [r0], #4
 80006d4:	f851 3b04 	ldr.w	r3, [r1], #4
 80006d8:	f840 3b04 	str.w	r3, [r0], #4
 80006dc:	3a10      	subs	r2, #16
 80006de:	d2ed      	bcs.n	80006bc <memcpy+0x98>
 80006e0:	320c      	adds	r2, #12
 80006e2:	d305      	bcc.n	80006f0 <memcpy+0xcc>
 80006e4:	f851 3b04 	ldr.w	r3, [r1], #4
 80006e8:	f840 3b04 	str.w	r3, [r0], #4
 80006ec:	3a04      	subs	r2, #4
 80006ee:	d2f9      	bcs.n	80006e4 <memcpy+0xc0>
 80006f0:	3204      	adds	r2, #4
 80006f2:	d008      	beq.n	8000706 <memcpy+0xe2>
 80006f4:	07d2      	lsls	r2, r2, #31
 80006f6:	bf1c      	itt	ne
 80006f8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80006fc:	f800 3b01 	strbne.w	r3, [r0], #1
 8000700:	d301      	bcc.n	8000706 <memcpy+0xe2>
 8000702:	880b      	ldrh	r3, [r1, #0]
 8000704:	8003      	strh	r3, [r0, #0]
 8000706:	4660      	mov	r0, ip
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	2a08      	cmp	r2, #8
 800070e:	d313      	bcc.n	8000738 <memcpy+0x114>
 8000710:	078b      	lsls	r3, r1, #30
 8000712:	d08d      	beq.n	8000630 <memcpy+0xc>
 8000714:	f010 0303 	ands.w	r3, r0, #3
 8000718:	d08a      	beq.n	8000630 <memcpy+0xc>
 800071a:	f1c3 0304 	rsb	r3, r3, #4
 800071e:	1ad2      	subs	r2, r2, r3
 8000720:	07db      	lsls	r3, r3, #31
 8000722:	bf1c      	itt	ne
 8000724:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000728:	f800 3b01 	strbne.w	r3, [r0], #1
 800072c:	d380      	bcc.n	8000630 <memcpy+0xc>
 800072e:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000732:	f820 3b02 	strh.w	r3, [r0], #2
 8000736:	e77b      	b.n	8000630 <memcpy+0xc>
 8000738:	3a04      	subs	r2, #4
 800073a:	d3d9      	bcc.n	80006f0 <memcpy+0xcc>
 800073c:	3a01      	subs	r2, #1
 800073e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000742:	f800 3b01 	strb.w	r3, [r0], #1
 8000746:	d2f9      	bcs.n	800073c <memcpy+0x118>
 8000748:	780b      	ldrb	r3, [r1, #0]
 800074a:	7003      	strb	r3, [r0, #0]
 800074c:	784b      	ldrb	r3, [r1, #1]
 800074e:	7043      	strb	r3, [r0, #1]
 8000750:	788b      	ldrb	r3, [r1, #2]
 8000752:	7083      	strb	r3, [r0, #2]
 8000754:	4660      	mov	r0, ip
 8000756:	4770      	bx	lr
	...

08000780 <strlen>:
 8000780:	f890 f000 	pld	[r0]
 8000784:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8000788:	f020 0107 	bic.w	r1, r0, #7
 800078c:	f06f 0c00 	mvn.w	ip, #0
 8000790:	f010 0407 	ands.w	r4, r0, #7
 8000794:	f891 f020 	pld	[r1, #32]
 8000798:	f040 8049 	bne.w	800082e <strlen+0xae>
 800079c:	f04f 0400 	mov.w	r4, #0
 80007a0:	f06f 0007 	mvn.w	r0, #7
 80007a4:	e9d1 2300 	ldrd	r2, r3, [r1]
 80007a8:	f891 f040 	pld	[r1, #64]	; 0x40
 80007ac:	f100 0008 	add.w	r0, r0, #8
 80007b0:	fa82 f24c 	uadd8	r2, r2, ip
 80007b4:	faa4 f28c 	sel	r2, r4, ip
 80007b8:	fa83 f34c 	uadd8	r3, r3, ip
 80007bc:	faa2 f38c 	sel	r3, r2, ip
 80007c0:	bb4b      	cbnz	r3, 8000816 <strlen+0x96>
 80007c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80007c6:	fa82 f24c 	uadd8	r2, r2, ip
 80007ca:	f100 0008 	add.w	r0, r0, #8
 80007ce:	faa4 f28c 	sel	r2, r4, ip
 80007d2:	fa83 f34c 	uadd8	r3, r3, ip
 80007d6:	faa2 f38c 	sel	r3, r2, ip
 80007da:	b9e3      	cbnz	r3, 8000816 <strlen+0x96>
 80007dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 80007e0:	fa82 f24c 	uadd8	r2, r2, ip
 80007e4:	f100 0008 	add.w	r0, r0, #8
 80007e8:	faa4 f28c 	sel	r2, r4, ip
 80007ec:	fa83 f34c 	uadd8	r3, r3, ip
 80007f0:	faa2 f38c 	sel	r3, r2, ip
 80007f4:	b97b      	cbnz	r3, 8000816 <strlen+0x96>
 80007f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80007fa:	f101 0120 	add.w	r1, r1, #32
 80007fe:	fa82 f24c 	uadd8	r2, r2, ip
 8000802:	f100 0008 	add.w	r0, r0, #8
 8000806:	faa4 f28c 	sel	r2, r4, ip
 800080a:	fa83 f34c 	uadd8	r3, r3, ip
 800080e:	faa2 f38c 	sel	r3, r2, ip
 8000812:	2b00      	cmp	r3, #0
 8000814:	d0c6      	beq.n	80007a4 <strlen+0x24>
 8000816:	2a00      	cmp	r2, #0
 8000818:	bf04      	itt	eq
 800081a:	3004      	addeq	r0, #4
 800081c:	461a      	moveq	r2, r3
 800081e:	ba12      	rev	r2, r2
 8000820:	fab2 f282 	clz	r2, r2
 8000824:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8000828:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 800082c:	4770      	bx	lr
 800082e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000832:	f004 0503 	and.w	r5, r4, #3
 8000836:	f1c4 0000 	rsb	r0, r4, #0
 800083a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 800083e:	f014 0f04 	tst.w	r4, #4
 8000842:	f891 f040 	pld	[r1, #64]	; 0x40
 8000846:	fa0c f505 	lsl.w	r5, ip, r5
 800084a:	ea62 0205 	orn	r2, r2, r5
 800084e:	bf1c      	itt	ne
 8000850:	ea63 0305 	ornne	r3, r3, r5
 8000854:	4662      	movne	r2, ip
 8000856:	f04f 0400 	mov.w	r4, #0
 800085a:	e7a9      	b.n	80007b0 <strlen+0x30>
 800085c:	0000      	movs	r0, r0
	...

08000860 <memchr>:
 8000860:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000864:	2a10      	cmp	r2, #16
 8000866:	db2b      	blt.n	80008c0 <memchr+0x60>
 8000868:	f010 0f07 	tst.w	r0, #7
 800086c:	d008      	beq.n	8000880 <memchr+0x20>
 800086e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000872:	3a01      	subs	r2, #1
 8000874:	428b      	cmp	r3, r1
 8000876:	d02d      	beq.n	80008d4 <memchr+0x74>
 8000878:	f010 0f07 	tst.w	r0, #7
 800087c:	b342      	cbz	r2, 80008d0 <memchr+0x70>
 800087e:	d1f6      	bne.n	800086e <memchr+0xe>
 8000880:	b4f0      	push	{r4, r5, r6, r7}
 8000882:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000886:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800088a:	f022 0407 	bic.w	r4, r2, #7
 800088e:	f07f 0700 	mvns.w	r7, #0
 8000892:	2300      	movs	r3, #0
 8000894:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000898:	3c08      	subs	r4, #8
 800089a:	ea85 0501 	eor.w	r5, r5, r1
 800089e:	ea86 0601 	eor.w	r6, r6, r1
 80008a2:	fa85 f547 	uadd8	r5, r5, r7
 80008a6:	faa3 f587 	sel	r5, r3, r7
 80008aa:	fa86 f647 	uadd8	r6, r6, r7
 80008ae:	faa5 f687 	sel	r6, r5, r7
 80008b2:	b98e      	cbnz	r6, 80008d8 <memchr+0x78>
 80008b4:	d1ee      	bne.n	8000894 <memchr+0x34>
 80008b6:	bcf0      	pop	{r4, r5, r6, r7}
 80008b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80008bc:	f002 0207 	and.w	r2, r2, #7
 80008c0:	b132      	cbz	r2, 80008d0 <memchr+0x70>
 80008c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80008c6:	3a01      	subs	r2, #1
 80008c8:	ea83 0301 	eor.w	r3, r3, r1
 80008cc:	b113      	cbz	r3, 80008d4 <memchr+0x74>
 80008ce:	d1f8      	bne.n	80008c2 <memchr+0x62>
 80008d0:	2000      	movs	r0, #0
 80008d2:	4770      	bx	lr
 80008d4:	3801      	subs	r0, #1
 80008d6:	4770      	bx	lr
 80008d8:	2d00      	cmp	r5, #0
 80008da:	bf06      	itte	eq
 80008dc:	4635      	moveq	r5, r6
 80008de:	3803      	subeq	r0, #3
 80008e0:	3807      	subne	r0, #7
 80008e2:	f015 0f01 	tst.w	r5, #1
 80008e6:	d107      	bne.n	80008f8 <memchr+0x98>
 80008e8:	3001      	adds	r0, #1
 80008ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80008ee:	bf02      	ittt	eq
 80008f0:	3001      	addeq	r0, #1
 80008f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80008f6:	3001      	addeq	r0, #1
 80008f8:	bcf0      	pop	{r4, r5, r6, r7}
 80008fa:	3801      	subs	r0, #1
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop

08000900 <__aeabi_drsub>:
 8000900:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000904:	e002      	b.n	800090c <__adddf3>
 8000906:	bf00      	nop

08000908 <__aeabi_dsub>:
 8000908:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800090c <__adddf3>:
 800090c:	b530      	push	{r4, r5, lr}
 800090e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000912:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000916:	ea94 0f05 	teq	r4, r5
 800091a:	bf08      	it	eq
 800091c:	ea90 0f02 	teqeq	r0, r2
 8000920:	bf1f      	itttt	ne
 8000922:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000926:	ea55 0c02 	orrsne.w	ip, r5, r2
 800092a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800092e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000932:	f000 80e2 	beq.w	8000afa <__adddf3+0x1ee>
 8000936:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800093a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800093e:	bfb8      	it	lt
 8000940:	426d      	neglt	r5, r5
 8000942:	dd0c      	ble.n	800095e <__adddf3+0x52>
 8000944:	442c      	add	r4, r5
 8000946:	ea80 0202 	eor.w	r2, r0, r2
 800094a:	ea81 0303 	eor.w	r3, r1, r3
 800094e:	ea82 0000 	eor.w	r0, r2, r0
 8000952:	ea83 0101 	eor.w	r1, r3, r1
 8000956:	ea80 0202 	eor.w	r2, r0, r2
 800095a:	ea81 0303 	eor.w	r3, r1, r3
 800095e:	2d36      	cmp	r5, #54	; 0x36
 8000960:	bf88      	it	hi
 8000962:	bd30      	pophi	{r4, r5, pc}
 8000964:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000968:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800096c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000970:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000974:	d002      	beq.n	800097c <__adddf3+0x70>
 8000976:	4240      	negs	r0, r0
 8000978:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800097c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000980:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000984:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000988:	d002      	beq.n	8000990 <__adddf3+0x84>
 800098a:	4252      	negs	r2, r2
 800098c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000990:	ea94 0f05 	teq	r4, r5
 8000994:	f000 80a7 	beq.w	8000ae6 <__adddf3+0x1da>
 8000998:	f1a4 0401 	sub.w	r4, r4, #1
 800099c:	f1d5 0e20 	rsbs	lr, r5, #32
 80009a0:	db0d      	blt.n	80009be <__adddf3+0xb2>
 80009a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80009a6:	fa22 f205 	lsr.w	r2, r2, r5
 80009aa:	1880      	adds	r0, r0, r2
 80009ac:	f141 0100 	adc.w	r1, r1, #0
 80009b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80009b4:	1880      	adds	r0, r0, r2
 80009b6:	fa43 f305 	asr.w	r3, r3, r5
 80009ba:	4159      	adcs	r1, r3
 80009bc:	e00e      	b.n	80009dc <__adddf3+0xd0>
 80009be:	f1a5 0520 	sub.w	r5, r5, #32
 80009c2:	f10e 0e20 	add.w	lr, lr, #32
 80009c6:	2a01      	cmp	r2, #1
 80009c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80009cc:	bf28      	it	cs
 80009ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80009d2:	fa43 f305 	asr.w	r3, r3, r5
 80009d6:	18c0      	adds	r0, r0, r3
 80009d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80009dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80009e0:	d507      	bpl.n	80009f2 <__adddf3+0xe6>
 80009e2:	f04f 0e00 	mov.w	lr, #0
 80009e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80009ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80009ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80009f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80009f6:	d31b      	bcc.n	8000a30 <__adddf3+0x124>
 80009f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80009fc:	d30c      	bcc.n	8000a18 <__adddf3+0x10c>
 80009fe:	0849      	lsrs	r1, r1, #1
 8000a00:	ea5f 0030 	movs.w	r0, r0, rrx
 8000a04:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000a08:	f104 0401 	add.w	r4, r4, #1
 8000a0c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000a10:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000a14:	f080 809a 	bcs.w	8000b4c <__adddf3+0x240>
 8000a18:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000a1c:	bf08      	it	eq
 8000a1e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a22:	f150 0000 	adcs.w	r0, r0, #0
 8000a26:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a2a:	ea41 0105 	orr.w	r1, r1, r5
 8000a2e:	bd30      	pop	{r4, r5, pc}
 8000a30:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000a34:	4140      	adcs	r0, r0
 8000a36:	eb41 0101 	adc.w	r1, r1, r1
 8000a3a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a3e:	f1a4 0401 	sub.w	r4, r4, #1
 8000a42:	d1e9      	bne.n	8000a18 <__adddf3+0x10c>
 8000a44:	f091 0f00 	teq	r1, #0
 8000a48:	bf04      	itt	eq
 8000a4a:	4601      	moveq	r1, r0
 8000a4c:	2000      	moveq	r0, #0
 8000a4e:	fab1 f381 	clz	r3, r1
 8000a52:	bf08      	it	eq
 8000a54:	3320      	addeq	r3, #32
 8000a56:	f1a3 030b 	sub.w	r3, r3, #11
 8000a5a:	f1b3 0220 	subs.w	r2, r3, #32
 8000a5e:	da0c      	bge.n	8000a7a <__adddf3+0x16e>
 8000a60:	320c      	adds	r2, #12
 8000a62:	dd08      	ble.n	8000a76 <__adddf3+0x16a>
 8000a64:	f102 0c14 	add.w	ip, r2, #20
 8000a68:	f1c2 020c 	rsb	r2, r2, #12
 8000a6c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000a70:	fa21 f102 	lsr.w	r1, r1, r2
 8000a74:	e00c      	b.n	8000a90 <__adddf3+0x184>
 8000a76:	f102 0214 	add.w	r2, r2, #20
 8000a7a:	bfd8      	it	le
 8000a7c:	f1c2 0c20 	rsble	ip, r2, #32
 8000a80:	fa01 f102 	lsl.w	r1, r1, r2
 8000a84:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000a88:	bfdc      	itt	le
 8000a8a:	ea41 010c 	orrle.w	r1, r1, ip
 8000a8e:	4090      	lslle	r0, r2
 8000a90:	1ae4      	subs	r4, r4, r3
 8000a92:	bfa2      	ittt	ge
 8000a94:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000a98:	4329      	orrge	r1, r5
 8000a9a:	bd30      	popge	{r4, r5, pc}
 8000a9c:	ea6f 0404 	mvn.w	r4, r4
 8000aa0:	3c1f      	subs	r4, #31
 8000aa2:	da1c      	bge.n	8000ade <__adddf3+0x1d2>
 8000aa4:	340c      	adds	r4, #12
 8000aa6:	dc0e      	bgt.n	8000ac6 <__adddf3+0x1ba>
 8000aa8:	f104 0414 	add.w	r4, r4, #20
 8000aac:	f1c4 0220 	rsb	r2, r4, #32
 8000ab0:	fa20 f004 	lsr.w	r0, r0, r4
 8000ab4:	fa01 f302 	lsl.w	r3, r1, r2
 8000ab8:	ea40 0003 	orr.w	r0, r0, r3
 8000abc:	fa21 f304 	lsr.w	r3, r1, r4
 8000ac0:	ea45 0103 	orr.w	r1, r5, r3
 8000ac4:	bd30      	pop	{r4, r5, pc}
 8000ac6:	f1c4 040c 	rsb	r4, r4, #12
 8000aca:	f1c4 0220 	rsb	r2, r4, #32
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	fa01 f304 	lsl.w	r3, r1, r4
 8000ad6:	ea40 0003 	orr.w	r0, r0, r3
 8000ada:	4629      	mov	r1, r5
 8000adc:	bd30      	pop	{r4, r5, pc}
 8000ade:	fa21 f004 	lsr.w	r0, r1, r4
 8000ae2:	4629      	mov	r1, r5
 8000ae4:	bd30      	pop	{r4, r5, pc}
 8000ae6:	f094 0f00 	teq	r4, #0
 8000aea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000aee:	bf06      	itte	eq
 8000af0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000af4:	3401      	addeq	r4, #1
 8000af6:	3d01      	subne	r5, #1
 8000af8:	e74e      	b.n	8000998 <__adddf3+0x8c>
 8000afa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000afe:	bf18      	it	ne
 8000b00:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000b04:	d029      	beq.n	8000b5a <__adddf3+0x24e>
 8000b06:	ea94 0f05 	teq	r4, r5
 8000b0a:	bf08      	it	eq
 8000b0c:	ea90 0f02 	teqeq	r0, r2
 8000b10:	d005      	beq.n	8000b1e <__adddf3+0x212>
 8000b12:	ea54 0c00 	orrs.w	ip, r4, r0
 8000b16:	bf04      	itt	eq
 8000b18:	4619      	moveq	r1, r3
 8000b1a:	4610      	moveq	r0, r2
 8000b1c:	bd30      	pop	{r4, r5, pc}
 8000b1e:	ea91 0f03 	teq	r1, r3
 8000b22:	bf1e      	ittt	ne
 8000b24:	2100      	movne	r1, #0
 8000b26:	2000      	movne	r0, #0
 8000b28:	bd30      	popne	{r4, r5, pc}
 8000b2a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000b2e:	d105      	bne.n	8000b3c <__adddf3+0x230>
 8000b30:	0040      	lsls	r0, r0, #1
 8000b32:	4149      	adcs	r1, r1
 8000b34:	bf28      	it	cs
 8000b36:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000b3a:	bd30      	pop	{r4, r5, pc}
 8000b3c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000b40:	bf3c      	itt	cc
 8000b42:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000b46:	bd30      	popcc	{r4, r5, pc}
 8000b48:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000b4c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000b50:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	bd30      	pop	{r4, r5, pc}
 8000b5a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000b5e:	bf1a      	itte	ne
 8000b60:	4619      	movne	r1, r3
 8000b62:	4610      	movne	r0, r2
 8000b64:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000b68:	bf1c      	itt	ne
 8000b6a:	460b      	movne	r3, r1
 8000b6c:	4602      	movne	r2, r0
 8000b6e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000b72:	bf06      	itte	eq
 8000b74:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000b78:	ea91 0f03 	teqeq	r1, r3
 8000b7c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000b80:	bd30      	pop	{r4, r5, pc}
 8000b82:	bf00      	nop

08000b84 <__aeabi_ui2d>:
 8000b84:	f090 0f00 	teq	r0, #0
 8000b88:	bf04      	itt	eq
 8000b8a:	2100      	moveq	r1, #0
 8000b8c:	4770      	bxeq	lr
 8000b8e:	b530      	push	{r4, r5, lr}
 8000b90:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000b94:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000b98:	f04f 0500 	mov.w	r5, #0
 8000b9c:	f04f 0100 	mov.w	r1, #0
 8000ba0:	e750      	b.n	8000a44 <__adddf3+0x138>
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_i2d>:
 8000ba4:	f090 0f00 	teq	r0, #0
 8000ba8:	bf04      	itt	eq
 8000baa:	2100      	moveq	r1, #0
 8000bac:	4770      	bxeq	lr
 8000bae:	b530      	push	{r4, r5, lr}
 8000bb0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000bb4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000bb8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000bbc:	bf48      	it	mi
 8000bbe:	4240      	negmi	r0, r0
 8000bc0:	f04f 0100 	mov.w	r1, #0
 8000bc4:	e73e      	b.n	8000a44 <__adddf3+0x138>
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_f2d>:
 8000bc8:	0042      	lsls	r2, r0, #1
 8000bca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000bce:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bd2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000bd6:	bf1f      	itttt	ne
 8000bd8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000bdc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000be0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000be4:	4770      	bxne	lr
 8000be6:	f092 0f00 	teq	r2, #0
 8000bea:	bf14      	ite	ne
 8000bec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000bf0:	4770      	bxeq	lr
 8000bf2:	b530      	push	{r4, r5, lr}
 8000bf4:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000bf8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000bfc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000c00:	e720      	b.n	8000a44 <__adddf3+0x138>
 8000c02:	bf00      	nop

08000c04 <__aeabi_ul2d>:
 8000c04:	ea50 0201 	orrs.w	r2, r0, r1
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	b530      	push	{r4, r5, lr}
 8000c0e:	f04f 0500 	mov.w	r5, #0
 8000c12:	e00a      	b.n	8000c2a <__aeabi_l2d+0x16>

08000c14 <__aeabi_l2d>:
 8000c14:	ea50 0201 	orrs.w	r2, r0, r1
 8000c18:	bf08      	it	eq
 8000c1a:	4770      	bxeq	lr
 8000c1c:	b530      	push	{r4, r5, lr}
 8000c1e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000c22:	d502      	bpl.n	8000c2a <__aeabi_l2d+0x16>
 8000c24:	4240      	negs	r0, r0
 8000c26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c2a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000c2e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000c32:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000c36:	f43f aedc 	beq.w	80009f2 <__adddf3+0xe6>
 8000c3a:	f04f 0203 	mov.w	r2, #3
 8000c3e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000c42:	bf18      	it	ne
 8000c44:	3203      	addne	r2, #3
 8000c46:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000c4a:	bf18      	it	ne
 8000c4c:	3203      	addne	r2, #3
 8000c4e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000c52:	f1c2 0320 	rsb	r3, r2, #32
 8000c56:	fa00 fc03 	lsl.w	ip, r0, r3
 8000c5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c5e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000c62:	ea40 000e 	orr.w	r0, r0, lr
 8000c66:	fa21 f102 	lsr.w	r1, r1, r2
 8000c6a:	4414      	add	r4, r2
 8000c6c:	e6c1      	b.n	80009f2 <__adddf3+0xe6>
 8000c6e:	bf00      	nop

08000c70 <__aeabi_dmul>:
 8000c70:	b570      	push	{r4, r5, r6, lr}
 8000c72:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c76:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000c7a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000c7e:	bf1d      	ittte	ne
 8000c80:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000c84:	ea94 0f0c 	teqne	r4, ip
 8000c88:	ea95 0f0c 	teqne	r5, ip
 8000c8c:	f000 f8de 	bleq	8000e4c <__aeabi_dmul+0x1dc>
 8000c90:	442c      	add	r4, r5
 8000c92:	ea81 0603 	eor.w	r6, r1, r3
 8000c96:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000c9a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000c9e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000ca2:	bf18      	it	ne
 8000ca4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000ca8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000cb0:	d038      	beq.n	8000d24 <__aeabi_dmul+0xb4>
 8000cb2:	fba0 ce02 	umull	ip, lr, r0, r2
 8000cb6:	f04f 0500 	mov.w	r5, #0
 8000cba:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000cbe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000cc2:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000cc6:	f04f 0600 	mov.w	r6, #0
 8000cca:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000cce:	f09c 0f00 	teq	ip, #0
 8000cd2:	bf18      	it	ne
 8000cd4:	f04e 0e01 	orrne.w	lr, lr, #1
 8000cd8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000cdc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000ce0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000ce4:	d204      	bcs.n	8000cf0 <__aeabi_dmul+0x80>
 8000ce6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000cea:	416d      	adcs	r5, r5
 8000cec:	eb46 0606 	adc.w	r6, r6, r6
 8000cf0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000cf4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000cf8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000cfc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000d00:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000d04:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000d08:	bf88      	it	hi
 8000d0a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000d0e:	d81e      	bhi.n	8000d4e <__aeabi_dmul+0xde>
 8000d10:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000d14:	bf08      	it	eq
 8000d16:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000d1a:	f150 0000 	adcs.w	r0, r0, #0
 8000d1e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000d22:	bd70      	pop	{r4, r5, r6, pc}
 8000d24:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000d28:	ea46 0101 	orr.w	r1, r6, r1
 8000d2c:	ea40 0002 	orr.w	r0, r0, r2
 8000d30:	ea81 0103 	eor.w	r1, r1, r3
 8000d34:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000d38:	bfc2      	ittt	gt
 8000d3a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000d3e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000d42:	bd70      	popgt	{r4, r5, r6, pc}
 8000d44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d48:	f04f 0e00 	mov.w	lr, #0
 8000d4c:	3c01      	subs	r4, #1
 8000d4e:	f300 80ab 	bgt.w	8000ea8 <__aeabi_dmul+0x238>
 8000d52:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000d56:	bfde      	ittt	le
 8000d58:	2000      	movle	r0, #0
 8000d5a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000d5e:	bd70      	pople	{r4, r5, r6, pc}
 8000d60:	f1c4 0400 	rsb	r4, r4, #0
 8000d64:	3c20      	subs	r4, #32
 8000d66:	da35      	bge.n	8000dd4 <__aeabi_dmul+0x164>
 8000d68:	340c      	adds	r4, #12
 8000d6a:	dc1b      	bgt.n	8000da4 <__aeabi_dmul+0x134>
 8000d6c:	f104 0414 	add.w	r4, r4, #20
 8000d70:	f1c4 0520 	rsb	r5, r4, #32
 8000d74:	fa00 f305 	lsl.w	r3, r0, r5
 8000d78:	fa20 f004 	lsr.w	r0, r0, r4
 8000d7c:	fa01 f205 	lsl.w	r2, r1, r5
 8000d80:	ea40 0002 	orr.w	r0, r0, r2
 8000d84:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000d88:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000d8c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000d90:	fa21 f604 	lsr.w	r6, r1, r4
 8000d94:	eb42 0106 	adc.w	r1, r2, r6
 8000d98:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000d9c:	bf08      	it	eq
 8000d9e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000da2:	bd70      	pop	{r4, r5, r6, pc}
 8000da4:	f1c4 040c 	rsb	r4, r4, #12
 8000da8:	f1c4 0520 	rsb	r5, r4, #32
 8000dac:	fa00 f304 	lsl.w	r3, r0, r4
 8000db0:	fa20 f005 	lsr.w	r0, r0, r5
 8000db4:	fa01 f204 	lsl.w	r2, r1, r4
 8000db8:	ea40 0002 	orr.w	r0, r0, r2
 8000dbc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000dc0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000dc4:	f141 0100 	adc.w	r1, r1, #0
 8000dc8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000dcc:	bf08      	it	eq
 8000dce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000dd2:	bd70      	pop	{r4, r5, r6, pc}
 8000dd4:	f1c4 0520 	rsb	r5, r4, #32
 8000dd8:	fa00 f205 	lsl.w	r2, r0, r5
 8000ddc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000de0:	fa20 f304 	lsr.w	r3, r0, r4
 8000de4:	fa01 f205 	lsl.w	r2, r1, r5
 8000de8:	ea43 0302 	orr.w	r3, r3, r2
 8000dec:	fa21 f004 	lsr.w	r0, r1, r4
 8000df0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000df4:	fa21 f204 	lsr.w	r2, r1, r4
 8000df8:	ea20 0002 	bic.w	r0, r0, r2
 8000dfc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000e00:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000e04:	bf08      	it	eq
 8000e06:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000e0a:	bd70      	pop	{r4, r5, r6, pc}
 8000e0c:	f094 0f00 	teq	r4, #0
 8000e10:	d10f      	bne.n	8000e32 <__aeabi_dmul+0x1c2>
 8000e12:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000e16:	0040      	lsls	r0, r0, #1
 8000e18:	eb41 0101 	adc.w	r1, r1, r1
 8000e1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000e20:	bf08      	it	eq
 8000e22:	3c01      	subeq	r4, #1
 8000e24:	d0f7      	beq.n	8000e16 <__aeabi_dmul+0x1a6>
 8000e26:	ea41 0106 	orr.w	r1, r1, r6
 8000e2a:	f095 0f00 	teq	r5, #0
 8000e2e:	bf18      	it	ne
 8000e30:	4770      	bxne	lr
 8000e32:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000e36:	0052      	lsls	r2, r2, #1
 8000e38:	eb43 0303 	adc.w	r3, r3, r3
 8000e3c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000e40:	bf08      	it	eq
 8000e42:	3d01      	subeq	r5, #1
 8000e44:	d0f7      	beq.n	8000e36 <__aeabi_dmul+0x1c6>
 8000e46:	ea43 0306 	orr.w	r3, r3, r6
 8000e4a:	4770      	bx	lr
 8000e4c:	ea94 0f0c 	teq	r4, ip
 8000e50:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000e54:	bf18      	it	ne
 8000e56:	ea95 0f0c 	teqne	r5, ip
 8000e5a:	d00c      	beq.n	8000e76 <__aeabi_dmul+0x206>
 8000e5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000e60:	bf18      	it	ne
 8000e62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000e66:	d1d1      	bne.n	8000e0c <__aeabi_dmul+0x19c>
 8000e68:	ea81 0103 	eor.w	r1, r1, r3
 8000e6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000e70:	f04f 0000 	mov.w	r0, #0
 8000e74:	bd70      	pop	{r4, r5, r6, pc}
 8000e76:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000e7a:	bf06      	itte	eq
 8000e7c:	4610      	moveq	r0, r2
 8000e7e:	4619      	moveq	r1, r3
 8000e80:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000e84:	d019      	beq.n	8000eba <__aeabi_dmul+0x24a>
 8000e86:	ea94 0f0c 	teq	r4, ip
 8000e8a:	d102      	bne.n	8000e92 <__aeabi_dmul+0x222>
 8000e8c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000e90:	d113      	bne.n	8000eba <__aeabi_dmul+0x24a>
 8000e92:	ea95 0f0c 	teq	r5, ip
 8000e96:	d105      	bne.n	8000ea4 <__aeabi_dmul+0x234>
 8000e98:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000e9c:	bf1c      	itt	ne
 8000e9e:	4610      	movne	r0, r2
 8000ea0:	4619      	movne	r1, r3
 8000ea2:	d10a      	bne.n	8000eba <__aeabi_dmul+0x24a>
 8000ea4:	ea81 0103 	eor.w	r1, r1, r3
 8000ea8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000eac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000eb0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000eb4:	f04f 0000 	mov.w	r0, #0
 8000eb8:	bd70      	pop	{r4, r5, r6, pc}
 8000eba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000ebe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000ec2:	bd70      	pop	{r4, r5, r6, pc}

08000ec4 <__aeabi_ddiv>:
 8000ec4:	b570      	push	{r4, r5, r6, lr}
 8000ec6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000ece:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000ed2:	bf1d      	ittte	ne
 8000ed4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000ed8:	ea94 0f0c 	teqne	r4, ip
 8000edc:	ea95 0f0c 	teqne	r5, ip
 8000ee0:	f000 f8a7 	bleq	8001032 <__aeabi_ddiv+0x16e>
 8000ee4:	eba4 0405 	sub.w	r4, r4, r5
 8000ee8:	ea81 0e03 	eor.w	lr, r1, r3
 8000eec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ef0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000ef4:	f000 8088 	beq.w	8001008 <__aeabi_ddiv+0x144>
 8000ef8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000efc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000f00:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000f04:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000f08:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000f0c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000f10:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000f14:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000f18:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000f1c:	429d      	cmp	r5, r3
 8000f1e:	bf08      	it	eq
 8000f20:	4296      	cmpeq	r6, r2
 8000f22:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000f26:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000f2a:	d202      	bcs.n	8000f32 <__aeabi_ddiv+0x6e>
 8000f2c:	085b      	lsrs	r3, r3, #1
 8000f2e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000f32:	1ab6      	subs	r6, r6, r2
 8000f34:	eb65 0503 	sbc.w	r5, r5, r3
 8000f38:	085b      	lsrs	r3, r3, #1
 8000f3a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000f3e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000f42:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000f46:	ebb6 0e02 	subs.w	lr, r6, r2
 8000f4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000f4e:	bf22      	ittt	cs
 8000f50:	1ab6      	subcs	r6, r6, r2
 8000f52:	4675      	movcs	r5, lr
 8000f54:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f58:	085b      	lsrs	r3, r3, #1
 8000f5a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000f5e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000f62:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000f66:	bf22      	ittt	cs
 8000f68:	1ab6      	subcs	r6, r6, r2
 8000f6a:	4675      	movcs	r5, lr
 8000f6c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f70:	085b      	lsrs	r3, r3, #1
 8000f72:	ea4f 0232 	mov.w	r2, r2, rrx
 8000f76:	ebb6 0e02 	subs.w	lr, r6, r2
 8000f7a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000f7e:	bf22      	ittt	cs
 8000f80:	1ab6      	subcs	r6, r6, r2
 8000f82:	4675      	movcs	r5, lr
 8000f84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f88:	085b      	lsrs	r3, r3, #1
 8000f8a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000f8e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000f92:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000f96:	bf22      	ittt	cs
 8000f98:	1ab6      	subcs	r6, r6, r2
 8000f9a:	4675      	movcs	r5, lr
 8000f9c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fa0:	ea55 0e06 	orrs.w	lr, r5, r6
 8000fa4:	d018      	beq.n	8000fd8 <__aeabi_ddiv+0x114>
 8000fa6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000faa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000fae:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000fb2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000fb6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000fba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000fbe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000fc2:	d1c0      	bne.n	8000f46 <__aeabi_ddiv+0x82>
 8000fc4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000fc8:	d10b      	bne.n	8000fe2 <__aeabi_ddiv+0x11e>
 8000fca:	ea41 0100 	orr.w	r1, r1, r0
 8000fce:	f04f 0000 	mov.w	r0, #0
 8000fd2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000fd6:	e7b6      	b.n	8000f46 <__aeabi_ddiv+0x82>
 8000fd8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000fdc:	bf04      	itt	eq
 8000fde:	4301      	orreq	r1, r0
 8000fe0:	2000      	moveq	r0, #0
 8000fe2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000fe6:	bf88      	it	hi
 8000fe8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000fec:	f63f aeaf 	bhi.w	8000d4e <__aeabi_dmul+0xde>
 8000ff0:	ebb5 0c03 	subs.w	ip, r5, r3
 8000ff4:	bf04      	itt	eq
 8000ff6:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000ffa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000ffe:	f150 0000 	adcs.w	r0, r0, #0
 8001002:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8001006:	bd70      	pop	{r4, r5, r6, pc}
 8001008:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800100c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8001010:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8001014:	bfc2      	ittt	gt
 8001016:	ebd4 050c 	rsbsgt	r5, r4, ip
 800101a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800101e:	bd70      	popgt	{r4, r5, r6, pc}
 8001020:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001024:	f04f 0e00 	mov.w	lr, #0
 8001028:	3c01      	subs	r4, #1
 800102a:	e690      	b.n	8000d4e <__aeabi_dmul+0xde>
 800102c:	ea45 0e06 	orr.w	lr, r5, r6
 8001030:	e68d      	b.n	8000d4e <__aeabi_dmul+0xde>
 8001032:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8001036:	ea94 0f0c 	teq	r4, ip
 800103a:	bf08      	it	eq
 800103c:	ea95 0f0c 	teqeq	r5, ip
 8001040:	f43f af3b 	beq.w	8000eba <__aeabi_dmul+0x24a>
 8001044:	ea94 0f0c 	teq	r4, ip
 8001048:	d10a      	bne.n	8001060 <__aeabi_ddiv+0x19c>
 800104a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800104e:	f47f af34 	bne.w	8000eba <__aeabi_dmul+0x24a>
 8001052:	ea95 0f0c 	teq	r5, ip
 8001056:	f47f af25 	bne.w	8000ea4 <__aeabi_dmul+0x234>
 800105a:	4610      	mov	r0, r2
 800105c:	4619      	mov	r1, r3
 800105e:	e72c      	b.n	8000eba <__aeabi_dmul+0x24a>
 8001060:	ea95 0f0c 	teq	r5, ip
 8001064:	d106      	bne.n	8001074 <__aeabi_ddiv+0x1b0>
 8001066:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800106a:	f43f aefd 	beq.w	8000e68 <__aeabi_dmul+0x1f8>
 800106e:	4610      	mov	r0, r2
 8001070:	4619      	mov	r1, r3
 8001072:	e722      	b.n	8000eba <__aeabi_dmul+0x24a>
 8001074:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001078:	bf18      	it	ne
 800107a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800107e:	f47f aec5 	bne.w	8000e0c <__aeabi_dmul+0x19c>
 8001082:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8001086:	f47f af0d 	bne.w	8000ea4 <__aeabi_dmul+0x234>
 800108a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800108e:	f47f aeeb 	bne.w	8000e68 <__aeabi_dmul+0x1f8>
 8001092:	e712      	b.n	8000eba <__aeabi_dmul+0x24a>

08001094 <__gedf2>:
 8001094:	f04f 3cff 	mov.w	ip, #4294967295
 8001098:	e006      	b.n	80010a8 <__cmpdf2+0x4>
 800109a:	bf00      	nop

0800109c <__ledf2>:
 800109c:	f04f 0c01 	mov.w	ip, #1
 80010a0:	e002      	b.n	80010a8 <__cmpdf2+0x4>
 80010a2:	bf00      	nop

080010a4 <__cmpdf2>:
 80010a4:	f04f 0c01 	mov.w	ip, #1
 80010a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80010b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80010b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80010b8:	bf18      	it	ne
 80010ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80010be:	d01b      	beq.n	80010f8 <__cmpdf2+0x54>
 80010c0:	b001      	add	sp, #4
 80010c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80010c6:	bf0c      	ite	eq
 80010c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80010cc:	ea91 0f03 	teqne	r1, r3
 80010d0:	bf02      	ittt	eq
 80010d2:	ea90 0f02 	teqeq	r0, r2
 80010d6:	2000      	moveq	r0, #0
 80010d8:	4770      	bxeq	lr
 80010da:	f110 0f00 	cmn.w	r0, #0
 80010de:	ea91 0f03 	teq	r1, r3
 80010e2:	bf58      	it	pl
 80010e4:	4299      	cmppl	r1, r3
 80010e6:	bf08      	it	eq
 80010e8:	4290      	cmpeq	r0, r2
 80010ea:	bf2c      	ite	cs
 80010ec:	17d8      	asrcs	r0, r3, #31
 80010ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80010f2:	f040 0001 	orr.w	r0, r0, #1
 80010f6:	4770      	bx	lr
 80010f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80010fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001100:	d102      	bne.n	8001108 <__cmpdf2+0x64>
 8001102:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8001106:	d107      	bne.n	8001118 <__cmpdf2+0x74>
 8001108:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800110c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001110:	d1d6      	bne.n	80010c0 <__cmpdf2+0x1c>
 8001112:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8001116:	d0d3      	beq.n	80010c0 <__cmpdf2+0x1c>
 8001118:	f85d 0b04 	ldr.w	r0, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop

08001120 <__aeabi_cdrcmple>:
 8001120:	4684      	mov	ip, r0
 8001122:	4610      	mov	r0, r2
 8001124:	4662      	mov	r2, ip
 8001126:	468c      	mov	ip, r1
 8001128:	4619      	mov	r1, r3
 800112a:	4663      	mov	r3, ip
 800112c:	e000      	b.n	8001130 <__aeabi_cdcmpeq>
 800112e:	bf00      	nop

08001130 <__aeabi_cdcmpeq>:
 8001130:	b501      	push	{r0, lr}
 8001132:	f7ff ffb7 	bl	80010a4 <__cmpdf2>
 8001136:	2800      	cmp	r0, #0
 8001138:	bf48      	it	mi
 800113a:	f110 0f00 	cmnmi.w	r0, #0
 800113e:	bd01      	pop	{r0, pc}

08001140 <__aeabi_dcmpeq>:
 8001140:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001144:	f7ff fff4 	bl	8001130 <__aeabi_cdcmpeq>
 8001148:	bf0c      	ite	eq
 800114a:	2001      	moveq	r0, #1
 800114c:	2000      	movne	r0, #0
 800114e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001152:	bf00      	nop

08001154 <__aeabi_dcmplt>:
 8001154:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001158:	f7ff ffea 	bl	8001130 <__aeabi_cdcmpeq>
 800115c:	bf34      	ite	cc
 800115e:	2001      	movcc	r0, #1
 8001160:	2000      	movcs	r0, #0
 8001162:	f85d fb08 	ldr.w	pc, [sp], #8
 8001166:	bf00      	nop

08001168 <__aeabi_dcmple>:
 8001168:	f84d ed08 	str.w	lr, [sp, #-8]!
 800116c:	f7ff ffe0 	bl	8001130 <__aeabi_cdcmpeq>
 8001170:	bf94      	ite	ls
 8001172:	2001      	movls	r0, #1
 8001174:	2000      	movhi	r0, #0
 8001176:	f85d fb08 	ldr.w	pc, [sp], #8
 800117a:	bf00      	nop

0800117c <__aeabi_dcmpge>:
 800117c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001180:	f7ff ffce 	bl	8001120 <__aeabi_cdrcmple>
 8001184:	bf94      	ite	ls
 8001186:	2001      	movls	r0, #1
 8001188:	2000      	movhi	r0, #0
 800118a:	f85d fb08 	ldr.w	pc, [sp], #8
 800118e:	bf00      	nop

08001190 <__aeabi_dcmpgt>:
 8001190:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001194:	f7ff ffc4 	bl	8001120 <__aeabi_cdrcmple>
 8001198:	bf34      	ite	cc
 800119a:	2001      	movcc	r0, #1
 800119c:	2000      	movcs	r0, #0
 800119e:	f85d fb08 	ldr.w	pc, [sp], #8
 80011a2:	bf00      	nop

080011a4 <__aeabi_dcmpun>:
 80011a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80011a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80011ac:	d102      	bne.n	80011b4 <__aeabi_dcmpun+0x10>
 80011ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80011b2:	d10a      	bne.n	80011ca <__aeabi_dcmpun+0x26>
 80011b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80011b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80011bc:	d102      	bne.n	80011c4 <__aeabi_dcmpun+0x20>
 80011be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80011c2:	d102      	bne.n	80011ca <__aeabi_dcmpun+0x26>
 80011c4:	f04f 0000 	mov.w	r0, #0
 80011c8:	4770      	bx	lr
 80011ca:	f04f 0001 	mov.w	r0, #1
 80011ce:	4770      	bx	lr

080011d0 <__aeabi_d2iz>:
 80011d0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80011d4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80011d8:	d215      	bcs.n	8001206 <__aeabi_d2iz+0x36>
 80011da:	d511      	bpl.n	8001200 <__aeabi_d2iz+0x30>
 80011dc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80011e0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80011e4:	d912      	bls.n	800120c <__aeabi_d2iz+0x3c>
 80011e6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80011ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011ee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80011f2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80011f6:	fa23 f002 	lsr.w	r0, r3, r2
 80011fa:	bf18      	it	ne
 80011fc:	4240      	negne	r0, r0
 80011fe:	4770      	bx	lr
 8001200:	f04f 0000 	mov.w	r0, #0
 8001204:	4770      	bx	lr
 8001206:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800120a:	d105      	bne.n	8001218 <__aeabi_d2iz+0x48>
 800120c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8001210:	bf08      	it	eq
 8001212:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001216:	4770      	bx	lr
 8001218:	f04f 0000 	mov.w	r0, #0
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop

08001220 <main>:
 * \returns 0 always
 *
 * \brief This is the standard entry point for C code.
 */
int main (void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08c      	sub	sp, #48	; 0x30
 8001224:	af0a      	add	r7, sp, #40	; 0x28
  OS_ERR  err;

  // Disable all interrupts                                               // <3>
  BSP_IntDisAll();
 8001226:	f005 f943 	bl	80064b0 <BSP_IntDisAll>
  // Enable Interrupt UART
  BSP_IntEn (BSP_INT_ID_USIC1_01); //**
 800122a:	205b      	movs	r0, #91	; 0x5b
 800122c:	f005 f946 	bl	80064bc <BSP_IntEn>
  BSP_IntEn (BSP_INT_ID_USIC1_00); //**
 8001230:	205a      	movs	r0, #90	; 0x5a
 8001232:	f005 f943 	bl	80064bc <BSP_IntEn>

// init SEMI Hosting DEBUG Support                                        // <4>
#if SEMI_HOSTING
  initRetargetSwo();
 8001236:	f006 f919 	bl	800746c <initRetargetSwo>
  SEGGER_RTT_ConfigUpBuffer (0, NULL, NULL, 0,
           SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL);
#endif

  // Init uC/OS-III
  OSInit (&err);                                                          // <5>
 800123a:	1dbb      	adds	r3, r7, #6
 800123c:	4618      	mov	r0, r3
 800123e:	f002 f8dd 	bl	80033fc <OSInit>
  if (err != OS_ERR_NONE)
 8001242:	88fb      	ldrh	r3, [r7, #6]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d002      	beq.n	800124e <main+0x2e>
    APP_TRACE_DBG ("Error OSInit: main\n");
 8001248:	4814      	ldr	r0, [pc, #80]	; (800129c <main+0x7c>)
 800124a:	f007 f8b5 	bl	80083b8 <puts>

  /* Create the start task */                                             // <6>
  OSTaskCreate ( (OS_TCB     *) &AppStartTaskTCB,
 800124e:	1dbb      	adds	r3, r7, #6
 8001250:	9308      	str	r3, [sp, #32]
 8001252:	2303      	movs	r3, #3
 8001254:	9307      	str	r3, [sp, #28]
 8001256:	2300      	movs	r3, #0
 8001258:	9306      	str	r3, [sp, #24]
 800125a:	2300      	movs	r3, #0
 800125c:	9305      	str	r3, [sp, #20]
 800125e:	2300      	movs	r3, #0
 8001260:	9304      	str	r3, [sp, #16]
 8001262:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001266:	9303      	str	r3, [sp, #12]
 8001268:	2319      	movs	r3, #25
 800126a:	9302      	str	r3, [sp, #8]
 800126c:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <main+0x80>)
 800126e:	9301      	str	r3, [sp, #4]
 8001270:	2302      	movs	r3, #2
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	2300      	movs	r3, #0
 8001276:	4a0b      	ldr	r2, [pc, #44]	; (80012a4 <main+0x84>)
 8001278:	490b      	ldr	r1, [pc, #44]	; (80012a8 <main+0x88>)
 800127a:	480c      	ldr	r0, [pc, #48]	; (80012ac <main+0x8c>)
 800127c:	f001 f900 	bl	8002480 <OSTaskCreate>
           (void       *) 0,
           (OS_OPT) (OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
           (OS_ERR     *) &err);

  // Start multitasking (i.e., give control to uC/OS-III)
  OSStart (&err);                                                         // <7>
 8001280:	1dbb      	adds	r3, r7, #6
 8001282:	4618      	mov	r0, r3
 8001284:	f002 fb0e 	bl	80038a4 <OSStart>
  if (err != OS_ERR_NONE)
 8001288:	88fb      	ldrh	r3, [r7, #6]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d002      	beq.n	8001294 <main+0x74>
    APP_TRACE_DBG ("Error OSStart: main\n");
 800128e:	4808      	ldr	r0, [pc, #32]	; (80012b0 <main+0x90>)
 8001290:	f007 f892 	bl	80083b8 <puts>

  while (1) {                                                             // <8>
    APP_TRACE_DBG ("Should never be output! Bug?\n");
 8001294:	4807      	ldr	r0, [pc, #28]	; (80012b4 <main+0x94>)
 8001296:	f007 f88f 	bl	80083b8 <puts>
  }
 800129a:	e7fb      	b.n	8001294 <main+0x74>
 800129c:	0800e230 	.word	0x0800e230
 80012a0:	200009e0 	.word	0x200009e0
 80012a4:	080012b9 	.word	0x080012b9
 80012a8:	0800e244 	.word	0x0800e244
 80012ac:	20000de0 	.word	0x20000de0
 80012b0:	0800e254 	.word	0x0800e254
 80012b4:	0800e268 	.word	0x0800e268

080012b8 <AppTaskStart>:
 * \brief Startup (init) task that loads board support functions,
 *        initializes CPU services, the memory, the systick timer,
 *        etc. and finally invokes other application tasks.
 */
static void AppTaskStart (void *p_arg)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  CPU_INT32U  cnts;
  OS_ERR      err;

  (void) p_arg;
  // initialize BSP functions
  BSP_Init();                                                             // <9>
 80012c0:	f006 f898 	bl	80073f4 <BSP_Init>
  // initialize the uC/CPU services
  CPU_Init();
 80012c4:	f000 fcc0 	bl	8001c48 <CPU_Init>
  // determine SysTick reference frequency
  cpu_clk_freq = BSP_SysClkFreqGet();
 80012c8:	f006 f83a 	bl	8007340 <BSP_SysClkFreqGet>
 80012cc:	6178      	str	r0, [r7, #20]
  // determine nbr SysTick increments
  cnts = cpu_clk_freq / (CPU_INT32U) OSCfg_TickRate_Hz;
 80012ce:	4b19      	ldr	r3, [pc, #100]	; (8001334 <AppTaskStart+0x7c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	697a      	ldr	r2, [r7, #20]
 80012d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d8:	613b      	str	r3, [r7, #16]
  // init uCOS-III periodic time src (SysTick)
  OS_CPU_SysTickInit (cnts);
 80012da:	6938      	ldr	r0, [r7, #16]
 80012dc:	f004 ff24 	bl	8006128 <OS_CPU_SysTickInit>
  // initialize memory management module
  Mem_Init();
 80012e0:	f000 fd9a 	bl	8001e18 <Mem_Init>
  // initialize mathematical module
  Math_Init();
 80012e4:	f000 fe6a 	bl	8001fbc <Math_Init>
  //Ta
  pen_up();
 80012e8:	f000 fa24 	bl	8001734 <pen_up>

  _mcp23s08_Plotter_Init();
 80012ec:	f000 fc88 	bl	8001c00 <_mcp23s08_Plotter_Init>

// compute CPU capacity with no task running
#if (OS_CFG_STAT_TASK_EN > 0u)                                           // <10>
  OSStatTaskCPUUsageInit (&err);
 80012f0:	f107 030e 	add.w	r3, r7, #14
 80012f4:	4618      	mov	r0, r3
 80012f6:	f003 fb89 	bl	8004a0c <OSStatTaskCPUUsageInit>
  if (err != OS_ERR_NONE)
 80012fa:	89fb      	ldrh	r3, [r7, #14]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d002      	beq.n	8001306 <AppTaskStart+0x4e>
    APP_TRACE_DBG ("Error OSStatTaskCPUUsageInit: AppTaskStart\n");
 8001300:	480d      	ldr	r0, [pc, #52]	; (8001338 <AppTaskStart+0x80>)
 8001302:	f007 f859 	bl	80083b8 <puts>
#endif

  APP_TRACE_INFO ("Creating Application Objects...\n");                  // <11>
 8001306:	480d      	ldr	r0, [pc, #52]	; (800133c <AppTaskStart+0x84>)
 8001308:	f007 f856 	bl	80083b8 <puts>
  // create application objects
  AppObjCreate();
 800130c:	f000 f81c 	bl	8001348 <AppObjCreate>

  APP_TRACE_INFO ("Creating Application Tasks...\n");                    // <12>
 8001310:	480b      	ldr	r0, [pc, #44]	; (8001340 <AppTaskStart+0x88>)
 8001312:	f007 f851 	bl	80083b8 <puts>
  // create application tasks
  AppTaskCreate();
 8001316:	f000 f893 	bl	8001440 <AppTaskCreate>

  while (DEF_TRUE) {                                                     // <13>
    // Suspend current task
    OSTaskSuspend ( (OS_TCB *) 0, &err);
 800131a:	f107 030e 	add.w	r3, r7, #14
 800131e:	4619      	mov	r1, r3
 8001320:	2000      	movs	r0, #0
 8001322:	f001 fb69 	bl	80029f8 <OSTaskSuspend>
    if (err != OS_ERR_NONE)
 8001326:	89fb      	ldrh	r3, [r7, #14]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d0f6      	beq.n	800131a <AppTaskStart+0x62>
      APP_TRACE_DBG ("Error OSTaskSuspend: AppTaskStart\n");
 800132c:	4805      	ldr	r0, [pc, #20]	; (8001344 <AppTaskStart+0x8c>)
 800132e:	f007 f843 	bl	80083b8 <puts>
  }
 8001332:	e7f2      	b.n	800131a <AppTaskStart+0x62>
 8001334:	0800e614 	.word	0x0800e614
 8001338:	0800e288 	.word	0x0800e288
 800133c:	0800e2b4 	.word	0x0800e2b4
 8001340:	0800e2d4 	.word	0x0800e2d4
 8001344:	0800e2f4 	.word	0x0800e2f4

08001348 <AppObjCreate>:
 * \brief Creates application objects.
 * \params none
 * \returns none
 */
static void AppObjCreate (void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af02      	add	r7, sp, #8
	OS_ERR      err;
	// Create Shared Memory
	  OSMemCreate ( (OS_MEM    *) &Mem_Partition,
 800134e:	1dbb      	adds	r3, r7, #6
 8001350:	9301      	str	r3, [sp, #4]
 8001352:	2314      	movs	r3, #20
 8001354:	9300      	str	r3, [sp, #0]
 8001356:	2302      	movs	r3, #2
 8001358:	4a29      	ldr	r2, [pc, #164]	; (8001400 <AppObjCreate+0xb8>)
 800135a:	492a      	ldr	r1, [pc, #168]	; (8001404 <AppObjCreate+0xbc>)
 800135c:	482a      	ldr	r0, [pc, #168]	; (8001408 <AppObjCreate+0xc0>)
 800135e:	f004 fae3 	bl	8005928 <OSMemCreate>
	          (CPU_CHAR  *) "Mem Partition",
	          (void      *) &MyPartitionStorage[0][0],
	          (OS_MEM_QTY)  NUM_MSG,
	          (OS_MEM_SIZE) MAX_MSG_LENGTH * sizeof (CPU_CHAR),
	          (OS_ERR    *) &err);
	  if (err != OS_ERR_NONE)
 8001362:	88fb      	ldrh	r3, [r7, #6]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d002      	beq.n	800136e <AppObjCreate+0x26>
	    APP_TRACE_DBG ("Error OSMemCreate: AppObjCreate\n");
 8001368:	4828      	ldr	r0, [pc, #160]	; (800140c <AppObjCreate+0xc4>)
 800136a:	f007 f825 	bl	80083b8 <puts>
	  // Create Shared Memory
	   OSMemCreate ( (OS_MEM    *) &Mem_Partition1,
 800136e:	1dbb      	adds	r3, r7, #6
 8001370:	9301      	str	r3, [sp, #4]
 8001372:	2314      	movs	r3, #20
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	2302      	movs	r3, #2
 8001378:	4a25      	ldr	r2, [pc, #148]	; (8001410 <AppObjCreate+0xc8>)
 800137a:	4926      	ldr	r1, [pc, #152]	; (8001414 <AppObjCreate+0xcc>)
 800137c:	4826      	ldr	r0, [pc, #152]	; (8001418 <AppObjCreate+0xd0>)
 800137e:	f004 fad3 	bl	8005928 <OSMemCreate>
	           (CPU_CHAR  *) "Mem Partition1",
	           (void      *) &MyPartitionStorage[1][0],
	           (OS_MEM_QTY)  NUM_MSG,
	           (OS_MEM_SIZE) MAX_MSG_LENGTH * sizeof (CPU_CHAR),
	           (OS_ERR    *) &err);
	   if (err != OS_ERR_NONE)
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d002      	beq.n	800138e <AppObjCreate+0x46>
	     APP_TRACE_DBG ("Error OSMemCreate: AppObjCreate\n");
 8001388:	4820      	ldr	r0, [pc, #128]	; (800140c <AppObjCreate+0xc4>)
 800138a:	f007 f815 	bl	80083b8 <puts>
	   // Create Shared Memory
	   OSMemCreate ( (OS_MEM    *) &Mem_Partition2,
 800138e:	1dbb      	adds	r3, r7, #6
 8001390:	9301      	str	r3, [sp, #4]
 8001392:	2314      	movs	r3, #20
 8001394:	9300      	str	r3, [sp, #0]
 8001396:	2302      	movs	r3, #2
 8001398:	4a20      	ldr	r2, [pc, #128]	; (800141c <AppObjCreate+0xd4>)
 800139a:	4921      	ldr	r1, [pc, #132]	; (8001420 <AppObjCreate+0xd8>)
 800139c:	4821      	ldr	r0, [pc, #132]	; (8001424 <AppObjCreate+0xdc>)
 800139e:	f004 fac3 	bl	8005928 <OSMemCreate>
	              (CPU_CHAR  *) "Mem Partition2",
	              (void      *) &MyPartitionStorage[2][0],
	              (OS_MEM_QTY)  NUM_MSG,
	              (OS_MEM_SIZE) MAX_MSG_LENGTH * sizeof (CPU_CHAR),
	              (OS_ERR    *) &err);
	      if (err != OS_ERR_NONE)
 80013a2:	88fb      	ldrh	r3, [r7, #6]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d002      	beq.n	80013ae <AppObjCreate+0x66>
	        APP_TRACE_DBG ("Error OSMemCreate: AppObjCreate\n");
 80013a8:	4818      	ldr	r0, [pc, #96]	; (800140c <AppObjCreate+0xc4>)
 80013aa:	f007 f805 	bl	80083b8 <puts>
	  // Create Message Queue
	  OSQCreate ( (OS_Q *)     &UART_ISR,
 80013ae:	1dbb      	adds	r3, r7, #6
 80013b0:	2202      	movs	r2, #2
 80013b2:	491d      	ldr	r1, [pc, #116]	; (8001428 <AppObjCreate+0xe0>)
 80013b4:	481d      	ldr	r0, [pc, #116]	; (800142c <AppObjCreate+0xe4>)
 80013b6:	f000 fe1f 	bl	8001ff8 <OSQCreate>
	        (CPU_CHAR *) "ISR Queue",
	        (OS_MSG_QTY) NUM_MSG,
	        (OS_ERR   *) &err);
	  if (err != OS_ERR_NONE)
 80013ba:	88fb      	ldrh	r3, [r7, #6]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d002      	beq.n	80013c6 <AppObjCreate+0x7e>
	    APP_TRACE_DBG ("Error OSQCreate: AppObjCreate\n");
 80013c0:	481b      	ldr	r0, [pc, #108]	; (8001430 <AppObjCreate+0xe8>)
 80013c2:	f006 fff9 	bl	80083b8 <puts>

	  // Create Message Queue
	  OSQCreate ( (OS_Q *)     &Q_STEP_X,
 80013c6:	1dbb      	adds	r3, r7, #6
 80013c8:	2202      	movs	r2, #2
 80013ca:	491a      	ldr	r1, [pc, #104]	; (8001434 <AppObjCreate+0xec>)
 80013cc:	481a      	ldr	r0, [pc, #104]	; (8001438 <AppObjCreate+0xf0>)
 80013ce:	f000 fe13 	bl	8001ff8 <OSQCreate>
	 	              (CPU_CHAR *) "LED1_1 Queue",
	 	              (OS_MSG_QTY) NUM_MSG,
	 	              (OS_ERR   *) &err);
	  if (err != OS_ERR_NONE)
 80013d2:	88fb      	ldrh	r3, [r7, #6]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d002      	beq.n	80013de <AppObjCreate+0x96>
		  APP_TRACE_DBG ("Error OSQCreate: AppObjCreate\n");
 80013d8:	4815      	ldr	r0, [pc, #84]	; (8001430 <AppObjCreate+0xe8>)
 80013da:	f006 ffed 	bl	80083b8 <puts>
	    // Create Message Queue
	  OSQCreate ( (OS_Q *)     &Q_STEP_Y,
 80013de:	1dbb      	adds	r3, r7, #6
 80013e0:	2202      	movs	r2, #2
 80013e2:	4914      	ldr	r1, [pc, #80]	; (8001434 <AppObjCreate+0xec>)
 80013e4:	4815      	ldr	r0, [pc, #84]	; (800143c <AppObjCreate+0xf4>)
 80013e6:	f000 fe07 	bl	8001ff8 <OSQCreate>
	              (CPU_CHAR *) "LED1_1 Queue",
	              (OS_MSG_QTY) NUM_MSG,
	              (OS_ERR   *) &err);
	  if (err != OS_ERR_NONE)
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d002      	beq.n	80013f6 <AppObjCreate+0xae>
		  APP_TRACE_DBG ("Error OSQCreate: AppObjCreate\n");
 80013f0:	480f      	ldr	r0, [pc, #60]	; (8001430 <AppObjCreate+0xe8>)
 80013f2:	f006 ffe1 	bl	80083b8 <puts>

}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20001f00 	.word	0x20001f00
 8001404:	0800e318 	.word	0x0800e318
 8001408:	20001fec 	.word	0x20001fec
 800140c:	0800e328 	.word	0x0800e328
 8001410:	20001f14 	.word	0x20001f14
 8001414:	0800e348 	.word	0x0800e348
 8001418:	20001f98 	.word	0x20001f98
 800141c:	20001f28 	.word	0x20001f28
 8001420:	0800e358 	.word	0x0800e358
 8001424:	20001f48 	.word	0x20001f48
 8001428:	0800e368 	.word	0x0800e368
 800142c:	20001fbc 	.word	0x20001fbc
 8001430:	0800e374 	.word	0x0800e374
 8001434:	0800e394 	.word	0x0800e394
 8001438:	20001f14 	.word	0x20001f14
 800143c:	20001f68 	.word	0x20001f68

08001440 <AppTaskCreate>:
 * \brief Creates one application task.
 * \params none
 * \returns none
 */
static void  AppTaskCreate (void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08c      	sub	sp, #48	; 0x30
 8001444:	af0a      	add	r7, sp, #40	; 0x28
  OS_ERR      err;

  // create AppTask_COM
  OSTaskCreate ( (OS_TCB     *) &AppTaskComTCB,
 8001446:	1dbb      	adds	r3, r7, #6
 8001448:	9308      	str	r3, [sp, #32]
 800144a:	2303      	movs	r3, #3
 800144c:	9307      	str	r3, [sp, #28]
 800144e:	2300      	movs	r3, #0
 8001450:	9306      	str	r3, [sp, #24]
 8001452:	2300      	movs	r3, #0
 8001454:	9305      	str	r3, [sp, #20]
 8001456:	2300      	movs	r3, #0
 8001458:	9304      	str	r3, [sp, #16]
 800145a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800145e:	9303      	str	r3, [sp, #12]
 8001460:	2319      	movs	r3, #25
 8001462:	9302      	str	r3, [sp, #8]
 8001464:	4b28      	ldr	r3, [pc, #160]	; (8001508 <AppTaskCreate+0xc8>)
 8001466:	9301      	str	r3, [sp, #4]
 8001468:	230a      	movs	r3, #10
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	2300      	movs	r3, #0
 800146e:	4a27      	ldr	r2, [pc, #156]	; (800150c <AppTaskCreate+0xcc>)
 8001470:	4927      	ldr	r1, [pc, #156]	; (8001510 <AppTaskCreate+0xd0>)
 8001472:	4828      	ldr	r0, [pc, #160]	; (8001514 <AppTaskCreate+0xd4>)
 8001474:	f001 f804 	bl	8002480 <OSTaskCreate>
           (OS_MSG_QTY) 0u,
           (OS_TICK) 0u,
           (void       *) 0,
           (OS_OPT) (OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
           (OS_ERR     *) &err);
  if (err != OS_ERR_NONE)
 8001478:	88fb      	ldrh	r3, [r7, #6]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d002      	beq.n	8001484 <AppTaskCreate+0x44>
    APP_TRACE_DBG ("Error OSTaskCreate: AppTaskCreate\n");
 800147e:	4826      	ldr	r0, [pc, #152]	; (8001518 <AppTaskCreate+0xd8>)
 8001480:	f006 ff9a 	bl	80083b8 <puts>

  // create AppTask_IO
    OSTaskCreate ( (OS_TCB     *) &AppTaskEndstopsTCB,
 8001484:	1dbb      	adds	r3, r7, #6
 8001486:	9308      	str	r3, [sp, #32]
 8001488:	2303      	movs	r3, #3
 800148a:	9307      	str	r3, [sp, #28]
 800148c:	2300      	movs	r3, #0
 800148e:	9306      	str	r3, [sp, #24]
 8001490:	2300      	movs	r3, #0
 8001492:	9305      	str	r3, [sp, #20]
 8001494:	2300      	movs	r3, #0
 8001496:	9304      	str	r3, [sp, #16]
 8001498:	f44f 7380 	mov.w	r3, #256	; 0x100
 800149c:	9303      	str	r3, [sp, #12]
 800149e:	2319      	movs	r3, #25
 80014a0:	9302      	str	r3, [sp, #8]
 80014a2:	4b1e      	ldr	r3, [pc, #120]	; (800151c <AppTaskCreate+0xdc>)
 80014a4:	9301      	str	r3, [sp, #4]
 80014a6:	230b      	movs	r3, #11
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	2300      	movs	r3, #0
 80014ac:	4a1c      	ldr	r2, [pc, #112]	; (8001520 <AppTaskCreate+0xe0>)
 80014ae:	491d      	ldr	r1, [pc, #116]	; (8001524 <AppTaskCreate+0xe4>)
 80014b0:	481d      	ldr	r0, [pc, #116]	; (8001528 <AppTaskCreate+0xe8>)
 80014b2:	f000 ffe5 	bl	8002480 <OSTaskCreate>
             (OS_MSG_QTY) 0u,
             (OS_TICK) 0u,
             (void       *) 0,
             (OS_OPT) (OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
             (OS_ERR     *) &err);
    if (err != OS_ERR_NONE)
 80014b6:	88fb      	ldrh	r3, [r7, #6]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d002      	beq.n	80014c2 <AppTaskCreate+0x82>
      APP_TRACE_DBG ("Error OSTaskCreate: AppTaskCreate\n");
 80014bc:	4816      	ldr	r0, [pc, #88]	; (8001518 <AppTaskCreate+0xd8>)
 80014be:	f006 ff7b 	bl	80083b8 <puts>


  // create AppTask_IO
        OSTaskCreate ( (OS_TCB     *) &AppTaskServoTCB,
 80014c2:	1dbb      	adds	r3, r7, #6
 80014c4:	9308      	str	r3, [sp, #32]
 80014c6:	2303      	movs	r3, #3
 80014c8:	9307      	str	r3, [sp, #28]
 80014ca:	2300      	movs	r3, #0
 80014cc:	9306      	str	r3, [sp, #24]
 80014ce:	2300      	movs	r3, #0
 80014d0:	9305      	str	r3, [sp, #20]
 80014d2:	2300      	movs	r3, #0
 80014d4:	9304      	str	r3, [sp, #16]
 80014d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014da:	9303      	str	r3, [sp, #12]
 80014dc:	2319      	movs	r3, #25
 80014de:	9302      	str	r3, [sp, #8]
 80014e0:	4b12      	ldr	r3, [pc, #72]	; (800152c <AppTaskCreate+0xec>)
 80014e2:	9301      	str	r3, [sp, #4]
 80014e4:	230b      	movs	r3, #11
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	2300      	movs	r3, #0
 80014ea:	4a11      	ldr	r2, [pc, #68]	; (8001530 <AppTaskCreate+0xf0>)
 80014ec:	4911      	ldr	r1, [pc, #68]	; (8001534 <AppTaskCreate+0xf4>)
 80014ee:	4812      	ldr	r0, [pc, #72]	; (8001538 <AppTaskCreate+0xf8>)
 80014f0:	f000 ffc6 	bl	8002480 <OSTaskCreate>
                 (OS_MSG_QTY) 0u,
                 (OS_TICK) 0u,
                 (void       *) 0,
                 (OS_OPT) (OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
                 (OS_ERR     *) &err);
        if (err != OS_ERR_NONE)
 80014f4:	88fb      	ldrh	r3, [r7, #6]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d002      	beq.n	8001500 <AppTaskCreate+0xc0>
          APP_TRACE_DBG ("Error OSTaskCreate: AppTaskCreate\n");
 80014fa:	4807      	ldr	r0, [pc, #28]	; (8001518 <AppTaskCreate+0xd8>)
 80014fc:	f006 ff5c 	bl	80083b8 <puts>

}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20000ea0 	.word	0x20000ea0
 800150c:	0800153d 	.word	0x0800153d
 8001510:	0800e3a4 	.word	0x0800e3a4
 8001514:	20001aa0 	.word	0x20001aa0
 8001518:	0800e3ac 	.word	0x0800e3ac
 800151c:	200012a0 	.word	0x200012a0
 8001520:	0800167d 	.word	0x0800167d
 8001524:	0800e3d0 	.word	0x0800e3d0
 8001528:	20001b60 	.word	0x20001b60
 800152c:	200016a0 	.word	0x200016a0
 8001530:	080016ad 	.word	0x080016ad
 8001534:	0800e3e0 	.word	0x0800e3e0
 8001538:	20001c20 	.word	0x20001c20

0800153c <AppTaskCom>:
 *        (3) Launch a terminal program and connect with 9600-8N1
 *            Enter strings like: #12345$, #abc$, etc.
 *            The XMC will respond with: XMC: 12345, XMC: abc, etc.
 */
static void AppTaskCom (void *p_arg)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b09a      	sub	sp, #104	; 0x68
 8001540:	af02      	add	r7, sp, #8
 8001542:	6078      	str	r0, [r7, #4]
  void        *p_msg;
  OS_ERR      err;
  OS_MSG_SIZE msg_size;
  CPU_TS      ts;
  CPU_CHAR    msg[MAX_MSG_LENGTH];
  CPU_INT08U  i = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  CPU_CHAR    debug_msg[MAX_MSG_LENGTH + 30];

  (void) p_arg;                                                          // <14>
  APP_TRACE_INFO ("Entering AppTaskCom ...\n");
 800154a:	4845      	ldr	r0, [pc, #276]	; (8001660 <AppTaskCom+0x124>)
 800154c:	f006 ff34 	bl	80083b8 <puts>
  while (DEF_TRUE) {
    // empty the message buffer
    memset (&msg, 0, MAX_MSG_LENGTH);                                    // <15>
 8001550:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001554:	2214      	movs	r2, #20
 8001556:	2100      	movs	r1, #0
 8001558:	4618      	mov	r0, r3
 800155a:	f006 fe97 	bl	800828c <memset>

    // wait until a message is received
    p_msg = OSQPend (&UART_ISR,                                          // <16>
 800155e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001562:	f107 0356 	add.w	r3, r7, #86	; 0x56
 8001566:	9301      	str	r3, [sp, #4]
 8001568:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800156c:	9300      	str	r3, [sp, #0]
 800156e:	4613      	mov	r3, r2
 8001570:	2200      	movs	r2, #0
 8001572:	2100      	movs	r1, #0
 8001574:	483b      	ldr	r0, [pc, #236]	; (8001664 <AppTaskCom+0x128>)
 8001576:	f000 fd8f 	bl	8002098 <OSQPend>
 800157a:	65b8      	str	r0, [r7, #88]	; 0x58
         0,
         OS_OPT_PEND_BLOCKING,
         &msg_size,
         &ts,
         &err);
    if (err != OS_ERR_NONE)
 800157c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001580:	2b00      	cmp	r3, #0
 8001582:	d002      	beq.n	800158a <AppTaskCom+0x4e>
      APP_TRACE_DBG ("Error OSQPend: AppTaskCom\n");
 8001584:	4838      	ldr	r0, [pc, #224]	; (8001668 <AppTaskCom+0x12c>)
 8001586:	f006 ff17 	bl	80083b8 <puts>

    // obtain message we received
    memcpy (msg, (CPU_CHAR*) p_msg, msg_size - 1);                       // <17>
 800158a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800158e:	3b01      	subs	r3, #1
 8001590:	461a      	mov	r2, r3
 8001592:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001596:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff f843 	bl	8000624 <memcpy>

    // release the memory partition allocated in the UART service routine
    OSMemPut (&Mem_Partition, p_msg, &err);                              // <18>
 800159e:	f107 0356 	add.w	r3, r7, #86	; 0x56
 80015a2:	461a      	mov	r2, r3
 80015a4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80015a6:	4831      	ldr	r0, [pc, #196]	; (800166c <AppTaskCom+0x130>)
 80015a8:	f004 fa86 	bl	8005ab8 <OSMemPut>
    if (err != OS_ERR_NONE)
 80015ac:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d002      	beq.n	80015ba <AppTaskCom+0x7e>
      APP_TRACE_DBG ("Error OSMemPut: AppTaskCom\n");
 80015b4:	482e      	ldr	r0, [pc, #184]	; (8001670 <AppTaskCom+0x134>)
 80015b6:	f006 feff 	bl	80083b8 <puts>

    // send ACK in return
    XMC_UART_CH_Transmit (XMC_UART1_CH1, ACK);                           // <19>
 80015ba:	2106      	movs	r1, #6
 80015bc:	482d      	ldr	r0, [pc, #180]	; (8001674 <AppTaskCom+0x138>)
 80015be:	f006 fcb9 	bl	8007f34 <XMC_UART_CH_Transmit>

    // print the received message to the debug interface
    sprintf (debug_msg, "Msg: %s\tLength: %d\n", msg, msg_size - 1);     // <20>
 80015c2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80015c6:	3b01      	subs	r3, #1
 80015c8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80015cc:	f107 0008 	add.w	r0, r7, #8
 80015d0:	4929      	ldr	r1, [pc, #164]	; (8001678 <AppTaskCom+0x13c>)
 80015d2:	f006 fef9 	bl	80083c8 <sprintf>
    APP_TRACE_INFO (debug_msg);
 80015d6:	f107 0308 	add.w	r3, r7, #8
 80015da:	4618      	mov	r0, r3
 80015dc:	f006 fea4 	bl	8008328 <printf>

    // send the received message back via the UART pre-text with "XMC: "
    XMC_UART_CH_Transmit (XMC_UART1_CH1, 'X');                           // <21>
 80015e0:	2158      	movs	r1, #88	; 0x58
 80015e2:	4824      	ldr	r0, [pc, #144]	; (8001674 <AppTaskCom+0x138>)
 80015e4:	f006 fca6 	bl	8007f34 <XMC_UART_CH_Transmit>
    XMC_UART_CH_Transmit (XMC_UART1_CH1, 'M');
 80015e8:	214d      	movs	r1, #77	; 0x4d
 80015ea:	4822      	ldr	r0, [pc, #136]	; (8001674 <AppTaskCom+0x138>)
 80015ec:	f006 fca2 	bl	8007f34 <XMC_UART_CH_Transmit>
    XMC_UART_CH_Transmit (XMC_UART1_CH1, 'C');
 80015f0:	2143      	movs	r1, #67	; 0x43
 80015f2:	4820      	ldr	r0, [pc, #128]	; (8001674 <AppTaskCom+0x138>)
 80015f4:	f006 fc9e 	bl	8007f34 <XMC_UART_CH_Transmit>
    XMC_UART_CH_Transmit (XMC_UART1_CH1, ':');
 80015f8:	213a      	movs	r1, #58	; 0x3a
 80015fa:	481e      	ldr	r0, [pc, #120]	; (8001674 <AppTaskCom+0x138>)
 80015fc:	f006 fc9a 	bl	8007f34 <XMC_UART_CH_Transmit>
    XMC_UART_CH_Transmit (XMC_UART1_CH1, ' ');
 8001600:	2120      	movs	r1, #32
 8001602:	481c      	ldr	r0, [pc, #112]	; (8001674 <AppTaskCom+0x138>)
 8001604:	f006 fc96 	bl	8007f34 <XMC_UART_CH_Transmit>
    for (i = 0; i <= msg_size; i++) {
 8001608:	2300      	movs	r3, #0
 800160a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800160e:	e019      	b.n	8001644 <AppTaskCom+0x108>
    	if (msg[i] != 0){
 8001610:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001614:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001618:	4413      	add	r3, r2
 800161a:	f913 3c24 	ldrsb.w	r3, [r3, #-36]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d018      	beq.n	8001654 <AppTaskCom+0x118>
 			XMC_UART_CH_Transmit (XMC_UART1_CH1, msg[i]);
 8001622:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001626:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800162a:	4413      	add	r3, r2
 800162c:	f913 3c24 	ldrsb.w	r3, [r3, #-36]
 8001630:	b29b      	uxth	r3, r3
 8001632:	4619      	mov	r1, r3
 8001634:	480f      	ldr	r0, [pc, #60]	; (8001674 <AppTaskCom+0x138>)
 8001636:	f006 fc7d 	bl	8007f34 <XMC_UART_CH_Transmit>
    XMC_UART_CH_Transmit (XMC_UART1_CH1, 'X');                           // <21>
    XMC_UART_CH_Transmit (XMC_UART1_CH1, 'M');
    XMC_UART_CH_Transmit (XMC_UART1_CH1, 'C');
    XMC_UART_CH_Transmit (XMC_UART1_CH1, ':');
    XMC_UART_CH_Transmit (XMC_UART1_CH1, ' ');
    for (i = 0; i <= msg_size; i++) {
 800163a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800163e:	3301      	adds	r3, #1
 8001640:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001644:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001648:	b29a      	uxth	r2, r3
 800164a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800164e:	429a      	cmp	r2, r3
 8001650:	d9de      	bls.n	8001610 <AppTaskCom+0xd4>
 8001652:	e000      	b.n	8001656 <AppTaskCom+0x11a>
    	if (msg[i] != 0){
 			XMC_UART_CH_Transmit (XMC_UART1_CH1, msg[i]);
     	}else{
       		break;
 8001654:	bf00      	nop
    	}
    }
    XMC_UART_CH_Transmit (XMC_UART1_CH1, '\n');
 8001656:	210a      	movs	r1, #10
 8001658:	4806      	ldr	r0, [pc, #24]	; (8001674 <AppTaskCom+0x138>)
 800165a:	f006 fc6b 	bl	8007f34 <XMC_UART_CH_Transmit>
  }
 800165e:	e777      	b.n	8001550 <AppTaskCom+0x14>
 8001660:	0800e3f0 	.word	0x0800e3f0
 8001664:	20001fbc 	.word	0x20001fbc
 8001668:	0800e408 	.word	0x0800e408
 800166c:	20001fec 	.word	0x20001fec
 8001670:	0800e424 	.word	0x0800e424
 8001674:	48020200 	.word	0x48020200
 8001678:	0800e440 	.word	0x0800e440

0800167c <AppTaskStepper_Y>:
}
/***********************************AppTask_Io*/
void AppTaskStepper_Y (void *p_arg)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
	OS_ERR      err;
	CPU_TS      ts=0;
 8001684:	2300      	movs	r3, #0
 8001686:	60fb      	str	r3, [r7, #12]
	APP_TRACE_INFO ("Entering AppTaskStepperY ...\n");
 8001688:	4807      	ldr	r0, [pc, #28]	; (80016a8 <AppTaskStepper_Y+0x2c>)
 800168a:	f006 fe95 	bl	80083b8 <puts>

	while(1){
		while(_mcp23s08_step_posy()){}
 800168e:	bf00      	nop
 8001690:	f000 f902 	bl	8001898 <_mcp23s08_step_posy>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1fa      	bne.n	8001690 <AppTaskStepper_Y+0x14>
		while(_mcp23s08_step_negy()){}
 800169a:	bf00      	nop
 800169c:	f000 f962 	bl	8001964 <_mcp23s08_step_negy>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1fa      	bne.n	800169c <AppTaskStepper_Y+0x20>
	}//Whileend
 80016a6:	e7f2      	b.n	800168e <AppTaskStepper_Y+0x12>
 80016a8:	0800e454 	.word	0x0800e454

080016ac <AppTaskStepper_X>:
}

//Servo
void AppTaskStepper_X (void *p_arg){
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
	OS_ERR      err;
	CPU_TS      ts=0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60fb      	str	r3, [r7, #12]
	APP_TRACE_INFO ("Entering AppTaskStepperX ...\n");
 80016b8:	4807      	ldr	r0, [pc, #28]	; (80016d8 <AppTaskStepper_X+0x2c>)
 80016ba:	f006 fe7d 	bl	80083b8 <puts>

	while(1){
		while(_mcp23s08_step_posx()){}
 80016be:	bf00      	nop
 80016c0:	f000 f9b4 	bl	8001a2c <_mcp23s08_step_posx>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1fa      	bne.n	80016c0 <AppTaskStepper_X+0x14>
		while(_mcp23s08_step_negx()){}
 80016ca:	bf00      	nop
 80016cc:	f000 fa10 	bl	8001af0 <_mcp23s08_step_negx>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1fa      	bne.n	80016cc <AppTaskStepper_X+0x20>
	}
 80016d6:	e7f2      	b.n	80016be <AppTaskStepper_X+0x12>
 80016d8:	0800e474 	.word	0x0800e474

080016dc <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	460b      	mov	r3, r1
 80016e6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016ec:	78fb      	ldrb	r3, [r7, #3]
 80016ee:	fa22 f303 	lsr.w	r3, r2, r3
 80016f2:	f003 0301 	and.w	r3, r3, #1
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr

08001700 <debounce>:
#include <mylib.h>
#include <bsp_gpio.h>


//_________________________________DEBOUNCE
_Bool debounce(int port,  int pin){
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
	//CPU_INT08U i=2;
	CPU_INT08U f_press=0;
 800170a:	2300      	movs	r3, #0
 800170c:	73fb      	strb	r3, [r7, #15]
	//CPU_INT08U press=0;
	//OS_ERR      err;
	f_press=XMC_GPIO_GetInput((XMC_GPIO_PORT_t *const) port,(const uint8_t)pin);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	4611      	mov	r1, r2
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff ffe0 	bl	80016dc <XMC_GPIO_GetInput>
 800171c:	4603      	mov	r3, r0
 800171e:	73fb      	strb	r3, [r7, #15]
						OS_OPT_TIME_HMSM_STRICT ,
			       		&err);
  		if (err != OS_ERR_NONE)
  			return 3;
	}*/
	return f_press;
 8001720:	7bfb      	ldrb	r3, [r7, #15]
 8001722:	2b00      	cmp	r3, #0
 8001724:	bf14      	ite	ne
 8001726:	2301      	movne	r3, #1
 8001728:	2300      	moveq	r3, #0
 800172a:	b2db      	uxtb	r3, r3
}
 800172c:	4618      	mov	r0, r3
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <pen_up>:

void pen_up(void){
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
	CCU40_0_SetCapture(2);
 8001738:	2002      	movs	r0, #2
 800173a:	f004 fe5f 	bl	80063fc <CCU40_0_SetCapture>
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop

08001744 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	460b      	mov	r3, r1
 800174e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8001750:	78fb      	ldrb	r3, [r7, #3]
 8001752:	2201      	movs	r2, #1
 8001754:	409a      	lsls	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	605a      	str	r2, [r3, #4]
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr

08001764 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	460b      	mov	r3, r1
 800176e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8001770:	78fb      	ldrb	r3, [r7, #3]
 8001772:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001776:	409a      	lsls	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	605a      	str	r2, [r3, #4]
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop

08001788 <_mcp23s08_reset_ss>:
 *  @param XMC_GPIO_PORT_t *const port, const uint8_t pin
 *  @return on success this function returns MCP23S08_OK (0) otherwise it check
 *  the given port on validity
 */
uint8_t _mcp23s08_reset_ss(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	460b      	mov	r3, r1
 8001792:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));

  XMC_GPIO_SetOutputLow(port,pin);
 8001794:	78fb      	ldrb	r3, [r7, #3]
 8001796:	4619      	mov	r1, r3
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff ffe3 	bl	8001764 <XMC_GPIO_SetOutputLow>

  return MCP23S08_OK;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <_mcp23s08_set_ss>:
 *  @param XMC_GPIO_PORT_t *const port, const uint8_t pin
 *  @return on success this function returns MCP23S08_OK (0) otherwise it check
 *  the given port on validity
 */
uint8_t _mcp23s08_set_ss(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	460b      	mov	r3, r1
 80017b2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));

  XMC_GPIO_SetOutputHigh(port,pin);
 80017b4:	78fb      	ldrb	r3, [r7, #3]
 80017b6:	4619      	mov	r1, r3
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff ffc3 	bl	8001744 <XMC_GPIO_SetOutputHigh>

  return MCP23S08_OK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <_mcp23s08_reset>:
 *  @brief This function toggles the reset for the MCP23S08
 *  @param XMC_GPIO_PORT_t *const port, const uint8_t pin
 *  @return on success this function returns MCP23S08_OK (0)
 */
uint8_t _mcp23s08_reset(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  XMC_GPIO_SetOutputLow(MCP23S08_RESET);
 80017cc:	210c      	movs	r1, #12
 80017ce:	4805      	ldr	r0, [pc, #20]	; (80017e4 <_mcp23s08_reset+0x1c>)
 80017d0:	f7ff ffc8 	bl	8001764 <XMC_GPIO_SetOutputLow>
  XMC_GPIO_SetOutputHigh(MCP23S08_RESET);
 80017d4:	210c      	movs	r1, #12
 80017d6:	4803      	ldr	r0, [pc, #12]	; (80017e4 <_mcp23s08_reset+0x1c>)
 80017d8:	f7ff ffb4 	bl	8001744 <XMC_GPIO_SetOutputHigh>

  return MCP23S08_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	48028000 	.word	0x48028000

080017e8 <_mcp23s08_reg_xfer>:
 *		   data ...... content of the register
 *		   rd_wr ..... read/write
 *  @return on success this function returns MCP23S08_OK (0)
 */
uint8_t _mcp23s08_reg_xfer(XMC_USIC_CH_t *const channel, uint8_t reg_name, uint8_t data, uint8_t rd_wr)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	4608      	mov	r0, r1
 80017f2:	4611      	mov	r1, r2
 80017f4:	461a      	mov	r2, r3
 80017f6:	4603      	mov	r3, r0
 80017f8:	70fb      	strb	r3, [r7, #3]
 80017fa:	460b      	mov	r3, r1
 80017fc:	70bb      	strb	r3, [r7, #2]
 80017fe:	4613      	mov	r3, r2
 8001800:	707b      	strb	r3, [r7, #1]
  uint8_t recv = 0, mcp23s08_addr_rd = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	73fb      	strb	r3, [r7, #15]
 8001806:	2300      	movs	r3, #0
 8001808:	73bb      	strb	r3, [r7, #14]

  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if(rd_wr)
 800180a:	787b      	ldrb	r3, [r7, #1]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d020      	beq.n	8001852 <_mcp23s08_reg_xfer+0x6a>
  {
	mcp23s08_addr_rd = mcp23s08_addr|MCP23S08_RD;
 8001810:	4b1f      	ldr	r3, [pc, #124]	; (8001890 <_mcp23s08_reg_xfer+0xa8>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	73bb      	strb	r3, [r7, #14]

	_spi_transmit(channel,mcp23s08_addr_rd);
 800181a:	7bbb      	ldrb	r3, [r7, #14]
 800181c:	4619      	mov	r1, r3
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f005 fb8a 	bl	8006f38 <_spi_transmit>
	_spi_receive(channel);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f005 fba7 	bl	8006f78 <_spi_receive>

	_spi_transmit(channel,reg_name);
 800182a:	78fb      	ldrb	r3, [r7, #3]
 800182c:	4619      	mov	r1, r3
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f005 fb82 	bl	8006f38 <_spi_transmit>
	_spi_receive(channel);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f005 fb9f 	bl	8006f78 <_spi_receive>

	_spi_transmit(channel,mcp23s08_nop);
 800183a:	4b16      	ldr	r3, [pc, #88]	; (8001894 <_mcp23s08_reg_xfer+0xac>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	4619      	mov	r1, r3
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f005 fb79 	bl	8006f38 <_spi_transmit>
	recv = _spi_receive(channel);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f005 fb96 	bl	8006f78 <_spi_receive>
 800184c:	4603      	mov	r3, r0
 800184e:	73fb      	strb	r3, [r7, #15]
 8001850:	e018      	b.n	8001884 <_mcp23s08_reg_xfer+0x9c>

  }
  else
  {
	_spi_transmit(channel,mcp23s08_addr);
 8001852:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <_mcp23s08_reg_xfer+0xa8>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	4619      	mov	r1, r3
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f005 fb6d 	bl	8006f38 <_spi_transmit>
	_spi_receive(channel);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f005 fb8a 	bl	8006f78 <_spi_receive>

	_spi_transmit(channel,reg_name);
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	4619      	mov	r1, r3
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f005 fb65 	bl	8006f38 <_spi_transmit>
	_spi_receive(channel);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f005 fb82 	bl	8006f78 <_spi_receive>

	_spi_transmit(channel,data);
 8001874:	78bb      	ldrb	r3, [r7, #2]
 8001876:	4619      	mov	r1, r3
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f005 fb5d 	bl	8006f38 <_spi_transmit>
	_spi_receive(channel);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f005 fb7a 	bl	8006f78 <_spi_receive>
  }

  return recv;
 8001884:	7bfb      	ldrb	r3, [r7, #15]
}
 8001886:	4618      	mov	r0, r3
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000000 	.word	0x20000000
 8001894:	20001ce0 	.word	0x20001ce0

08001898 <_mcp23s08_step_posy>:

uint8_t _mcp23s08_step_posy(void){
 8001898:	b590      	push	{r4, r7, lr}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
	uint8_t reg_val;

	if(debounce(ENDSTOP1)){
 800189e:	210f      	movs	r1, #15
 80018a0:	482d      	ldr	r0, [pc, #180]	; (8001958 <_mcp23s08_step_posy+0xc0>)
 80018a2:	f7ff ff2d 	bl	8001700 <debounce>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d04f      	beq.n	800194c <_mcp23s08_step_posy+0xb4>
		_mcp23s08_reset_ss(MCP23S08_SS);
 80018ac:	2102      	movs	r1, #2
 80018ae:	482a      	ldr	r0, [pc, #168]	; (8001958 <_mcp23s08_step_posy+0xc0>)
 80018b0:	f7ff ff6a 	bl	8001788 <_mcp23s08_reset_ss>
		reg_val = _mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,0,MCP23S08_RD);
 80018b4:	2301      	movs	r3, #1
 80018b6:	2200      	movs	r2, #0
 80018b8:	2109      	movs	r1, #9
 80018ba:	4828      	ldr	r0, [pc, #160]	; (800195c <_mcp23s08_step_posy+0xc4>)
 80018bc:	f7ff ff94 	bl	80017e8 <_mcp23s08_reg_xfer>
 80018c0:	4603      	mov	r3, r0
 80018c2:	71fb      	strb	r3, [r7, #7]
		_mcp23s08_set_ss(MCP23S08_SS);
 80018c4:	2102      	movs	r1, #2
 80018c6:	4824      	ldr	r0, [pc, #144]	; (8001958 <_mcp23s08_step_posy+0xc0>)
 80018c8:	f7ff ff6e 	bl	80017a8 <_mcp23s08_set_ss>

		_mcp23s08_reset_ss(MCP23S08_SS);
 80018cc:	2102      	movs	r1, #2
 80018ce:	4822      	ldr	r0, [pc, #136]	; (8001958 <_mcp23s08_step_posy+0xc0>)
 80018d0:	f7ff ff5a 	bl	8001788 <_mcp23s08_reset_ss>
		_mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,(reg_val | 0x02) & 0xFE,MCP23S08_WR);
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	f043 0302 	orr.w	r3, r3, #2
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	f023 0301 	bic.w	r3, r3, #1
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	2300      	movs	r3, #0
 80018e4:	2109      	movs	r1, #9
 80018e6:	481d      	ldr	r0, [pc, #116]	; (800195c <_mcp23s08_step_posy+0xc4>)
 80018e8:	f7ff ff7e 	bl	80017e8 <_mcp23s08_reg_xfer>
		_mcp23s08_set_ss(MCP23S08_SS);
 80018ec:	2102      	movs	r1, #2
 80018ee:	481a      	ldr	r0, [pc, #104]	; (8001958 <_mcp23s08_step_posy+0xc0>)
 80018f0:	f7ff ff5a 	bl	80017a8 <_mcp23s08_set_ss>

		//APP_TRACE_INFO ("PLOTTERSTEP HIGH...\n");
		_mcp23s08_reset_ss(MCP23S08_SS);
 80018f4:	2102      	movs	r1, #2
 80018f6:	4818      	ldr	r0, [pc, #96]	; (8001958 <_mcp23s08_step_posy+0xc0>)
 80018f8:	f7ff ff46 	bl	8001788 <_mcp23s08_reset_ss>
		reg_val = _mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,0,MCP23S08_RD);
 80018fc:	2301      	movs	r3, #1
 80018fe:	2200      	movs	r2, #0
 8001900:	2109      	movs	r1, #9
 8001902:	4816      	ldr	r0, [pc, #88]	; (800195c <_mcp23s08_step_posy+0xc4>)
 8001904:	f7ff ff70 	bl	80017e8 <_mcp23s08_reg_xfer>
 8001908:	4603      	mov	r3, r0
 800190a:	71fb      	strb	r3, [r7, #7]
		_mcp23s08_set_ss(MCP23S08_SS);
 800190c:	2102      	movs	r1, #2
 800190e:	4812      	ldr	r0, [pc, #72]	; (8001958 <_mcp23s08_step_posy+0xc0>)
 8001910:	f7ff ff4a 	bl	80017a8 <_mcp23s08_set_ss>

		_mcp23s08_reset_ss(MCP23S08_SS);
 8001914:	2102      	movs	r1, #2
 8001916:	4810      	ldr	r0, [pc, #64]	; (8001958 <_mcp23s08_step_posy+0xc0>)
 8001918:	f7ff ff36 	bl	8001788 <_mcp23s08_reset_ss>
		_mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,reg_val & 0xFD,MCP23S08_WR);
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	f023 0302 	bic.w	r3, r3, #2
 8001922:	b2da      	uxtb	r2, r3
 8001924:	2300      	movs	r3, #0
 8001926:	2109      	movs	r1, #9
 8001928:	480c      	ldr	r0, [pc, #48]	; (800195c <_mcp23s08_step_posy+0xc4>)
 800192a:	f7ff ff5d 	bl	80017e8 <_mcp23s08_reg_xfer>
		_mcp23s08_set_ss(MCP23S08_SS);
 800192e:	2102      	movs	r1, #2
 8001930:	4809      	ldr	r0, [pc, #36]	; (8001958 <_mcp23s08_step_posy+0xc0>)
 8001932:	f7ff ff39 	bl	80017a8 <_mcp23s08_set_ss>
		y_steps++;
 8001936:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <_mcp23s08_step_posy+0xc8>)
 8001938:	e9d3 3400 	ldrd	r3, r4, [r3]
 800193c:	3301      	adds	r3, #1
 800193e:	f144 0400 	adc.w	r4, r4, #0
 8001942:	4a07      	ldr	r2, [pc, #28]	; (8001960 <_mcp23s08_step_posy+0xc8>)
 8001944:	e9c2 3400 	strd	r3, r4, [r2]
		return 1;
 8001948:	2301      	movs	r3, #1
 800194a:	e000      	b.n	800194e <_mcp23s08_step_posy+0xb6>
	}else{
		return 0;
 800194c:	2300      	movs	r3, #0
	}
}
 800194e:	4618      	mov	r0, r3
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	bd90      	pop	{r4, r7, pc}
 8001956:	bf00      	nop
 8001958:	48028100 	.word	0x48028100
 800195c:	48020000 	.word	0x48020000
 8001960:	20001cf0 	.word	0x20001cf0

08001964 <_mcp23s08_step_negy>:


uint8_t _mcp23s08_step_negy(void){
 8001964:	b590      	push	{r4, r7, lr}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
	uint8_t reg_val;

	if(debounce(ENDSTOP2)){
 800196a:	210d      	movs	r1, #13
 800196c:	482c      	ldr	r0, [pc, #176]	; (8001a20 <_mcp23s08_step_negy+0xbc>)
 800196e:	f7ff fec7 	bl	8001700 <debounce>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d04d      	beq.n	8001a14 <_mcp23s08_step_negy+0xb0>
		_mcp23s08_reset_ss(MCP23S08_SS);
 8001978:	2102      	movs	r1, #2
 800197a:	4829      	ldr	r0, [pc, #164]	; (8001a20 <_mcp23s08_step_negy+0xbc>)
 800197c:	f7ff ff04 	bl	8001788 <_mcp23s08_reset_ss>
		reg_val = _mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,0,MCP23S08_RD);
 8001980:	2301      	movs	r3, #1
 8001982:	2200      	movs	r2, #0
 8001984:	2109      	movs	r1, #9
 8001986:	4827      	ldr	r0, [pc, #156]	; (8001a24 <_mcp23s08_step_negy+0xc0>)
 8001988:	f7ff ff2e 	bl	80017e8 <_mcp23s08_reg_xfer>
 800198c:	4603      	mov	r3, r0
 800198e:	71fb      	strb	r3, [r7, #7]
		_mcp23s08_set_ss(MCP23S08_SS);
 8001990:	2102      	movs	r1, #2
 8001992:	4823      	ldr	r0, [pc, #140]	; (8001a20 <_mcp23s08_step_negy+0xbc>)
 8001994:	f7ff ff08 	bl	80017a8 <_mcp23s08_set_ss>

		_mcp23s08_reset_ss(MCP23S08_SS);
 8001998:	2102      	movs	r1, #2
 800199a:	4821      	ldr	r0, [pc, #132]	; (8001a20 <_mcp23s08_step_negy+0xbc>)
 800199c:	f7ff fef4 	bl	8001788 <_mcp23s08_reset_ss>
		_mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,reg_val | 0x03,MCP23S08_WR);
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	f043 0303 	orr.w	r3, r3, #3
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	2300      	movs	r3, #0
 80019aa:	2109      	movs	r1, #9
 80019ac:	481d      	ldr	r0, [pc, #116]	; (8001a24 <_mcp23s08_step_negy+0xc0>)
 80019ae:	f7ff ff1b 	bl	80017e8 <_mcp23s08_reg_xfer>
		_mcp23s08_set_ss(MCP23S08_SS);
 80019b2:	2102      	movs	r1, #2
 80019b4:	481a      	ldr	r0, [pc, #104]	; (8001a20 <_mcp23s08_step_negy+0xbc>)
 80019b6:	f7ff fef7 	bl	80017a8 <_mcp23s08_set_ss>

		//APP_TRACE_INFO ("PLOTTERSTEP HIGH...\n");
		_mcp23s08_reset_ss(MCP23S08_SS);
 80019ba:	2102      	movs	r1, #2
 80019bc:	4818      	ldr	r0, [pc, #96]	; (8001a20 <_mcp23s08_step_negy+0xbc>)
 80019be:	f7ff fee3 	bl	8001788 <_mcp23s08_reset_ss>
		reg_val = _mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,0,MCP23S08_RD);
 80019c2:	2301      	movs	r3, #1
 80019c4:	2200      	movs	r2, #0
 80019c6:	2109      	movs	r1, #9
 80019c8:	4816      	ldr	r0, [pc, #88]	; (8001a24 <_mcp23s08_step_negy+0xc0>)
 80019ca:	f7ff ff0d 	bl	80017e8 <_mcp23s08_reg_xfer>
 80019ce:	4603      	mov	r3, r0
 80019d0:	71fb      	strb	r3, [r7, #7]
		_mcp23s08_set_ss(MCP23S08_SS);
 80019d2:	2102      	movs	r1, #2
 80019d4:	4812      	ldr	r0, [pc, #72]	; (8001a20 <_mcp23s08_step_negy+0xbc>)
 80019d6:	f7ff fee7 	bl	80017a8 <_mcp23s08_set_ss>

		_mcp23s08_reset_ss(MCP23S08_SS);
 80019da:	2102      	movs	r1, #2
 80019dc:	4810      	ldr	r0, [pc, #64]	; (8001a20 <_mcp23s08_step_negy+0xbc>)
 80019de:	f7ff fed3 	bl	8001788 <_mcp23s08_reset_ss>
		_mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,reg_val & 0xFD,MCP23S08_WR);
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	f023 0302 	bic.w	r3, r3, #2
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	2300      	movs	r3, #0
 80019ec:	2109      	movs	r1, #9
 80019ee:	480d      	ldr	r0, [pc, #52]	; (8001a24 <_mcp23s08_step_negy+0xc0>)
 80019f0:	f7ff fefa 	bl	80017e8 <_mcp23s08_reg_xfer>
		_mcp23s08_set_ss(MCP23S08_SS);
 80019f4:	2102      	movs	r1, #2
 80019f6:	480a      	ldr	r0, [pc, #40]	; (8001a20 <_mcp23s08_step_negy+0xbc>)
 80019f8:	f7ff fed6 	bl	80017a8 <_mcp23s08_set_ss>
		y_steps--;
 80019fc:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <_mcp23s08_step_negy+0xc4>)
 80019fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001a02:	f113 33ff 	adds.w	r3, r3, #4294967295
 8001a06:	f144 34ff 	adc.w	r4, r4, #4294967295
 8001a0a:	4a07      	ldr	r2, [pc, #28]	; (8001a28 <_mcp23s08_step_negy+0xc4>)
 8001a0c:	e9c2 3400 	strd	r3, r4, [r2]
		return 1;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e000      	b.n	8001a16 <_mcp23s08_step_negy+0xb2>
	}else{
		return 0;
 8001a14:	2300      	movs	r3, #0
	}
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd90      	pop	{r4, r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	48028100 	.word	0x48028100
 8001a24:	48020000 	.word	0x48020000
 8001a28:	20001cf0 	.word	0x20001cf0

08001a2c <_mcp23s08_step_posx>:


uint8_t _mcp23s08_step_posx(void){
 8001a2c:	b590      	push	{r4, r7, lr}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
	uint8_t reg_val;

	if(debounce(ENDSTOP4)){
 8001a32:	210c      	movs	r1, #12
 8001a34:	482b      	ldr	r0, [pc, #172]	; (8001ae4 <_mcp23s08_step_posx+0xb8>)
 8001a36:	f7ff fe63 	bl	8001700 <debounce>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d04c      	beq.n	8001ada <_mcp23s08_step_posx+0xae>

		_mcp23s08_reset_ss(MCP23S08_SS);
 8001a40:	2102      	movs	r1, #2
 8001a42:	4828      	ldr	r0, [pc, #160]	; (8001ae4 <_mcp23s08_step_posx+0xb8>)
 8001a44:	f7ff fea0 	bl	8001788 <_mcp23s08_reset_ss>
		reg_val = _mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,0,MCP23S08_RD);
 8001a48:	2301      	movs	r3, #1
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2109      	movs	r1, #9
 8001a4e:	4826      	ldr	r0, [pc, #152]	; (8001ae8 <_mcp23s08_step_posx+0xbc>)
 8001a50:	f7ff feca 	bl	80017e8 <_mcp23s08_reg_xfer>
 8001a54:	4603      	mov	r3, r0
 8001a56:	71fb      	strb	r3, [r7, #7]
		_mcp23s08_set_ss(MCP23S08_SS);
 8001a58:	2102      	movs	r1, #2
 8001a5a:	4822      	ldr	r0, [pc, #136]	; (8001ae4 <_mcp23s08_step_posx+0xb8>)
 8001a5c:	f7ff fea4 	bl	80017a8 <_mcp23s08_set_ss>

		_mcp23s08_reset_ss(MCP23S08_SS);
 8001a60:	2102      	movs	r1, #2
 8001a62:	4820      	ldr	r0, [pc, #128]	; (8001ae4 <_mcp23s08_step_posx+0xb8>)
 8001a64:	f7ff fe90 	bl	8001788 <_mcp23s08_reset_ss>
		_mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,reg_val | 0x0C,MCP23S08_WR);
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	f043 030c 	orr.w	r3, r3, #12
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	2300      	movs	r3, #0
 8001a72:	2109      	movs	r1, #9
 8001a74:	481c      	ldr	r0, [pc, #112]	; (8001ae8 <_mcp23s08_step_posx+0xbc>)
 8001a76:	f7ff feb7 	bl	80017e8 <_mcp23s08_reg_xfer>
		_mcp23s08_set_ss(MCP23S08_SS);
 8001a7a:	2102      	movs	r1, #2
 8001a7c:	4819      	ldr	r0, [pc, #100]	; (8001ae4 <_mcp23s08_step_posx+0xb8>)
 8001a7e:	f7ff fe93 	bl	80017a8 <_mcp23s08_set_ss>

		//APP_TRACE_INFO ("PLOTTERSTEP HIGH...\n");

		_mcp23s08_reset_ss(MCP23S08_SS);
 8001a82:	2102      	movs	r1, #2
 8001a84:	4817      	ldr	r0, [pc, #92]	; (8001ae4 <_mcp23s08_step_posx+0xb8>)
 8001a86:	f7ff fe7f 	bl	8001788 <_mcp23s08_reset_ss>
		reg_val = _mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,0,MCP23S08_RD);
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2109      	movs	r1, #9
 8001a90:	4815      	ldr	r0, [pc, #84]	; (8001ae8 <_mcp23s08_step_posx+0xbc>)
 8001a92:	f7ff fea9 	bl	80017e8 <_mcp23s08_reg_xfer>
 8001a96:	4603      	mov	r3, r0
 8001a98:	71fb      	strb	r3, [r7, #7]
		_mcp23s08_set_ss(MCP23S08_SS);
 8001a9a:	2102      	movs	r1, #2
 8001a9c:	4811      	ldr	r0, [pc, #68]	; (8001ae4 <_mcp23s08_step_posx+0xb8>)
 8001a9e:	f7ff fe83 	bl	80017a8 <_mcp23s08_set_ss>

		_mcp23s08_reset_ss(MCP23S08_SS);
 8001aa2:	2102      	movs	r1, #2
 8001aa4:	480f      	ldr	r0, [pc, #60]	; (8001ae4 <_mcp23s08_step_posx+0xb8>)
 8001aa6:	f7ff fe6f 	bl	8001788 <_mcp23s08_reset_ss>
		_mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,reg_val & 0xF7,MCP23S08_WR);
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	f023 0308 	bic.w	r3, r3, #8
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	2109      	movs	r1, #9
 8001ab6:	480c      	ldr	r0, [pc, #48]	; (8001ae8 <_mcp23s08_step_posx+0xbc>)
 8001ab8:	f7ff fe96 	bl	80017e8 <_mcp23s08_reg_xfer>
		_mcp23s08_set_ss(MCP23S08_SS);
 8001abc:	2102      	movs	r1, #2
 8001abe:	4809      	ldr	r0, [pc, #36]	; (8001ae4 <_mcp23s08_step_posx+0xb8>)
 8001ac0:	f7ff fe72 	bl	80017a8 <_mcp23s08_set_ss>
		x_steps++;
 8001ac4:	4b09      	ldr	r3, [pc, #36]	; (8001aec <_mcp23s08_step_posx+0xc0>)
 8001ac6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001aca:	3301      	adds	r3, #1
 8001acc:	f144 0400 	adc.w	r4, r4, #0
 8001ad0:	4a06      	ldr	r2, [pc, #24]	; (8001aec <_mcp23s08_step_posx+0xc0>)
 8001ad2:	e9c2 3400 	strd	r3, r4, [r2]
		return 1;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e000      	b.n	8001adc <_mcp23s08_step_posx+0xb0>
	}else{
		return 0;
 8001ada:	2300      	movs	r3, #0
	}
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd90      	pop	{r4, r7, pc}
 8001ae4:	48028100 	.word	0x48028100
 8001ae8:	48020000 	.word	0x48020000
 8001aec:	20001ce8 	.word	0x20001ce8

08001af0 <_mcp23s08_step_negx>:

uint8_t _mcp23s08_step_negx(void){
 8001af0:	b590      	push	{r4, r7, lr}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
	uint8_t reg_val;

	if(debounce(ENDSTOP3)){
 8001af6:	210e      	movs	r1, #14
 8001af8:	482d      	ldr	r0, [pc, #180]	; (8001bb0 <_mcp23s08_step_negx+0xc0>)
 8001afa:	f7ff fe01 	bl	8001700 <debounce>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d050      	beq.n	8001ba6 <_mcp23s08_step_negx+0xb6>
		_mcp23s08_reset_ss(MCP23S08_SS);
 8001b04:	2102      	movs	r1, #2
 8001b06:	482a      	ldr	r0, [pc, #168]	; (8001bb0 <_mcp23s08_step_negx+0xc0>)
 8001b08:	f7ff fe3e 	bl	8001788 <_mcp23s08_reset_ss>
		reg_val = _mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,0,MCP23S08_RD);
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2109      	movs	r1, #9
 8001b12:	4828      	ldr	r0, [pc, #160]	; (8001bb4 <_mcp23s08_step_negx+0xc4>)
 8001b14:	f7ff fe68 	bl	80017e8 <_mcp23s08_reg_xfer>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	71fb      	strb	r3, [r7, #7]
		_mcp23s08_set_ss(MCP23S08_SS);
 8001b1c:	2102      	movs	r1, #2
 8001b1e:	4824      	ldr	r0, [pc, #144]	; (8001bb0 <_mcp23s08_step_negx+0xc0>)
 8001b20:	f7ff fe42 	bl	80017a8 <_mcp23s08_set_ss>

		_mcp23s08_reset_ss(MCP23S08_SS);
 8001b24:	2102      	movs	r1, #2
 8001b26:	4822      	ldr	r0, [pc, #136]	; (8001bb0 <_mcp23s08_step_negx+0xc0>)
 8001b28:	f7ff fe2e 	bl	8001788 <_mcp23s08_reset_ss>
		_mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,(reg_val | 0x08) & 0xFA,MCP23S08_WR);
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	f043 0308 	orr.w	r3, r3, #8
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	f023 0305 	bic.w	r3, r3, #5
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	2109      	movs	r1, #9
 8001b3e:	481d      	ldr	r0, [pc, #116]	; (8001bb4 <_mcp23s08_step_negx+0xc4>)
 8001b40:	f7ff fe52 	bl	80017e8 <_mcp23s08_reg_xfer>
		_mcp23s08_set_ss(MCP23S08_SS);
 8001b44:	2102      	movs	r1, #2
 8001b46:	481a      	ldr	r0, [pc, #104]	; (8001bb0 <_mcp23s08_step_negx+0xc0>)
 8001b48:	f7ff fe2e 	bl	80017a8 <_mcp23s08_set_ss>

		//APP_TRACE_INFO ("PLOTTERSTEP HIGH...\n");
		_mcp23s08_reset_ss(MCP23S08_SS);
 8001b4c:	2102      	movs	r1, #2
 8001b4e:	4818      	ldr	r0, [pc, #96]	; (8001bb0 <_mcp23s08_step_negx+0xc0>)
 8001b50:	f7ff fe1a 	bl	8001788 <_mcp23s08_reset_ss>
		reg_val = _mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,0,MCP23S08_RD);
 8001b54:	2301      	movs	r3, #1
 8001b56:	2200      	movs	r2, #0
 8001b58:	2109      	movs	r1, #9
 8001b5a:	4816      	ldr	r0, [pc, #88]	; (8001bb4 <_mcp23s08_step_negx+0xc4>)
 8001b5c:	f7ff fe44 	bl	80017e8 <_mcp23s08_reg_xfer>
 8001b60:	4603      	mov	r3, r0
 8001b62:	71fb      	strb	r3, [r7, #7]
		_mcp23s08_set_ss(MCP23S08_SS);
 8001b64:	2102      	movs	r1, #2
 8001b66:	4812      	ldr	r0, [pc, #72]	; (8001bb0 <_mcp23s08_step_negx+0xc0>)
 8001b68:	f7ff fe1e 	bl	80017a8 <_mcp23s08_set_ss>

		_mcp23s08_reset_ss(MCP23S08_SS);
 8001b6c:	2102      	movs	r1, #2
 8001b6e:	4810      	ldr	r0, [pc, #64]	; (8001bb0 <_mcp23s08_step_negx+0xc0>)
 8001b70:	f7ff fe0a 	bl	8001788 <_mcp23s08_reset_ss>
		_mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_GPIO,reg_val & 0xF7,MCP23S08_WR);
 8001b74:	79fb      	ldrb	r3, [r7, #7]
 8001b76:	f023 0308 	bic.w	r3, r3, #8
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	2109      	movs	r1, #9
 8001b80:	480c      	ldr	r0, [pc, #48]	; (8001bb4 <_mcp23s08_step_negx+0xc4>)
 8001b82:	f7ff fe31 	bl	80017e8 <_mcp23s08_reg_xfer>
		_mcp23s08_set_ss(MCP23S08_SS);
 8001b86:	2102      	movs	r1, #2
 8001b88:	4809      	ldr	r0, [pc, #36]	; (8001bb0 <_mcp23s08_step_negx+0xc0>)
 8001b8a:	f7ff fe0d 	bl	80017a8 <_mcp23s08_set_ss>

		x_steps--;
 8001b8e:	4b0a      	ldr	r3, [pc, #40]	; (8001bb8 <_mcp23s08_step_negx+0xc8>)
 8001b90:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001b94:	f113 33ff 	adds.w	r3, r3, #4294967295
 8001b98:	f144 34ff 	adc.w	r4, r4, #4294967295
 8001b9c:	4a06      	ldr	r2, [pc, #24]	; (8001bb8 <_mcp23s08_step_negx+0xc8>)
 8001b9e:	e9c2 3400 	strd	r3, r4, [r2]
		return 1;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e000      	b.n	8001ba8 <_mcp23s08_step_negx+0xb8>
	}else{
		return 0;
 8001ba6:	2300      	movs	r3, #0
	}
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd90      	pop	{r4, r7, pc}
 8001bb0:	48028100 	.word	0x48028100
 8001bb4:	48020000 	.word	0x48020000
 8001bb8:	20001ce8 	.word	0x20001ce8

08001bbc <_mcp23s08_goto_0_0>:

void _mcp23s08_goto_0_0(void){
 8001bbc:	b598      	push	{r3, r4, r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
	while(_mcp23s08_step_negx() || _mcp23s08_step_posy()){
 8001bc0:	bf00      	nop
 8001bc2:	f7ff ff95 	bl	8001af0 <_mcp23s08_step_negx>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1fa      	bne.n	8001bc2 <_mcp23s08_goto_0_0+0x6>
 8001bcc:	f7ff fe64 	bl	8001898 <_mcp23s08_step_posy>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f5      	bne.n	8001bc2 <_mcp23s08_goto_0_0+0x6>
	}
	x_steps=0;
 8001bd6:	4a08      	ldr	r2, [pc, #32]	; (8001bf8 <_mcp23s08_goto_0_0+0x3c>)
 8001bd8:	f04f 0300 	mov.w	r3, #0
 8001bdc:	f04f 0400 	mov.w	r4, #0
 8001be0:	e9c2 3400 	strd	r3, r4, [r2]
	y_steps=0;
 8001be4:	4a05      	ldr	r2, [pc, #20]	; (8001bfc <_mcp23s08_goto_0_0+0x40>)
 8001be6:	f04f 0300 	mov.w	r3, #0
 8001bea:	f04f 0400 	mov.w	r4, #0
 8001bee:	e9c2 3400 	strd	r3, r4, [r2]
}
 8001bf2:	bf00      	nop
 8001bf4:	bd98      	pop	{r3, r4, r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20001ce8 	.word	0x20001ce8
 8001bfc:	20001cf0 	.word	0x20001cf0

08001c00 <_mcp23s08_Plotter_Init>:

void _mcp23s08_Plotter_Init(void){
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b088      	sub	sp, #32
 8001c04:	af00      	add	r7, sp, #0
	//RESET and config GPIO
	CPU_CHAR    d_msg[30];
	_mcp23s08_reset();
 8001c06:	f7ff fddf 	bl	80017c8 <_mcp23s08_reset>
	_mcp23s08_config_gpio();
 8001c0a:	f000 f807 	bl	8001c1c <_mcp23s08_config_gpio>
	while(_mcp23s08_step_negy()){
		y_steps_MAX++;
	}
	sprintf(d_msg,"%d\n",(int)y_steps_MAX);
	APP_TRACE_INFO(d_msg);*/
	_mcp23s08_goto_0_0();
 8001c0e:	f7ff ffd5 	bl	8001bbc <_mcp23s08_goto_0_0>
}
 8001c12:	bf00      	nop
 8001c14:	3720      	adds	r7, #32
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop

08001c1c <_mcp23s08_config_gpio>:

void _mcp23s08_config_gpio(void){
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
	_mcp23s08_reset_ss(MCP23S08_SS);
 8001c20:	2102      	movs	r1, #2
 8001c22:	4807      	ldr	r0, [pc, #28]	; (8001c40 <_mcp23s08_config_gpio+0x24>)
 8001c24:	f7ff fdb0 	bl	8001788 <_mcp23s08_reset_ss>
	_mcp23s08_reg_xfer(XMC_SPI1_CH0,MCP23S08_IODIR,0,MCP23S08_WR);
 8001c28:	2300      	movs	r3, #0
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	4805      	ldr	r0, [pc, #20]	; (8001c44 <_mcp23s08_config_gpio+0x28>)
 8001c30:	f7ff fdda 	bl	80017e8 <_mcp23s08_reg_xfer>
	_mcp23s08_set_ss(MCP23S08_SS);
 8001c34:	2102      	movs	r1, #2
 8001c36:	4802      	ldr	r0, [pc, #8]	; (8001c40 <_mcp23s08_config_gpio+0x24>)
 8001c38:	f7ff fdb6 	bl	80017a8 <_mcp23s08_set_ss>
}
 8001c3c:	bf00      	nop
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	48028100 	.word	0x48028100
 8001c44:	48020000 	.word	0x48020000

08001c48 <CPU_Init>:
*                                                   & other CPU interrupts disabled time measurement functions
*********************************************************************************************************
*/

void  CPU_Init (void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
                                                                /* --------------------- INIT TS ---------------------- */
#if ((CPU_CFG_TS_EN     == DEF_ENABLED) || \
     (CPU_CFG_TS_TMR_EN == DEF_ENABLED))
    CPU_TS_Init();                                              /* See Note #3a.                                        */
 8001c4c:	f000 f832 	bl	8001cb4 <CPU_TS_Init>
    CPU_IntDisMeasInit();                                       /* See Note #3b.                                        */
#endif

                                                                /* ------------------ INIT CPU NAME ------------------- */
#if (CPU_CFG_NAME_EN == DEF_ENABLED)
     CPU_NameInit();
 8001c50:	f000 f82a 	bl	8001ca8 <CPU_NameInit>
#endif

#if (CPU_CFG_CACHE_MGMT_EN == DEF_ENABLED)
     CPU_Cache_Init();
#endif
}
 8001c54:	bf00      	nop
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <CPU_SW_Exception>:
*                   See also 'cpu_core.h  CPU_SW_EXCEPTION()  Note #1'.
*********************************************************************************************************
*/

void  CPU_SW_Exception (void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
    while (DEF_ON) {
        ;
    }
 8001c5c:	e7fe      	b.n	8001c5c <CPU_SW_Exception+0x4>
 8001c5e:	bf00      	nop

08001c60 <CPU_NameClr>:
*********************************************************************************************************
*/

#if (CPU_CFG_NAME_EN == DEF_ENABLED)
void  CPU_NameClr (void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
 8001c66:	2300      	movs	r3, #0
 8001c68:	607b      	str	r3, [r7, #4]


    CPU_CRITICAL_ENTER();
 8001c6a:	f7fe fb39 	bl	80002e0 <CPU_SR_Save>
 8001c6e:	6078      	str	r0, [r7, #4]
    Mem_Clr((void     *)&CPU_Name[0],
 8001c70:	2110      	movs	r1, #16
 8001c72:	4805      	ldr	r0, [pc, #20]	; (8001c88 <CPU_NameClr+0x28>)
 8001c74:	f000 f8f6 	bl	8001e64 <Mem_Clr>
            (CPU_SIZE_T) CPU_CFG_NAME_SIZE);
    CPU_CRITICAL_EXIT();
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7fe fb35 	bl	80002e8 <CPU_SR_Restore>
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20002010 	.word	0x20002010

08001c8c <CPU_TS_TmrFreqSet>:
*********************************************************************************************************
*/

#if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
void  CPU_TS_TmrFreqSet (CPU_TS_TMR_FREQ  freq_hz)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
    CPU_TS_TmrFreq_Hz = freq_hz;
 8001c94:	4a03      	ldr	r2, [pc, #12]	; (8001ca4 <CPU_TS_TmrFreqSet+0x18>)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6013      	str	r3, [r2, #0]
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr
 8001ca4:	2000200c 	.word	0x2000200c

08001ca8 <CPU_NameInit>:
*********************************************************************************************************
*/

#if (CPU_CFG_NAME_EN == DEF_ENABLED)
static  void  CPU_NameInit (void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
    CPU_NameClr();
 8001cac:	f7ff ffd8 	bl	8001c60 <CPU_NameClr>
}
 8001cb0:	bf00      	nop
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <CPU_TS_Init>:
*/

#if ((CPU_CFG_TS_EN     == DEF_ENABLED) || \
     (CPU_CFG_TS_TMR_EN == DEF_ENABLED))
static  void  CPU_TS_Init (void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
#endif


                                                                /* ----------------- INIT CPU TS TMR ------------------ */
#if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
    CPU_TS_TmrFreq_Hz   = 0u;                                   /* Init/clr     ts tmr freq (see Note #1a).             */
 8001cb8:	4b03      	ldr	r3, [pc, #12]	; (8001cc8 <CPU_TS_Init+0x14>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
    CPU_TS_TmrInit();                                           /* Init & start ts tmr      (see Note #1b).             */
 8001cbe:	f005 fc37 	bl	8007530 <CPU_TS_TmrInit>
#if  ((CPU_CFG_TS_64_EN    == DEF_ENABLED)  && \
      (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_64))
    CPU_TS_64_Accum   = 0u;                                     /* Init 64-bit accum'd ts.                              */
    CPU_TS_64_TmrPrev = ts_tmr_cnts;                            /* Init 64-bit ts prev tmr val.                         */
#endif
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	2000200c 	.word	0x2000200c

08001ccc <CPU_IntSrcEn>:
*               (3) See 'CPU_IntSrcDis()  Note #3'.
*********************************************************************************************************
*/

void  CPU_IntSrcEn (CPU_INT08U  pos)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71fb      	strb	r3, [r7, #7]
    CPU_INT08U  group;
    CPU_INT08U  nbr;
    CPU_INT08U  pos_max;
    CPU_SR_ALLOC();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60fb      	str	r3, [r7, #12]


    switch (pos) {
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	2b0f      	cmp	r3, #15
 8001cde:	d857      	bhi.n	8001d90 <CPU_IntSrcEn+0xc4>
 8001ce0:	a201      	add	r2, pc, #4	; (adr r2, 8001ce8 <CPU_IntSrcEn+0x1c>)
 8001ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce6:	bf00      	nop
 8001ce8:	08001df9 	.word	0x08001df9
 8001cec:	08001df9 	.word	0x08001df9
 8001cf0:	08001df9 	.word	0x08001df9
 8001cf4:	08001df9 	.word	0x08001df9
 8001cf8:	08001d29 	.word	0x08001d29
 8001cfc:	08001d43 	.word	0x08001d43
 8001d00:	08001d5d 	.word	0x08001d5d
 8001d04:	08001df9 	.word	0x08001df9
 8001d08:	08001df9 	.word	0x08001df9
 8001d0c:	08001df9 	.word	0x08001df9
 8001d10:	08001df9 	.word	0x08001df9
 8001d14:	08001df9 	.word	0x08001df9
 8001d18:	08001df9 	.word	0x08001df9
 8001d1c:	08001df9 	.word	0x08001df9
 8001d20:	08001df9 	.word	0x08001df9
 8001d24:	08001d77 	.word	0x08001d77
        case CPU_INT_DBGMON:                                    /* Debug monitor (see Note #2).                         */
        case CPU_INT_PENDSV:                                    /* PendSV (see Note #2).                                */
             break;

        case CPU_INT_MEM:                                       /* Memory management.                                   */
             CPU_CRITICAL_ENTER();
 8001d28:	f7fe fada 	bl	80002e0 <CPU_SR_Save>
 8001d2c:	60f8      	str	r0, [r7, #12]
             CPU_REG_NVIC_SHCSR |= CPU_REG_NVIC_SHCSR_MEMFAULTENA;
 8001d2e:	4a36      	ldr	r2, [pc, #216]	; (8001e08 <CPU_IntSrcEn+0x13c>)
 8001d30:	4b35      	ldr	r3, [pc, #212]	; (8001e08 <CPU_IntSrcEn+0x13c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d38:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f7fe fad4 	bl	80002e8 <CPU_SR_Restore>
             break;
 8001d40:	e05d      	b.n	8001dfe <CPU_IntSrcEn+0x132>

        case CPU_INT_BUSFAULT:                                  /* Bus fault.                                           */
             CPU_CRITICAL_ENTER();
 8001d42:	f7fe facd 	bl	80002e0 <CPU_SR_Save>
 8001d46:	60f8      	str	r0, [r7, #12]
             CPU_REG_NVIC_SHCSR |= CPU_REG_NVIC_SHCSR_BUSFAULTENA;
 8001d48:	4a2f      	ldr	r2, [pc, #188]	; (8001e08 <CPU_IntSrcEn+0x13c>)
 8001d4a:	4b2f      	ldr	r3, [pc, #188]	; (8001e08 <CPU_IntSrcEn+0x13c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d52:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 8001d54:	68f8      	ldr	r0, [r7, #12]
 8001d56:	f7fe fac7 	bl	80002e8 <CPU_SR_Restore>
             break;
 8001d5a:	e050      	b.n	8001dfe <CPU_IntSrcEn+0x132>

        case CPU_INT_USAGEFAULT:                                /* Usage fault.                                         */
             CPU_CRITICAL_ENTER();
 8001d5c:	f7fe fac0 	bl	80002e0 <CPU_SR_Save>
 8001d60:	60f8      	str	r0, [r7, #12]
             CPU_REG_NVIC_SHCSR |= CPU_REG_NVIC_SHCSR_USGFAULTENA;
 8001d62:	4a29      	ldr	r2, [pc, #164]	; (8001e08 <CPU_IntSrcEn+0x13c>)
 8001d64:	4b28      	ldr	r3, [pc, #160]	; (8001e08 <CPU_IntSrcEn+0x13c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d6c:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f7fe faba 	bl	80002e8 <CPU_SR_Restore>
             break;
 8001d74:	e043      	b.n	8001dfe <CPU_IntSrcEn+0x132>

        case CPU_INT_SYSTICK:                                   /* SysTick.                                             */
             CPU_CRITICAL_ENTER();
 8001d76:	f7fe fab3 	bl	80002e0 <CPU_SR_Save>
 8001d7a:	60f8      	str	r0, [r7, #12]
             CPU_REG_NVIC_ST_CTRL |= CPU_REG_NVIC_ST_CTRL_ENABLE;
 8001d7c:	4a23      	ldr	r2, [pc, #140]	; (8001e0c <CPU_IntSrcEn+0x140>)
 8001d7e:	4b23      	ldr	r3, [pc, #140]	; (8001e0c <CPU_IntSrcEn+0x140>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 8001d88:	68f8      	ldr	r0, [r7, #12]
 8001d8a:	f7fe faad 	bl	80002e8 <CPU_SR_Restore>
             break;
 8001d8e:	e036      	b.n	8001dfe <CPU_IntSrcEn+0x132>


                                                                /* ---------------- EXTERNAL INTERRUPT ---------------- */
        default:
            pos_max = CPU_INT_SRC_POS_MAX;
 8001d90:	4b1f      	ldr	r3, [pc, #124]	; (8001e10 <CPU_IntSrcEn+0x144>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	3301      	adds	r3, #1
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	f003 031f 	and.w	r3, r3, #31
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	015b      	lsls	r3, r3, #5
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	3310      	adds	r3, #16
 8001da4:	72fb      	strb	r3, [r7, #11]
            if (pos < pos_max) {                                /* See Note #3.                                         */
 8001da6:	79fa      	ldrb	r2, [r7, #7]
 8001da8:	7afb      	ldrb	r3, [r7, #11]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d226      	bcs.n	8001dfc <CPU_IntSrcEn+0x130>
                 group = (pos - 16) / 32;
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	3b10      	subs	r3, #16
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	da00      	bge.n	8001db8 <CPU_IntSrcEn+0xec>
 8001db6:	331f      	adds	r3, #31
 8001db8:	115b      	asrs	r3, r3, #5
 8001dba:	72bb      	strb	r3, [r7, #10]
                 nbr   = (pos - 16) % 32;
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	f1a3 0210 	sub.w	r2, r3, #16
 8001dc2:	4b14      	ldr	r3, [pc, #80]	; (8001e14 <CPU_IntSrcEn+0x148>)
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	da03      	bge.n	8001dd2 <CPU_IntSrcEn+0x106>
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	f063 031f 	orn	r3, r3, #31
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	727b      	strb	r3, [r7, #9]

                 CPU_CRITICAL_ENTER();
 8001dd4:	f7fe fa84 	bl	80002e0 <CPU_SR_Save>
 8001dd8:	60f8      	str	r0, [r7, #12]
                 CPU_REG_NVIC_SETEN(group) = DEF_BIT(nbr);
 8001dda:	7abb      	ldrb	r3, [r7, #10]
 8001ddc:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
 8001de0:	3340      	adds	r3, #64	; 0x40
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4619      	mov	r1, r3
 8001de6:	7a7b      	ldrb	r3, [r7, #9]
 8001de8:	2201      	movs	r2, #1
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	600b      	str	r3, [r1, #0]
                 CPU_CRITICAL_EXIT();
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f7fe fa79 	bl	80002e8 <CPU_SR_Restore>
             }
             break;
 8001df6:	e001      	b.n	8001dfc <CPU_IntSrcEn+0x130>
        case CPU_INT_RSVD_07:
        case CPU_INT_RSVD_08:
        case CPU_INT_RSVD_09:
        case CPU_INT_RSVD_10:
        case CPU_INT_RSVD_13:
             break;
 8001df8:	bf00      	nop
 8001dfa:	e000      	b.n	8001dfe <CPU_IntSrcEn+0x132>

                 CPU_CRITICAL_ENTER();
                 CPU_REG_NVIC_SETEN(group) = DEF_BIT(nbr);
                 CPU_CRITICAL_EXIT();
             }
             break;
 8001dfc:	bf00      	nop
    }
}
 8001dfe:	bf00      	nop
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	e000ed24 	.word	0xe000ed24
 8001e0c:	e000e010 	.word	0xe000e010
 8001e10:	e000e004 	.word	0xe000e004
 8001e14:	8000001f 	.word	0x8000001f

08001e18 <Mem_Init>:
*                   (b) BEFORE product's application calls any memory library module function(s)
*********************************************************************************************************
*/

void  Mem_Init (void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af02      	add	r7, sp, #8

                                                                /* ------------------ INIT SEG LIST ------------------- */
    Mem_SegHeadPtr = DEF_NULL;
 8001e1e:	4b0d      	ldr	r3, [pc, #52]	; (8001e54 <Mem_Init+0x3c>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]

                                                                /* ------------------ INIT HEAP SEG ------------------- */
#ifdef  LIB_MEM_CFG_HEAP_BASE_ADDR
        heap_base_addr = LIB_MEM_CFG_HEAP_BASE_ADDR;
#else
        heap_base_addr = (CPU_ADDR)&Mem_Heap[0u];
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <Mem_Init+0x40>)
 8001e26:	607b      	str	r3, [r7, #4]
#endif

        Mem_SegCreate("Heap",
 8001e28:	1cbb      	adds	r3, r7, #2
 8001e2a:	9301      	str	r3, [sp, #4]
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	4909      	ldr	r1, [pc, #36]	; (8001e5c <Mem_Init+0x44>)
 8001e38:	4809      	ldr	r0, [pc, #36]	; (8001e60 <Mem_Init+0x48>)
 8001e3a:	f000 f87b 	bl	8001f34 <Mem_SegCreate>
                      &Mem_SegHeap,                             /* Create heap seg.                                     */
                       heap_base_addr,
                       LIB_MEM_CFG_HEAP_SIZE,
                       LIB_MEM_PADDING_ALIGN_NONE,
                      &err);
        if (err != LIB_MEM_ERR_NONE) {
 8001e3e:	887b      	ldrh	r3, [r7, #2]
 8001e40:	f242 7210 	movw	r2, #10000	; 0x2710
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d001      	beq.n	8001e4c <Mem_Init+0x34>
            CPU_SW_EXCEPTION(;);
 8001e48:	f7ff ff06 	bl	8001c58 <CPU_SW_Exception>
        }
    }
#endif
}
 8001e4c:	bf00      	nop
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20002034 	.word	0x20002034
 8001e58:	20002038 	.word	0x20002038
 8001e5c:	20002020 	.word	0x20002020
 8001e60:	0800e494 	.word	0x0800e494

08001e64 <Mem_Clr>:
*********************************************************************************************************
*/

void  Mem_Clr (void        *pmem,
               CPU_SIZE_T   size)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
    Mem_Set(pmem,
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	2100      	movs	r1, #0
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f804 	bl	8001e80 <Mem_Set>
            0u,                                                 /* See Note #2.                                         */
            size);
}
 8001e78:	bf00      	nop
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <Mem_Set>:
*/

void  Mem_Set (void        *pmem,
               CPU_INT08U   data_val,
               CPU_SIZE_T   size)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b08b      	sub	sp, #44	; 0x2c
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	607a      	str	r2, [r7, #4]
 8001e8c:	72fb      	strb	r3, [r7, #11]
        return;
    }
#endif


    data_align = 0u;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	623b      	str	r3, [r7, #32]
    for (i = 0u; i < sizeof(CPU_ALIGN); i++) {                  /* Fill each data_align octet with data val.            */
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	e009      	b.n	8001eac <Mem_Set+0x2c>
        data_align <<=  DEF_OCTET_NBR_BITS;
 8001e98:	6a3b      	ldr	r3, [r7, #32]
 8001e9a:	021b      	lsls	r3, r3, #8
 8001e9c:	623b      	str	r3, [r7, #32]
        data_align  |= (CPU_ALIGN)data_val;
 8001e9e:	7afb      	ldrb	r3, [r7, #11]
 8001ea0:	6a3a      	ldr	r2, [r7, #32]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	623b      	str	r3, [r7, #32]
    }
#endif


    data_align = 0u;
    for (i = 0u; i < sizeof(CPU_ALIGN); i++) {                  /* Fill each data_align octet with data val.            */
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	617b      	str	r3, [r7, #20]
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	2b03      	cmp	r3, #3
 8001eb0:	d9f2      	bls.n	8001e98 <Mem_Set+0x18>
        data_align <<=  DEF_OCTET_NBR_BITS;
        data_align  |= (CPU_ALIGN)data_val;
    }

    size_rem      =  size;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
    mem_align_mod = (CPU_INT08U)((CPU_ADDR)pmem % sizeof(CPU_ALIGN));   /* See Note #3.                                 */
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	613b      	str	r3, [r7, #16]

    pmem_08 = (CPU_INT08U *)pmem;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	61bb      	str	r3, [r7, #24]
    if (mem_align_mod != 0u) {                                  /* If leading octets avail,                   ...       */
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d013      	beq.n	8001ef2 <Mem_Set+0x72>
        i = mem_align_mod;
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	617b      	str	r3, [r7, #20]
        while ((size_rem > 0) &&                                /* ... start mem buf fill with leading octets ...       */
 8001ece:	e00a      	b.n	8001ee6 <Mem_Set+0x66>
               (i        < sizeof(CPU_ALIGN ))) {               /* ... until next CPU_ALIGN word boundary.              */
           *pmem_08++ = data_val;
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	1c5a      	adds	r2, r3, #1
 8001ed4:	61ba      	str	r2, [r7, #24]
 8001ed6:	7afa      	ldrb	r2, [r7, #11]
 8001ed8:	701a      	strb	r2, [r3, #0]
            size_rem -= sizeof(CPU_INT08U);
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	3b01      	subs	r3, #1
 8001ede:	627b      	str	r3, [r7, #36]	; 0x24
            i++;
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	617b      	str	r3, [r7, #20]
    mem_align_mod = (CPU_INT08U)((CPU_ADDR)pmem % sizeof(CPU_ALIGN));   /* See Note #3.                                 */

    pmem_08 = (CPU_INT08U *)pmem;
    if (mem_align_mod != 0u) {                                  /* If leading octets avail,                   ...       */
        i = mem_align_mod;
        while ((size_rem > 0) &&                                /* ... start mem buf fill with leading octets ...       */
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d002      	beq.n	8001ef2 <Mem_Set+0x72>
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	2b03      	cmp	r3, #3
 8001ef0:	d9ee      	bls.n	8001ed0 <Mem_Set+0x50>
            size_rem -= sizeof(CPU_INT08U);
            i++;
        }
    }

    pmem_align = (CPU_ALIGN *)pmem_08;                          /* See Note #2.                                         */
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	61fb      	str	r3, [r7, #28]
    while (size_rem >= sizeof(CPU_ALIGN)) {                     /* While mem buf aligned on CPU_ALIGN word boundaries,  */
 8001ef6:	e007      	b.n	8001f08 <Mem_Set+0x88>
       *pmem_align++ = data_align;                              /* ... fill mem buf with    CPU_ALIGN-sized data.       */
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	1d1a      	adds	r2, r3, #4
 8001efc:	61fa      	str	r2, [r7, #28]
 8001efe:	6a3a      	ldr	r2, [r7, #32]
 8001f00:	601a      	str	r2, [r3, #0]
        size_rem    -= sizeof(CPU_ALIGN);
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	3b04      	subs	r3, #4
 8001f06:	627b      	str	r3, [r7, #36]	; 0x24
            i++;
        }
    }

    pmem_align = (CPU_ALIGN *)pmem_08;                          /* See Note #2.                                         */
    while (size_rem >= sizeof(CPU_ALIGN)) {                     /* While mem buf aligned on CPU_ALIGN word boundaries,  */
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	2b03      	cmp	r3, #3
 8001f0c:	d8f4      	bhi.n	8001ef8 <Mem_Set+0x78>
       *pmem_align++ = data_align;                              /* ... fill mem buf with    CPU_ALIGN-sized data.       */
        size_rem    -= sizeof(CPU_ALIGN);
    }

    pmem_08 = (CPU_INT08U *)pmem_align;
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	61bb      	str	r3, [r7, #24]
    while (size_rem > 0) {                                      /* Finish mem buf fill with trailing octets.            */
 8001f12:	e007      	b.n	8001f24 <Mem_Set+0xa4>
       *pmem_08++   = data_val;
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	1c5a      	adds	r2, r3, #1
 8001f18:	61ba      	str	r2, [r7, #24]
 8001f1a:	7afa      	ldrb	r2, [r7, #11]
 8001f1c:	701a      	strb	r2, [r3, #0]
        size_rem   -= sizeof(CPU_INT08U);
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	3b01      	subs	r3, #1
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24
       *pmem_align++ = data_align;                              /* ... fill mem buf with    CPU_ALIGN-sized data.       */
        size_rem    -= sizeof(CPU_ALIGN);
    }

    pmem_08 = (CPU_INT08U *)pmem_align;
    while (size_rem > 0) {                                      /* Finish mem buf fill with trailing octets.            */
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f4      	bne.n	8001f14 <Mem_Set+0x94>
       *pmem_08++   = data_val;
        size_rem   -= sizeof(CPU_INT08U);
    }
}
 8001f2a:	bf00      	nop
 8001f2c:	372c      	adds	r7, #44	; 0x2c
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr

08001f34 <Mem_SegCreate>:
                            MEM_SEG     *p_seg,
                            CPU_ADDR     seg_base_addr,
                            CPU_SIZE_T   size,
                            CPU_SIZE_T   padding_align,
                            LIB_ERR     *p_err)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b088      	sub	sp, #32
 8001f38:	af02      	add	r7, sp, #8
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
 8001f40:	603b      	str	r3, [r7, #0]
    CPU_SR_ALLOC();
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]
       *p_err = LIB_MEM_ERR_INVALID_MEM_ALIGN;
        return;
    }
#endif

    CPU_CRITICAL_ENTER();
 8001f46:	f7fe f9cb 	bl	80002e0 <CPU_SR_Save>
 8001f4a:	6178      	str	r0, [r7, #20]
        CPU_CRITICAL_EXIT();
        return;
    }
#endif

    Mem_SegCreateCritical(p_name,                               /* Create seg.                                          */
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	6a3b      	ldr	r3, [r7, #32]
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	68b9      	ldr	r1, [r7, #8]
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f000 f80c 	bl	8001f74 <Mem_SegCreateCritical>
                          p_seg,
                          seg_base_addr,
                          padding_align,
                          size);
    CPU_CRITICAL_EXIT();
 8001f5c:	6978      	ldr	r0, [r7, #20]
 8001f5e:	f7fe f9c3 	bl	80002e8 <CPU_SR_Restore>

   *p_err = LIB_MEM_ERR_NONE;
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	f242 7210 	movw	r2, #10000	; 0x2710
 8001f68:	801a      	strh	r2, [r3, #0]
}
 8001f6a:	bf00      	nop
 8001f6c:	3718      	adds	r7, #24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop

08001f74 <Mem_SegCreateCritical>:
static  void  Mem_SegCreateCritical(const  CPU_CHAR    *p_name,
                                           MEM_SEG     *p_seg,
                                           CPU_ADDR     seg_base_addr,
                                           CPU_SIZE_T   padding_align,
                                           CPU_SIZE_T   size)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
 8001f80:	603b      	str	r3, [r7, #0]
    p_seg->AddrBase         =  seg_base_addr;
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	601a      	str	r2, [r3, #0]
    p_seg->AddrEnd          = (seg_base_addr + (size - 1u));
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	1e5a      	subs	r2, r3, #1
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	605a      	str	r2, [r3, #4]
    p_seg->AddrNext         =  seg_base_addr;
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	609a      	str	r2, [r3, #8]
    p_seg->NextPtr          =  Mem_SegHeadPtr;
 8001f9a:	4b07      	ldr	r3, [pc, #28]	; (8001fb8 <Mem_SegCreateCritical+0x44>)
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
    p_seg->PaddingAlign     =  padding_align;
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	611a      	str	r2, [r3, #16]
    p_seg->AllocInfoHeadPtr = DEF_NULL;
#else
    (void)&p_name;
#endif

    Mem_SegHeadPtr = p_seg;
 8001fa8:	4a03      	ldr	r2, [pc, #12]	; (8001fb8 <Mem_SegCreateCritical+0x44>)
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	6013      	str	r3, [r2, #0]
}
 8001fae:	bf00      	nop
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr
 8001fb8:	20002034 	.word	0x20002034

08001fbc <Math_Init>:
*                   as when srand() is first called with a seed value of 1".
*********************************************************************************************************
*/

void  Math_Init (void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
    Math_RandSetSeed((RAND_NBR)RAND_SEED_INIT_VAL);             /* See Note #2.                                         */
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	f000 f803 	bl	8001fcc <Math_RandSetSeed>
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop

08001fcc <Math_RandSetSeed>:
*                   See also 'Math_Rand()  Note #1b'.
*********************************************************************************************************
*/

void  Math_RandSetSeed (RAND_NBR  seed)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
    CPU_SR_ALLOC();
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	60fb      	str	r3, [r7, #12]


    CPU_CRITICAL_ENTER();
 8001fd8:	f7fe f982 	bl	80002e0 <CPU_SR_Save>
 8001fdc:	60f8      	str	r0, [r7, #12]
    Math_RandSeedCur = seed;
 8001fde:	4a05      	ldr	r2, [pc, #20]	; (8001ff4 <Math_RandSetSeed+0x28>)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6013      	str	r3, [r2, #0]
    CPU_CRITICAL_EXIT();
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f7fe f97f 	bl	80002e8 <CPU_SR_Restore>
}
 8001fea:	bf00      	nop
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20002438 	.word	0x20002438

08001ff8 <OSQCreate>:
void  OSQCreate (OS_Q        *p_q,
                 CPU_CHAR    *p_name,
                 OS_MSG_QTY   max_qty,
                 OS_ERR      *p_err)

{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	603b      	str	r3, [r7, #0]
 8002004:	4613      	mov	r3, r2
 8002006:	80fb      	strh	r3, [r7, #6]
    CPU_SR_ALLOC();
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to be called from an ISR                   */
 800200c:	4b1f      	ldr	r3, [pc, #124]	; (800208c <OSQCreate+0x94>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d004      	beq.n	800201e <OSQCreate+0x26>
       *p_err = OS_ERR_CREATE_ISR;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	f642 62e1 	movw	r2, #12001	; 0x2ee1
 800201a:	801a      	strh	r2, [r3, #0]
        return;
 800201c:	e033      	b.n	8002086 <OSQCreate+0x8e>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_q == (OS_Q *)0) {                                 /* Validate arguments                                     */
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d104      	bne.n	800202e <OSQCreate+0x36>
       *p_err = OS_ERR_OBJ_PTR_NULL;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	f645 52c3 	movw	r2, #24003	; 0x5dc3
 800202a:	801a      	strh	r2, [r3, #0]
        return;
 800202c:	e02b      	b.n	8002086 <OSQCreate+0x8e>
    }
    if (max_qty == (OS_MSG_QTY)0) {                         /* Cannot specify a zero size queue                       */
 800202e:	88fb      	ldrh	r3, [r7, #6]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d104      	bne.n	800203e <OSQCreate+0x46>
       *p_err = OS_ERR_Q_SIZE;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	f246 5294 	movw	r2, #26004	; 0x6594
 800203a:	801a      	strh	r2, [r3, #0]
        return;
 800203c:	e023      	b.n	8002086 <OSQCreate+0x8e>
    }
#endif

    OS_CRITICAL_ENTER();
 800203e:	f7fe f94f 	bl	80002e0 <CPU_SR_Save>
 8002042:	6178      	str	r0, [r7, #20]
#if OS_OBJ_TYPE_REQ > 0u
    p_q->Type    = OS_OBJ_TYPE_Q;                           /* Mark the data structure as a message queue             */
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4a12      	ldr	r2, [pc, #72]	; (8002090 <OSQCreate+0x98>)
 8002048:	601a      	str	r2, [r3, #0]
#endif
#if OS_CFG_DBG_EN > 0u
    p_q->NamePtr = p_name;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	68ba      	ldr	r2, [r7, #8]
 800204e:	605a      	str	r2, [r3, #4]
#else
    (void)&p_name;
#endif
    OS_MsgQInit(&p_q->MsgQ,                                 /* Initialize the queue                                   */
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	3320      	adds	r3, #32
 8002054:	88fa      	ldrh	r2, [r7, #6]
 8002056:	4611      	mov	r1, r2
 8002058:	4618      	mov	r0, r3
 800205a:	f001 f8cf 	bl	80031fc <OS_MsgQInit>
                max_qty);
    OS_PendListInit(&p_q->PendList);                        /* Initialize the waiting list                            */
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	3308      	adds	r3, #8
 8002062:	4618      	mov	r0, r3
 8002064:	f001 fdb6 	bl	8003bd4 <OS_PendListInit>

#if OS_CFG_DBG_EN > 0u
    OS_QDbgListAdd(p_q);
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f000 f965 	bl	8002338 <OS_QDbgListAdd>
#endif
    OSQQty++;                                               /* One more queue created                                 */
 800206e:	4b09      	ldr	r3, [pc, #36]	; (8002094 <OSQCreate+0x9c>)
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	3301      	adds	r3, #1
 8002074:	b29a      	uxth	r2, r3
 8002076:	4b07      	ldr	r3, [pc, #28]	; (8002094 <OSQCreate+0x9c>)
 8002078:	801a      	strh	r2, [r3, #0]
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_Q_CREATE(p_q, p_name);                         /* Record the event.                                      */
#endif
    OS_CRITICAL_EXIT_NO_SCHED();
 800207a:	6978      	ldr	r0, [r7, #20]
 800207c:	f7fe f934 	bl	80002e8 <CPU_SR_Restore>
   *p_err = OS_ERR_NONE;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	2200      	movs	r2, #0
 8002084:	801a      	strh	r2, [r3, #0]
}
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	200026d8 	.word	0x200026d8
 8002090:	55455551 	.word	0x55455551
 8002094:	200026b0 	.word	0x200026b0

08002098 <OSQPend>:
                OS_TICK       timeout,
                OS_OPT        opt,
                OS_MSG_SIZE  *p_msg_size,
                CPU_TS       *p_ts,
                OS_ERR       *p_err)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b08e      	sub	sp, #56	; 0x38
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	603b      	str	r3, [r7, #0]
 80020a4:	4613      	mov	r3, r2
 80020a6:	80fb      	strh	r3, [r7, #6]
    OS_PEND_DATA  pend_data;
    void         *p_void;
    CPU_SR_ALLOC();
 80020a8:	2300      	movs	r3, #0
 80020aa:	633b      	str	r3, [r7, #48]	; 0x30
        return ((void *)0);
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 80020ac:	4b72      	ldr	r3, [pc, #456]	; (8002278 <OSQPend+0x1e0>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <OSQPend+0x28>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_PEND_FAILED(p_q);                        /* Record the event.                                      */
#endif
       *p_err = OS_ERR_PEND_ISR;
 80020b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020b6:	f246 12ae 	movw	r2, #25006	; 0x61ae
 80020ba:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 80020bc:	2300      	movs	r3, #0
 80020be:	e0d7      	b.n	8002270 <OSQPend+0x1d8>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_q == (OS_Q *)0) {                                 /* Validate arguments                                     */
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d105      	bne.n	80020d2 <OSQPend+0x3a>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_PEND_FAILED(p_q);                        /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_PTR_NULL;
 80020c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020c8:	f645 52c3 	movw	r2, #24003	; 0x5dc3
 80020cc:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 80020ce:	2300      	movs	r3, #0
 80020d0:	e0ce      	b.n	8002270 <OSQPend+0x1d8>
    }
    if (p_msg_size == (OS_MSG_SIZE *)0) {
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d105      	bne.n	80020e4 <OSQPend+0x4c>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_PEND_FAILED(p_q);                        /* Record the event.                                      */
#endif
       *p_err = OS_ERR_PTR_INVALID;
 80020d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020da:	f246 22d5 	movw	r2, #25301	; 0x62d5
 80020de:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 80020e0:	2300      	movs	r3, #0
 80020e2:	e0c5      	b.n	8002270 <OSQPend+0x1d8>
    }
    switch (opt) {
 80020e4:	88fb      	ldrh	r3, [r7, #6]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d008      	beq.n	80020fc <OSQPend+0x64>
 80020ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020ee:	d005      	beq.n	80020fc <OSQPend+0x64>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_Q_PEND_FAILED(p_q);                   /* Record the event.                                      */
#endif
            *p_err = OS_ERR_OPT_INVALID;
 80020f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020f2:	f645 6225 	movw	r2, #24101	; 0x5e25
 80020f6:	801a      	strh	r2, [r3, #0]
             return ((void *)0);
 80020f8:	2300      	movs	r3, #0
 80020fa:	e0b9      	b.n	8002270 <OSQPend+0x1d8>
        return ((void *)0);
    }
    switch (opt) {
        case OS_OPT_PEND_BLOCKING:
        case OS_OPT_PEND_NON_BLOCKING:
             break;
 80020fc:	bf00      	nop
             return ((void *)0);
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_q->Type != OS_OBJ_TYPE_Q) {                       /* Make sure message queue was created                    */
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a5e      	ldr	r2, [pc, #376]	; (800227c <OSQPend+0x1e4>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d005      	beq.n	8002114 <OSQPend+0x7c>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_PEND_FAILED(p_q);                        /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_TYPE;
 8002108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800210a:	f645 52c4 	movw	r2, #24004	; 0x5dc4
 800210e:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 8002110:	2300      	movs	r3, #0
 8002112:	e0ad      	b.n	8002270 <OSQPend+0x1d8>
    }
#endif

    if (p_ts != (CPU_TS *)0) {
 8002114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002116:	2b00      	cmp	r3, #0
 8002118:	d002      	beq.n	8002120 <OSQPend+0x88>
       *p_ts  = (CPU_TS  )0;                                /* Initialize the returned timestamp                      */
 800211a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
    }

    CPU_CRITICAL_ENTER();
 8002120:	f7fe f8de 	bl	80002e0 <CPU_SR_Save>
 8002124:	6338      	str	r0, [r7, #48]	; 0x30
    p_void = OS_MsgQGet(&p_q->MsgQ,                         /* Any message waiting in the message queue?              */
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f103 0020 	add.w	r0, r3, #32
 800212c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800212e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002130:	6839      	ldr	r1, [r7, #0]
 8002132:	f001 f87d 	bl	8003230 <OS_MsgQGet>
 8002136:	6378      	str	r0, [r7, #52]	; 0x34
                        p_msg_size,
                        p_ts,
                        p_err);
    if (*p_err == OS_ERR_NONE) {
 8002138:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800213a:	881b      	ldrh	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d104      	bne.n	800214a <OSQPend+0xb2>
        CPU_CRITICAL_EXIT();
 8002140:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002142:	f7fe f8d1 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_PEND(p_q);                               /* Record the event.                                      */
#endif
        return (p_void);                                    /* Yes, Return message received                           */
 8002146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002148:	e092      	b.n	8002270 <OSQPend+0x1d8>
    }

    if ((opt & OS_OPT_PEND_NON_BLOCKING) != (OS_OPT)0) {    /* Caller wants to block if not available?                */
 800214a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800214e:	2b00      	cmp	r3, #0
 8002150:	da08      	bge.n	8002164 <OSQPend+0xcc>
        CPU_CRITICAL_EXIT();
 8002152:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002154:	f7fe f8c8 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_PEND_FAILED(p_q);                        /* Record the event.                                      */
#endif
       *p_err = OS_ERR_PEND_WOULD_BLOCK;                    /* No                                                     */
 8002158:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800215a:	f246 12b0 	movw	r2, #25008	; 0x61b0
 800215e:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 8002160:	2300      	movs	r3, #0
 8002162:	e085      	b.n	8002270 <OSQPend+0x1d8>
    } else {
        if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /* Can't pend when the scheduler is locked                */
 8002164:	4b46      	ldr	r3, [pc, #280]	; (8002280 <OSQPend+0x1e8>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d008      	beq.n	800217e <OSQPend+0xe6>
            CPU_CRITICAL_EXIT();
 800216c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800216e:	f7fe f8bb 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
            TRACE_OS_Q_PEND_FAILED(p_q);                    /* Record the event.                                      */
#endif
           *p_err = OS_ERR_SCHED_LOCKED;
 8002172:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002174:	f646 5263 	movw	r2, #28003	; 0x6d63
 8002178:	801a      	strh	r2, [r3, #0]
            return ((void *)0);
 800217a:	2300      	movs	r3, #0
 800217c:	e078      	b.n	8002270 <OSQPend+0x1d8>
        }
    }
                                                            /* Lock the scheduler/re-enable interrupts                */
    OS_CRITICAL_ENTER_CPU_EXIT();
    OS_Pend(&pend_data,                                     /* Block task pending on Message Queue                    */
 800217e:	f107 0010 	add.w	r0, r7, #16
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	2205      	movs	r2, #5
 8002186:	68f9      	ldr	r1, [r7, #12]
 8002188:	f001 fc1e 	bl	80039c8 <OS_Pend>
            (OS_PEND_OBJ *)((void *)p_q),
            OS_TASK_PEND_ON_Q,
            timeout);
    OS_CRITICAL_EXIT_NO_SCHED();
 800218c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800218e:	f7fe f8ab 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_Q_PEND_BLOCK(p_q);                             /* Record the event.                                      */
#endif
    OSSched();                                              /* Find the next highest priority task ready to run       */
 8002192:	f001 faad 	bl	80036f0 <OSSched>

    CPU_CRITICAL_ENTER();
 8002196:	f7fe f8a3 	bl	80002e0 <CPU_SR_Save>
 800219a:	6338      	str	r0, [r7, #48]	; 0x30
    switch (OSTCBCurPtr->PendStatus) {
 800219c:	4b39      	ldr	r3, [pc, #228]	; (8002284 <OSQPend+0x1ec>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021a4:	2b03      	cmp	r3, #3
 80021a6:	d855      	bhi.n	8002254 <OSQPend+0x1bc>
 80021a8:	a201      	add	r2, pc, #4	; (adr r2, 80021b0 <OSQPend+0x118>)
 80021aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ae:	bf00      	nop
 80021b0:	080021c1 	.word	0x080021c1
 80021b4:	080021ed 	.word	0x080021ed
 80021b8:	08002231 	.word	0x08002231
 80021bc:	08002211 	.word	0x08002211
        case OS_STATUS_PEND_OK:                             /* Extract message from TCB (Put there by Post)           */
             p_void     = OSTCBCurPtr->MsgPtr;
 80021c0:	4b30      	ldr	r3, [pc, #192]	; (8002284 <OSQPend+0x1ec>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c6:	637b      	str	r3, [r7, #52]	; 0x34
            *p_msg_size = OSTCBCurPtr->MsgSize;
 80021c8:	4b2e      	ldr	r3, [pc, #184]	; (8002284 <OSQPend+0x1ec>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	801a      	strh	r2, [r3, #0]
             if (p_ts  != (CPU_TS *)0) {
 80021d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d004      	beq.n	80021e4 <OSQPend+0x14c>
                *p_ts   =  OSTCBCurPtr->TS;
 80021da:	4b2a      	ldr	r3, [pc, #168]	; (8002284 <OSQPend+0x1ec>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80021e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021e2:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_Q_PEND(p_q);                          /* Record the event.                                      */
#endif
            *p_err      = OS_ERR_NONE;
 80021e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021e6:	2200      	movs	r2, #0
 80021e8:	801a      	strh	r2, [r3, #0]
             break;
 80021ea:	e03d      	b.n	8002268 <OSQPend+0x1d0>

        case OS_STATUS_PEND_ABORT:                          /* Indicate that we aborted                               */
             p_void     = (void      *)0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	637b      	str	r3, [r7, #52]	; 0x34
            *p_msg_size = (OS_MSG_SIZE)0;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	2200      	movs	r2, #0
 80021f4:	801a      	strh	r2, [r3, #0]
             if (p_ts  != (CPU_TS *)0) {
 80021f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d004      	beq.n	8002206 <OSQPend+0x16e>
                *p_ts   =  OSTCBCurPtr->TS;
 80021fc:	4b21      	ldr	r3, [pc, #132]	; (8002284 <OSQPend+0x1ec>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002202:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002204:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_Q_PEND_FAILED(p_q);                   /* Record the event.                                      */
#endif
            *p_err      = OS_ERR_PEND_ABORT;
 8002206:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002208:	f246 12a9 	movw	r2, #25001	; 0x61a9
 800220c:	801a      	strh	r2, [r3, #0]
             break;
 800220e:	e02b      	b.n	8002268 <OSQPend+0x1d0>

        case OS_STATUS_PEND_TIMEOUT:                        /* Indicate that we didn't get event within TO            */
             p_void     = (void      *)0;
 8002210:	2300      	movs	r3, #0
 8002212:	637b      	str	r3, [r7, #52]	; 0x34
            *p_msg_size = (OS_MSG_SIZE)0;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	2200      	movs	r2, #0
 8002218:	801a      	strh	r2, [r3, #0]
             if (p_ts  != (CPU_TS *)0) {
 800221a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800221c:	2b00      	cmp	r3, #0
 800221e:	d002      	beq.n	8002226 <OSQPend+0x18e>
                *p_ts   = (CPU_TS  )0;
 8002220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_Q_PEND_FAILED(p_q);                   /* Record the event.                                      */
#endif
            *p_err      = OS_ERR_TIMEOUT;
 8002226:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002228:	f247 22d9 	movw	r2, #29401	; 0x72d9
 800222c:	801a      	strh	r2, [r3, #0]
             break;
 800222e:	e01b      	b.n	8002268 <OSQPend+0x1d0>

        case OS_STATUS_PEND_DEL:                            /* Indicate that object pended on has been deleted        */
             p_void     = (void      *)0;
 8002230:	2300      	movs	r3, #0
 8002232:	637b      	str	r3, [r7, #52]	; 0x34
            *p_msg_size = (OS_MSG_SIZE)0;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	2200      	movs	r2, #0
 8002238:	801a      	strh	r2, [r3, #0]
             if (p_ts  != (CPU_TS *)0) {
 800223a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800223c:	2b00      	cmp	r3, #0
 800223e:	d004      	beq.n	800224a <OSQPend+0x1b2>
                *p_ts   =  OSTCBCurPtr->TS;
 8002240:	4b10      	ldr	r3, [pc, #64]	; (8002284 <OSQPend+0x1ec>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002246:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002248:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_Q_PEND_FAILED(p_q);                   /* Record the event.                                      */
#endif
            *p_err      = OS_ERR_OBJ_DEL;
 800224a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800224c:	f645 52c2 	movw	r2, #24002	; 0x5dc2
 8002250:	801a      	strh	r2, [r3, #0]
             break;
 8002252:	e009      	b.n	8002268 <OSQPend+0x1d0>

        default:
             p_void     = (void      *)0;
 8002254:	2300      	movs	r3, #0
 8002256:	637b      	str	r3, [r7, #52]	; 0x34
            *p_msg_size = (OS_MSG_SIZE)0;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	2200      	movs	r2, #0
 800225c:	801a      	strh	r2, [r3, #0]
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_Q_PEND_FAILED(p_q);                   /* Record the event.                                      */
#endif
            *p_err      = OS_ERR_STATUS_INVALID;
 800225e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002260:	f646 622e 	movw	r2, #28206	; 0x6e2e
 8002264:	801a      	strh	r2, [r3, #0]
             break;
 8002266:	bf00      	nop
    }
    CPU_CRITICAL_EXIT();
 8002268:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800226a:	f7fe f83d 	bl	80002e8 <CPU_SR_Restore>
    return (p_void);
 800226e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002270:	4618      	mov	r0, r3
 8002272:	3738      	adds	r7, #56	; 0x38
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	200026d8 	.word	0x200026d8
 800227c:	55455551 	.word	0x55455551
 8002280:	20002440 	.word	0x20002440
 8002284:	200026ac 	.word	0x200026ac

08002288 <OSQPost>:
void  OSQPost (OS_Q         *p_q,
               void         *p_void,
               OS_MSG_SIZE   msg_size,
               OS_OPT        opt,
               OS_ERR       *p_err)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b088      	sub	sp, #32
 800228c:	af02      	add	r7, sp, #8
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	4611      	mov	r1, r2
 8002294:	461a      	mov	r2, r3
 8002296:	460b      	mov	r3, r1
 8002298:	80fb      	strh	r3, [r7, #6]
 800229a:	4613      	mov	r3, r2
 800229c:	80bb      	strh	r3, [r7, #4]
        return;
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_q == (OS_Q *)0) {                                 /* Validate 'p_q'                                         */
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d104      	bne.n	80022ae <OSQPost+0x26>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_POST_FAILED(p_q);                        /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_PTR_NULL;
 80022a4:	6a3b      	ldr	r3, [r7, #32]
 80022a6:	f645 52c3 	movw	r2, #24003	; 0x5dc3
 80022aa:	801a      	strh	r2, [r3, #0]
        return;
 80022ac:	e03f      	b.n	800232e <OSQPost+0xa6>
    }
    switch (opt) {                                          /* Validate 'opt'                                         */
 80022ae:	88bb      	ldrh	r3, [r7, #4]
 80022b0:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 80022b4:	d022      	beq.n	80022fc <OSQPost+0x74>
 80022b6:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 80022ba:	dc07      	bgt.n	80022cc <OSQPost+0x44>
 80022bc:	2b10      	cmp	r3, #16
 80022be:	d01d      	beq.n	80022fc <OSQPost+0x74>
 80022c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022c4:	d01a      	beq.n	80022fc <OSQPost+0x74>
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d018      	beq.n	80022fc <OSQPost+0x74>
 80022ca:	e012      	b.n	80022f2 <OSQPost+0x6a>
 80022cc:	f248 0210 	movw	r2, #32784	; 0x8010
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d013      	beq.n	80022fc <OSQPost+0x74>
 80022d4:	f248 0210 	movw	r2, #32784	; 0x8010
 80022d8:	4293      	cmp	r3, r2
 80022da:	dc03      	bgt.n	80022e4 <OSQPost+0x5c>
 80022dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022e0:	d00c      	beq.n	80022fc <OSQPost+0x74>
 80022e2:	e006      	b.n	80022f2 <OSQPost+0x6a>
 80022e4:	f5b3 4f02 	cmp.w	r3, #33280	; 0x8200
 80022e8:	d008      	beq.n	80022fc <OSQPost+0x74>
 80022ea:	f248 2210 	movw	r2, #33296	; 0x8210
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d004      	beq.n	80022fc <OSQPost+0x74>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_Q_POST_FAILED(p_q);                   /* Record the event.                                      */
#endif
            *p_err =  OS_ERR_OPT_INVALID;
 80022f2:	6a3b      	ldr	r3, [r7, #32]
 80022f4:	f645 6225 	movw	r2, #24101	; 0x5e25
 80022f8:	801a      	strh	r2, [r3, #0]
             return;
 80022fa:	e018      	b.n	800232e <OSQPost+0xa6>
        case OS_OPT_POST_LIFO | OS_OPT_POST_ALL:
        case OS_OPT_POST_FIFO | OS_OPT_POST_NO_SCHED:
        case OS_OPT_POST_LIFO | OS_OPT_POST_NO_SCHED:
        case OS_OPT_POST_FIFO | OS_OPT_POST_ALL | OS_OPT_POST_NO_SCHED:
        case OS_OPT_POST_LIFO | OS_OPT_POST_ALL | OS_OPT_POST_NO_SCHED:
             break;
 80022fc:	bf00      	nop
             return;
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_q->Type != OS_OBJ_TYPE_Q) {                       /* Make sure message queue was created                    */
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a0c      	ldr	r2, [pc, #48]	; (8002334 <OSQPost+0xac>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d004      	beq.n	8002312 <OSQPost+0x8a>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_Q_POST_FAILED(p_q);                        /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_TYPE;
 8002308:	6a3b      	ldr	r3, [r7, #32]
 800230a:	f645 52c4 	movw	r2, #24004	; 0x5dc4
 800230e:	801a      	strh	r2, [r3, #0]
        return;
 8002310:	e00d      	b.n	800232e <OSQPost+0xa6>
    }
#endif

    ts = OS_TS_GET();                                       /* Get timestamp                                          */
 8002312:	f005 f92b 	bl	800756c <CPU_TS_TmrRd>
 8002316:	6178      	str	r0, [r7, #20]
    }
#endif
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_Q_POST(p_q);                                   /* Record the event.                                      */
#endif
    OS_QPost(p_q,
 8002318:	88b9      	ldrh	r1, [r7, #4]
 800231a:	88fa      	ldrh	r2, [r7, #6]
 800231c:	6a3b      	ldr	r3, [r7, #32]
 800231e:	9301      	str	r3, [sp, #4]
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	460b      	mov	r3, r1
 8002326:	68b9      	ldr	r1, [r7, #8]
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f000 f841 	bl	80023b0 <OS_QPost>
             p_void,
             msg_size,
             opt,
             ts,
             p_err);
}
 800232e:	3718      	adds	r7, #24
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	55455551 	.word	0x55455551

08002338 <OS_QDbgListAdd>:
*/


#if OS_CFG_DBG_EN > 0u
void  OS_QDbgListAdd (OS_Q  *p_q)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
    p_q->DbgNamePtr               = (CPU_CHAR *)((void *)" ");
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a0e      	ldr	r2, [pc, #56]	; (800237c <OS_QDbgListAdd+0x44>)
 8002344:	61da      	str	r2, [r3, #28]
    p_q->DbgPrevPtr               = (OS_Q     *)0;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	615a      	str	r2, [r3, #20]
    if (OSQDbgListPtr == (OS_Q *)0) {
 800234c:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <OS_QDbgListAdd+0x48>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d103      	bne.n	800235c <OS_QDbgListAdd+0x24>
        p_q->DbgNextPtr           = (OS_Q     *)0;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	619a      	str	r2, [r3, #24]
 800235a:	e007      	b.n	800236c <OS_QDbgListAdd+0x34>
    } else {
        p_q->DbgNextPtr           =  OSQDbgListPtr;
 800235c:	4b08      	ldr	r3, [pc, #32]	; (8002380 <OS_QDbgListAdd+0x48>)
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	619a      	str	r2, [r3, #24]
        OSQDbgListPtr->DbgPrevPtr =  p_q;
 8002364:	4b06      	ldr	r3, [pc, #24]	; (8002380 <OS_QDbgListAdd+0x48>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	615a      	str	r2, [r3, #20]
    }
    OSQDbgListPtr                 =  p_q;
 800236c:	4a04      	ldr	r2, [pc, #16]	; (8002380 <OS_QDbgListAdd+0x48>)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6013      	str	r3, [r2, #0]
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr
 800237c:	0800e4d8 	.word	0x0800e4d8
 8002380:	20002868 	.word	0x20002868

08002384 <OS_QInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_QInit (OS_ERR  *p_err)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSQDbgListPtr = (OS_Q *)0;
 800238c:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <OS_QInit+0x24>)
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
#endif

    OSQQty        = (OS_OBJ_QTY)0;
 8002392:	4b06      	ldr	r3, [pc, #24]	; (80023ac <OS_QInit+0x28>)
 8002394:	2200      	movs	r2, #0
 8002396:	801a      	strh	r2, [r3, #0]
   *p_err         = OS_ERR_NONE;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	801a      	strh	r2, [r3, #0]
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr
 80023a8:	20002868 	.word	0x20002868
 80023ac:	200026b0 	.word	0x200026b0

080023b0 <OS_QPost>:
                void         *p_void,
                OS_MSG_SIZE   msg_size,
                OS_OPT        opt,
                CPU_TS        ts,
                OS_ERR       *p_err)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08c      	sub	sp, #48	; 0x30
 80023b4:	af02      	add	r7, sp, #8
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	4611      	mov	r1, r2
 80023bc:	461a      	mov	r2, r3
 80023be:	460b      	mov	r3, r1
 80023c0:	80fb      	strh	r3, [r7, #6]
 80023c2:	4613      	mov	r3, r2
 80023c4:	80bb      	strh	r3, [r7, #4]
    OS_OPT         post_type;
    OS_PEND_LIST  *p_pend_list;
    OS_PEND_DATA  *p_pend_data;
    OS_PEND_DATA  *p_pend_data_next;
    OS_TCB        *p_tcb;
    CPU_SR_ALLOC();
 80023c6:	2300      	movs	r3, #0
 80023c8:	61fb      	str	r3, [r7, #28]



    OS_CRITICAL_ENTER();
 80023ca:	f7fd ff89 	bl	80002e0 <CPU_SR_Save>
 80023ce:	61f8      	str	r0, [r7, #28]
    p_pend_list = &p_q->PendList;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	3308      	adds	r3, #8
 80023d4:	61bb      	str	r3, [r7, #24]
    if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0) {         /* Any task waiting on message queue?                     */
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	891b      	ldrh	r3, [r3, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d11a      	bne.n	8002414 <OS_QPost+0x64>
        if ((opt & OS_OPT_POST_LIFO) == (OS_OPT)0) {        /* Determine whether we post FIFO or LIFO                 */
 80023de:	88bb      	ldrh	r3, [r7, #4]
 80023e0:	f003 0310 	and.w	r3, r3, #16
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d102      	bne.n	80023ee <OS_QPost+0x3e>
            post_type = OS_OPT_POST_FIFO;
 80023e8:	2300      	movs	r3, #0
 80023ea:	84bb      	strh	r3, [r7, #36]	; 0x24
 80023ec:	e001      	b.n	80023f2 <OS_QPost+0x42>
        } else {
            post_type = OS_OPT_POST_LIFO;
 80023ee:	2310      	movs	r3, #16
 80023f0:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
        OS_MsgQPut(&p_q->MsgQ,                              /* Place message in the message queue                     */
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f103 0020 	add.w	r0, r3, #32
 80023f8:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80023fa:	88fa      	ldrh	r2, [r7, #6]
 80023fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023fe:	9301      	str	r3, [sp, #4]
 8002400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	460b      	mov	r3, r1
 8002406:	68b9      	ldr	r1, [r7, #8]
 8002408:	f000 ff70 	bl	80032ec <OS_MsgQPut>
                   p_void,
                   msg_size,
                   post_type,
                   ts,
                   p_err);
        OS_CRITICAL_EXIT();
 800240c:	69f8      	ldr	r0, [r7, #28]
 800240e:	f7fd ff6b 	bl	80002e8 <CPU_SR_Restore>
        return;
 8002412:	e031      	b.n	8002478 <OS_QPost+0xc8>
    }

    if ((opt & OS_OPT_POST_ALL) != (OS_OPT)0) {             /* Post message to all tasks waiting?                     */
 8002414:	88bb      	ldrh	r3, [r7, #4]
 8002416:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <OS_QPost+0x76>
        cnt = p_pend_list->NbrEntries;                      /* Yes                                                    */
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	891b      	ldrh	r3, [r3, #8]
 8002422:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002424:	e001      	b.n	800242a <OS_QPost+0x7a>
    } else {
        cnt = (OS_OBJ_QTY)1;                                /* No                                                     */
 8002426:	2301      	movs	r3, #1
 8002428:	84fb      	strh	r3, [r7, #38]	; 0x26
    }
    p_pend_data = p_pend_list->HeadPtr;
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	623b      	str	r3, [r7, #32]
    while (cnt > 0u) {
 8002430:	e013      	b.n	800245a <OS_QPost+0xaa>
        p_tcb            = p_pend_data->TCBPtr;
 8002432:	6a3b      	ldr	r3, [r7, #32]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	617b      	str	r3, [r7, #20]
        p_pend_data_next = p_pend_data->NextPtr;
 8002438:	6a3b      	ldr	r3, [r7, #32]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	613b      	str	r3, [r7, #16]
        OS_Post((OS_PEND_OBJ *)((void *)p_q),
 800243e:	88fa      	ldrh	r2, [r7, #6]
 8002440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	4613      	mov	r3, r2
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	6979      	ldr	r1, [r7, #20]
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f001 fcbc 	bl	8003dc8 <OS_Post>
                p_tcb,
                p_void,
                msg_size,
                ts);
        p_pend_data = p_pend_data_next;
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	623b      	str	r3, [r7, #32]
        cnt--;
 8002454:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002456:	3b01      	subs	r3, #1
 8002458:	84fb      	strh	r3, [r7, #38]	; 0x26
        cnt = p_pend_list->NbrEntries;                      /* Yes                                                    */
    } else {
        cnt = (OS_OBJ_QTY)1;                                /* No                                                     */
    }
    p_pend_data = p_pend_list->HeadPtr;
    while (cnt > 0u) {
 800245a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1e8      	bne.n	8002432 <OS_QPost+0x82>
                msg_size,
                ts);
        p_pend_data = p_pend_data_next;
        cnt--;
    }
    OS_CRITICAL_EXIT_NO_SCHED();
 8002460:	69f8      	ldr	r0, [r7, #28]
 8002462:	f7fd ff41 	bl	80002e8 <CPU_SR_Restore>
    if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0) {
 8002466:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	db01      	blt.n	8002472 <OS_QPost+0xc2>
        OSSched();                                          /* Run the scheduler                                      */
 800246e:	f001 f93f 	bl	80036f0 <OSSched>
    }
   *p_err = OS_ERR_NONE;
 8002472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002474:	2200      	movs	r2, #0
 8002476:	801a      	strh	r2, [r3, #0]
}
 8002478:	3728      	adds	r7, #40	; 0x28
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop

08002480 <OSTaskCreate>:
                    OS_MSG_QTY     q_size,
                    OS_TICK        time_quanta,
                    void          *p_ext,
                    OS_OPT         opt,
                    OS_ERR        *p_err)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b08c      	sub	sp, #48	; 0x30
 8002484:	af02      	add	r7, sp, #8
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
 800248c:	603b      	str	r3, [r7, #0]
    OS_TLS_ID      id;
#endif

    CPU_STK       *p_sp;
    CPU_STK       *p_stk_limit;
    CPU_SR_ALLOC();
 800248e:	2300      	movs	r3, #0
 8002490:	61bb      	str	r3, [r7, #24]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* ---------- CANNOT CREATE A TASK FROM AN ISR ---------- */
 8002492:	4b75      	ldr	r3, [pc, #468]	; (8002668 <OSTaskCreate+0x1e8>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d004      	beq.n	80024a4 <OSTaskCreate+0x24>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_TASK_CREATE_ISR;
 800249a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800249c:	f247 124a 	movw	r2, #29002	; 0x714a
 80024a0:	801a      	strh	r2, [r3, #0]
        return;
 80024a2:	e0dd      	b.n	8002660 <OSTaskCreate+0x1e0>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u                                  /* ---------------- VALIDATE ARGUMENTS ------------------ */
    if (p_tcb == (OS_TCB *)0) {                             /* User must supply a valid OS_TCB                        */
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d104      	bne.n	80024b4 <OSTaskCreate+0x34>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_TCB_INVALID;
 80024aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024ac:	f247 12ad 	movw	r2, #29101	; 0x71ad
 80024b0:	801a      	strh	r2, [r3, #0]
        return;
 80024b2:	e0d5      	b.n	8002660 <OSTaskCreate+0x1e0>
    }
    if (p_task == (OS_TASK_PTR)0) {                         /* User must supply a valid task                          */
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d104      	bne.n	80024c4 <OSTaskCreate+0x44>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_TASK_INVALID;
 80024ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024bc:	f247 124f 	movw	r2, #29007	; 0x714f
 80024c0:	801a      	strh	r2, [r3, #0]
        return;
 80024c2:	e0cd      	b.n	8002660 <OSTaskCreate+0x1e0>
    }
    if (p_stk_base == (CPU_STK *)0) {                       /* User must supply a valid stack base address            */
 80024c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d104      	bne.n	80024d4 <OSTaskCreate+0x54>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_STK_INVALID;
 80024ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024cc:	f646 622f 	movw	r2, #28207	; 0x6e2f
 80024d0:	801a      	strh	r2, [r3, #0]
        return;
 80024d2:	e0c5      	b.n	8002660 <OSTaskCreate+0x1e0>
    }
    if (stk_size < OSCfg_StkSizeMin) {                      /* User must supply a valid minimum stack size            */
 80024d4:	4b65      	ldr	r3, [pc, #404]	; (800266c <OSTaskCreate+0x1ec>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024da:	429a      	cmp	r2, r3
 80024dc:	d204      	bcs.n	80024e8 <OSTaskCreate+0x68>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_STK_SIZE_INVALID;
 80024de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024e0:	f646 6230 	movw	r2, #28208	; 0x6e30
 80024e4:	801a      	strh	r2, [r3, #0]
        return;
 80024e6:	e0bb      	b.n	8002660 <OSTaskCreate+0x1e0>
    }
    if (stk_limit >= stk_size) {                            /* User must supply a valid stack limit                   */
 80024e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d304      	bcc.n	80024fa <OSTaskCreate+0x7a>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_STK_LIMIT_INVALID;
 80024f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024f2:	f646 6231 	movw	r2, #28209	; 0x6e31
 80024f6:	801a      	strh	r2, [r3, #0]
        return;
 80024f8:	e0b2      	b.n	8002660 <OSTaskCreate+0x1e0>
    }
    if (prio >= OS_CFG_PRIO_MAX) {                          /* Priority must be within 0 and OS_CFG_PRIO_MAX-1        */
 80024fa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80024fe:	2b1f      	cmp	r3, #31
 8002500:	d904      	bls.n	800250c <OSTaskCreate+0x8c>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_PRIO_INVALID;
 8002502:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002504:	f246 2273 	movw	r2, #25203	; 0x6273
 8002508:	801a      	strh	r2, [r3, #0]
        return;
 800250a:	e0a9      	b.n	8002660 <OSTaskCreate+0x1e0>
            return;
        }
    }
#endif

    if (prio == (OS_CFG_PRIO_MAX - 1u)) {
 800250c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002510:	2b1f      	cmp	r3, #31
 8002512:	d108      	bne.n	8002526 <OSTaskCreate+0xa6>
        if (p_tcb != &OSIdleTaskTCB) {
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4a56      	ldr	r2, [pc, #344]	; (8002670 <OSTaskCreate+0x1f0>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d004      	beq.n	8002526 <OSTaskCreate+0xa6>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
            TRACE_OS_TASK_CREATE_FAILED(p_tcb);             /* Record the event.                                      */
#endif
           *p_err = OS_ERR_PRIO_INVALID;                    /* Not allowed to use same priority as idle task          */
 800251c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800251e:	f246 2273 	movw	r2, #25203	; 0x6273
 8002522:	801a      	strh	r2, [r3, #0]
            return;
 8002524:	e09c      	b.n	8002660 <OSTaskCreate+0x1e0>
        }
    }

    OS_TaskInitTCB(p_tcb);                                  /* Initialize the TCB to default values                   */
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f000 faca 	bl	8002ac0 <OS_TaskInitTCB>

   *p_err = OS_ERR_NONE;
 800252c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800252e:	2200      	movs	r2, #0
 8002530:	801a      	strh	r2, [r3, #0]
                                                            /* --------------- CLEAR THE TASK'S STACK --------------- */
    if ((opt & OS_OPT_TASK_STK_CHK) != (OS_OPT)0) {         /* See if stack checking has been enabled                 */
 8002532:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d017      	beq.n	800256e <OSTaskCreate+0xee>
        if ((opt & OS_OPT_TASK_STK_CLR) != (OS_OPT)0) {     /* See if stack needs to be cleared                       */
 800253e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d011      	beq.n	800256e <OSTaskCreate+0xee>
            p_sp = p_stk_base;
 800254a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800254c:	61fb      	str	r3, [r7, #28]
            for (i = 0u; i < stk_size; i++) {               /* Stack grows from HIGH to LOW memory                    */
 800254e:	2300      	movs	r3, #0
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
 8002552:	e008      	b.n	8002566 <OSTaskCreate+0xe6>
               *p_sp = (CPU_STK)0;                          /* Clear from bottom of stack and up!                     */
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]
                p_sp++;
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	3304      	adds	r3, #4
 800255e:	61fb      	str	r3, [r7, #28]
   *p_err = OS_ERR_NONE;
                                                            /* --------------- CLEAR THE TASK'S STACK --------------- */
    if ((opt & OS_OPT_TASK_STK_CHK) != (OS_OPT)0) {         /* See if stack checking has been enabled                 */
        if ((opt & OS_OPT_TASK_STK_CLR) != (OS_OPT)0) {     /* See if stack needs to be cleared                       */
            p_sp = p_stk_base;
            for (i = 0u; i < stk_size; i++) {               /* Stack grows from HIGH to LOW memory                    */
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	3301      	adds	r3, #1
 8002564:	627b      	str	r3, [r7, #36]	; 0x24
 8002566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800256a:	429a      	cmp	r2, r3
 800256c:	d3f2      	bcc.n	8002554 <OSTaskCreate+0xd4>
            }
        }
    }
                                                            /* ------- INITIALIZE THE STACK FRAME OF THE TASK ------- */
#if (CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO)
    p_stk_limit = p_stk_base + stk_limit;
 800256e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002574:	4413      	add	r3, r2
 8002576:	617b      	str	r3, [r7, #20]
#else
    p_stk_limit = p_stk_base + (stk_size - 1u) - stk_limit;
#endif

    p_sp = OSTaskStkInit(p_task,
 8002578:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800257c:	9301      	str	r3, [sp, #4]
 800257e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002586:	6839      	ldr	r1, [r7, #0]
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f003 fcd3 	bl	8005f34 <OSTaskStkInit>
 800258e:	61f8      	str	r0, [r7, #28]
                         stk_size,
                         opt);

                                                            /* -------------- INITIALIZE THE TCB FIELDS ------------- */
#if OS_CFG_DBG_EN > 0u
    p_tcb->TaskEntryAddr = p_task;                          /* Save task entry point address                          */
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	629a      	str	r2, [r3, #40]	; 0x28
    p_tcb->TaskEntryArg  = p_arg;                           /* Save task entry argument                               */
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif

#if OS_CFG_DBG_EN > 0u
    p_tcb->NamePtr       = p_name;                          /* Save task name                                         */
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	68ba      	ldr	r2, [r7, #8]
 80025a0:	621a      	str	r2, [r3, #32]
#else
    (void)&p_name;
#endif

    p_tcb->Prio          = prio;                            /* Save the task's priority                               */
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80025a8:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

#if OS_CFG_MUTEX_EN > 0u
    p_tcb->BasePrio      = prio;                            /* Set the base priority                                  */
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80025b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
#endif

    p_tcb->StkPtr        = p_sp;                            /* Save the new top-of-stack pointer                      */
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	69fa      	ldr	r2, [r7, #28]
 80025ba:	601a      	str	r2, [r3, #0]
#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u))
    p_tcb->StkLimitPtr   = p_stk_limit;                     /* Save the stack limit pointer                           */
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	609a      	str	r2, [r3, #8]
    }
#else
    (void)&time_quanta;
#endif

    p_tcb->ExtPtr        = p_ext;                           /* Save pointer to TCB extension                          */
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80025c6:	605a      	str	r2, [r3, #4]
#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u))
    p_tcb->StkBasePtr    = p_stk_base;                      /* Save pointer to the base address of the stack          */
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025cc:	625a      	str	r2, [r3, #36]	; 0x24
    p_tcb->StkSize       = stk_size;                        /* Save the stack size (in number of CPU_STK elements)    */
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025d2:	641a      	str	r2, [r3, #64]	; 0x40
#endif
    p_tcb->Opt           = opt;                             /* Save task options                                      */
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80025da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if OS_CFG_TASK_REG_TBL_SIZE > 0u
    for (reg_nbr = 0u; reg_nbr < OS_CFG_TASK_REG_TBL_SIZE; reg_nbr++) {
 80025de:	2300      	movs	r3, #0
 80025e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80025e4:	e00b      	b.n	80025fe <OSTaskCreate+0x17e>
        p_tcb->RegTbl[reg_nbr] = (OS_REG)0;
 80025e6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	321e      	adds	r2, #30
 80025ee:	2100      	movs	r1, #0
 80025f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    p_tcb->StkSize       = stk_size;                        /* Save the stack size (in number of CPU_STK elements)    */
#endif
    p_tcb->Opt           = opt;                             /* Save task options                                      */

#if OS_CFG_TASK_REG_TBL_SIZE > 0u
    for (reg_nbr = 0u; reg_nbr < OS_CFG_TASK_REG_TBL_SIZE; reg_nbr++) {
 80025f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025f8:	3301      	adds	r3, #1
 80025fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80025fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0ef      	beq.n	80025e6 <OSTaskCreate+0x166>
        p_tcb->RegTbl[reg_nbr] = (OS_REG)0;
    }
#endif

#if OS_CFG_TASK_Q_EN > 0u
    OS_MsgQInit(&p_tcb->MsgQ,                               /* Initialize the task's message queue                    */
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	3360      	adds	r3, #96	; 0x60
 800260a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800260e:	4611      	mov	r1, r2
 8002610:	4618      	mov	r0, r3
 8002612:	f000 fdf3 	bl	80031fc <OS_MsgQInit>
                q_size);
#else
    (void)&q_size;
#endif

    OSTaskCreateHook(p_tcb);                                /* Call user defined hook                                 */
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f003 fc68 	bl	8005eec <OSTaskCreateHook>
        p_tcb->TLS_Tbl[id] = (OS_TLS)0;
    }
    OS_TLS_TaskCreate(p_tcb);                               /* Call TLS hook                                          */
#endif
                                                            /* --------------- ADD TASK TO READY LIST --------------- */
    OS_CRITICAL_ENTER();
 800261c:	f7fd fe60 	bl	80002e0 <CPU_SR_Save>
 8002620:	61b8      	str	r0, [r7, #24]
    OS_PrioInsert(p_tcb->Prio);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002628:	4618      	mov	r0, r3
 800262a:	f002 fc9d 	bl	8004f68 <OS_PrioInsert>
    OS_RdyListInsertTail(p_tcb);
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f001 fd14 	bl	800405c <OS_RdyListInsertTail>

#if OS_CFG_DBG_EN > 0u
    OS_TaskDbgListAdd(p_tcb);
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 fa01 	bl	8002a3c <OS_TaskDbgListAdd>
#endif

    OSTaskQty++;                                            /* Increment the #tasks counter                           */
 800263a:	4b0e      	ldr	r3, [pc, #56]	; (8002674 <OSTaskCreate+0x1f4>)
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	3301      	adds	r3, #1
 8002640:	b29a      	uxth	r2, r3
 8002642:	4b0c      	ldr	r3, [pc, #48]	; (8002674 <OSTaskCreate+0x1f4>)
 8002644:	801a      	strh	r2, [r3, #0]

    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Return if multitasking has not started                 */
 8002646:	4b0c      	ldr	r3, [pc, #48]	; (8002678 <OSTaskCreate+0x1f8>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d003      	beq.n	8002656 <OSTaskCreate+0x1d6>
        OS_CRITICAL_EXIT();
 800264e:	69b8      	ldr	r0, [r7, #24]
 8002650:	f7fd fe4a 	bl	80002e8 <CPU_SR_Restore>
        return;
 8002654:	e004      	b.n	8002660 <OSTaskCreate+0x1e0>
    }

    OS_CRITICAL_EXIT_NO_SCHED();
 8002656:	69b8      	ldr	r0, [r7, #24]
 8002658:	f7fd fe46 	bl	80002e8 <CPU_SR_Restore>

    OSSched();
 800265c:	f001 f848 	bl	80036f0 <OSSched>
}
 8002660:	3728      	adds	r7, #40	; 0x28
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	200026d8 	.word	0x200026d8
 800266c:	0800e610 	.word	0x0800e610
 8002670:	200027a8 	.word	0x200027a8
 8002674:	200026da 	.word	0x200026da
 8002678:	20002451 	.word	0x20002451

0800267c <OSTaskResume>:
*/

#if OS_CFG_TASK_SUSPEND_EN > 0u
void  OSTaskResume (OS_TCB  *p_tcb,
                    OS_ERR  *p_err)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
    CPU_SR_ALLOC();
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
    }
#endif

#if (OS_CFG_ISR_POST_DEFERRED_EN   == 0u) && \
    (OS_CFG_CALLED_FROM_ISR_CHK_EN >  0u)
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 800268a:	4b13      	ldr	r3, [pc, #76]	; (80026d8 <OSTaskResume+0x5c>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d004      	beq.n	800269c <OSTaskResume+0x20>
       *p_err = OS_ERR_TASK_RESUME_ISR;
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	f247 1255 	movw	r2, #29013	; 0x7155
 8002698:	801a      	strh	r2, [r3, #0]
        return;
 800269a:	e019      	b.n	80026d0 <OSTaskResume+0x54>
    }
#endif


    CPU_CRITICAL_ENTER();
 800269c:	f7fd fe20 	bl	80002e0 <CPU_SR_Save>
 80026a0:	60f8      	str	r0, [r7, #12]
#if OS_CFG_ARG_CHK_EN > 0u
    if ((p_tcb == (OS_TCB *)0) ||                           /* We cannot resume 'self'                                */
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d004      	beq.n	80026b2 <OSTaskResume+0x36>
        (p_tcb == OSTCBCurPtr)) {
 80026a8:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <OSTaskResume+0x60>)
 80026aa:	681b      	ldr	r3, [r3, #0]
#endif


    CPU_CRITICAL_ENTER();
#if OS_CFG_ARG_CHK_EN > 0u
    if ((p_tcb == (OS_TCB *)0) ||                           /* We cannot resume 'self'                                */
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d107      	bne.n	80026c2 <OSTaskResume+0x46>
        (p_tcb == OSTCBCurPtr)) {
        CPU_CRITICAL_EXIT();
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f7fd fe18 	bl	80002e8 <CPU_SR_Restore>
       *p_err  = OS_ERR_TASK_RESUME_SELF;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	f247 1257 	movw	r2, #29015	; 0x7157
 80026be:	801a      	strh	r2, [r3, #0]
        return;
 80026c0:	e006      	b.n	80026d0 <OSTaskResume+0x54>
    }
#endif
    CPU_CRITICAL_EXIT();
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f7fd fe10 	bl	80002e8 <CPU_SR_Restore>
                    (OS_ERR    *)p_err);
        return;
    }
#endif

    OS_TaskResume(p_tcb, p_err);
 80026c8:	6839      	ldr	r1, [r7, #0]
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 fac6 	bl	8002c5c <OS_TaskResume>

#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_TASK_RESUME(p_tcb);                            /* Record the event.                                      */
#endif
}
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	200026d8 	.word	0x200026d8
 80026dc:	200026ac 	.word	0x200026ac

080026e0 <OSTaskSemPend>:

OS_SEM_CTR  OSTaskSemPend (OS_TICK   timeout,
                           OS_OPT    opt,
                           CPU_TS   *p_ts,
                           OS_ERR   *p_err)
{
 80026e0:	b590      	push	{r4, r7, lr}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	607a      	str	r2, [r7, #4]
 80026ea:	603b      	str	r3, [r7, #0]
 80026ec:	460b      	mov	r3, r1
 80026ee:	817b      	strh	r3, [r7, #10]
    OS_SEM_CTR    ctr;
    CPU_SR_ALLOC();
 80026f0:	2300      	movs	r3, #0
 80026f2:	617b      	str	r3, [r7, #20]
        return ((OS_SEM_CTR)0);
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 80026f4:	4b6f      	ldr	r3, [pc, #444]	; (80028b4 <OSTaskSemPend+0x1d4>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d005      	beq.n	8002708 <OSTaskSemPend+0x28>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_SEM_PEND_FAILED(OSTCBCurPtr);         /* Record the event.                                      */
#endif
       *p_err = OS_ERR_PEND_ISR;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	f246 12ae 	movw	r2, #25006	; 0x61ae
 8002702:	801a      	strh	r2, [r3, #0]
        return ((OS_SEM_CTR)0);
 8002704:	2300      	movs	r3, #0
 8002706:	e0d0      	b.n	80028aa <OSTaskSemPend+0x1ca>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    switch (opt) {                                          /* Validate 'opt'                                         */
 8002708:	897b      	ldrh	r3, [r7, #10]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d008      	beq.n	8002720 <OSTaskSemPend+0x40>
 800270e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002712:	d005      	beq.n	8002720 <OSTaskSemPend+0x40>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_TASK_SEM_PEND_FAILED(OSTCBCurPtr);    /* Record the event.                                      */
#endif
            *p_err = OS_ERR_OPT_INVALID;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	f645 6225 	movw	r2, #24101	; 0x5e25
 800271a:	801a      	strh	r2, [r3, #0]
             return ((OS_SEM_CTR)0);
 800271c:	2300      	movs	r3, #0
 800271e:	e0c4      	b.n	80028aa <OSTaskSemPend+0x1ca>

#if OS_CFG_ARG_CHK_EN > 0u
    switch (opt) {                                          /* Validate 'opt'                                         */
        case OS_OPT_PEND_BLOCKING:
        case OS_OPT_PEND_NON_BLOCKING:
             break;
 8002720:	bf00      	nop
            *p_err = OS_ERR_OPT_INVALID;
             return ((OS_SEM_CTR)0);
    }
#endif

    if (p_ts != (CPU_TS *)0) {
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d002      	beq.n	800272e <OSTaskSemPend+0x4e>
       *p_ts  = (CPU_TS  )0;                                /* Initialize the returned timestamp                      */
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]
    }

    CPU_CRITICAL_ENTER();
 800272e:	f7fd fdd7 	bl	80002e0 <CPU_SR_Save>
 8002732:	6178      	str	r0, [r7, #20]
    if (OSTCBCurPtr->SemCtr > (OS_SEM_CTR)0) {              /* See if task already been signaled                      */
 8002734:	4b60      	ldr	r3, [pc, #384]	; (80028b8 <OSTaskSemPend+0x1d8>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800273a:	2b00      	cmp	r3, #0
 800273c:	d035      	beq.n	80027aa <OSTaskSemPend+0xca>
        OSTCBCurPtr->SemCtr--;
 800273e:	4b5e      	ldr	r3, [pc, #376]	; (80028b8 <OSTaskSemPend+0x1d8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002744:	3a01      	subs	r2, #1
 8002746:	64da      	str	r2, [r3, #76]	; 0x4c
        ctr    = OSTCBCurPtr->SemCtr;
 8002748:	4b5b      	ldr	r3, [pc, #364]	; (80028b8 <OSTaskSemPend+0x1d8>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800274e:	613b      	str	r3, [r7, #16]
        if (p_ts != (CPU_TS *)0) {
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d004      	beq.n	8002760 <OSTaskSemPend+0x80>
           *p_ts  = OSTCBCurPtr->TS;
 8002756:	4b58      	ldr	r3, [pc, #352]	; (80028b8 <OSTaskSemPend+0x1d8>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	601a      	str	r2, [r3, #0]
        }
#if OS_CFG_TASK_PROFILE_EN > 0u
        OSTCBCurPtr->SemPendTime = OS_TS_GET() - OSTCBCurPtr->TS;
 8002760:	4b55      	ldr	r3, [pc, #340]	; (80028b8 <OSTaskSemPend+0x1d8>)
 8002762:	681c      	ldr	r4, [r3, #0]
 8002764:	f004 ff02 	bl	800756c <CPU_TS_TmrRd>
 8002768:	4602      	mov	r2, r0
 800276a:	4b53      	ldr	r3, [pc, #332]	; (80028b8 <OSTaskSemPend+0x1d8>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        if (OSTCBCurPtr->SemPendTimeMax < OSTCBCurPtr->SemPendTime) {
 8002776:	4b50      	ldr	r3, [pc, #320]	; (80028b8 <OSTaskSemPend+0x1d8>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800277e:	4b4e      	ldr	r3, [pc, #312]	; (80028b8 <OSTaskSemPend+0x1d8>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002786:	429a      	cmp	r2, r3
 8002788:	d207      	bcs.n	800279a <OSTaskSemPend+0xba>
            OSTCBCurPtr->SemPendTimeMax = OSTCBCurPtr->SemPendTime;
 800278a:	4b4b      	ldr	r3, [pc, #300]	; (80028b8 <OSTaskSemPend+0x1d8>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a4a      	ldr	r2, [pc, #296]	; (80028b8 <OSTaskSemPend+0x1d8>)
 8002790:	6812      	ldr	r2, [r2, #0]
 8002792:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 8002796:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        }
#endif
        CPU_CRITICAL_EXIT();
 800279a:	6978      	ldr	r0, [r7, #20]
 800279c:	f7fd fda4 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_SEM_PEND(OSTCBCurPtr);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_NONE;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	2200      	movs	r2, #0
 80027a4:	801a      	strh	r2, [r3, #0]
        return (ctr);
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	e07f      	b.n	80028aa <OSTaskSemPend+0x1ca>
    }

    if ((opt & OS_OPT_PEND_NON_BLOCKING) != (OS_OPT)0) {    /* Caller wants to block if not available?                */
 80027aa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	da08      	bge.n	80027c4 <OSTaskSemPend+0xe4>
        CPU_CRITICAL_EXIT();        
 80027b2:	6978      	ldr	r0, [r7, #20]
 80027b4:	f7fd fd98 	bl	80002e8 <CPU_SR_Restore>
       *p_err = OS_ERR_PEND_WOULD_BLOCK;                    /* No                                                     */
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	f246 12b0 	movw	r2, #25008	; 0x61b0
 80027be:	801a      	strh	r2, [r3, #0]
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_SEM_PEND_FAILED(OSTCBCurPtr);         /* Record the event.                                      */
#endif
        return ((OS_SEM_CTR)0);
 80027c0:	2300      	movs	r3, #0
 80027c2:	e072      	b.n	80028aa <OSTaskSemPend+0x1ca>
    } else {                                                /* Yes                                                    */
        if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /* Can't pend when the scheduler is locked                */
 80027c4:	4b3d      	ldr	r3, [pc, #244]	; (80028bc <OSTaskSemPend+0x1dc>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d008      	beq.n	80027de <OSTaskSemPend+0xfe>
            CPU_CRITICAL_EXIT();
 80027cc:	6978      	ldr	r0, [r7, #20]
 80027ce:	f7fd fd8b 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
            TRACE_OS_TASK_SEM_PEND_FAILED(OSTCBCurPtr);     /* Record the event.                                      */
#endif
           *p_err = OS_ERR_SCHED_LOCKED;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	f646 5263 	movw	r2, #28003	; 0x6d63
 80027d8:	801a      	strh	r2, [r3, #0]
            return ((OS_SEM_CTR)0);
 80027da:	2300      	movs	r3, #0
 80027dc:	e065      	b.n	80028aa <OSTaskSemPend+0x1ca>
        }
    }
                                                            /* Lock the scheduler/re-enable interrupts                */
    OS_CRITICAL_ENTER_CPU_EXIT();
    OS_Pend((OS_PEND_DATA *)0,                              /* Block task pending on Signal                           */
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2207      	movs	r2, #7
 80027e2:	2100      	movs	r1, #0
 80027e4:	2000      	movs	r0, #0
 80027e6:	f001 f8ef 	bl	80039c8 <OS_Pend>
            (OS_PEND_OBJ  *)0,
            (OS_STATE      )OS_TASK_PEND_ON_TASK_SEM,
            (OS_TICK       )timeout);
    OS_CRITICAL_EXIT_NO_SCHED();
 80027ea:	6978      	ldr	r0, [r7, #20]
 80027ec:	f7fd fd7c 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_TASK_SEM_PEND_BLOCK(OSTCBCurPtr);              /* Record the event.                                      */
#endif
    OSSched();                                              /* Find next highest priority task ready to run           */
 80027f0:	f000 ff7e 	bl	80036f0 <OSSched>

    CPU_CRITICAL_ENTER();
 80027f4:	f7fd fd74 	bl	80002e0 <CPU_SR_Save>
 80027f8:	6178      	str	r0, [r7, #20]
    switch (OSTCBCurPtr->PendStatus) {                      /* See if we timed-out or aborted                         */
 80027fa:	4b2f      	ldr	r3, [pc, #188]	; (80028b8 <OSTaskSemPend+0x1d8>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002802:	2b01      	cmp	r3, #1
 8002804:	d02c      	beq.n	8002860 <OSTaskSemPend+0x180>
 8002806:	2b03      	cmp	r3, #3
 8002808:	d037      	beq.n	800287a <OSTaskSemPend+0x19a>
 800280a:	2b00      	cmp	r3, #0
 800280c:	d140      	bne.n	8002890 <OSTaskSemPend+0x1b0>
        case OS_STATUS_PEND_OK:
             if (p_ts != (CPU_TS *)0) {
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d021      	beq.n	8002858 <OSTaskSemPend+0x178>
                *p_ts                    =  OSTCBCurPtr->TS;
 8002814:	4b28      	ldr	r3, [pc, #160]	; (80028b8 <OSTaskSemPend+0x1d8>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	601a      	str	r2, [r3, #0]
#if OS_CFG_TASK_PROFILE_EN > 0u
                OSTCBCurPtr->SemPendTime = OS_TS_GET() - OSTCBCurPtr->TS;
 800281e:	4b26      	ldr	r3, [pc, #152]	; (80028b8 <OSTaskSemPend+0x1d8>)
 8002820:	681c      	ldr	r4, [r3, #0]
 8002822:	f004 fea3 	bl	800756c <CPU_TS_TmrRd>
 8002826:	4602      	mov	r2, r0
 8002828:	4b23      	ldr	r3, [pc, #140]	; (80028b8 <OSTaskSemPend+0x1d8>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
                if (OSTCBCurPtr->SemPendTimeMax < OSTCBCurPtr->SemPendTime) {
 8002834:	4b20      	ldr	r3, [pc, #128]	; (80028b8 <OSTaskSemPend+0x1d8>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800283c:	4b1e      	ldr	r3, [pc, #120]	; (80028b8 <OSTaskSemPend+0x1d8>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002844:	429a      	cmp	r2, r3
 8002846:	d207      	bcs.n	8002858 <OSTaskSemPend+0x178>
                    OSTCBCurPtr->SemPendTimeMax = OSTCBCurPtr->SemPendTime;
 8002848:	4b1b      	ldr	r3, [pc, #108]	; (80028b8 <OSTaskSemPend+0x1d8>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a1a      	ldr	r2, [pc, #104]	; (80028b8 <OSTaskSemPend+0x1d8>)
 800284e:	6812      	ldr	r2, [r2, #0]
 8002850:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 8002854:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#endif
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_TASK_SEM_PEND(OSTCBCurPtr);           /* Record the event.                                      */
#endif
            *p_err = OS_ERR_NONE;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	2200      	movs	r2, #0
 800285c:	801a      	strh	r2, [r3, #0]
             break;
 800285e:	e01c      	b.n	800289a <OSTaskSemPend+0x1ba>

        case OS_STATUS_PEND_ABORT:
             if (p_ts != (CPU_TS *)0) {
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d004      	beq.n	8002870 <OSTaskSemPend+0x190>
                *p_ts  =  OSTCBCurPtr->TS;
 8002866:	4b14      	ldr	r3, [pc, #80]	; (80028b8 <OSTaskSemPend+0x1d8>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_TASK_SEM_PEND_FAILED(OSTCBCurPtr);    /* Record the event.                                      */
#endif
            *p_err = OS_ERR_PEND_ABORT;                     /* Indicate that we aborted                               */
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	f246 12a9 	movw	r2, #25001	; 0x61a9
 8002876:	801a      	strh	r2, [r3, #0]
             break;
 8002878:	e00f      	b.n	800289a <OSTaskSemPend+0x1ba>

        case OS_STATUS_PEND_TIMEOUT:
             if (p_ts != (CPU_TS *)0) {
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d002      	beq.n	8002886 <OSTaskSemPend+0x1a6>
                *p_ts  = (CPU_TS  )0;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_TASK_SEM_PEND_FAILED(OSTCBCurPtr);    /* Record the event.                                      */
#endif
            *p_err = OS_ERR_TIMEOUT;                        /* Indicate that we didn't get event within TO            */
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	f247 22d9 	movw	r2, #29401	; 0x72d9
 800288c:	801a      	strh	r2, [r3, #0]
             break;
 800288e:	e004      	b.n	800289a <OSTaskSemPend+0x1ba>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_TASK_SEM_PEND_FAILED(OSTCBCurPtr);    /* Record the event.                                      */
#endif
            *p_err = OS_ERR_STATUS_INVALID;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	f646 622e 	movw	r2, #28206	; 0x6e2e
 8002896:	801a      	strh	r2, [r3, #0]
             break;
 8002898:	bf00      	nop
    }
    ctr = OSTCBCurPtr->SemCtr;
 800289a:	4b07      	ldr	r3, [pc, #28]	; (80028b8 <OSTaskSemPend+0x1d8>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a0:	613b      	str	r3, [r7, #16]
    CPU_CRITICAL_EXIT();
 80028a2:	6978      	ldr	r0, [r7, #20]
 80028a4:	f7fd fd20 	bl	80002e8 <CPU_SR_Restore>
    return (ctr);
 80028a8:	693b      	ldr	r3, [r7, #16]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	371c      	adds	r7, #28
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd90      	pop	{r4, r7, pc}
 80028b2:	bf00      	nop
 80028b4:	200026d8 	.word	0x200026d8
 80028b8:	200026ac 	.word	0x200026ac
 80028bc:	20002440 	.word	0x20002440

080028c0 <OSTaskSemPost>:
*/

OS_SEM_CTR  OSTaskSemPost (OS_TCB  *p_tcb,
                           OS_OPT   opt,
                           OS_ERR  *p_err)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	460b      	mov	r3, r1
 80028ca:	607a      	str	r2, [r7, #4]
 80028cc:	817b      	strh	r3, [r7, #10]
        return ((OS_SEM_CTR)0);
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    switch (opt) {                                          /* Validate 'opt'                                         */
 80028ce:	897b      	ldrh	r3, [r7, #10]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d008      	beq.n	80028e6 <OSTaskSemPost+0x26>
 80028d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028d8:	d005      	beq.n	80028e6 <OSTaskSemPost+0x26>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_TASK_SEM_POST_FAILED(p_tcb);          /* Record the event.                                      */
#endif
            *p_err =  OS_ERR_OPT_INVALID;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f645 6225 	movw	r2, #24101	; 0x5e25
 80028e0:	801a      	strh	r2, [r3, #0]
             return ((OS_SEM_CTR)0u);
 80028e2:	2300      	movs	r3, #0
 80028e4:	e00b      	b.n	80028fe <OSTaskSemPost+0x3e>

#if OS_CFG_ARG_CHK_EN > 0u
    switch (opt) {                                          /* Validate 'opt'                                         */
        case OS_OPT_POST_NONE:
        case OS_OPT_POST_NO_SCHED:
             break;
 80028e6:	bf00      	nop
            *p_err =  OS_ERR_OPT_INVALID;
             return ((OS_SEM_CTR)0u);
    }
#endif

    ts = OS_TS_GET();                                       /* Get timestamp                                          */
 80028e8:	f004 fe40 	bl	800756c <CPU_TS_TmrRd>
 80028ec:	6178      	str	r0, [r7, #20]

#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_TASK_SEM_POST(p_tcb);                          /* Record the event.                                      */
#endif

    ctr = OS_TaskSemPost(p_tcb,
 80028ee:	8979      	ldrh	r1, [r7, #10]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f000 fa57 	bl	8002da8 <OS_TaskSemPost>
 80028fa:	6138      	str	r0, [r7, #16]
                         opt,
                         ts,
                         p_err);

    return (ctr);
 80028fc:	693b      	ldr	r3, [r7, #16]
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3718      	adds	r7, #24
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop

08002908 <OSTaskStkChk>:
#if OS_CFG_STAT_TASK_STK_CHK_EN > 0u
void  OSTaskStkChk (OS_TCB        *p_tcb,
                    CPU_STK_SIZE  *p_free,
                    CPU_STK_SIZE  *p_used,
                    OS_ERR        *p_err)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b088      	sub	sp, #32
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
 8002914:	603b      	str	r3, [r7, #0]
    CPU_STK_SIZE  free_stk;
    CPU_STK      *p_stk;
    CPU_SR_ALLOC();
 8002916:	2300      	movs	r3, #0
 8002918:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* See if trying to check stack from ISR                  */
 800291a:	4b35      	ldr	r3, [pc, #212]	; (80029f0 <OSTaskStkChk+0xe8>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d004      	beq.n	800292c <OSTaskStkChk+0x24>
       *p_err = OS_ERR_TASK_STK_CHK_ISR;
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	f247 1259 	movw	r2, #29017	; 0x7159
 8002928:	801a      	strh	r2, [r3, #0]
        return;
 800292a:	e05e      	b.n	80029ea <OSTaskStkChk+0xe2>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_free == (CPU_STK_SIZE*)0) {                       /* User must specify valid destinations for the sizes     */
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d104      	bne.n	800293c <OSTaskStkChk+0x34>
       *p_err  = OS_ERR_PTR_INVALID;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	f246 22d5 	movw	r2, #25301	; 0x62d5
 8002938:	801a      	strh	r2, [r3, #0]
        return;
 800293a:	e056      	b.n	80029ea <OSTaskStkChk+0xe2>
    }

    if (p_used == (CPU_STK_SIZE*)0) {
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d104      	bne.n	800294c <OSTaskStkChk+0x44>
       *p_err  = OS_ERR_PTR_INVALID;
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	f246 22d5 	movw	r2, #25301	; 0x62d5
 8002948:	801a      	strh	r2, [r3, #0]
        return;
 800294a:	e04e      	b.n	80029ea <OSTaskStkChk+0xe2>
    }
#endif

    CPU_CRITICAL_ENTER();
 800294c:	f7fd fcc8 	bl	80002e0 <CPU_SR_Save>
 8002950:	6178      	str	r0, [r7, #20]
    if (p_tcb == (OS_TCB *)0) {                             /* Check the stack of the current task?                   */
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d102      	bne.n	800295e <OSTaskStkChk+0x56>
        p_tcb = OSTCBCurPtr;                                /* Yes                                                    */
 8002958:	4b26      	ldr	r3, [pc, #152]	; (80029f4 <OSTaskStkChk+0xec>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	60fb      	str	r3, [r7, #12]
    }

    if (p_tcb->StkPtr == (CPU_STK*)0) {                     /* Make sure task exist                                   */
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10d      	bne.n	8002982 <OSTaskStkChk+0x7a>
        CPU_CRITICAL_EXIT();
 8002966:	6978      	ldr	r0, [r7, #20]
 8002968:	f7fd fcbe 	bl	80002e8 <CPU_SR_Restore>
       *p_free = (CPU_STK_SIZE)0;
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	2200      	movs	r2, #0
 8002970:	601a      	str	r2, [r3, #0]
       *p_used = (CPU_STK_SIZE)0;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
       *p_err  =  OS_ERR_TASK_NOT_EXIST;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	f247 1252 	movw	r2, #29010	; 0x7152
 800297e:	801a      	strh	r2, [r3, #0]
        return;
 8002980:	e033      	b.n	80029ea <OSTaskStkChk+0xe2>
    }

    if ((p_tcb->Opt & OS_OPT_TASK_STK_CHK) == (OS_OPT)0) {  /* Make sure stack checking option is set                 */
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10d      	bne.n	80029ac <OSTaskStkChk+0xa4>
        CPU_CRITICAL_EXIT();
 8002990:	6978      	ldr	r0, [r7, #20]
 8002992:	f7fd fca9 	bl	80002e8 <CPU_SR_Restore>
       *p_free = (CPU_STK_SIZE)0;
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]
       *p_used = (CPU_STK_SIZE)0;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
       *p_err  =  OS_ERR_TASK_OPT;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	f247 1254 	movw	r2, #29012	; 0x7154
 80029a8:	801a      	strh	r2, [r3, #0]
        return;
 80029aa:	e01e      	b.n	80029ea <OSTaskStkChk+0xe2>
    }
    CPU_CRITICAL_EXIT();
 80029ac:	6978      	ldr	r0, [r7, #20]
 80029ae:	f7fd fc9b 	bl	80002e8 <CPU_SR_Restore>

    free_stk  = 0u;
 80029b2:	2300      	movs	r3, #0
 80029b4:	61fb      	str	r3, [r7, #28]
#if CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO
    p_stk = p_tcb->StkBasePtr;                              /* Start at the lowest memory and go up                   */
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ba:	61bb      	str	r3, [r7, #24]
    while (*p_stk == (CPU_STK)0) {                          /* Compute the number of zero entries on the stk          */
 80029bc:	e005      	b.n	80029ca <OSTaskStkChk+0xc2>
        p_stk++;
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	3304      	adds	r3, #4
 80029c2:	61bb      	str	r3, [r7, #24]
        free_stk++;
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	3301      	adds	r3, #1
 80029c8:	61fb      	str	r3, [r7, #28]
    CPU_CRITICAL_EXIT();

    free_stk  = 0u;
#if CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO
    p_stk = p_tcb->StkBasePtr;                              /* Start at the lowest memory and go up                   */
    while (*p_stk == (CPU_STK)0) {                          /* Compute the number of zero entries on the stk          */
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d0f5      	beq.n	80029be <OSTaskStkChk+0xb6>
    while (*p_stk == (CPU_STK)0) {
        free_stk++;
        p_stk--;
    }
#endif
   *p_free = free_stk;
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	69fa      	ldr	r2, [r7, #28]
 80029d6:	601a      	str	r2, [r3, #0]
   *p_used = (p_tcb->StkSize - free_stk);                   /* Compute number of entries used on the stack            */
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	1ad2      	subs	r2, r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	601a      	str	r2, [r3, #0]
   *p_err  = OS_ERR_NONE;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	2200      	movs	r2, #0
 80029e8:	801a      	strh	r2, [r3, #0]
}
 80029ea:	3720      	adds	r7, #32
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	200026d8 	.word	0x200026d8
 80029f4:	200026ac 	.word	0x200026ac

080029f8 <OSTaskSuspend>:
*/

#if OS_CFG_TASK_SUSPEND_EN > 0u
void   OSTaskSuspend (OS_TCB  *p_tcb,
                      OS_ERR  *p_err)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
    }
#endif

#if (OS_CFG_ISR_POST_DEFERRED_EN   == 0u) && \
    (OS_CFG_CALLED_FROM_ISR_CHK_EN >  0u)
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 8002a02:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <OSTaskSuspend+0x3c>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d004      	beq.n	8002a14 <OSTaskSuspend+0x1c>
       *p_err = OS_ERR_TASK_SUSPEND_ISR;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	f247 125d 	movw	r2, #29021	; 0x715d
 8002a10:	801a      	strh	r2, [r3, #0]
        return;
 8002a12:	e00c      	b.n	8002a2e <OSTaskSuspend+0x36>
    }
#endif

    if (p_tcb == &OSIdleTaskTCB) {                          /* Make sure not suspending the idle task                 */
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a08      	ldr	r2, [pc, #32]	; (8002a38 <OSTaskSuspend+0x40>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d104      	bne.n	8002a26 <OSTaskSuspend+0x2e>
       *p_err = OS_ERR_TASK_SUSPEND_IDLE;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	f247 125b 	movw	r2, #29019	; 0x715b
 8002a22:	801a      	strh	r2, [r3, #0]
        return;
 8002a24:	e003      	b.n	8002a2e <OSTaskSuspend+0x36>
                    (OS_ERR    *)p_err);
        return;
    }
#endif

    OS_TaskSuspend(p_tcb, p_err);
 8002a26:	6839      	ldr	r1, [r7, #0]
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 fa51 	bl	8002ed0 <OS_TaskSuspend>
}
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	200026d8 	.word	0x200026d8
 8002a38:	200027a8 	.word	0x200027a8

08002a3c <OS_TaskDbgListAdd>:
************************************************************************************************************************
*/

#if OS_CFG_DBG_EN > 0u
void  OS_TaskDbgListAdd (OS_TCB  *p_tcb)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
    p_tcb->DbgPrevPtr                = (OS_TCB *)0;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    if (OSTaskDbgListPtr == (OS_TCB *)0) {
 8002a4c:	4b0d      	ldr	r3, [pc, #52]	; (8002a84 <OS_TaskDbgListAdd+0x48>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d104      	bne.n	8002a5e <OS_TaskDbgListAdd+0x22>
        p_tcb->DbgNextPtr            = (OS_TCB *)0;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8002a5c:	e009      	b.n	8002a72 <OS_TaskDbgListAdd+0x36>
    } else {
        p_tcb->DbgNextPtr            =  OSTaskDbgListPtr;
 8002a5e:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <OS_TaskDbgListAdd+0x48>)
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        OSTaskDbgListPtr->DbgPrevPtr =  p_tcb;
 8002a68:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <OS_TaskDbgListAdd+0x48>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    }
    OSTaskDbgListPtr                 =  p_tcb;
 8002a72:	4a04      	ldr	r2, [pc, #16]	; (8002a84 <OS_TaskDbgListAdd+0x48>)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6013      	str	r3, [r2, #0]
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc80      	pop	{r7}
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	200026c0 	.word	0x200026c0

08002a88 <OS_TaskInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TaskInit (OS_ERR  *p_err)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSTaskDbgListPtr = (OS_TCB      *)0;
 8002a90:	4b08      	ldr	r3, [pc, #32]	; (8002ab4 <OS_TaskInit+0x2c>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]
#endif

    OSTaskQty        = (OS_OBJ_QTY   )0;                    /* Clear the number of tasks                              */
 8002a96:	4b08      	ldr	r3, [pc, #32]	; (8002ab8 <OS_TaskInit+0x30>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	801a      	strh	r2, [r3, #0]
    OSTaskCtxSwCtr   = (OS_CTX_SW_CTR)0;                    /* Clear the context switch counter                       */
 8002a9c:	4b07      	ldr	r3, [pc, #28]	; (8002abc <OS_TaskInit+0x34>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]

   *p_err            = OS_ERR_NONE;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	801a      	strh	r2, [r3, #0]
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	200026c0 	.word	0x200026c0
 8002ab8:	200026da 	.word	0x200026da
 8002abc:	200026d4 	.word	0x200026d4

08002ac0 <OS_TaskInitTCB>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TaskInitTCB (OS_TCB  *p_tcb)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
#if OS_CFG_TASK_PROFILE_EN > 0u
    CPU_TS      ts;
#endif


    p_tcb->StkPtr             = (CPU_STK       *)0;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	601a      	str	r2, [r3, #0]
#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u))
    p_tcb->StkLimitPtr        = (CPU_STK       *)0;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	609a      	str	r2, [r3, #8]
#endif

    p_tcb->ExtPtr             = (void          *)0;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	605a      	str	r2, [r3, #4]

    p_tcb->NextPtr            = (OS_TCB        *)0;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	60da      	str	r2, [r3, #12]
    p_tcb->PrevPtr            = (OS_TCB        *)0;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	611a      	str	r2, [r3, #16]

    p_tcb->TickNextPtr        = (OS_TCB        *)0;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	615a      	str	r2, [r3, #20]
    p_tcb->TickPrevPtr        = (OS_TCB        *)0;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	619a      	str	r2, [r3, #24]
    p_tcb->TickListPtr        = (OS_TICK_LIST  *)0;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	61da      	str	r2, [r3, #28]

#if OS_CFG_DBG_EN > 0u
    p_tcb->NamePtr            = (CPU_CHAR      *)((void *)"?Task");
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a56      	ldr	r2, [pc, #344]	; (8002c54 <OS_TaskInitTCB+0x194>)
 8002afc:	621a      	str	r2, [r3, #32]
#endif

#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u))
    p_tcb->StkBasePtr         = (CPU_STK       *)0;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	625a      	str	r2, [r3, #36]	; 0x24
#endif

#if OS_CFG_DBG_EN > 0u
    p_tcb->TaskEntryAddr      = (OS_TASK_PTR    )0;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	629a      	str	r2, [r3, #40]	; 0x28
    p_tcb->TaskEntryArg       = (void          *)0;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif

#if (OS_CFG_PEND_MULTI_EN > 0u)
    p_tcb->PendDataTblPtr     = (OS_PEND_DATA  *)0;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	631a      	str	r2, [r3, #48]	; 0x30
    p_tcb->PendDataTblEntries = (OS_OBJ_QTY     )0u;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
#endif

    p_tcb->TS                 = (CPU_TS         )0u;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	649a      	str	r2, [r3, #72]	; 0x48

#if (OS_MSG_EN > 0u)
    p_tcb->MsgPtr             = (void          *)0;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	659a      	str	r2, [r3, #88]	; 0x58
    p_tcb->MsgSize            = (OS_MSG_SIZE    )0u;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
#endif

#if OS_CFG_TASK_Q_EN > 0u
    OS_MsgQInit(&p_tcb->MsgQ,
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	3360      	adds	r3, #96	; 0x60
 8002b36:	2100      	movs	r1, #0
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 fb5f 	bl	80031fc <OS_MsgQInit>
                (OS_MSG_QTY)0u);
#if OS_CFG_TASK_PROFILE_EN > 0u
    p_tcb->MsgQPendTime       = (CPU_TS         )0u;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	671a      	str	r2, [r3, #112]	; 0x70
    p_tcb->MsgQPendTimeMax    = (CPU_TS         )0u;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	675a      	str	r2, [r3, #116]	; 0x74
#endif
#endif

#if OS_CFG_FLAG_EN > 0u
    p_tcb->FlagsPend          = (OS_FLAGS       )0u;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	67da      	str	r2, [r3, #124]	; 0x7c
    p_tcb->FlagsOpt           = (OS_OPT         )0u;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
    p_tcb->FlagsRdy           = (OS_FLAGS       )0u;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

#if OS_CFG_TASK_REG_TBL_SIZE > 0u
    for (reg_id = 0u; reg_id < OS_CFG_TASK_REG_TBL_SIZE; reg_id++) {
 8002b60:	2300      	movs	r3, #0
 8002b62:	73fb      	strb	r3, [r7, #15]
 8002b64:	e008      	b.n	8002b78 <OS_TaskInitTCB+0xb8>
        p_tcb->RegTbl[reg_id] = (OS_REG)0u;
 8002b66:	7bfa      	ldrb	r2, [r7, #15]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	321e      	adds	r2, #30
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    p_tcb->FlagsOpt           = (OS_OPT         )0u;
    p_tcb->FlagsRdy           = (OS_FLAGS       )0u;
#endif

#if OS_CFG_TASK_REG_TBL_SIZE > 0u
    for (reg_id = 0u; reg_id < OS_CFG_TASK_REG_TBL_SIZE; reg_id++) {
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
 8002b74:	3301      	adds	r3, #1
 8002b76:	73fb      	strb	r3, [r7, #15]
 8002b78:	7bfb      	ldrb	r3, [r7, #15]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0f3      	beq.n	8002b66 <OS_TaskInitTCB+0xa6>
    for (id = 0u; id < OS_CFG_TLS_TBL_SIZE; id++) {
        p_tcb->TLS_Tbl[id]    = (OS_TLS)0;
    }
#endif

    p_tcb->SemCtr             = (OS_SEM_CTR     )0u;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	64da      	str	r2, [r3, #76]	; 0x4c
#if OS_CFG_TASK_PROFILE_EN > 0u
    p_tcb->SemPendTime        = (CPU_TS         )0u;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    p_tcb->SemPendTimeMax     = (CPU_TS         )0u;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#endif

#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u))
    p_tcb->StkSize            = (CPU_STK_SIZE   )0u;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	641a      	str	r2, [r3, #64]	; 0x40
#endif


#if OS_CFG_TASK_SUSPEND_EN > 0u
    p_tcb->SuspendCtr         = (OS_NESTING_CTR )0u;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
#endif

#if OS_CFG_STAT_TASK_STK_CHK_EN > 0u
    p_tcb->StkFree            = (CPU_STK_SIZE   )0u;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    p_tcb->StkUsed            = (CPU_STK_SIZE   )0u;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
#endif

    p_tcb->Opt                = (OS_OPT         )0u;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    p_tcb->TickRemain         = (OS_TICK        )0u;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	651a      	str	r2, [r3, #80]	; 0x50
    p_tcb->TickCtrPrev        = (OS_TICK        )0u;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	655a      	str	r2, [r3, #84]	; 0x54
    p_tcb->TimeQuanta         = (OS_TICK        )0u;
    p_tcb->TimeQuantaCtr      = (OS_TICK        )0u;
#endif

#if OS_CFG_TASK_PROFILE_EN > 0u
    p_tcb->CPUUsage           = (OS_CPU_USAGE   )0u;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    p_tcb->CPUUsageMax        = (OS_CPU_USAGE   )0u;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
    p_tcb->CtxSwCtr           = (OS_CTX_SW_CTR  )0u;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    p_tcb->CyclesDelta        = (CPU_TS         )0u;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    ts                        = OS_TS_GET();                /* Read the current timestamp and save                    */
 8002be6:	f004 fcc1 	bl	800756c <CPU_TS_TmrRd>
 8002bea:	60b8      	str	r0, [r7, #8]
    p_tcb->CyclesStart        = ts;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68ba      	ldr	r2, [r7, #8]
 8002bf0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    p_tcb->CyclesTotal        = (OS_CYCLES      )0u;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif
#ifdef CPU_CFG_INT_DIS_MEAS_EN
    p_tcb->IntDisTimeMax      = (CPU_TS         )0u;
#endif
#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
    p_tcb->SchedLockTimeMax   = (CPU_TS         )0u;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
#endif

    p_tcb->PendOn             = (OS_STATE       )OS_TASK_PEND_ON_NOTHING;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    p_tcb->PendStatus         = (OS_STATUS      )OS_STATUS_PEND_OK;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    p_tcb->TaskState          = (OS_STATE       )OS_TASK_STATE_RDY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

    p_tcb->Prio               = (OS_PRIO        )OS_PRIO_INIT;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
#if OS_CFG_MUTEX_EN > 0u
    p_tcb->BasePrio           = (OS_PRIO        )OS_PRIO_INIT;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2220      	movs	r2, #32
 8002c28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    p_tcb->MutexGrpHeadPtr    = (OS_MUTEX      *)0;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	63da      	str	r2, [r3, #60]	; 0x3c
#endif

#if OS_CFG_DBG_EN > 0u
    p_tcb->DbgPrevPtr         = (OS_TCB        *)0;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    p_tcb->DbgNextPtr         = (OS_TCB        *)0;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    p_tcb->DbgNamePtr         = (CPU_CHAR      *)((void *)" ");
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a04      	ldr	r2, [pc, #16]	; (8002c58 <OS_TaskInitTCB+0x198>)
 8002c46:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
#endif
}
 8002c4a:	bf00      	nop
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	0800e4dc 	.word	0x0800e4dc
 8002c58:	0800e4e4 	.word	0x0800e4e4

08002c5c <OS_TaskResume>:
*/

#if OS_CFG_TASK_SUSPEND_EN > 0u
void  OS_TaskResume (OS_TCB  *p_tcb,
                     OS_ERR  *p_err)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
    CPU_SR_ALLOC();
 8002c66:	2300      	movs	r3, #0
 8002c68:	60fb      	str	r3, [r7, #12]


    CPU_CRITICAL_ENTER();
 8002c6a:	f7fd fb39 	bl	80002e0 <CPU_SR_Save>
 8002c6e:	60f8      	str	r0, [r7, #12]
   *p_err  = OS_ERR_NONE;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	2200      	movs	r2, #0
 8002c74:	801a      	strh	r2, [r3, #0]
    switch (p_tcb->TaskState) {
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002c7c:	2b07      	cmp	r3, #7
 8002c7e:	d872      	bhi.n	8002d66 <OS_TaskResume+0x10a>
 8002c80:	a201      	add	r2, pc, #4	; (adr r2, 8002c88 <OS_TaskResume+0x2c>)
 8002c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c86:	bf00      	nop
 8002c88:	08002ca9 	.word	0x08002ca9
 8002c8c:	08002ca9 	.word	0x08002ca9
 8002c90:	08002ca9 	.word	0x08002ca9
 8002c94:	08002ca9 	.word	0x08002ca9
 8002c98:	08002cb9 	.word	0x08002cb9
 8002c9c:	08002ce9 	.word	0x08002ce9
 8002ca0:	08002d13 	.word	0x08002d13
 8002ca4:	08002d3d 	.word	0x08002d3d
        case OS_TASK_STATE_RDY:
        case OS_TASK_STATE_DLY:
        case OS_TASK_STATE_PEND:
        case OS_TASK_STATE_PEND_TIMEOUT:
             CPU_CRITICAL_EXIT();
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f7fd fb1d 	bl	80002e8 <CPU_SR_Restore>
            *p_err = OS_ERR_TASK_NOT_SUSPENDED;
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	f247 1253 	movw	r2, #29011	; 0x7153
 8002cb4:	801a      	strh	r2, [r3, #0]
             break;
 8002cb6:	e05e      	b.n	8002d76 <OS_TaskResume+0x11a>

        case OS_TASK_STATE_SUSPENDED:
             OS_CRITICAL_ENTER_CPU_EXIT();
             p_tcb->SuspendCtr--;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             if (p_tcb->SuspendCtr == (OS_NESTING_CTR)0) {
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d106      	bne.n	8002ce0 <OS_TaskResume+0x84>
                 p_tcb->TaskState = OS_TASK_STATE_RDY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                 OS_RdyListInsert(p_tcb);                            /* Insert the task in the ready list                      */
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f001 f960 	bl	8003fa0 <OS_RdyListInsert>
             }
             OS_CRITICAL_EXIT_NO_SCHED();
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f7fd fb01 	bl	80002e8 <CPU_SR_Restore>
             break;
 8002ce6:	e046      	b.n	8002d76 <OS_TaskResume+0x11a>

        case OS_TASK_STATE_DLY_SUSPENDED:
             p_tcb->SuspendCtr--;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             if (p_tcb->SuspendCtr == (OS_NESTING_CTR)0) {
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d103      	bne.n	8002d0a <OS_TaskResume+0xae>
                 p_tcb->TaskState = OS_TASK_STATE_DLY;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             }
             CPU_CRITICAL_EXIT();
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f7fd faec 	bl	80002e8 <CPU_SR_Restore>
             break;
 8002d10:	e031      	b.n	8002d76 <OS_TaskResume+0x11a>

        case OS_TASK_STATE_PEND_SUSPENDED:
             p_tcb->SuspendCtr--;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             if (p_tcb->SuspendCtr == (OS_NESTING_CTR)0) {
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d103      	bne.n	8002d34 <OS_TaskResume+0xd8>
                 p_tcb->TaskState = OS_TASK_STATE_PEND;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2202      	movs	r2, #2
 8002d30:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             }
             CPU_CRITICAL_EXIT();
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f7fd fad7 	bl	80002e8 <CPU_SR_Restore>
             break;
 8002d3a:	e01c      	b.n	8002d76 <OS_TaskResume+0x11a>

        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             p_tcb->SuspendCtr--;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8002d42:	3b01      	subs	r3, #1
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             if (p_tcb->SuspendCtr == (OS_NESTING_CTR)0) {
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d103      	bne.n	8002d5e <OS_TaskResume+0x102>
                 p_tcb->TaskState = OS_TASK_STATE_PEND_TIMEOUT;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2203      	movs	r2, #3
 8002d5a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             }
             CPU_CRITICAL_EXIT();
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f7fd fac2 	bl	80002e8 <CPU_SR_Restore>
             break;
 8002d64:	e007      	b.n	8002d76 <OS_TaskResume+0x11a>

        default:
             CPU_CRITICAL_EXIT();
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f7fd fabe 	bl	80002e8 <CPU_SR_Restore>
            *p_err = OS_ERR_STATE_INVALID;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	f646 622d 	movw	r2, #28205	; 0x6e2d
 8002d72:	801a      	strh	r2, [r3, #0]
             return;
 8002d74:	e001      	b.n	8002d7a <OS_TaskResume+0x11e>
    }

    OSSched();
 8002d76:	f000 fcbb 	bl	80036f0 <OSSched>
}
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <OS_TaskReturn>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TaskReturn (void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
    OS_ERR  err;



    OSTaskReturnHook(OSTCBCurPtr);                          /* Call hook to let user decide on what to do             */
 8002d86:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <OS_TaskReturn+0x20>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f003 f8c0 	bl	8005f10 <OSTaskReturnHook>
#if OS_CFG_TASK_DEL_EN > 0u
    OSTaskDel((OS_TCB *)0,                                  /* Delete task if it accidentally returns!                */
              (OS_ERR *)&err);
#else
    for (;;) {
        OSTimeDly((OS_TICK )OSCfg_TickRate_Hz,
 8002d90:	4b04      	ldr	r3, [pc, #16]	; (8002da4 <OS_TaskReturn+0x24>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	1dba      	adds	r2, r7, #6
 8002d96:	2100      	movs	r1, #0
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f002 f933 	bl	8005004 <OSTimeDly>
                  (OS_OPT  )OS_OPT_TIME_DLY,
                  (OS_ERR *)&err);
    }
 8002d9e:	e7f7      	b.n	8002d90 <OS_TaskReturn+0x10>
 8002da0:	200026ac 	.word	0x200026ac
 8002da4:	0800e614 	.word	0x0800e614

08002da8 <OS_TaskSemPost>:

OS_SEM_CTR  OS_TaskSemPost (OS_TCB  *p_tcb,
                            OS_OPT   opt,
                            CPU_TS   ts,
                            OS_ERR  *p_err)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b088      	sub	sp, #32
 8002dac:	af02      	add	r7, sp, #8
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	607a      	str	r2, [r7, #4]
 8002db2:	603b      	str	r3, [r7, #0]
 8002db4:	460b      	mov	r3, r1
 8002db6:	817b      	strh	r3, [r7, #10]
    OS_SEM_CTR  ctr;
    CPU_SR_ALLOC();
 8002db8:	2300      	movs	r3, #0
 8002dba:	613b      	str	r3, [r7, #16]



    OS_CRITICAL_ENTER();
 8002dbc:	f7fd fa90 	bl	80002e0 <CPU_SR_Save>
 8002dc0:	6138      	str	r0, [r7, #16]
    if (p_tcb == (OS_TCB *)0) {                             /* Post signal to 'self'?                                 */
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d102      	bne.n	8002dce <OS_TaskSemPost+0x26>
        p_tcb = OSTCBCurPtr;
 8002dc8:	4b40      	ldr	r3, [pc, #256]	; (8002ecc <OS_TaskSemPost+0x124>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	60fb      	str	r3, [r7, #12]
    }
    p_tcb->TS = ts;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	649a      	str	r2, [r3, #72]	; 0x48
   *p_err     = OS_ERR_NONE;                                /* Assume we won't have any errors                        */
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	801a      	strh	r2, [r3, #0]
    switch (p_tcb->TaskState) {
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002de0:	2b07      	cmp	r3, #7
 8002de2:	d863      	bhi.n	8002eac <OS_TaskSemPost+0x104>
 8002de4:	a201      	add	r2, pc, #4	; (adr r2, 8002dec <OS_TaskSemPost+0x44>)
 8002de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dea:	bf00      	nop
 8002dec:	08002e0d 	.word	0x08002e0d
 8002df0:	08002e0d 	.word	0x08002e0d
 8002df4:	08002e43 	.word	0x08002e43
 8002df8:	08002e43 	.word	0x08002e43
 8002dfc:	08002e0d 	.word	0x08002e0d
 8002e00:	08002e0d 	.word	0x08002e0d
 8002e04:	08002e43 	.word	0x08002e43
 8002e08:	08002e43 	.word	0x08002e43
                          return ((OS_SEM_CTR)0);
                      }
                      break;

                 case 4u:
                      if (p_tcb->SemCtr == DEF_INT_32U_MAX_VAL) {
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e14:	d108      	bne.n	8002e28 <OS_TaskSemPost+0x80>
                          OS_CRITICAL_EXIT();
 8002e16:	6938      	ldr	r0, [r7, #16]
 8002e18:	f7fd fa66 	bl	80002e8 <CPU_SR_Restore>
                         *p_err = OS_ERR_SEM_OVF;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	f646 52c5 	movw	r2, #28101	; 0x6dc5
 8002e22:	801a      	strh	r2, [r3, #0]
                          return ((OS_SEM_CTR)0);
 8002e24:	2300      	movs	r3, #0
 8002e26:	e04d      	b.n	8002ec4 <OS_TaskSemPost+0x11c>
                      }
                      break;
 8002e28:	bf00      	nop

                 default:
                      break;
             }
             p_tcb->SemCtr++;                               /* Task signaled is not pending on anything               */
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e2e:	1c5a      	adds	r2, r3, #1
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	64da      	str	r2, [r3, #76]	; 0x4c
             ctr = p_tcb->SemCtr;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e38:	617b      	str	r3, [r7, #20]
             OS_CRITICAL_EXIT();
 8002e3a:	6938      	ldr	r0, [r7, #16]
 8002e3c:	f7fd fa54 	bl	80002e8 <CPU_SR_Restore>
             break;
 8002e40:	e03f      	b.n	8002ec2 <OS_TaskSemPost+0x11a>

        case OS_TASK_STATE_PEND:
        case OS_TASK_STATE_PEND_TIMEOUT:
        case OS_TASK_STATE_PEND_SUSPENDED:
        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             if (p_tcb->PendOn == OS_TASK_PEND_ON_TASK_SEM) {   /* Is task signaled waiting for a signal?             */
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e48:	2b07      	cmp	r3, #7
 8002e4a:	d114      	bne.n	8002e76 <OS_TaskSemPost+0xce>
                 OS_Post((OS_PEND_OBJ *)0,                      /*      Task is pending on signal                     */
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	2300      	movs	r3, #0
 8002e52:	2200      	movs	r2, #0
 8002e54:	68f9      	ldr	r1, [r7, #12]
 8002e56:	2000      	movs	r0, #0
 8002e58:	f000 ffb6 	bl	8003dc8 <OS_Post>
                         (OS_TCB      *)p_tcb,
                         (void        *)0,
                         (OS_MSG_SIZE  )0u,
                         (CPU_TS       )ts);
                 ctr = p_tcb->SemCtr;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e60:	617b      	str	r3, [r7, #20]
                 OS_CRITICAL_EXIT_NO_SCHED();
 8002e62:	6938      	ldr	r0, [r7, #16]
 8002e64:	f7fd fa40 	bl	80002e8 <CPU_SR_Restore>
                 if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0) {
 8002e68:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	db27      	blt.n	8002ec0 <OS_TaskSemPost+0x118>
                     OSSched();                                 /* Run the scheduler                                  */
 8002e70:	f000 fc3e 	bl	80036f0 <OSSched>
                 }
                 p_tcb->SemCtr++;                           /* No,  Task signaled is NOT pending on semaphore ...     */
                 ctr = p_tcb->SemCtr;                       /*      ... it must be waiting on something else          */
                 OS_CRITICAL_EXIT();
             }
             break;
 8002e74:	e024      	b.n	8002ec0 <OS_TaskSemPost+0x118>
                              return ((OS_SEM_CTR)0);
                          }
                          break;

                     case 4u:
                          if (p_tcb->SemCtr == DEF_INT_32U_MAX_VAL) {
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7e:	d108      	bne.n	8002e92 <OS_TaskSemPost+0xea>
                              OS_CRITICAL_EXIT();
 8002e80:	6938      	ldr	r0, [r7, #16]
 8002e82:	f7fd fa31 	bl	80002e8 <CPU_SR_Restore>
                             *p_err = OS_ERR_SEM_OVF;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	f646 52c5 	movw	r2, #28101	; 0x6dc5
 8002e8c:	801a      	strh	r2, [r3, #0]
                              return ((OS_SEM_CTR)0);
 8002e8e:	2300      	movs	r3, #0
 8002e90:	e018      	b.n	8002ec4 <OS_TaskSemPost+0x11c>
                          }
                          break;
 8002e92:	bf00      	nop

                     default:
                          break;
                 }
                 p_tcb->SemCtr++;                           /* No,  Task signaled is NOT pending on semaphore ...     */
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e98:	1c5a      	adds	r2, r3, #1
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	64da      	str	r2, [r3, #76]	; 0x4c
                 ctr = p_tcb->SemCtr;                       /*      ... it must be waiting on something else          */
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea2:	617b      	str	r3, [r7, #20]
                 OS_CRITICAL_EXIT();
 8002ea4:	6938      	ldr	r0, [r7, #16]
 8002ea6:	f7fd fa1f 	bl	80002e8 <CPU_SR_Restore>
             }
             break;
 8002eaa:	e009      	b.n	8002ec0 <OS_TaskSemPost+0x118>

        default:
             OS_CRITICAL_EXIT();
 8002eac:	6938      	ldr	r0, [r7, #16]
 8002eae:	f7fd fa1b 	bl	80002e8 <CPU_SR_Restore>
            *p_err = OS_ERR_STATE_INVALID;
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	f646 622d 	movw	r2, #28205	; 0x6e2d
 8002eb8:	801a      	strh	r2, [r3, #0]
             ctr   = (OS_SEM_CTR)0;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	617b      	str	r3, [r7, #20]
             break;
 8002ebe:	e000      	b.n	8002ec2 <OS_TaskSemPost+0x11a>
                 }
                 p_tcb->SemCtr++;                           /* No,  Task signaled is NOT pending on semaphore ...     */
                 ctr = p_tcb->SemCtr;                       /*      ... it must be waiting on something else          */
                 OS_CRITICAL_EXIT();
             }
             break;
 8002ec0:	bf00      	nop
             OS_CRITICAL_EXIT();
            *p_err = OS_ERR_STATE_INVALID;
             ctr   = (OS_SEM_CTR)0;
             break;
    }
    return (ctr);
 8002ec2:	697b      	ldr	r3, [r7, #20]
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3718      	adds	r7, #24
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	200026ac 	.word	0x200026ac

08002ed0 <OS_TaskSuspend>:
*/

#if OS_CFG_TASK_SUSPEND_EN > 0u
void  OS_TaskSuspend (OS_TCB  *p_tcb,
                      OS_ERR  *p_err)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
    CPU_SR_ALLOC();
 8002eda:	2300      	movs	r3, #0
 8002edc:	60fb      	str	r3, [r7, #12]


    CPU_CRITICAL_ENTER();
 8002ede:	f7fd f9ff 	bl	80002e0 <CPU_SR_Save>
 8002ee2:	60f8      	str	r0, [r7, #12]
    if (p_tcb == (OS_TCB *)0) {                             /* See if specified to suspend self                       */
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d102      	bne.n	8002ef0 <OS_TaskSuspend+0x20>
        p_tcb = OSTCBCurPtr;
 8002eea:	4b3d      	ldr	r3, [pc, #244]	; (8002fe0 <OS_TaskSuspend+0x110>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	607b      	str	r3, [r7, #4]
    }

    if (p_tcb == OSTCBCurPtr) {
 8002ef0:	4b3b      	ldr	r3, [pc, #236]	; (8002fe0 <OS_TaskSuspend+0x110>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d10b      	bne.n	8002f12 <OS_TaskSuspend+0x42>
        if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /* Can't suspend when the scheduler is locked             */
 8002efa:	4b3a      	ldr	r3, [pc, #232]	; (8002fe4 <OS_TaskSuspend+0x114>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d007      	beq.n	8002f12 <OS_TaskSuspend+0x42>
            CPU_CRITICAL_EXIT();
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f7fd f9f0 	bl	80002e8 <CPU_SR_Restore>
           *p_err = OS_ERR_SCHED_LOCKED;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	f646 5263 	movw	r2, #28003	; 0x6d63
 8002f0e:	801a      	strh	r2, [r3, #0]
            return;
 8002f10:	e063      	b.n	8002fda <OS_TaskSuspend+0x10a>
        }
    }

   *p_err = OS_ERR_NONE;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	2200      	movs	r2, #0
 8002f16:	801a      	strh	r2, [r3, #0]
    switch (p_tcb->TaskState) {
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002f1e:	2b07      	cmp	r3, #7
 8002f20:	d851      	bhi.n	8002fc6 <OS_TaskSuspend+0xf6>
 8002f22:	a201      	add	r2, pc, #4	; (adr r2, 8002f28 <OS_TaskSuspend+0x58>)
 8002f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f28:	08002f49 	.word	0x08002f49
 8002f2c:	08002f67 	.word	0x08002f67
 8002f30:	08002f7f 	.word	0x08002f7f
 8002f34:	08002f97 	.word	0x08002f97
 8002f38:	08002faf 	.word	0x08002faf
 8002f3c:	08002faf 	.word	0x08002faf
 8002f40:	08002faf 	.word	0x08002faf
 8002f44:	08002faf 	.word	0x08002faf
        case OS_TASK_STATE_RDY:
             OS_CRITICAL_ENTER_CPU_EXIT();
             p_tcb->TaskState  =  OS_TASK_STATE_SUSPENDED;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2204      	movs	r2, #4
 8002f4c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             p_tcb->SuspendCtr = (OS_NESTING_CTR)1;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             OS_RdyListRemove(p_tcb);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f001 f8bf 	bl	80040dc <OS_RdyListRemove>
             OS_CRITICAL_EXIT_NO_SCHED();
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f7fd f9c2 	bl	80002e8 <CPU_SR_Restore>
             break;
 8002f64:	e037      	b.n	8002fd6 <OS_TaskSuspend+0x106>

        case OS_TASK_STATE_DLY:
             p_tcb->TaskState  = OS_TASK_STATE_DLY_SUSPENDED;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2205      	movs	r2, #5
 8002f6a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             p_tcb->SuspendCtr = (OS_NESTING_CTR)1;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             CPU_CRITICAL_EXIT();
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f7fd f9b6 	bl	80002e8 <CPU_SR_Restore>
             break;
 8002f7c:	e02b      	b.n	8002fd6 <OS_TaskSuspend+0x106>

        case OS_TASK_STATE_PEND:
             p_tcb->TaskState  = OS_TASK_STATE_PEND_SUSPENDED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2206      	movs	r2, #6
 8002f82:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             p_tcb->SuspendCtr = (OS_NESTING_CTR)1;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             CPU_CRITICAL_EXIT();
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f7fd f9aa 	bl	80002e8 <CPU_SR_Restore>
             break;
 8002f94:	e01f      	b.n	8002fd6 <OS_TaskSuspend+0x106>

        case OS_TASK_STATE_PEND_TIMEOUT:
             p_tcb->TaskState  = OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2207      	movs	r2, #7
 8002f9a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             p_tcb->SuspendCtr = (OS_NESTING_CTR)1;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             CPU_CRITICAL_EXIT();
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f7fd f99e 	bl	80002e8 <CPU_SR_Restore>
             break;
 8002fac:	e013      	b.n	8002fd6 <OS_TaskSuspend+0x106>

        case OS_TASK_STATE_SUSPENDED:
        case OS_TASK_STATE_DLY_SUSPENDED:
        case OS_TASK_STATE_PEND_SUSPENDED:
        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             p_tcb->SuspendCtr++;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
             CPU_CRITICAL_EXIT();
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f7fd f992 	bl	80002e8 <CPU_SR_Restore>
             break;
 8002fc4:	e007      	b.n	8002fd6 <OS_TaskSuspend+0x106>

        default:
             CPU_CRITICAL_EXIT();
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f7fd f98e 	bl	80002e8 <CPU_SR_Restore>
            *p_err = OS_ERR_STATE_INVALID;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	f646 622d 	movw	r2, #28205	; 0x6e2d
 8002fd2:	801a      	strh	r2, [r3, #0]
             return;
 8002fd4:	e001      	b.n	8002fda <OS_TaskSuspend+0x10a>
    }

    OSSched();
 8002fd6:	f000 fb8b 	bl	80036f0 <OSSched>
}
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	200026ac 	.word	0x200026ac
 8002fe4:	20002440 	.word	0x20002440

08002fe8 <OS_TaskChangePrio>:
************************************************************************************************************************
*/

void  OS_TaskChangePrio(OS_TCB  *p_tcb,
                        OS_PRIO  prio_new)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	70fb      	strb	r3, [r7, #3]
    OS_PRIO  prio_cur;
#endif


    do {
        p_tcb_owner = (OS_TCB *)0;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	60fb      	str	r3, [r7, #12]
#if OS_CFG_MUTEX_EN > 0
        prio_cur    = p_tcb->Prio;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002ffe:	72fb      	strb	r3, [r7, #11]
#endif
        switch (p_tcb->TaskState) {
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003006:	2b07      	cmp	r3, #7
 8003008:	f200 808c 	bhi.w	8003124 <OS_TaskChangePrio+0x13c>
 800300c:	a201      	add	r2, pc, #4	; (adr r2, 8003014 <OS_TaskChangePrio+0x2c>)
 800300e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003012:	bf00      	nop
 8003014:	08003035 	.word	0x08003035
 8003018:	08003069 	.word	0x08003069
 800301c:	08003073 	.word	0x08003073
 8003020:	08003073 	.word	0x08003073
 8003024:	08003069 	.word	0x08003069
 8003028:	08003069 	.word	0x08003069
 800302c:	08003073 	.word	0x08003073
 8003030:	08003073 	.word	0x08003073
            case OS_TASK_STATE_RDY:
                 OS_RdyListRemove(p_tcb);                   /* Remove from current priority                           */
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f001 f851 	bl	80040dc <OS_RdyListRemove>
                 p_tcb->Prio = prio_new;                    /* Set new task priority                                  */
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	78fa      	ldrb	r2, [r7, #3]
 800303e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                 OS_PrioInsert(p_tcb->Prio);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8003048:	4618      	mov	r0, r3
 800304a:	f001 ff8d 	bl	8004f68 <OS_PrioInsert>
                 if (p_tcb == OSTCBCurPtr) {
 800304e:	4b37      	ldr	r3, [pc, #220]	; (800312c <OS_TaskChangePrio+0x144>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	429a      	cmp	r2, r3
 8003056:	d103      	bne.n	8003060 <OS_TaskChangePrio+0x78>
                     OS_RdyListInsertHead(p_tcb);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 ffbf 	bl	8003fdc <OS_RdyListInsertHead>
                 } else {
                     OS_RdyListInsertTail(p_tcb);
                 }
                 break;
 800305e:	e05a      	b.n	8003116 <OS_TaskChangePrio+0x12e>
                 p_tcb->Prio = prio_new;                    /* Set new task priority                                  */
                 OS_PrioInsert(p_tcb->Prio);
                 if (p_tcb == OSTCBCurPtr) {
                     OS_RdyListInsertHead(p_tcb);
                 } else {
                     OS_RdyListInsertTail(p_tcb);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 fffb 	bl	800405c <OS_RdyListInsertTail>
                 }
                 break;
 8003066:	e056      	b.n	8003116 <OS_TaskChangePrio+0x12e>

            case OS_TASK_STATE_DLY:                         /* Nothing to do except change the priority in the OS_TCB */
            case OS_TASK_STATE_SUSPENDED:
            case OS_TASK_STATE_DLY_SUSPENDED:
                 p_tcb->Prio = prio_new;                    /* Set new task priority                                  */
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	78fa      	ldrb	r2, [r7, #3]
 800306c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                 break;
 8003070:	e051      	b.n	8003116 <OS_TaskChangePrio+0x12e>

            case OS_TASK_STATE_PEND:
            case OS_TASK_STATE_PEND_TIMEOUT:
            case OS_TASK_STATE_PEND_SUSPENDED:
            case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
                 p_tcb->Prio = prio_new;                    /* Set new task priority                                  */
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	78fa      	ldrb	r2, [r7, #3]
 8003076:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                 switch (p_tcb->PendOn) {                   /* What to do depends on what we are pending on           */
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003080:	3b01      	subs	r3, #1
 8003082:	2b05      	cmp	r3, #5
 8003084:	d843      	bhi.n	800310e <OS_TaskChangePrio+0x126>
 8003086:	a201      	add	r2, pc, #4	; (adr r2, 800308c <OS_TaskChangePrio+0xa4>)
 8003088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800308c:	080030a5 	.word	0x080030a5
 8003090:	0800310f 	.word	0x0800310f
 8003094:	080030a5 	.word	0x080030a5
 8003098:	080030ad 	.word	0x080030ad
 800309c:	080030a5 	.word	0x080030a5
 80030a0:	080030a5 	.word	0x080030a5
                     case OS_TASK_PEND_ON_FLAG:
                     case OS_TASK_PEND_ON_MULTI:
                     case OS_TASK_PEND_ON_Q:
                     case OS_TASK_PEND_ON_SEM:
                          OS_PendListChangePrio(p_tcb);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 fd69 	bl	8003b7c <OS_PendListChangePrio>
                          break;
 80030aa:	e033      	b.n	8003114 <OS_TaskChangePrio+0x12c>

                     case OS_TASK_PEND_ON_MUTEX:
#if OS_CFG_MUTEX_EN > 0
                          OS_PendListChangePrio(p_tcb);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 fd65 	bl	8003b7c <OS_PendListChangePrio>
                          p_tcb_owner = ((OS_MUTEX *)p_tcb->PendDataTblPtr->PendObjPtr)->OwnerTCBPtr;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	60fb      	str	r3, [r7, #12]
                          if (prio_cur > prio_new) {         /* Are we increasing the priority?                        */
 80030bc:	7afa      	ldrb	r2, [r7, #11]
 80030be:	78fb      	ldrb	r3, [r7, #3]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d908      	bls.n	80030d6 <OS_TaskChangePrio+0xee>
                              if (p_tcb_owner->Prio <= prio_new) {/* Yes, do we need to give this prio to the owner?   */
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80030ca:	78fa      	ldrb	r2, [r7, #3]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d320      	bcc.n	8003112 <OS_TaskChangePrio+0x12a>
                                  p_tcb_owner = (OS_TCB *)0;
 80030d0:	2300      	movs	r3, #0
 80030d2:	60fb      	str	r3, [r7, #12]
#endif
                                  }
                              }
                          }
#endif
                         break;
 80030d4:	e01d      	b.n	8003112 <OS_TaskChangePrio+0x12a>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
                                 TRACE_OS_MUTEX_TASK_PRIO_INHERIT(p_tcb_owner, prio_new);
#endif
                              }
                          } else {
                              if (p_tcb_owner->Prio == prio_cur) {/* No, is it required to check for a lower prio?     */
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80030dc:	7afa      	ldrb	r2, [r7, #11]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d117      	bne.n	8003112 <OS_TaskChangePrio+0x12a>
                                  prio_new = OS_MutexGrpPrioFindHighest(p_tcb_owner);
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f002 fada 	bl	800569c <OS_MutexGrpPrioFindHighest>
 80030e8:	4603      	mov	r3, r0
 80030ea:	70fb      	strb	r3, [r7, #3]
                                  prio_new = prio_new > p_tcb_owner->BasePrio ? p_tcb_owner->BasePrio : prio_new;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80030f2:	78fb      	ldrb	r3, [r7, #3]
 80030f4:	4293      	cmp	r3, r2
 80030f6:	bf28      	it	cs
 80030f8:	4613      	movcs	r3, r2
 80030fa:	70fb      	strb	r3, [r7, #3]
                                  if (prio_new == p_tcb_owner->Prio) {
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8003102:	78fa      	ldrb	r2, [r7, #3]
 8003104:	429a      	cmp	r2, r3
 8003106:	d104      	bne.n	8003112 <OS_TaskChangePrio+0x12a>
                                      p_tcb_owner = (OS_TCB *)0;
 8003108:	2300      	movs	r3, #0
 800310a:	60fb      	str	r3, [r7, #12]
#endif
                                  }
                              }
                          }
#endif
                         break;
 800310c:	e001      	b.n	8003112 <OS_TaskChangePrio+0x12a>

                     case OS_TASK_PEND_ON_TASK_Q:
                     case OS_TASK_PEND_ON_TASK_SEM:
                     default:
                          break;
 800310e:	bf00      	nop
 8003110:	e000      	b.n	8003114 <OS_TaskChangePrio+0x12c>
#endif
                                  }
                              }
                          }
#endif
                         break;
 8003112:	bf00      	nop
                     case OS_TASK_PEND_ON_TASK_Q:
                     case OS_TASK_PEND_ON_TASK_SEM:
                     default:
                          break;
                 }
                 break;
 8003114:	bf00      	nop

            default:
                 return;
        }
        p_tcb = p_tcb_owner;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	607b      	str	r3, [r7, #4]
    } while (p_tcb != (OS_TCB *)0);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	f47f af69 	bne.w	8002ff4 <OS_TaskChangePrio+0xc>
 8003122:	e000      	b.n	8003126 <OS_TaskChangePrio+0x13e>
                          break;
                 }
                 break;

            default:
                 return;
 8003124:	bf00      	nop
        }
        p_tcb = p_tcb_owner;
    } while (p_tcb != (OS_TCB *)0);
}
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	200026ac 	.word	0x200026ac

08003130 <OS_MsgPoolInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MsgPoolInit (OS_ERR  *p_err)
{
 8003130:	b480      	push	{r7}
 8003132:	b087      	sub	sp, #28
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (OSCfg_MsgPoolBasePtr == (OS_MSG *)0) {
 8003138:	4b2d      	ldr	r3, [pc, #180]	; (80031f0 <OS_MsgPoolInit+0xc0>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d104      	bne.n	800314a <OS_MsgPoolInit+0x1a>
       *p_err = OS_ERR_MSG_POOL_NULL_PTR;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f245 721e 	movw	r2, #22302	; 0x571e
 8003146:	801a      	strh	r2, [r3, #0]
        return;
 8003148:	e04e      	b.n	80031e8 <OS_MsgPoolInit+0xb8>
    }
    if (OSCfg_MsgPoolSize == (OS_MSG_QTY)0) {
 800314a:	4b2a      	ldr	r3, [pc, #168]	; (80031f4 <OS_MsgPoolInit+0xc4>)
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d104      	bne.n	800315c <OS_MsgPoolInit+0x2c>
       *p_err = OS_ERR_MSG_POOL_EMPTY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f245 721d 	movw	r2, #22301	; 0x571d
 8003158:	801a      	strh	r2, [r3, #0]
        return;
 800315a:	e045      	b.n	80031e8 <OS_MsgPoolInit+0xb8>
    }
#endif

    p_msg1 = OSCfg_MsgPoolBasePtr;
 800315c:	4b24      	ldr	r3, [pc, #144]	; (80031f0 <OS_MsgPoolInit+0xc0>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	617b      	str	r3, [r7, #20]
    p_msg2 = OSCfg_MsgPoolBasePtr;
 8003162:	4b23      	ldr	r3, [pc, #140]	; (80031f0 <OS_MsgPoolInit+0xc0>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	613b      	str	r3, [r7, #16]
    p_msg2++;
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	3310      	adds	r3, #16
 800316c:	613b      	str	r3, [r7, #16]
    loops  = OSCfg_MsgPoolSize - 1u;
 800316e:	4b21      	ldr	r3, [pc, #132]	; (80031f4 <OS_MsgPoolInit+0xc4>)
 8003170:	881b      	ldrh	r3, [r3, #0]
 8003172:	3b01      	subs	r3, #1
 8003174:	81bb      	strh	r3, [r7, #12]
    for (i = 0u; i < loops; i++) {                          /* Init. list of free OS_MSGs                             */
 8003176:	2300      	movs	r3, #0
 8003178:	81fb      	strh	r3, [r7, #14]
 800317a:	e014      	b.n	80031a6 <OS_MsgPoolInit+0x76>
        p_msg1->NextPtr = p_msg2;
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	601a      	str	r2, [r3, #0]
        p_msg1->MsgPtr  = (void      *)0;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	2200      	movs	r2, #0
 8003186:	605a      	str	r2, [r3, #4]
        p_msg1->MsgSize = (OS_MSG_SIZE)0u;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	2200      	movs	r2, #0
 800318c:	811a      	strh	r2, [r3, #8]
        p_msg1->MsgTS   = (CPU_TS     )0u;
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	2200      	movs	r2, #0
 8003192:	60da      	str	r2, [r3, #12]
        p_msg1++;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	3310      	adds	r3, #16
 8003198:	617b      	str	r3, [r7, #20]
        p_msg2++;
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	3310      	adds	r3, #16
 800319e:	613b      	str	r3, [r7, #16]

    p_msg1 = OSCfg_MsgPoolBasePtr;
    p_msg2 = OSCfg_MsgPoolBasePtr;
    p_msg2++;
    loops  = OSCfg_MsgPoolSize - 1u;
    for (i = 0u; i < loops; i++) {                          /* Init. list of free OS_MSGs                             */
 80031a0:	89fb      	ldrh	r3, [r7, #14]
 80031a2:	3301      	adds	r3, #1
 80031a4:	81fb      	strh	r3, [r7, #14]
 80031a6:	89fa      	ldrh	r2, [r7, #14]
 80031a8:	89bb      	ldrh	r3, [r7, #12]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d3e6      	bcc.n	800317c <OS_MsgPoolInit+0x4c>
        p_msg1->MsgSize = (OS_MSG_SIZE)0u;
        p_msg1->MsgTS   = (CPU_TS     )0u;
        p_msg1++;
        p_msg2++;
    }
    p_msg1->NextPtr = (OS_MSG    *)0;                       /* Last OS_MSG                                            */
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
    p_msg1->MsgPtr  = (void      *)0;
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	2200      	movs	r2, #0
 80031b8:	605a      	str	r2, [r3, #4]
    p_msg1->MsgSize = (OS_MSG_SIZE)0u;
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	2200      	movs	r2, #0
 80031be:	811a      	strh	r2, [r3, #8]
    p_msg1->MsgTS   = (CPU_TS     )0u;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	2200      	movs	r2, #0
 80031c4:	60da      	str	r2, [r3, #12]

    OSMsgPool.NextPtr    =  OSCfg_MsgPoolBasePtr;
 80031c6:	4b0a      	ldr	r3, [pc, #40]	; (80031f0 <OS_MsgPoolInit+0xc0>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a0b      	ldr	r2, [pc, #44]	; (80031f8 <OS_MsgPoolInit+0xc8>)
 80031cc:	6013      	str	r3, [r2, #0]
    OSMsgPool.NbrFree    =  OSCfg_MsgPoolSize;
 80031ce:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <OS_MsgPoolInit+0xc4>)
 80031d0:	881a      	ldrh	r2, [r3, #0]
 80031d2:	4b09      	ldr	r3, [pc, #36]	; (80031f8 <OS_MsgPoolInit+0xc8>)
 80031d4:	809a      	strh	r2, [r3, #4]
    OSMsgPool.NbrUsed    = (OS_MSG_QTY)0;
 80031d6:	4b08      	ldr	r3, [pc, #32]	; (80031f8 <OS_MsgPoolInit+0xc8>)
 80031d8:	2200      	movs	r2, #0
 80031da:	80da      	strh	r2, [r3, #6]
#if OS_CFG_DBG_EN > 0u
    OSMsgPool.NbrUsedMax = (OS_MSG_QTY)0;
 80031dc:	4b06      	ldr	r3, [pc, #24]	; (80031f8 <OS_MsgPoolInit+0xc8>)
 80031de:	2200      	movs	r2, #0
 80031e0:	811a      	strh	r2, [r3, #8]
#endif
   *p_err                =  OS_ERR_NONE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	801a      	strh	r2, [r3, #0]
}
 80031e8:	371c      	adds	r7, #28
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr
 80031f0:	0800e5f8 	.word	0x0800e5f8
 80031f4:	0800e5f4 	.word	0x0800e5f4
 80031f8:	2000279c 	.word	0x2000279c

080031fc <OS_MsgQInit>:
************************************************************************************************************************
*/

void  OS_MsgQInit (OS_MSG_Q    *p_msg_q,
                   OS_MSG_QTY   size)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	460b      	mov	r3, r1
 8003206:	807b      	strh	r3, [r7, #2]
    p_msg_q->NbrEntriesSize = (OS_MSG_QTY)size;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	887a      	ldrh	r2, [r7, #2]
 800320c:	811a      	strh	r2, [r3, #8]
    p_msg_q->NbrEntries     = (OS_MSG_QTY)0;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	815a      	strh	r2, [r3, #10]
#if OS_CFG_DBG_EN > 0u
    p_msg_q->NbrEntriesMax  = (OS_MSG_QTY)0;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	819a      	strh	r2, [r3, #12]
#endif
    p_msg_q->InPtr          = (OS_MSG   *)0;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]
    p_msg_q->OutPtr         = (OS_MSG   *)0;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	605a      	str	r2, [r3, #4]
}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	bc80      	pop	{r7}
 800322e:	4770      	bx	lr

08003230 <OS_MsgQGet>:

void  *OS_MsgQGet (OS_MSG_Q     *p_msg_q,
                   OS_MSG_SIZE  *p_msg_size,
                   CPU_TS       *p_ts,
                   OS_ERR       *p_err)
{
 8003230:	b480      	push	{r7}
 8003232:	b087      	sub	sp, #28
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
 800323c:	603b      	str	r3, [r7, #0]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return ((void *)0);
    }
#endif

    if (p_msg_q->NbrEntries == (OS_MSG_QTY)0) {             /* Is the queue empty?                                    */
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	895b      	ldrh	r3, [r3, #10]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10e      	bne.n	8003264 <OS_MsgQGet+0x34>
       *p_msg_size = (OS_MSG_SIZE)0;                        /* Yes                                                    */
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	2200      	movs	r2, #0
 800324a:	801a      	strh	r2, [r3, #0]
        if (p_ts != (CPU_TS *)0) {
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d002      	beq.n	8003258 <OS_MsgQGet+0x28>
           *p_ts  = (CPU_TS  )0;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]
        }
       *p_err = OS_ERR_Q_EMPTY;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	f246 5292 	movw	r2, #26002	; 0x6592
 800325e:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 8003260:	2300      	movs	r3, #0
 8003262:	e03c      	b.n	80032de <OS_MsgQGet+0xae>
    }

    p_msg           = p_msg_q->OutPtr;                      /* No, get the next message to extract from the queue     */
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	617b      	str	r3, [r7, #20]
    p_void          = p_msg->MsgPtr;
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	613b      	str	r3, [r7, #16]
   *p_msg_size      = p_msg->MsgSize;
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	891a      	ldrh	r2, [r3, #8]
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	801a      	strh	r2, [r3, #0]
    if (p_ts != (CPU_TS *)0) {
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <OS_MsgQGet+0x56>
       *p_ts  = p_msg->MsgTS;
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	68da      	ldr	r2, [r3, #12]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	601a      	str	r2, [r3, #0]
    }

    p_msg_q->OutPtr = p_msg->NextPtr;                       /* Point to next message to extract                       */
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	605a      	str	r2, [r3, #4]

    if (p_msg_q->OutPtr == (OS_MSG *)0) {                   /* Are there any more messages in the queue?              */
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d106      	bne.n	80032a4 <OS_MsgQGet+0x74>
        p_msg_q->InPtr      = (OS_MSG   *)0;                /* No                                                     */
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]
        p_msg_q->NbrEntries = (OS_MSG_QTY)0;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	815a      	strh	r2, [r3, #10]
 80032a2:	e005      	b.n	80032b0 <OS_MsgQGet+0x80>
    } else {
        p_msg_q->NbrEntries--;                              /* Yes, One less message in the queue                     */
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	895b      	ldrh	r3, [r3, #10]
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	815a      	strh	r2, [r3, #10]
    }

    p_msg->NextPtr    = OSMsgPool.NextPtr;                  /* Return message control block to free list              */
 80032b0:	4b0d      	ldr	r3, [pc, #52]	; (80032e8 <OS_MsgQGet+0xb8>)
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	601a      	str	r2, [r3, #0]
    OSMsgPool.NextPtr = p_msg;
 80032b8:	4a0b      	ldr	r2, [pc, #44]	; (80032e8 <OS_MsgQGet+0xb8>)
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	6013      	str	r3, [r2, #0]
    OSMsgPool.NbrFree++;
 80032be:	4b0a      	ldr	r3, [pc, #40]	; (80032e8 <OS_MsgQGet+0xb8>)
 80032c0:	889b      	ldrh	r3, [r3, #4]
 80032c2:	3301      	adds	r3, #1
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	4b08      	ldr	r3, [pc, #32]	; (80032e8 <OS_MsgQGet+0xb8>)
 80032c8:	809a      	strh	r2, [r3, #4]
    OSMsgPool.NbrUsed--;
 80032ca:	4b07      	ldr	r3, [pc, #28]	; (80032e8 <OS_MsgQGet+0xb8>)
 80032cc:	88db      	ldrh	r3, [r3, #6]
 80032ce:	3b01      	subs	r3, #1
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <OS_MsgQGet+0xb8>)
 80032d4:	80da      	strh	r2, [r3, #6]

   *p_err             = OS_ERR_NONE;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	2200      	movs	r2, #0
 80032da:	801a      	strh	r2, [r3, #0]
    return (p_void);
 80032dc:	693b      	ldr	r3, [r7, #16]
}
 80032de:	4618      	mov	r0, r3
 80032e0:	371c      	adds	r7, #28
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bc80      	pop	{r7}
 80032e6:	4770      	bx	lr
 80032e8:	2000279c 	.word	0x2000279c

080032ec <OS_MsgQPut>:
                  void         *p_void,
                  OS_MSG_SIZE   msg_size,
                  OS_OPT        opt,
                  CPU_TS        ts,
                  OS_ERR       *p_err)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b087      	sub	sp, #28
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	4611      	mov	r1, r2
 80032f8:	461a      	mov	r2, r3
 80032fa:	460b      	mov	r3, r1
 80032fc:	80fb      	strh	r3, [r7, #6]
 80032fe:	4613      	mov	r3, r2
 8003300:	80bb      	strh	r3, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    if (p_msg_q->NbrEntries >= p_msg_q->NbrEntriesSize) {
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	895a      	ldrh	r2, [r3, #10]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	891b      	ldrh	r3, [r3, #8]
 800330a:	429a      	cmp	r2, r3
 800330c:	d304      	bcc.n	8003318 <OS_MsgQPut+0x2c>
       *p_err = OS_ERR_Q_MAX;                               /* Message queue cannot accept any more messages          */
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	f246 5293 	movw	r2, #26003	; 0x6593
 8003314:	801a      	strh	r2, [r3, #0]
        return;
 8003316:	e06b      	b.n	80033f0 <OS_MsgQPut+0x104>
    }

    if (OSMsgPool.NbrFree == (OS_MSG_QTY)0) {
 8003318:	4b37      	ldr	r3, [pc, #220]	; (80033f8 <OS_MsgQPut+0x10c>)
 800331a:	889b      	ldrh	r3, [r3, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d104      	bne.n	800332a <OS_MsgQPut+0x3e>
       *p_err = OS_ERR_MSG_POOL_EMPTY;                      /* No more OS_MSG to use                                  */
 8003320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003322:	f245 721d 	movw	r2, #22301	; 0x571d
 8003326:	801a      	strh	r2, [r3, #0]
        return;
 8003328:	e062      	b.n	80033f0 <OS_MsgQPut+0x104>
    }

    p_msg             = OSMsgPool.NextPtr;                  /* Remove message control block from free list            */
 800332a:	4b33      	ldr	r3, [pc, #204]	; (80033f8 <OS_MsgQPut+0x10c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	617b      	str	r3, [r7, #20]
    OSMsgPool.NextPtr = p_msg->NextPtr;
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a30      	ldr	r2, [pc, #192]	; (80033f8 <OS_MsgQPut+0x10c>)
 8003336:	6013      	str	r3, [r2, #0]
    OSMsgPool.NbrFree--;
 8003338:	4b2f      	ldr	r3, [pc, #188]	; (80033f8 <OS_MsgQPut+0x10c>)
 800333a:	889b      	ldrh	r3, [r3, #4]
 800333c:	3b01      	subs	r3, #1
 800333e:	b29a      	uxth	r2, r3
 8003340:	4b2d      	ldr	r3, [pc, #180]	; (80033f8 <OS_MsgQPut+0x10c>)
 8003342:	809a      	strh	r2, [r3, #4]
    OSMsgPool.NbrUsed++;
 8003344:	4b2c      	ldr	r3, [pc, #176]	; (80033f8 <OS_MsgQPut+0x10c>)
 8003346:	88db      	ldrh	r3, [r3, #6]
 8003348:	3301      	adds	r3, #1
 800334a:	b29a      	uxth	r2, r3
 800334c:	4b2a      	ldr	r3, [pc, #168]	; (80033f8 <OS_MsgQPut+0x10c>)
 800334e:	80da      	strh	r2, [r3, #6]

#if OS_CFG_DBG_EN > 0u
    if (OSMsgPool.NbrUsedMax < OSMsgPool.NbrUsed) {
 8003350:	4b29      	ldr	r3, [pc, #164]	; (80033f8 <OS_MsgQPut+0x10c>)
 8003352:	891a      	ldrh	r2, [r3, #8]
 8003354:	4b28      	ldr	r3, [pc, #160]	; (80033f8 <OS_MsgQPut+0x10c>)
 8003356:	88db      	ldrh	r3, [r3, #6]
 8003358:	429a      	cmp	r2, r3
 800335a:	d203      	bcs.n	8003364 <OS_MsgQPut+0x78>
        OSMsgPool.NbrUsedMax = OSMsgPool.NbrUsed;
 800335c:	4b26      	ldr	r3, [pc, #152]	; (80033f8 <OS_MsgQPut+0x10c>)
 800335e:	88da      	ldrh	r2, [r3, #6]
 8003360:	4b25      	ldr	r3, [pc, #148]	; (80033f8 <OS_MsgQPut+0x10c>)
 8003362:	811a      	strh	r2, [r3, #8]
    }
#endif

    if (p_msg_q->NbrEntries == (OS_MSG_QTY)0) {             /* Is this first message placed in the queue?             */
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	895b      	ldrh	r3, [r3, #10]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d10c      	bne.n	8003386 <OS_MsgQPut+0x9a>
        p_msg_q->InPtr         = p_msg;                     /* Yes                                                    */
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	601a      	str	r2, [r3, #0]
        p_msg_q->OutPtr        = p_msg;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	605a      	str	r2, [r3, #4]
        p_msg_q->NbrEntries    = (OS_MSG_QTY)1;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2201      	movs	r2, #1
 800337c:	815a      	strh	r2, [r3, #10]
        p_msg->NextPtr         = (OS_MSG *)0;
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	e01e      	b.n	80033c4 <OS_MsgQPut+0xd8>
    } else {                                                /* No                                                     */
        if ((opt & OS_OPT_POST_LIFO) == OS_OPT_POST_FIFO) { /* Is it FIFO or LIFO?                                    */
 8003386:	88bb      	ldrh	r3, [r7, #4]
 8003388:	f003 0310 	and.w	r3, r3, #16
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10c      	bne.n	80033aa <OS_MsgQPut+0xbe>
            p_msg_in           = p_msg_q->InPtr;            /* FIFO, add to the head                                  */
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	613b      	str	r3, [r7, #16]
            p_msg_in->NextPtr  = p_msg;
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	601a      	str	r2, [r3, #0]
            p_msg_q->InPtr     = p_msg;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	601a      	str	r2, [r3, #0]
            p_msg->NextPtr     = (OS_MSG *)0;
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	2200      	movs	r2, #0
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	e006      	b.n	80033b8 <OS_MsgQPut+0xcc>
        } else {
            p_msg->NextPtr     = p_msg_q->OutPtr;           /* LIFO, add to the tail                                  */
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	601a      	str	r2, [r3, #0]
            p_msg_q->OutPtr    = p_msg;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	605a      	str	r2, [r3, #4]
        }
        p_msg_q->NbrEntries++;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	895b      	ldrh	r3, [r3, #10]
 80033bc:	3301      	adds	r3, #1
 80033be:	b29a      	uxth	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	815a      	strh	r2, [r3, #10]
    }

#if OS_CFG_DBG_EN > 0u
    if (p_msg_q->NbrEntriesMax < p_msg_q->NbrEntries) {
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	899a      	ldrh	r2, [r3, #12]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	895b      	ldrh	r3, [r3, #10]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d203      	bcs.n	80033d8 <OS_MsgQPut+0xec>
        p_msg_q->NbrEntriesMax = p_msg_q->NbrEntries;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	895a      	ldrh	r2, [r3, #10]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	819a      	strh	r2, [r3, #12]
    }
#endif

    p_msg->MsgPtr  = p_void;                                /* Deposit message in the message queue entry             */
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	605a      	str	r2, [r3, #4]
    p_msg->MsgSize = msg_size;
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	88fa      	ldrh	r2, [r7, #6]
 80033e2:	811a      	strh	r2, [r3, #8]
    p_msg->MsgTS   = ts;
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	6a3a      	ldr	r2, [r7, #32]
 80033e8:	60da      	str	r2, [r3, #12]
   *p_err          = OS_ERR_NONE;
 80033ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ec:	2200      	movs	r2, #0
 80033ee:	801a      	strh	r2, [r3, #0]
}
 80033f0:	371c      	adds	r7, #28
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bc80      	pop	{r7}
 80033f6:	4770      	bx	lr
 80033f8:	2000279c 	.word	0x2000279c

080033fc <OSInit>:
* Returns    : none
************************************************************************************************************************
*/

void  OSInit (OS_ERR  *p_err)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    OSInitHook();                                           /* Call port specific initialization code                 */
 8003404:	f002 fd48 	bl	8005e98 <OSInitHook>

    OSIntNestingCtr                 = (OS_NESTING_CTR)0;    /* Clear the interrupt nesting counter                    */
 8003408:	4b60      	ldr	r3, [pc, #384]	; (800358c <OSInit+0x190>)
 800340a:	2200      	movs	r2, #0
 800340c:	701a      	strb	r2, [r3, #0]

    OSRunning                       =  OS_STATE_OS_STOPPED; /* Indicate that multitasking not started                 */
 800340e:	4b60      	ldr	r3, [pc, #384]	; (8003590 <OSInit+0x194>)
 8003410:	2200      	movs	r2, #0
 8003412:	701a      	strb	r2, [r3, #0]

    OSSchedLockNestingCtr           = (OS_NESTING_CTR)0;    /* Clear the scheduling lock counter                      */
 8003414:	4b5f      	ldr	r3, [pc, #380]	; (8003594 <OSInit+0x198>)
 8003416:	2200      	movs	r2, #0
 8003418:	701a      	strb	r2, [r3, #0]

    OSTCBCurPtr                     = (OS_TCB *)0;          /* Initialize OS_TCB pointers to a known state            */
 800341a:	4b5f      	ldr	r3, [pc, #380]	; (8003598 <OSInit+0x19c>)
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]
    OSTCBHighRdyPtr                 = (OS_TCB *)0;
 8003420:	4b5e      	ldr	r3, [pc, #376]	; (800359c <OSInit+0x1a0>)
 8003422:	2200      	movs	r2, #0
 8003424:	601a      	str	r2, [r3, #0]

    OSPrioCur                       = (OS_PRIO)0;           /* Initialize priority variables to a known state         */
 8003426:	4b5e      	ldr	r3, [pc, #376]	; (80035a0 <OSInit+0x1a4>)
 8003428:	2200      	movs	r2, #0
 800342a:	701a      	strb	r2, [r3, #0]
    OSPrioHighRdy                   = (OS_PRIO)0;
 800342c:	4b5d      	ldr	r3, [pc, #372]	; (80035a4 <OSInit+0x1a8>)
 800342e:	2200      	movs	r2, #0
 8003430:	701a      	strb	r2, [r3, #0]
    OSPrioSaved                     = (OS_PRIO)0;
 8003432:	4b5d      	ldr	r3, [pc, #372]	; (80035a8 <OSInit+0x1ac>)
 8003434:	2200      	movs	r2, #0
 8003436:	701a      	strb	r2, [r3, #0]

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
    OSSchedLockTimeBegin            = (CPU_TS)0;
 8003438:	4b5c      	ldr	r3, [pc, #368]	; (80035ac <OSInit+0x1b0>)
 800343a:	2200      	movs	r2, #0
 800343c:	601a      	str	r2, [r3, #0]
    OSSchedLockTimeMax              = (CPU_TS)0;
 800343e:	4b5c      	ldr	r3, [pc, #368]	; (80035b0 <OSInit+0x1b4>)
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]
    OSSchedLockTimeMaxCur           = (CPU_TS)0;
 8003444:	4b5b      	ldr	r3, [pc, #364]	; (80035b4 <OSInit+0x1b8>)
 8003446:	2200      	movs	r2, #0
 8003448:	601a      	str	r2, [r3, #0]
#if OS_CFG_SCHED_ROUND_ROBIN_EN > 0u
    OSSchedRoundRobinEn             = DEF_FALSE;
    OSSchedRoundRobinDfltTimeQuanta = OSCfg_TickRate_Hz / 10u;
#endif

    if (OSCfg_ISRStkSize > (CPU_STK_SIZE)0) {
 800344a:	4b5b      	ldr	r3, [pc, #364]	; (80035b8 <OSInit+0x1bc>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d015      	beq.n	800347e <OSInit+0x82>
        p_stk = OSCfg_ISRStkBasePtr;                        /* Clear exception stack for stack checking.              */
 8003452:	4b5a      	ldr	r3, [pc, #360]	; (80035bc <OSInit+0x1c0>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	60fb      	str	r3, [r7, #12]
        if (p_stk != (CPU_STK *)0) {
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00f      	beq.n	800347e <OSInit+0x82>
            size  = OSCfg_ISRStkSize;
 800345e:	4b56      	ldr	r3, [pc, #344]	; (80035b8 <OSInit+0x1bc>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	60bb      	str	r3, [r7, #8]
            while (size > (CPU_STK_SIZE)0) {
 8003464:	e008      	b.n	8003478 <OSInit+0x7c>
                size--;
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	3b01      	subs	r3, #1
 800346a:	60bb      	str	r3, [r7, #8]
               *p_stk = (CPU_STK)0;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	601a      	str	r2, [r3, #0]
                p_stk++;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	3304      	adds	r3, #4
 8003476:	60fb      	str	r3, [r7, #12]

    if (OSCfg_ISRStkSize > (CPU_STK_SIZE)0) {
        p_stk = OSCfg_ISRStkBasePtr;                        /* Clear exception stack for stack checking.              */
        if (p_stk != (CPU_STK *)0) {
            size  = OSCfg_ISRStkSize;
            while (size > (CPU_STK_SIZE)0) {
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1f3      	bne.n	8003466 <OSInit+0x6a>
            }
        }
    }

#if OS_CFG_APP_HOOKS_EN > 0u
    OS_AppTaskCreateHookPtr = (OS_APP_HOOK_TCB )0;          /* Clear application hook pointers                        */
 800347e:	4b50      	ldr	r3, [pc, #320]	; (80035c0 <OSInit+0x1c4>)
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]
    OS_AppTaskDelHookPtr    = (OS_APP_HOOK_TCB )0;
 8003484:	4b4f      	ldr	r3, [pc, #316]	; (80035c4 <OSInit+0x1c8>)
 8003486:	2200      	movs	r2, #0
 8003488:	601a      	str	r2, [r3, #0]
    OS_AppTaskReturnHookPtr = (OS_APP_HOOK_TCB )0;
 800348a:	4b4f      	ldr	r3, [pc, #316]	; (80035c8 <OSInit+0x1cc>)
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]

    OS_AppIdleTaskHookPtr   = (OS_APP_HOOK_VOID)0;
 8003490:	4b4e      	ldr	r3, [pc, #312]	; (80035cc <OSInit+0x1d0>)
 8003492:	2200      	movs	r2, #0
 8003494:	601a      	str	r2, [r3, #0]
    OS_AppStatTaskHookPtr   = (OS_APP_HOOK_VOID)0;
 8003496:	4b4e      	ldr	r3, [pc, #312]	; (80035d0 <OSInit+0x1d4>)
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]
    OS_AppTaskSwHookPtr     = (OS_APP_HOOK_VOID)0;
 800349c:	4b4d      	ldr	r3, [pc, #308]	; (80035d4 <OSInit+0x1d8>)
 800349e:	2200      	movs	r2, #0
 80034a0:	601a      	str	r2, [r3, #0]
    OS_AppTimeTickHookPtr   = (OS_APP_HOOK_VOID)0;
 80034a2:	4b4d      	ldr	r3, [pc, #308]	; (80035d8 <OSInit+0x1dc>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]
#endif

#if OS_CFG_TASK_REG_TBL_SIZE > 0u
    OSTaskRegNextAvailID    = (OS_REG_ID)0;
 80034a8:	4b4c      	ldr	r3, [pc, #304]	; (80035dc <OSInit+0x1e0>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	701a      	strb	r2, [r3, #0]
#endif

    OS_PrioInit();                                          /* Initialize the priority bitmap table                   */
 80034ae:	f001 fd1f 	bl	8004ef0 <OS_PrioInit>

    OS_RdyListInit();                                       /* Initialize the Ready List                              */
 80034b2:	f000 fd51 	bl	8003f58 <OS_RdyListInit>

    
#if OS_CFG_FLAG_EN > 0u                                     /* Initialize the Event Flag module                       */
    OS_FlagInit(p_err);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f001 f9fa 	bl	80048b0 <OS_FlagInit>
    if (*p_err != OS_ERR_NONE) {
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	881b      	ldrh	r3, [r3, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d14a      	bne.n	800355a <OSInit+0x15e>
    }
#endif


#if OS_CFG_MEM_EN > 0u                                      /* Initialize the Memory Manager module                   */
    OS_MemInit(p_err);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f002 fb59 	bl	8005b7c <OS_MemInit>
    if (*p_err != OS_ERR_NONE) {
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	881b      	ldrh	r3, [r3, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d145      	bne.n	800355e <OSInit+0x162>
    }
#endif


#if (OS_MSG_EN) > 0u                                        /* Initialize the free list of OS_MSGs                    */
    OS_MsgPoolInit(p_err);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7ff fe2c 	bl	8003130 <OS_MsgPoolInit>
    if (*p_err != OS_ERR_NONE) {
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	881b      	ldrh	r3, [r3, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d140      	bne.n	8003562 <OSInit+0x166>
    }
#endif


#if OS_CFG_MUTEX_EN > 0u                                    /* Initialize the Mutex Manager module                    */
    OS_MutexInit(p_err);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f002 f897 	bl	8005614 <OS_MutexInit>
    if (*p_err != OS_ERR_NONE) {
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	881b      	ldrh	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d13b      	bne.n	8003566 <OSInit+0x16a>
    }
#endif


#if OS_CFG_Q_EN > 0u
    OS_QInit(p_err);                                        /* Initialize the Message Queue Manager module            */
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7fe ff48 	bl	8002384 <OS_QInit>
    if (*p_err != OS_ERR_NONE) {
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	881b      	ldrh	r3, [r3, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d136      	bne.n	800356a <OSInit+0x16e>
    }
#endif


#if OS_CFG_SEM_EN > 0u                                      /* Initialize the Semaphore Manager module                */
    OS_SemInit(p_err);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f001 fe1d 	bl	800513c <OS_SemInit>
    if (*p_err != OS_ERR_NONE) {
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	881b      	ldrh	r3, [r3, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d131      	bne.n	800356e <OSInit+0x172>
        return;
    }
#endif


    OS_TaskInit(p_err);                                     /* Initialize the task manager                            */
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7ff fabc 	bl	8002a88 <OS_TaskInit>
    if (*p_err != OS_ERR_NONE) {
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	881b      	ldrh	r3, [r3, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d12c      	bne.n	8003572 <OSInit+0x176>
        return;
    }
#endif

    
    OS_IdleTaskInit(p_err);                                 /* Initialize the Idle Task                               */
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 fa21 	bl	8003960 <OS_IdleTaskInit>
    if (*p_err != OS_ERR_NONE) {
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	881b      	ldrh	r3, [r3, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d127      	bne.n	8003576 <OSInit+0x17a>
        return;
    }


    OS_TickTaskInit(p_err);                                 /* Initialize the Tick Task                               */
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 febe 	bl	80042a8 <OS_TickTaskInit>
    if (*p_err != OS_ERR_NONE) {
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	881b      	ldrh	r3, [r3, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d122      	bne.n	800357a <OSInit+0x17e>
        return;
    }


#if OS_CFG_STAT_TASK_EN > 0u                                /* Initialize the Statistic Task                          */
    OS_StatTaskInit(p_err);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f001 fc71 	bl	8004e1c <OS_StatTaskInit>
    if (*p_err != OS_ERR_NONE) {
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	881b      	ldrh	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d11d      	bne.n	800357e <OSInit+0x182>
    }
#endif


#if OS_CFG_TMR_EN > 0u                                      /* Initialize the Timer Manager module                    */
    OS_TmrInit(p_err);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f002 fb30 	bl	8005ba8 <OS_TmrInit>
    if (*p_err != OS_ERR_NONE) {
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	881b      	ldrh	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d118      	bne.n	8003582 <OSInit+0x186>
    }
#endif


#if OS_CFG_DBG_EN > 0u
    OS_Dbg_Init();
 8003550:	f002 f8ce 	bl	80056f0 <OS_Dbg_Init>
#endif


    OSCfg_Init();
 8003554:	f001 fdec 	bl	8005130 <OSCfg_Init>
 8003558:	e014      	b.n	8003584 <OSInit+0x188>

    
#if OS_CFG_FLAG_EN > 0u                                     /* Initialize the Event Flag module                       */
    OS_FlagInit(p_err);
    if (*p_err != OS_ERR_NONE) {
        return;
 800355a:	bf00      	nop
 800355c:	e012      	b.n	8003584 <OSInit+0x188>


#if OS_CFG_MEM_EN > 0u                                      /* Initialize the Memory Manager module                   */
    OS_MemInit(p_err);
    if (*p_err != OS_ERR_NONE) {
        return;
 800355e:	bf00      	nop
 8003560:	e010      	b.n	8003584 <OSInit+0x188>


#if (OS_MSG_EN) > 0u                                        /* Initialize the free list of OS_MSGs                    */
    OS_MsgPoolInit(p_err);
    if (*p_err != OS_ERR_NONE) {
        return;
 8003562:	bf00      	nop
 8003564:	e00e      	b.n	8003584 <OSInit+0x188>


#if OS_CFG_MUTEX_EN > 0u                                    /* Initialize the Mutex Manager module                    */
    OS_MutexInit(p_err);
    if (*p_err != OS_ERR_NONE) {
        return;
 8003566:	bf00      	nop
 8003568:	e00c      	b.n	8003584 <OSInit+0x188>


#if OS_CFG_Q_EN > 0u
    OS_QInit(p_err);                                        /* Initialize the Message Queue Manager module            */
    if (*p_err != OS_ERR_NONE) {
        return;
 800356a:	bf00      	nop
 800356c:	e00a      	b.n	8003584 <OSInit+0x188>


#if OS_CFG_SEM_EN > 0u                                      /* Initialize the Semaphore Manager module                */
    OS_SemInit(p_err);
    if (*p_err != OS_ERR_NONE) {
        return;
 800356e:	bf00      	nop
 8003570:	e008      	b.n	8003584 <OSInit+0x188>
#endif


    OS_TaskInit(p_err);                                     /* Initialize the task manager                            */
    if (*p_err != OS_ERR_NONE) {
        return;
 8003572:	bf00      	nop
 8003574:	e006      	b.n	8003584 <OSInit+0x188>
#endif

    
    OS_IdleTaskInit(p_err);                                 /* Initialize the Idle Task                               */
    if (*p_err != OS_ERR_NONE) {
        return;
 8003576:	bf00      	nop
 8003578:	e004      	b.n	8003584 <OSInit+0x188>
    }


    OS_TickTaskInit(p_err);                                 /* Initialize the Tick Task                               */
    if (*p_err != OS_ERR_NONE) {
        return;
 800357a:	bf00      	nop
 800357c:	e002      	b.n	8003584 <OSInit+0x188>


#if OS_CFG_STAT_TASK_EN > 0u                                /* Initialize the Statistic Task                          */
    OS_StatTaskInit(p_err);
    if (*p_err != OS_ERR_NONE) {
        return;
 800357e:	bf00      	nop
 8003580:	e000      	b.n	8003584 <OSInit+0x188>


#if OS_CFG_TMR_EN > 0u                                      /* Initialize the Timer Manager module                    */
    OS_TmrInit(p_err);
    if (*p_err != OS_ERR_NONE) {
        return;
 8003582:	bf00      	nop
    OS_Dbg_Init();
#endif


    OSCfg_Init();
}
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	200026d8 	.word	0x200026d8
 8003590:	20002451 	.word	0x20002451
 8003594:	20002440 	.word	0x20002440
 8003598:	200026ac 	.word	0x200026ac
 800359c:	200026b8 	.word	0x200026b8
 80035a0:	200025e0 	.word	0x200025e0
 80035a4:	200025d4 	.word	0x200025d4
 80035a8:	200026b4 	.word	0x200026b4
 80035ac:	200026a8 	.word	0x200026a8
 80035b0:	200028cc 	.word	0x200028cc
 80035b4:	200026bc 	.word	0x200026bc
 80035b8:	0800e5f0 	.word	0x0800e5f0
 80035bc:	0800e5ec 	.word	0x0800e5ec
 80035c0:	200025dc 	.word	0x200025dc
 80035c4:	200026c8 	.word	0x200026c8
 80035c8:	20002444 	.word	0x20002444
 80035cc:	200028a4 	.word	0x200028a4
 80035d0:	200028c0 	.word	0x200028c0
 80035d4:	200028b0 	.word	0x200028b0
 80035d8:	200026cc 	.word	0x200026cc
 80035dc:	20002450 	.word	0x20002450

080035e0 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 250 levels deep.
************************************************************************************************************************
*/

void  OSIntEnter (void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Is OS running?                                         */
 80035e4:	4b0a      	ldr	r3, [pc, #40]	; (8003610 <OSIntEnter+0x30>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d10a      	bne.n	8003602 <OSIntEnter+0x22>
        return;                                             /* No                                                     */
    }

    if (OSIntNestingCtr >= (OS_NESTING_CTR)250u) {          /* Have we nested past 250 levels?                        */
 80035ec:	4b09      	ldr	r3, [pc, #36]	; (8003614 <OSIntEnter+0x34>)
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	2bf9      	cmp	r3, #249	; 0xf9
 80035f2:	d808      	bhi.n	8003606 <OSIntEnter+0x26>
        return;                                             /* Yes                                                    */
    }

    OSIntNestingCtr++;                                      /* Increment ISR nesting level                            */
 80035f4:	4b07      	ldr	r3, [pc, #28]	; (8003614 <OSIntEnter+0x34>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	3301      	adds	r3, #1
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	4b05      	ldr	r3, [pc, #20]	; (8003614 <OSIntEnter+0x34>)
 80035fe:	701a      	strb	r2, [r3, #0]
 8003600:	e002      	b.n	8003608 <OSIntEnter+0x28>
*/

void  OSIntEnter (void)
{
    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Is OS running?                                         */
        return;                                             /* No                                                     */
 8003602:	bf00      	nop
 8003604:	e000      	b.n	8003608 <OSIntEnter+0x28>
    }

    if (OSIntNestingCtr >= (OS_NESTING_CTR)250u) {          /* Have we nested past 250 levels?                        */
        return;                                             /* Yes                                                    */
 8003606:	bf00      	nop
    }

    OSIntNestingCtr++;                                      /* Increment ISR nesting level                            */
}
 8003608:	46bd      	mov	sp, r7
 800360a:	bc80      	pop	{r7}
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	20002451 	.word	0x20002451
 8003614:	200026d8 	.word	0x200026d8

08003618 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OSSchedLock())
************************************************************************************************************************
*/

void  OSIntExit (void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
 800361e:	2300      	movs	r3, #0
 8003620:	607b      	str	r3, [r7, #4]



    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Has the OS started?                                    */
 8003622:	4b2b      	ldr	r3, [pc, #172]	; (80036d0 <OSIntExit+0xb8>)
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d14e      	bne.n	80036c8 <OSIntExit+0xb0>
        return;                                             /* No                                                     */
    }

    CPU_INT_DIS();
 800362a:	f7fc fe59 	bl	80002e0 <CPU_SR_Save>
 800362e:	6078      	str	r0, [r7, #4]
    if (OSIntNestingCtr == (OS_NESTING_CTR)0) {             /* Prevent OSIntNestingCtr from wrapping                  */
 8003630:	4b28      	ldr	r3, [pc, #160]	; (80036d4 <OSIntExit+0xbc>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d103      	bne.n	8003640 <OSIntExit+0x28>
        CPU_INT_EN();
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f7fc fe55 	bl	80002e8 <CPU_SR_Restore>
        return;
 800363e:	e044      	b.n	80036ca <OSIntExit+0xb2>
    }
    OSIntNestingCtr--;
 8003640:	4b24      	ldr	r3, [pc, #144]	; (80036d4 <OSIntExit+0xbc>)
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	3b01      	subs	r3, #1
 8003646:	b2da      	uxtb	r2, r3
 8003648:	4b22      	ldr	r3, [pc, #136]	; (80036d4 <OSIntExit+0xbc>)
 800364a:	701a      	strb	r2, [r3, #0]
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* ISRs still nested?                                     */
 800364c:	4b21      	ldr	r3, [pc, #132]	; (80036d4 <OSIntExit+0xbc>)
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d003      	beq.n	800365c <OSIntExit+0x44>
        CPU_INT_EN();                                       /* Yes                                                    */
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f7fc fe47 	bl	80002e8 <CPU_SR_Restore>
        return;
 800365a:	e036      	b.n	80036ca <OSIntExit+0xb2>
    }

    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {        /* Scheduler still locked?                                */
 800365c:	4b1e      	ldr	r3, [pc, #120]	; (80036d8 <OSIntExit+0xc0>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d003      	beq.n	800366c <OSIntExit+0x54>
        CPU_INT_EN();                                       /* Yes                                                    */
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7fc fe3f 	bl	80002e8 <CPU_SR_Restore>
        return;
 800366a:	e02e      	b.n	80036ca <OSIntExit+0xb2>
    }

    OSPrioHighRdy   = OS_PrioGetHighest();                  /* Find highest priority                                  */
 800366c:	f001 fc58 	bl	8004f20 <OS_PrioGetHighest>
 8003670:	4603      	mov	r3, r0
 8003672:	461a      	mov	r2, r3
 8003674:	4b19      	ldr	r3, [pc, #100]	; (80036dc <OSIntExit+0xc4>)
 8003676:	701a      	strb	r2, [r3, #0]
    OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;     /* Get highest priority task ready-to-run                 */
 8003678:	4b18      	ldr	r3, [pc, #96]	; (80036dc <OSIntExit+0xc4>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	4619      	mov	r1, r3
 800367e:	4a18      	ldr	r2, [pc, #96]	; (80036e0 <OSIntExit+0xc8>)
 8003680:	460b      	mov	r3, r1
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	440b      	add	r3, r1
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a15      	ldr	r2, [pc, #84]	; (80036e4 <OSIntExit+0xcc>)
 800368e:	6013      	str	r3, [r2, #0]
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                   /* Current task still the highest priority?               */
 8003690:	4b14      	ldr	r3, [pc, #80]	; (80036e4 <OSIntExit+0xcc>)
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	4b14      	ldr	r3, [pc, #80]	; (80036e8 <OSIntExit+0xd0>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	429a      	cmp	r2, r3
 800369a:	d103      	bne.n	80036a4 <OSIntExit+0x8c>
        CPU_INT_EN();                                       /* Yes                                                    */
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7fc fe23 	bl	80002e8 <CPU_SR_Restore>
        return;
 80036a2:	e012      	b.n	80036ca <OSIntExit+0xb2>
    }

#if OS_CFG_TASK_PROFILE_EN > 0u
    OSTCBHighRdyPtr->CtxSwCtr++;                            /* Inc. # of context switches for this new task           */
 80036a4:	4b0f      	ldr	r3, [pc, #60]	; (80036e4 <OSIntExit+0xcc>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80036ac:	3201      	adds	r2, #1
 80036ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#endif
    OSTaskCtxSwCtr++;                                       /* Keep track of the total number of ctx switches         */
 80036b2:	4b0e      	ldr	r3, [pc, #56]	; (80036ec <OSIntExit+0xd4>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	3301      	adds	r3, #1
 80036b8:	4a0c      	ldr	r2, [pc, #48]	; (80036ec <OSIntExit+0xd4>)
 80036ba:	6013      	str	r3, [r2, #0]

#if defined(OS_CFG_TLS_TBL_SIZE) && (OS_CFG_TLS_TBL_SIZE > 0u)
    OS_TLS_TaskSw();
#endif

    OSIntCtxSw();                                           /* Perform interrupt level ctx switch                     */
 80036bc:	f7fc fddd 	bl	800027a <OSIntCtxSw>

    CPU_INT_EN();
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f7fc fe11 	bl	80002e8 <CPU_SR_Restore>
 80036c6:	e000      	b.n	80036ca <OSIntExit+0xb2>
    CPU_SR_ALLOC();



    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Has the OS started?                                    */
        return;                                             /* No                                                     */
 80036c8:	bf00      	nop
#endif

    OSIntCtxSw();                                           /* Perform interrupt level ctx switch                     */

    CPU_INT_EN();
}
 80036ca:	3708      	adds	r7, #8
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	20002451 	.word	0x20002451
 80036d4:	200026d8 	.word	0x200026d8
 80036d8:	20002440 	.word	0x20002440
 80036dc:	200025d4 	.word	0x200025d4
 80036e0:	20002454 	.word	0x20002454
 80036e4:	200026b8 	.word	0x200026b8
 80036e8:	200026ac 	.word	0x200026ac
 80036ec:	200026d4 	.word	0x200026d4

080036f0 <OSSched>:
* Note(s)    : 1) Rescheduling is prevented when the scheduler is locked (see OSSchedLock())
************************************************************************************************************************
*/

void  OSSched (void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
 80036f6:	2300      	movs	r3, #0
 80036f8:	607b      	str	r3, [r7, #4]



    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* ISRs still nested?                                     */
 80036fa:	4b20      	ldr	r3, [pc, #128]	; (800377c <OSSched+0x8c>)
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d136      	bne.n	8003770 <OSSched+0x80>
        return;                                             /* Yes ... only schedule when no nested ISRs              */
    }

    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {        /* Scheduler locked?                                      */
 8003702:	4b1f      	ldr	r3, [pc, #124]	; (8003780 <OSSched+0x90>)
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d134      	bne.n	8003774 <OSSched+0x84>
        return;                                             /* Yes                                                    */
    }

    CPU_INT_DIS();
 800370a:	f7fc fde9 	bl	80002e0 <CPU_SR_Save>
 800370e:	6078      	str	r0, [r7, #4]
    OSPrioHighRdy   = OS_PrioGetHighest();                  /* Find the highest priority ready                        */
 8003710:	f001 fc06 	bl	8004f20 <OS_PrioGetHighest>
 8003714:	4603      	mov	r3, r0
 8003716:	461a      	mov	r2, r3
 8003718:	4b1a      	ldr	r3, [pc, #104]	; (8003784 <OSSched+0x94>)
 800371a:	701a      	strb	r2, [r3, #0]
    OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;
 800371c:	4b19      	ldr	r3, [pc, #100]	; (8003784 <OSSched+0x94>)
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	4619      	mov	r1, r3
 8003722:	4a19      	ldr	r2, [pc, #100]	; (8003788 <OSSched+0x98>)
 8003724:	460b      	mov	r3, r1
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	440b      	add	r3, r1
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a16      	ldr	r2, [pc, #88]	; (800378c <OSSched+0x9c>)
 8003732:	6013      	str	r3, [r2, #0]
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                   /* Current task is still highest priority task?           */
 8003734:	4b15      	ldr	r3, [pc, #84]	; (800378c <OSSched+0x9c>)
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	4b15      	ldr	r3, [pc, #84]	; (8003790 <OSSched+0xa0>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d103      	bne.n	8003748 <OSSched+0x58>
        CPU_INT_EN();                                       /* Yes ... no need to context switch                      */
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f7fc fdd1 	bl	80002e8 <CPU_SR_Restore>
        return;
 8003746:	e016      	b.n	8003776 <OSSched+0x86>
    }

#if OS_CFG_TASK_PROFILE_EN > 0u
    OSTCBHighRdyPtr->CtxSwCtr++;                            /* Inc. # of context switches to this task                */
 8003748:	4b10      	ldr	r3, [pc, #64]	; (800378c <OSSched+0x9c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003750:	3201      	adds	r2, #1
 8003752:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#endif
    OSTaskCtxSwCtr++;                                       /* Increment context switch counter                       */
 8003756:	4b0f      	ldr	r3, [pc, #60]	; (8003794 <OSSched+0xa4>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	3301      	adds	r3, #1
 800375c:	4a0d      	ldr	r2, [pc, #52]	; (8003794 <OSSched+0xa4>)
 800375e:	6013      	str	r3, [r2, #0]

#if defined(OS_CFG_TLS_TBL_SIZE) && (OS_CFG_TLS_TBL_SIZE > 0u)
    OS_TLS_TaskSw();
#endif

    OS_TASK_SW();                                           /* Perform a task level context switch                    */
 8003760:	f7fc fd86 	bl	8000270 <OSCtxSw>
    CPU_INT_EN();
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f7fc fdbf 	bl	80002e8 <CPU_SR_Restore>

#ifdef OS_TASK_SW_SYNC
    OS_TASK_SW_SYNC();
 800376a:	f3bf 8f6f 	isb	sy
 800376e:	e002      	b.n	8003776 <OSSched+0x86>
    CPU_SR_ALLOC();



    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* ISRs still nested?                                     */
        return;                                             /* Yes ... only schedule when no nested ISRs              */
 8003770:	bf00      	nop
 8003772:	e000      	b.n	8003776 <OSSched+0x86>
    }

    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {        /* Scheduler locked?                                      */
        return;                                             /* Yes                                                    */
 8003774:	bf00      	nop
    CPU_INT_EN();

#ifdef OS_TASK_SW_SYNC
    OS_TASK_SW_SYNC();
#endif
}
 8003776:	3708      	adds	r7, #8
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	200026d8 	.word	0x200026d8
 8003780:	20002440 	.word	0x20002440
 8003784:	200025d4 	.word	0x200025d4
 8003788:	20002454 	.word	0x20002454
 800378c:	200026b8 	.word	0x200026b8
 8003790:	200026ac 	.word	0x200026ac
 8003794:	200026d4 	.word	0x200026d4

08003798 <OSSchedLock>:
*                 call to OSSchedLock() you MUST have a call to OSSchedUnlock().
************************************************************************************************************************
*/

void  OSSchedLock (OS_ERR  *p_err)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
    CPU_SR_ALLOC();
 80037a0:	2300      	movs	r3, #0
 80037a2:	60fb      	str	r3, [r7, #12]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 80037a4:	4b17      	ldr	r3, [pc, #92]	; (8003804 <OSSchedLock+0x6c>)
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d004      	beq.n	80037b6 <OSSchedLock+0x1e>
       *p_err = OS_ERR_SCHED_LOCK_ISR;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f646 5262 	movw	r2, #28002	; 0x6d62
 80037b2:	801a      	strh	r2, [r3, #0]
        return;
 80037b4:	e022      	b.n	80037fc <OSSchedLock+0x64>
    }
#endif

    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Make sure multitasking is running                      */
 80037b6:	4b14      	ldr	r3, [pc, #80]	; (8003808 <OSSchedLock+0x70>)
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d004      	beq.n	80037c8 <OSSchedLock+0x30>
       *p_err = OS_ERR_OS_NOT_RUNNING;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f645 6289 	movw	r2, #24201	; 0x5e89
 80037c4:	801a      	strh	r2, [r3, #0]
        return;
 80037c6:	e019      	b.n	80037fc <OSSchedLock+0x64>
    }

    if (OSSchedLockNestingCtr >= (OS_NESTING_CTR)250u) {    /* Prevent OSSchedLockNestingCtr overflowing              */
 80037c8:	4b10      	ldr	r3, [pc, #64]	; (800380c <OSSchedLock+0x74>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2bf9      	cmp	r3, #249	; 0xf9
 80037ce:	d904      	bls.n	80037da <OSSchedLock+0x42>
       *p_err = OS_ERR_LOCK_NESTING_OVF;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f245 2209 	movw	r2, #21001	; 0x5209
 80037d6:	801a      	strh	r2, [r3, #0]
        return;
 80037d8:	e010      	b.n	80037fc <OSSchedLock+0x64>
    }

    CPU_CRITICAL_ENTER();
 80037da:	f7fc fd81 	bl	80002e0 <CPU_SR_Save>
 80037de:	60f8      	str	r0, [r7, #12]
    OSSchedLockNestingCtr++;                                /* Increment lock nesting level                           */
 80037e0:	4b0a      	ldr	r3, [pc, #40]	; (800380c <OSSchedLock+0x74>)
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	3301      	adds	r3, #1
 80037e6:	b2da      	uxtb	r2, r3
 80037e8:	4b08      	ldr	r3, [pc, #32]	; (800380c <OSSchedLock+0x74>)
 80037ea:	701a      	strb	r2, [r3, #0]
#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
    OS_SchedLockTimeMeasStart();
 80037ec:	f000 fcce 	bl	800418c <OS_SchedLockTimeMeasStart>
#endif
    CPU_CRITICAL_EXIT();
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f7fc fd79 	bl	80002e8 <CPU_SR_Restore>
   *p_err = OS_ERR_NONE;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	801a      	strh	r2, [r3, #0]
}
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	200026d8 	.word	0x200026d8
 8003808:	20002451 	.word	0x20002451
 800380c:	20002440 	.word	0x20002440

08003810 <OSSchedUnlock>:
*                 OSSchedLock() you MUST have a call to OSSchedUnlock().
************************************************************************************************************************
*/

void  OSSchedUnlock (OS_ERR  *p_err)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
    CPU_SR_ALLOC();
 8003818:	2300      	movs	r3, #0
 800381a:	60fb      	str	r3, [r7, #12]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 800381c:	4b1e      	ldr	r3, [pc, #120]	; (8003898 <OSSchedUnlock+0x88>)
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d004      	beq.n	800382e <OSSchedUnlock+0x1e>
       *p_err = OS_ERR_SCHED_UNLOCK_ISR;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f646 5265 	movw	r2, #28005	; 0x6d65
 800382a:	801a      	strh	r2, [r3, #0]
        return;
 800382c:	e030      	b.n	8003890 <OSSchedUnlock+0x80>
    }
#endif

    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Make sure multitasking is running                      */
 800382e:	4b1b      	ldr	r3, [pc, #108]	; (800389c <OSSchedUnlock+0x8c>)
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d004      	beq.n	8003840 <OSSchedUnlock+0x30>
       *p_err = OS_ERR_OS_NOT_RUNNING;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f645 6289 	movw	r2, #24201	; 0x5e89
 800383c:	801a      	strh	r2, [r3, #0]
        return;
 800383e:	e027      	b.n	8003890 <OSSchedUnlock+0x80>
    }

    if (OSSchedLockNestingCtr == (OS_NESTING_CTR)0) {       /* See if the scheduler is locked                         */
 8003840:	4b17      	ldr	r3, [pc, #92]	; (80038a0 <OSSchedUnlock+0x90>)
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d104      	bne.n	8003852 <OSSchedUnlock+0x42>
       *p_err = OS_ERR_SCHED_NOT_LOCKED;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f646 5264 	movw	r2, #28004	; 0x6d64
 800384e:	801a      	strh	r2, [r3, #0]
        return;
 8003850:	e01e      	b.n	8003890 <OSSchedUnlock+0x80>
    }

    CPU_CRITICAL_ENTER();
 8003852:	f7fc fd45 	bl	80002e0 <CPU_SR_Save>
 8003856:	60f8      	str	r0, [r7, #12]
    OSSchedLockNestingCtr--;                                /* Decrement lock nesting level                           */
 8003858:	4b11      	ldr	r3, [pc, #68]	; (80038a0 <OSSchedUnlock+0x90>)
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	3b01      	subs	r3, #1
 800385e:	b2da      	uxtb	r2, r3
 8003860:	4b0f      	ldr	r3, [pc, #60]	; (80038a0 <OSSchedUnlock+0x90>)
 8003862:	701a      	strb	r2, [r3, #0]
    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {
 8003864:	4b0e      	ldr	r3, [pc, #56]	; (80038a0 <OSSchedUnlock+0x90>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d007      	beq.n	800387c <OSSchedUnlock+0x6c>
        CPU_CRITICAL_EXIT();                                /* Scheduler is still locked                              */
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f7fc fd3b 	bl	80002e8 <CPU_SR_Restore>
       *p_err = OS_ERR_SCHED_LOCKED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f646 5263 	movw	r2, #28003	; 0x6d63
 8003878:	801a      	strh	r2, [r3, #0]
        return;
 800387a:	e009      	b.n	8003890 <OSSchedUnlock+0x80>
    }

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
    OS_SchedLockTimeMeasStop();
 800387c:	f000 fc98 	bl	80041b0 <OS_SchedLockTimeMeasStop>
#endif

    CPU_CRITICAL_EXIT();                                    /* Scheduler should be re-enabled                         */
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f7fc fd31 	bl	80002e8 <CPU_SR_Restore>
    OSSched();                                              /* Run the scheduler                                      */
 8003886:	f7ff ff33 	bl	80036f0 <OSSched>
   *p_err = OS_ERR_NONE;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	801a      	strh	r2, [r3, #0]
}
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	200026d8 	.word	0x200026d8
 800389c:	20002451 	.word	0x20002451
 80038a0:	20002440 	.word	0x20002440

080038a4 <OSStart>:
*              2) OSStart() is not supposed to return.  If it does, that would be considered a fatal error.
************************************************************************************************************************
*/

void  OSStart (OS_ERR  *p_err)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    if (OSRunning == OS_STATE_OS_STOPPED) {
 80038ac:	4b17      	ldr	r3, [pc, #92]	; (800390c <OSStart+0x68>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d123      	bne.n	80038fc <OSStart+0x58>
        OSPrioHighRdy   = OS_PrioGetHighest();              /* Find the highest priority                              */
 80038b4:	f001 fb34 	bl	8004f20 <OS_PrioGetHighest>
 80038b8:	4603      	mov	r3, r0
 80038ba:	461a      	mov	r2, r3
 80038bc:	4b14      	ldr	r3, [pc, #80]	; (8003910 <OSStart+0x6c>)
 80038be:	701a      	strb	r2, [r3, #0]
        OSPrioCur       = OSPrioHighRdy;
 80038c0:	4b13      	ldr	r3, [pc, #76]	; (8003910 <OSStart+0x6c>)
 80038c2:	781a      	ldrb	r2, [r3, #0]
 80038c4:	4b13      	ldr	r3, [pc, #76]	; (8003914 <OSStart+0x70>)
 80038c6:	701a      	strb	r2, [r3, #0]
        OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;
 80038c8:	4b11      	ldr	r3, [pc, #68]	; (8003910 <OSStart+0x6c>)
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	4619      	mov	r1, r3
 80038ce:	4a12      	ldr	r2, [pc, #72]	; (8003918 <OSStart+0x74>)
 80038d0:	460b      	mov	r3, r1
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	440b      	add	r3, r1
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	4413      	add	r3, r2
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a0f      	ldr	r2, [pc, #60]	; (800391c <OSStart+0x78>)
 80038de:	6013      	str	r3, [r2, #0]
        OSTCBCurPtr     = OSTCBHighRdyPtr;
 80038e0:	4b0e      	ldr	r3, [pc, #56]	; (800391c <OSStart+0x78>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a0e      	ldr	r2, [pc, #56]	; (8003920 <OSStart+0x7c>)
 80038e6:	6013      	str	r3, [r2, #0]
        OSRunning       = OS_STATE_OS_RUNNING;
 80038e8:	4b08      	ldr	r3, [pc, #32]	; (800390c <OSStart+0x68>)
 80038ea:	2201      	movs	r2, #1
 80038ec:	701a      	strb	r2, [r3, #0]
        OSStartHighRdy();                                   /* Execute target specific code to start task             */
 80038ee:	f7fc fc87 	bl	8000200 <OSStartHighRdy>
       *p_err           = OS_ERR_FATAL_RETURN;              /* OSStart() is not supposed to return                    */
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f643 2299 	movw	r2, #15001	; 0x3a99
 80038f8:	801a      	strh	r2, [r3, #0]
    } else {
       *p_err           = OS_ERR_OS_RUNNING;                /* OS is already running                                  */
    }
}
 80038fa:	e003      	b.n	8003904 <OSStart+0x60>
        OSTCBCurPtr     = OSTCBHighRdyPtr;
        OSRunning       = OS_STATE_OS_RUNNING;
        OSStartHighRdy();                                   /* Execute target specific code to start task             */
       *p_err           = OS_ERR_FATAL_RETURN;              /* OSStart() is not supposed to return                    */
    } else {
       *p_err           = OS_ERR_OS_RUNNING;                /* OS is already running                                  */
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f645 628a 	movw	r2, #24202	; 0x5e8a
 8003902:	801a      	strh	r2, [r3, #0]
    }
}
 8003904:	bf00      	nop
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	20002451 	.word	0x20002451
 8003910:	200025d4 	.word	0x200025d4
 8003914:	200025e0 	.word	0x200025e0
 8003918:	20002454 	.word	0x20002454
 800391c:	200026b8 	.word	0x200026b8
 8003920:	200026ac 	.word	0x200026ac

08003924 <OS_IdleTask>:
*              3) This hook has been added to allow you to do such things as STOP the CPU to conserve power.
************************************************************************************************************************
*/

void  OS_IdleTask (void  *p_arg)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
    CPU_SR_ALLOC();
 800392c:	2300      	movs	r3, #0
 800392e:	60fb      	str	r3, [r7, #12]


    (void)&p_arg;                                           /* Prevent compiler warning for not using 'p_arg'         */

    while (DEF_ON) {
        CPU_CRITICAL_ENTER();
 8003930:	f7fc fcd6 	bl	80002e0 <CPU_SR_Save>
 8003934:	60f8      	str	r0, [r7, #12]
        OSIdleTaskCtr++;
 8003936:	4b08      	ldr	r3, [pc, #32]	; (8003958 <OS_IdleTask+0x34>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	3301      	adds	r3, #1
 800393c:	4a06      	ldr	r2, [pc, #24]	; (8003958 <OS_IdleTask+0x34>)
 800393e:	6013      	str	r3, [r2, #0]
#if OS_CFG_STAT_TASK_EN > 0u
        OSStatTaskCtr++;
 8003940:	4b06      	ldr	r3, [pc, #24]	; (800395c <OS_IdleTask+0x38>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	3301      	adds	r3, #1
 8003946:	4a05      	ldr	r2, [pc, #20]	; (800395c <OS_IdleTask+0x38>)
 8003948:	6013      	str	r3, [r2, #0]
#endif
        CPU_CRITICAL_EXIT();
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f7fc fccc 	bl	80002e8 <CPU_SR_Restore>

        OSIdleTaskHook();                                   /* Call user definable HOOK                               */
 8003950:	f002 fa94 	bl	8005e7c <OSIdleTaskHook>
    }
 8003954:	e7ec      	b.n	8003930 <OS_IdleTask+0xc>
 8003956:	bf00      	nop
 8003958:	200028b8 	.word	0x200028b8
 800395c:	2000244c 	.word	0x2000244c

08003960 <OS_IdleTaskInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_IdleTaskInit (OS_ERR  *p_err)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b08c      	sub	sp, #48	; 0x30
 8003964:	af0a      	add	r7, sp, #40	; 0x28
 8003966:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    OSIdleTaskCtr = (OS_IDLE_CTR)0;
 8003968:	4b10      	ldr	r3, [pc, #64]	; (80039ac <OS_IdleTaskInit+0x4c>)
 800396a:	2200      	movs	r2, #0
 800396c:	601a      	str	r2, [r3, #0]
                                                            /* ---------------- CREATE THE IDLE TASK ---------------- */
    OSTaskCreate((OS_TCB     *)&OSIdleTaskTCB,
 800396e:	4b10      	ldr	r3, [pc, #64]	; (80039b0 <OS_IdleTaskInit+0x50>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a10      	ldr	r2, [pc, #64]	; (80039b4 <OS_IdleTaskInit+0x54>)
 8003974:	6812      	ldr	r2, [r2, #0]
 8003976:	4910      	ldr	r1, [pc, #64]	; (80039b8 <OS_IdleTaskInit+0x58>)
 8003978:	6809      	ldr	r1, [r1, #0]
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	9008      	str	r0, [sp, #32]
 800397e:	200b      	movs	r0, #11
 8003980:	9007      	str	r0, [sp, #28]
 8003982:	2000      	movs	r0, #0
 8003984:	9006      	str	r0, [sp, #24]
 8003986:	2000      	movs	r0, #0
 8003988:	9005      	str	r0, [sp, #20]
 800398a:	2000      	movs	r0, #0
 800398c:	9004      	str	r0, [sp, #16]
 800398e:	9103      	str	r1, [sp, #12]
 8003990:	9202      	str	r2, [sp, #8]
 8003992:	9301      	str	r3, [sp, #4]
 8003994:	231f      	movs	r3, #31
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	2300      	movs	r3, #0
 800399a:	4a08      	ldr	r2, [pc, #32]	; (80039bc <OS_IdleTaskInit+0x5c>)
 800399c:	4908      	ldr	r1, [pc, #32]	; (80039c0 <OS_IdleTaskInit+0x60>)
 800399e:	4809      	ldr	r0, [pc, #36]	; (80039c4 <OS_IdleTaskInit+0x64>)
 80039a0:	f7fe fd6e 	bl	8002480 <OSTaskCreate>
                 (OS_MSG_QTY  )0u,
                 (OS_TICK     )0u,
                 (void       *)0,
                 (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR | OS_OPT_TASK_NO_TLS),
                 (OS_ERR     *)p_err);
}
 80039a4:	bf00      	nop
 80039a6:	3708      	adds	r7, #8
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	200028b8 	.word	0x200028b8
 80039b0:	0800e5e0 	.word	0x0800e5e0
 80039b4:	0800e5e4 	.word	0x0800e5e4
 80039b8:	0800e5e8 	.word	0x0800e5e8
 80039bc:	08003925 	.word	0x08003925
 80039c0:	0800e4e8 	.word	0x0800e4e8
 80039c4:	200027a8 	.word	0x200027a8

080039c8 <OS_Pend>:

void  OS_Pend (OS_PEND_DATA  *p_pend_data,
               OS_PEND_OBJ   *p_obj,
               OS_STATE       pending_on,
               OS_TICK        timeout)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	603b      	str	r3, [r7, #0]
 80039d4:	4613      	mov	r3, r2
 80039d6:	71fb      	strb	r3, [r7, #7]
    OS_PEND_LIST  *p_pend_list;



    OSTCBCurPtr->PendOn     = pending_on;                    /* Resource not available, wait until it is              */
 80039d8:	4b1b      	ldr	r3, [pc, #108]	; (8003a48 <OS_Pend+0x80>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	79fa      	ldrb	r2, [r7, #7]
 80039de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    OSTCBCurPtr->PendStatus = OS_STATUS_PEND_OK;
 80039e2:	4b19      	ldr	r3, [pc, #100]	; (8003a48 <OS_Pend+0x80>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    OS_TaskBlock(OSTCBCurPtr,                                /* Block the task and add it to the tick list if needed  */
 80039ec:	4b16      	ldr	r3, [pc, #88]	; (8003a48 <OS_Pend+0x80>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6839      	ldr	r1, [r7, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 fc06 	bl	8004204 <OS_TaskBlock>
                 timeout);

    if (p_obj != (OS_PEND_OBJ *)0) {                         /* Add the current task to the pend list ...             */
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d011      	beq.n	8003a22 <OS_Pend+0x5a>
        p_pend_list             = &p_obj->PendList;          /* ... if there is an object to pend on                  */
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	3308      	adds	r3, #8
 8003a02:	617b      	str	r3, [r7, #20]
        p_pend_data->PendObjPtr = p_obj;                     /* Save the pointer to the object pending on             */
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	68ba      	ldr	r2, [r7, #8]
 8003a08:	60da      	str	r2, [r3, #12]
        OS_PendDataInit((OS_TCB       *)OSTCBCurPtr,         /* Initialize the remaining field                        */
 8003a0a:	4b0f      	ldr	r3, [pc, #60]	; (8003a48 <OS_Pend+0x80>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	68f9      	ldr	r1, [r7, #12]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 f81a 	bl	8003a4c <OS_PendDataInit>
                        (OS_PEND_DATA *)p_pend_data,
                        (OS_OBJ_QTY    )1);
        OS_PendListInsertPrio(p_pend_list,                   /* Insert in the pend list in priority order             */
 8003a18:	68f9      	ldr	r1, [r7, #12]
 8003a1a:	6978      	ldr	r0, [r7, #20]
 8003a1c:	f000 f8ec 	bl	8003bf8 <OS_PendListInsertPrio>
 8003a20:	e008      	b.n	8003a34 <OS_Pend+0x6c>
                              p_pend_data);
    } else {
        OSTCBCurPtr->PendDataTblEntries = (OS_OBJ_QTY    )0; /* If no object being pended on the clear these fields   */
 8003a22:	4b09      	ldr	r3, [pc, #36]	; (8003a48 <OS_Pend+0x80>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        OSTCBCurPtr->PendDataTblPtr     = (OS_PEND_DATA *)0; /* ... in the TCB                                        */
 8003a2c:	4b06      	ldr	r3, [pc, #24]	; (8003a48 <OS_Pend+0x80>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2200      	movs	r2, #0
 8003a32:	631a      	str	r2, [r3, #48]	; 0x30
    }
#if OS_CFG_DBG_EN > 0u
    OS_PendDbgNameAdd(p_obj,
 8003a34:	4b04      	ldr	r3, [pc, #16]	; (8003a48 <OS_Pend+0x80>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4619      	mov	r1, r3
 8003a3a:	68b8      	ldr	r0, [r7, #8]
 8003a3c:	f000 f83c 	bl	8003ab8 <OS_PendDbgNameAdd>
                      OSTCBCurPtr);
#endif
}
 8003a40:	bf00      	nop
 8003a42:	3718      	adds	r7, #24
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	200026ac 	.word	0x200026ac

08003a4c <OS_PendDataInit>:
*/

void  OS_PendDataInit (OS_TCB        *p_tcb,
                       OS_PEND_DATA  *p_pend_data_tbl,
                       OS_OBJ_QTY     tbl_size)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b087      	sub	sp, #28
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	4613      	mov	r3, r2
 8003a58:	80fb      	strh	r3, [r7, #6]
    OS_OBJ_QTY  i;



    p_tcb->PendDataTblEntries = tbl_size;                   /* Link the TCB to the beginning of the table             */
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	88fa      	ldrh	r2, [r7, #6]
 8003a5e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    p_tcb->PendDataTblPtr     = p_pend_data_tbl;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	68ba      	ldr	r2, [r7, #8]
 8003a66:	631a      	str	r2, [r3, #48]	; 0x30

    for (i = 0u; i < tbl_size; i++) {
 8003a68:	2300      	movs	r3, #0
 8003a6a:	82fb      	strh	r3, [r7, #22]
 8003a6c:	e01a      	b.n	8003aa4 <OS_PendDataInit+0x58>
        p_pend_data_tbl->NextPtr    = (OS_PEND_DATA *)0;    /* Initialize all the fields                              */
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	2200      	movs	r2, #0
 8003a72:	605a      	str	r2, [r3, #4]
        p_pend_data_tbl->PrevPtr    = (OS_PEND_DATA *)0;
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	2200      	movs	r2, #0
 8003a78:	601a      	str	r2, [r3, #0]
        p_pend_data_tbl->RdyObjPtr  = (OS_PEND_OBJ  *)0;
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	611a      	str	r2, [r3, #16]
        p_pend_data_tbl->RdyMsgPtr  = (void         *)0;
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	2200      	movs	r2, #0
 8003a84:	615a      	str	r2, [r3, #20]
        p_pend_data_tbl->RdyMsgSize = (OS_MSG_SIZE   )0;
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	831a      	strh	r2, [r3, #24]
        p_pend_data_tbl->RdyTS      = (CPU_TS        )0;
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	61da      	str	r2, [r3, #28]
        p_pend_data_tbl->TCBPtr     = p_tcb;                /* Every entry points back to the TCB of the task         */
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	609a      	str	r2, [r3, #8]
        p_pend_data_tbl++;
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	3320      	adds	r3, #32
 8003a9c:	60bb      	str	r3, [r7, #8]


    p_tcb->PendDataTblEntries = tbl_size;                   /* Link the TCB to the beginning of the table             */
    p_tcb->PendDataTblPtr     = p_pend_data_tbl;

    for (i = 0u; i < tbl_size; i++) {
 8003a9e:	8afb      	ldrh	r3, [r7, #22]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	82fb      	strh	r3, [r7, #22]
 8003aa4:	8afa      	ldrh	r2, [r7, #22]
 8003aa6:	88fb      	ldrh	r3, [r7, #6]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d3e0      	bcc.n	8003a6e <OS_PendDataInit+0x22>
        p_pend_data_tbl->RdyMsgSize = (OS_MSG_SIZE   )0;
        p_pend_data_tbl->RdyTS      = (CPU_TS        )0;
        p_pend_data_tbl->TCBPtr     = p_tcb;                /* Every entry points back to the TCB of the task         */
        p_pend_data_tbl++;
    }
}
 8003aac:	bf00      	nop
 8003aae:	371c      	adds	r7, #28
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bc80      	pop	{r7}
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop

08003ab8 <OS_PendDbgNameAdd>:


#if OS_CFG_DBG_EN > 0u
void  OS_PendDbgNameAdd (OS_PEND_OBJ  *p_obj,
                         OS_TCB       *p_tcb)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b087      	sub	sp, #28
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
    OS_PEND_LIST  *p_pend_list;
    OS_PEND_DATA  *p_pend_data;
    OS_TCB        *p_tcb1;


    if (p_obj != (OS_PEND_OBJ *)0) {
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d012      	beq.n	8003aee <OS_PendDbgNameAdd+0x36>
        p_tcb->DbgNamePtr =  p_obj->NamePtr;                /* Task pending on this object ... save name in TCB       */
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
        p_pend_list       = &p_obj->PendList;               /* Find name of HP task pending on this object ...        */
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	3308      	adds	r3, #8
 8003ad6:	617b      	str	r3, [r7, #20]
        p_pend_data       =  p_pend_list->HeadPtr;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	613b      	str	r3, [r7, #16]
        p_tcb1            =  p_pend_data->TCBPtr;
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	60fb      	str	r3, [r7, #12]
        p_obj->DbgNamePtr = p_tcb1->NamePtr;                /* ... Save in object                                     */
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6a1a      	ldr	r2, [r3, #32]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	61da      	str	r2, [r3, #28]
            default:
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)" ");
                 break;
        }
    }
}
 8003aec:	e016      	b.n	8003b1c <OS_PendDbgNameAdd+0x64>
        p_pend_list       = &p_obj->PendList;               /* Find name of HP task pending on this object ...        */
        p_pend_data       =  p_pend_list->HeadPtr;
        p_tcb1            =  p_pend_data->TCBPtr;
        p_obj->DbgNamePtr = p_tcb1->NamePtr;                /* ... Save in object                                     */
    } else {
        switch (p_tcb->PendOn) {
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d002      	beq.n	8003afe <OS_PendDbgNameAdd+0x46>
 8003af8:	2b07      	cmp	r3, #7
 8003afa:	d005      	beq.n	8003b08 <OS_PendDbgNameAdd+0x50>
 8003afc:	e009      	b.n	8003b12 <OS_PendDbgNameAdd+0x5a>
            case OS_TASK_PEND_ON_TASK_Q:
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)"Task Q");
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	4a09      	ldr	r2, [pc, #36]	; (8003b28 <OS_PendDbgNameAdd+0x70>)
 8003b02:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
                 break;
 8003b06:	e009      	b.n	8003b1c <OS_PendDbgNameAdd+0x64>

            case OS_TASK_PEND_ON_TASK_SEM:
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)"Task Sem");
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	4a08      	ldr	r2, [pc, #32]	; (8003b2c <OS_PendDbgNameAdd+0x74>)
 8003b0c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
                 break;
 8003b10:	e004      	b.n	8003b1c <OS_PendDbgNameAdd+0x64>

            default:
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)" ");
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	4a06      	ldr	r2, [pc, #24]	; (8003b30 <OS_PendDbgNameAdd+0x78>)
 8003b16:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
                 break;
 8003b1a:	bf00      	nop
        }
    }
}
 8003b1c:	bf00      	nop
 8003b1e:	371c      	adds	r7, #28
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bc80      	pop	{r7}
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	0800e4fc 	.word	0x0800e4fc
 8003b2c:	0800e504 	.word	0x0800e504
 8003b30:	0800e510 	.word	0x0800e510

08003b34 <OS_PendDbgNameRemove>:



void  OS_PendDbgNameRemove (OS_PEND_OBJ  *p_obj,
                            OS_TCB       *p_tcb)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b087      	sub	sp, #28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
    OS_PEND_LIST  *p_pend_list;
    OS_PEND_DATA  *p_pend_data;
    OS_TCB        *p_tcb1;


    p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)" ");          /* Remove name of object pended on for readied task       */
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	4a0d      	ldr	r2, [pc, #52]	; (8003b78 <OS_PendDbgNameRemove+0x44>)
 8003b42:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    p_pend_list       = &p_obj->PendList;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	3308      	adds	r3, #8
 8003b4a:	617b      	str	r3, [r7, #20]
    p_pend_data       =  p_pend_list->HeadPtr;
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	613b      	str	r3, [r7, #16]
    if (p_pend_data  != (OS_PEND_DATA *)0) {
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d007      	beq.n	8003b68 <OS_PendDbgNameRemove+0x34>
        p_tcb1            = p_pend_data->TCBPtr;
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	60fb      	str	r3, [r7, #12]
        p_obj->DbgNamePtr = p_tcb1->NamePtr;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6a1a      	ldr	r2, [r3, #32]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	61da      	str	r2, [r3, #28]
    } else {
        p_obj->DbgNamePtr = (CPU_CHAR *)((void *)" ");      /* No other task pending on object                        */
    }
}
 8003b66:	e002      	b.n	8003b6e <OS_PendDbgNameRemove+0x3a>
    p_pend_data       =  p_pend_list->HeadPtr;
    if (p_pend_data  != (OS_PEND_DATA *)0) {
        p_tcb1            = p_pend_data->TCBPtr;
        p_obj->DbgNamePtr = p_tcb1->NamePtr;
    } else {
        p_obj->DbgNamePtr = (CPU_CHAR *)((void *)" ");      /* No other task pending on object                        */
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a03      	ldr	r2, [pc, #12]	; (8003b78 <OS_PendDbgNameRemove+0x44>)
 8003b6c:	61da      	str	r2, [r3, #28]
    }
}
 8003b6e:	bf00      	nop
 8003b70:	371c      	adds	r7, #28
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bc80      	pop	{r7}
 8003b76:	4770      	bx	lr
 8003b78:	0800e510 	.word	0x0800e510

08003b7c <OS_PendListChangePrio>:
*              2) It's assumed that the TCB contains the NEW priority in its .Prio field.
************************************************************************************************************************
*/

void  OS_PendListChangePrio (OS_TCB   *p_tcb)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
    OS_PEND_DATA   *p_pend_data;
    OS_PEND_LIST   *p_pend_list;
    OS_PEND_OBJ    *p_obj;


    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to first wait list entry                 */
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b88:	613b      	str	r3, [r7, #16]
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get the number of pend list task is in         */
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b90:	82fb      	strh	r3, [r7, #22]

    while (n_pend_list > 0u) {
 8003b92:	e017      	b.n	8003bc4 <OS_PendListChangePrio+0x48>
        p_obj       =  p_pend_data->PendObjPtr;                     /* Get pointer to pend list                       */
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	60fb      	str	r3, [r7, #12]
        p_pend_list = &p_obj->PendList;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	3308      	adds	r3, #8
 8003b9e:	60bb      	str	r3, [r7, #8]
        if (p_pend_list->NbrEntries > 1u) {                         /* Only move if multiple entries in the list      */
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	891b      	ldrh	r3, [r3, #8]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d907      	bls.n	8003bb8 <OS_PendListChangePrio+0x3c>
            OS_PendListRemove1(p_pend_list,                         /* Remove entry from current position             */
 8003ba8:	6939      	ldr	r1, [r7, #16]
 8003baa:	68b8      	ldr	r0, [r7, #8]
 8003bac:	f000 f8c2 	bl	8003d34 <OS_PendListRemove1>
                               p_pend_data);
            OS_PendListInsertPrio(p_pend_list,                      /* INSERT it back in the list                     */
 8003bb0:	6939      	ldr	r1, [r7, #16]
 8003bb2:	68b8      	ldr	r0, [r7, #8]
 8003bb4:	f000 f820 	bl	8003bf8 <OS_PendListInsertPrio>
                                  p_pend_data);
        }
        p_pend_data++;                                              /* Point to next wait list                        */
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	3320      	adds	r3, #32
 8003bbc:	613b      	str	r3, [r7, #16]
        n_pend_list--;
 8003bbe:	8afb      	ldrh	r3, [r7, #22]
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	82fb      	strh	r3, [r7, #22]


    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to first wait list entry                 */
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get the number of pend list task is in         */

    while (n_pend_list > 0u) {
 8003bc4:	8afb      	ldrh	r3, [r7, #22]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1e4      	bne.n	8003b94 <OS_PendListChangePrio+0x18>
                                  p_pend_data);
        }
        p_pend_data++;                                              /* Point to next wait list                        */
        n_pend_list--;
    }
}
 8003bca:	bf00      	nop
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop

08003bd4 <OS_PendListInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application must not call it.
************************************************************************************************************************
*/

void  OS_PendListInit (OS_PEND_LIST  *p_pend_list)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
    p_pend_list->HeadPtr    = (OS_PEND_DATA *)0;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	601a      	str	r2, [r3, #0]
    p_pend_list->TailPtr    = (OS_PEND_DATA *)0;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	605a      	str	r2, [r3, #4]
    p_pend_list->NbrEntries = (OS_OBJ_QTY    )0;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	811a      	strh	r2, [r3, #8]
}
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bc80      	pop	{r7}
 8003bf6:	4770      	bx	lr

08003bf8 <OS_PendListInsertPrio>:
************************************************************************************************************************
*/

void  OS_PendListInsertPrio (OS_PEND_LIST  *p_pend_list,
                             OS_PEND_DATA  *p_pend_data)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b089      	sub	sp, #36	; 0x24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
    OS_PEND_DATA  *p_pend_data_prev;
    OS_PEND_DATA  *p_pend_data_next;



    p_tcb = p_pend_data->TCBPtr;                                      /* Obtain the priority of the task to insert    */
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	61bb      	str	r3, [r7, #24]
    prio  = p_tcb->Prio;
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8003c0e:	75fb      	strb	r3, [r7, #23]
    if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0) {                   /* CASE 0: Insert when there are no entries     */
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	891b      	ldrh	r3, [r3, #8]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10f      	bne.n	8003c38 <OS_PendListInsertPrio+0x40>
        p_pend_list->NbrEntries = (OS_OBJ_QTY)1;                      /*         This is the first entry              */
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	811a      	strh	r2, [r3, #8]
        p_pend_data->NextPtr    = (OS_PEND_DATA *)0;                  /*         No other OS_PEND_DATAs in the list   */
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2200      	movs	r2, #0
 8003c22:	605a      	str	r2, [r3, #4]
        p_pend_data->PrevPtr    = (OS_PEND_DATA *)0;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	2200      	movs	r2, #0
 8003c28:	601a      	str	r2, [r3, #0]
        p_pend_list->HeadPtr    = p_pend_data;                        /*                                              */
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	601a      	str	r2, [r3, #0]
        p_pend_list->TailPtr    = p_pend_data;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	605a      	str	r2, [r3, #4]
                p_pend_data_prev->NextPtr  = p_pend_data;
                p_pend_data_next->PrevPtr  = p_pend_data;
            }
        }
    }
}
 8003c36:	e04d      	b.n	8003cd4 <OS_PendListInsertPrio+0xdc>
        p_pend_data->NextPtr    = (OS_PEND_DATA *)0;                  /*         No other OS_PEND_DATAs in the list   */
        p_pend_data->PrevPtr    = (OS_PEND_DATA *)0;
        p_pend_list->HeadPtr    = p_pend_data;                        /*                                              */
        p_pend_list->TailPtr    = p_pend_data;
    } else {
        p_pend_list->NbrEntries++;                                    /* CASE 1: One more OS_PEND_DATA in the list    */
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	891b      	ldrh	r3, [r3, #8]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	811a      	strh	r2, [r3, #8]
        p_pend_data_next = p_pend_list->HeadPtr;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	61fb      	str	r3, [r7, #28]
        while (p_pend_data_next != (OS_PEND_DATA *)0) {               /*         Find the position where to insert    */
 8003c4a:	e00b      	b.n	8003c64 <OS_PendListInsertPrio+0x6c>
            p_tcb_next   = p_pend_data_next->TCBPtr;
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	613b      	str	r3, [r7, #16]
            if (prio < p_tcb_next->Prio) {
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8003c58:	7dfa      	ldrb	r2, [r7, #23]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d306      	bcc.n	8003c6c <OS_PendListInsertPrio+0x74>
                break;                                                /*         Found! ... insert BEFORE current     */
            } else {
                p_pend_data_next = p_pend_data_next->NextPtr;         /*         Not Found, follow the list           */
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	61fb      	str	r3, [r7, #28]
        p_pend_list->HeadPtr    = p_pend_data;                        /*                                              */
        p_pend_list->TailPtr    = p_pend_data;
    } else {
        p_pend_list->NbrEntries++;                                    /* CASE 1: One more OS_PEND_DATA in the list    */
        p_pend_data_next = p_pend_list->HeadPtr;
        while (p_pend_data_next != (OS_PEND_DATA *)0) {               /*         Find the position where to insert    */
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1f0      	bne.n	8003c4c <OS_PendListInsertPrio+0x54>
 8003c6a:	e000      	b.n	8003c6e <OS_PendListInsertPrio+0x76>
            p_tcb_next   = p_pend_data_next->TCBPtr;
            if (prio < p_tcb_next->Prio) {
                break;                                                /*         Found! ... insert BEFORE current     */
 8003c6c:	bf00      	nop
            } else {
                p_pend_data_next = p_pend_data_next->NextPtr;         /*         Not Found, follow the list           */
            }
        }
        if (p_pend_data_next == (OS_PEND_DATA *)0) {                  /*         TCB to insert is lower in prio       */
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10f      	bne.n	8003c94 <OS_PendListInsertPrio+0x9c>
            p_pend_data->NextPtr      = (OS_PEND_DATA *)0;            /*         ... insert at the tail.              */
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	2200      	movs	r2, #0
 8003c78:	605a      	str	r2, [r3, #4]
            p_pend_data_prev          = p_pend_list->TailPtr;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	60fb      	str	r3, [r7, #12]
            p_pend_data->PrevPtr      = p_pend_data_prev;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	601a      	str	r2, [r3, #0]
            p_pend_data_prev->NextPtr = p_pend_data;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	605a      	str	r2, [r3, #4]
            p_pend_list->TailPtr      = p_pend_data;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	605a      	str	r2, [r3, #4]
                p_pend_data_prev->NextPtr  = p_pend_data;
                p_pend_data_next->PrevPtr  = p_pend_data;
            }
        }
    }
}
 8003c92:	e01f      	b.n	8003cd4 <OS_PendListInsertPrio+0xdc>
            p_pend_data_prev          = p_pend_list->TailPtr;
            p_pend_data->PrevPtr      = p_pend_data_prev;
            p_pend_data_prev->NextPtr = p_pend_data;
            p_pend_list->TailPtr      = p_pend_data;
        } else {
            if (p_pend_data_next->PrevPtr == (OS_PEND_DATA *)0) {     /*         Is new TCB highest priority?         */
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10c      	bne.n	8003cb6 <OS_PendListInsertPrio+0xbe>
                p_pend_data_next->PrevPtr  = p_pend_data;             /*         Yes, insert as new Head of list      */
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	601a      	str	r2, [r3, #0]
                p_pend_data->PrevPtr       = (OS_PEND_DATA *)0;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
                p_pend_data->NextPtr       = p_pend_data_next;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	69fa      	ldr	r2, [r7, #28]
 8003cac:	605a      	str	r2, [r3, #4]
                p_pend_list->HeadPtr       = p_pend_data;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	601a      	str	r2, [r3, #0]
                p_pend_data_prev->NextPtr  = p_pend_data;
                p_pend_data_next->PrevPtr  = p_pend_data;
            }
        }
    }
}
 8003cb4:	e00e      	b.n	8003cd4 <OS_PendListInsertPrio+0xdc>
                p_pend_data_next->PrevPtr  = p_pend_data;             /*         Yes, insert as new Head of list      */
                p_pend_data->PrevPtr       = (OS_PEND_DATA *)0;
                p_pend_data->NextPtr       = p_pend_data_next;
                p_pend_list->HeadPtr       = p_pend_data;
            } else {
                p_pend_data_prev           = p_pend_data_next->PrevPtr;/*        No,  insert in between two entries   */
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	60fb      	str	r3, [r7, #12]
                p_pend_data->PrevPtr       = p_pend_data_prev;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	601a      	str	r2, [r3, #0]
                p_pend_data->NextPtr       = p_pend_data_next;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	69fa      	ldr	r2, [r7, #28]
 8003cc6:	605a      	str	r2, [r3, #4]
                p_pend_data_prev->NextPtr  = p_pend_data;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	605a      	str	r2, [r3, #4]
                p_pend_data_next->PrevPtr  = p_pend_data;
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	683a      	ldr	r2, [r7, #0]
 8003cd2:	601a      	str	r2, [r3, #0]
            }
        }
    }
}
 8003cd4:	bf00      	nop
 8003cd6:	3724      	adds	r7, #36	; 0x24
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bc80      	pop	{r7}
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop

08003ce0 <OS_PendListRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_PendListRemove (OS_TCB  *p_tcb)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
    OS_PEND_LIST   *p_pend_list;
    OS_PEND_OBJ    *p_obj;



    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to the first OS_PEND_DATA to remove      */
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cec:	613b      	str	r3, [r7, #16]
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get number of entries in the table             */
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cf4:	82fb      	strh	r3, [r7, #22]

    while (n_pend_list > (OS_OBJ_QTY)0) {
 8003cf6:	e00f      	b.n	8003d18 <OS_PendListRemove+0x38>
        p_obj       =  p_pend_data->PendObjPtr;                     /* Get pointer to pend list                       */
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	60fb      	str	r3, [r7, #12]
        p_pend_list = &p_obj->PendList;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	3308      	adds	r3, #8
 8003d02:	60bb      	str	r3, [r7, #8]
        OS_PendListRemove1(p_pend_list,
 8003d04:	6939      	ldr	r1, [r7, #16]
 8003d06:	68b8      	ldr	r0, [r7, #8]
 8003d08:	f000 f814 	bl	8003d34 <OS_PendListRemove1>
                           p_pend_data);
        p_pend_data++;
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	3320      	adds	r3, #32
 8003d10:	613b      	str	r3, [r7, #16]
        n_pend_list--;
 8003d12:	8afb      	ldrh	r3, [r7, #22]
 8003d14:	3b01      	subs	r3, #1
 8003d16:	82fb      	strh	r3, [r7, #22]


    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to the first OS_PEND_DATA to remove      */
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get number of entries in the table             */

    while (n_pend_list > (OS_OBJ_QTY)0) {
 8003d18:	8afb      	ldrh	r3, [r7, #22]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1ec      	bne.n	8003cf8 <OS_PendListRemove+0x18>
        OS_PendListRemove1(p_pend_list,
                           p_pend_data);
        p_pend_data++;
        n_pend_list--;
    }
    p_tcb->PendDataTblEntries = (OS_OBJ_QTY    )0;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    p_tcb->PendDataTblPtr     = (OS_PEND_DATA *)0;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d2c:	bf00      	nop
 8003d2e:	3718      	adds	r7, #24
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <OS_PendListRemove1>:
************************************************************************************************************************
*/

void  OS_PendListRemove1 (OS_PEND_LIST  *p_pend_list,
                          OS_PEND_DATA  *p_pend_data)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
    OS_PEND_DATA  *p_prev;
    OS_PEND_DATA  *p_next;



    if (p_pend_list->NbrEntries == 1u) {
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	891b      	ldrh	r3, [r3, #8]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d106      	bne.n	8003d54 <OS_PendListRemove1+0x20>
        p_pend_list->HeadPtr = (OS_PEND_DATA *)0;           /* Only one entry in the pend list                        */
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]
        p_pend_list->TailPtr = (OS_PEND_DATA *)0;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	605a      	str	r2, [r3, #4]
 8003d52:	e027      	b.n	8003da4 <OS_PendListRemove1+0x70>

    } else if (p_pend_data->PrevPtr == (OS_PEND_DATA *)0) { /* See if entry is at the head of the list                */
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d109      	bne.n	8003d70 <OS_PendListRemove1+0x3c>
        p_next               = p_pend_data->NextPtr;        /* Yes                                                    */
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	60fb      	str	r3, [r7, #12]
        p_next->PrevPtr      = (OS_PEND_DATA *)0;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]
        p_pend_list->HeadPtr = p_next;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	e019      	b.n	8003da4 <OS_PendListRemove1+0x70>

    } else if (p_pend_data->NextPtr == (OS_PEND_DATA *)0) { /* See if entry is at the tail of the list                */
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d109      	bne.n	8003d8c <OS_PendListRemove1+0x58>
        p_prev               = p_pend_data->PrevPtr;        /* Yes                                                    */
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	60bb      	str	r3, [r7, #8]
        p_prev->NextPtr      = (OS_PEND_DATA *)0;
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	2200      	movs	r2, #0
 8003d82:	605a      	str	r2, [r3, #4]
        p_pend_list->TailPtr = p_prev;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68ba      	ldr	r2, [r7, #8]
 8003d88:	605a      	str	r2, [r3, #4]
 8003d8a:	e00b      	b.n	8003da4 <OS_PendListRemove1+0x70>

    } else {
        p_prev               = p_pend_data->PrevPtr;        /* Remove from inside the list                            */
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	60bb      	str	r3, [r7, #8]
        p_next               = p_pend_data->NextPtr;
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	60fb      	str	r3, [r7, #12]
        p_prev->NextPtr      = p_next;
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	605a      	str	r2, [r3, #4]
        p_next->PrevPtr      = p_prev;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	68ba      	ldr	r2, [r7, #8]
 8003da2:	601a      	str	r2, [r3, #0]
    }
    p_pend_list->NbrEntries--;                              /* One less entry in the list                             */
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	891b      	ldrh	r3, [r3, #8]
 8003da8:	3b01      	subs	r3, #1
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	811a      	strh	r2, [r3, #8]
    p_pend_data->NextPtr = (OS_PEND_DATA *)0;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	2200      	movs	r2, #0
 8003db4:	605a      	str	r2, [r3, #4]
    p_pend_data->PrevPtr = (OS_PEND_DATA *)0;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]
}
 8003dbc:	bf00      	nop
 8003dbe:	3714      	adds	r7, #20
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bc80      	pop	{r7}
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop

08003dc8 <OS_Post>:
void  OS_Post (OS_PEND_OBJ  *p_obj,
               OS_TCB       *p_tcb,
               void         *p_void,
               OS_MSG_SIZE   msg_size,
               CPU_TS        ts)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af02      	add	r7, sp, #8
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
 8003dd4:	807b      	strh	r3, [r7, #2]
    switch (p_tcb->TaskState) {
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003ddc:	2b07      	cmp	r3, #7
 8003dde:	f200 8086 	bhi.w	8003eee <OS_Post+0x126>
 8003de2:	a201      	add	r2, pc, #4	; (adr r2, 8003de8 <OS_Post+0x20>)
 8003de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de8:	08003eef 	.word	0x08003eef
 8003dec:	08003eef 	.word	0x08003eef
 8003df0:	08003e09 	.word	0x08003e09
 8003df4:	08003e09 	.word	0x08003e09
 8003df8:	08003eef 	.word	0x08003eef
 8003dfc:	08003eef 	.word	0x08003eef
 8003e00:	08003e7f 	.word	0x08003e7f
 8003e04:	08003e7f 	.word	0x08003e7f
        case OS_TASK_STATE_DLY_SUSPENDED:                        /* Cannot Post a suspended task that was also dly'd  */
             break;

        case OS_TASK_STATE_PEND:
        case OS_TASK_STATE_PEND_TIMEOUT:
             if (p_tcb->PendOn == OS_TASK_PEND_ON_MULTI) {
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e0e:	2b03      	cmp	r3, #3
 8003e10:	d109      	bne.n	8003e26 <OS_Post+0x5e>
                 OS_Post1(p_obj,                                 /* Indicate which object was posted to               */
 8003e12:	887a      	ldrh	r2, [r7, #2]
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	68b9      	ldr	r1, [r7, #8]
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f000 f86a 	bl	8003ef8 <OS_Post1>
 8003e24:	e009      	b.n	8003e3a <OS_Post+0x72>
                          p_void,
                          msg_size,
                          ts);
             } else {
#if (OS_MSG_EN > 0u)
                 p_tcb->MsgPtr  = p_void;                        /* Deposit message in OS_TCB of task waiting         */
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	659a      	str	r2, [r3, #88]	; 0x58
                 p_tcb->MsgSize = msg_size;                      /* ... assuming posting a message                    */
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	887a      	ldrh	r2, [r7, #2]
 8003e30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
#endif
                 p_tcb->TS      = ts;
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	649a      	str	r2, [r3, #72]	; 0x48
             }
             if (p_obj != (OS_PEND_OBJ *)0) {
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d006      	beq.n	8003e4e <OS_Post+0x86>
                 OS_PendListRemove(p_tcb);                       /* Remove task from wait list(s)                     */
 8003e40:	68b8      	ldr	r0, [r7, #8]
 8003e42:	f7ff ff4d 	bl	8003ce0 <OS_PendListRemove>
#if OS_CFG_DBG_EN > 0u
                 OS_PendDbgNameRemove(p_obj,
 8003e46:	68b9      	ldr	r1, [r7, #8]
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f7ff fe73 	bl	8003b34 <OS_PendDbgNameRemove>
                                      p_tcb);
#endif
             }
             if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT) {
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003e54:	2b03      	cmp	r3, #3
 8003e56:	d102      	bne.n	8003e5e <OS_Post+0x96>
                 OS_TickListRemove(p_tcb);                       /* Remove from tick list                             */
 8003e58:	68b8      	ldr	r0, [r7, #8]
 8003e5a:	f000 fbab 	bl	80045b4 <OS_TickListRemove>
             }
             OS_RdyListInsert(p_tcb);                            /* Insert the task in the ready list                 */
 8003e5e:	68b8      	ldr	r0, [r7, #8]
 8003e60:	f000 f89e 	bl	8003fa0 <OS_RdyListInsert>
             p_tcb->TaskState  = OS_TASK_STATE_RDY;
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             p_tcb->PendStatus = OS_STATUS_PEND_OK;              /* Clear pend status                                 */
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
             p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;        /* Indicate no longer pending                        */
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
             break;
 8003e7c:	e038      	b.n	8003ef0 <OS_Post+0x128>

        case OS_TASK_STATE_PEND_SUSPENDED:
        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             if (p_tcb->PendOn == OS_TASK_PEND_ON_MULTI) {
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e84:	2b03      	cmp	r3, #3
 8003e86:	d109      	bne.n	8003e9c <OS_Post+0xd4>
                 OS_Post1(p_obj,                                 /* Indicate which object was posted to               */
 8003e88:	887a      	ldrh	r2, [r7, #2]
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	68b9      	ldr	r1, [r7, #8]
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f000 f82f 	bl	8003ef8 <OS_Post1>
 8003e9a:	e009      	b.n	8003eb0 <OS_Post+0xe8>
                          p_void,
                          msg_size,
                          ts);
             } else {
#if (OS_MSG_EN > 0u)
                 p_tcb->MsgPtr  = p_void;                        /* Deposit message in OS_TCB of task waiting         */
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	659a      	str	r2, [r3, #88]	; 0x58
                 p_tcb->MsgSize = msg_size;                      /* ... assuming posting a message                    */
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	887a      	ldrh	r2, [r7, #2]
 8003ea6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
#endif
                 p_tcb->TS      = ts;
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	649a      	str	r2, [r3, #72]	; 0x48
             }
             if (p_obj != (OS_PEND_OBJ *)0) {
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d006      	beq.n	8003ec4 <OS_Post+0xfc>
                 OS_PendListRemove(p_tcb);                       /* Remove task from wait list(s)                     */
 8003eb6:	68b8      	ldr	r0, [r7, #8]
 8003eb8:	f7ff ff12 	bl	8003ce0 <OS_PendListRemove>
#if OS_CFG_DBG_EN > 0u
                 OS_PendDbgNameRemove(p_obj,
 8003ebc:	68b9      	ldr	r1, [r7, #8]
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f7ff fe38 	bl	8003b34 <OS_PendDbgNameRemove>
                                      p_tcb);
#endif
             }
             if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED) {
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003eca:	2b07      	cmp	r3, #7
 8003ecc:	d102      	bne.n	8003ed4 <OS_Post+0x10c>
                 OS_TickListRemove(p_tcb);                       /* Cancel any timeout                                */
 8003ece:	68b8      	ldr	r0, [r7, #8]
 8003ed0:	f000 fb70 	bl	80045b4 <OS_TickListRemove>
             }
             p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	2204      	movs	r2, #4
 8003ed8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             p_tcb->PendStatus = OS_STATUS_PEND_OK;              /* Clear pend status                                 */
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
             p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;        /* Indicate no longer pending                        */
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
             break;
 8003eec:	e000      	b.n	8003ef0 <OS_Post+0x128>

        default:
             break;
 8003eee:	bf00      	nop
    }
}
 8003ef0:	bf00      	nop
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <OS_Post1>:
void  OS_Post1 (OS_PEND_OBJ  *p_obj,
                OS_TCB       *p_tcb,
                void         *p_void,
                OS_MSG_SIZE   msg_size,
                CPU_TS        ts)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b087      	sub	sp, #28
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
 8003f04:	807b      	strh	r3, [r7, #2]
    OS_OBJ_QTY      n_pend_list;                                    /* Number of pend lists                           */
    OS_PEND_DATA   *p_pend_data;



    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to the first OS_PEND_DATA to remove      */
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0a:	613b      	str	r3, [r7, #16]
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get number of entries in the table             */
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f12:	82fb      	strh	r3, [r7, #22]

    while (n_pend_list > (OS_OBJ_QTY)0) {                           /* Mark posted object in OS_PEND_DATA table       */
 8003f14:	e017      	b.n	8003f46 <OS_Post1+0x4e>
        if (p_obj == p_pend_data->PendObjPtr) {                     /* Did we find the object posted to?              */
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	68da      	ldr	r2, [r3, #12]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d10c      	bne.n	8003f3a <OS_Post1+0x42>
            p_pend_data->RdyObjPtr  = p_obj;                        /* Yes, indicate the object in the .RdyObjPtr     */
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	611a      	str	r2, [r3, #16]
            p_pend_data->RdyMsgPtr  = p_void;                       /*      store the message posted                  */
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	615a      	str	r2, [r3, #20]
            p_pend_data->RdyMsgSize = msg_size;                     /*      store the size of the message posted      */
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	887a      	ldrh	r2, [r7, #2]
 8003f30:	831a      	strh	r2, [r3, #24]
            p_pend_data->RdyTS      = ts;                           /*      save the timestamp of the post            */
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	6a3a      	ldr	r2, [r7, #32]
 8003f36:	61da      	str	r2, [r3, #28]
            break;
 8003f38:	e008      	b.n	8003f4c <OS_Post1+0x54>
        }
        p_pend_data++;
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	3320      	adds	r3, #32
 8003f3e:	613b      	str	r3, [r7, #16]
        n_pend_list--;
 8003f40:	8afb      	ldrh	r3, [r7, #22]
 8003f42:	3b01      	subs	r3, #1
 8003f44:	82fb      	strh	r3, [r7, #22]


    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to the first OS_PEND_DATA to remove      */
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get number of entries in the table             */

    while (n_pend_list > (OS_OBJ_QTY)0) {                           /* Mark posted object in OS_PEND_DATA table       */
 8003f46:	8afb      	ldrh	r3, [r7, #22]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1e4      	bne.n	8003f16 <OS_Post1+0x1e>
            break;
        }
        p_pend_data++;
        n_pend_list--;
    }
}
 8003f4c:	bf00      	nop
 8003f4e:	371c      	adds	r7, #28
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bc80      	pop	{r7}
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop

08003f58 <OS_RdyListInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_RdyListInit (void)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
    OS_PRIO       i;
    OS_RDY_LIST  *p_rdy_list;



    for (i = 0u; i < OS_CFG_PRIO_MAX; i++) {                /* Initialize the array of OS_RDY_LIST at each priority   */
 8003f5e:	2300      	movs	r3, #0
 8003f60:	71fb      	strb	r3, [r7, #7]
 8003f62:	e013      	b.n	8003f8c <OS_RdyListInit+0x34>
        p_rdy_list = &OSRdyList[i];
 8003f64:	79fa      	ldrb	r2, [r7, #7]
 8003f66:	4613      	mov	r3, r2
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	4413      	add	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4a0b      	ldr	r2, [pc, #44]	; (8003f9c <OS_RdyListInit+0x44>)
 8003f70:	4413      	add	r3, r2
 8003f72:	603b      	str	r3, [r7, #0]
        p_rdy_list->NbrEntries = (OS_OBJ_QTY)0;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	2200      	movs	r2, #0
 8003f78:	811a      	strh	r2, [r3, #8]
        p_rdy_list->HeadPtr    = (OS_TCB   *)0;
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	601a      	str	r2, [r3, #0]
        p_rdy_list->TailPtr    = (OS_TCB   *)0;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	2200      	movs	r2, #0
 8003f84:	605a      	str	r2, [r3, #4]
    OS_PRIO       i;
    OS_RDY_LIST  *p_rdy_list;



    for (i = 0u; i < OS_CFG_PRIO_MAX; i++) {                /* Initialize the array of OS_RDY_LIST at each priority   */
 8003f86:	79fb      	ldrb	r3, [r7, #7]
 8003f88:	3301      	adds	r3, #1
 8003f8a:	71fb      	strb	r3, [r7, #7]
 8003f8c:	79fb      	ldrb	r3, [r7, #7]
 8003f8e:	2b1f      	cmp	r3, #31
 8003f90:	d9e8      	bls.n	8003f64 <OS_RdyListInit+0xc>
        p_rdy_list = &OSRdyList[i];
        p_rdy_list->NbrEntries = (OS_OBJ_QTY)0;
        p_rdy_list->HeadPtr    = (OS_TCB   *)0;
        p_rdy_list->TailPtr    = (OS_TCB   *)0;
    }
}
 8003f92:	bf00      	nop
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bc80      	pop	{r7}
 8003f9a:	4770      	bx	lr
 8003f9c:	20002454 	.word	0x20002454

08003fa0 <OS_RdyListInsert>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_RdyListInsert (OS_TCB  *p_tcb)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
    OS_PrioInsert(p_tcb->Prio);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 ffda 	bl	8004f68 <OS_PrioInsert>
    if (p_tcb->Prio == OSPrioCur) {                         /* Are we readying a task at the same prio?               */
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8003fba:	4b07      	ldr	r3, [pc, #28]	; (8003fd8 <OS_RdyListInsert+0x38>)
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d103      	bne.n	8003fca <OS_RdyListInsert+0x2a>
        OS_RdyListInsertTail(p_tcb);                        /* Yes, insert readied task at the end of the list        */
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f84a 	bl	800405c <OS_RdyListInsertTail>
    }

#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_READY(p_tcb);                         /* Record the event.                                      */
#endif
}
 8003fc8:	e002      	b.n	8003fd0 <OS_RdyListInsert+0x30>
{
    OS_PrioInsert(p_tcb->Prio);
    if (p_tcb->Prio == OSPrioCur) {                         /* Are we readying a task at the same prio?               */
        OS_RdyListInsertTail(p_tcb);                        /* Yes, insert readied task at the end of the list        */
    } else {
        OS_RdyListInsertHead(p_tcb);                        /* No,  insert readied task at the beginning of the list  */
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f806 	bl	8003fdc <OS_RdyListInsertHead>
    }

#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_TASK_READY(p_tcb);                         /* Record the event.                                      */
#endif
}
 8003fd0:	bf00      	nop
 8003fd2:	3708      	adds	r7, #8
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	200025e0 	.word	0x200025e0

08003fdc <OS_RdyListInsertHead>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListInsertHead (OS_TCB  *p_tcb)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
    OS_RDY_LIST  *p_rdy_list;
    OS_TCB       *p_tcb2;



    p_rdy_list = &OSRdyList[p_tcb->Prio];
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8003fea:	461a      	mov	r2, r3
 8003fec:	4613      	mov	r3, r2
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	4413      	add	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4a18      	ldr	r2, [pc, #96]	; (8004058 <OS_RdyListInsertHead+0x7c>)
 8003ff6:	4413      	add	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]
    if (p_rdy_list->NbrEntries == (OS_OBJ_QTY)0) {          /* CASE 0: Insert when there are no entries               */
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	891b      	ldrh	r3, [r3, #8]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10f      	bne.n	8004022 <OS_RdyListInsertHead+0x46>
        p_rdy_list->NbrEntries =  (OS_OBJ_QTY)1;            /*         This is the first entry                        */
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2201      	movs	r2, #1
 8004006:	811a      	strh	r2, [r3, #8]
        p_tcb->NextPtr         =  (OS_TCB   *)0;            /*         No other OS_TCBs in the list                   */
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	60da      	str	r2, [r3, #12]
        p_tcb->PrevPtr         =  (OS_TCB   *)0;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	611a      	str	r2, [r3, #16]
        p_rdy_list->HeadPtr    =  p_tcb;                    /*         Both list pointers point to this OS_TCB        */
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	601a      	str	r2, [r3, #0]
        p_rdy_list->TailPtr    =  p_tcb;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	605a      	str	r2, [r3, #4]
        p_tcb->PrevPtr         = (OS_TCB    *)0;
        p_tcb2                 = p_rdy_list->HeadPtr;       /*         Adjust old head of list's links                */
        p_tcb2->PrevPtr        = p_tcb;
        p_rdy_list->HeadPtr    = p_tcb;
    }
}
 8004020:	e015      	b.n	800404e <OS_RdyListInsertHead+0x72>
        p_tcb->NextPtr         =  (OS_TCB   *)0;            /*         No other OS_TCBs in the list                   */
        p_tcb->PrevPtr         =  (OS_TCB   *)0;
        p_rdy_list->HeadPtr    =  p_tcb;                    /*         Both list pointers point to this OS_TCB        */
        p_rdy_list->TailPtr    =  p_tcb;
    } else {                                                /* CASE 1: Insert BEFORE the current head of list         */
        p_rdy_list->NbrEntries++;                           /*         One more OS_TCB in the list                    */
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	891b      	ldrh	r3, [r3, #8]
 8004026:	3301      	adds	r3, #1
 8004028:	b29a      	uxth	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	811a      	strh	r2, [r3, #8]
        p_tcb->NextPtr         = p_rdy_list->HeadPtr;       /*         Adjust new OS_TCBs links                       */
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	60da      	str	r2, [r3, #12]
        p_tcb->PrevPtr         = (OS_TCB    *)0;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	611a      	str	r2, [r3, #16]
        p_tcb2                 = p_rdy_list->HeadPtr;       /*         Adjust old head of list's links                */
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	60bb      	str	r3, [r7, #8]
        p_tcb2->PrevPtr        = p_tcb;
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	611a      	str	r2, [r3, #16]
        p_rdy_list->HeadPtr    = p_tcb;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	601a      	str	r2, [r3, #0]
    }
}
 800404e:	bf00      	nop
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	bc80      	pop	{r7}
 8004056:	4770      	bx	lr
 8004058:	20002454 	.word	0x20002454

0800405c <OS_RdyListInsertTail>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListInsertTail (OS_TCB  *p_tcb)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
    OS_RDY_LIST  *p_rdy_list;
    OS_TCB       *p_tcb2;



    p_rdy_list = &OSRdyList[p_tcb->Prio];
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800406a:	461a      	mov	r2, r3
 800406c:	4613      	mov	r3, r2
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	4413      	add	r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	4a18      	ldr	r2, [pc, #96]	; (80040d8 <OS_RdyListInsertTail+0x7c>)
 8004076:	4413      	add	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]
    if (p_rdy_list->NbrEntries == (OS_OBJ_QTY)0) {          /* CASE 0: Insert when there are no entries               */
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	891b      	ldrh	r3, [r3, #8]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10f      	bne.n	80040a2 <OS_RdyListInsertTail+0x46>
        p_rdy_list->NbrEntries  = (OS_OBJ_QTY)1;            /*         This is the first entry                        */
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2201      	movs	r2, #1
 8004086:	811a      	strh	r2, [r3, #8]
        p_tcb->NextPtr          = (OS_TCB   *)0;            /*         No other OS_TCBs in the list                   */
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	60da      	str	r2, [r3, #12]
        p_tcb->PrevPtr          = (OS_TCB   *)0;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	611a      	str	r2, [r3, #16]
        p_rdy_list->HeadPtr     = p_tcb;                    /*         Both list pointers point to this OS_TCB        */
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	601a      	str	r2, [r3, #0]
        p_rdy_list->TailPtr     = p_tcb;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	605a      	str	r2, [r3, #4]
        p_tcb2                  = p_rdy_list->TailPtr;
        p_tcb->PrevPtr          = p_tcb2;
        p_tcb2->NextPtr         = p_tcb;                    /*         Adjust old tail of list's links                */
        p_rdy_list->TailPtr     = p_tcb;
    }
}
 80040a0:	e014      	b.n	80040cc <OS_RdyListInsertTail+0x70>
        p_tcb->NextPtr          = (OS_TCB   *)0;            /*         No other OS_TCBs in the list                   */
        p_tcb->PrevPtr          = (OS_TCB   *)0;
        p_rdy_list->HeadPtr     = p_tcb;                    /*         Both list pointers point to this OS_TCB        */
        p_rdy_list->TailPtr     = p_tcb;
    } else {                                                /* CASE 1: Insert AFTER the current tail of list          */
        p_rdy_list->NbrEntries++;                           /*         One more OS_TCB in the list                    */
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	891b      	ldrh	r3, [r3, #8]
 80040a6:	3301      	adds	r3, #1
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	811a      	strh	r2, [r3, #8]
        p_tcb->NextPtr          = (OS_TCB   *)0;            /*         Adjust new OS_TCBs links                       */
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	60da      	str	r2, [r3, #12]
        p_tcb2                  = p_rdy_list->TailPtr;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	60bb      	str	r3, [r7, #8]
        p_tcb->PrevPtr          = p_tcb2;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	611a      	str	r2, [r3, #16]
        p_tcb2->NextPtr         = p_tcb;                    /*         Adjust old tail of list's links                */
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	60da      	str	r2, [r3, #12]
        p_rdy_list->TailPtr     = p_tcb;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	605a      	str	r2, [r3, #4]
    }
}
 80040cc:	bf00      	nop
 80040ce:	3714      	adds	r7, #20
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bc80      	pop	{r7}
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	20002454 	.word	0x20002454

080040dc <OS_RdyListRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListRemove (OS_TCB  *p_tcb)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
    OS_TCB       *p_tcb1;
    OS_TCB       *p_tcb2;



    p_rdy_list = &OSRdyList[p_tcb->Prio];
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80040ea:	461a      	mov	r2, r3
 80040ec:	4613      	mov	r3, r2
 80040ee:	005b      	lsls	r3, r3, #1
 80040f0:	4413      	add	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4a24      	ldr	r2, [pc, #144]	; (8004188 <OS_RdyListRemove+0xac>)
 80040f6:	4413      	add	r3, r2
 80040f8:	617b      	str	r3, [r7, #20]
    p_tcb1     = p_tcb->PrevPtr;                            /* Point to next and previous OS_TCB in the list          */
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	613b      	str	r3, [r7, #16]
    p_tcb2     = p_tcb->NextPtr;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	60fb      	str	r3, [r7, #12]
    if (p_tcb1 == (OS_TCB *)0) {                            /* Was the OS_TCB to remove was at the head?              */
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d11f      	bne.n	800414c <OS_RdyListRemove+0x70>
        if (p_tcb2 == (OS_TCB *)0) {                        /* Yes, was it the only OS_TCB?                           */
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10f      	bne.n	8004132 <OS_RdyListRemove+0x56>
            p_rdy_list->NbrEntries = (OS_OBJ_QTY)0;         /*      Yes, no more entries                              */
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	2200      	movs	r2, #0
 8004116:	811a      	strh	r2, [r3, #8]
            p_rdy_list->HeadPtr    = (OS_TCB   *)0;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	2200      	movs	r2, #0
 800411c:	601a      	str	r2, [r3, #0]
            p_rdy_list->TailPtr    = (OS_TCB   *)0;
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	2200      	movs	r2, #0
 8004122:	605a      	str	r2, [r3, #4]
            OS_PrioRemove(p_tcb->Prio);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800412a:	4618      	mov	r0, r3
 800412c:	f000 ff42 	bl	8004fb4 <OS_PrioRemove>
 8004130:	e01f      	b.n	8004172 <OS_RdyListRemove+0x96>
        } else {
            p_rdy_list->NbrEntries--;                       /*      No,  one less entry                               */
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	891b      	ldrh	r3, [r3, #8]
 8004136:	3b01      	subs	r3, #1
 8004138:	b29a      	uxth	r2, r3
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	811a      	strh	r2, [r3, #8]
            p_tcb2->PrevPtr        = (OS_TCB   *)0;         /*           adjust back link of new list head            */
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	611a      	str	r2, [r3, #16]
            p_rdy_list->HeadPtr    = p_tcb2;                /*           adjust OS_RDY_LIST's new head                */
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	601a      	str	r2, [r3, #0]
 800414a:	e012      	b.n	8004172 <OS_RdyListRemove+0x96>
        }
    } else {
        p_rdy_list->NbrEntries--;                           /* No,  one less entry                                    */
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	891b      	ldrh	r3, [r3, #8]
 8004150:	3b01      	subs	r3, #1
 8004152:	b29a      	uxth	r2, r3
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	811a      	strh	r2, [r3, #8]
        p_tcb1->NextPtr = p_tcb2;
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	60da      	str	r2, [r3, #12]
        if (p_tcb2 == (OS_TCB *)0) {
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d103      	bne.n	800416c <OS_RdyListRemove+0x90>
            p_rdy_list->TailPtr = p_tcb1;                   /*      Removing the TCB at the tail, adj the tail ptr    */
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	605a      	str	r2, [r3, #4]
 800416a:	e002      	b.n	8004172 <OS_RdyListRemove+0x96>
        } else {
            p_tcb2->PrevPtr     = p_tcb1;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	611a      	str	r2, [r3, #16]
        }
    }
    p_tcb->PrevPtr = (OS_TCB *)0;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	611a      	str	r2, [r3, #16]
    p_tcb->NextPtr = (OS_TCB *)0;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	60da      	str	r2, [r3, #12]

#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_TASK_SUSPEND(p_tcb);                           /* Record the event.                                      */
#endif
}
 800417e:	bf00      	nop
 8004180:	3718      	adds	r7, #24
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	20002454 	.word	0x20002454

0800418c <OS_SchedLockTimeMeasStart>:
************************************************************************************************************************
*/

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
void  OS_SchedLockTimeMeasStart (void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	af00      	add	r7, sp, #0
    if (OSSchedLockNestingCtr == 1u) {
 8004190:	4b05      	ldr	r3, [pc, #20]	; (80041a8 <OS_SchedLockTimeMeasStart+0x1c>)
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d104      	bne.n	80041a2 <OS_SchedLockTimeMeasStart+0x16>
        OSSchedLockTimeBegin = CPU_TS_TmrRd();
 8004198:	f003 f9e8 	bl	800756c <CPU_TS_TmrRd>
 800419c:	4602      	mov	r2, r0
 800419e:	4b03      	ldr	r3, [pc, #12]	; (80041ac <OS_SchedLockTimeMeasStart+0x20>)
 80041a0:	601a      	str	r2, [r3, #0]
    }
}
 80041a2:	bf00      	nop
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	20002440 	.word	0x20002440
 80041ac:	200026a8 	.word	0x200026a8

080041b0 <OS_SchedLockTimeMeasStop>:




void  OS_SchedLockTimeMeasStop (void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
    CPU_TS_TMR  delta;


    if (OSSchedLockNestingCtr == (OS_NESTING_CTR)0) {       /* Make sure we fully un-nested scheduler lock            */
 80041b6:	4b0f      	ldr	r3, [pc, #60]	; (80041f4 <OS_SchedLockTimeMeasStop+0x44>)
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d116      	bne.n	80041ec <OS_SchedLockTimeMeasStop+0x3c>
        delta = CPU_TS_TmrRd()                              /* Compute the delta time between begin and end           */
 80041be:	f003 f9d5 	bl	800756c <CPU_TS_TmrRd>
 80041c2:	4602      	mov	r2, r0
              - OSSchedLockTimeBegin;
 80041c4:	4b0c      	ldr	r3, [pc, #48]	; (80041f8 <OS_SchedLockTimeMeasStop+0x48>)
 80041c6:	681b      	ldr	r3, [r3, #0]
{
    CPU_TS_TMR  delta;


    if (OSSchedLockNestingCtr == (OS_NESTING_CTR)0) {       /* Make sure we fully un-nested scheduler lock            */
        delta = CPU_TS_TmrRd()                              /* Compute the delta time between begin and end           */
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	607b      	str	r3, [r7, #4]
              - OSSchedLockTimeBegin;
        if (OSSchedLockTimeMax    < delta) {                /* Detect peak value                                      */
 80041cc:	4b0b      	ldr	r3, [pc, #44]	; (80041fc <OS_SchedLockTimeMeasStop+0x4c>)
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d202      	bcs.n	80041dc <OS_SchedLockTimeMeasStop+0x2c>
            OSSchedLockTimeMax    = delta;
 80041d6:	4a09      	ldr	r2, [pc, #36]	; (80041fc <OS_SchedLockTimeMeasStop+0x4c>)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6013      	str	r3, [r2, #0]
        }
        if (OSSchedLockTimeMaxCur < delta) {                /* Detect peak value (for resettable value)               */
 80041dc:	4b08      	ldr	r3, [pc, #32]	; (8004200 <OS_SchedLockTimeMeasStop+0x50>)
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d202      	bcs.n	80041ec <OS_SchedLockTimeMeasStop+0x3c>
            OSSchedLockTimeMaxCur = delta;
 80041e6:	4a06      	ldr	r2, [pc, #24]	; (8004200 <OS_SchedLockTimeMeasStop+0x50>)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6013      	str	r3, [r2, #0]
        }
    }
}
 80041ec:	bf00      	nop
 80041ee:	3708      	adds	r7, #8
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	20002440 	.word	0x20002440
 80041f8:	200026a8 	.word	0x200026a8
 80041fc:	200028cc 	.word	0x200028cc
 8004200:	200026bc 	.word	0x200026bc

08004204 <OS_TaskBlock>:
************************************************************************************************************************
*/

void  OS_TaskBlock (OS_TCB   *p_tcb,
                    OS_TICK   timeout)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
    if (timeout > (OS_TICK)0) {                             /* Add task to tick list if timeout non zero               */
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d009      	beq.n	8004228 <OS_TaskBlock+0x24>
        OS_TickListInsert(&OSTickListTimeout, p_tcb, timeout);
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	6879      	ldr	r1, [r7, #4]
 8004218:	4809      	ldr	r0, [pc, #36]	; (8004240 <OS_TaskBlock+0x3c>)
 800421a:	f000 f8b1 	bl	8004380 <OS_TickListInsert>
        p_tcb->TaskState = OS_TASK_STATE_PEND_TIMEOUT;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2203      	movs	r2, #3
 8004222:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8004226:	e003      	b.n	8004230 <OS_TaskBlock+0x2c>
    } else {
        p_tcb->TaskState = OS_TASK_STATE_PEND;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2202      	movs	r2, #2
 800422c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    }
    OS_RdyListRemove(p_tcb);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f7ff ff53 	bl	80040dc <OS_RdyListRemove>
}
 8004236:	bf00      	nop
 8004238:	3708      	adds	r7, #8
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	200029bc 	.word	0x200029bc

08004244 <OS_TickTask>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TickTask (void  *p_arg)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b088      	sub	sp, #32
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
    OS_ERR  err;
    CPU_TS  ts_delta;
    CPU_TS  ts_delta_dly;
    CPU_TS  ts_delta_timeout;
    CPU_SR_ALLOC();
 800424c:	2300      	movs	r3, #0
 800424e:	61fb      	str	r3, [r7, #28]


    (void)&p_arg;                                               /* Prevent compiler warning                             */

    while (DEF_ON) {
        (void)OSTaskSemPend((OS_TICK  )0,
 8004250:	f107 030e 	add.w	r3, r7, #14
 8004254:	2200      	movs	r2, #0
 8004256:	2100      	movs	r1, #0
 8004258:	2000      	movs	r0, #0
 800425a:	f7fe fa41 	bl	80026e0 <OSTaskSemPend>
                            (OS_OPT   )OS_OPT_PEND_BLOCKING,
                            (CPU_TS  *)0,
                            (OS_ERR  *)&err);                   /* Wait for signal from tick interrupt                  */
        if (err == OS_ERR_NONE) {
 800425e:	89fb      	ldrh	r3, [r7, #14]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1f5      	bne.n	8004250 <OS_TickTask+0xc>
            OS_CRITICAL_ENTER();
 8004264:	f7fc f83c 	bl	80002e0 <CPU_SR_Save>
 8004268:	61f8      	str	r0, [r7, #28]
            OSTickCtr++;                                        /* Keep track of the number of ticks                    */
 800426a:	4b0d      	ldr	r3, [pc, #52]	; (80042a0 <OS_TickTask+0x5c>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	3301      	adds	r3, #1
 8004270:	4a0b      	ldr	r2, [pc, #44]	; (80042a0 <OS_TickTask+0x5c>)
 8004272:	6013      	str	r3, [r2, #0]
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
            TRACE_OS_TICK_INCREMENT(OSTickCtr);                 /* Record the event.                                    */
#endif
            OS_CRITICAL_EXIT();
 8004274:	69f8      	ldr	r0, [r7, #28]
 8004276:	f7fc f837 	bl	80002e8 <CPU_SR_Restore>
            ts_delta_dly     = OS_TickListUpdateDly();
 800427a:	f000 fa05 	bl	8004688 <OS_TickListUpdateDly>
 800427e:	61b8      	str	r0, [r7, #24]
            ts_delta_timeout = OS_TickListUpdateTimeout();
 8004280:	f000 fa64 	bl	800474c <OS_TickListUpdateTimeout>
 8004284:	6178      	str	r0, [r7, #20]
            ts_delta         = ts_delta_dly + ts_delta_timeout; /* Compute total execution time of list updates         */
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	4413      	add	r3, r2
 800428c:	613b      	str	r3, [r7, #16]
            if (OSTickTaskTimeMax < ts_delta) {
 800428e:	4b05      	ldr	r3, [pc, #20]	; (80042a4 <OS_TickTask+0x60>)
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	429a      	cmp	r2, r3
 8004296:	d2db      	bcs.n	8004250 <OS_TickTask+0xc>
                OSTickTaskTimeMax = ts_delta;
 8004298:	4a02      	ldr	r2, [pc, #8]	; (80042a4 <OS_TickTask+0x60>)
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	6013      	str	r3, [r2, #0]
            }
        }
    }
 800429e:	e7d7      	b.n	8004250 <OS_TickTask+0xc>
 80042a0:	200028ac 	.word	0x200028ac
 80042a4:	200029a0 	.word	0x200029a0

080042a8 <OS_TickTaskInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TickTaskInit (OS_ERR  *p_err)
{
 80042a8:	b590      	push	{r4, r7, lr}
 80042aa:	b08d      	sub	sp, #52	; 0x34
 80042ac:	af0a      	add	r7, sp, #40	; 0x28
 80042ae:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    OSTickCtr                    = (OS_TICK)0u;                         /* Clear the tick counter                            */
 80042b0:	4b28      	ldr	r3, [pc, #160]	; (8004354 <OS_TickTaskInit+0xac>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	601a      	str	r2, [r3, #0]

    OSTickListDly.TCB_Ptr        = (OS_TCB   *)0;
 80042b6:	4b28      	ldr	r3, [pc, #160]	; (8004358 <OS_TickTaskInit+0xb0>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	601a      	str	r2, [r3, #0]
    OSTickListTimeout.TCB_Ptr    = (OS_TCB   *)0;
 80042bc:	4b27      	ldr	r3, [pc, #156]	; (800435c <OS_TickTaskInit+0xb4>)
 80042be:	2200      	movs	r2, #0
 80042c0:	601a      	str	r2, [r3, #0]

#if OS_CFG_DBG_EN > 0u
    OSTickListDly.NbrEntries     = (OS_OBJ_QTY)0;
 80042c2:	4b25      	ldr	r3, [pc, #148]	; (8004358 <OS_TickTaskInit+0xb0>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	809a      	strh	r2, [r3, #4]
    OSTickListDly.NbrUpdated     = (OS_OBJ_QTY)0;
 80042c8:	4b23      	ldr	r3, [pc, #140]	; (8004358 <OS_TickTaskInit+0xb0>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	80da      	strh	r2, [r3, #6]

    OSTickListTimeout.NbrEntries = (OS_OBJ_QTY)0;
 80042ce:	4b23      	ldr	r3, [pc, #140]	; (800435c <OS_TickTaskInit+0xb4>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	809a      	strh	r2, [r3, #4]
    OSTickListTimeout.NbrUpdated = (OS_OBJ_QTY)0;
 80042d4:	4b21      	ldr	r3, [pc, #132]	; (800435c <OS_TickTaskInit+0xb4>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	80da      	strh	r2, [r3, #6]
#endif

                                                                        /* ---------------- CREATE THE TICK TASK ----------- */
    if (OSCfg_TickTaskStkBasePtr == (CPU_STK *)0) {
 80042da:	4b21      	ldr	r3, [pc, #132]	; (8004360 <OS_TickTaskInit+0xb8>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d104      	bne.n	80042ec <OS_TickTaskInit+0x44>
       *p_err = OS_ERR_TICK_STK_INVALID;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f247 2212 	movw	r2, #29202	; 0x7212
 80042e8:	801a      	strh	r2, [r3, #0]
        return;
 80042ea:	e02f      	b.n	800434c <OS_TickTaskInit+0xa4>
    }

    if (OSCfg_TickTaskStkSize < OSCfg_StkSizeMin) {
 80042ec:	4b1d      	ldr	r3, [pc, #116]	; (8004364 <OS_TickTaskInit+0xbc>)
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	4b1d      	ldr	r3, [pc, #116]	; (8004368 <OS_TickTaskInit+0xc0>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d204      	bcs.n	8004302 <OS_TickTaskInit+0x5a>
       *p_err = OS_ERR_TICK_STK_SIZE_INVALID;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f247 2213 	movw	r2, #29203	; 0x7213
 80042fe:	801a      	strh	r2, [r3, #0]
        return;
 8004300:	e024      	b.n	800434c <OS_TickTaskInit+0xa4>
    }

    if (OSCfg_TickTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {                 /* Only one task at the 'Idle Task' priority         */
 8004302:	4b1a      	ldr	r3, [pc, #104]	; (800436c <OS_TickTaskInit+0xc4>)
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	2b1e      	cmp	r3, #30
 8004308:	d904      	bls.n	8004314 <OS_TickTaskInit+0x6c>
       *p_err = OS_ERR_TICK_PRIO_INVALID;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f247 2211 	movw	r2, #29201	; 0x7211
 8004310:	801a      	strh	r2, [r3, #0]
        return;
 8004312:	e01b      	b.n	800434c <OS_TickTaskInit+0xa4>
    }

    OSTaskCreate((OS_TCB     *)&OSTickTaskTCB,
 8004314:	4b15      	ldr	r3, [pc, #84]	; (800436c <OS_TickTaskInit+0xc4>)
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	4a11      	ldr	r2, [pc, #68]	; (8004360 <OS_TickTaskInit+0xb8>)
 800431a:	6812      	ldr	r2, [r2, #0]
 800431c:	4914      	ldr	r1, [pc, #80]	; (8004370 <OS_TickTaskInit+0xc8>)
 800431e:	6809      	ldr	r1, [r1, #0]
 8004320:	4810      	ldr	r0, [pc, #64]	; (8004364 <OS_TickTaskInit+0xbc>)
 8004322:	6800      	ldr	r0, [r0, #0]
 8004324:	687c      	ldr	r4, [r7, #4]
 8004326:	9408      	str	r4, [sp, #32]
 8004328:	240b      	movs	r4, #11
 800432a:	9407      	str	r4, [sp, #28]
 800432c:	2400      	movs	r4, #0
 800432e:	9406      	str	r4, [sp, #24]
 8004330:	2400      	movs	r4, #0
 8004332:	9405      	str	r4, [sp, #20]
 8004334:	2400      	movs	r4, #0
 8004336:	9404      	str	r4, [sp, #16]
 8004338:	9003      	str	r0, [sp, #12]
 800433a:	9102      	str	r1, [sp, #8]
 800433c:	9201      	str	r2, [sp, #4]
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	2300      	movs	r3, #0
 8004342:	4a0c      	ldr	r2, [pc, #48]	; (8004374 <OS_TickTaskInit+0xcc>)
 8004344:	490c      	ldr	r1, [pc, #48]	; (8004378 <OS_TickTaskInit+0xd0>)
 8004346:	480d      	ldr	r0, [pc, #52]	; (800437c <OS_TickTaskInit+0xd4>)
 8004348:	f7fe f89a 	bl	8002480 <OSTaskCreate>
                 (OS_MSG_QTY  )0u,
                 (OS_TICK     )0u,
                 (void       *)0,
                 (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR | OS_OPT_TASK_NO_TLS),
                 (OS_ERR     *)p_err);
}
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	bd90      	pop	{r4, r7, pc}
 8004352:	bf00      	nop
 8004354:	200028ac 	.word	0x200028ac
 8004358:	200029b0 	.word	0x200029b0
 800435c:	200029bc 	.word	0x200029bc
 8004360:	0800e61c 	.word	0x0800e61c
 8004364:	0800e624 	.word	0x0800e624
 8004368:	0800e610 	.word	0x0800e610
 800436c:	0800e618 	.word	0x0800e618
 8004370:	0800e620 	.word	0x0800e620
 8004374:	08004245 	.word	0x08004245
 8004378:	0800e514 	.word	0x0800e514
 800437c:	200025e4 	.word	0x200025e4

08004380 <OS_TickListInsert>:
*/

void  OS_TickListInsert (OS_TICK_LIST  *p_list,
                         OS_TCB        *p_tcb,
                         OS_TICK        time)
{
 8004380:	b480      	push	{r7}
 8004382:	b089      	sub	sp, #36	; 0x24
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
    OS_TCB  *p_tcb1;
    OS_TCB  *p_tcb2;
    OS_TICK  remain;


    if (p_list->TCB_Ptr == (OS_TCB *)0) {                               /* Is the list empty?                                */
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d112      	bne.n	80043ba <OS_TickListInsert+0x3a>
        p_tcb->TickRemain  = time;                                      /* Yes, Store time in TCB                            */
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	651a      	str	r2, [r3, #80]	; 0x50
        p_tcb->TickNextPtr = (OS_TCB *)0;
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	2200      	movs	r2, #0
 800439e:	615a      	str	r2, [r3, #20]
        p_tcb->TickPrevPtr = (OS_TCB *)0;
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	2200      	movs	r2, #0
 80043a4:	619a      	str	r2, [r3, #24]
        p_tcb->TickListPtr = (OS_TICK_LIST *)p_list;                    /*      Link to this list                            */
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	61da      	str	r2, [r3, #28]
        p_list->TCB_Ptr    = p_tcb;                                     /*      Point to TCB of task to place in the list    */
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	68ba      	ldr	r2, [r7, #8]
 80043b0:	601a      	str	r2, [r3, #0]
#if OS_CFG_DBG_EN > 0u
        p_list->NbrEntries = 1u;                                        /*      List contains 1 entry                        */
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2201      	movs	r2, #1
 80043b6:	809a      	strh	r2, [r3, #4]
 80043b8:	e074      	b.n	80044a4 <OS_TickListInsert+0x124>
#endif
    } else {
        p_tcb1 = p_list->TCB_Ptr;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	61fb      	str	r3, [r7, #28]
        p_tcb2 = p_list->TCB_Ptr;                                       /* No,  Insert somewhere in the list in delta order  */
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	61bb      	str	r3, [r7, #24]
        remain = time;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	617b      	str	r3, [r7, #20]
        while (p_tcb2 != (OS_TCB *)0) {
 80043ca:	e053      	b.n	8004474 <OS_TickListInsert+0xf4>
            if (remain <= p_tcb2->TickRemain) {
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d344      	bcc.n	8004460 <OS_TickListInsert+0xe0>
                if (p_tcb2->TickPrevPtr == (OS_TCB *)0) {               /*      Insert before the first entry in the list?   */
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d11e      	bne.n	800441c <OS_TickListInsert+0x9c>
                    p_tcb->TickRemain   = remain;                       /*      Yes, Store remaining time                    */                                          
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	651a      	str	r2, [r3, #80]	; 0x50
                    p_tcb->TickPrevPtr  = (OS_TCB *)0;
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	2200      	movs	r2, #0
 80043e8:	619a      	str	r2, [r3, #24]
                    p_tcb->TickNextPtr  = p_tcb2;    
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	615a      	str	r2, [r3, #20]
                    p_tcb->TickListPtr  = (OS_TICK_LIST *)p_list;       /*           Link TCB to this list                   */
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	61da      	str	r2, [r3, #28]
                    p_tcb2->TickRemain -= remain;                       /*           Reduce time of next entry in the list   */
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	1ad2      	subs	r2, r2, r3
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	651a      	str	r2, [r3, #80]	; 0x50
                    p_tcb2->TickPrevPtr = p_tcb;
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	68ba      	ldr	r2, [r7, #8]
 8004406:	619a      	str	r2, [r3, #24]
                    p_list->TCB_Ptr     = p_tcb;                        /*           Add TCB to the list                     */
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	601a      	str	r2, [r3, #0]
#if OS_CFG_DBG_EN > 0u
                    p_list->NbrEntries++;                               /*           List contains an extra entry            */
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	889b      	ldrh	r3, [r3, #4]
 8004412:	3301      	adds	r3, #1
 8004414:	b29a      	uxth	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	809a      	strh	r2, [r3, #4]
                    p_tcb1->TickNextPtr = p_tcb;
#if OS_CFG_DBG_EN > 0u
                    p_list->NbrEntries++;                               /*           List contains an extra entry            */
#endif
                }
                return;
 800441a:	e043      	b.n	80044a4 <OS_TickListInsert+0x124>
                    p_list->TCB_Ptr     = p_tcb;                        /*           Add TCB to the list                     */
#if OS_CFG_DBG_EN > 0u
                    p_list->NbrEntries++;                               /*           List contains an extra entry            */
#endif
                } else {                                                /*      No,  Insert somewhere further in the list    */
                    p_tcb1              = p_tcb2->TickPrevPtr;
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	61fb      	str	r3, [r7, #28]
                    p_tcb->TickRemain   = remain;                       /*           Store remaining time                    */
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	651a      	str	r2, [r3, #80]	; 0x50
                    p_tcb->TickPrevPtr  = p_tcb1;
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	69fa      	ldr	r2, [r7, #28]
 800442c:	619a      	str	r2, [r3, #24]
                    p_tcb->TickNextPtr  = p_tcb2;    
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	615a      	str	r2, [r3, #20]
                    p_tcb->TickListPtr  = (OS_TICK_LIST *)p_list;       /*           TCB points to this list                 */
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	61da      	str	r2, [r3, #28]
                    p_tcb2->TickRemain -= remain;                       /*           Reduce time of next entry in the list   */
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	1ad2      	subs	r2, r2, r3
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	651a      	str	r2, [r3, #80]	; 0x50
                    p_tcb2->TickPrevPtr = p_tcb;
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	619a      	str	r2, [r3, #24]
                    p_tcb1->TickNextPtr = p_tcb;
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	615a      	str	r2, [r3, #20]
#if OS_CFG_DBG_EN > 0u
                    p_list->NbrEntries++;                               /*           List contains an extra entry            */
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	889b      	ldrh	r3, [r3, #4]
 8004456:	3301      	adds	r3, #1
 8004458:	b29a      	uxth	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	809a      	strh	r2, [r3, #4]
#endif
                }
                return;
 800445e:	e021      	b.n	80044a4 <OS_TickListInsert+0x124>
            } else {
                remain -= p_tcb2->TickRemain;                           /*           Point to the next TCB in the list       */
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	617b      	str	r3, [r7, #20]
                p_tcb1  = p_tcb2;
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	61fb      	str	r3, [r7, #28]
                p_tcb2  = p_tcb2->TickNextPtr;
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	61bb      	str	r3, [r7, #24]
#endif
    } else {
        p_tcb1 = p_list->TCB_Ptr;
        p_tcb2 = p_list->TCB_Ptr;                                       /* No,  Insert somewhere in the list in delta order  */
        remain = time;
        while (p_tcb2 != (OS_TCB *)0) {
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1a8      	bne.n	80043cc <OS_TickListInsert+0x4c>
                remain -= p_tcb2->TickRemain;                           /*           Point to the next TCB in the list       */
                p_tcb1  = p_tcb2;
                p_tcb2  = p_tcb2->TickNextPtr;
            }                 
        }
        p_tcb->TickRemain   = remain;                       
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	651a      	str	r2, [r3, #80]	; 0x50
        p_tcb->TickPrevPtr  = p_tcb1;
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	69fa      	ldr	r2, [r7, #28]
 8004484:	619a      	str	r2, [r3, #24]
        p_tcb->TickNextPtr  = (OS_TCB *)0;    
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	2200      	movs	r2, #0
 800448a:	615a      	str	r2, [r3, #20]
        p_tcb->TickListPtr  = (OS_TICK_LIST *)p_list;                   /*           Link the list to the TCB                */
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	61da      	str	r2, [r3, #28]
        p_tcb1->TickNextPtr = p_tcb;
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	615a      	str	r2, [r3, #20]
#if OS_CFG_DBG_EN > 0u
        p_list->NbrEntries++;                                           /*           List contains an extra entry            */
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	889b      	ldrh	r3, [r3, #4]
 800449c:	3301      	adds	r3, #1
 800449e:	b29a      	uxth	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	809a      	strh	r2, [r3, #4]
#endif
    }
}
 80044a4:	3724      	adds	r7, #36	; 0x24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bc80      	pop	{r7}
 80044aa:	4770      	bx	lr

080044ac <OS_TickListInsertDly>:

void  OS_TickListInsertDly (OS_TCB   *p_tcb,
                            OS_TICK   time,
                            OS_OPT    opt,
                            OS_ERR   *p_err)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	603b      	str	r3, [r7, #0]
 80044b8:	4613      	mov	r3, r2
 80044ba:	80fb      	strh	r3, [r7, #6]
    OS_TICK   remain;



    if (opt == OS_OPT_TIME_MATCH) {                                     /* MATCH to absolute OSTickCtr value mode            */
 80044bc:	88fb      	ldrh	r3, [r7, #6]
 80044be:	2b04      	cmp	r3, #4
 80044c0:	d113      	bne.n	80044ea <OS_TickListInsertDly+0x3e>
        remain = time - OSTickCtr;
 80044c2:	4b3a      	ldr	r3, [pc, #232]	; (80045ac <OS_TickListInsertDly+0x100>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	617b      	str	r3, [r7, #20]
        if ((remain > OS_TICK_TH_RDY) ||                                /* If delay already occurred, ...                    */
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044d2:	d802      	bhi.n	80044da <OS_TickListInsertDly+0x2e>
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d158      	bne.n	800458c <OS_TickListInsertDly+0xe0>
            (remain == (OS_TICK)0u)) {
            p_tcb->TickRemain = (OS_TICK)0u;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	651a      	str	r2, [r3, #80]	; 0x50
           *p_err             =  OS_ERR_TIME_ZERO_DLY;                  /* ... do NOT delay.                                 */
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	f247 227e 	movw	r2, #29310	; 0x727e
 80044e6:	801a      	strh	r2, [r3, #0]
            return;
 80044e8:	e05c      	b.n	80045a4 <OS_TickListInsertDly+0xf8>
        }

    } else if (opt == OS_OPT_TIME_PERIODIC) {                           /* PERIODIC mode.                                    */
 80044ea:	88fb      	ldrh	r3, [r7, #6]
 80044ec:	2b08      	cmp	r3, #8
 80044ee:	d13f      	bne.n	8004570 <OS_TickListInsertDly+0xc4>
        if ((OSTickCtr - p_tcb->TickCtrPrev) > time) {
 80044f0:	4b2e      	ldr	r3, [pc, #184]	; (80045ac <OS_TickListInsertDly+0x100>)
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f8:	1ad2      	subs	r2, r2, r3
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d908      	bls.n	8004512 <OS_TickListInsertDly+0x66>
            remain             = time;                                  /* ... first time we load .TickCtrPrev               */
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	617b      	str	r3, [r7, #20]
            p_tcb->TickCtrPrev = OSTickCtr + time;
 8004504:	4b29      	ldr	r3, [pc, #164]	; (80045ac <OS_TickListInsertDly+0x100>)
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	441a      	add	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	655a      	str	r2, [r3, #84]	; 0x54
 8004510:	e03c      	b.n	800458c <OS_TickListInsertDly+0xe0>
        } else {
            remain = time - (OSTickCtr - p_tcb->TickCtrPrev);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004516:	4b25      	ldr	r3, [pc, #148]	; (80045ac <OS_TickListInsertDly+0x100>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	1ad2      	subs	r2, r2, r3
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	4413      	add	r3, r2
 8004520:	617b      	str	r3, [r7, #20]
            if ((remain > OS_TICK_TH_RDY) ||                            /* If delay time has already passed, ...             */
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004528:	d802      	bhi.n	8004530 <OS_TickListInsertDly+0x84>
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d118      	bne.n	8004562 <OS_TickListInsertDly+0xb6>
                (remain == (OS_TICK)0u)) {
                p_tcb->TickCtrPrev += time + time * ((OSTickCtr - p_tcb->TickCtrPrev) / time); /* Try to recover the period  */
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004534:	4b1d      	ldr	r3, [pc, #116]	; (80045ac <OS_TickListInsertDly+0x100>)
 8004536:	6819      	ldr	r1, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800453c:	1ac9      	subs	r1, r1, r3
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	fbb1 f3f3 	udiv	r3, r1, r3
 8004544:	3301      	adds	r3, #1
 8004546:	68b9      	ldr	r1, [r7, #8]
 8004548:	fb01 f303 	mul.w	r3, r1, r3
 800454c:	441a      	add	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	655a      	str	r2, [r3, #84]	; 0x54
                p_tcb->TickRemain   = (OS_TICK)0u;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	651a      	str	r2, [r3, #80]	; 0x50
               *p_err               =  OS_ERR_TIME_ZERO_DLY;            /* ... do NOT delay.                                 */
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	f247 227e 	movw	r2, #29310	; 0x727e
 800455e:	801a      	strh	r2, [r3, #0]
                return;
 8004560:	e020      	b.n	80045a4 <OS_TickListInsertDly+0xf8>
            }
            p_tcb->TickCtrPrev += time;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	441a      	add	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	655a      	str	r2, [r3, #84]	; 0x54
 800456e:	e00d      	b.n	800458c <OS_TickListInsertDly+0xe0>
        }

    } else if (time > (OS_TICK)0u) {                                    /* RELATIVE time delay mode                          */
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d002      	beq.n	800457c <OS_TickListInsertDly+0xd0>
        remain = time;
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	617b      	str	r3, [r7, #20]
 800457a:	e007      	b.n	800458c <OS_TickListInsertDly+0xe0>

    } else {                                                            /* Zero time delay; ...                              */
        p_tcb->TickRemain = (OS_TICK)0u;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	651a      	str	r2, [r3, #80]	; 0x50
       *p_err             =  OS_ERR_TIME_ZERO_DLY;                      /* ... do NOT delay.                                 */
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	f247 227e 	movw	r2, #29310	; 0x727e
 8004588:	801a      	strh	r2, [r3, #0]
        return;
 800458a:	e00b      	b.n	80045a4 <OS_TickListInsertDly+0xf8>
    }

    p_tcb->TaskState = OS_TASK_STATE_DLY;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    OS_TickListInsert(&OSTickListDly, p_tcb, remain);
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	68f9      	ldr	r1, [r7, #12]
 8004598:	4805      	ldr	r0, [pc, #20]	; (80045b0 <OS_TickListInsertDly+0x104>)
 800459a:	f7ff fef1 	bl	8004380 <OS_TickListInsert>

   *p_err = OS_ERR_NONE;
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2200      	movs	r2, #0
 80045a2:	801a      	strh	r2, [r3, #0]
}
 80045a4:	3718      	adds	r7, #24
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	200028ac 	.word	0x200028ac
 80045b0:	200029b0 	.word	0x200029b0

080045b4 <OS_TickListRemove>:
*              2) This function is assumed to be called with interrupts disabled.
************************************************************************************************************************
*/

void  OS_TickListRemove (OS_TCB  *p_tcb)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b087      	sub	sp, #28
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
    OS_TICK_LIST  *p_list;
    OS_TCB        *p_tcb1;
    OS_TCB        *p_tcb2;


    p_list = (OS_TICK_LIST *)p_tcb->TickListPtr;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	69db      	ldr	r3, [r3, #28]
 80045c0:	617b      	str	r3, [r7, #20]
    p_tcb1  = p_tcb->TickPrevPtr;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	613b      	str	r3, [r7, #16]
    p_tcb2  = p_tcb->TickNextPtr;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	60fb      	str	r3, [r7, #12]
    if (p_tcb1 == (OS_TCB *)0) {
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d12c      	bne.n	800462e <OS_TickListRemove+0x7a>
        if (p_tcb2 == (OS_TCB *)0) {                                    /* Remove ONLY entry in the list?                    */
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10c      	bne.n	80045f4 <OS_TickListRemove+0x40>
            p_list->TCB_Ptr    = (OS_TCB        *)0;
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	2200      	movs	r2, #0
 80045de:	601a      	str	r2, [r3, #0]
#if OS_CFG_DBG_EN > 0u
            p_list->NbrEntries = (OS_OBJ_QTY    )0u;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	2200      	movs	r2, #0
 80045e4:	809a      	strh	r2, [r3, #4]
#endif
            p_tcb->TickRemain   = (OS_TICK       )0u;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	651a      	str	r2, [r3, #80]	; 0x50
            p_tcb->TickListPtr  = (OS_TICK_LIST *)0;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	61da      	str	r2, [r3, #28]
#endif
        p_tcb->TickNextPtr  = (OS_TCB       *)0;
        p_tcb->TickRemain   = (OS_TICK       )0u;
        p_tcb->TickListPtr  = (OS_TICK_LIST *)0;
    }
}
 80045f2:	e03e      	b.n	8004672 <OS_TickListRemove+0xbe>
            p_list->NbrEntries = (OS_OBJ_QTY    )0u;
#endif
            p_tcb->TickRemain   = (OS_TICK       )0u;
            p_tcb->TickListPtr  = (OS_TICK_LIST *)0;
        } else {
            p_tcb2->TickPrevPtr = (OS_TCB       *)0;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	619a      	str	r2, [r3, #24]
            p_tcb2->TickRemain += p_tcb->TickRemain;                    /* Add back the ticks to the delta                   */
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004602:	441a      	add	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	651a      	str	r2, [r3, #80]	; 0x50
            p_list->TCB_Ptr    = p_tcb2;
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	601a      	str	r2, [r3, #0]
#if OS_CFG_DBG_EN > 0u
            p_list->NbrEntries--;
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	889b      	ldrh	r3, [r3, #4]
 8004612:	3b01      	subs	r3, #1
 8004614:	b29a      	uxth	r2, r3
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	809a      	strh	r2, [r3, #4]
#endif
            p_tcb->TickNextPtr  = (OS_TCB       *)0;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	615a      	str	r2, [r3, #20]
            p_tcb->TickRemain   = (OS_TICK       )0u;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	651a      	str	r2, [r3, #80]	; 0x50
            p_tcb->TickListPtr  = (OS_TICK_LIST *)0;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	61da      	str	r2, [r3, #28]
#endif
        p_tcb->TickNextPtr  = (OS_TCB       *)0;
        p_tcb->TickRemain   = (OS_TICK       )0u;
        p_tcb->TickListPtr  = (OS_TICK_LIST *)0;
    }
}
 800462c:	e021      	b.n	8004672 <OS_TickListRemove+0xbe>
            p_tcb->TickNextPtr  = (OS_TCB       *)0;
            p_tcb->TickRemain   = (OS_TICK       )0u;
            p_tcb->TickListPtr  = (OS_TICK_LIST *)0;
        }
    } else {
        p_tcb1->TickNextPtr = p_tcb2;    
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	615a      	str	r2, [r3, #20]
        if (p_tcb2 != (OS_TCB *)0) {
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d009      	beq.n	800464e <OS_TickListRemove+0x9a>
            p_tcb2->TickPrevPtr = p_tcb1;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	619a      	str	r2, [r3, #24]
            p_tcb2->TickRemain += p_tcb->TickRemain;                    /* Add back the ticks to the delta list              */
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004648:	441a      	add	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	651a      	str	r2, [r3, #80]	; 0x50
        }
        p_tcb->TickPrevPtr  = (OS_TCB       *)0;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	619a      	str	r2, [r3, #24]
#if OS_CFG_DBG_EN > 0u
        p_list->NbrEntries--;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	889b      	ldrh	r3, [r3, #4]
 8004658:	3b01      	subs	r3, #1
 800465a:	b29a      	uxth	r2, r3
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	809a      	strh	r2, [r3, #4]
#endif
        p_tcb->TickNextPtr  = (OS_TCB       *)0;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	615a      	str	r2, [r3, #20]
        p_tcb->TickRemain   = (OS_TICK       )0u;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	651a      	str	r2, [r3, #80]	; 0x50
        p_tcb->TickListPtr  = (OS_TICK_LIST *)0;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	61da      	str	r2, [r3, #28]
    }
}
 8004672:	bf00      	nop
 8004674:	371c      	adds	r7, #28
 8004676:	46bd      	mov	sp, r7
 8004678:	bc80      	pop	{r7}
 800467a:	4770      	bx	lr

0800467c <OS_TickListResetPeak>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TickListResetPeak (void)
{
 800467c:	b480      	push	{r7}
 800467e:	af00      	add	r7, sp, #0
#if OS_CFG_DBG_EN > 0u
#endif
}
 8004680:	bf00      	nop
 8004682:	46bd      	mov	sp, r7
 8004684:	bc80      	pop	{r7}
 8004686:	4770      	bx	lr

08004688 <OS_TickListUpdateDly>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

static  CPU_TS  OS_TickListUpdateDly (void)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af00      	add	r7, sp, #0
    CPU_TS        ts_start;
    CPU_TS        ts_delta_dly;
#if OS_CFG_DBG_EN > 0u
    OS_OBJ_QTY    nbr_updated;
#endif
    CPU_SR_ALLOC();
 800468e:	2300      	movs	r3, #0
 8004690:	60fb      	str	r3, [r7, #12]

                                                              
                                                                        
    OS_CRITICAL_ENTER();
 8004692:	f7fb fe25 	bl	80002e0 <CPU_SR_Save>
 8004696:	60f8      	str	r0, [r7, #12]
    ts_start    = OS_TS_GET();
 8004698:	f002 ff68 	bl	800756c <CPU_TS_TmrRd>
 800469c:	60b8      	str	r0, [r7, #8]
#if OS_CFG_DBG_EN > 0u
    nbr_updated = (OS_OBJ_QTY)0u;
 800469e:	2300      	movs	r3, #0
 80046a0:	827b      	strh	r3, [r7, #18]
#endif
    p_list      = &OSTickListDly;
 80046a2:	4b29      	ldr	r3, [pc, #164]	; (8004748 <OS_TickListUpdateDly+0xc0>)
 80046a4:	607b      	str	r3, [r7, #4]
    p_tcb       = p_list->TCB_Ptr;                                      
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	617b      	str	r3, [r7, #20]
    if (p_tcb != (OS_TCB *)0) {
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d039      	beq.n	8004726 <OS_TickListUpdateDly+0x9e>
        p_tcb->TickRemain--;
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046b6:	1e5a      	subs	r2, r3, #1
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	651a      	str	r2, [r3, #80]	; 0x50
        while (p_tcb->TickRemain == 0u) {
 80046bc:	e02f      	b.n	800471e <OS_TickListUpdateDly+0x96>
#if OS_CFG_DBG_EN > 0u
            nbr_updated++;											    /* Keep track of the number of TCBs updated          */
 80046be:	8a7b      	ldrh	r3, [r7, #18]
 80046c0:	3301      	adds	r3, #1
 80046c2:	827b      	strh	r3, [r7, #18]
#endif
            if (p_tcb->TaskState == OS_TASK_STATE_DLY) {
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d107      	bne.n	80046de <OS_TickListUpdateDly+0x56>
                p_tcb->TaskState = OS_TASK_STATE_RDY;
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                OS_RdyListInsert(p_tcb);                                /* Insert the task in the ready list                 */
 80046d6:	6978      	ldr	r0, [r7, #20]
 80046d8:	f7ff fc62 	bl	8003fa0 <OS_RdyListInsert>
 80046dc:	e008      	b.n	80046f0 <OS_TickListUpdateDly+0x68>
            } else if (p_tcb->TaskState == OS_TASK_STATE_DLY_SUSPENDED) {
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80046e4:	2b05      	cmp	r3, #5
 80046e6:	d103      	bne.n	80046f0 <OS_TickListUpdateDly+0x68>
                p_tcb->TaskState = OS_TASK_STATE_SUSPENDED;
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	2204      	movs	r2, #4
 80046ec:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
            }

            p_list->TCB_Ptr = p_tcb->TickNextPtr;
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	695a      	ldr	r2, [r3, #20]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	601a      	str	r2, [r3, #0]
            p_tcb           = p_list->TCB_Ptr;                          /* Get 'p_tcb' again for loop                        */
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	617b      	str	r3, [r7, #20]
            if (p_tcb == (OS_TCB *)0) {
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d103      	bne.n	800470c <OS_TickListUpdateDly+0x84>
#if OS_CFG_DBG_EN > 0u
                p_list->NbrEntries = (OS_OBJ_QTY)0u;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	809a      	strh	r2, [r3, #4]
#endif
                break;
 800470a:	e00c      	b.n	8004726 <OS_TickListUpdateDly+0x9e>
            } else {
#if OS_CFG_DBG_EN > 0u
                p_list->NbrEntries--;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	889b      	ldrh	r3, [r3, #4]
 8004710:	3b01      	subs	r3, #1
 8004712:	b29a      	uxth	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	809a      	strh	r2, [r3, #4]
#endif
                p_tcb->TickPrevPtr = (OS_TCB *)0;
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	2200      	movs	r2, #0
 800471c:	619a      	str	r2, [r3, #24]
#endif
    p_list      = &OSTickListDly;
    p_tcb       = p_list->TCB_Ptr;                                      
    if (p_tcb != (OS_TCB *)0) {
        p_tcb->TickRemain--;
        while (p_tcb->TickRemain == 0u) {
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004722:	2b00      	cmp	r3, #0
 8004724:	d0cb      	beq.n	80046be <OS_TickListUpdateDly+0x36>
                p_tcb->TickPrevPtr = (OS_TCB *)0;
            }
        }
    }
#if OS_CFG_DBG_EN > 0u
    p_list->NbrUpdated = nbr_updated;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	8a7a      	ldrh	r2, [r7, #18]
 800472a:	80da      	strh	r2, [r3, #6]
#endif
    ts_delta_dly       = OS_TS_GET() - ts_start;                        /* Measure execution time of the update              */
 800472c:	f002 ff1e 	bl	800756c <CPU_TS_TmrRd>
 8004730:	4602      	mov	r2, r0
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	603b      	str	r3, [r7, #0]
    OS_CRITICAL_EXIT();
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f7fb fdd5 	bl	80002e8 <CPU_SR_Restore>

    return (ts_delta_dly);
 800473e:	683b      	ldr	r3, [r7, #0]
}
 8004740:	4618      	mov	r0, r3
 8004742:	3718      	adds	r7, #24
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	200029b0 	.word	0x200029b0

0800474c <OS_TickListUpdateTimeout>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

static  CPU_TS  OS_TickListUpdateTimeout (void)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b088      	sub	sp, #32
 8004750:	af00      	add	r7, sp, #0
#endif
#if OS_CFG_MUTEX_EN > 0u
    OS_TCB       *p_tcb_owner;
    OS_PRIO       prio_new;
#endif
    CPU_SR_ALLOC();
 8004752:	2300      	movs	r3, #0
 8004754:	613b      	str	r3, [r7, #16]

                                                              
                                                                        
    OS_CRITICAL_ENTER();                                                /* ======= UPDATE TASKS WAITING WITH TIMEOUT ======= */
 8004756:	f7fb fdc3 	bl	80002e0 <CPU_SR_Save>
 800475a:	6138      	str	r0, [r7, #16]
    ts_start    = OS_TS_GET();
 800475c:	f002 ff06 	bl	800756c <CPU_TS_TmrRd>
 8004760:	60f8      	str	r0, [r7, #12]
#if OS_CFG_DBG_EN > 0u
    nbr_updated = (OS_OBJ_QTY)0u;
 8004762:	2300      	movs	r3, #0
 8004764:	837b      	strh	r3, [r7, #26]
#endif
    p_list      = &OSTickListTimeout;
 8004766:	4b51      	ldr	r3, [pc, #324]	; (80048ac <OS_TickListUpdateTimeout+0x160>)
 8004768:	60bb      	str	r3, [r7, #8]
    p_tcb       = p_list->TCB_Ptr;                                  
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	61fb      	str	r3, [r7, #28]
    if (p_tcb != (OS_TCB *)0) {
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 8089 	beq.w	800488a <OS_TickListUpdateTimeout+0x13e>
        p_tcb->TickRemain--;
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800477c:	1e5a      	subs	r2, r3, #1
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	651a      	str	r2, [r3, #80]	; 0x50
        while (p_tcb->TickRemain == 0u) {
 8004782:	e07d      	b.n	8004880 <OS_TickListUpdateTimeout+0x134>
#if OS_CFG_DBG_EN > 0u
            nbr_updated++;
 8004784:	8b7b      	ldrh	r3, [r7, #26]
 8004786:	3301      	adds	r3, #1
 8004788:	837b      	strh	r3, [r7, #26]
#endif

#if OS_CFG_MUTEX_EN > 0u
            p_tcb_owner = (OS_TCB *)0;
 800478a:	2300      	movs	r3, #0
 800478c:	617b      	str	r3, [r7, #20]
            if (p_tcb->PendOn == OS_TASK_PEND_ON_MUTEX) {
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004794:	2b04      	cmp	r3, #4
 8004796:	d104      	bne.n	80047a2 <OS_TickListUpdateTimeout+0x56>
                p_tcb_owner = ((OS_MUTEX *)p_tcb->PendDataTblPtr->PendObjPtr)->OwnerTCBPtr;
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a0:	617b      	str	r3, [r7, #20]
            }
#endif

#if (OS_MSG_EN > 0u)
            p_tcb->MsgPtr  = (void      *)0;
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	2200      	movs	r2, #0
 80047a6:	659a      	str	r2, [r3, #88]	; 0x58
            p_tcb->MsgSize = (OS_MSG_SIZE)0u;
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
#endif
            p_tcb->TS      = OS_TS_GET();
 80047b0:	f002 fedc 	bl	800756c <CPU_TS_TmrRd>
 80047b4:	4602      	mov	r2, r0
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	649a      	str	r2, [r3, #72]	; 0x48
            OS_PendListRemove(p_tcb);                                   /* Remove from wait list                             */
 80047ba:	69f8      	ldr	r0, [r7, #28]
 80047bc:	f7ff fa90 	bl	8003ce0 <OS_PendListRemove>
            if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT) {
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80047c6:	2b03      	cmp	r3, #3
 80047c8:	d107      	bne.n	80047da <OS_TickListUpdateTimeout+0x8e>
                OS_RdyListInsert(p_tcb);                                /* Insert the task in the ready list                 */
 80047ca:	69f8      	ldr	r0, [r7, #28]
 80047cc:	f7ff fbe8 	bl	8003fa0 <OS_RdyListInsert>
                p_tcb->TaskState  = OS_TASK_STATE_RDY;
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 80047d8:	e008      	b.n	80047ec <OS_TickListUpdateTimeout+0xa0>
            } else if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED) {
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80047e0:	2b07      	cmp	r3, #7
 80047e2:	d103      	bne.n	80047ec <OS_TickListUpdateTimeout+0xa0>

                p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	2204      	movs	r2, #4
 80047e8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
            }
            p_tcb->PendStatus = OS_STATUS_PEND_TIMEOUT;                 /* Indicate pend timed out                           */
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	2203      	movs	r2, #3
 80047f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;                /* Indicate no longer pending                        */
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if OS_CFG_MUTEX_EN > 0u
            if(p_tcb_owner != (OS_TCB *)0) {
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d027      	beq.n	8004852 <OS_TickListUpdateTimeout+0x106>
                if ((p_tcb_owner->Prio != p_tcb_owner->BasePrio) &&
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800480e:	429a      	cmp	r2, r3
 8004810:	d01f      	beq.n	8004852 <OS_TickListUpdateTimeout+0x106>
                    (p_tcb_owner->Prio == p_tcb->Prio)) {               /* Has the owner inherited a priority?               */
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
            p_tcb->PendStatus = OS_STATUS_PEND_TIMEOUT;                 /* Indicate pend timed out                           */
            p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;                /* Indicate no longer pending                        */

#if OS_CFG_MUTEX_EN > 0u
            if(p_tcb_owner != (OS_TCB *)0) {
                if ((p_tcb_owner->Prio != p_tcb_owner->BasePrio) &&
 800481e:	429a      	cmp	r2, r3
 8004820:	d117      	bne.n	8004852 <OS_TickListUpdateTimeout+0x106>
                    (p_tcb_owner->Prio == p_tcb->Prio)) {               /* Has the owner inherited a priority?               */
                    prio_new = OS_MutexGrpPrioFindHighest(p_tcb_owner);
 8004822:	6978      	ldr	r0, [r7, #20]
 8004824:	f000 ff3a 	bl	800569c <OS_MutexGrpPrioFindHighest>
 8004828:	4603      	mov	r3, r0
 800482a:	71fb      	strb	r3, [r7, #7]
                    prio_new = prio_new > p_tcb_owner->BasePrio ? p_tcb_owner->BasePrio : prio_new;
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8004832:	79fb      	ldrb	r3, [r7, #7]
 8004834:	4293      	cmp	r3, r2
 8004836:	bf28      	it	cs
 8004838:	4613      	movcs	r3, r2
 800483a:	71fb      	strb	r3, [r7, #7]
                    if(prio_new != p_tcb_owner->Prio) {
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8004842:	79fa      	ldrb	r2, [r7, #7]
 8004844:	429a      	cmp	r2, r3
 8004846:	d004      	beq.n	8004852 <OS_TickListUpdateTimeout+0x106>
                        OS_TaskChangePrio(p_tcb_owner, prio_new);
 8004848:	79fb      	ldrb	r3, [r7, #7]
 800484a:	4619      	mov	r1, r3
 800484c:	6978      	ldr	r0, [r7, #20]
 800484e:	f7fe fbcb 	bl	8002fe8 <OS_TaskChangePrio>
                    }
                }
            }
#endif

            p_list->TCB_Ptr = p_tcb->TickNextPtr;
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	695a      	ldr	r2, [r3, #20]
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	601a      	str	r2, [r3, #0]
            p_tcb           = p_list->TCB_Ptr;                          /* Get 'p_tcb' again for loop                        */
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	61fb      	str	r3, [r7, #28]
            if (p_tcb == (OS_TCB *)0) {
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d103      	bne.n	800486e <OS_TickListUpdateTimeout+0x122>
#if OS_CFG_DBG_EN > 0u
                p_list->NbrEntries = (OS_OBJ_QTY)0u;
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	2200      	movs	r2, #0
 800486a:	809a      	strh	r2, [r3, #4]
#endif
                break;
 800486c:	e00d      	b.n	800488a <OS_TickListUpdateTimeout+0x13e>
            } else {
#if OS_CFG_DBG_EN > 0u
                p_list->NbrEntries--;
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	889b      	ldrh	r3, [r3, #4]
 8004872:	3b01      	subs	r3, #1
 8004874:	b29a      	uxth	r2, r3
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	809a      	strh	r2, [r3, #4]
#endif
                p_tcb->TickPrevPtr = (OS_TCB *)0;
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	2200      	movs	r2, #0
 800487e:	619a      	str	r2, [r3, #24]
#endif
    p_list      = &OSTickListTimeout;
    p_tcb       = p_list->TCB_Ptr;                                  
    if (p_tcb != (OS_TCB *)0) {
        p_tcb->TickRemain--;
        while (p_tcb->TickRemain == 0u) {
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004884:	2b00      	cmp	r3, #0
 8004886:	f43f af7d 	beq.w	8004784 <OS_TickListUpdateTimeout+0x38>
                p_tcb->TickPrevPtr = (OS_TCB *)0;
            }
        }
    }
#if OS_CFG_DBG_EN > 0u
    p_list->NbrUpdated = nbr_updated;
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	8b7a      	ldrh	r2, [r7, #26]
 800488e:	80da      	strh	r2, [r3, #6]
#endif
    ts_delta_timeout   = OS_TS_GET() - ts_start;                        /* Measure execution time of the update              */
 8004890:	f002 fe6c 	bl	800756c <CPU_TS_TmrRd>
 8004894:	4602      	mov	r2, r0
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	603b      	str	r3, [r7, #0]
    OS_CRITICAL_EXIT();                                                 /* ------------------------------------------------- */
 800489c:	6938      	ldr	r0, [r7, #16]
 800489e:	f7fb fd23 	bl	80002e8 <CPU_SR_Restore>

    return (ts_delta_timeout);
 80048a2:	683b      	ldr	r3, [r7, #0]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3720      	adds	r7, #32
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	200029bc 	.word	0x200029bc

080048b0 <OS_FlagInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_FlagInit (OS_ERR  *p_err)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSFlagDbgListPtr = (OS_FLAG_GRP *)0;
 80048b8:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <OS_FlagInit+0x24>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	601a      	str	r2, [r3, #0]
#endif

    OSFlagQty        = (OS_OBJ_QTY   )0;
 80048be:	4b06      	ldr	r3, [pc, #24]	; (80048d8 <OS_FlagInit+0x28>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	801a      	strh	r2, [r3, #0]
   *p_err            = OS_ERR_NONE;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	801a      	strh	r2, [r3, #0]
}
 80048ca:	bf00      	nop
 80048cc:	370c      	adds	r7, #12
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bc80      	pop	{r7}
 80048d2:	4770      	bx	lr
 80048d4:	200028c8 	.word	0x200028c8
 80048d8:	200028c4 	.word	0x200028c4

080048dc <OSStatReset>:
* Returns    : none
************************************************************************************************************************
*/

void  OSStatReset (OS_ERR  *p_err)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
#endif
#if (OS_CFG_Q_EN > 0u)
    OS_Q        *p_q;
#endif
#endif
    CPU_SR_ALLOC();
 80048e4:	2300      	movs	r3, #0
 80048e6:	60fb      	str	r3, [r7, #12]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    CPU_CRITICAL_ENTER();
 80048e8:	f7fb fcfa 	bl	80002e0 <CPU_SR_Save>
 80048ec:	60f8      	str	r0, [r7, #12]
    OSIntQTaskTimeMax     = (CPU_TS    )0;                  /* Reset the task execution times                         */
    OSIntQNbrEntriesMax   = (OS_OBJ_QTY)0;                  /* Reset the queue maximum number of entries              */
#endif

#if OS_CFG_STAT_TASK_EN > 0u
    OSStatTaskCPUUsageMax = 0u;
 80048ee:	4b3f      	ldr	r3, [pc, #252]	; (80049ec <OSStatReset+0x110>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	801a      	strh	r2, [r3, #0]
    OSStatTaskTimeMax     = (CPU_TS)0;
 80048f4:	4b3e      	ldr	r3, [pc, #248]	; (80049f0 <OSStatReset+0x114>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	601a      	str	r2, [r3, #0]
#endif

    OSTickTaskTimeMax     = (CPU_TS)0;
 80048fa:	4b3e      	ldr	r3, [pc, #248]	; (80049f4 <OSStatReset+0x118>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	601a      	str	r2, [r3, #0]

#if OS_CFG_TMR_EN > 0u
    OSTmrTaskTimeMax      = (CPU_TS)0;
 8004900:	4b3d      	ldr	r3, [pc, #244]	; (80049f8 <OSStatReset+0x11c>)
 8004902:	2200      	movs	r2, #0
 8004904:	601a      	str	r2, [r3, #0]
#ifdef CPU_CFG_INT_DIS_MEAS_EN
    OSIntDisTimeMax       = (CPU_TS)0;                      /* Reset the maximum interrupt disable time               */
#endif

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
    OSSchedLockTimeMax    = (CPU_TS)0;                      /* Reset the maximum scheduler lock time                  */
 8004906:	4b3d      	ldr	r3, [pc, #244]	; (80049fc <OSStatReset+0x120>)
 8004908:	2200      	movs	r2, #0
 800490a:	601a      	str	r2, [r3, #0]
#endif

#if ((OS_MSG_EN > 0u) && (OS_CFG_DBG_EN > 0u))
    OSMsgPool.NbrUsedMax  = 0u;
 800490c:	4b3c      	ldr	r3, [pc, #240]	; (8004a00 <OSStatReset+0x124>)
 800490e:	2200      	movs	r2, #0
 8004910:	811a      	strh	r2, [r3, #8]
#endif
    CPU_CRITICAL_EXIT();
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f7fb fce8 	bl	80002e8 <CPU_SR_Restore>

#if OS_CFG_DBG_EN > 0u
    CPU_CRITICAL_ENTER();
 8004918:	f7fb fce2 	bl	80002e0 <CPU_SR_Save>
 800491c:	60f8      	str	r0, [r7, #12]
    p_tcb = OSTaskDbgListPtr;
 800491e:	4b39      	ldr	r3, [pc, #228]	; (8004a04 <OSStatReset+0x128>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	617b      	str	r3, [r7, #20]
    CPU_CRITICAL_EXIT();
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f7fb fcdf 	bl	80002e8 <CPU_SR_Restore>
    while (p_tcb != (OS_TCB *)0) {                          /* Reset per-Task statistics                              */
 800492a:	e034      	b.n	8004996 <OSStatReset+0xba>
        CPU_CRITICAL_ENTER();
 800492c:	f7fb fcd8 	bl	80002e0 <CPU_SR_Save>
 8004930:	60f8      	str	r0, [r7, #12]
#ifdef CPU_CFG_INT_DIS_MEAS_EN
        p_tcb->IntDisTimeMax    = (CPU_TS      )0;
#endif

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
        p_tcb->SchedLockTimeMax = (CPU_TS      )0;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	2200      	movs	r2, #0
 8004936:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
#endif

#if OS_CFG_TASK_PROFILE_EN > 0u
#if OS_CFG_TASK_Q_EN > 0u
        p_tcb->MsgQPendTimeMax  = (CPU_TS      )0;
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	2200      	movs	r2, #0
 800493e:	675a      	str	r2, [r3, #116]	; 0x74
#endif
        p_tcb->SemPendTimeMax   = (CPU_TS      )0;
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	2200      	movs	r2, #0
 8004944:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        p_tcb->CtxSwCtr         = (OS_CTR      )0;
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	2200      	movs	r2, #0
 800494c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        p_tcb->CPUUsage         = (OS_CPU_USAGE)0;
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	2200      	movs	r2, #0
 8004954:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
        p_tcb->CPUUsageMax      = (OS_CPU_USAGE)0;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	2200      	movs	r2, #0
 800495c:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
        p_tcb->CyclesTotal      = (OS_CYCLES   )0;
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	2200      	movs	r2, #0
 8004964:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        p_tcb->CyclesTotalPrev  = (OS_CYCLES   )0;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	2200      	movs	r2, #0
 800496c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        p_tcb->CyclesStart      =  OS_TS_GET();
 8004970:	f002 fdfc 	bl	800756c <CPU_TS_TmrRd>
 8004974:	4602      	mov	r2, r0
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif

#if OS_CFG_TASK_Q_EN > 0u
        p_msg_q                 = &p_tcb->MsgQ;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	3360      	adds	r3, #96	; 0x60
 8004980:	60bb      	str	r3, [r7, #8]
        p_msg_q->NbrEntriesMax  = (OS_MSG_QTY  )0;
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	2200      	movs	r2, #0
 8004986:	819a      	strh	r2, [r3, #12]
#endif
        p_tcb                   = p_tcb->DbgNextPtr;
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800498e:	617b      	str	r3, [r7, #20]
        CPU_CRITICAL_EXIT();
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f7fb fca9 	bl	80002e8 <CPU_SR_Restore>

#if OS_CFG_DBG_EN > 0u
    CPU_CRITICAL_ENTER();
    p_tcb = OSTaskDbgListPtr;
    CPU_CRITICAL_EXIT();
    while (p_tcb != (OS_TCB *)0) {                          /* Reset per-Task statistics                              */
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1c7      	bne.n	800492c <OSStatReset+0x50>
        CPU_CRITICAL_EXIT();
    }
#endif

#if (OS_CFG_Q_EN > 0u) && (OS_CFG_DBG_EN > 0u)
    CPU_CRITICAL_ENTER();
 800499c:	f7fb fca0 	bl	80002e0 <CPU_SR_Save>
 80049a0:	60f8      	str	r0, [r7, #12]
    p_q = OSQDbgListPtr;
 80049a2:	4b19      	ldr	r3, [pc, #100]	; (8004a08 <OSStatReset+0x12c>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	613b      	str	r3, [r7, #16]
    CPU_CRITICAL_EXIT();
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f7fb fc9d 	bl	80002e8 <CPU_SR_Restore>
    while (p_q != (OS_Q *)0) {                              /* Reset message queues statistics                        */
 80049ae:	e00e      	b.n	80049ce <OSStatReset+0xf2>
        CPU_CRITICAL_ENTER();
 80049b0:	f7fb fc96 	bl	80002e0 <CPU_SR_Save>
 80049b4:	60f8      	str	r0, [r7, #12]
        p_msg_q                = &p_q->MsgQ;
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	3320      	adds	r3, #32
 80049ba:	60bb      	str	r3, [r7, #8]
        p_msg_q->NbrEntriesMax = (OS_MSG_QTY)0;
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	2200      	movs	r2, #0
 80049c0:	819a      	strh	r2, [r3, #12]
        p_q                    = p_q->DbgNextPtr;
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	613b      	str	r3, [r7, #16]
        CPU_CRITICAL_EXIT();
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f7fb fc8d 	bl	80002e8 <CPU_SR_Restore>

#if (OS_CFG_Q_EN > 0u) && (OS_CFG_DBG_EN > 0u)
    CPU_CRITICAL_ENTER();
    p_q = OSQDbgListPtr;
    CPU_CRITICAL_EXIT();
    while (p_q != (OS_Q *)0) {                              /* Reset message queues statistics                        */
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1ed      	bne.n	80049b0 <OSStatReset+0xd4>
        p_q                    = p_q->DbgNextPtr;
        CPU_CRITICAL_EXIT();
    }
#endif

    OS_TickListResetPeak();                                 /* Reset tick wheel statistics                            */
 80049d4:	f7ff fe52 	bl	800467c <OS_TickListResetPeak>

#if OS_CFG_TMR_EN > 0u
    OS_TmrResetPeak();
 80049d8:	f001 f982 	bl	8005ce0 <OS_TmrResetPeak>
#endif


   *p_err = OS_ERR_NONE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	801a      	strh	r2, [r3, #0]
}
 80049e2:	bf00      	nop
 80049e4:	3718      	adds	r7, #24
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	200026b2 	.word	0x200026b2
 80049f0:	20002448 	.word	0x20002448
 80049f4:	200029a0 	.word	0x200029a0
 80049f8:	200026c4 	.word	0x200026c4
 80049fc:	200028cc 	.word	0x200028cc
 8004a00:	2000279c 	.word	0x2000279c
 8004a04:	200026c0 	.word	0x200026c0
 8004a08:	20002868 	.word	0x20002868

08004a0c <OSStatTaskCPUUsageInit>:
* Returns    : none
************************************************************************************************************************
*/

void  OSStatTaskCPUUsageInit (OS_ERR  *p_err)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
    OS_ERR   err;
    OS_TICK  dly;
    CPU_SR_ALLOC();
 8004a14:	2300      	movs	r3, #0
 8004a16:	613b      	str	r3, [r7, #16]
        return;
    }
#endif

#if ((OS_CFG_TMR_EN > 0u) && (OS_CFG_TASK_SUSPEND_EN > 0u))
    OSTaskSuspend(&OSTmrTaskTCB, &err);
 8004a18:	f107 030e 	add.w	r3, r7, #14
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	4832      	ldr	r0, [pc, #200]	; (8004ae8 <OSStatTaskCPUUsageInit+0xdc>)
 8004a20:	f7fd ffea 	bl	80029f8 <OSTaskSuspend>
    if (err != OS_ERR_NONE) {
 8004a24:	89fb      	ldrh	r3, [r7, #14]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d003      	beq.n	8004a32 <OSStatTaskCPUUsageInit+0x26>
       *p_err = err;
 8004a2a:	89fa      	ldrh	r2, [r7, #14]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	801a      	strh	r2, [r3, #0]
        return;
 8004a30:	e056      	b.n	8004ae0 <OSStatTaskCPUUsageInit+0xd4>
    }
#endif

    OSTimeDly((OS_TICK )2,                                  /* Synchronize with clock tick                            */
 8004a32:	f107 030e 	add.w	r3, r7, #14
 8004a36:	461a      	mov	r2, r3
 8004a38:	2100      	movs	r1, #0
 8004a3a:	2002      	movs	r0, #2
 8004a3c:	f000 fae2 	bl	8005004 <OSTimeDly>
              (OS_OPT  )OS_OPT_TIME_DLY,
              (OS_ERR *)&err);
    if (err != OS_ERR_NONE) {
 8004a40:	89fb      	ldrh	r3, [r7, #14]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <OSStatTaskCPUUsageInit+0x42>
       *p_err = err;
 8004a46:	89fa      	ldrh	r2, [r7, #14]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	801a      	strh	r2, [r3, #0]
        return;
 8004a4c:	e048      	b.n	8004ae0 <OSStatTaskCPUUsageInit+0xd4>
    }
    CPU_CRITICAL_ENTER();
 8004a4e:	f7fb fc47 	bl	80002e0 <CPU_SR_Save>
 8004a52:	6138      	str	r0, [r7, #16]
    OSStatTaskCtr = (OS_TICK)0;                             /* Clear idle counter                                     */
 8004a54:	4b25      	ldr	r3, [pc, #148]	; (8004aec <OSStatTaskCPUUsageInit+0xe0>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	601a      	str	r2, [r3, #0]
    CPU_CRITICAL_EXIT();
 8004a5a:	6938      	ldr	r0, [r7, #16]
 8004a5c:	f7fb fc44 	bl	80002e8 <CPU_SR_Restore>

    dly = (OS_TICK)0;
 8004a60:	2300      	movs	r3, #0
 8004a62:	617b      	str	r3, [r7, #20]
    if (OSCfg_TickRate_Hz > OSCfg_StatTaskRate_Hz) {
 8004a64:	4b22      	ldr	r3, [pc, #136]	; (8004af0 <OSStatTaskCPUUsageInit+0xe4>)
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	4b22      	ldr	r3, [pc, #136]	; (8004af4 <OSStatTaskCPUUsageInit+0xe8>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d906      	bls.n	8004a7e <OSStatTaskCPUUsageInit+0x72>
        dly = (OS_TICK)(OSCfg_TickRate_Hz / OSCfg_StatTaskRate_Hz);
 8004a70:	4b1f      	ldr	r3, [pc, #124]	; (8004af0 <OSStatTaskCPUUsageInit+0xe4>)
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	4b1f      	ldr	r3, [pc, #124]	; (8004af4 <OSStatTaskCPUUsageInit+0xe8>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a7c:	617b      	str	r3, [r7, #20]
    }
    if (dly == (OS_TICK)0) {
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d106      	bne.n	8004a92 <OSStatTaskCPUUsageInit+0x86>
        dly =  (OS_TICK)(OSCfg_TickRate_Hz / (OS_RATE_HZ)10);
 8004a84:	4b1a      	ldr	r3, [pc, #104]	; (8004af0 <OSStatTaskCPUUsageInit+0xe4>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a1b      	ldr	r2, [pc, #108]	; (8004af8 <OSStatTaskCPUUsageInit+0xec>)
 8004a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a8e:	08db      	lsrs	r3, r3, #3
 8004a90:	617b      	str	r3, [r7, #20]
    }

    OSTimeDly(dly,                                          /* Determine MAX. idle counter value                      */
 8004a92:	f107 030e 	add.w	r3, r7, #14
 8004a96:	461a      	mov	r2, r3
 8004a98:	2100      	movs	r1, #0
 8004a9a:	6978      	ldr	r0, [r7, #20]
 8004a9c:	f000 fab2 	bl	8005004 <OSTimeDly>
              OS_OPT_TIME_DLY,
              &err);

#if ((OS_CFG_TMR_EN > 0u) && (OS_CFG_TASK_SUSPEND_EN > 0u))
    OSTaskResume(&OSTmrTaskTCB, &err);
 8004aa0:	f107 030e 	add.w	r3, r7, #14
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	4810      	ldr	r0, [pc, #64]	; (8004ae8 <OSStatTaskCPUUsageInit+0xdc>)
 8004aa8:	f7fd fde8 	bl	800267c <OSTaskResume>
    if (err != OS_ERR_NONE) {
 8004aac:	89fb      	ldrh	r3, [r7, #14]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <OSStatTaskCPUUsageInit+0xae>
       *p_err = err;
 8004ab2:	89fa      	ldrh	r2, [r7, #14]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	801a      	strh	r2, [r3, #0]
        return;
 8004ab8:	e012      	b.n	8004ae0 <OSStatTaskCPUUsageInit+0xd4>
    }
#endif

    CPU_CRITICAL_ENTER();
 8004aba:	f7fb fc11 	bl	80002e0 <CPU_SR_Save>
 8004abe:	6138      	str	r0, [r7, #16]
    OSStatTaskTimeMax = (CPU_TS)0;
 8004ac0:	4b0e      	ldr	r3, [pc, #56]	; (8004afc <OSStatTaskCPUUsageInit+0xf0>)
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	601a      	str	r2, [r3, #0]

    OSStatTaskCtrMax  = OSStatTaskCtr;                      /* Store maximum idle counter count                       */
 8004ac6:	4b09      	ldr	r3, [pc, #36]	; (8004aec <OSStatTaskCPUUsageInit+0xe0>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a0d      	ldr	r2, [pc, #52]	; (8004b00 <OSStatTaskCPUUsageInit+0xf4>)
 8004acc:	6013      	str	r3, [r2, #0]
    OSStatTaskRdy     = OS_STATE_RDY;
 8004ace:	4b0d      	ldr	r3, [pc, #52]	; (8004b04 <OSStatTaskCPUUsageInit+0xf8>)
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	701a      	strb	r2, [r3, #0]
    CPU_CRITICAL_EXIT();
 8004ad4:	6938      	ldr	r0, [r7, #16]
 8004ad6:	f7fb fc07 	bl	80002e8 <CPU_SR_Restore>
   *p_err             = OS_ERR_NONE;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	801a      	strh	r2, [r3, #0]
}
 8004ae0:	3718      	adds	r7, #24
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	200026dc 	.word	0x200026dc
 8004aec:	2000244c 	.word	0x2000244c
 8004af0:	0800e614 	.word	0x0800e614
 8004af4:	0800e600 	.word	0x0800e600
 8004af8:	cccccccd 	.word	0xcccccccd
 8004afc:	20002448 	.word	0x20002448
 8004b00:	200028a8 	.word	0x200028a8
 8004b04:	200025d5 	.word	0x200025d5

08004b08 <OS_StatTask>:
*              4) This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_StatTask (void  *p_arg)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b090      	sub	sp, #64	; 0x40
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
    OS_TICK      ctr_div;
    OS_ERR       err;
    OS_TICK      dly;
    CPU_TS       ts_start;
    CPU_TS       ts_end;
    CPU_SR_ALLOC();
 8004b10:	2300      	movs	r3, #0
 8004b12:	61bb      	str	r3, [r7, #24]



    (void)&p_arg;                                           /* Prevent compiler warning for not using 'p_arg'         */
    while (OSStatTaskRdy != DEF_TRUE) {
 8004b14:	e008      	b.n	8004b28 <OS_StatTask+0x20>
        OSTimeDly(2u * OSCfg_StatTaskRate_Hz,               /* Wait until statistic task is ready                     */
 8004b16:	4b84      	ldr	r3, [pc, #528]	; (8004d28 <OS_StatTask+0x220>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	005b      	lsls	r3, r3, #1
 8004b1c:	f107 020a 	add.w	r2, r7, #10
 8004b20:	2100      	movs	r1, #0
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 fa6e 	bl	8005004 <OSTimeDly>
    CPU_SR_ALLOC();



    (void)&p_arg;                                           /* Prevent compiler warning for not using 'p_arg'         */
    while (OSStatTaskRdy != DEF_TRUE) {
 8004b28:	4b80      	ldr	r3, [pc, #512]	; (8004d2c <OS_StatTask+0x224>)
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d1f2      	bne.n	8004b16 <OS_StatTask+0xe>
        OSTimeDly(2u * OSCfg_StatTaskRate_Hz,               /* Wait until statistic task is ready                     */
                  OS_OPT_TIME_DLY,
                  &err);
    }
    OSStatReset(&err);                                      /* Reset statistics                                       */
 8004b30:	f107 030a 	add.w	r3, r7, #10
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7ff fed1 	bl	80048dc <OSStatReset>

    dly = (OS_TICK)0;                                       /* Compute statistic task sleep delay                     */
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	61fb      	str	r3, [r7, #28]
    if (OSCfg_TickRate_Hz > OSCfg_StatTaskRate_Hz) {
 8004b3e:	4b7c      	ldr	r3, [pc, #496]	; (8004d30 <OS_StatTask+0x228>)
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	4b79      	ldr	r3, [pc, #484]	; (8004d28 <OS_StatTask+0x220>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d906      	bls.n	8004b58 <OS_StatTask+0x50>
        dly = (OS_TICK)(OSCfg_TickRate_Hz / OSCfg_StatTaskRate_Hz);
 8004b4a:	4b79      	ldr	r3, [pc, #484]	; (8004d30 <OS_StatTask+0x228>)
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	4b76      	ldr	r3, [pc, #472]	; (8004d28 <OS_StatTask+0x220>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b56:	61fb      	str	r3, [r7, #28]
    }
    if (dly == (OS_TICK)0) {
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d106      	bne.n	8004b6c <OS_StatTask+0x64>
        dly =  (OS_TICK)(OSCfg_TickRate_Hz / (OS_RATE_HZ)10);
 8004b5e:	4b74      	ldr	r3, [pc, #464]	; (8004d30 <OS_StatTask+0x228>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a74      	ldr	r2, [pc, #464]	; (8004d34 <OS_StatTask+0x22c>)
 8004b64:	fba2 2303 	umull	r2, r3, r2, r3
 8004b68:	08db      	lsrs	r3, r3, #3
 8004b6a:	61fb      	str	r3, [r7, #28]
    }

    while (DEF_ON) {
        ts_start        = OS_TS_GET();
 8004b6c:	f002 fcfe 	bl	800756c <CPU_TS_TmrRd>
 8004b70:	6178      	str	r0, [r7, #20]
#ifdef  CPU_CFG_INT_DIS_MEAS_EN
        OSIntDisTimeMax = CPU_IntDisMeasMaxGet();
#endif

        CPU_CRITICAL_ENTER();                               /* ----------------- OVERALL CPU USAGE ------------------ */
 8004b72:	f7fb fbb5 	bl	80002e0 <CPU_SR_Save>
 8004b76:	61b8      	str	r0, [r7, #24]
        OSStatTaskCtrRun   = OSStatTaskCtr;                 /* Obtain the of the stat counter for the past .1 second  */
 8004b78:	4b6f      	ldr	r3, [pc, #444]	; (8004d38 <OS_StatTask+0x230>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a6f      	ldr	r2, [pc, #444]	; (8004d3c <OS_StatTask+0x234>)
 8004b7e:	6013      	str	r3, [r2, #0]
        OSStatTaskCtr      = (OS_TICK)0;                    /* Reset the stat counter for the next .1 second          */
 8004b80:	4b6d      	ldr	r3, [pc, #436]	; (8004d38 <OS_StatTask+0x230>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	601a      	str	r2, [r3, #0]
        CPU_CRITICAL_EXIT();
 8004b86:	69b8      	ldr	r0, [r7, #24]
 8004b88:	f7fb fbae 	bl	80002e8 <CPU_SR_Restore>

        if (OSStatTaskCtrMax > OSStatTaskCtrRun) {          /* Compute CPU Usage with best resolution                 */
 8004b8c:	4b6c      	ldr	r3, [pc, #432]	; (8004d40 <OS_StatTask+0x238>)
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	4b6a      	ldr	r3, [pc, #424]	; (8004d3c <OS_StatTask+0x234>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d94f      	bls.n	8004c38 <OS_StatTask+0x130>
            if (OSStatTaskCtrMax < 400000u) {                                        /*            1 to       400,000 */
 8004b98:	4b69      	ldr	r3, [pc, #420]	; (8004d40 <OS_StatTask+0x238>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a69      	ldr	r2, [pc, #420]	; (8004d44 <OS_StatTask+0x23c>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d805      	bhi.n	8004bae <OS_StatTask+0xa6>
                ctr_mult = 10000u;
 8004ba2:	f242 7310 	movw	r3, #10000	; 0x2710
 8004ba6:	627b      	str	r3, [r7, #36]	; 0x24
                ctr_div  =     1u;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	623b      	str	r3, [r7, #32]
 8004bac:	e024      	b.n	8004bf8 <OS_StatTask+0xf0>
            } else if (OSStatTaskCtrMax <   4000000u) {                              /*      400,000 to     4,000,000 */
 8004bae:	4b64      	ldr	r3, [pc, #400]	; (8004d40 <OS_StatTask+0x238>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a65      	ldr	r2, [pc, #404]	; (8004d48 <OS_StatTask+0x240>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d805      	bhi.n	8004bc4 <OS_StatTask+0xbc>
                ctr_mult =  1000u;
 8004bb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bbc:	627b      	str	r3, [r7, #36]	; 0x24
                ctr_div  =    10u;
 8004bbe:	230a      	movs	r3, #10
 8004bc0:	623b      	str	r3, [r7, #32]
 8004bc2:	e019      	b.n	8004bf8 <OS_StatTask+0xf0>
            } else if (OSStatTaskCtrMax <  40000000u) {                              /*    4,000,000 to    40,000,000 */
 8004bc4:	4b5e      	ldr	r3, [pc, #376]	; (8004d40 <OS_StatTask+0x238>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a60      	ldr	r2, [pc, #384]	; (8004d4c <OS_StatTask+0x244>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d804      	bhi.n	8004bd8 <OS_StatTask+0xd0>
                ctr_mult =   100u;
 8004bce:	2364      	movs	r3, #100	; 0x64
 8004bd0:	627b      	str	r3, [r7, #36]	; 0x24
                ctr_div  =   100u;
 8004bd2:	2364      	movs	r3, #100	; 0x64
 8004bd4:	623b      	str	r3, [r7, #32]
 8004bd6:	e00f      	b.n	8004bf8 <OS_StatTask+0xf0>
            } else if (OSStatTaskCtrMax < 400000000u) {                              /*   40,000,000 to   400,000,000 */
 8004bd8:	4b59      	ldr	r3, [pc, #356]	; (8004d40 <OS_StatTask+0x238>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a5c      	ldr	r2, [pc, #368]	; (8004d50 <OS_StatTask+0x248>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d805      	bhi.n	8004bee <OS_StatTask+0xe6>
                ctr_mult =    10u;
 8004be2:	230a      	movs	r3, #10
 8004be4:	627b      	str	r3, [r7, #36]	; 0x24
                ctr_div  =  1000u;
 8004be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bea:	623b      	str	r3, [r7, #32]
 8004bec:	e004      	b.n	8004bf8 <OS_StatTask+0xf0>
            } else {                                                                 /*  400,000,000 and up           */
                ctr_mult =     1u;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	627b      	str	r3, [r7, #36]	; 0x24
                ctr_div  = 10000u;
 8004bf2:	f242 7310 	movw	r3, #10000	; 0x2710
 8004bf6:	623b      	str	r3, [r7, #32]
            }
            ctr_max            = OSStatTaskCtrMax / ctr_div;
 8004bf8:	4b51      	ldr	r3, [pc, #324]	; (8004d40 <OS_StatTask+0x238>)
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c02:	613b      	str	r3, [r7, #16]
            OSStatTaskCPUUsage = (OS_CPU_USAGE)((OS_TICK)10000u - ctr_mult * OSStatTaskCtrRun / ctr_max);
 8004c04:	4b4d      	ldr	r3, [pc, #308]	; (8004d3c <OS_StatTask+0x234>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c0a:	fb02 f203 	mul.w	r2, r2, r3
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8004c1a:	3310      	adds	r3, #16
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	4b4d      	ldr	r3, [pc, #308]	; (8004d54 <OS_StatTask+0x24c>)
 8004c20:	801a      	strh	r2, [r3, #0]
            if (OSStatTaskCPUUsageMax < OSStatTaskCPUUsage) {
 8004c22:	4b4d      	ldr	r3, [pc, #308]	; (8004d58 <OS_StatTask+0x250>)
 8004c24:	881a      	ldrh	r2, [r3, #0]
 8004c26:	4b4b      	ldr	r3, [pc, #300]	; (8004d54 <OS_StatTask+0x24c>)
 8004c28:	881b      	ldrh	r3, [r3, #0]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d208      	bcs.n	8004c40 <OS_StatTask+0x138>
                OSStatTaskCPUUsageMax = OSStatTaskCPUUsage;
 8004c2e:	4b49      	ldr	r3, [pc, #292]	; (8004d54 <OS_StatTask+0x24c>)
 8004c30:	881a      	ldrh	r2, [r3, #0]
 8004c32:	4b49      	ldr	r3, [pc, #292]	; (8004d58 <OS_StatTask+0x250>)
 8004c34:	801a      	strh	r2, [r3, #0]
 8004c36:	e003      	b.n	8004c40 <OS_StatTask+0x138>
            }
        } else {
            OSStatTaskCPUUsage = (OS_CPU_USAGE)10000u;
 8004c38:	4b46      	ldr	r3, [pc, #280]	; (8004d54 <OS_StatTask+0x24c>)
 8004c3a:	f242 7210 	movw	r2, #10000	; 0x2710
 8004c3e:	801a      	strh	r2, [r3, #0]
        }

        OSStatTaskHook();                                   /* Invoke user definable hook                             */
 8004c40:	f001 f946 	bl	8005ed0 <OSStatTaskHook>


#if OS_CFG_DBG_EN > 0u
#if OS_CFG_TASK_PROFILE_EN > 0u
        cycles_total = (OS_CYCLES)0;
 8004c44:	2300      	movs	r3, #0
 8004c46:	63bb      	str	r3, [r7, #56]	; 0x38

        CPU_CRITICAL_ENTER();
 8004c48:	f7fb fb4a 	bl	80002e0 <CPU_SR_Save>
 8004c4c:	61b8      	str	r0, [r7, #24]
        p_tcb = OSTaskDbgListPtr;
 8004c4e:	4b43      	ldr	r3, [pc, #268]	; (8004d5c <OS_StatTask+0x254>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	62bb      	str	r3, [r7, #40]	; 0x28
        CPU_CRITICAL_EXIT();
 8004c54:	69b8      	ldr	r0, [r7, #24]
 8004c56:	f7fb fb47 	bl	80002e8 <CPU_SR_Restore>
        while (p_tcb != (OS_TCB *)0) {                      /* ----------------- TOTAL CYCLES COUNT ----------------- */
 8004c5a:	e01f      	b.n	8004c9c <OS_StatTask+0x194>
            OS_CRITICAL_ENTER();
 8004c5c:	f7fb fb40 	bl	80002e0 <CPU_SR_Save>
 8004c60:	61b8      	str	r0, [r7, #24]
            p_tcb->CyclesTotalPrev =  p_tcb->CyclesTotal;   /* Save accumulated # cycles into a temp variable         */
 8004c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c64:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
            p_tcb->CyclesTotal     = (OS_CYCLES)0;          /* Reset total cycles for task for next run               */
 8004c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c70:	2200      	movs	r2, #0
 8004c72:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            OS_CRITICAL_EXIT();
 8004c76:	69b8      	ldr	r0, [r7, #24]
 8004c78:	f7fb fb36 	bl	80002e8 <CPU_SR_Restore>

            cycles_total          += p_tcb->CyclesTotalPrev;/* Perform sum of all task # cycles                       */
 8004c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c84:	4413      	add	r3, r2
 8004c86:	63bb      	str	r3, [r7, #56]	; 0x38

            CPU_CRITICAL_ENTER();
 8004c88:	f7fb fb2a 	bl	80002e0 <CPU_SR_Save>
 8004c8c:	61b8      	str	r0, [r7, #24]
            p_tcb                  = p_tcb->DbgNextPtr;
 8004c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c90:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004c94:	62bb      	str	r3, [r7, #40]	; 0x28
            CPU_CRITICAL_EXIT();
 8004c96:	69b8      	ldr	r0, [r7, #24]
 8004c98:	f7fb fb26 	bl	80002e8 <CPU_SR_Restore>
        cycles_total = (OS_CYCLES)0;

        CPU_CRITICAL_ENTER();
        p_tcb = OSTaskDbgListPtr;
        CPU_CRITICAL_EXIT();
        while (p_tcb != (OS_TCB *)0) {                      /* ----------------- TOTAL CYCLES COUNT ----------------- */
 8004c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1dc      	bne.n	8004c5c <OS_StatTask+0x154>
#endif


#if OS_CFG_TASK_PROFILE_EN > 0u
                                                            /* ------------- INDIVIDUAL TASK CPU USAGE -------------- */
        if (cycles_total > (OS_CYCLES)0u) {                                          /* 'cycles_total' scaling ...    */
 8004ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d031      	beq.n	8004d0c <OS_StatTask+0x204>
            if (cycles_total < 400000u) {                                            /*            1 to       400,000 */
 8004ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004caa:	4a26      	ldr	r2, [pc, #152]	; (8004d44 <OS_StatTask+0x23c>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d805      	bhi.n	8004cbc <OS_StatTask+0x1b4>
                cycles_mult = 10000u;
 8004cb0:	f242 7310 	movw	r3, #10000	; 0x2710
 8004cb4:	633b      	str	r3, [r7, #48]	; 0x30
                cycles_div  =     1u;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	637b      	str	r3, [r7, #52]	; 0x34
 8004cba:	e021      	b.n	8004d00 <OS_StatTask+0x1f8>
            } else if (cycles_total <   4000000u) {                                  /*      400,000 to     4,000,000 */
 8004cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cbe:	4a22      	ldr	r2, [pc, #136]	; (8004d48 <OS_StatTask+0x240>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d805      	bhi.n	8004cd0 <OS_StatTask+0x1c8>
                cycles_mult =  1000u;
 8004cc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004cc8:	633b      	str	r3, [r7, #48]	; 0x30
                cycles_div  =    10u;
 8004cca:	230a      	movs	r3, #10
 8004ccc:	637b      	str	r3, [r7, #52]	; 0x34
 8004cce:	e017      	b.n	8004d00 <OS_StatTask+0x1f8>
            } else if (cycles_total <  40000000u) {                                  /*    4,000,000 to    40,000,000 */
 8004cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd2:	4a1e      	ldr	r2, [pc, #120]	; (8004d4c <OS_StatTask+0x244>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d804      	bhi.n	8004ce2 <OS_StatTask+0x1da>
                cycles_mult =   100u;
 8004cd8:	2364      	movs	r3, #100	; 0x64
 8004cda:	633b      	str	r3, [r7, #48]	; 0x30
                cycles_div  =   100u;
 8004cdc:	2364      	movs	r3, #100	; 0x64
 8004cde:	637b      	str	r3, [r7, #52]	; 0x34
 8004ce0:	e00e      	b.n	8004d00 <OS_StatTask+0x1f8>
            } else if (cycles_total < 400000000u) {                                  /*   40,000,000 to   400,000,000 */
 8004ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce4:	4a1a      	ldr	r2, [pc, #104]	; (8004d50 <OS_StatTask+0x248>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d805      	bhi.n	8004cf6 <OS_StatTask+0x1ee>
                cycles_mult =    10u;
 8004cea:	230a      	movs	r3, #10
 8004cec:	633b      	str	r3, [r7, #48]	; 0x30
                cycles_div  =  1000u;
 8004cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004cf2:	637b      	str	r3, [r7, #52]	; 0x34
 8004cf4:	e004      	b.n	8004d00 <OS_StatTask+0x1f8>
            } else {                                                                 /*  400,000,000 and up           */
                cycles_mult =     1u;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	633b      	str	r3, [r7, #48]	; 0x30
                cycles_div  = 10000u;
 8004cfa:	f242 7310 	movw	r3, #10000	; 0x2710
 8004cfe:	637b      	str	r3, [r7, #52]	; 0x34
            }
            cycles_max  = cycles_total / cycles_div;
 8004d00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d0a:	e003      	b.n	8004d14 <OS_StatTask+0x20c>
        } else {
            cycles_mult = 0u;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	633b      	str	r3, [r7, #48]	; 0x30
            cycles_max  = 1u;
 8004d10:	2301      	movs	r3, #1
 8004d12:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif
        CPU_CRITICAL_ENTER();
 8004d14:	f7fb fae4 	bl	80002e0 <CPU_SR_Save>
 8004d18:	61b8      	str	r0, [r7, #24]
        p_tcb = OSTaskDbgListPtr;
 8004d1a:	4b10      	ldr	r3, [pc, #64]	; (8004d5c <OS_StatTask+0x254>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	62bb      	str	r3, [r7, #40]	; 0x28
        CPU_CRITICAL_EXIT();
 8004d20:	69b8      	ldr	r0, [r7, #24]
 8004d22:	f7fb fae1 	bl	80002e8 <CPU_SR_Restore>
        while (p_tcb != (OS_TCB *)0) {
 8004d26:	e050      	b.n	8004dca <OS_StatTask+0x2c2>
 8004d28:	0800e600 	.word	0x0800e600
 8004d2c:	200025d5 	.word	0x200025d5
 8004d30:	0800e614 	.word	0x0800e614
 8004d34:	cccccccd 	.word	0xcccccccd
 8004d38:	2000244c 	.word	0x2000244c
 8004d3c:	200028bc 	.word	0x200028bc
 8004d40:	200028a8 	.word	0x200028a8
 8004d44:	00061a7f 	.word	0x00061a7f
 8004d48:	003d08ff 	.word	0x003d08ff
 8004d4c:	026259ff 	.word	0x026259ff
 8004d50:	17d783ff 	.word	0x17d783ff
 8004d54:	200026d0 	.word	0x200026d0
 8004d58:	200026b2 	.word	0x200026b2
 8004d5c:	200026c0 	.word	0x200026c0
#if OS_CFG_TASK_PROFILE_EN > 0u                             /* Compute execution time of each task                    */
            usage = (OS_CPU_USAGE)(cycles_mult * p_tcb->CyclesTotalPrev / cycles_max);
 8004d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d68:	fb02 f203 	mul.w	r2, r2, r3
 8004d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d72:	87fb      	strh	r3, [r7, #62]	; 0x3e
            if (usage > 10000u) {
 8004d74:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004d76:	f242 7210 	movw	r2, #10000	; 0x2710
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d902      	bls.n	8004d84 <OS_StatTask+0x27c>
                usage = 10000u;
 8004d7e:	f242 7310 	movw	r3, #10000	; 0x2710
 8004d82:	87fb      	strh	r3, [r7, #62]	; 0x3e
            }
            p_tcb->CPUUsage = usage;
 8004d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d86:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004d88:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
            if (p_tcb->CPUUsageMax < usage) {               /* Detect peak CPU usage                                  */
 8004d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8e:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8004d92:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d903      	bls.n	8004da0 <OS_StatTask+0x298>
                p_tcb->CPUUsageMax = usage;
 8004d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004d9c:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
            }
#endif

#if OS_CFG_STAT_TASK_STK_CHK_EN > 0u
            OSTaskStkChk( p_tcb,                            /* Compute stack usage of active tasks only               */
 8004da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da2:	f103 01ac 	add.w	r1, r3, #172	; 0xac
 8004da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da8:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 8004dac:	f107 030a 	add.w	r3, r7, #10
 8004db0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004db2:	f7fd fda9 	bl	8002908 <OSTaskStkChk>
                         &p_tcb->StkFree,
                         &p_tcb->StkUsed,
                         &err);
#endif

            CPU_CRITICAL_ENTER();
 8004db6:	f7fb fa93 	bl	80002e0 <CPU_SR_Save>
 8004dba:	61b8      	str	r0, [r7, #24]
            p_tcb = p_tcb->DbgNextPtr;
 8004dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dbe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004dc2:	62bb      	str	r3, [r7, #40]	; 0x28
            CPU_CRITICAL_EXIT();
 8004dc4:	69b8      	ldr	r0, [r7, #24]
 8004dc6:	f7fb fa8f 	bl	80002e8 <CPU_SR_Restore>
        }
#endif
        CPU_CRITICAL_ENTER();
        p_tcb = OSTaskDbgListPtr;
        CPU_CRITICAL_EXIT();
        while (p_tcb != (OS_TCB *)0) {
 8004dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1c7      	bne.n	8004d60 <OS_StatTask+0x258>
            p_tcb = p_tcb->DbgNextPtr;
            CPU_CRITICAL_EXIT();
        }
#endif

        if (OSStatResetFlag == DEF_TRUE) {                  /* Check if need to reset statistics                      */
 8004dd0:	4b10      	ldr	r3, [pc, #64]	; (8004e14 <OS_StatTask+0x30c>)
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d107      	bne.n	8004de8 <OS_StatTask+0x2e0>
            OSStatResetFlag  = DEF_FALSE;
 8004dd8:	4b0e      	ldr	r3, [pc, #56]	; (8004e14 <OS_StatTask+0x30c>)
 8004dda:	2200      	movs	r2, #0
 8004ddc:	701a      	strb	r2, [r3, #0]
            OSStatReset(&err);
 8004dde:	f107 030a 	add.w	r3, r7, #10
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7ff fd7a 	bl	80048dc <OSStatReset>
        }

        ts_end = OS_TS_GET() - ts_start;                    /* Measure execution time of statistic task               */
 8004de8:	f002 fbc0 	bl	800756c <CPU_TS_TmrRd>
 8004dec:	4602      	mov	r2, r0
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	60fb      	str	r3, [r7, #12]
        if (OSStatTaskTimeMax < ts_end) {
 8004df4:	4b08      	ldr	r3, [pc, #32]	; (8004e18 <OS_StatTask+0x310>)
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d202      	bcs.n	8004e04 <OS_StatTask+0x2fc>
            OSStatTaskTimeMax = ts_end;
 8004dfe:	4a06      	ldr	r2, [pc, #24]	; (8004e18 <OS_StatTask+0x310>)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6013      	str	r3, [r2, #0]
        }

        OSTimeDly(dly,
 8004e04:	f107 030a 	add.w	r3, r7, #10
 8004e08:	461a      	mov	r2, r3
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	69f8      	ldr	r0, [r7, #28]
 8004e0e:	f000 f8f9 	bl	8005004 <OSTimeDly>
                  OS_OPT_TIME_DLY,
                  &err);
    }
 8004e12:	e6ab      	b.n	8004b6c <OS_StatTask+0x64>
 8004e14:	200028d0 	.word	0x200028d0
 8004e18:	20002448 	.word	0x20002448

08004e1c <OS_StatTaskInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_StatTaskInit (OS_ERR  *p_err)
{
 8004e1c:	b590      	push	{r4, r7, lr}
 8004e1e:	b08d      	sub	sp, #52	; 0x34
 8004e20:	af0a      	add	r7, sp, #40	; 0x28
 8004e22:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    OSStatTaskCtr    = (OS_TICK)0;
 8004e24:	4b25      	ldr	r3, [pc, #148]	; (8004ebc <OS_StatTaskInit+0xa0>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	601a      	str	r2, [r3, #0]
    OSStatTaskCtrRun = (OS_TICK)0;
 8004e2a:	4b25      	ldr	r3, [pc, #148]	; (8004ec0 <OS_StatTaskInit+0xa4>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	601a      	str	r2, [r3, #0]
    OSStatTaskCtrMax = (OS_TICK)0;
 8004e30:	4b24      	ldr	r3, [pc, #144]	; (8004ec4 <OS_StatTaskInit+0xa8>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	601a      	str	r2, [r3, #0]
    OSStatTaskRdy    = OS_STATE_NOT_RDY;                    /* Statistic task is not ready                            */
 8004e36:	4b24      	ldr	r3, [pc, #144]	; (8004ec8 <OS_StatTaskInit+0xac>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	701a      	strb	r2, [r3, #0]
    OSStatResetFlag  = DEF_FALSE;
 8004e3c:	4b23      	ldr	r3, [pc, #140]	; (8004ecc <OS_StatTaskInit+0xb0>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	701a      	strb	r2, [r3, #0]

                                                            /* ---------------- CREATE THE STAT TASK ---------------- */
    if (OSCfg_StatTaskStkBasePtr == (CPU_STK *)0) {
 8004e42:	4b23      	ldr	r3, [pc, #140]	; (8004ed0 <OS_StatTaskInit+0xb4>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d104      	bne.n	8004e54 <OS_StatTaskInit+0x38>
       *p_err = OS_ERR_STAT_STK_INVALID;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f646 622b 	movw	r2, #28203	; 0x6e2b
 8004e50:	801a      	strh	r2, [r3, #0]
        return;
 8004e52:	e02f      	b.n	8004eb4 <OS_StatTaskInit+0x98>
    }

    if (OSCfg_StatTaskStkSize < OSCfg_StkSizeMin) {
 8004e54:	4b1f      	ldr	r3, [pc, #124]	; (8004ed4 <OS_StatTaskInit+0xb8>)
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	4b1f      	ldr	r3, [pc, #124]	; (8004ed8 <OS_StatTaskInit+0xbc>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d204      	bcs.n	8004e6a <OS_StatTaskInit+0x4e>
       *p_err = OS_ERR_STAT_STK_SIZE_INVALID;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f646 622c 	movw	r2, #28204	; 0x6e2c
 8004e66:	801a      	strh	r2, [r3, #0]
        return;
 8004e68:	e024      	b.n	8004eb4 <OS_StatTaskInit+0x98>
    }

    if (OSCfg_StatTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {
 8004e6a:	4b1c      	ldr	r3, [pc, #112]	; (8004edc <OS_StatTaskInit+0xc0>)
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	2b1e      	cmp	r3, #30
 8004e70:	d904      	bls.n	8004e7c <OS_StatTaskInit+0x60>
       *p_err = OS_ERR_STAT_PRIO_INVALID;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f646 622a 	movw	r2, #28202	; 0x6e2a
 8004e78:	801a      	strh	r2, [r3, #0]
        return;
 8004e7a:	e01b      	b.n	8004eb4 <OS_StatTaskInit+0x98>
    }

    OSTaskCreate((OS_TCB     *)&OSStatTaskTCB,
 8004e7c:	4b17      	ldr	r3, [pc, #92]	; (8004edc <OS_StatTaskInit+0xc0>)
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	4a13      	ldr	r2, [pc, #76]	; (8004ed0 <OS_StatTaskInit+0xb4>)
 8004e82:	6812      	ldr	r2, [r2, #0]
 8004e84:	4916      	ldr	r1, [pc, #88]	; (8004ee0 <OS_StatTaskInit+0xc4>)
 8004e86:	6809      	ldr	r1, [r1, #0]
 8004e88:	4812      	ldr	r0, [pc, #72]	; (8004ed4 <OS_StatTaskInit+0xb8>)
 8004e8a:	6800      	ldr	r0, [r0, #0]
 8004e8c:	687c      	ldr	r4, [r7, #4]
 8004e8e:	9408      	str	r4, [sp, #32]
 8004e90:	2403      	movs	r4, #3
 8004e92:	9407      	str	r4, [sp, #28]
 8004e94:	2400      	movs	r4, #0
 8004e96:	9406      	str	r4, [sp, #24]
 8004e98:	2400      	movs	r4, #0
 8004e9a:	9405      	str	r4, [sp, #20]
 8004e9c:	2400      	movs	r4, #0
 8004e9e:	9404      	str	r4, [sp, #16]
 8004ea0:	9003      	str	r0, [sp, #12]
 8004ea2:	9102      	str	r1, [sp, #8]
 8004ea4:	9201      	str	r2, [sp, #4]
 8004ea6:	9300      	str	r3, [sp, #0]
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	4a0e      	ldr	r2, [pc, #56]	; (8004ee4 <OS_StatTaskInit+0xc8>)
 8004eac:	490e      	ldr	r1, [pc, #56]	; (8004ee8 <OS_StatTaskInit+0xcc>)
 8004eae:	480f      	ldr	r0, [pc, #60]	; (8004eec <OS_StatTaskInit+0xd0>)
 8004eb0:	f7fd fae6 	bl	8002480 <OSTaskCreate>
                 (OS_MSG_QTY  )0,
                 (OS_TICK     )0,
                 (void       *)0,
                 (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
                 (OS_ERR     *)p_err);
}
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd90      	pop	{r4, r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	2000244c 	.word	0x2000244c
 8004ec0:	200028bc 	.word	0x200028bc
 8004ec4:	200028a8 	.word	0x200028a8
 8004ec8:	200025d5 	.word	0x200025d5
 8004ecc:	200028d0 	.word	0x200028d0
 8004ed0:	0800e604 	.word	0x0800e604
 8004ed4:	0800e60c 	.word	0x0800e60c
 8004ed8:	0800e610 	.word	0x0800e610
 8004edc:	0800e5fc 	.word	0x0800e5fc
 8004ee0:	0800e608 	.word	0x0800e608
 8004ee4:	08004b09 	.word	0x08004b09
 8004ee8:	0800e528 	.word	0x0800e528
 8004eec:	200028d8 	.word	0x200028d8

08004ef0 <OS_PrioInit>:
* Note       : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_PrioInit (void)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
    CPU_DATA  i;


                                                            /* Clear the bitmap table ... no task is ready            */
    for (i = 0u; i < OS_PRIO_TBL_SIZE; i++) {
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	607b      	str	r3, [r7, #4]
 8004efa:	e007      	b.n	8004f0c <OS_PrioInit+0x1c>
         OSPrioTbl[i] = (CPU_DATA)0;
 8004efc:	4a07      	ldr	r2, [pc, #28]	; (8004f1c <OS_PrioInit+0x2c>)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2100      	movs	r1, #0
 8004f02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
{
    CPU_DATA  i;


                                                            /* Clear the bitmap table ... no task is ready            */
    for (i = 0u; i < OS_PRIO_TBL_SIZE; i++) {
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	3301      	adds	r3, #1
 8004f0a:	607b      	str	r3, [r7, #4]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d0f4      	beq.n	8004efc <OS_PrioInit+0xc>
         OSPrioTbl[i] = (CPU_DATA)0;
    }
}
 8004f12:	bf00      	nop
 8004f14:	370c      	adds	r7, #12
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bc80      	pop	{r7}
 8004f1a:	4770      	bx	lr
 8004f1c:	2000243c 	.word	0x2000243c

08004f20 <OS_PrioGetHighest>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

OS_PRIO  OS_PrioGetHighest (void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
    CPU_DATA  *p_tbl;
    OS_PRIO    prio;


    prio  = (OS_PRIO)0;
 8004f26:	2300      	movs	r3, #0
 8004f28:	70fb      	strb	r3, [r7, #3]
    p_tbl = &OSPrioTbl[0];
 8004f2a:	4b0e      	ldr	r3, [pc, #56]	; (8004f64 <OS_PrioGetHighest+0x44>)
 8004f2c:	607b      	str	r3, [r7, #4]
    while (*p_tbl == (CPU_DATA)0) {                         /* Search the bitmap table for the highest priority       */
 8004f2e:	e005      	b.n	8004f3c <OS_PrioGetHighest+0x1c>
        prio += DEF_INT_CPU_NBR_BITS;                       /* Compute the step of each CPU_DATA entry                */
 8004f30:	78fb      	ldrb	r3, [r7, #3]
 8004f32:	3320      	adds	r3, #32
 8004f34:	70fb      	strb	r3, [r7, #3]
        p_tbl++;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	3304      	adds	r3, #4
 8004f3a:	607b      	str	r3, [r7, #4]
    OS_PRIO    prio;


    prio  = (OS_PRIO)0;
    p_tbl = &OSPrioTbl[0];
    while (*p_tbl == (CPU_DATA)0) {                         /* Search the bitmap table for the highest priority       */
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d0f5      	beq.n	8004f30 <OS_PrioGetHighest+0x10>
        prio += DEF_INT_CPU_NBR_BITS;                       /* Compute the step of each CPU_DATA entry                */
        p_tbl++;
    }
    prio += (OS_PRIO)CPU_CntLeadZeros(*p_tbl);              /* Find the position of the first bit set at the entry    */
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7fb f9d4 	bl	80002f6 <CPU_CntLeadZeros>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	b2da      	uxtb	r2, r3
 8004f52:	78fb      	ldrb	r3, [r7, #3]
 8004f54:	4413      	add	r3, r2
 8004f56:	70fb      	strb	r3, [r7, #3]
    return (prio);
 8004f58:	78fb      	ldrb	r3, [r7, #3]
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3708      	adds	r7, #8
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	2000243c 	.word	0x2000243c

08004f68 <OS_PrioInsert>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_PrioInsert (OS_PRIO  prio)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b087      	sub	sp, #28
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	4603      	mov	r3, r0
 8004f70:	71fb      	strb	r3, [r7, #7]
    CPU_DATA  bit;
    CPU_DATA  bit_nbr;
    OS_PRIO   ix;


    ix             = prio / DEF_INT_CPU_NBR_BITS;
 8004f72:	79fb      	ldrb	r3, [r7, #7]
 8004f74:	095b      	lsrs	r3, r3, #5
 8004f76:	75fb      	strb	r3, [r7, #23]
    bit_nbr        = (CPU_DATA)prio & (DEF_INT_CPU_NBR_BITS - 1u);
 8004f78:	79fb      	ldrb	r3, [r7, #7]
 8004f7a:	f003 031f 	and.w	r3, r3, #31
 8004f7e:	613b      	str	r3, [r7, #16]
    bit            = 1u;
 8004f80:	2301      	movs	r3, #1
 8004f82:	60fb      	str	r3, [r7, #12]
    bit          <<= (DEF_INT_CPU_NBR_BITS - 1u) - bit_nbr;
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	f1c3 031f 	rsb	r3, r3, #31
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f90:	60fb      	str	r3, [r7, #12]
    OSPrioTbl[ix] |= bit;
 8004f92:	7dfb      	ldrb	r3, [r7, #23]
 8004f94:	7dfa      	ldrb	r2, [r7, #23]
 8004f96:	4906      	ldr	r1, [pc, #24]	; (8004fb0 <OS_PrioInsert+0x48>)
 8004f98:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	4903      	ldr	r1, [pc, #12]	; (8004fb0 <OS_PrioInsert+0x48>)
 8004fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004fa6:	bf00      	nop
 8004fa8:	371c      	adds	r7, #28
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bc80      	pop	{r7}
 8004fae:	4770      	bx	lr
 8004fb0:	2000243c 	.word	0x2000243c

08004fb4 <OS_PrioRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_PrioRemove (OS_PRIO  prio)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b087      	sub	sp, #28
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	4603      	mov	r3, r0
 8004fbc:	71fb      	strb	r3, [r7, #7]
    CPU_DATA  bit;
    CPU_DATA  bit_nbr;
    OS_PRIO   ix;


    ix             = prio / DEF_INT_CPU_NBR_BITS;
 8004fbe:	79fb      	ldrb	r3, [r7, #7]
 8004fc0:	095b      	lsrs	r3, r3, #5
 8004fc2:	75fb      	strb	r3, [r7, #23]
    bit_nbr        = (CPU_DATA)prio & (DEF_INT_CPU_NBR_BITS - 1u);
 8004fc4:	79fb      	ldrb	r3, [r7, #7]
 8004fc6:	f003 031f 	and.w	r3, r3, #31
 8004fca:	613b      	str	r3, [r7, #16]
    bit            = 1u;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	60fb      	str	r3, [r7, #12]
    bit          <<= (DEF_INT_CPU_NBR_BITS - 1u) - bit_nbr;
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	f1c3 031f 	rsb	r3, r3, #31
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fdc:	60fb      	str	r3, [r7, #12]
    OSPrioTbl[ix] &= ~bit;
 8004fde:	7dfb      	ldrb	r3, [r7, #23]
 8004fe0:	7dfa      	ldrb	r2, [r7, #23]
 8004fe2:	4907      	ldr	r1, [pc, #28]	; (8005000 <OS_PrioRemove+0x4c>)
 8004fe4:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	43d2      	mvns	r2, r2
 8004fec:	400a      	ands	r2, r1
 8004fee:	4904      	ldr	r1, [pc, #16]	; (8005000 <OS_PrioRemove+0x4c>)
 8004ff0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004ff4:	bf00      	nop
 8004ff6:	371c      	adds	r7, #28
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bc80      	pop	{r7}
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	2000243c 	.word	0x2000243c

08005004 <OSTimeDly>:
*/

void  OSTimeDly (OS_TICK   dly,
                 OS_OPT    opt,
                 OS_ERR   *p_err)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b086      	sub	sp, #24
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	460b      	mov	r3, r1
 800500e:	607a      	str	r2, [r7, #4]
 8005010:	817b      	strh	r3, [r7, #10]
    CPU_SR_ALLOC();
 8005012:	2300      	movs	r3, #0
 8005014:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0u) {             /* Not allowed to call from an ISR                        */
 8005016:	4b2e      	ldr	r3, [pc, #184]	; (80050d0 <OSTimeDly+0xcc>)
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d004      	beq.n	8005028 <OSTimeDly+0x24>
       *p_err = OS_ERR_TIME_DLY_ISR;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f247 2275 	movw	r2, #29301	; 0x7275
 8005024:	801a      	strh	r2, [r3, #0]
        return;
 8005026:	e050      	b.n	80050ca <OSTimeDly+0xc6>
    }
#endif

    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0u) {       /* Can't delay when the scheduler is locked               */
 8005028:	4b2a      	ldr	r3, [pc, #168]	; (80050d4 <OSTimeDly+0xd0>)
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d004      	beq.n	800503a <OSTimeDly+0x36>
       *p_err = OS_ERR_SCHED_LOCKED;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f646 5263 	movw	r2, #28003	; 0x6d63
 8005036:	801a      	strh	r2, [r3, #0]
        return;
 8005038:	e047      	b.n	80050ca <OSTimeDly+0xc6>
    }

    switch (opt) {
 800503a:	897b      	ldrh	r3, [r7, #10]
 800503c:	2b08      	cmp	r3, #8
 800503e:	d81d      	bhi.n	800507c <OSTimeDly+0x78>
 8005040:	a201      	add	r2, pc, #4	; (adr r2, 8005048 <OSTimeDly+0x44>)
 8005042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005046:	bf00      	nop
 8005048:	0800506d 	.word	0x0800506d
 800504c:	0800507d 	.word	0x0800507d
 8005050:	0800506d 	.word	0x0800506d
 8005054:	0800507d 	.word	0x0800507d
 8005058:	08005087 	.word	0x08005087
 800505c:	0800507d 	.word	0x0800507d
 8005060:	0800507d 	.word	0x0800507d
 8005064:	0800507d 	.word	0x0800507d
 8005068:	0800506d 	.word	0x0800506d
        case OS_OPT_TIME_DLY:
        case OS_OPT_TIME_TIMEOUT:
        case OS_OPT_TIME_PERIODIC:
             if (dly == (OS_TICK)0u) {                      /* 0 means no delay!                                      */
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d10b      	bne.n	800508a <OSTimeDly+0x86>
                *p_err = OS_ERR_TIME_ZERO_DLY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f247 227e 	movw	r2, #29310	; 0x727e
 8005078:	801a      	strh	r2, [r3, #0]
                 return;
 800507a:	e026      	b.n	80050ca <OSTimeDly+0xc6>

        case OS_OPT_TIME_MATCH:
             break;

        default:
            *p_err = OS_ERR_OPT_INVALID;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f645 6225 	movw	r2, #24101	; 0x5e25
 8005082:	801a      	strh	r2, [r3, #0]
             return;
 8005084:	e021      	b.n	80050ca <OSTimeDly+0xc6>
                 return;
             }
             break;

        case OS_OPT_TIME_MATCH:
             break;
 8005086:	bf00      	nop
 8005088:	e000      	b.n	800508c <OSTimeDly+0x88>
        case OS_OPT_TIME_PERIODIC:
             if (dly == (OS_TICK)0u) {                      /* 0 means no delay!                                      */
                *p_err = OS_ERR_TIME_ZERO_DLY;
                 return;
             }
             break;
 800508a:	bf00      	nop
        default:
            *p_err = OS_ERR_OPT_INVALID;
             return;
    }

    OS_CRITICAL_ENTER();
 800508c:	f7fb f928 	bl	80002e0 <CPU_SR_Save>
 8005090:	6178      	str	r0, [r7, #20]
    OS_TickListInsertDly(OSTCBCurPtr,
 8005092:	4b11      	ldr	r3, [pc, #68]	; (80050d8 <OSTimeDly+0xd4>)
 8005094:	6818      	ldr	r0, [r3, #0]
 8005096:	897a      	ldrh	r2, [r7, #10]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68f9      	ldr	r1, [r7, #12]
 800509c:	f7ff fa06 	bl	80044ac <OS_TickListInsertDly>
                         dly,
                         opt,
                         p_err);
    if (*p_err != OS_ERR_NONE) {
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	881b      	ldrh	r3, [r3, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d003      	beq.n	80050b0 <OSTimeDly+0xac>
         OS_CRITICAL_EXIT_NO_SCHED();
 80050a8:	6978      	ldr	r0, [r7, #20]
 80050aa:	f7fb f91d 	bl	80002e8 <CPU_SR_Restore>
         return;
 80050ae:	e00c      	b.n	80050ca <OSTimeDly+0xc6>
    }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_TASK_DLY(dly);                                 /* Record the event.                                      */
#endif
    OS_RdyListRemove(OSTCBCurPtr);                          /* Remove current task from ready list                    */
 80050b0:	4b09      	ldr	r3, [pc, #36]	; (80050d8 <OSTimeDly+0xd4>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7ff f811 	bl	80040dc <OS_RdyListRemove>
    OS_CRITICAL_EXIT_NO_SCHED();
 80050ba:	6978      	ldr	r0, [r7, #20]
 80050bc:	f7fb f914 	bl	80002e8 <CPU_SR_Restore>
    OSSched();                                              /* Find next task to run!                                 */
 80050c0:	f7fe fb16 	bl	80036f0 <OSSched>
   *p_err = OS_ERR_NONE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	801a      	strh	r2, [r3, #0]
}
 80050ca:	3718      	adds	r7, #24
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	200026d8 	.word	0x200026d8
 80050d4:	20002440 	.word	0x20002440
 80050d8:	200026ac 	.word	0x200026ac

080050dc <OSTimeTick>:
* Returns    : none
************************************************************************************************************************
*/

void  OSTimeTick (void)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
#if OS_CFG_ISR_POST_DEFERRED_EN > 0u
    CPU_TS  ts;
#endif


    OSTimeTickHook();                                       /* Call user definable hook                               */
 80050e2:	f000 fff7 	bl	80060d4 <OSTimeTickHook>
                (CPU_TS     ) ts,
                (OS_ERR    *)&err);

#else

   (void)OSTaskSemPost((OS_TCB *)&OSTickTaskTCB,            /* Signal tick task                                       */
 80050e6:	1dbb      	adds	r3, r7, #6
 80050e8:	461a      	mov	r2, r3
 80050ea:	2100      	movs	r1, #0
 80050ec:	480c      	ldr	r0, [pc, #48]	; (8005120 <OSTimeTick+0x44>)
 80050ee:	f7fd fbe7 	bl	80028c0 <OSTaskSemPost>
#if OS_CFG_SCHED_ROUND_ROBIN_EN > 0u
    OS_SchedRoundRobin(&OSRdyList[OSPrioCur]);
#endif

#if OS_CFG_TMR_EN > 0u
    OSTmrUpdateCtr--;
 80050f2:	4b0c      	ldr	r3, [pc, #48]	; (8005124 <OSTimeTick+0x48>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	3b01      	subs	r3, #1
 80050f8:	4a0a      	ldr	r2, [pc, #40]	; (8005124 <OSTimeTick+0x48>)
 80050fa:	6013      	str	r3, [r2, #0]
    if (OSTmrUpdateCtr == (OS_CTR)0u) {
 80050fc:	4b09      	ldr	r3, [pc, #36]	; (8005124 <OSTimeTick+0x48>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d109      	bne.n	8005118 <OSTimeTick+0x3c>
        OSTmrUpdateCtr = OSTmrUpdateCnt;
 8005104:	4b08      	ldr	r3, [pc, #32]	; (8005128 <OSTimeTick+0x4c>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a06      	ldr	r2, [pc, #24]	; (8005124 <OSTimeTick+0x48>)
 800510a:	6013      	str	r3, [r2, #0]
        OSTaskSemPost((OS_TCB *)&OSTmrTaskTCB,              /* Signal timer task                                      */
 800510c:	1dbb      	adds	r3, r7, #6
 800510e:	461a      	mov	r2, r3
 8005110:	2100      	movs	r1, #0
 8005112:	4806      	ldr	r0, [pc, #24]	; (800512c <OSTimeTick+0x50>)
 8005114:	f7fd fbd4 	bl	80028c0 <OSTaskSemPost>
                      (OS_ERR *)&err);
    }
#endif

#endif
}
 8005118:	bf00      	nop
 800511a:	3708      	adds	r7, #8
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	200025e4 	.word	0x200025e4
 8005124:	200029b8 	.word	0x200029b8
 8005128:	200029a8 	.word	0x200029a8
 800512c:	200026dc 	.word	0x200026dc

08005130 <OSCfg_Init>:
*                  DOES NOT optimize out the 'const' variables above.
************************************************************************************************************************
*/

void  OSCfg_Init (void)
{
 8005130:	b480      	push	{r7}
 8005132:	af00      	add	r7, sp, #0
    (void)&OSCfg_TmrTaskStkBasePtr;
    (void)&OSCfg_TmrTaskStkLimit;
    (void)&OSCfg_TmrTaskStkSize;
    (void)&OSCfg_TmrTaskStkSizeRAM;
#endif
}
 8005134:	bf00      	nop
 8005136:	46bd      	mov	sp, r7
 8005138:	bc80      	pop	{r7}
 800513a:	4770      	bx	lr

0800513c <OS_SemInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_SemInit (OS_ERR  *p_err)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSSemDbgListPtr = (OS_SEM *)0;
 8005144:	4b06      	ldr	r3, [pc, #24]	; (8005160 <OS_SemInit+0x24>)
 8005146:	2200      	movs	r2, #0
 8005148:	601a      	str	r2, [r3, #0]
#endif

    OSSemQty        = (OS_OBJ_QTY)0;
 800514a:	4b06      	ldr	r3, [pc, #24]	; (8005164 <OS_SemInit+0x28>)
 800514c:	2200      	movs	r2, #0
 800514e:	801a      	strh	r2, [r3, #0]
   *p_err           = OS_ERR_NONE;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	801a      	strh	r2, [r3, #0]
}
 8005156:	bf00      	nop
 8005158:	370c      	adds	r7, #12
 800515a:	46bd      	mov	sp, r7
 800515c:	bc80      	pop	{r7}
 800515e:	4770      	bx	lr
 8005160:	200025d8 	.word	0x200025d8
 8005164:	2000286c 	.word	0x2000286c

08005168 <OSMutexCreate>:
*/

void  OSMutexCreate (OS_MUTEX  *p_mutex,
                     CPU_CHAR  *p_name,
                     OS_ERR    *p_err)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
    CPU_SR_ALLOC();
 8005174:	2300      	movs	r3, #0
 8005176:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to be called from an ISR                   */
 8005178:	4b1e      	ldr	r3, [pc, #120]	; (80051f4 <OSMutexCreate+0x8c>)
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d004      	beq.n	800518a <OSMutexCreate+0x22>
       *p_err = OS_ERR_CREATE_ISR;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f642 62e1 	movw	r2, #12001	; 0x2ee1
 8005186:	801a      	strh	r2, [r3, #0]
        return;
 8005188:	e031      	b.n	80051ee <OSMutexCreate+0x86>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_mutex == (OS_MUTEX *)0) {                         /* Validate 'p_mutex'                                     */
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d104      	bne.n	800519a <OSMutexCreate+0x32>
       *p_err = OS_ERR_OBJ_PTR_NULL;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f645 52c3 	movw	r2, #24003	; 0x5dc3
 8005196:	801a      	strh	r2, [r3, #0]
        return;
 8005198:	e029      	b.n	80051ee <OSMutexCreate+0x86>
    }
#endif

    OS_CRITICAL_ENTER();
 800519a:	f7fb f8a1 	bl	80002e0 <CPU_SR_Save>
 800519e:	6178      	str	r0, [r7, #20]
#if OS_OBJ_TYPE_REQ > 0u
    p_mutex->Type              =  OS_OBJ_TYPE_MUTEX;        /* Mark the data structure as a mutex                     */
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4a15      	ldr	r2, [pc, #84]	; (80051f8 <OSMutexCreate+0x90>)
 80051a4:	601a      	str	r2, [r3, #0]
#endif
#if OS_CFG_DBG_EN > 0u
    p_mutex->NamePtr           =  p_name;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	605a      	str	r2, [r3, #4]
#else
    (void)&p_name;
#endif
    p_mutex->MutexGrpNextPtr   = (OS_MUTEX     *)0;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	621a      	str	r2, [r3, #32]
    p_mutex->OwnerTCBPtr       = (OS_TCB       *)0;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	625a      	str	r2, [r3, #36]	; 0x24
    p_mutex->OwnerNestingCtr   = (OS_NESTING_CTR)0;         /* Mutex is available                                     */
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    p_mutex->TS                = (CPU_TS        )0;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	62da      	str	r2, [r3, #44]	; 0x2c
    OS_PendListInit(&p_mutex->PendList);                    /* Initialize the waiting list                            */
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	3308      	adds	r3, #8
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7fe fd02 	bl	8003bd4 <OS_PendListInit>

#if OS_CFG_DBG_EN > 0u
    OS_MutexDbgListAdd(p_mutex);
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f000 f9f9 	bl	80055c8 <OS_MutexDbgListAdd>
#endif

    OSMutexQty++;
 80051d6:	4b09      	ldr	r3, [pc, #36]	; (80051fc <OSMutexCreate+0x94>)
 80051d8:	881b      	ldrh	r3, [r3, #0]
 80051da:	3301      	adds	r3, #1
 80051dc:	b29a      	uxth	r2, r3
 80051de:	4b07      	ldr	r3, [pc, #28]	; (80051fc <OSMutexCreate+0x94>)
 80051e0:	801a      	strh	r2, [r3, #0]

#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_MUTEX_CREATE(p_mutex, p_name);                 /* Record the event.                                      */
#endif

    OS_CRITICAL_EXIT_NO_SCHED();
 80051e2:	6978      	ldr	r0, [r7, #20]
 80051e4:	f7fb f880 	bl	80002e8 <CPU_SR_Restore>
   *p_err = OS_ERR_NONE;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	801a      	strh	r2, [r3, #0]
}
 80051ee:	3718      	adds	r7, #24
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	200026d8 	.word	0x200026d8
 80051f8:	5854554d 	.word	0x5854554d
 80051fc:	200028d4 	.word	0x200028d4

08005200 <OSMutexPend>:
void  OSMutexPend (OS_MUTEX  *p_mutex,
                   OS_TICK    timeout,
                   OS_OPT     opt,
                   CPU_TS    *p_ts,
                   OS_ERR    *p_err)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b08e      	sub	sp, #56	; 0x38
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	603b      	str	r3, [r7, #0]
 800520c:	4613      	mov	r3, r2
 800520e:	80fb      	strh	r3, [r7, #6]
    OS_PEND_DATA  pend_data;
    OS_TCB       *p_tcb;
    CPU_SR_ALLOC();
 8005210:	2300      	movs	r3, #0
 8005212:	637b      	str	r3, [r7, #52]	; 0x34
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 8005214:	4b7a      	ldr	r3, [pc, #488]	; (8005400 <OSMutexPend+0x200>)
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d004      	beq.n	8005226 <OSMutexPend+0x26>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_PEND_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_PEND_ISR;
 800521c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800521e:	f246 12ae 	movw	r2, #25006	; 0x61ae
 8005222:	801a      	strh	r2, [r3, #0]
        return;
 8005224:	e0e9      	b.n	80053fa <OSMutexPend+0x1fa>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_mutex == (OS_MUTEX *)0) {                         /* Validate arguments                                     */
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d104      	bne.n	8005236 <OSMutexPend+0x36>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_PEND_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_PTR_NULL;
 800522c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800522e:	f645 52c3 	movw	r2, #24003	; 0x5dc3
 8005232:	801a      	strh	r2, [r3, #0]
        return;
 8005234:	e0e1      	b.n	80053fa <OSMutexPend+0x1fa>
    }
    switch (opt) {                                          /* Validate 'opt'                                         */
 8005236:	88fb      	ldrh	r3, [r7, #6]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d007      	beq.n	800524c <OSMutexPend+0x4c>
 800523c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005240:	d004      	beq.n	800524c <OSMutexPend+0x4c>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_MUTEX_PEND_FAILED(p_mutex);           /* Record the event.                                      */
#endif
            *p_err = OS_ERR_OPT_INVALID;
 8005242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005244:	f645 6225 	movw	r2, #24101	; 0x5e25
 8005248:	801a      	strh	r2, [r3, #0]
             return;
 800524a:	e0d6      	b.n	80053fa <OSMutexPend+0x1fa>
        return;
    }
    switch (opt) {                                          /* Validate 'opt'                                         */
        case OS_OPT_PEND_BLOCKING:
        case OS_OPT_PEND_NON_BLOCKING:
             break;
 800524c:	bf00      	nop
             return;
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_mutex->Type != OS_OBJ_TYPE_MUTEX) {               /* Make sure mutex was created                            */
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a6c      	ldr	r2, [pc, #432]	; (8005404 <OSMutexPend+0x204>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d004      	beq.n	8005262 <OSMutexPend+0x62>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_PEND_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_TYPE;
 8005258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800525a:	f645 52c4 	movw	r2, #24004	; 0x5dc4
 800525e:	801a      	strh	r2, [r3, #0]
        return;
 8005260:	e0cb      	b.n	80053fa <OSMutexPend+0x1fa>
    }
#endif

    if (p_ts != (CPU_TS *)0) {
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d002      	beq.n	800526e <OSMutexPend+0x6e>
       *p_ts  = (CPU_TS  )0;                                /* Initialize the returned timestamp                      */
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	2200      	movs	r2, #0
 800526c:	601a      	str	r2, [r3, #0]
    }

    CPU_CRITICAL_ENTER();
 800526e:	f7fb f837 	bl	80002e0 <CPU_SR_Save>
 8005272:	6378      	str	r0, [r7, #52]	; 0x34
    if (p_mutex->OwnerNestingCtr == (OS_NESTING_CTR)0) {    /* Resource available?                                    */
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800527a:	2b00      	cmp	r3, #0
 800527c:	d11b      	bne.n	80052b6 <OSMutexPend+0xb6>
        p_mutex->OwnerTCBPtr       =  OSTCBCurPtr;          /* Yes, caller may proceed                                */
 800527e:	4b62      	ldr	r3, [pc, #392]	; (8005408 <OSMutexPend+0x208>)
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	625a      	str	r2, [r3, #36]	; 0x24
        p_mutex->OwnerNestingCtr   = (OS_NESTING_CTR)1;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        if (p_ts != (CPU_TS *)0) {
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d003      	beq.n	800529c <OSMutexPend+0x9c>
           *p_ts  = p_mutex->TS;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	601a      	str	r2, [r3, #0]
        }
        OS_MutexGrpAdd(OSTCBCurPtr, p_mutex);               /* Add mutex to owner's group                             */
 800529c:	4b5a      	ldr	r3, [pc, #360]	; (8005408 <OSMutexPend+0x208>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68f9      	ldr	r1, [r7, #12]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f000 f9cc 	bl	8005640 <OS_MutexGrpAdd>
        CPU_CRITICAL_EXIT();
 80052a8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80052aa:	f7fb f81d 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_PEND(p_mutex);                       /* Record the event.                                      */
#endif
       *p_err = OS_ERR_NONE;
 80052ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052b0:	2200      	movs	r2, #0
 80052b2:	801a      	strh	r2, [r3, #0]
        return;
 80052b4:	e0a1      	b.n	80053fa <OSMutexPend+0x1fa>
    }

    if (OSTCBCurPtr == p_mutex->OwnerTCBPtr) {              /* See if current task is already the owner of the mutex  */
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052ba:	4b53      	ldr	r3, [pc, #332]	; (8005408 <OSMutexPend+0x208>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d116      	bne.n	80052f0 <OSMutexPend+0xf0>
        p_mutex->OwnerNestingCtr++;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052c8:	3301      	adds	r3, #1
 80052ca:	b2da      	uxtb	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        if (p_ts != (CPU_TS *)0) {
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d003      	beq.n	80052e0 <OSMutexPend+0xe0>
           *p_ts  = p_mutex->TS;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	601a      	str	r2, [r3, #0]
        }
        CPU_CRITICAL_EXIT();
 80052e0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80052e2:	f7fb f801 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_PEND_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_MUTEX_OWNER;                         /* Indicate that current task already owns the mutex      */
 80052e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052e8:	f245 7282 	movw	r2, #22402	; 0x5782
 80052ec:	801a      	strh	r2, [r3, #0]
        return;
 80052ee:	e084      	b.n	80053fa <OSMutexPend+0x1fa>
    }

    if ((opt & OS_OPT_PEND_NON_BLOCKING) != (OS_OPT)0) {    /* Caller wants to block if not available?                */
 80052f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	da07      	bge.n	8005308 <OSMutexPend+0x108>
        CPU_CRITICAL_EXIT();
 80052f8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80052fa:	f7fa fff5 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_PEND_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_PEND_WOULD_BLOCK;                    /* No                                                     */
 80052fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005300:	f246 12b0 	movw	r2, #25008	; 0x61b0
 8005304:	801a      	strh	r2, [r3, #0]
        return;
 8005306:	e078      	b.n	80053fa <OSMutexPend+0x1fa>
    } else {
        if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /* Can't pend when the scheduler is locked                */
 8005308:	4b40      	ldr	r3, [pc, #256]	; (800540c <OSMutexPend+0x20c>)
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d007      	beq.n	8005320 <OSMutexPend+0x120>
            CPU_CRITICAL_EXIT();
 8005310:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005312:	f7fa ffe9 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
            TRACE_OS_MUTEX_PEND_FAILED(p_mutex);            /* Record the event.                                      */
#endif
           *p_err = OS_ERR_SCHED_LOCKED;
 8005316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005318:	f646 5263 	movw	r2, #28003	; 0x6d63
 800531c:	801a      	strh	r2, [r3, #0]
            return;
 800531e:	e06c      	b.n	80053fa <OSMutexPend+0x1fa>
        }
    }
                                                            /* Lock the scheduler/re-enable interrupts                */
    OS_CRITICAL_ENTER_CPU_EXIT();
    p_tcb = p_mutex->OwnerTCBPtr;                           /* Point to the TCB of the Mutex owner                    */
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005324:	633b      	str	r3, [r7, #48]	; 0x30
    if (p_tcb->Prio > OSTCBCurPtr->Prio) {                  /* See if mutex owner has a lower priority than current   */
 8005326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005328:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 800532c:	4b36      	ldr	r3, [pc, #216]	; (8005408 <OSMutexPend+0x208>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8005334:	429a      	cmp	r2, r3
 8005336:	d907      	bls.n	8005348 <OSMutexPend+0x148>
        OS_TaskChangePrio(p_tcb, OSTCBCurPtr->Prio);
 8005338:	4b33      	ldr	r3, [pc, #204]	; (8005408 <OSMutexPend+0x208>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8005340:	4619      	mov	r1, r3
 8005342:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005344:	f7fd fe50 	bl	8002fe8 <OS_TaskChangePrio>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
                 TRACE_OS_MUTEX_TASK_PRIO_INHERIT(p_tcb, p_tcb->Prio);
#endif
    }

    OS_Pend(&pend_data,                                     /* Block task pending on Mutex                            */
 8005348:	f107 0010 	add.w	r0, r7, #16
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	2204      	movs	r2, #4
 8005350:	68f9      	ldr	r1, [r7, #12]
 8005352:	f7fe fb39 	bl	80039c8 <OS_Pend>
            (OS_PEND_OBJ *)((void *)p_mutex),
             OS_TASK_PEND_ON_MUTEX,
             timeout);

    OS_CRITICAL_EXIT_NO_SCHED();
 8005356:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005358:	f7fa ffc6 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_MUTEX_PEND_BLOCK(p_mutex);                     /* Record the event.                                      */
#endif
    OSSched();                                              /* Find the next highest priority task ready to run       */
 800535c:	f7fe f9c8 	bl	80036f0 <OSSched>

    CPU_CRITICAL_ENTER();
 8005360:	f7fa ffbe 	bl	80002e0 <CPU_SR_Save>
 8005364:	6378      	str	r0, [r7, #52]	; 0x34
    switch (OSTCBCurPtr->PendStatus) {
 8005366:	4b28      	ldr	r3, [pc, #160]	; (8005408 <OSMutexPend+0x208>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800536e:	2b03      	cmp	r3, #3
 8005370:	d83b      	bhi.n	80053ea <OSMutexPend+0x1ea>
 8005372:	a201      	add	r2, pc, #4	; (adr r2, 8005378 <OSMutexPend+0x178>)
 8005374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005378:	08005389 	.word	0x08005389
 800537c:	080053a1 	.word	0x080053a1
 8005380:	080053d1 	.word	0x080053d1
 8005384:	080053bb 	.word	0x080053bb
        case OS_STATUS_PEND_OK:                             /* We got the mutex                                       */
             if (p_ts != (CPU_TS *)0) {
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d004      	beq.n	8005398 <OSMutexPend+0x198>
                *p_ts  = OSTCBCurPtr->TS;
 800538e:	4b1e      	ldr	r3, [pc, #120]	; (8005408 <OSMutexPend+0x208>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_MUTEX_PEND(p_mutex);                  /* Record the event.                                      */
#endif
            *p_err = OS_ERR_NONE;
 8005398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800539a:	2200      	movs	r2, #0
 800539c:	801a      	strh	r2, [r3, #0]
             break;
 800539e:	e029      	b.n	80053f4 <OSMutexPend+0x1f4>

        case OS_STATUS_PEND_ABORT:                          /* Indicate that we aborted                               */
             if (p_ts != (CPU_TS *)0) {
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d004      	beq.n	80053b0 <OSMutexPend+0x1b0>
                *p_ts  = OSTCBCurPtr->TS;
 80053a6:	4b18      	ldr	r3, [pc, #96]	; (8005408 <OSMutexPend+0x208>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_MUTEX_PEND_FAILED(p_mutex);           /* Record the event.                                      */
#endif
            *p_err = OS_ERR_PEND_ABORT;
 80053b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053b2:	f246 12a9 	movw	r2, #25001	; 0x61a9
 80053b6:	801a      	strh	r2, [r3, #0]
             break;
 80053b8:	e01c      	b.n	80053f4 <OSMutexPend+0x1f4>

        case OS_STATUS_PEND_TIMEOUT:                        /* Indicate that we didn't get mutex within timeout       */
             if (p_ts != (CPU_TS *)0) {
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d002      	beq.n	80053c6 <OSMutexPend+0x1c6>
                *p_ts  = (CPU_TS  )0;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	2200      	movs	r2, #0
 80053c4:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_MUTEX_PEND_FAILED(p_mutex);           /* Record the event.                                      */
#endif
            *p_err = OS_ERR_TIMEOUT;
 80053c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053c8:	f247 22d9 	movw	r2, #29401	; 0x72d9
 80053cc:	801a      	strh	r2, [r3, #0]
             break;
 80053ce:	e011      	b.n	80053f4 <OSMutexPend+0x1f4>

        case OS_STATUS_PEND_DEL:                            /* Indicate that object pended on has been deleted        */
             if (p_ts != (CPU_TS *)0) {
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d004      	beq.n	80053e0 <OSMutexPend+0x1e0>
                *p_ts  = OSTCBCurPtr->TS;
 80053d6:	4b0c      	ldr	r3, [pc, #48]	; (8005408 <OSMutexPend+0x208>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	601a      	str	r2, [r3, #0]
             }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_MUTEX_PEND_FAILED(p_mutex);           /* Record the event.                                      */
#endif
            *p_err = OS_ERR_OBJ_DEL;
 80053e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053e2:	f645 52c2 	movw	r2, #24002	; 0x5dc2
 80053e6:	801a      	strh	r2, [r3, #0]
             break;
 80053e8:	e004      	b.n	80053f4 <OSMutexPend+0x1f4>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_MUTEX_PEND_FAILED(p_mutex);           /* Record the event.                                      */
#endif
            *p_err = OS_ERR_STATUS_INVALID;
 80053ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053ec:	f646 622e 	movw	r2, #28206	; 0x6e2e
 80053f0:	801a      	strh	r2, [r3, #0]
             break;
 80053f2:	bf00      	nop
    }
    CPU_CRITICAL_EXIT();
 80053f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80053f6:	f7fa ff77 	bl	80002e8 <CPU_SR_Restore>
}
 80053fa:	3738      	adds	r7, #56	; 0x38
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	200026d8 	.word	0x200026d8
 8005404:	5854554d 	.word	0x5854554d
 8005408:	200026ac 	.word	0x200026ac
 800540c:	20002440 	.word	0x20002440

08005410 <OSMutexPost>:
*/

void  OSMutexPost (OS_MUTEX  *p_mutex,
                   OS_OPT     opt,
                   OS_ERR    *p_err)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b08c      	sub	sp, #48	; 0x30
 8005414:	af02      	add	r7, sp, #8
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	460b      	mov	r3, r1
 800541a:	607a      	str	r2, [r7, #4]
 800541c:	817b      	strh	r3, [r7, #10]
    OS_PEND_LIST  *p_pend_list;
    OS_TCB        *p_tcb;
    CPU_TS         ts;
    OS_PRIO        prio_new;
    CPU_SR_ALLOC();
 800541e:	2300      	movs	r3, #0
 8005420:	627b      	str	r3, [r7, #36]	; 0x24
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 8005422:	4b65      	ldr	r3, [pc, #404]	; (80055b8 <OSMutexPost+0x1a8>)
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d004      	beq.n	8005434 <OSMutexPost+0x24>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_POST_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_POST_ISR;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f246 220e 	movw	r2, #25102	; 0x620e
 8005430:	801a      	strh	r2, [r3, #0]
        return;
 8005432:	e0be      	b.n	80055b2 <OSMutexPost+0x1a2>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_mutex == (OS_MUTEX *)0) {                         /* Validate 'p_mutex'                                     */
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d104      	bne.n	8005444 <OSMutexPost+0x34>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_POST_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_PTR_NULL;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f645 52c3 	movw	r2, #24003	; 0x5dc3
 8005440:	801a      	strh	r2, [r3, #0]
        return;
 8005442:	e0b6      	b.n	80055b2 <OSMutexPost+0x1a2>
    }
    switch (opt) {                                          /* Validate 'opt'                                         */
 8005444:	897b      	ldrh	r3, [r7, #10]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d007      	beq.n	800545a <OSMutexPost+0x4a>
 800544a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800544e:	d004      	beq.n	800545a <OSMutexPost+0x4a>

        default:
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
             TRACE_OS_MUTEX_POST_FAILED(p_mutex);           /* Record the event.                                      */
#endif
            *p_err =  OS_ERR_OPT_INVALID;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f645 6225 	movw	r2, #24101	; 0x5e25
 8005456:	801a      	strh	r2, [r3, #0]
             return;
 8005458:	e0ab      	b.n	80055b2 <OSMutexPost+0x1a2>
        return;
    }
    switch (opt) {                                          /* Validate 'opt'                                         */
        case OS_OPT_POST_NONE:
        case OS_OPT_POST_NO_SCHED:
             break;
 800545a:	bf00      	nop
             return;
    }
#endif

#if OS_CFG_OBJ_TYPE_CHK_EN > 0u
    if (p_mutex->Type != OS_OBJ_TYPE_MUTEX) {               /* Make sure mutex was created                            */
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a56      	ldr	r2, [pc, #344]	; (80055bc <OSMutexPost+0x1ac>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d004      	beq.n	8005470 <OSMutexPost+0x60>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_POST_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_OBJ_TYPE;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f645 52c4 	movw	r2, #24004	; 0x5dc4
 800546c:	801a      	strh	r2, [r3, #0]
        return;
 800546e:	e0a0      	b.n	80055b2 <OSMutexPost+0x1a2>
    }
#endif

    CPU_CRITICAL_ENTER();
 8005470:	f7fa ff36 	bl	80002e0 <CPU_SR_Save>
 8005474:	6278      	str	r0, [r7, #36]	; 0x24
    if (OSTCBCurPtr != p_mutex->OwnerTCBPtr) {              /* Make sure the mutex owner is releasing the mutex       */
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800547a:	4b51      	ldr	r3, [pc, #324]	; (80055c0 <OSMutexPost+0x1b0>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	429a      	cmp	r2, r3
 8005480:	d007      	beq.n	8005492 <OSMutexPost+0x82>
        CPU_CRITICAL_EXIT();
 8005482:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005484:	f7fa ff30 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MUTEX_POST_FAILED(p_mutex);                /* Record the event.                                      */
#endif
       *p_err = OS_ERR_MUTEX_NOT_OWNER;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f245 7281 	movw	r2, #22401	; 0x5781
 800548e:	801a      	strh	r2, [r3, #0]
        return;
 8005490:	e08f      	b.n	80055b2 <OSMutexPost+0x1a2>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_MUTEX_POST(p_mutex);                           /* Record the event.                                      */
#endif

    OS_CRITICAL_ENTER_CPU_EXIT();
    ts          = OS_TS_GET();                              /* Get timestamp                                          */
 8005492:	f002 f86b 	bl	800756c <CPU_TS_TmrRd>
 8005496:	6238      	str	r0, [r7, #32]
    p_mutex->TS = ts;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6a3a      	ldr	r2, [r7, #32]
 800549c:	62da      	str	r2, [r3, #44]	; 0x2c
    p_mutex->OwnerNestingCtr--;                             /* Decrement owner's nesting counter                      */
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054a4:	3b01      	subs	r3, #1
 80054a6:	b2da      	uxtb	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (p_mutex->OwnerNestingCtr > (OS_NESTING_CTR)0) {     /* Are we done with all nestings?                         */
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d007      	beq.n	80054c8 <OSMutexPost+0xb8>
        OS_CRITICAL_EXIT();                                 /* No                                                     */
 80054b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80054ba:	f7fa ff15 	bl	80002e8 <CPU_SR_Restore>
       *p_err = OS_ERR_MUTEX_NESTING;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f245 7283 	movw	r2, #22403	; 0x5783
 80054c4:	801a      	strh	r2, [r3, #0]
        return;
 80054c6:	e074      	b.n	80055b2 <OSMutexPost+0x1a2>
    }

    OS_MutexGrpRemove(OSTCBCurPtr, p_mutex);                /* Remove mutex from owner's group                        */
 80054c8:	4b3d      	ldr	r3, [pc, #244]	; (80055c0 <OSMutexPost+0x1b0>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68f9      	ldr	r1, [r7, #12]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 f8c8 	bl	8005664 <OS_MutexGrpRemove>

    p_pend_list = &p_mutex->PendList;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	3308      	adds	r3, #8
 80054d8:	61fb      	str	r3, [r7, #28]
    if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0) {         /* Any task waiting on mutex?                             */
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	891b      	ldrh	r3, [r3, #8]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10d      	bne.n	80054fe <OSMutexPost+0xee>
        p_mutex->OwnerTCBPtr     = (OS_TCB       *)0;       /* No                                                     */
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	625a      	str	r2, [r3, #36]	; 0x24
        p_mutex->OwnerNestingCtr = (OS_NESTING_CTR)0;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        OS_CRITICAL_EXIT();
 80054f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80054f2:	f7fa fef9 	bl	80002e8 <CPU_SR_Restore>
       *p_err = OS_ERR_NONE;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	801a      	strh	r2, [r3, #0]
        return;
 80054fc:	e059      	b.n	80055b2 <OSMutexPost+0x1a2>
    }
                                                            /* Yes                                                    */
    if (OSTCBCurPtr->Prio != OSTCBCurPtr->BasePrio) {       /* Has owner inherited a priority?                        */
 80054fe:	4b30      	ldr	r3, [pc, #192]	; (80055c0 <OSMutexPost+0x1b0>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8005506:	4b2e      	ldr	r3, [pc, #184]	; (80055c0 <OSMutexPost+0x1b0>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800550e:	429a      	cmp	r2, r3
 8005510:	d02c      	beq.n	800556c <OSMutexPost+0x15c>
        prio_new = OS_MutexGrpPrioFindHighest(OSTCBCurPtr); /* Yes, find highest priority pending                     */
 8005512:	4b2b      	ldr	r3, [pc, #172]	; (80055c0 <OSMutexPost+0x1b0>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4618      	mov	r0, r3
 8005518:	f000 f8c0 	bl	800569c <OS_MutexGrpPrioFindHighest>
 800551c:	4603      	mov	r3, r0
 800551e:	76fb      	strb	r3, [r7, #27]
        prio_new = prio_new > OSTCBCurPtr->BasePrio ? OSTCBCurPtr->BasePrio : prio_new;
 8005520:	4b27      	ldr	r3, [pc, #156]	; (80055c0 <OSMutexPost+0x1b0>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8005528:	7efb      	ldrb	r3, [r7, #27]
 800552a:	4293      	cmp	r3, r2
 800552c:	bf28      	it	cs
 800552e:	4613      	movcs	r3, r2
 8005530:	76fb      	strb	r3, [r7, #27]
        if (prio_new > OSTCBCurPtr->Prio) {
 8005532:	4b23      	ldr	r3, [pc, #140]	; (80055c0 <OSMutexPost+0x1b0>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800553a:	7efa      	ldrb	r2, [r7, #27]
 800553c:	429a      	cmp	r2, r3
 800553e:	d915      	bls.n	800556c <OSMutexPost+0x15c>
            OS_RdyListRemove(OSTCBCurPtr);
 8005540:	4b1f      	ldr	r3, [pc, #124]	; (80055c0 <OSMutexPost+0x1b0>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4618      	mov	r0, r3
 8005546:	f7fe fdc9 	bl	80040dc <OS_RdyListRemove>
            OSTCBCurPtr->Prio = prio_new;                   /* Lower owner's priority back to its original one        */
 800554a:	4b1d      	ldr	r3, [pc, #116]	; (80055c0 <OSMutexPost+0x1b0>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	7efa      	ldrb	r2, [r7, #27]
 8005550:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
            TRACE_OS_MUTEX_TASK_PRIO_DISINHERIT(OSTCBCurPtr, prio_new);
#endif
            OS_PrioInsert(prio_new);
 8005554:	7efb      	ldrb	r3, [r7, #27]
 8005556:	4618      	mov	r0, r3
 8005558:	f7ff fd06 	bl	8004f68 <OS_PrioInsert>
            OS_RdyListInsertTail(OSTCBCurPtr);              /* Insert owner in ready list at new priority             */
 800555c:	4b18      	ldr	r3, [pc, #96]	; (80055c0 <OSMutexPost+0x1b0>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4618      	mov	r0, r3
 8005562:	f7fe fd7b 	bl	800405c <OS_RdyListInsertTail>
            OSPrioCur         = prio_new;
 8005566:	4a17      	ldr	r2, [pc, #92]	; (80055c4 <OSMutexPost+0x1b4>)
 8005568:	7efb      	ldrb	r3, [r7, #27]
 800556a:	7013      	strb	r3, [r2, #0]
        }
    }
                                                            /* Get TCB from head of pend list                         */
    p_tcb                      = p_pend_list->HeadPtr->TCBPtr;
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	617b      	str	r3, [r7, #20]
    p_mutex->OwnerTCBPtr       = p_tcb;                     /* Give mutex to new owner                                */
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	625a      	str	r2, [r3, #36]	; 0x24
    p_mutex->OwnerNestingCtr   = (OS_NESTING_CTR)1;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2201      	movs	r2, #1
 800557e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    OS_MutexGrpAdd(p_tcb, p_mutex);
 8005582:	68f9      	ldr	r1, [r7, #12]
 8005584:	6978      	ldr	r0, [r7, #20]
 8005586:	f000 f85b 	bl	8005640 <OS_MutexGrpAdd>
                                                            /* Post to mutex                                          */
    OS_Post((OS_PEND_OBJ *)((void *)p_mutex),
 800558a:	6a3b      	ldr	r3, [r7, #32]
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	2300      	movs	r3, #0
 8005590:	2200      	movs	r2, #0
 8005592:	6979      	ldr	r1, [r7, #20]
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f7fe fc17 	bl	8003dc8 <OS_Post>
            (OS_TCB      *)p_tcb,
            (void        *)0,
            (OS_MSG_SIZE  )0,
            (CPU_TS       )ts);

    OS_CRITICAL_EXIT_NO_SCHED();
 800559a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800559c:	f7fa fea4 	bl	80002e8 <CPU_SR_Restore>

    if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0) {
 80055a0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	db01      	blt.n	80055ac <OSMutexPost+0x19c>
        OSSched();                                          /* Run the scheduler                                      */
 80055a8:	f7fe f8a2 	bl	80036f0 <OSSched>
    }

   *p_err = OS_ERR_NONE;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	801a      	strh	r2, [r3, #0]
}
 80055b2:	3728      	adds	r7, #40	; 0x28
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	200026d8 	.word	0x200026d8
 80055bc:	5854554d 	.word	0x5854554d
 80055c0:	200026ac 	.word	0x200026ac
 80055c4:	200025e0 	.word	0x200025e0

080055c8 <OS_MutexDbgListAdd>:
*/


#if OS_CFG_DBG_EN > 0u
void  OS_MutexDbgListAdd (OS_MUTEX  *p_mutex)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
    p_mutex->DbgNamePtr               = (CPU_CHAR *)((void *)" ");
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a0e      	ldr	r2, [pc, #56]	; (800560c <OS_MutexDbgListAdd+0x44>)
 80055d4:	61da      	str	r2, [r3, #28]
    p_mutex->DbgPrevPtr               = (OS_MUTEX *)0;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	615a      	str	r2, [r3, #20]
    if (OSMutexDbgListPtr == (OS_MUTEX *)0) {
 80055dc:	4b0c      	ldr	r3, [pc, #48]	; (8005610 <OS_MutexDbgListAdd+0x48>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d103      	bne.n	80055ec <OS_MutexDbgListAdd+0x24>
        p_mutex->DbgNextPtr           = (OS_MUTEX *)0;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	619a      	str	r2, [r3, #24]
 80055ea:	e007      	b.n	80055fc <OS_MutexDbgListAdd+0x34>
    } else {
        p_mutex->DbgNextPtr           =  OSMutexDbgListPtr;
 80055ec:	4b08      	ldr	r3, [pc, #32]	; (8005610 <OS_MutexDbgListAdd+0x48>)
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	619a      	str	r2, [r3, #24]
        OSMutexDbgListPtr->DbgPrevPtr =  p_mutex;
 80055f4:	4b06      	ldr	r3, [pc, #24]	; (8005610 <OS_MutexDbgListAdd+0x48>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	615a      	str	r2, [r3, #20]
    }
    OSMutexDbgListPtr                 =  p_mutex;
 80055fc:	4a04      	ldr	r2, [pc, #16]	; (8005610 <OS_MutexDbgListAdd+0x48>)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6013      	str	r3, [r2, #0]
}
 8005602:	bf00      	nop
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	bc80      	pop	{r7}
 800560a:	4770      	bx	lr
 800560c:	0800e544 	.word	0x0800e544
 8005610:	200029ac 	.word	0x200029ac

08005614 <OS_MutexInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MutexInit (OS_ERR  *p_err)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSMutexDbgListPtr = (OS_MUTEX *)0;
 800561c:	4b06      	ldr	r3, [pc, #24]	; (8005638 <OS_MutexInit+0x24>)
 800561e:	2200      	movs	r2, #0
 8005620:	601a      	str	r2, [r3, #0]
#endif

    OSMutexQty        = (OS_OBJ_QTY)0;
 8005622:	4b06      	ldr	r3, [pc, #24]	; (800563c <OS_MutexInit+0x28>)
 8005624:	2200      	movs	r2, #0
 8005626:	801a      	strh	r2, [r3, #0]
   *p_err             =  OS_ERR_NONE;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	801a      	strh	r2, [r3, #0]
}
 800562e:	bf00      	nop
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	bc80      	pop	{r7}
 8005636:	4770      	bx	lr
 8005638:	200029ac 	.word	0x200029ac
 800563c:	200028d4 	.word	0x200028d4

08005640 <OS_MutexGrpAdd>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MutexGrpAdd (OS_TCB  *p_tcb, OS_MUTEX  *p_mutex)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
    p_mutex->MutexGrpNextPtr = p_tcb->MutexGrpHeadPtr;      /* The mutex grp is not sorted add to head of list.       */
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	621a      	str	r2, [r3, #32]
    p_tcb->MutexGrpHeadPtr   = p_mutex;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	683a      	ldr	r2, [r7, #0]
 8005656:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	bc80      	pop	{r7}
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop

08005664 <OS_MutexGrpRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MutexGrpRemove (OS_TCB  *p_tcb, OS_MUTEX  *p_mutex)
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
    OS_MUTEX  **pp_mutex;

    pp_mutex = &p_tcb->MutexGrpHeadPtr;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	333c      	adds	r3, #60	; 0x3c
 8005672:	60fb      	str	r3, [r7, #12]

    while(*pp_mutex != p_mutex) {
 8005674:	e003      	b.n	800567e <OS_MutexGrpRemove+0x1a>
        pp_mutex = &(*pp_mutex)->MutexGrpNextPtr;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	3320      	adds	r3, #32
 800567c:	60fb      	str	r3, [r7, #12]
{
    OS_MUTEX  **pp_mutex;

    pp_mutex = &p_tcb->MutexGrpHeadPtr;

    while(*pp_mutex != p_mutex) {
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	429a      	cmp	r2, r3
 8005686:	d1f6      	bne.n	8005676 <OS_MutexGrpRemove+0x12>
        pp_mutex = &(*pp_mutex)->MutexGrpNextPtr;
    }

    *pp_mutex = (*pp_mutex)->MutexGrpNextPtr;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6a1a      	ldr	r2, [r3, #32]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	601a      	str	r2, [r3, #0]
}
 8005692:	bf00      	nop
 8005694:	3714      	adds	r7, #20
 8005696:	46bd      	mov	sp, r7
 8005698:	bc80      	pop	{r7}
 800569a:	4770      	bx	lr

0800569c <OS_MutexGrpPrioFindHighest>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

OS_PRIO  OS_MutexGrpPrioFindHighest (OS_TCB  *p_tcb)
{
 800569c:	b480      	push	{r7}
 800569e:	b087      	sub	sp, #28
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
    OS_PRIO        highest_prio;
    OS_PRIO        prio;
    OS_PEND_DATA  *p_head;


    highest_prio = OS_CFG_PRIO_MAX - 1u;
 80056a4:	231f      	movs	r3, #31
 80056a6:	74fb      	strb	r3, [r7, #19]
    pp_mutex = &p_tcb->MutexGrpHeadPtr;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	333c      	adds	r3, #60	; 0x3c
 80056ac:	617b      	str	r3, [r7, #20]

    while(*pp_mutex != (OS_MUTEX *)0) {
 80056ae:	e015      	b.n	80056dc <OS_MutexGrpPrioFindHighest+0x40>
        p_head = (*pp_mutex)->PendList.HeadPtr;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	60fb      	str	r3, [r7, #12]
        if (p_head!= (OS_PEND_DATA *)0) {
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00a      	beq.n	80056d4 <OS_MutexGrpPrioFindHighest+0x38>
            prio = p_head->TCBPtr->Prio;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80056c6:	72fb      	strb	r3, [r7, #11]
            if(prio < highest_prio) {
 80056c8:	7afa      	ldrb	r2, [r7, #11]
 80056ca:	7cfb      	ldrb	r3, [r7, #19]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d201      	bcs.n	80056d4 <OS_MutexGrpPrioFindHighest+0x38>
                highest_prio = prio;
 80056d0:	7afb      	ldrb	r3, [r7, #11]
 80056d2:	74fb      	strb	r3, [r7, #19]
            }
        }
        pp_mutex = &(*pp_mutex)->MutexGrpNextPtr;
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	3320      	adds	r3, #32
 80056da:	617b      	str	r3, [r7, #20]


    highest_prio = OS_CFG_PRIO_MAX - 1u;
    pp_mutex = &p_tcb->MutexGrpHeadPtr;

    while(*pp_mutex != (OS_MUTEX *)0) {
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1e5      	bne.n	80056b0 <OS_MutexGrpPrioFindHighest+0x14>
            }
        }
        pp_mutex = &(*pp_mutex)->MutexGrpNextPtr;
    }

    return (highest_prio);
 80056e4:	7cfb      	ldrb	r3, [r7, #19]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	371c      	adds	r7, #28
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bc80      	pop	{r7}
 80056ee:	4770      	bx	lr

080056f0 <OS_Dbg_Init>:
*                  DOES NOT optimize out the 'const' variables above.
************************************************************************************************************************
*/

void  OS_Dbg_Init (void)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
    CPU_INT08U const  *p_temp08;
    CPU_INT16U const  *p_temp16;
    CPU_INT32U const  *p_temp32;


    p_temp08 = (CPU_INT08U const *)&OSDbg_DbgEn;
 80056f6:	4b47      	ldr	r3, [pc, #284]	; (8005814 <OS_Dbg_Init+0x124>)
 80056f8:	60fb      	str	r3, [r7, #12]

    p_temp32 = (CPU_INT32U const *)&OSDbg_DataSize;
 80056fa:	4b47      	ldr	r3, [pc, #284]	; (8005818 <OS_Dbg_Init+0x128>)
 80056fc:	60bb      	str	r3, [r7, #8]

    p_temp08 = (CPU_INT08U const *)&OSDbg_ArgChkEn;
 80056fe:	4b47      	ldr	r3, [pc, #284]	; (800581c <OS_Dbg_Init+0x12c>)
 8005700:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_AppHooksEn;
 8005702:	4b47      	ldr	r3, [pc, #284]	; (8005820 <OS_Dbg_Init+0x130>)
 8005704:	60fb      	str	r3, [r7, #12]

    p_temp32 = (CPU_INT32U const *)&OSDbg_EndiannessTest;
 8005706:	4b47      	ldr	r3, [pc, #284]	; (8005824 <OS_Dbg_Init+0x134>)
 8005708:	60bb      	str	r3, [r7, #8]

    p_temp08 = (CPU_INT08U const *)&OSDbg_CalledFromISRChkEn;
 800570a:	4b47      	ldr	r3, [pc, #284]	; (8005828 <OS_Dbg_Init+0x138>)
 800570c:	60fb      	str	r3, [r7, #12]

    p_temp16 = (CPU_INT16U const *)&OSDbg_FlagGrp;
 800570e:	4b47      	ldr	r3, [pc, #284]	; (800582c <OS_Dbg_Init+0x13c>)
 8005710:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_FlagEn;
 8005712:	4b47      	ldr	r3, [pc, #284]	; (8005830 <OS_Dbg_Init+0x140>)
 8005714:	60fb      	str	r3, [r7, #12]
#if OS_CFG_FLAG_EN > 0u
    p_temp08 = (CPU_INT08U const *)&OSDbg_FlagDelEn;
 8005716:	4b47      	ldr	r3, [pc, #284]	; (8005834 <OS_Dbg_Init+0x144>)
 8005718:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_FlagModeClrEn;
 800571a:	4b47      	ldr	r3, [pc, #284]	; (8005838 <OS_Dbg_Init+0x148>)
 800571c:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_FlagPendAbortEn;
 800571e:	4b47      	ldr	r3, [pc, #284]	; (800583c <OS_Dbg_Init+0x14c>)
 8005720:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_FlagGrpSize;
 8005722:	4b47      	ldr	r3, [pc, #284]	; (8005840 <OS_Dbg_Init+0x150>)
 8005724:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_FlagWidth;
 8005726:	4b47      	ldr	r3, [pc, #284]	; (8005844 <OS_Dbg_Init+0x154>)
 8005728:	607b      	str	r3, [r7, #4]

#if OS_CFG_ISR_POST_DEFERRED_EN > 0u
    p_temp16 = (CPU_INT16U const *)&OSDbg_IntQ;
#endif

    p_temp08 = (CPU_INT08U const *)&OSDbg_ISRPostDeferredEn;
 800572a:	4b47      	ldr	r3, [pc, #284]	; (8005848 <OS_Dbg_Init+0x158>)
 800572c:	60fb      	str	r3, [r7, #12]

    p_temp16 = (CPU_INT16U const *)&OSDbg_Mem;
 800572e:	4b47      	ldr	r3, [pc, #284]	; (800584c <OS_Dbg_Init+0x15c>)
 8005730:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_MemEn;
 8005732:	4b47      	ldr	r3, [pc, #284]	; (8005850 <OS_Dbg_Init+0x160>)
 8005734:	60fb      	str	r3, [r7, #12]
#if OS_CFG_MEM_EN > 0u
    p_temp16 = (CPU_INT16U const *)&OSDbg_MemSize;
 8005736:	4b47      	ldr	r3, [pc, #284]	; (8005854 <OS_Dbg_Init+0x164>)
 8005738:	607b      	str	r3, [r7, #4]
#endif

    p_temp08 = (CPU_INT08U const *)&OSDbg_MsgEn;
 800573a:	4b47      	ldr	r3, [pc, #284]	; (8005858 <OS_Dbg_Init+0x168>)
 800573c:	60fb      	str	r3, [r7, #12]
#if (OS_MSG_EN) > 0u
    p_temp16 = (CPU_INT16U const *)&OSDbg_MsgSize;
 800573e:	4b47      	ldr	r3, [pc, #284]	; (800585c <OS_Dbg_Init+0x16c>)
 8005740:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_MsgPoolSize;
 8005742:	4b47      	ldr	r3, [pc, #284]	; (8005860 <OS_Dbg_Init+0x170>)
 8005744:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_MsgQSize;
 8005746:	4b47      	ldr	r3, [pc, #284]	; (8005864 <OS_Dbg_Init+0x174>)
 8005748:	607b      	str	r3, [r7, #4]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_Mutex;
 800574a:	4b47      	ldr	r3, [pc, #284]	; (8005868 <OS_Dbg_Init+0x178>)
 800574c:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_MutexEn;
 800574e:	4b47      	ldr	r3, [pc, #284]	; (800586c <OS_Dbg_Init+0x17c>)
 8005750:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_MUTEX_EN) > 0u
    p_temp08 = (CPU_INT08U const *)&OSDbg_MutexDelEn;
 8005752:	4b47      	ldr	r3, [pc, #284]	; (8005870 <OS_Dbg_Init+0x180>)
 8005754:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_MutexPendAbortEn;
 8005756:	4b47      	ldr	r3, [pc, #284]	; (8005874 <OS_Dbg_Init+0x184>)
 8005758:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_MutexSize;
 800575a:	4b47      	ldr	r3, [pc, #284]	; (8005878 <OS_Dbg_Init+0x188>)
 800575c:	607b      	str	r3, [r7, #4]
#endif

    p_temp08 = (CPU_INT08U const *)&OSDbg_ObjTypeChkEn;
 800575e:	4b47      	ldr	r3, [pc, #284]	; (800587c <OS_Dbg_Init+0x18c>)
 8005760:	60fb      	str	r3, [r7, #12]

    p_temp08 = (CPU_INT08U const *)&OSDbg_PendMultiEn;
 8005762:	4b47      	ldr	r3, [pc, #284]	; (8005880 <OS_Dbg_Init+0x190>)
 8005764:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_PendDataSize;
 8005766:	4b47      	ldr	r3, [pc, #284]	; (8005884 <OS_Dbg_Init+0x194>)
 8005768:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_PendListSize;
 800576a:	4b47      	ldr	r3, [pc, #284]	; (8005888 <OS_Dbg_Init+0x198>)
 800576c:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_PendObjSize;
 800576e:	4b47      	ldr	r3, [pc, #284]	; (800588c <OS_Dbg_Init+0x19c>)
 8005770:	607b      	str	r3, [r7, #4]

    p_temp16 = (CPU_INT16U const *)&OSDbg_PrioMax;
 8005772:	4b47      	ldr	r3, [pc, #284]	; (8005890 <OS_Dbg_Init+0x1a0>)
 8005774:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_PrioTblSize;
 8005776:	4b47      	ldr	r3, [pc, #284]	; (8005894 <OS_Dbg_Init+0x1a4>)
 8005778:	607b      	str	r3, [r7, #4]

    p_temp16 = (CPU_INT16U const *)&OSDbg_PtrSize;
 800577a:	4b47      	ldr	r3, [pc, #284]	; (8005898 <OS_Dbg_Init+0x1a8>)
 800577c:	607b      	str	r3, [r7, #4]

    p_temp16 = (CPU_INT16U const *)&OSDbg_Q;
 800577e:	4b47      	ldr	r3, [pc, #284]	; (800589c <OS_Dbg_Init+0x1ac>)
 8005780:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_QEn;
 8005782:	4b47      	ldr	r3, [pc, #284]	; (80058a0 <OS_Dbg_Init+0x1b0>)
 8005784:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_Q_EN) > 0u
    p_temp08 = (CPU_INT08U const *)&OSDbg_QDelEn;
 8005786:	4b47      	ldr	r3, [pc, #284]	; (80058a4 <OS_Dbg_Init+0x1b4>)
 8005788:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_QFlushEn;
 800578a:	4b47      	ldr	r3, [pc, #284]	; (80058a8 <OS_Dbg_Init+0x1b8>)
 800578c:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_QPendAbortEn;
 800578e:	4b47      	ldr	r3, [pc, #284]	; (80058ac <OS_Dbg_Init+0x1bc>)
 8005790:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_QSize;
 8005792:	4b47      	ldr	r3, [pc, #284]	; (80058b0 <OS_Dbg_Init+0x1c0>)
 8005794:	607b      	str	r3, [r7, #4]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_SchedRoundRobinEn;
 8005796:	4b47      	ldr	r3, [pc, #284]	; (80058b4 <OS_Dbg_Init+0x1c4>)
 8005798:	607b      	str	r3, [r7, #4]

    p_temp16 = (CPU_INT16U const *)&OSDbg_Sem;
 800579a:	4b47      	ldr	r3, [pc, #284]	; (80058b8 <OS_Dbg_Init+0x1c8>)
 800579c:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_SemEn;
 800579e:	4b47      	ldr	r3, [pc, #284]	; (80058bc <OS_Dbg_Init+0x1cc>)
 80057a0:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_SEM_EN) > 0u
    p_temp08 = (CPU_INT08U const *)&OSDbg_SemDelEn;
 80057a2:	4b47      	ldr	r3, [pc, #284]	; (80058c0 <OS_Dbg_Init+0x1d0>)
 80057a4:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_SemPendAbortEn;
 80057a6:	4b47      	ldr	r3, [pc, #284]	; (80058c4 <OS_Dbg_Init+0x1d4>)
 80057a8:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_SemSetEn;
 80057aa:	4b47      	ldr	r3, [pc, #284]	; (80058c8 <OS_Dbg_Init+0x1d8>)
 80057ac:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_SemSize;
 80057ae:	4b47      	ldr	r3, [pc, #284]	; (80058cc <OS_Dbg_Init+0x1dc>)
 80057b0:	607b      	str	r3, [r7, #4]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_RdyList;
 80057b2:	4b47      	ldr	r3, [pc, #284]	; (80058d0 <OS_Dbg_Init+0x1e0>)
 80057b4:	607b      	str	r3, [r7, #4]
    p_temp32 = (CPU_INT32U const *)&OSDbg_RdyListSize;
 80057b6:	4b47      	ldr	r3, [pc, #284]	; (80058d4 <OS_Dbg_Init+0x1e4>)
 80057b8:	60bb      	str	r3, [r7, #8]

    p_temp16 = (CPU_INT16U const *)&OSDbg_StkWidth;
 80057ba:	4b47      	ldr	r3, [pc, #284]	; (80058d8 <OS_Dbg_Init+0x1e8>)
 80057bc:	607b      	str	r3, [r7, #4]

    p_temp08 = (CPU_INT08U const *)&OSDbg_StatTaskEn;
 80057be:	4b47      	ldr	r3, [pc, #284]	; (80058dc <OS_Dbg_Init+0x1ec>)
 80057c0:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_StatTaskStkChkEn;
 80057c2:	4b47      	ldr	r3, [pc, #284]	; (80058e0 <OS_Dbg_Init+0x1f0>)
 80057c4:	60fb      	str	r3, [r7, #12]

    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskChangePrioEn;
 80057c6:	4b47      	ldr	r3, [pc, #284]	; (80058e4 <OS_Dbg_Init+0x1f4>)
 80057c8:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskDelEn;
 80057ca:	4b47      	ldr	r3, [pc, #284]	; (80058e8 <OS_Dbg_Init+0x1f8>)
 80057cc:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskQEn;
 80057ce:	4b47      	ldr	r3, [pc, #284]	; (80058ec <OS_Dbg_Init+0x1fc>)
 80057d0:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskQPendAbortEn;
 80057d2:	4b47      	ldr	r3, [pc, #284]	; (80058f0 <OS_Dbg_Init+0x200>)
 80057d4:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskProfileEn;
 80057d6:	4b47      	ldr	r3, [pc, #284]	; (80058f4 <OS_Dbg_Init+0x204>)
 80057d8:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_TaskRegTblSize;
 80057da:	4b47      	ldr	r3, [pc, #284]	; (80058f8 <OS_Dbg_Init+0x208>)
 80057dc:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskSemPendAbortEn;
 80057de:	4b47      	ldr	r3, [pc, #284]	; (80058fc <OS_Dbg_Init+0x20c>)
 80057e0:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskSuspendEn;
 80057e2:	4b47      	ldr	r3, [pc, #284]	; (8005900 <OS_Dbg_Init+0x210>)
 80057e4:	60fb      	str	r3, [r7, #12]

    p_temp16 = (CPU_INT16U const *)&OSDbg_TCBSize;
 80057e6:	4b47      	ldr	r3, [pc, #284]	; (8005904 <OS_Dbg_Init+0x214>)
 80057e8:	607b      	str	r3, [r7, #4]

    p_temp16 = (CPU_INT16U const *)&OSDbg_TickListSize;
 80057ea:	4b47      	ldr	r3, [pc, #284]	; (8005908 <OS_Dbg_Init+0x218>)
 80057ec:	607b      	str	r3, [r7, #4]

    p_temp08 = (CPU_INT08U const *)&OSDbg_TimeDlyHMSMEn;
 80057ee:	4b47      	ldr	r3, [pc, #284]	; (800590c <OS_Dbg_Init+0x21c>)
 80057f0:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TimeDlyResumeEn;
 80057f2:	4b47      	ldr	r3, [pc, #284]	; (8005910 <OS_Dbg_Init+0x220>)
 80057f4:	60fb      	str	r3, [r7, #12]


    p_temp16 = (CPU_INT16U const *)&OSDbg_Tmr;
 80057f6:	4b47      	ldr	r3, [pc, #284]	; (8005914 <OS_Dbg_Init+0x224>)
 80057f8:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TmrEn;
 80057fa:	4b47      	ldr	r3, [pc, #284]	; (8005918 <OS_Dbg_Init+0x228>)
 80057fc:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_TMR_EN) > 0u
    p_temp08 = (CPU_INT08U const *)&OSDbg_TmrDelEn;
 80057fe:	4b47      	ldr	r3, [pc, #284]	; (800591c <OS_Dbg_Init+0x22c>)
 8005800:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_TmrSize;
 8005802:	4b47      	ldr	r3, [pc, #284]	; (8005920 <OS_Dbg_Init+0x230>)
 8005804:	607b      	str	r3, [r7, #4]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_VersionNbr;
 8005806:	4b47      	ldr	r3, [pc, #284]	; (8005924 <OS_Dbg_Init+0x234>)
 8005808:	607b      	str	r3, [r7, #4]

    p_temp08 = p_temp08;                                     /* Prevent compiler warning for not using 'p_temp'        */
    p_temp16 = p_temp16;
    p_temp32 = p_temp32;
}
 800580a:	bf00      	nop
 800580c:	3714      	adds	r7, #20
 800580e:	46bd      	mov	sp, r7
 8005810:	bc80      	pop	{r7}
 8005812:	4770      	bx	lr
 8005814:	0800e63c 	.word	0x0800e63c
 8005818:	0800e7a4 	.word	0x0800e7a4
 800581c:	0800e63d 	.word	0x0800e63d
 8005820:	0800e63e 	.word	0x0800e63e
 8005824:	0800e640 	.word	0x0800e640
 8005828:	0800e644 	.word	0x0800e644
 800582c:	0800e648 	.word	0x0800e648
 8005830:	0800e645 	.word	0x0800e645
 8005834:	0800e670 	.word	0x0800e670
 8005838:	0800e671 	.word	0x0800e671
 800583c:	0800e672 	.word	0x0800e672
 8005840:	0800e674 	.word	0x0800e674
 8005844:	0800e676 	.word	0x0800e676
 8005848:	0800e678 	.word	0x0800e678
 800584c:	0800e67c 	.word	0x0800e67c
 8005850:	0800e69c 	.word	0x0800e69c
 8005854:	0800e69e 	.word	0x0800e69e
 8005858:	0800e6a0 	.word	0x0800e6a0
 800585c:	0800e6a2 	.word	0x0800e6a2
 8005860:	0800e6a4 	.word	0x0800e6a4
 8005864:	0800e6a6 	.word	0x0800e6a6
 8005868:	0800e6a8 	.word	0x0800e6a8
 800586c:	0800e6d8 	.word	0x0800e6d8
 8005870:	0800e6d9 	.word	0x0800e6d9
 8005874:	0800e6da 	.word	0x0800e6da
 8005878:	0800e6dc 	.word	0x0800e6dc
 800587c:	0800e6de 	.word	0x0800e6de
 8005880:	0800e6df 	.word	0x0800e6df
 8005884:	0800e6e0 	.word	0x0800e6e0
 8005888:	0800e6e2 	.word	0x0800e6e2
 800588c:	0800e6e4 	.word	0x0800e6e4
 8005890:	0800e6e6 	.word	0x0800e6e6
 8005894:	0800e6e8 	.word	0x0800e6e8
 8005898:	0800e6ea 	.word	0x0800e6ea
 800589c:	0800e6ec 	.word	0x0800e6ec
 80058a0:	0800e71c 	.word	0x0800e71c
 80058a4:	0800e71d 	.word	0x0800e71d
 80058a8:	0800e71e 	.word	0x0800e71e
 80058ac:	0800e71f 	.word	0x0800e71f
 80058b0:	0800e720 	.word	0x0800e720
 80058b4:	0800e722 	.word	0x0800e722
 80058b8:	0800e724 	.word	0x0800e724
 80058bc:	0800e74c 	.word	0x0800e74c
 80058c0:	0800e74d 	.word	0x0800e74d
 80058c4:	0800e74e 	.word	0x0800e74e
 80058c8:	0800e74f 	.word	0x0800e74f
 80058cc:	0800e750 	.word	0x0800e750
 80058d0:	0800e752 	.word	0x0800e752
 80058d4:	0800e754 	.word	0x0800e754
 80058d8:	0800e758 	.word	0x0800e758
 80058dc:	0800e759 	.word	0x0800e759
 80058e0:	0800e75a 	.word	0x0800e75a
 80058e4:	0800e75b 	.word	0x0800e75b
 80058e8:	0800e75c 	.word	0x0800e75c
 80058ec:	0800e75d 	.word	0x0800e75d
 80058f0:	0800e75e 	.word	0x0800e75e
 80058f4:	0800e75f 	.word	0x0800e75f
 80058f8:	0800e760 	.word	0x0800e760
 80058fc:	0800e762 	.word	0x0800e762
 8005900:	0800e763 	.word	0x0800e763
 8005904:	0800e764 	.word	0x0800e764
 8005908:	0800e766 	.word	0x0800e766
 800590c:	0800e768 	.word	0x0800e768
 8005910:	0800e769 	.word	0x0800e769
 8005914:	0800e76c 	.word	0x0800e76c
 8005918:	0800e79c 	.word	0x0800e79c
 800591c:	0800e79d 	.word	0x0800e79d
 8005920:	0800e79e 	.word	0x0800e79e
 8005924:	0800e7a0 	.word	0x0800e7a0

08005928 <OSMemCreate>:
                   CPU_CHAR     *p_name,
                   void         *p_addr,
                   OS_MEM_QTY    n_blks,
                   OS_MEM_SIZE   blk_size,
                   OS_ERR       *p_err)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b08a      	sub	sp, #40	; 0x28
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
 8005934:	807b      	strh	r3, [r7, #2]
#endif
    OS_MEM_QTY     i;
    OS_MEM_QTY     loops;
    CPU_INT08U    *p_blk;
    void         **p_link;
    CPU_SR_ALLOC();
 8005936:	2300      	movs	r3, #0
 8005938:	61bb      	str	r3, [r7, #24]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 800593a:	4b40      	ldr	r3, [pc, #256]	; (8005a3c <OSMemCreate+0x114>)
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d004      	beq.n	800594c <OSMemCreate+0x24>
       *p_err = OS_ERR_MEM_CREATE_ISR;
 8005942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005944:	f245 62b9 	movw	r2, #22201	; 0x56b9
 8005948:	801a      	strh	r2, [r3, #0]
        return;
 800594a:	e074      	b.n	8005a36 <OSMemCreate+0x10e>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_addr == (void *)0) {                              /* Must pass a valid address for the memory part.         */
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d104      	bne.n	800595c <OSMemCreate+0x34>
       *p_err   = OS_ERR_MEM_INVALID_P_ADDR;
 8005952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005954:	f245 62bb 	movw	r2, #22203	; 0x56bb
 8005958:	801a      	strh	r2, [r3, #0]
        return;
 800595a:	e06c      	b.n	8005a36 <OSMemCreate+0x10e>
    }
    if (n_blks < (OS_MEM_QTY)2) {                           /* Must have at least 2 blocks per partition              */
 800595c:	887b      	ldrh	r3, [r7, #2]
 800595e:	2b01      	cmp	r3, #1
 8005960:	d804      	bhi.n	800596c <OSMemCreate+0x44>
       *p_err = OS_ERR_MEM_INVALID_BLKS;
 8005962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005964:	f245 62bc 	movw	r2, #22204	; 0x56bc
 8005968:	801a      	strh	r2, [r3, #0]
        return;
 800596a:	e064      	b.n	8005a36 <OSMemCreate+0x10e>
    }
    if (blk_size < sizeof(void *)) {                        /* Must contain space for at least a pointer              */
 800596c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800596e:	2b03      	cmp	r3, #3
 8005970:	d804      	bhi.n	800597c <OSMemCreate+0x54>
       *p_err = OS_ERR_MEM_INVALID_SIZE;
 8005972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005974:	f245 62c1 	movw	r2, #22209	; 0x56c1
 8005978:	801a      	strh	r2, [r3, #0]
        return;
 800597a:	e05c      	b.n	8005a36 <OSMemCreate+0x10e>
    }
    align_msk = sizeof(void *) - 1u;
 800597c:	2303      	movs	r3, #3
 800597e:	617b      	str	r3, [r7, #20]
    if (align_msk > 0u) {
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d013      	beq.n	80059ae <OSMemCreate+0x86>
        if (((CPU_ADDR)p_addr & align_msk) != 0u){          /* Must be pointer size aligned                           */
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	4013      	ands	r3, r2
 800598c:	2b00      	cmp	r3, #0
 800598e:	d004      	beq.n	800599a <OSMemCreate+0x72>
           *p_err = OS_ERR_MEM_INVALID_P_ADDR;
 8005990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005992:	f245 62bb 	movw	r2, #22203	; 0x56bb
 8005996:	801a      	strh	r2, [r3, #0]
            return;
 8005998:	e04d      	b.n	8005a36 <OSMemCreate+0x10e>
        }
        if ((blk_size & align_msk) != 0u) {                 /* Block size must be a multiple address size             */
 800599a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	4013      	ands	r3, r2
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d004      	beq.n	80059ae <OSMemCreate+0x86>
           *p_err = OS_ERR_MEM_INVALID_SIZE;
 80059a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a6:	f245 62c1 	movw	r2, #22209	; 0x56c1
 80059aa:	801a      	strh	r2, [r3, #0]
            return;
 80059ac:	e043      	b.n	8005a36 <OSMemCreate+0x10e>
        }
    }
#endif

    p_link = (void **)p_addr;                               /* Create linked list of free memory blocks               */
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	61fb      	str	r3, [r7, #28]
    p_blk  = (CPU_INT08U *)p_addr;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	623b      	str	r3, [r7, #32]
    loops  = n_blks - 1u;
 80059b6:	887b      	ldrh	r3, [r7, #2]
 80059b8:	3b01      	subs	r3, #1
 80059ba:	827b      	strh	r3, [r7, #18]
    for (i = 0u; i < loops; i++) {
 80059bc:	2300      	movs	r3, #0
 80059be:	84fb      	strh	r3, [r7, #38]	; 0x26
 80059c0:	e00b      	b.n	80059da <OSMemCreate+0xb2>
        p_blk +=  blk_size;
 80059c2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80059c4:	6a3a      	ldr	r2, [r7, #32]
 80059c6:	4413      	add	r3, r2
 80059c8:	623b      	str	r3, [r7, #32]
       *p_link = (void  *)p_blk;                            /* Save pointer to NEXT block in CURRENT block            */
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	6a3a      	ldr	r2, [r7, #32]
 80059ce:	601a      	str	r2, [r3, #0]
        p_link = (void **)(void *)p_blk;                    /* Position     to NEXT block                             */
 80059d0:	6a3b      	ldr	r3, [r7, #32]
 80059d2:	61fb      	str	r3, [r7, #28]
#endif

    p_link = (void **)p_addr;                               /* Create linked list of free memory blocks               */
    p_blk  = (CPU_INT08U *)p_addr;
    loops  = n_blks - 1u;
    for (i = 0u; i < loops; i++) {
 80059d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80059d6:	3301      	adds	r3, #1
 80059d8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80059da:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80059dc:	8a7b      	ldrh	r3, [r7, #18]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d3ef      	bcc.n	80059c2 <OSMemCreate+0x9a>
        p_blk +=  blk_size;
       *p_link = (void  *)p_blk;                            /* Save pointer to NEXT block in CURRENT block            */
        p_link = (void **)(void *)p_blk;                    /* Position     to NEXT block                             */
    }
   *p_link             = (void *)0;                         /* Last memory block points to NULL                       */
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	2200      	movs	r2, #0
 80059e6:	601a      	str	r2, [r3, #0]

    OS_CRITICAL_ENTER();
 80059e8:	f7fa fc7a 	bl	80002e0 <CPU_SR_Save>
 80059ec:	61b8      	str	r0, [r7, #24]
#if OS_OBJ_TYPE_REQ > 0u
    p_mem->Type        = OS_OBJ_TYPE_MEM;                   /* Set the type of object                                 */
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	4a13      	ldr	r2, [pc, #76]	; (8005a40 <OSMemCreate+0x118>)
 80059f2:	601a      	str	r2, [r3, #0]
#endif
#if OS_CFG_DBG_EN > 0u
    p_mem->NamePtr     = p_name;                            /* Save name of memory partition                          */
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	609a      	str	r2, [r3, #8]
#else
    (void)&p_name;
#endif
    p_mem->AddrPtr     = p_addr;                            /* Store start address of memory partition                */
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	605a      	str	r2, [r3, #4]
    p_mem->FreeListPtr = p_addr;                            /* Initialize pointer to pool of free blocks              */
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	60da      	str	r2, [r3, #12]
    p_mem->NbrFree     = n_blks;                            /* Store number of free blocks in MCB                     */
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	887a      	ldrh	r2, [r7, #2]
 8005a0a:	829a      	strh	r2, [r3, #20]
    p_mem->NbrMax      = n_blks;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	887a      	ldrh	r2, [r7, #2]
 8005a10:	825a      	strh	r2, [r3, #18]
    p_mem->BlkSize     = blk_size;                          /* Store block size of each memory blocks                 */
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8005a16:	821a      	strh	r2, [r3, #16]

#if OS_CFG_DBG_EN > 0u
    OS_MemDbgListAdd(p_mem);
 8005a18:	68f8      	ldr	r0, [r7, #12]
 8005a1a:	f000 f88d 	bl	8005b38 <OS_MemDbgListAdd>
#endif

    OSMemQty++;
 8005a1e:	4b09      	ldr	r3, [pc, #36]	; (8005a44 <OSMemCreate+0x11c>)
 8005a20:	881b      	ldrh	r3, [r3, #0]
 8005a22:	3301      	adds	r3, #1
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	4b07      	ldr	r3, [pc, #28]	; (8005a44 <OSMemCreate+0x11c>)
 8005a28:	801a      	strh	r2, [r3, #0]

#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_MEM_CREATE(p_mem, p_name);                     /* Record the event.                                      */
#endif

    OS_CRITICAL_EXIT_NO_SCHED();
 8005a2a:	69b8      	ldr	r0, [r7, #24]
 8005a2c:	f7fa fc5c 	bl	80002e8 <CPU_SR_Restore>
   *p_err = OS_ERR_NONE;
 8005a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a32:	2200      	movs	r2, #0
 8005a34:	801a      	strh	r2, [r3, #0]
}
 8005a36:	3728      	adds	r7, #40	; 0x28
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	200026d8 	.word	0x200026d8
 8005a40:	204d454d 	.word	0x204d454d
 8005a44:	200028d2 	.word	0x200028d2

08005a48 <OSMemGet>:
************************************************************************************************************************
*/

void  *OSMemGet (OS_MEM  *p_mem,
                 OS_ERR  *p_err)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
    void    *p_blk;
    CPU_SR_ALLOC();
 8005a52:	2300      	movs	r3, #0
 8005a54:	60fb      	str	r3, [r7, #12]
        return ((void *)0);
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_mem == (OS_MEM *)0) {                             /* Must point to a valid memory partition                 */
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d105      	bne.n	8005a68 <OSMemGet+0x20>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MEM_GET_FAILED(p_mem);                     /* Record the event.                                      */
#endif
       *p_err  = OS_ERR_MEM_INVALID_P_MEM;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	f245 62bf 	movw	r2, #22207	; 0x56bf
 8005a62:	801a      	strh	r2, [r3, #0]
        return ((void *)0);
 8005a64:	2300      	movs	r3, #0
 8005a66:	e023      	b.n	8005ab0 <OSMemGet+0x68>
    }
#endif

    CPU_CRITICAL_ENTER();
 8005a68:	f7fa fc3a 	bl	80002e0 <CPU_SR_Save>
 8005a6c:	60f8      	str	r0, [r7, #12]
    if (p_mem->NbrFree == (OS_MEM_QTY)0) {                  /* See if there are any free memory blocks                */
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	8a9b      	ldrh	r3, [r3, #20]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d108      	bne.n	8005a88 <OSMemGet+0x40>
        CPU_CRITICAL_EXIT();
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f7fa fc36 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MEM_GET_FAILED(p_mem);                     /* Record the event.                                      */
#endif
       *p_err = OS_ERR_MEM_NO_FREE_BLKS;                    /* No,  Notify caller of empty memory partition           */
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	f245 62c2 	movw	r2, #22210	; 0x56c2
 8005a82:	801a      	strh	r2, [r3, #0]
        return ((void *)0);                                 /*      Return NULL pointer to caller                     */
 8005a84:	2300      	movs	r3, #0
 8005a86:	e013      	b.n	8005ab0 <OSMemGet+0x68>
    }
    p_blk              = p_mem->FreeListPtr;                /* Yes, point to next free memory block                   */
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	60bb      	str	r3, [r7, #8]
    p_mem->FreeListPtr = *(void **)p_blk;                   /*      Adjust pointer to new free list                   */
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	60da      	str	r2, [r3, #12]
    p_mem->NbrFree--;                                       /*      One less memory block in this partition           */
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	8a9b      	ldrh	r3, [r3, #20]
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	829a      	strh	r2, [r3, #20]
    CPU_CRITICAL_EXIT();
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	f7fa fc20 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_MEM_GET(p_mem);                                /* Record the event.                                      */
#endif
   *p_err = OS_ERR_NONE;                                    /*      No error                                          */
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	801a      	strh	r2, [r3, #0]
    return (p_blk);                                         /*      Return memory block to caller                     */
 8005aae:	68bb      	ldr	r3, [r7, #8]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <OSMemPut>:
*/

void  OSMemPut (OS_MEM  *p_mem,
                void    *p_blk,
                OS_ERR  *p_err)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
    CPU_SR_ALLOC();
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_mem == (OS_MEM *)0) {                             /* Must point to a valid memory partition                 */
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d104      	bne.n	8005ad8 <OSMemPut+0x20>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MEM_PUT_FAILED(p_mem);                     /* Record the event.                                      */
#endif
       *p_err  = OS_ERR_MEM_INVALID_P_MEM;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f245 62bf 	movw	r2, #22207	; 0x56bf
 8005ad4:	801a      	strh	r2, [r3, #0]
        return;
 8005ad6:	e02b      	b.n	8005b30 <OSMemPut+0x78>
    }
    if (p_blk == (void *)0) {                               /* Must release a valid block                             */
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d104      	bne.n	8005ae8 <OSMemPut+0x30>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MEM_PUT_FAILED(p_mem);                     /* Record the event.                                      */
#endif
       *p_err  = OS_ERR_MEM_INVALID_P_BLK;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f245 62be 	movw	r2, #22206	; 0x56be
 8005ae4:	801a      	strh	r2, [r3, #0]
        return;
 8005ae6:	e023      	b.n	8005b30 <OSMemPut+0x78>
    }
#endif

    CPU_CRITICAL_ENTER();
 8005ae8:	f7fa fbfa 	bl	80002e0 <CPU_SR_Save>
 8005aec:	6178      	str	r0, [r7, #20]
    if (p_mem->NbrFree >= p_mem->NbrMax) {                  /* Make sure all blocks not already returned              */
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	8a9a      	ldrh	r2, [r3, #20]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	8a5b      	ldrh	r3, [r3, #18]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d307      	bcc.n	8005b0a <OSMemPut+0x52>
        CPU_CRITICAL_EXIT();
 8005afa:	6978      	ldr	r0, [r7, #20]
 8005afc:	f7fa fbf4 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
        TRACE_OS_MEM_PUT_FAILED(p_mem);                     /* Record the event.                                      */
#endif
       *p_err = OS_ERR_MEM_FULL;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f245 62ba 	movw	r2, #22202	; 0x56ba
 8005b06:	801a      	strh	r2, [r3, #0]
        return;
 8005b08:	e012      	b.n	8005b30 <OSMemPut+0x78>
    }
    *(void **)p_blk    = p_mem->FreeListPtr;                /* Insert released block into free block list             */
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	68da      	ldr	r2, [r3, #12]
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	601a      	str	r2, [r3, #0]
    p_mem->FreeListPtr = p_blk;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	68ba      	ldr	r2, [r7, #8]
 8005b16:	60da      	str	r2, [r3, #12]
    p_mem->NbrFree++;                                       /* One more memory block in this partition                */
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	8a9b      	ldrh	r3, [r3, #20]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	829a      	strh	r2, [r3, #20]
    CPU_CRITICAL_EXIT();
 8005b24:	6978      	ldr	r0, [r7, #20]
 8005b26:	f7fa fbdf 	bl	80002e8 <CPU_SR_Restore>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_MEM_PUT(p_mem);                                /* Record the event.                                      */
#endif
   *p_err              = OS_ERR_NONE;                       /* Notify caller that memory block was released           */
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	801a      	strh	r2, [r3, #0]
}
 8005b30:	3718      	adds	r7, #24
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop

08005b38 <OS_MemDbgListAdd>:
************************************************************************************************************************
*/

#if OS_CFG_DBG_EN > 0u
void  OS_MemDbgListAdd (OS_MEM  *p_mem)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
    p_mem->DbgPrevPtr               = (OS_MEM *)0;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	619a      	str	r2, [r3, #24]
    if (OSMemDbgListPtr == (OS_MEM *)0) {
 8005b46:	4b0c      	ldr	r3, [pc, #48]	; (8005b78 <OS_MemDbgListAdd+0x40>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d103      	bne.n	8005b56 <OS_MemDbgListAdd+0x1e>
        p_mem->DbgNextPtr           = (OS_MEM *)0;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	61da      	str	r2, [r3, #28]
 8005b54:	e007      	b.n	8005b66 <OS_MemDbgListAdd+0x2e>
    } else {
        p_mem->DbgNextPtr           =  OSMemDbgListPtr;
 8005b56:	4b08      	ldr	r3, [pc, #32]	; (8005b78 <OS_MemDbgListAdd+0x40>)
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	61da      	str	r2, [r3, #28]
        OSMemDbgListPtr->DbgPrevPtr =  p_mem;
 8005b5e:	4b06      	ldr	r3, [pc, #24]	; (8005b78 <OS_MemDbgListAdd+0x40>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	619a      	str	r2, [r3, #24]
    }
    OSMemDbgListPtr                 =  p_mem;
 8005b66:	4a04      	ldr	r2, [pc, #16]	; (8005b78 <OS_MemDbgListAdd+0x40>)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6013      	str	r3, [r2, #0]
}
 8005b6c:	bf00      	nop
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bc80      	pop	{r7}
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	20002870 	.word	0x20002870

08005b7c <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_MemInit (OS_ERR  *p_err)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSMemDbgListPtr = (OS_MEM   *)0;
 8005b84:	4b06      	ldr	r3, [pc, #24]	; (8005ba0 <OS_MemInit+0x24>)
 8005b86:	2200      	movs	r2, #0
 8005b88:	601a      	str	r2, [r3, #0]
#endif

    OSMemQty        = (OS_OBJ_QTY)0;
 8005b8a:	4b06      	ldr	r3, [pc, #24]	; (8005ba4 <OS_MemInit+0x28>)
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	801a      	strh	r2, [r3, #0]
   *p_err           = OS_ERR_NONE;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	801a      	strh	r2, [r3, #0]
}
 8005b96:	bf00      	nop
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bc80      	pop	{r7}
 8005b9e:	4770      	bx	lr
 8005ba0:	20002870 	.word	0x20002870
 8005ba4:	200028d2 	.word	0x200028d2

08005ba8 <OS_TmrInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_TmrInit (OS_ERR  *p_err)
{
 8005ba8:	b590      	push	{r4, r7, lr}
 8005baa:	b08d      	sub	sp, #52	; 0x34
 8005bac:	af0a      	add	r7, sp, #40	; 0x28
 8005bae:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSTmrDbgListPtr = (OS_TMR *)0;
 8005bb0:	4b37      	ldr	r3, [pc, #220]	; (8005c90 <OS_TmrInit+0xe8>)
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	601a      	str	r2, [r3, #0]
#endif

    OSTmrListPtr        = (OS_TMR *)0;                      /* Create an empty timer list                             */
 8005bb6:	4b37      	ldr	r3, [pc, #220]	; (8005c94 <OS_TmrInit+0xec>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	601a      	str	r2, [r3, #0]
    OSTmrListEntries    = 0u;
 8005bbc:	4b36      	ldr	r3, [pc, #216]	; (8005c98 <OS_TmrInit+0xf0>)
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	801a      	strh	r2, [r3, #0]

    if (OSCfg_TmrTaskRate_Hz > (OS_RATE_HZ)0) {
 8005bc2:	4b36      	ldr	r3, [pc, #216]	; (8005c9c <OS_TmrInit+0xf4>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d008      	beq.n	8005bdc <OS_TmrInit+0x34>
        OSTmrUpdateCnt  = OSCfg_TickRate_Hz / OSCfg_TmrTaskRate_Hz;
 8005bca:	4b35      	ldr	r3, [pc, #212]	; (8005ca0 <OS_TmrInit+0xf8>)
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	4b33      	ldr	r3, [pc, #204]	; (8005c9c <OS_TmrInit+0xf4>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd6:	4a33      	ldr	r2, [pc, #204]	; (8005ca4 <OS_TmrInit+0xfc>)
 8005bd8:	6013      	str	r3, [r2, #0]
 8005bda:	e007      	b.n	8005bec <OS_TmrInit+0x44>
    } else {
        OSTmrUpdateCnt  = OSCfg_TickRate_Hz / (OS_RATE_HZ)10;
 8005bdc:	4b30      	ldr	r3, [pc, #192]	; (8005ca0 <OS_TmrInit+0xf8>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a31      	ldr	r2, [pc, #196]	; (8005ca8 <OS_TmrInit+0x100>)
 8005be2:	fba2 2303 	umull	r2, r3, r2, r3
 8005be6:	08db      	lsrs	r3, r3, #3
 8005be8:	4a2e      	ldr	r2, [pc, #184]	; (8005ca4 <OS_TmrInit+0xfc>)
 8005bea:	6013      	str	r3, [r2, #0]
    }
    OSTmrUpdateCtr      = OSTmrUpdateCnt;
 8005bec:	4b2d      	ldr	r3, [pc, #180]	; (8005ca4 <OS_TmrInit+0xfc>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a2e      	ldr	r2, [pc, #184]	; (8005cac <OS_TmrInit+0x104>)
 8005bf2:	6013      	str	r3, [r2, #0]

    OSTmrTickCtr        = (OS_TICK)0;
 8005bf4:	4b2e      	ldr	r3, [pc, #184]	; (8005cb0 <OS_TmrInit+0x108>)
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	601a      	str	r2, [r3, #0]

    OSTmrTaskTimeMax    = (CPU_TS)0;
 8005bfa:	4b2e      	ldr	r3, [pc, #184]	; (8005cb4 <OS_TmrInit+0x10c>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	601a      	str	r2, [r3, #0]

#if   OS_CFG_MUTEX_EN > 0u
    OSMutexCreate(&OSTmrMutex,                              /* Use a mutex to protect the timers                      */
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	492d      	ldr	r1, [pc, #180]	; (8005cb8 <OS_TmrInit+0x110>)
 8005c04:	482d      	ldr	r0, [pc, #180]	; (8005cbc <OS_TmrInit+0x114>)
 8005c06:	f7ff faaf 	bl	8005168 <OSMutexCreate>
                  "OS Tmr Mutex", 
                  p_err);
    if (*p_err != OS_ERR_NONE) {
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	881b      	ldrh	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d139      	bne.n	8005c86 <OS_TmrInit+0xde>
        return;
    }
#endif

                                                            /* ---------------- CREATE THE TIMER TASK --------------- */
    if (OSCfg_TmrTaskStkBasePtr == (CPU_STK*)0) {
 8005c12:	4b2b      	ldr	r3, [pc, #172]	; (8005cc0 <OS_TmrInit+0x118>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d104      	bne.n	8005c24 <OS_TmrInit+0x7c>
       *p_err = OS_ERR_TMR_STK_INVALID;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f247 3247 	movw	r2, #29511	; 0x7347
 8005c20:	801a      	strh	r2, [r3, #0]
        return;
 8005c22:	e031      	b.n	8005c88 <OS_TmrInit+0xe0>
    }

    if (OSCfg_TmrTaskStkSize < OSCfg_StkSizeMin) {
 8005c24:	4b27      	ldr	r3, [pc, #156]	; (8005cc4 <OS_TmrInit+0x11c>)
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	4b27      	ldr	r3, [pc, #156]	; (8005cc8 <OS_TmrInit+0x120>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d204      	bcs.n	8005c3a <OS_TmrInit+0x92>
       *p_err = OS_ERR_TMR_STK_SIZE_INVALID;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f247 3248 	movw	r2, #29512	; 0x7348
 8005c36:	801a      	strh	r2, [r3, #0]
        return;
 8005c38:	e026      	b.n	8005c88 <OS_TmrInit+0xe0>
    }

    if (OSCfg_TmrTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {
 8005c3a:	4b24      	ldr	r3, [pc, #144]	; (8005ccc <OS_TmrInit+0x124>)
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	2b1e      	cmp	r3, #30
 8005c40:	d904      	bls.n	8005c4c <OS_TmrInit+0xa4>
       *p_err = OS_ERR_TMR_PRIO_INVALID;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f247 3246 	movw	r2, #29510	; 0x7346
 8005c48:	801a      	strh	r2, [r3, #0]
        return;
 8005c4a:	e01d      	b.n	8005c88 <OS_TmrInit+0xe0>
    }

    OSTaskCreate((OS_TCB     *)&OSTmrTaskTCB,
 8005c4c:	4b1f      	ldr	r3, [pc, #124]	; (8005ccc <OS_TmrInit+0x124>)
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	4a1b      	ldr	r2, [pc, #108]	; (8005cc0 <OS_TmrInit+0x118>)
 8005c52:	6812      	ldr	r2, [r2, #0]
 8005c54:	491e      	ldr	r1, [pc, #120]	; (8005cd0 <OS_TmrInit+0x128>)
 8005c56:	6809      	ldr	r1, [r1, #0]
 8005c58:	481a      	ldr	r0, [pc, #104]	; (8005cc4 <OS_TmrInit+0x11c>)
 8005c5a:	6800      	ldr	r0, [r0, #0]
 8005c5c:	687c      	ldr	r4, [r7, #4]
 8005c5e:	9408      	str	r4, [sp, #32]
 8005c60:	240b      	movs	r4, #11
 8005c62:	9407      	str	r4, [sp, #28]
 8005c64:	2400      	movs	r4, #0
 8005c66:	9406      	str	r4, [sp, #24]
 8005c68:	2400      	movs	r4, #0
 8005c6a:	9405      	str	r4, [sp, #20]
 8005c6c:	2400      	movs	r4, #0
 8005c6e:	9404      	str	r4, [sp, #16]
 8005c70:	9003      	str	r0, [sp, #12]
 8005c72:	9102      	str	r1, [sp, #8]
 8005c74:	9201      	str	r2, [sp, #4]
 8005c76:	9300      	str	r3, [sp, #0]
 8005c78:	2300      	movs	r3, #0
 8005c7a:	4a16      	ldr	r2, [pc, #88]	; (8005cd4 <OS_TmrInit+0x12c>)
 8005c7c:	4916      	ldr	r1, [pc, #88]	; (8005cd8 <OS_TmrInit+0x130>)
 8005c7e:	4817      	ldr	r0, [pc, #92]	; (8005cdc <OS_TmrInit+0x134>)
 8005c80:	f7fc fbfe 	bl	8002480 <OSTaskCreate>
 8005c84:	e000      	b.n	8005c88 <OS_TmrInit+0xe0>
#if   OS_CFG_MUTEX_EN > 0u
    OSMutexCreate(&OSTmrMutex,                              /* Use a mutex to protect the timers                      */
                  "OS Tmr Mutex", 
                  p_err);
    if (*p_err != OS_ERR_NONE) {
        return;
 8005c86:	bf00      	nop
                 (OS_MSG_QTY  )0,
                 (OS_TICK     )0,
                 (void       *)0,
                 (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR | OS_OPT_TASK_NO_TLS),
                 (OS_ERR     *)p_err);
}
 8005c88:	370c      	adds	r7, #12
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd90      	pop	{r4, r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	2000299c 	.word	0x2000299c
 8005c94:	20002998 	.word	0x20002998
 8005c98:	200029a4 	.word	0x200029a4
 8005c9c:	0800e62c 	.word	0x0800e62c
 8005ca0:	0800e614 	.word	0x0800e614
 8005ca4:	200029a8 	.word	0x200029a8
 8005ca8:	cccccccd 	.word	0xcccccccd
 8005cac:	200029b8 	.word	0x200029b8
 8005cb0:	200026a4 	.word	0x200026a4
 8005cb4:	200026c4 	.word	0x200026c4
 8005cb8:	0800e550 	.word	0x0800e550
 8005cbc:	20002874 	.word	0x20002874
 8005cc0:	0800e630 	.word	0x0800e630
 8005cc4:	0800e638 	.word	0x0800e638
 8005cc8:	0800e610 	.word	0x0800e610
 8005ccc:	0800e628 	.word	0x0800e628
 8005cd0:	0800e634 	.word	0x0800e634
 8005cd4:	08005d69 	.word	0x08005d69
 8005cd8:	0800e560 	.word	0x0800e560
 8005cdc:	200026dc 	.word	0x200026dc

08005ce0 <OS_TmrResetPeak>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TmrResetPeak (void)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	af00      	add	r7, sp, #0
}
 8005ce4:	bf00      	nop
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bc80      	pop	{r7}
 8005cea:	4770      	bx	lr

08005cec <OS_TmrUnlink>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_TmrUnlink (OS_TMR  *p_tmr)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b085      	sub	sp, #20
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
    OS_TMR  *p_tmr1;
    OS_TMR  *p_tmr2;



    if (OSTmrListPtr == p_tmr) {                            /* See if timer to remove is at the beginning of list     */
 8005cf4:	4b1a      	ldr	r3, [pc, #104]	; (8005d60 <OS_TmrUnlink+0x74>)
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d10c      	bne.n	8005d18 <OS_TmrUnlink+0x2c>
        p_tmr1       = (OS_TMR *)p_tmr->NextPtr;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	60fb      	str	r3, [r7, #12]
        OSTmrListPtr = (OS_TMR *)p_tmr1;
 8005d04:	4a16      	ldr	r2, [pc, #88]	; (8005d60 <OS_TmrUnlink+0x74>)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6013      	str	r3, [r2, #0]
        if (p_tmr1 != (OS_TMR *)0) {
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d012      	beq.n	8005d36 <OS_TmrUnlink+0x4a>
            p_tmr1->PrevPtr = (OS_TMR *)0;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	615a      	str	r2, [r3, #20]
 8005d16:	e00e      	b.n	8005d36 <OS_TmrUnlink+0x4a>
        }
    } else {
        p_tmr1          = (OS_TMR *)p_tmr->PrevPtr;         /* Remove timer from somewhere in the list                */
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	695b      	ldr	r3, [r3, #20]
 8005d1c:	60fb      	str	r3, [r7, #12]
        p_tmr2          = (OS_TMR *)p_tmr->NextPtr;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	60bb      	str	r3, [r7, #8]
        p_tmr1->NextPtr = p_tmr2;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	68ba      	ldr	r2, [r7, #8]
 8005d28:	611a      	str	r2, [r3, #16]
        if (p_tmr2 != (OS_TMR *)0) {
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d002      	beq.n	8005d36 <OS_TmrUnlink+0x4a>
            p_tmr2->PrevPtr = (OS_TMR *)p_tmr1;
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	615a      	str	r2, [r3, #20]
        }
    }
    p_tmr->State   = OS_TMR_STATE_STOPPED;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    p_tmr->NextPtr = (OS_TMR *)0;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	611a      	str	r2, [r3, #16]
    p_tmr->PrevPtr = (OS_TMR *)0;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	615a      	str	r2, [r3, #20]
    OSTmrListEntries--;
 8005d4a:	4b06      	ldr	r3, [pc, #24]	; (8005d64 <OS_TmrUnlink+0x78>)
 8005d4c:	881b      	ldrh	r3, [r3, #0]
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	4b04      	ldr	r3, [pc, #16]	; (8005d64 <OS_TmrUnlink+0x78>)
 8005d54:	801a      	strh	r2, [r3, #0]
}
 8005d56:	bf00      	nop
 8005d58:	3714      	adds	r7, #20
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bc80      	pop	{r7}
 8005d5e:	4770      	bx	lr
 8005d60:	20002998 	.word	0x20002998
 8005d64:	200029a4 	.word	0x200029a4

08005d68 <OS_TmrTask>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_TmrTask (void  *p_arg)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b08a      	sub	sp, #40	; 0x28
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]



    (void)&p_arg;                                                /* Not using 'p_arg', prevent compiler warning       */
    while (DEF_ON) {
        (void)OSTaskSemPend((OS_TICK )0,                         /* Wait for signal indicating time to update tmrs    */
 8005d70:	f107 0312 	add.w	r3, r7, #18
 8005d74:	f107 020c 	add.w	r2, r7, #12
 8005d78:	2100      	movs	r1, #0
 8005d7a:	2000      	movs	r0, #0
 8005d7c:	f7fc fcb0 	bl	80026e0 <OSTaskSemPend>
                            (OS_OPT  )OS_OPT_PEND_BLOCKING,
                            (CPU_TS *)&ts,
                            (OS_ERR *)&err);


        OS_TmrLock();
 8005d80:	f000 f85a 	bl	8005e38 <OS_TmrLock>
        ts_start = OS_TS_GET();
 8005d84:	f001 fbf2 	bl	800756c <CPU_TS_TmrRd>
 8005d88:	6238      	str	r0, [r7, #32]
        OSTmrTickCtr++;                                          /* Increment the current time                        */
 8005d8a:	4b28      	ldr	r3, [pc, #160]	; (8005e2c <OS_TmrTask+0xc4>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	4a26      	ldr	r2, [pc, #152]	; (8005e2c <OS_TmrTask+0xc4>)
 8005d92:	6013      	str	r3, [r2, #0]
        p_tmr    = OSTmrListPtr;
 8005d94:	4b26      	ldr	r3, [pc, #152]	; (8005e30 <OS_TmrTask+0xc8>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	627b      	str	r3, [r7, #36]	; 0x24
        while (p_tmr != (OS_TMR *)0) {                           /* Update all the timers in the list                 */
 8005d9a:	e033      	b.n	8005e04 <OS_TmrTask+0x9c>
            OSSchedLock(&err);
 8005d9c:	f107 0312 	add.w	r3, r7, #18
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7fd fcf9 	bl	8003798 <OSSchedLock>
            (void)&err;
            p_tmr_next = p_tmr->NextPtr;
 8005da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	61bb      	str	r3, [r7, #24]
            p_tmr->Remain--;
 8005dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	1e5a      	subs	r2, r3, #1
 8005db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db4:	619a      	str	r2, [r3, #24]
            if (p_tmr->Remain == 0) {
 8005db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d11b      	bne.n	8005df6 <OS_TmrTask+0x8e>
                if (p_tmr->Opt == OS_OPT_TMR_PERIODIC) {
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d104      	bne.n	8005dd0 <OS_TmrTask+0x68>
                    p_tmr->Remain = p_tmr->Period;               /* Reload the time remaining                         */
 8005dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc8:	6a1a      	ldr	r2, [r3, #32]
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	619a      	str	r2, [r3, #24]
 8005dce:	e006      	b.n	8005dde <OS_TmrTask+0x76>
                } else {
                    OS_TmrUnlink(p_tmr);                         /* Remove from list                                  */
 8005dd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005dd2:	f7ff ff8b 	bl	8005cec <OS_TmrUnlink>
                    p_tmr->State = OS_TMR_STATE_COMPLETED;       /* Indicate that the timer has completed             */
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd8:	2203      	movs	r2, #3
 8005dda:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
                }
                p_fnct = p_tmr->CallbackPtr;                     /* Execute callback function if available            */
 8005dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	617b      	str	r3, [r7, #20]
                if (p_fnct != (OS_TMR_CALLBACK_PTR)0) {
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d005      	beq.n	8005df6 <OS_TmrTask+0x8e>
                    (*p_fnct)((void *)p_tmr,
 8005dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dec:	68da      	ldr	r2, [r3, #12]
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	4611      	mov	r1, r2
 8005df2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005df4:	4798      	blx	r3
                              p_tmr->CallbackPtrArg);
                }
            }
            p_tmr = p_tmr_next;
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	627b      	str	r3, [r7, #36]	; 0x24
            OSSchedUnlock(&err);
 8005dfa:	f107 0312 	add.w	r3, r7, #18
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7fd fd06 	bl	8003810 <OSSchedUnlock>

        OS_TmrLock();
        ts_start = OS_TS_GET();
        OSTmrTickCtr++;                                          /* Increment the current time                        */
        p_tmr    = OSTmrListPtr;
        while (p_tmr != (OS_TMR *)0) {                           /* Update all the timers in the list                 */
 8005e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1c8      	bne.n	8005d9c <OS_TmrTask+0x34>
            p_tmr = p_tmr_next;
            OSSchedUnlock(&err);
            (void)&err;
        }

        ts_delta = OS_TS_GET() - ts_start;                      /* Measure execution time of timer task              */
 8005e0a:	f001 fbaf 	bl	800756c <CPU_TS_TmrRd>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	6a3b      	ldr	r3, [r7, #32]
 8005e12:	1ad3      	subs	r3, r2, r3
 8005e14:	61fb      	str	r3, [r7, #28]
        OS_TmrUnlock();
 8005e16:	f000 f821 	bl	8005e5c <OS_TmrUnlock>

        if (OSTmrTaskTimeMax < ts_delta) {
 8005e1a:	4b06      	ldr	r3, [pc, #24]	; (8005e34 <OS_TmrTask+0xcc>)
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d2a5      	bcs.n	8005d70 <OS_TmrTask+0x8>
            OSTmrTaskTimeMax = ts_delta;
 8005e24:	4a03      	ldr	r2, [pc, #12]	; (8005e34 <OS_TmrTask+0xcc>)
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	6013      	str	r3, [r2, #0]
        }
    }
 8005e2a:	e7a1      	b.n	8005d70 <OS_TmrTask+0x8>
 8005e2c:	200026a4 	.word	0x200026a4
 8005e30:	20002998 	.word	0x20002998
 8005e34:	200026c4 	.word	0x200026c4

08005e38 <OS_TmrLock>:
* Note(s)    : 1) These function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

static  void  OS_TmrLock (void)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af02      	add	r7, sp, #8
    OS_ERR  err;
#if OS_CFG_MUTEX_EN > 0u
    CPU_TS  ts;


    OSMutexPend(&OSTmrMutex,                                /* Use a mutex to protect the timers                      */
 8005e3e:	463a      	mov	r2, r7
 8005e40:	1dbb      	adds	r3, r7, #6
 8005e42:	9300      	str	r3, [sp, #0]
 8005e44:	4613      	mov	r3, r2
 8005e46:	2200      	movs	r2, #0
 8005e48:	2100      	movs	r1, #0
 8005e4a:	4803      	ldr	r0, [pc, #12]	; (8005e58 <OS_TmrLock+0x20>)
 8005e4c:	f7ff f9d8 	bl	8005200 <OSMutexPend>
                &err);
#else
    OSSchedLock(&err);                                      /* Lock the scheduler to protect the timers               */
#endif
    (void)&err;
}
 8005e50:	bf00      	nop
 8005e52:	3708      	adds	r7, #8
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	20002874 	.word	0x20002874

08005e5c <OS_TmrUnlock>:




static  void  OS_TmrUnlock (void)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
    OS_ERR  err;


#if OS_CFG_MUTEX_EN > 0u
    OSMutexPost(&OSTmrMutex,                                /* Use a mutex to protect the timers                      */
 8005e62:	1dbb      	adds	r3, r7, #6
 8005e64:	461a      	mov	r2, r3
 8005e66:	2100      	movs	r1, #0
 8005e68:	4803      	ldr	r0, [pc, #12]	; (8005e78 <OS_TmrUnlock+0x1c>)
 8005e6a:	f7ff fad1 	bl	8005410 <OSMutexPost>
                &err);
#else
    OSSchedUnlock(&err);                                    /* Lock the scheduler to protect the timers               */
#endif
    (void)&err;
}
 8005e6e:	bf00      	nop
 8005e70:	3708      	adds	r7, #8
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	20002874 	.word	0x20002874

08005e7c <OSIdleTaskHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSIdleTaskHook (void)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	af00      	add	r7, sp, #0
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppIdleTaskHookPtr != (OS_APP_HOOK_VOID)0) {
 8005e80:	4b04      	ldr	r3, [pc, #16]	; (8005e94 <OSIdleTaskHook+0x18>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d002      	beq.n	8005e8e <OSIdleTaskHook+0x12>
        (*OS_AppIdleTaskHookPtr)();
 8005e88:	4b02      	ldr	r3, [pc, #8]	; (8005e94 <OSIdleTaskHook+0x18>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4798      	blx	r3
    }
#endif
}
 8005e8e:	bf00      	nop
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	200028a4 	.word	0x200028a4

08005e98 <OSInitHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSInitHook (void)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	af00      	add	r7, sp, #0
                                                                    /* 8-byte align the ISR stack.                            */    
    OS_CPU_ExceptStkBase = (CPU_STK *)(OSCfg_ISRStkBasePtr + OSCfg_ISRStkSize);
 8005e9c:	4b09      	ldr	r3, [pc, #36]	; (8005ec4 <OSInitHook+0x2c>)
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	4b09      	ldr	r3, [pc, #36]	; (8005ec8 <OSInitHook+0x30>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	4413      	add	r3, r2
 8005ea8:	4a08      	ldr	r2, [pc, #32]	; (8005ecc <OSInitHook+0x34>)
 8005eaa:	6013      	str	r3, [r2, #0]
    OS_CPU_ExceptStkBase = (CPU_STK *)((CPU_STK)(OS_CPU_ExceptStkBase) & 0xFFFFFFF8);
 8005eac:	4b07      	ldr	r3, [pc, #28]	; (8005ecc <OSInitHook+0x34>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f023 0307 	bic.w	r3, r3, #7
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	4b05      	ldr	r3, [pc, #20]	; (8005ecc <OSInitHook+0x34>)
 8005eb8:	601a      	str	r2, [r3, #0]
}
 8005eba:	bf00      	nop
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bc80      	pop	{r7}
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	0800e5ec 	.word	0x0800e5ec
 8005ec8:	0800e5f0 	.word	0x0800e5f0
 8005ecc:	20003844 	.word	0x20003844

08005ed0 <OSStatTaskHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSStatTaskHook (void)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	af00      	add	r7, sp, #0
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppStatTaskHookPtr != (OS_APP_HOOK_VOID)0) {
 8005ed4:	4b04      	ldr	r3, [pc, #16]	; (8005ee8 <OSStatTaskHook+0x18>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d002      	beq.n	8005ee2 <OSStatTaskHook+0x12>
        (*OS_AppStatTaskHookPtr)();
 8005edc:	4b02      	ldr	r3, [pc, #8]	; (8005ee8 <OSStatTaskHook+0x18>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4798      	blx	r3
    }
#endif
}
 8005ee2:	bf00      	nop
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	200028c0 	.word	0x200028c0

08005eec <OSTaskCreateHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSTaskCreateHook (OS_TCB  *p_tcb)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskCreateHookPtr != (OS_APP_HOOK_TCB)0) {
 8005ef4:	4b05      	ldr	r3, [pc, #20]	; (8005f0c <OSTaskCreateHook+0x20>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d003      	beq.n	8005f04 <OSTaskCreateHook+0x18>
        (*OS_AppTaskCreateHookPtr)(p_tcb);
 8005efc:	4b03      	ldr	r3, [pc, #12]	; (8005f0c <OSTaskCreateHook+0x20>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	4798      	blx	r3
    }
#else
    (void)p_tcb;                                            /* Prevent compiler warning                               */
#endif
}
 8005f04:	bf00      	nop
 8005f06:	3708      	adds	r7, #8
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	200025dc 	.word	0x200025dc

08005f10 <OSTaskReturnHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSTaskReturnHook (OS_TCB  *p_tcb)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskReturnHookPtr != (OS_APP_HOOK_TCB)0) {
 8005f18:	4b05      	ldr	r3, [pc, #20]	; (8005f30 <OSTaskReturnHook+0x20>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d003      	beq.n	8005f28 <OSTaskReturnHook+0x18>
        (*OS_AppTaskReturnHookPtr)(p_tcb);
 8005f20:	4b03      	ldr	r3, [pc, #12]	; (8005f30 <OSTaskReturnHook+0x20>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	4798      	blx	r3
    }
#else
    (void)p_tcb;                                            /* Prevent compiler warning                               */
#endif
}
 8005f28:	bf00      	nop
 8005f2a:	3708      	adds	r7, #8
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	20002444 	.word	0x20002444

08005f34 <OSTaskStkInit>:
                         void          *p_arg,
                         CPU_STK       *p_stk_base,
                         CPU_STK       *p_stk_limit,
                         CPU_STK_SIZE   stk_size,
                         OS_OPT         opt)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b087      	sub	sp, #28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
 8005f40:	603b      	str	r3, [r7, #0]
    CPU_STK    *p_stk;

    
    (void)opt;                                                  /* Prevent compiler warning                               */

    p_stk = &p_stk_base[stk_size];                              /* Load stack pointer                                     */
 8005f42:	6a3b      	ldr	r3, [r7, #32]
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	4413      	add	r3, r2
 8005f4a:	617b      	str	r3, [r7, #20]
                                                                /* Align the stack to 8-bytes.                            */
    p_stk = (CPU_STK *)((CPU_STK)(p_stk) & 0xFFFFFFF8);
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	f023 0307 	bic.w	r3, r3, #7
 8005f52:	617b      	str	r3, [r7, #20]
                                                                /* Registers stacked as if auto-saved on exception        */
    *--p_stk = (CPU_STK)0x01000000u;                            /* xPSR                                                   */
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	3b04      	subs	r3, #4
 8005f58:	617b      	str	r3, [r7, #20]
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005f60:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)p_task;                                 /* Entry Point                                            */
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	3b04      	subs	r3, #4
 8005f66:	617b      	str	r3, [r7, #20]
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)OS_TaskReturn;                          /* R14 (LR)                                               */
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	3b04      	subs	r3, #4
 8005f72:	617b      	str	r3, [r7, #20]
 8005f74:	4a30      	ldr	r2, [pc, #192]	; (8006038 <OSTaskStkInit+0x104>)
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x12121212u;                            /* R12                                                    */
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	3b04      	subs	r3, #4
 8005f7e:	617b      	str	r3, [r7, #20]
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 8005f86:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x03030303u;                            /* R3                                                     */
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	3b04      	subs	r3, #4
 8005f8c:	617b      	str	r3, [r7, #20]
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 8005f94:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x02020202u;                            /* R2                                                     */
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	3b04      	subs	r3, #4
 8005f9a:	617b      	str	r3, [r7, #20]
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 8005fa2:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)p_stk_limit;                            /* R1                                                     */
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	3b04      	subs	r3, #4
 8005fa8:	617b      	str	r3, [r7, #20]
 8005faa:	683a      	ldr	r2, [r7, #0]
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)p_arg;                                  /* R0 : argument                                          */
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	3b04      	subs	r3, #4
 8005fb4:	617b      	str	r3, [r7, #20]
 8005fb6:	68ba      	ldr	r2, [r7, #8]
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	601a      	str	r2, [r3, #0]
                                                                /* Remaining registers saved on process stack             */
    *--p_stk = (CPU_STK)0x11111111u;                            /* R11                                                    */
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	3b04      	subs	r3, #4
 8005fc0:	617b      	str	r3, [r7, #20]
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8005fc8:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x10101010u;                            /* R10                                                    */
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	3b04      	subs	r3, #4
 8005fce:	617b      	str	r3, [r7, #20]
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 8005fd6:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x09090909u;                            /* R9                                                     */
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	3b04      	subs	r3, #4
 8005fdc:	617b      	str	r3, [r7, #20]
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 8005fe4:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x08080808u;                            /* R8                                                     */
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	3b04      	subs	r3, #4
 8005fea:	617b      	str	r3, [r7, #20]
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 8005ff2:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x07070707u;                            /* R7                                                     */
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	3b04      	subs	r3, #4
 8005ff8:	617b      	str	r3, [r7, #20]
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 8006000:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x06060606u;                            /* R6                                                     */
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	3b04      	subs	r3, #4
 8006006:	617b      	str	r3, [r7, #20]
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 800600e:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x05050505u;                            /* R5                                                     */
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	3b04      	subs	r3, #4
 8006014:	617b      	str	r3, [r7, #20]
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 800601c:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x04040404u;                            /* R4                                                     */
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	3b04      	subs	r3, #4
 8006022:	617b      	str	r3, [r7, #20]
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 800602a:	601a      	str	r2, [r3, #0]
        *--p_stk = (CPU_STK)0x3F800000u;                        /* S1                                                     */
        *--p_stk = (CPU_STK)0x00000000u;                        /* S0                                                     */
    }
#endif    

    return (p_stk);
 800602c:	697b      	ldr	r3, [r7, #20]
}
 800602e:	4618      	mov	r0, r3
 8006030:	371c      	adds	r7, #28
 8006032:	46bd      	mov	sp, r7
 8006034:	bc80      	pop	{r7}
 8006036:	4770      	bx	lr
 8006038:	08002d81 	.word	0x08002d81

0800603c <OSTaskSwHook>:
*                 to the task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/

void  OSTaskSwHook (void)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
        OS_CPU_FP_Reg_Pop(OSTCBHighRdyPtr->StkPtr);
    }
#endif    

#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskSwHookPtr != (OS_APP_HOOK_VOID)0) {
 8006042:	4b20      	ldr	r3, [pc, #128]	; (80060c4 <OSTaskSwHook+0x88>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d002      	beq.n	8006050 <OSTaskSwHook+0x14>
        (*OS_AppTaskSwHookPtr)();
 800604a:	4b1e      	ldr	r3, [pc, #120]	; (80060c4 <OSTaskSwHook+0x88>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4798      	blx	r3
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_TASK_SWITCHED_IN(OSTCBHighRdyPtr);             /* Record the event.                                      */
#endif

#if OS_CFG_TASK_PROFILE_EN > 0u
    ts = OS_TS_GET();
 8006050:	f001 fa8c 	bl	800756c <CPU_TS_TmrRd>
 8006054:	6078      	str	r0, [r7, #4]
    if (OSTCBCurPtr != OSTCBHighRdyPtr) {
 8006056:	4b1c      	ldr	r3, [pc, #112]	; (80060c8 <OSTaskSwHook+0x8c>)
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	4b1c      	ldr	r3, [pc, #112]	; (80060cc <OSTaskSwHook+0x90>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	429a      	cmp	r2, r3
 8006060:	d016      	beq.n	8006090 <OSTaskSwHook+0x54>
        OSTCBCurPtr->CyclesDelta  = ts - OSTCBCurPtr->CyclesStart;
 8006062:	4b19      	ldr	r3, [pc, #100]	; (80060c8 <OSTaskSwHook+0x8c>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a18      	ldr	r2, [pc, #96]	; (80060c8 <OSTaskSwHook+0x8c>)
 8006068:	6812      	ldr	r2, [r2, #0]
 800606a:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 800606e:	6879      	ldr	r1, [r7, #4]
 8006070:	1a8a      	subs	r2, r1, r2
 8006072:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        OSTCBCurPtr->CyclesTotal += (OS_CYCLES)OSTCBCurPtr->CyclesDelta;
 8006076:	4b14      	ldr	r3, [pc, #80]	; (80060c8 <OSTaskSwHook+0x8c>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a13      	ldr	r2, [pc, #76]	; (80060c8 <OSTaskSwHook+0x8c>)
 800607c:	6812      	ldr	r2, [r2, #0]
 800607e:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
 8006082:	4a11      	ldr	r2, [pc, #68]	; (80060c8 <OSTaskSwHook+0x8c>)
 8006084:	6812      	ldr	r2, [r2, #0]
 8006086:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800608a:	440a      	add	r2, r1
 800608c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }

    OSTCBHighRdyPtr->CyclesStart = ts;
 8006090:	4b0e      	ldr	r3, [pc, #56]	; (80060cc <OSTaskSwHook+0x90>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }
#endif

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
                                                            /* Keep track of per-task scheduler lock time             */
    if (OSTCBCurPtr->SchedLockTimeMax < OSSchedLockTimeMaxCur) {
 800609a:	4b0b      	ldr	r3, [pc, #44]	; (80060c8 <OSTaskSwHook+0x8c>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80060a2:	4b0b      	ldr	r3, [pc, #44]	; (80060d0 <OSTaskSwHook+0x94>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d205      	bcs.n	80060b6 <OSTaskSwHook+0x7a>
        OSTCBCurPtr->SchedLockTimeMax = OSSchedLockTimeMaxCur;
 80060aa:	4b07      	ldr	r3, [pc, #28]	; (80060c8 <OSTaskSwHook+0x8c>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a08      	ldr	r2, [pc, #32]	; (80060d0 <OSTaskSwHook+0x94>)
 80060b0:	6812      	ldr	r2, [r2, #0]
 80060b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }
    OSSchedLockTimeMaxCur = (CPU_TS)0;                      /* Reset the per-task value                               */
 80060b6:	4b06      	ldr	r3, [pc, #24]	; (80060d0 <OSTaskSwHook+0x94>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	601a      	str	r2, [r3, #0]
#endif
}
 80060bc:	bf00      	nop
 80060be:	3708      	adds	r7, #8
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	200028b0 	.word	0x200028b0
 80060c8:	200026ac 	.word	0x200026ac
 80060cc:	200026b8 	.word	0x200026b8
 80060d0:	200026bc 	.word	0x200026bc

080060d4 <OSTimeTickHook>:
* Note(s)    : 1) This function is assumed to be called from the Tick ISR.
*********************************************************************************************************
*/

void  OSTimeTickHook (void)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	af00      	add	r7, sp, #0
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTimeTickHookPtr != (OS_APP_HOOK_VOID)0) {
 80060d8:	4b04      	ldr	r3, [pc, #16]	; (80060ec <OSTimeTickHook+0x18>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d002      	beq.n	80060e6 <OSTimeTickHook+0x12>
        (*OS_AppTimeTickHookPtr)();
 80060e0:	4b02      	ldr	r3, [pc, #8]	; (80060ec <OSTimeTickHook+0x18>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4798      	blx	r3
    }
#endif
}
 80060e6:	bf00      	nop
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	200026cc 	.word	0x200026cc

080060f0 <OS_CPU_SysTickHandler>:
* Note(s)    : 1) This function MUST be placed on entry 15 of the Cortex-M4 vector table.
*********************************************************************************************************
*/

void  OS_CPU_SysTickHandler (void)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
 80060f6:	2300      	movs	r3, #0
 80060f8:	607b      	str	r3, [r7, #4]


    CPU_CRITICAL_ENTER();
 80060fa:	f7fa f8f1 	bl	80002e0 <CPU_SR_Save>
 80060fe:	6078      	str	r0, [r7, #4]
    OSIntNestingCtr++;                                      /* Tell uC/OS-III that we are starting an ISR             */
 8006100:	4b08      	ldr	r3, [pc, #32]	; (8006124 <OS_CPU_SysTickHandler+0x34>)
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	3301      	adds	r3, #1
 8006106:	b2da      	uxtb	r2, r3
 8006108:	4b06      	ldr	r3, [pc, #24]	; (8006124 <OS_CPU_SysTickHandler+0x34>)
 800610a:	701a      	strb	r2, [r3, #0]
    CPU_CRITICAL_EXIT();
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f7fa f8eb 	bl	80002e8 <CPU_SR_Restore>

    OSTimeTick();                                           /* Call uC/OS-III's OSTimeTick()                          */
 8006112:	f7fe ffe3 	bl	80050dc <OSTimeTick>

    OSIntExit();                                            /* Tell uC/OS-III that we are leaving the ISR             */
 8006116:	f7fd fa7f 	bl	8003618 <OSIntExit>
}
 800611a:	bf00      	nop
 800611c:	3708      	adds	r7, #8
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	200026d8 	.word	0x200026d8

08006128 <OS_CPU_SysTickInit>:
* Note(s)    : 1) This function MUST be called after OSStart() & after processor initialization.
*********************************************************************************************************
*/

void  OS_CPU_SysTickInit (CPU_INT32U  cnts)
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
    CPU_INT32U  prio;


    CPU_REG_NVIC_ST_RELOAD = cnts - 1u;
 8006130:	4a0f      	ldr	r2, [pc, #60]	; (8006170 <OS_CPU_SysTickInit+0x48>)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	3b01      	subs	r3, #1
 8006136:	6013      	str	r3, [r2, #0]

                                                            /* Set SysTick handler prio.                              */
    prio                   = CPU_REG_NVIC_SHPRI3;
 8006138:	4b0e      	ldr	r3, [pc, #56]	; (8006174 <OS_CPU_SysTickInit+0x4c>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	60fb      	str	r3, [r7, #12]
    prio                  &= DEF_BIT_FIELD(24, 0);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006144:	60fb      	str	r3, [r7, #12]
    prio                  |= DEF_BIT_MASK(OS_CPU_CFG_SYSTICK_PRIO, 24);

    CPU_REG_NVIC_SHPRI3    = prio;
 8006146:	4a0b      	ldr	r2, [pc, #44]	; (8006174 <OS_CPU_SysTickInit+0x4c>)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6013      	str	r3, [r2, #0]

                                                            /* Enable timer.                                          */
    CPU_REG_NVIC_ST_CTRL  |= CPU_REG_NVIC_ST_CTRL_CLKSOURCE |
 800614c:	4a0a      	ldr	r2, [pc, #40]	; (8006178 <OS_CPU_SysTickInit+0x50>)
 800614e:	4b0a      	ldr	r3, [pc, #40]	; (8006178 <OS_CPU_SysTickInit+0x50>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f043 0305 	orr.w	r3, r3, #5
 8006156:	6013      	str	r3, [r2, #0]
                             CPU_REG_NVIC_ST_CTRL_ENABLE;
                                                            /* Enable timer interrupt.                                */
    CPU_REG_NVIC_ST_CTRL  |= CPU_REG_NVIC_ST_CTRL_TICKINT;
 8006158:	4a07      	ldr	r2, [pc, #28]	; (8006178 <OS_CPU_SysTickInit+0x50>)
 800615a:	4b07      	ldr	r3, [pc, #28]	; (8006178 <OS_CPU_SysTickInit+0x50>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f043 0302 	orr.w	r3, r3, #2
 8006162:	6013      	str	r3, [r2, #0]
}
 8006164:	bf00      	nop
 8006166:	3714      	adds	r7, #20
 8006168:	46bd      	mov	sp, r7
 800616a:	bc80      	pop	{r7}
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	e000e014 	.word	0xe000e014
 8006174:	e000ed20 	.word	0xe000ed20
 8006178:	e000e010 	.word	0xe000e010

0800617c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	4603      	mov	r3, r0
 8006184:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8006186:	4908      	ldr	r1, [pc, #32]	; (80061a8 <NVIC_EnableIRQ+0x2c>)
 8006188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800618c:	095b      	lsrs	r3, r3, #5
 800618e:	79fa      	ldrb	r2, [r7, #7]
 8006190:	f002 021f 	and.w	r2, r2, #31
 8006194:	2001      	movs	r0, #1
 8006196:	fa00 f202 	lsl.w	r2, r0, r2
 800619a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800619e:	bf00      	nop
 80061a0:	370c      	adds	r7, #12
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bc80      	pop	{r7}
 80061a6:	4770      	bx	lr
 80061a8:	e000e100 	.word	0xe000e100

080061ac <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	4603      	mov	r3, r0
 80061b4:	6039      	str	r1, [r7, #0]
 80061b6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80061b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	da0b      	bge.n	80061d8 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80061c0:	490d      	ldr	r1, [pc, #52]	; (80061f8 <NVIC_SetPriority+0x4c>)
 80061c2:	79fb      	ldrb	r3, [r7, #7]
 80061c4:	f003 030f 	and.w	r3, r3, #15
 80061c8:	3b04      	subs	r3, #4
 80061ca:	683a      	ldr	r2, [r7, #0]
 80061cc:	b2d2      	uxtb	r2, r2
 80061ce:	0092      	lsls	r2, r2, #2
 80061d0:	b2d2      	uxtb	r2, r2
 80061d2:	440b      	add	r3, r1
 80061d4:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 80061d6:	e009      	b.n	80061ec <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80061d8:	4908      	ldr	r1, [pc, #32]	; (80061fc <NVIC_SetPriority+0x50>)
 80061da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061de:	683a      	ldr	r2, [r7, #0]
 80061e0:	b2d2      	uxtb	r2, r2
 80061e2:	0092      	lsls	r2, r2, #2
 80061e4:	b2d2      	uxtb	r2, r2
 80061e6:	440b      	add	r3, r1
 80061e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80061ec:	bf00      	nop
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bc80      	pop	{r7}
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	e000ed00 	.word	0xe000ed00
 80061fc:	e000e100 	.word	0xe000e100

08006200 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	60da      	str	r2, [r3, #12]
}
 8006214:	bf00      	nop
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	bc80      	pop	{r7}
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop

08006220 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	460b      	mov	r3, r1
 800622a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	68da      	ldr	r2, [r3, #12]
 8006230:	78fb      	ldrb	r3, [r7, #3]
 8006232:	2101      	movs	r1, #1
 8006234:	fa01 f303 	lsl.w	r3, r1, r3
 8006238:	431a      	orrs	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	60da      	str	r2, [r3, #12]
}
 800623e:	bf00      	nop
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	bc80      	pop	{r7}
 8006246:	4770      	bx	lr

08006248 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	60da      	str	r2, [r3, #12]
}
 8006256:	bf00      	nop
 8006258:	370c      	adds	r7, #12
 800625a:	46bd      	mov	sp, r7
 800625c:	bc80      	pop	{r7}
 800625e:	4770      	bx	lr

08006260 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	460b      	mov	r3, r1
 800626a:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 800626c:	887a      	ldrh	r2, [r7, #2]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	635a      	str	r2, [r3, #52]	; 0x34
}
 8006272:	bf00      	nop
 8006274:	370c      	adds	r7, #12
 8006276:	46bd      	mov	sp, r7
 8006278:	bc80      	pop	{r7}
 800627a:	4770      	bx	lr

0800627c <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	460b      	mov	r3, r1
 8006286:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8006288:	887a      	ldrh	r2, [r7, #2]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800628e:	bf00      	nop
 8006290:	370c      	adds	r7, #12
 8006292:	46bd      	mov	sp, r7
 8006294:	bc80      	pop	{r7}
 8006296:	4770      	bx	lr

08006298 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS |= (uint32_t)shadow_transfer_msk;  
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	691a      	ldr	r2, [r3, #16]
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	431a      	orrs	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	611a      	str	r2, [r3, #16]
}
 80062ae:	bf00      	nop
 80062b0:	370c      	adds	r7, #12
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bc80      	pop	{r7}
 80062b6:	4770      	bx	lr

080062b8 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	460b      	mov	r3, r1
 80062c2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80062ca:	78fb      	ldrb	r3, [r7, #3]
 80062cc:	2101      	movs	r1, #1
 80062ce:	fa01 f303 	lsl.w	r3, r1, r3
 80062d2:	431a      	orrs	r2, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 80062da:	bf00      	nop
 80062dc:	370c      	adds	r7, #12
 80062de:	46bd      	mov	sp, r7
 80062e0:	bc80      	pop	{r7}
 80062e2:	4770      	bx	lr

080062e4 <XMC_SCU_SetCcuTriggerHigh>:
 * the timer using this API.<BR>
 * \par<b>Related APIs:</b><BR>
 * XMC_CCU4_SLICE_StartConfig(), XMC_CCU4_SLICE_SetInput(), XMC_SCU_SetCcuTriggerLow()\n\n\n
 */
__STATIC_INLINE void XMC_SCU_SetCcuTriggerHigh(const uint32_t trigger)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  SCU_GENERAL->CCUCON |= (uint32_t)trigger;
 80062ec:	4905      	ldr	r1, [pc, #20]	; (8006304 <XMC_SCU_SetCcuTriggerHigh+0x20>)
 80062ee:	4b05      	ldr	r3, [pc, #20]	; (8006304 <XMC_SCU_SetCcuTriggerHigh+0x20>)
 80062f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bc80      	pop	{r7}
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	50004000 	.word	0x50004000

08006308 <BSP_CCU4_Init>:
#include "../../XMCLIB/inc/xmc4_ccu4_map.h"



_Bool BSP_CCU4_Init (void)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
	XMC_CCU4_SLICE_COMPARE_CONFIG_t g_timer_object =
 800630e:	f107 0308 	add.w	r3, r7, #8
 8006312:	2200      	movs	r2, #0
 8006314:	601a      	str	r2, [r3, #0]
 8006316:	605a      	str	r2, [r3, #4]
 8006318:	7a3b      	ldrb	r3, [r7, #8]
 800631a:	f043 0302 	orr.w	r3, r3, #2
 800631e:	723b      	strb	r3, [r7, #8]
 8006320:	7b3b      	ldrb	r3, [r7, #12]
 8006322:	2208      	movs	r2, #8
 8006324:	f362 0303 	bfi	r3, r2, #0, #4
 8006328:	733b      	strb	r3, [r7, #12]
		};
	};*/

	  /* Local variable which holds configuration of Event-1 */
	XMC_CCU4_SLICE_EVENT_CONFIG_t config;
	config.duration = XMC_CCU4_SLICE_EVENT_FILTER_DISABLED;
 800632a:	2300      	movs	r3, #0
 800632c:	71fb      	strb	r3, [r7, #7]
	config.edge     = XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_RISING_EDGE;
 800632e:	2301      	movs	r3, #1
 8006330:	717b      	strb	r3, [r7, #5]
	config.level    = XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH; /* Not needed */
 8006332:	2300      	movs	r3, #0
 8006334:	71bb      	strb	r3, [r7, #6]
	config.mapped_input = XMC_CCU4_SLICE_INPUT_I;
 8006336:	2308      	movs	r3, #8
 8006338:	713b      	strb	r3, [r7, #4]

	/* Ensure fCCU reaches CCU42 */
	XMC_CCU4_SetModuleClock(MODULE_PTR, XMC_CCU4_CLOCK_SCU);
 800633a:	2100      	movs	r1, #0
 800633c:	482d      	ldr	r0, [pc, #180]	; (80063f4 <BSP_CCU4_Init+0xec>)
 800633e:	f001 fb19 	bl	8007974 <XMC_CCU4_SetModuleClock>
	XMC_CCU4_Init(MODULE_PTR, XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR);
 8006342:	2100      	movs	r1, #0
 8006344:	482b      	ldr	r0, [pc, #172]	; (80063f4 <BSP_CCU4_Init+0xec>)
 8006346:	f001 faf5 	bl	8007934 <XMC_CCU4_Init>

	/* Get the slice out of idle mode */
	XMC_CCU4_EnableClock(MODULE_PTR, SLICE_NUMBER);
 800634a:	2100      	movs	r1, #0
 800634c:	4829      	ldr	r0, [pc, #164]	; (80063f4 <BSP_CCU4_Init+0xec>)
 800634e:	f7ff ff67 	bl	8006220 <XMC_CCU4_EnableClock>
/* Start the prescaler and restore clocks to slices */
	XMC_CCU4_StartPrescaler(MODULE_PTR);
 8006352:	4828      	ldr	r0, [pc, #160]	; (80063f4 <BSP_CCU4_Init+0xec>)
 8006354:	f7ff ff54 	bl	8006200 <XMC_CCU4_StartPrescaler>

/* Initialize the Slice */
	XMC_CCU4_SLICE_CompareInit(SLICE_PTR, &g_timer_object);
 8006358:	f107 0308 	add.w	r3, r7, #8
 800635c:	4619      	mov	r1, r3
 800635e:	4826      	ldr	r0, [pc, #152]	; (80063f8 <BSP_CCU4_Init+0xf0>)
 8006360:	f001 fb22 	bl	80079a8 <XMC_CCU4_SLICE_CompareInit>
/* Enable compare match and period match events */
	XMC_CCU4_SLICE_EnableEvent(SLICE_PTR, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8006364:	2100      	movs	r1, #0
 8006366:	4824      	ldr	r0, [pc, #144]	; (80063f8 <BSP_CCU4_Init+0xf0>)
 8006368:	f7ff ffa6 	bl	80062b8 <XMC_CCU4_SLICE_EnableEvent>
	XMC_CCU4_SLICE_EnableEvent(SLICE_PTR, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
 800636c:	2102      	movs	r1, #2
 800636e:	4822      	ldr	r0, [pc, #136]	; (80063f8 <BSP_CCU4_Init+0xf0>)
 8006370:	f7ff ffa2 	bl	80062b8 <XMC_CCU4_SLICE_EnableEvent>
/* Connect period match event to SR0 */
	XMC_CCU4_SLICE_SetInterruptNode(SLICE_PTR, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH, XMC_CCU4_SLICE_SR_ID_0);
 8006374:	2200      	movs	r2, #0
 8006376:	2100      	movs	r1, #0
 8006378:	481f      	ldr	r0, [pc, #124]	; (80063f8 <BSP_CCU4_Init+0xf0>)
 800637a:	f001 fbe3 	bl	8007b44 <XMC_CCU4_SLICE_SetInterruptNode>

/* Connect compare match event to SR1 */
	XMC_CCU4_SLICE_SetInterruptNode(SLICE_PTR, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP, XMC_CCU4_SLICE_SR_ID_1);
 800637e:	2201      	movs	r2, #1
 8006380:	2102      	movs	r1, #2
 8006382:	481d      	ldr	r0, [pc, #116]	; (80063f8 <BSP_CCU4_Init+0xf0>)
 8006384:	f001 fbde 	bl	8007b44 <XMC_CCU4_SLICE_SetInterruptNode>

/* Configure NVIC */
	/* Set priority */
	NVIC_SetPriority(CCU40_0_IRQn, 10U);
 8006388:	210a      	movs	r1, #10
 800638a:	202c      	movs	r0, #44	; 0x2c
 800638c:	f7ff ff0e 	bl	80061ac <NVIC_SetPriority>
	NVIC_SetPriority(CCU40_1_IRQn, 10U);
 8006390:	210a      	movs	r1, #10
 8006392:	202d      	movs	r0, #45	; 0x2d
 8006394:	f7ff ff0a 	bl	80061ac <NVIC_SetPriority>
	//NVIC_SetPriority(CCU40_3_IRQn, 10U);
	/* Enable IRQ */
	NVIC_EnableIRQ(CCU40_0_IRQn);
 8006398:	202c      	movs	r0, #44	; 0x2c
 800639a:	f7ff feef 	bl	800617c <NVIC_EnableIRQ>
	NVIC_EnableIRQ(CCU40_1_IRQn);
 800639e:	202d      	movs	r0, #45	; 0x2d
 80063a0:	f7ff feec 	bl	800617c <NVIC_EnableIRQ>
	/* Program a very large value into PR and CR */
	XMC_CCU4_SLICE_SetTimerPeriodMatch(SLICE_PTR, PERIODE); //65500U
 80063a4:	f242 419e 	movw	r1, #9374	; 0x249e
 80063a8:	4813      	ldr	r0, [pc, #76]	; (80063f8 <BSP_CCU4_Init+0xf0>)
 80063aa:	f7ff ff59 	bl	8006260 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
	XMC_CCU4_SLICE_SetTimerCompareMatch(SLICE_PTR, CAPTURE1);//32000U
 80063ae:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 80063b2:	4811      	ldr	r0, [pc, #68]	; (80063f8 <BSP_CCU4_Init+0xf0>)
 80063b4:	f7ff ff62 	bl	800627c <XMC_CCU4_SLICE_SetTimerCompareMatch>

	/* Enable shadow transfer */
	XMC_CCU4_EnableShadowTransfer(MODULE_PTR, 							\
 80063b8:	2105      	movs	r1, #5
 80063ba:	480e      	ldr	r0, [pc, #56]	; (80063f4 <BSP_CCU4_Init+0xec>)
 80063bc:	f7ff ff6c 	bl	8006298 <XMC_CCU4_EnableShadowTransfer>
			(uint32_t)(XMC_CCU4_SHADOW_TRANSFER_SLICE_0|				\
			XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_0));
	/* Configure Event-1 and map it to Input-I */
	XMC_CCU4_SLICE_ConfigureEvent(SLICE_PTR, XMC_CCU4_SLICE_EVENT_0, &config);
 80063c0:	1d3b      	adds	r3, r7, #4
 80063c2:	461a      	mov	r2, r3
 80063c4:	2101      	movs	r1, #1
 80063c6:	480c      	ldr	r0, [pc, #48]	; (80063f8 <BSP_CCU4_Init+0xf0>)
 80063c8:	f001 fb52 	bl	8007a70 <XMC_CCU4_SLICE_ConfigureEvent>
	/* Map Event-1 to Start function */
	XMC_CCU4_SLICE_StartConfig(SLICE_PTR, XMC_CCU4_SLICE_EVENT_0, XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR);
 80063cc:	2201      	movs	r2, #1
 80063ce:	2101      	movs	r1, #1
 80063d0:	4809      	ldr	r0, [pc, #36]	; (80063f8 <BSP_CCU4_Init+0xf0>)
 80063d2:	f001 fb1f 	bl	8007a14 <XMC_CCU4_SLICE_StartConfig>

	/* Generate an external start trigger */
	XMC_SCU_SetCcuTriggerHigh(CAPCOM_MASK);
 80063d6:	2001      	movs	r0, #1
 80063d8:	f7ff ff84 	bl	80062e4 <XMC_SCU_SetCcuTriggerHigh>
	XMC_CCU4_EnableClock(MODULE_PTR, SLICE_NUMBER);
 80063dc:	2100      	movs	r1, #0
 80063de:	4805      	ldr	r0, [pc, #20]	; (80063f4 <BSP_CCU4_Init+0xec>)
 80063e0:	f7ff ff1e 	bl	8006220 <XMC_CCU4_EnableClock>
	XMC_CCU4_SLICE_StartTimer(SLICE_PTR);
 80063e4:	4804      	ldr	r0, [pc, #16]	; (80063f8 <BSP_CCU4_Init+0xf0>)
 80063e6:	f7ff ff2f 	bl	8006248 <XMC_CCU4_SLICE_StartTimer>
	return true;
 80063ea:	2301      	movs	r3, #1
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	4000c000 	.word	0x4000c000
 80063f8:	4000c100 	.word	0x4000c100

080063fc <CCU40_0_SetCapture>:

void CCU40_0_SetCapture(int dc){
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
	XMC_CCU4_SLICE_SetTimerCompareMatch(SLICE_PTR, (PERIODE/(dc*10)));
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	4613      	mov	r3, r2
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	4413      	add	r3, r2
 800640c:	005b      	lsls	r3, r3, #1
 800640e:	461a      	mov	r2, r3
 8006410:	f242 439e 	movw	r3, #9374	; 0x249e
 8006414:	fbb3 f3f2 	udiv	r3, r3, r2
 8006418:	b29b      	uxth	r3, r3
 800641a:	4619      	mov	r1, r3
 800641c:	4805      	ldr	r0, [pc, #20]	; (8006434 <CCU40_0_SetCapture+0x38>)
 800641e:	f7ff ff2d 	bl	800627c <XMC_CCU4_SLICE_SetTimerCompareMatch>
	XMC_CCU4_EnableShadowTransfer(MODULE_PTR,XMC_CCU4_SHADOW_TRANSFER_SLICE_0);
 8006422:	2101      	movs	r1, #1
 8006424:	4804      	ldr	r0, [pc, #16]	; (8006438 <CCU40_0_SetCapture+0x3c>)
 8006426:	f7ff ff37 	bl	8006298 <XMC_CCU4_EnableShadowTransfer>
}
 800642a:	bf00      	nop
 800642c:	3708      	adds	r7, #8
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	4000c100 	.word	0x4000c100
 8006438:	4000c000 	.word	0x4000c000

0800643c <XMC_SCU_SetCcuTriggerHigh>:
 * The input signal for the CCU slice should be selected as SCU input.
 * The above mentioned configurations can be made using the CCU LLD API XMC_CCU4_SLICE_StartConfig(). 
 * CCU timer slice should be started using XMC_CCU4_SLICE_StartTimer() before triggering 
 * the timer using this API.<BR>
 * \par<b>Related APIs:</b><BR>
 * XMC_CCU4_SLICE_StartConfig(), XMC_CCU4_SLICE_SetInput(), XMC_SCU_SetCcuTriggerLow()\n\n\n
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 */
 8006444:	4905      	ldr	r1, [pc, #20]	; (800645c <XMC_SCU_SetCcuTriggerHigh+0x20>)
 8006446:	4b05      	ldr	r3, [pc, #20]	; (800645c <XMC_SCU_SetCcuTriggerHigh+0x20>)
 8006448:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4313      	orrs	r3, r2
 800644e:	64cb      	str	r3, [r1, #76]	; 0x4c
__STATIC_INLINE void XMC_SCU_SetCcuTriggerHigh(const uint32_t trigger)
 8006450:	bf00      	nop
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	bc80      	pop	{r7}
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	50004000 	.word	0x50004000

08006460 <XMC_SCU_SetCcuTriggerLow>:
 * The input signal for the CCU slice should be selected as SCU input.
 * The above mentioned configurations can be made using the CCU LLD API XMC_CCU4_SLICE_StartConfig(). 
 * CCU timer slice should be started using XMC_CCU4_SLICE_StartTimer() before triggering 
 * the timer using this API.<BR>
 * \par<b>Related APIs:</b><BR>
 * XMC_CCU4_SLICE_StartConfig(), XMC_CCU4_SLICE_SetInput(), XMC_SCU_SetCcuTriggerHigh()\n\n\n
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 */
 8006468:	4905      	ldr	r1, [pc, #20]	; (8006480 <XMC_SCU_SetCcuTriggerLow+0x20>)
 800646a:	4b05      	ldr	r3, [pc, #20]	; (8006480 <XMC_SCU_SetCcuTriggerLow+0x20>)
 800646c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	43db      	mvns	r3, r3
 8006472:	4013      	ands	r3, r2
 8006474:	64cb      	str	r3, [r1, #76]	; 0x4c
__STATIC_INLINE void XMC_SCU_SetCcuTriggerLow(const uint32_t trigger)
 8006476:	bf00      	nop
 8006478:	370c      	adds	r7, #12
 800647a:	46bd      	mov	sp, r7
 800647c:	bc80      	pop	{r7}
 800647e:	4770      	bx	lr
 8006480:	50004000 	.word	0x50004000

08006484 <XMC_CCU4_SLICE_ClearEvent>:
/**
 * @param slice Constant pointer to CC4 Slice
 * @param reg_num The capture register from which the captured value is to be retrieved
 *                Range: [0,3]
 * @return <BR>
 *    uint32_t  Returns the Capture register value.
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	460b      	mov	r3, r1
 800648e:	70fb      	strb	r3, [r7, #3]
 *              Range: [0 to 0x1FFFFF]
 *
 * \par<b>Description:</b><br>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006496:	78fb      	ldrb	r3, [r7, #3]
 8006498:	2101      	movs	r1, #1
 800649a:	fa01 f303 	lsl.w	r3, r1, r3
 800649e:	431a      	orrs	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 * Retrieves timer value which has been captured in the Capture registers, by reading CC4yCV[\b reg_num] register.\n\n
 80064a6:	bf00      	nop
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bc80      	pop	{r7}
 80064ae:	4770      	bx	lr

080064b0 <BSP_IntDisAll>:
 * \params   none
 * \returns  none
 * \brief    disable all interrupts
 */
void  BSP_IntDisAll (void)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	af00      	add	r7, sp, #0
	CPU_IntDis();
 80064b4:	f7f9 ff10 	bl	80002d8 <CPU_IntDis>
}
 80064b8:	bf00      	nop
 80064ba:	bd80      	pop	{r7, pc}

080064bc <BSP_IntEn>:
 * \params   int_id ... interrupt to enable
 * \returns  none
 * \brief    enable interrupt
 */
void  BSP_IntEn (CPU_DATA  int_id)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
	if (int_id < BSP_INT_ID_MAX) {
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b6f      	cmp	r3, #111	; 0x6f
 80064c8:	d806      	bhi.n	80064d8 <BSP_IntEn+0x1c>
		CPU_IntSrcEn (int_id + 16);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	3310      	adds	r3, #16
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7fb fbfa 	bl	8001ccc <CPU_IntSrcEn>
	}
}
 80064d8:	bf00      	nop
 80064da:	3708      	adds	r7, #8
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <BSP_IntVectSet>:
 *           isr ...... handler to assign
 * \returns  none
 * \brief    assign ISR handler
 */
void  BSP_IntVectSet (CPU_DATA int_id, CPU_FNCT_VOID  isr)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
	CPU_SR_ALLOC();
 80064ea:	2300      	movs	r3, #0
 80064ec:	60fb      	str	r3, [r7, #12]

	if (int_id < BSP_INT_ID_MAX) {
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2b6f      	cmp	r3, #111	; 0x6f
 80064f2:	d80a      	bhi.n	800650a <BSP_IntVectSet+0x2a>
		CPU_CRITICAL_ENTER();
 80064f4:	f7f9 fef4 	bl	80002e0 <CPU_SR_Save>
 80064f8:	60f8      	str	r0, [r7, #12]
		BSP_IntVectTbl[int_id] = isr;
 80064fa:	4906      	ldr	r1, [pc, #24]	; (8006514 <BSP_IntVectSet+0x34>)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	683a      	ldr	r2, [r7, #0]
 8006500:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		CPU_CRITICAL_EXIT();
 8006504:	68f8      	ldr	r0, [r7, #12]
 8006506:	f7f9 feef 	bl	80002e8 <CPU_SR_Restore>
	}
}
 800650a:	bf00      	nop
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	20001cf8 	.word	0x20001cf8

08006518 <BSP_IntInit>:
 * \params   none
 * \returns  none
 * \brief    initialize interrupts
 */
void  BSP_IntInit (void)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	af00      	add	r7, sp, #0
	BSP_IntVectSet (USIC1_1_IRQn, BSP_IntHandler_Uart_Recive); //**
 800651c:	4908      	ldr	r1, [pc, #32]	; (8006540 <BSP_IntInit+0x28>)
 800651e:	205b      	movs	r0, #91	; 0x5b
 8006520:	f7ff ffde 	bl	80064e0 <BSP_IntVectSet>
	BSP_IntVectSet (USIC1_0_IRQn, BSP_IntHandler_Uart_Recive); //**
 8006524:	4906      	ldr	r1, [pc, #24]	; (8006540 <BSP_IntInit+0x28>)
 8006526:	205a      	movs	r0, #90	; 0x5a
 8006528:	f7ff ffda 	bl	80064e0 <BSP_IntVectSet>
	BSP_IntVectSet (CCU40_0_IRQn, CCU40_0_IRQHandler);
 800652c:	4905      	ldr	r1, [pc, #20]	; (8006544 <BSP_IntInit+0x2c>)
 800652e:	202c      	movs	r0, #44	; 0x2c
 8006530:	f7ff ffd6 	bl	80064e0 <BSP_IntVectSet>
	BSP_IntVectSet (CCU40_1_IRQn, CCU40_1_IRQHandler);
 8006534:	4904      	ldr	r1, [pc, #16]	; (8006548 <BSP_IntInit+0x30>)
 8006536:	202d      	movs	r0, #45	; 0x2d
 8006538:	f7ff ffd2 	bl	80064e0 <BSP_IntVectSet>
}
 800653c:	bf00      	nop
 800653e:	bd80      	pop	{r7, pc}
 8006540:	08006581 	.word	0x08006581
 8006544:	0800654d 	.word	0x0800654d
 8006548:	0800656d 	.word	0x0800656d

0800654c <CCU40_0_IRQHandler>:

static void CCU40_0_IRQHandler(void)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	af00      	add	r7, sp, #0
  XMC_CCU4_SLICE_ClearEvent(SLICE_PTR, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8006550:	2100      	movs	r1, #0
 8006552:	4805      	ldr	r0, [pc, #20]	; (8006568 <CCU40_0_IRQHandler+0x1c>)
 8006554:	f7ff ff96 	bl	8006484 <XMC_CCU4_SLICE_ClearEvent>
  //APP_TRACE_INFO ("sH ...\n");
  XMC_SCU_SetCcuTriggerLow(CAPCOM_MASK);
 8006558:	2001      	movs	r0, #1
 800655a:	f7ff ff81 	bl	8006460 <XMC_SCU_SetCcuTriggerLow>
  XMC_SCU_SetCcuTriggerHigh(CAPCOM_MASK);
 800655e:	2001      	movs	r0, #1
 8006560:	f7ff ff6c 	bl	800643c <XMC_SCU_SetCcuTriggerHigh>
}
 8006564:	bf00      	nop
 8006566:	bd80      	pop	{r7, pc}
 8006568:	4000c100 	.word	0x4000c100

0800656c <CCU40_1_IRQHandler>:

static void CCU40_1_IRQHandler(void){
 800656c:	b580      	push	{r7, lr}
 800656e:	af00      	add	r7, sp, #0

	XMC_CCU4_SLICE_ClearEvent(SLICE_PTR,  XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
 8006570:	2102      	movs	r1, #2
 8006572:	4802      	ldr	r0, [pc, #8]	; (800657c <CCU40_1_IRQHandler+0x10>)
 8006574:	f7ff ff86 	bl	8006484 <XMC_CCU4_SLICE_ClearEvent>
		//APP_TRACE_INFO ("sL ...\n");
}
 8006578:	bf00      	nop
 800657a:	bd80      	pop	{r7, pc}
 800657c:	4000c100 	.word	0x4000c100

08006580 <BSP_IntHandler_Uart_Recive>:
 * \returns  none
 * \brief    UART interrupt handler
 *           https://doc.micrium.com/display/osiiidoc/Keeping+the+Data+in+Scope
 */
static  void  BSP_IntHandler_Uart_Recive (void)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af02      	add	r7, sp, #8
	static CPU_CHAR    *RxDataPtr  = NULL ;
	static CPU_INT32U  RxDataCtr = 0;
	static CPU_CHAR    msg_receiving = 0;

	// receive byte
	RxData = XMC_UART_CH_GetReceivedData (XMC_UART1_CH1);                   // <1>
 8006586:	4838      	ldr	r0, [pc, #224]	; (8006668 <BSP_IntHandler_Uart_Recive+0xe8>)
 8006588:	f001 fcfa 	bl	8007f80 <XMC_UART_CH_GetReceivedData>
 800658c:	4603      	mov	r3, r0
 800658e:	71fb      	strb	r3, [r7, #7]

	// is the character a "start of packet" character?                      // <2>
	if ( ( (int) RxData == Start_of_Packet) && msg_receiving == 0) {
 8006590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006594:	4a35      	ldr	r2, [pc, #212]	; (800666c <BSP_IntHandler_Uart_Recive+0xec>)
 8006596:	7812      	ldrb	r2, [r2, #0]
 8006598:	4293      	cmp	r3, r2
 800659a:	d116      	bne.n	80065ca <BSP_IntHandler_Uart_Recive+0x4a>
 800659c:	4b34      	ldr	r3, [pc, #208]	; (8006670 <BSP_IntHandler_Uart_Recive+0xf0>)
 800659e:	f993 3000 	ldrsb.w	r3, [r3]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d111      	bne.n	80065ca <BSP_IntHandler_Uart_Recive+0x4a>
		// allocate a memory block
		RxDataPtr = (CPU_CHAR *) OSMemGet (&Mem_Partition, &err);
 80065a6:	1d3b      	adds	r3, r7, #4
 80065a8:	4619      	mov	r1, r3
 80065aa:	4832      	ldr	r0, [pc, #200]	; (8006674 <BSP_IntHandler_Uart_Recive+0xf4>)
 80065ac:	f7ff fa4c 	bl	8005a48 <OSMemGet>
 80065b0:	4602      	mov	r2, r0
 80065b2:	4b31      	ldr	r3, [pc, #196]	; (8006678 <BSP_IntHandler_Uart_Recive+0xf8>)
 80065b4:	601a      	str	r2, [r3, #0]
		if (err != OS_ERR_NONE)
 80065b6:	88bb      	ldrh	r3, [r7, #4]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d003      	beq.n	80065c4 <BSP_IntHandler_Uart_Recive+0x44>
			APP_TRACE_DBG ("Error OSMemGet: BSP_IntHandler_Uart_Recive\n");
 80065bc:	482f      	ldr	r0, [pc, #188]	; (800667c <BSP_IntHandler_Uart_Recive+0xfc>)
 80065be:	f001 fefb 	bl	80083b8 <puts>
 80065c2:	e002      	b.n	80065ca <BSP_IntHandler_Uart_Recive+0x4a>
		else
			msg_receiving = 1;
 80065c4:	4b2a      	ldr	r3, [pc, #168]	; (8006670 <BSP_IntHandler_Uart_Recive+0xf0>)
 80065c6:	2201      	movs	r2, #1
 80065c8:	701a      	strb	r2, [r3, #0]

	// receive characters and put them into the memory partition            // <3>
	// until we detect and "end of packet character"
	// NOTE: the message itself may also contain a "start of packet character"
	//       but no "end of packet character"
	if ( ( (int) RxData != Start_of_Packet) && ( (int) RxData != End_of_Packet)
 80065ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065ce:	4a27      	ldr	r2, [pc, #156]	; (800666c <BSP_IntHandler_Uart_Recive+0xec>)
 80065d0:	7812      	ldrb	r2, [r2, #0]
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d018      	beq.n	8006608 <BSP_IntHandler_Uart_Recive+0x88>
 80065d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065da:	4a29      	ldr	r2, [pc, #164]	; (8006680 <BSP_IntHandler_Uart_Recive+0x100>)
 80065dc:	7812      	ldrb	r2, [r2, #0]
 80065de:	4293      	cmp	r3, r2
 80065e0:	d012      	beq.n	8006608 <BSP_IntHandler_Uart_Recive+0x88>
	     && msg_receiving == 1) {
 80065e2:	4b23      	ldr	r3, [pc, #140]	; (8006670 <BSP_IntHandler_Uart_Recive+0xf0>)
 80065e4:	f993 3000 	ldrsb.w	r3, [r3]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d10d      	bne.n	8006608 <BSP_IntHandler_Uart_Recive+0x88>
		// put byte into the memory partition at the respective address
		*RxDataPtr = RxData;
 80065ec:	4b22      	ldr	r3, [pc, #136]	; (8006678 <BSP_IntHandler_Uart_Recive+0xf8>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	79fa      	ldrb	r2, [r7, #7]
 80065f2:	701a      	strb	r2, [r3, #0]
		// increment the address to point to the next location
		RxDataPtr++;
 80065f4:	4b20      	ldr	r3, [pc, #128]	; (8006678 <BSP_IntHandler_Uart_Recive+0xf8>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	3301      	adds	r3, #1
 80065fa:	4a1f      	ldr	r2, [pc, #124]	; (8006678 <BSP_IntHandler_Uart_Recive+0xf8>)
 80065fc:	6013      	str	r3, [r2, #0]
		// increment the receive counter
		RxDataCtr++;
 80065fe:	4b21      	ldr	r3, [pc, #132]	; (8006684 <BSP_IntHandler_Uart_Recive+0x104>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	3301      	adds	r3, #1
 8006604:	4a1f      	ldr	r2, [pc, #124]	; (8006684 <BSP_IntHandler_Uart_Recive+0x104>)
 8006606:	6013      	str	r3, [r2, #0]
	}

	// is the character a "end of packet" character?                        // <4>
	if ( ( (int) RxData == End_of_Packet) && msg_receiving == 1) {
 8006608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800660c:	4a1c      	ldr	r2, [pc, #112]	; (8006680 <BSP_IntHandler_Uart_Recive+0x100>)
 800660e:	7812      	ldrb	r2, [r2, #0]
 8006610:	4293      	cmp	r3, r2
 8006612:	d124      	bne.n	800665e <BSP_IntHandler_Uart_Recive+0xde>
 8006614:	4b16      	ldr	r3, [pc, #88]	; (8006670 <BSP_IntHandler_Uart_Recive+0xf0>)
 8006616:	f993 3000 	ldrsb.w	r3, [r3]
 800661a:	2b01      	cmp	r3, #1
 800661c:	d11f      	bne.n	800665e <BSP_IntHandler_Uart_Recive+0xde>
		// send the message to the application task - to that end put a pointer to
		// the memory block into the queue to the application task
		OSQPost ( (OS_Q      *) &UART_ISR,
 800661e:	4b16      	ldr	r3, [pc, #88]	; (8006678 <BSP_IntHandler_Uart_Recive+0xf8>)
 8006620:	681a      	ldr	r2, [r3, #0]
			  (void      *) (RxDataPtr - RxDataCtr),
 8006622:	4b18      	ldr	r3, [pc, #96]	; (8006684 <BSP_IntHandler_Uart_Recive+0x104>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	425b      	negs	r3, r3
 8006628:	18d1      	adds	r1, r2, r3
			  (OS_MSG_SIZE) RxDataCtr + 1,
 800662a:	4b16      	ldr	r3, [pc, #88]	; (8006684 <BSP_IntHandler_Uart_Recive+0x104>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	b29b      	uxth	r3, r3

	// is the character a "end of packet" character?                        // <4>
	if ( ( (int) RxData == End_of_Packet) && msg_receiving == 1) {
		// send the message to the application task - to that end put a pointer to
		// the memory block into the queue to the application task
		OSQPost ( (OS_Q      *) &UART_ISR,
 8006630:	3301      	adds	r3, #1
 8006632:	b29a      	uxth	r2, r3
 8006634:	1d3b      	adds	r3, r7, #4
 8006636:	9300      	str	r3, [sp, #0]
 8006638:	2300      	movs	r3, #0
 800663a:	4813      	ldr	r0, [pc, #76]	; (8006688 <BSP_IntHandler_Uart_Recive+0x108>)
 800663c:	f7fb fe24 	bl	8002288 <OSQPost>
			  (void      *) (RxDataPtr - RxDataCtr),
			  (OS_MSG_SIZE) RxDataCtr + 1,
			  (OS_OPT)      OS_OPT_POST_FIFO,
			  (OS_ERR    *) &err);
		if (err != OS_ERR_NONE)
 8006640:	88bb      	ldrh	r3, [r7, #4]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d002      	beq.n	800664c <BSP_IntHandler_Uart_Recive+0xcc>
			APP_TRACE_DBG ("Error OSQPost: BSP_IntHandler_Uart_Recive\n");
 8006646:	4811      	ldr	r0, [pc, #68]	; (800668c <BSP_IntHandler_Uart_Recive+0x10c>)
 8006648:	f001 feb6 	bl	80083b8 <puts>

		// clear the receive pointer and counter                              // <5>
		RxDataPtr = NULL;
 800664c:	4b0a      	ldr	r3, [pc, #40]	; (8006678 <BSP_IntHandler_Uart_Recive+0xf8>)
 800664e:	2200      	movs	r2, #0
 8006650:	601a      	str	r2, [r3, #0]
		RxDataCtr = 0;
 8006652:	4b0c      	ldr	r3, [pc, #48]	; (8006684 <BSP_IntHandler_Uart_Recive+0x104>)
 8006654:	2200      	movs	r2, #0
 8006656:	601a      	str	r2, [r3, #0]
		// ready for a next message
		msg_receiving = 0;
 8006658:	4b05      	ldr	r3, [pc, #20]	; (8006670 <BSP_IntHandler_Uart_Recive+0xf0>)
 800665a:	2200      	movs	r2, #0
 800665c:	701a      	strb	r2, [r3, #0]
	}
}
 800665e:	bf00      	nop
 8006660:	3708      	adds	r7, #8
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	48020200 	.word	0x48020200
 800666c:	20000001 	.word	0x20000001
 8006670:	20001eb8 	.word	0x20001eb8
 8006674:	20001fec 	.word	0x20001fec
 8006678:	20001ebc 	.word	0x20001ebc
 800667c:	0800e578 	.word	0x0800e578
 8006680:	20000002 	.word	0x20000002
 8006684:	20001ec0 	.word	0x20001ec0
 8006688:	20001fbc 	.word	0x20001fbc
 800668c:	0800e5a4 	.word	0x0800e5a4

08006690 <BSP_IntHandlerSCU>:
 * \params   none
 * \returns  none
 * \brief    handle an interrupt
 */
void BSP_IntHandlerSCU (void)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_SCU);
 8006694:	2000      	movs	r0, #0
 8006696:	f000 fb23 	bl	8006ce0 <BSP_IntHandler>
}
 800669a:	bf00      	nop
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop

080066a0 <BSP_IntHandlerERU0_00>:
void BSP_IntHandlerERU0_00 (void)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU0_00);
 80066a4:	2001      	movs	r0, #1
 80066a6:	f000 fb1b 	bl	8006ce0 <BSP_IntHandler>
}
 80066aa:	bf00      	nop
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop

080066b0 <BSP_IntHandlerERU0_01>:
void BSP_IntHandlerERU0_01 (void)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU0_01);
 80066b4:	2002      	movs	r0, #2
 80066b6:	f000 fb13 	bl	8006ce0 <BSP_IntHandler>
}
 80066ba:	bf00      	nop
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop

080066c0 <BSP_IntHandlerERU0_02>:
void BSP_IntHandlerERU0_02 (void)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU0_02);
 80066c4:	2003      	movs	r0, #3
 80066c6:	f000 fb0b 	bl	8006ce0 <BSP_IntHandler>
}
 80066ca:	bf00      	nop
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop

080066d0 <BSP_IntHandlerERU0_03>:
void BSP_IntHandlerERU0_03 (void)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU0_03);
 80066d4:	2004      	movs	r0, #4
 80066d6:	f000 fb03 	bl	8006ce0 <BSP_IntHandler>
}
 80066da:	bf00      	nop
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop

080066e0 <BSP_IntHandlerERU1_00>:
void BSP_IntHandlerERU1_00 (void)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU1_00);
 80066e4:	2005      	movs	r0, #5
 80066e6:	f000 fafb 	bl	8006ce0 <BSP_IntHandler>
}
 80066ea:	bf00      	nop
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop

080066f0 <BSP_IntHandlerERU1_01>:
void BSP_IntHandlerERU1_01 (void)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU1_01);
 80066f4:	2006      	movs	r0, #6
 80066f6:	f000 faf3 	bl	8006ce0 <BSP_IntHandler>
}
 80066fa:	bf00      	nop
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop

08006700 <BSP_IntHandlerERU1_02>:
void BSP_IntHandlerERU1_02 (void)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU1_02);
 8006704:	2007      	movs	r0, #7
 8006706:	f000 faeb 	bl	8006ce0 <BSP_IntHandler>
}
 800670a:	bf00      	nop
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop

08006710 <BSP_IntHandlerERU1_03>:
void BSP_IntHandlerERU1_03 (void)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ERU1_03);
 8006714:	2008      	movs	r0, #8
 8006716:	f000 fae3 	bl	8006ce0 <BSP_IntHandler>
}
 800671a:	bf00      	nop
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop

08006720 <BSP_IntHandlerPMU0_00>:
void BSP_IntHandlerPMU0_00 (void)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_PMU0_00);
 8006724:	200c      	movs	r0, #12
 8006726:	f000 fadb 	bl	8006ce0 <BSP_IntHandler>
}
 800672a:	bf00      	nop
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop

08006730 <BSP_IntHandlerVADC0_C0_00>:
void BSP_IntHandlerVADC0_C0_00 (void)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_C0_00);
 8006734:	200e      	movs	r0, #14
 8006736:	f000 fad3 	bl	8006ce0 <BSP_IntHandler>
}
 800673a:	bf00      	nop
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop

08006740 <BSP_IntHandlerVADC0_C0_01>:
void BSP_IntHandlerVADC0_C0_01 (void)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_C0_01);
 8006744:	200f      	movs	r0, #15
 8006746:	f000 facb 	bl	8006ce0 <BSP_IntHandler>
}
 800674a:	bf00      	nop
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop

08006750 <BSP_IntHandlerVADC0_C0_02>:
void BSP_IntHandlerVADC0_C0_02 (void)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_C0_02);
 8006754:	2010      	movs	r0, #16
 8006756:	f000 fac3 	bl	8006ce0 <BSP_IntHandler>
}
 800675a:	bf00      	nop
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop

08006760 <BSP_IntHandlerVADC0_C0_03>:
void BSP_IntHandlerVADC0_C0_03 (void)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_C0_03);
 8006764:	2011      	movs	r0, #17
 8006766:	f000 fabb 	bl	8006ce0 <BSP_IntHandler>
}
 800676a:	bf00      	nop
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop

08006770 <BSP_IntHandlerVADC0_G0_00>:
void BSP_IntHandlerVADC0_G0_00 (void)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G0_00);
 8006774:	2012      	movs	r0, #18
 8006776:	f000 fab3 	bl	8006ce0 <BSP_IntHandler>
}
 800677a:	bf00      	nop
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop

08006780 <BSP_IntHandlerVADC0_G0_01>:
void BSP_IntHandlerVADC0_G0_01 (void)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G0_01);
 8006784:	2013      	movs	r0, #19
 8006786:	f000 faab 	bl	8006ce0 <BSP_IntHandler>
}
 800678a:	bf00      	nop
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop

08006790 <BSP_IntHandlerVADC0_G0_02>:
void BSP_IntHandlerVADC0_G0_02 (void)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G0_02);
 8006794:	2014      	movs	r0, #20
 8006796:	f000 faa3 	bl	8006ce0 <BSP_IntHandler>
}
 800679a:	bf00      	nop
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop

080067a0 <BSP_IntHandlerVADC0_G0_03>:
void BSP_IntHandlerVADC0_G0_03 (void)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G0_03);
 80067a4:	2015      	movs	r0, #21
 80067a6:	f000 fa9b 	bl	8006ce0 <BSP_IntHandler>
}
 80067aa:	bf00      	nop
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop

080067b0 <BSP_IntHandlerVADC0_G1_00>:
void BSP_IntHandlerVADC0_G1_00 (void)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G1_00);
 80067b4:	2016      	movs	r0, #22
 80067b6:	f000 fa93 	bl	8006ce0 <BSP_IntHandler>
}
 80067ba:	bf00      	nop
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop

080067c0 <BSP_IntHandlerVADC0_G1_01>:
void BSP_IntHandlerVADC0_G1_01 (void)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G1_01);
 80067c4:	2017      	movs	r0, #23
 80067c6:	f000 fa8b 	bl	8006ce0 <BSP_IntHandler>
}
 80067ca:	bf00      	nop
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop

080067d0 <BSP_IntHandlerVADC0_G1_02>:
void BSP_IntHandlerVADC0_G1_02 (void)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G1_02);
 80067d4:	2018      	movs	r0, #24
 80067d6:	f000 fa83 	bl	8006ce0 <BSP_IntHandler>
}
 80067da:	bf00      	nop
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop

080067e0 <BSP_IntHandlerVADC0_G1_03>:
void BSP_IntHandlerVADC0_G1_03 (void)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G1_03);
 80067e4:	2019      	movs	r0, #25
 80067e6:	f000 fa7b 	bl	8006ce0 <BSP_IntHandler>
}
 80067ea:	bf00      	nop
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop

080067f0 <BSP_IntHandlerVADC0_G2_00>:
void BSP_IntHandlerVADC0_G2_00 (void)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G2_00);
 80067f4:	201a      	movs	r0, #26
 80067f6:	f000 fa73 	bl	8006ce0 <BSP_IntHandler>
}
 80067fa:	bf00      	nop
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop

08006800 <BSP_IntHandlerVADC0_G2_01>:
void BSP_IntHandlerVADC0_G2_01 (void)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G2_01);
 8006804:	201b      	movs	r0, #27
 8006806:	f000 fa6b 	bl	8006ce0 <BSP_IntHandler>
}
 800680a:	bf00      	nop
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop

08006810 <BSP_IntHandlerVADC0_G2_02>:
void BSP_IntHandlerVADC0_G2_02 (void)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G2_02);
 8006814:	201c      	movs	r0, #28
 8006816:	f000 fa63 	bl	8006ce0 <BSP_IntHandler>
}
 800681a:	bf00      	nop
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop

08006820 <BSP_IntHandlerVADC0_G2_03>:
void BSP_IntHandlerVADC0_G2_03 (void)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G2_03);
 8006824:	201d      	movs	r0, #29
 8006826:	f000 fa5b 	bl	8006ce0 <BSP_IntHandler>
}
 800682a:	bf00      	nop
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop

08006830 <BSP_IntHandlerVADC0_G3_00>:
void BSP_IntHandlerVADC0_G3_00 (void)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G3_00);
 8006834:	201e      	movs	r0, #30
 8006836:	f000 fa53 	bl	8006ce0 <BSP_IntHandler>
}
 800683a:	bf00      	nop
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop

08006840 <BSP_IntHandlerVADC0_G3_01>:
void BSP_IntHandlerVADC0_G3_01 (void)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G3_01);
 8006844:	201f      	movs	r0, #31
 8006846:	f000 fa4b 	bl	8006ce0 <BSP_IntHandler>
}
 800684a:	bf00      	nop
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop

08006850 <BSP_IntHandlerVADC0_G3_02>:
void BSP_IntHandlerVADC0_G3_02 (void)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G3_02);
 8006854:	2020      	movs	r0, #32
 8006856:	f000 fa43 	bl	8006ce0 <BSP_IntHandler>
}
 800685a:	bf00      	nop
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop

08006860 <BSP_IntHandlerVADC0_G3_03>:
void BSP_IntHandlerVADC0_G3_03 (void)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_VADC0_G3_03);
 8006864:	2021      	movs	r0, #33	; 0x21
 8006866:	f000 fa3b 	bl	8006ce0 <BSP_IntHandler>
}
 800686a:	bf00      	nop
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop

08006870 <BSP_IntHandlerDSD0_00>:
void BSP_IntHandlerDSD0_00 (void)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_00);
 8006874:	2022      	movs	r0, #34	; 0x22
 8006876:	f000 fa33 	bl	8006ce0 <BSP_IntHandler>
}
 800687a:	bf00      	nop
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop

08006880 <BSP_IntHandlerDSD0_01>:
void BSP_IntHandlerDSD0_01 (void)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_01);
 8006884:	2023      	movs	r0, #35	; 0x23
 8006886:	f000 fa2b 	bl	8006ce0 <BSP_IntHandler>
}
 800688a:	bf00      	nop
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop

08006890 <BSP_IntHandlerDSD0_02>:
void BSP_IntHandlerDSD0_02 (void)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_02);
 8006894:	2024      	movs	r0, #36	; 0x24
 8006896:	f000 fa23 	bl	8006ce0 <BSP_IntHandler>
}
 800689a:	bf00      	nop
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop

080068a0 <BSP_IntHandlerDSD0_03>:
void BSP_IntHandlerDSD0_03 (void)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_03);
 80068a4:	2025      	movs	r0, #37	; 0x25
 80068a6:	f000 fa1b 	bl	8006ce0 <BSP_IntHandler>
}
 80068aa:	bf00      	nop
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop

080068b0 <BSP_IntHandlerDSD0_04>:
void BSP_IntHandlerDSD0_04 (void)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_04);
 80068b4:	2026      	movs	r0, #38	; 0x26
 80068b6:	f000 fa13 	bl	8006ce0 <BSP_IntHandler>
}
 80068ba:	bf00      	nop
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop

080068c0 <BSP_IntHandlerDSD0_05>:
void BSP_IntHandlerDSD0_05 (void)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_05);
 80068c4:	2027      	movs	r0, #39	; 0x27
 80068c6:	f000 fa0b 	bl	8006ce0 <BSP_IntHandler>
}
 80068ca:	bf00      	nop
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop

080068d0 <BSP_IntHandlerDSD0_06>:
void BSP_IntHandlerDSD0_06 (void)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_06);
 80068d4:	2028      	movs	r0, #40	; 0x28
 80068d6:	f000 fa03 	bl	8006ce0 <BSP_IntHandler>
}
 80068da:	bf00      	nop
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop

080068e0 <BSP_IntHandlerDSD0_07>:
void BSP_IntHandlerDSD0_07 (void)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DSD0_07);
 80068e4:	2029      	movs	r0, #41	; 0x29
 80068e6:	f000 f9fb 	bl	8006ce0 <BSP_IntHandler>
}
 80068ea:	bf00      	nop
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop

080068f0 <BSP_IntHandlerDAC0_00>:
void BSP_IntHandlerDAC0_00 (void)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DAC0_00);
 80068f4:	202a      	movs	r0, #42	; 0x2a
 80068f6:	f000 f9f3 	bl	8006ce0 <BSP_IntHandler>
}
 80068fa:	bf00      	nop
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop

08006900 <BSP_IntHandlerDAC0_01>:
void BSP_IntHandlerDAC0_01 (void)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_DAC0_01);
 8006904:	202b      	movs	r0, #43	; 0x2b
 8006906:	f000 f9eb 	bl	8006ce0 <BSP_IntHandler>
}
 800690a:	bf00      	nop
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop

08006910 <BSP_IntHandlerCCU40_00>:
void BSP_IntHandlerCCU40_00 (void)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU40_00);
 8006914:	202c      	movs	r0, #44	; 0x2c
 8006916:	f000 f9e3 	bl	8006ce0 <BSP_IntHandler>
}
 800691a:	bf00      	nop
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop

08006920 <BSP_IntHandlerCCU40_01>:
void BSP_IntHandlerCCU40_01 (void)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU40_01);
 8006924:	202d      	movs	r0, #45	; 0x2d
 8006926:	f000 f9db 	bl	8006ce0 <BSP_IntHandler>
}
 800692a:	bf00      	nop
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop

08006930 <BSP_IntHandlerCCU40_02>:
void BSP_IntHandlerCCU40_02 (void)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU40_02);
 8006934:	202e      	movs	r0, #46	; 0x2e
 8006936:	f000 f9d3 	bl	8006ce0 <BSP_IntHandler>
}
 800693a:	bf00      	nop
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop

08006940 <BSP_IntHandlerCCU40_03>:
void BSP_IntHandlerCCU40_03 (void)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU40_03);
 8006944:	202f      	movs	r0, #47	; 0x2f
 8006946:	f000 f9cb 	bl	8006ce0 <BSP_IntHandler>
}
 800694a:	bf00      	nop
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop

08006950 <BSP_IntHandlerCCU41_00>:
void BSP_IntHandlerCCU41_00 (void)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU41_00);
 8006954:	2030      	movs	r0, #48	; 0x30
 8006956:	f000 f9c3 	bl	8006ce0 <BSP_IntHandler>
}
 800695a:	bf00      	nop
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop

08006960 <BSP_IntHandlerCCU41_01>:
void BSP_IntHandlerCCU41_01 (void)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU41_01);
 8006964:	2031      	movs	r0, #49	; 0x31
 8006966:	f000 f9bb 	bl	8006ce0 <BSP_IntHandler>
}
 800696a:	bf00      	nop
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop

08006970 <BSP_IntHandlerCCU41_02>:
void BSP_IntHandlerCCU41_02 (void)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU41_02);
 8006974:	2032      	movs	r0, #50	; 0x32
 8006976:	f000 f9b3 	bl	8006ce0 <BSP_IntHandler>
}
 800697a:	bf00      	nop
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop

08006980 <BSP_IntHandlerCCU41_03>:
void BSP_IntHandlerCCU41_03 (void)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU41_03);
 8006984:	2033      	movs	r0, #51	; 0x33
 8006986:	f000 f9ab 	bl	8006ce0 <BSP_IntHandler>
}
 800698a:	bf00      	nop
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop

08006990 <BSP_IntHandlerCCU42_00>:
void BSP_IntHandlerCCU42_00 (void)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU42_00);
 8006994:	2034      	movs	r0, #52	; 0x34
 8006996:	f000 f9a3 	bl	8006ce0 <BSP_IntHandler>
}
 800699a:	bf00      	nop
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop

080069a0 <BSP_IntHandlerCCU42_01>:
void BSP_IntHandlerCCU42_01 (void)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU42_01);
 80069a4:	2035      	movs	r0, #53	; 0x35
 80069a6:	f000 f99b 	bl	8006ce0 <BSP_IntHandler>
}
 80069aa:	bf00      	nop
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop

080069b0 <BSP_IntHandlerCCU42_02>:
void BSP_IntHandlerCCU42_02 (void)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU42_02);
 80069b4:	2036      	movs	r0, #54	; 0x36
 80069b6:	f000 f993 	bl	8006ce0 <BSP_IntHandler>
}
 80069ba:	bf00      	nop
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop

080069c0 <BSP_IntHandlerCCU42_03>:
void BSP_IntHandlerCCU42_03 (void)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU42_03);
 80069c4:	2037      	movs	r0, #55	; 0x37
 80069c6:	f000 f98b 	bl	8006ce0 <BSP_IntHandler>
}
 80069ca:	bf00      	nop
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop

080069d0 <BSP_IntHandlerCCU43_00>:
void BSP_IntHandlerCCU43_00 (void)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU43_00);
 80069d4:	2038      	movs	r0, #56	; 0x38
 80069d6:	f000 f983 	bl	8006ce0 <BSP_IntHandler>
}
 80069da:	bf00      	nop
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop

080069e0 <BSP_IntHandlerCCU43_01>:
void BSP_IntHandlerCCU43_01 (void)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU43_01);
 80069e4:	2039      	movs	r0, #57	; 0x39
 80069e6:	f000 f97b 	bl	8006ce0 <BSP_IntHandler>
}
 80069ea:	bf00      	nop
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop

080069f0 <BSP_IntHandlerCCU43_02>:
void BSP_IntHandlerCCU43_02 (void)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU43_02);
 80069f4:	203a      	movs	r0, #58	; 0x3a
 80069f6:	f000 f973 	bl	8006ce0 <BSP_IntHandler>
}
 80069fa:	bf00      	nop
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop

08006a00 <BSP_IntHandlerCCU43_03>:
void BSP_IntHandlerCCU43_03 (void)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU43_03);
 8006a04:	203b      	movs	r0, #59	; 0x3b
 8006a06:	f000 f96b 	bl	8006ce0 <BSP_IntHandler>
}
 8006a0a:	bf00      	nop
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop

08006a10 <BSP_IntHandlerCCU80_00>:
void BSP_IntHandlerCCU80_00 (void)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU80_00);
 8006a14:	203c      	movs	r0, #60	; 0x3c
 8006a16:	f000 f963 	bl	8006ce0 <BSP_IntHandler>
}
 8006a1a:	bf00      	nop
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop

08006a20 <BSP_IntHandlerCCU80_01>:
void BSP_IntHandlerCCU80_01 (void)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU80_01);
 8006a24:	203d      	movs	r0, #61	; 0x3d
 8006a26:	f000 f95b 	bl	8006ce0 <BSP_IntHandler>
}
 8006a2a:	bf00      	nop
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop

08006a30 <BSP_IntHandlerCCU80_02>:
void BSP_IntHandlerCCU80_02 (void)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU80_02);
 8006a34:	203e      	movs	r0, #62	; 0x3e
 8006a36:	f000 f953 	bl	8006ce0 <BSP_IntHandler>
}
 8006a3a:	bf00      	nop
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop

08006a40 <BSP_IntHandlerCCU80_03>:
void BSP_IntHandlerCCU80_03 (void)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU80_03);
 8006a44:	203f      	movs	r0, #63	; 0x3f
 8006a46:	f000 f94b 	bl	8006ce0 <BSP_IntHandler>
}
 8006a4a:	bf00      	nop
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop

08006a50 <BSP_IntHandlerCCU81_00>:
void BSP_IntHandlerCCU81_00 (void)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU81_00);
 8006a54:	2040      	movs	r0, #64	; 0x40
 8006a56:	f000 f943 	bl	8006ce0 <BSP_IntHandler>
}
 8006a5a:	bf00      	nop
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop

08006a60 <BSP_IntHandlerCCU81_01>:
void BSP_IntHandlerCCU81_01 (void)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU81_01);
 8006a64:	2041      	movs	r0, #65	; 0x41
 8006a66:	f000 f93b 	bl	8006ce0 <BSP_IntHandler>
}
 8006a6a:	bf00      	nop
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop

08006a70 <BSP_IntHandlerCCU81_02>:
void BSP_IntHandlerCCU81_02 (void)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU81_02);
 8006a74:	2042      	movs	r0, #66	; 0x42
 8006a76:	f000 f933 	bl	8006ce0 <BSP_IntHandler>
}
 8006a7a:	bf00      	nop
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop

08006a80 <BSP_IntHandlerCCU81_03>:
void BSP_IntHandlerCCU81_03 (void)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CCU81_03);
 8006a84:	2043      	movs	r0, #67	; 0x43
 8006a86:	f000 f92b 	bl	8006ce0 <BSP_IntHandler>
}
 8006a8a:	bf00      	nop
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop

08006a90 <BSP_IntHandlerPOSIF0_00>:
void BSP_IntHandlerPOSIF0_00 (void)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_POSIF0_00);
 8006a94:	2044      	movs	r0, #68	; 0x44
 8006a96:	f000 f923 	bl	8006ce0 <BSP_IntHandler>
}
 8006a9a:	bf00      	nop
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop

08006aa0 <BSP_IntHandlerPOSIF0_01>:
void BSP_IntHandlerPOSIF0_01 (void)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_POSIF0_01);
 8006aa4:	2045      	movs	r0, #69	; 0x45
 8006aa6:	f000 f91b 	bl	8006ce0 <BSP_IntHandler>
}
 8006aaa:	bf00      	nop
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop

08006ab0 <BSP_IntHandlerPOSIF1_00>:
void BSP_IntHandlerPOSIF1_00 (void)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_POSIF1_00);
 8006ab4:	2046      	movs	r0, #70	; 0x46
 8006ab6:	f000 f913 	bl	8006ce0 <BSP_IntHandler>
}
 8006aba:	bf00      	nop
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop

08006ac0 <BSP_IntHandlerPOSIF1_01>:
void BSP_IntHandlerPOSIF1_01 (void)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_POSIF1_01);
 8006ac4:	2047      	movs	r0, #71	; 0x47
 8006ac6:	f000 f90b 	bl	8006ce0 <BSP_IntHandler>
}
 8006aca:	bf00      	nop
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop

08006ad0 <BSP_IntHandlerCAN0_00>:
void BSP_IntHandlerCAN0_00 (void)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_00);
 8006ad4:	204c      	movs	r0, #76	; 0x4c
 8006ad6:	f000 f903 	bl	8006ce0 <BSP_IntHandler>
}
 8006ada:	bf00      	nop
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop

08006ae0 <BSP_IntHandlerCAN0_01>:
void BSP_IntHandlerCAN0_01 (void)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_01);
 8006ae4:	204d      	movs	r0, #77	; 0x4d
 8006ae6:	f000 f8fb 	bl	8006ce0 <BSP_IntHandler>
}
 8006aea:	bf00      	nop
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop

08006af0 <BSP_IntHandlerCAN0_02>:
void BSP_IntHandlerCAN0_02 (void)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_02);
 8006af4:	204e      	movs	r0, #78	; 0x4e
 8006af6:	f000 f8f3 	bl	8006ce0 <BSP_IntHandler>
}
 8006afa:	bf00      	nop
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop

08006b00 <BSP_IntHandlerCAN0_03>:
void BSP_IntHandlerCAN0_03 (void)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_03);
 8006b04:	204f      	movs	r0, #79	; 0x4f
 8006b06:	f000 f8eb 	bl	8006ce0 <BSP_IntHandler>
}
 8006b0a:	bf00      	nop
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop

08006b10 <BSP_IntHandlerCAN0_04>:
void BSP_IntHandlerCAN0_04 (void)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_04);
 8006b14:	2050      	movs	r0, #80	; 0x50
 8006b16:	f000 f8e3 	bl	8006ce0 <BSP_IntHandler>
}
 8006b1a:	bf00      	nop
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop

08006b20 <BSP_IntHandlerCAN0_05>:
void BSP_IntHandlerCAN0_05 (void)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_05);
 8006b24:	2051      	movs	r0, #81	; 0x51
 8006b26:	f000 f8db 	bl	8006ce0 <BSP_IntHandler>
}
 8006b2a:	bf00      	nop
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop

08006b30 <BSP_IntHandlerCAN0_06>:
void BSP_IntHandlerCAN0_06 (void)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_06);
 8006b34:	2052      	movs	r0, #82	; 0x52
 8006b36:	f000 f8d3 	bl	8006ce0 <BSP_IntHandler>
}
 8006b3a:	bf00      	nop
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop

08006b40 <BSP_IntHandlerCAN0_07>:
void BSP_IntHandlerCAN0_07 (void)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_CAN0_07);
 8006b44:	2053      	movs	r0, #83	; 0x53
 8006b46:	f000 f8cb 	bl	8006ce0 <BSP_IntHandler>
}
 8006b4a:	bf00      	nop
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop

08006b50 <BSP_IntHandlerUSIC0_00>:
void BSP_IntHandlerUSIC0_00 (void)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC0_00);
 8006b54:	2054      	movs	r0, #84	; 0x54
 8006b56:	f000 f8c3 	bl	8006ce0 <BSP_IntHandler>
}
 8006b5a:	bf00      	nop
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop

08006b60 <BSP_IntHandlerUSIC0_01>:
void BSP_IntHandlerUSIC0_01 (void)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC0_01);
 8006b64:	2055      	movs	r0, #85	; 0x55
 8006b66:	f000 f8bb 	bl	8006ce0 <BSP_IntHandler>
}
 8006b6a:	bf00      	nop
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop

08006b70 <BSP_IntHandlerUSIC0_02>:
void BSP_IntHandlerUSIC0_02 (void)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC0_02);
 8006b74:	2056      	movs	r0, #86	; 0x56
 8006b76:	f000 f8b3 	bl	8006ce0 <BSP_IntHandler>
}
 8006b7a:	bf00      	nop
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop

08006b80 <BSP_IntHandlerUSIC0_03>:
void BSP_IntHandlerUSIC0_03 (void)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC0_03);
 8006b84:	2057      	movs	r0, #87	; 0x57
 8006b86:	f000 f8ab 	bl	8006ce0 <BSP_IntHandler>
}
 8006b8a:	bf00      	nop
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop

08006b90 <BSP_IntHandlerUSIC0_04>:
void BSP_IntHandlerUSIC0_04 (void)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC0_04);
 8006b94:	2058      	movs	r0, #88	; 0x58
 8006b96:	f000 f8a3 	bl	8006ce0 <BSP_IntHandler>
}
 8006b9a:	bf00      	nop
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop

08006ba0 <BSP_IntHandlerUSIC0_05>:
void BSP_IntHandlerUSIC0_05 (void)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC0_05);
 8006ba4:	2059      	movs	r0, #89	; 0x59
 8006ba6:	f000 f89b 	bl	8006ce0 <BSP_IntHandler>
}
 8006baa:	bf00      	nop
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop

08006bb0 <BSP_IntHandlerUSIC1_00>:
void BSP_IntHandlerUSIC1_00 (void)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC1_00);
 8006bb4:	205a      	movs	r0, #90	; 0x5a
 8006bb6:	f000 f893 	bl	8006ce0 <BSP_IntHandler>
}
 8006bba:	bf00      	nop
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop

08006bc0 <BSP_IntHandlerUSIC1_01>:
void BSP_IntHandlerUSIC1_01 (void)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC1_01);
 8006bc4:	205b      	movs	r0, #91	; 0x5b
 8006bc6:	f000 f88b 	bl	8006ce0 <BSP_IntHandler>
}
 8006bca:	bf00      	nop
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop

08006bd0 <BSP_IntHandlerUSIC1_02>:
void BSP_IntHandlerUSIC1_02 (void)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC1_02);
 8006bd4:	205c      	movs	r0, #92	; 0x5c
 8006bd6:	f000 f883 	bl	8006ce0 <BSP_IntHandler>
}
 8006bda:	bf00      	nop
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop

08006be0 <BSP_IntHandlerUSIC1_03>:
void BSP_IntHandlerUSIC1_03 (void)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC1_03);
 8006be4:	205d      	movs	r0, #93	; 0x5d
 8006be6:	f000 f87b 	bl	8006ce0 <BSP_IntHandler>
}
 8006bea:	bf00      	nop
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop

08006bf0 <BSP_IntHandlerUSIC1_04>:
void BSP_IntHandlerUSIC1_04 (void)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC1_04);
 8006bf4:	205e      	movs	r0, #94	; 0x5e
 8006bf6:	f000 f873 	bl	8006ce0 <BSP_IntHandler>
}
 8006bfa:	bf00      	nop
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop

08006c00 <BSP_IntHandlerUSIC1_05>:
void BSP_IntHandlerUSIC1_05 (void)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC1_05);
 8006c04:	205f      	movs	r0, #95	; 0x5f
 8006c06:	f000 f86b 	bl	8006ce0 <BSP_IntHandler>
}
 8006c0a:	bf00      	nop
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop

08006c10 <BSP_IntHandlerUSIC2_00>:
void BSP_IntHandlerUSIC2_00 (void)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC2_00);
 8006c14:	2060      	movs	r0, #96	; 0x60
 8006c16:	f000 f863 	bl	8006ce0 <BSP_IntHandler>
}
 8006c1a:	bf00      	nop
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop

08006c20 <BSP_IntHandlerUSIC2_01>:
void BSP_IntHandlerUSIC2_01 (void)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC2_01);
 8006c24:	2061      	movs	r0, #97	; 0x61
 8006c26:	f000 f85b 	bl	8006ce0 <BSP_IntHandler>
}
 8006c2a:	bf00      	nop
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop

08006c30 <BSP_IntHandlerUSIC2_02>:
void BSP_IntHandlerUSIC2_02 (void)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC2_02);
 8006c34:	2062      	movs	r0, #98	; 0x62
 8006c36:	f000 f853 	bl	8006ce0 <BSP_IntHandler>
}
 8006c3a:	bf00      	nop
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop

08006c40 <BSP_IntHandlerUSIC2_03>:
void BSP_IntHandlerUSIC2_03 (void)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC2_03);
 8006c44:	2063      	movs	r0, #99	; 0x63
 8006c46:	f000 f84b 	bl	8006ce0 <BSP_IntHandler>
}
 8006c4a:	bf00      	nop
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop

08006c50 <BSP_IntHandlerUSIC2_04>:
void BSP_IntHandlerUSIC2_04 (void)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC2_04);
 8006c54:	2064      	movs	r0, #100	; 0x64
 8006c56:	f000 f843 	bl	8006ce0 <BSP_IntHandler>
}
 8006c5a:	bf00      	nop
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop

08006c60 <BSP_IntHandlerUSIC2_05>:
void BSP_IntHandlerUSIC2_05 (void)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USIC2_05);
 8006c64:	2065      	movs	r0, #101	; 0x65
 8006c66:	f000 f83b 	bl	8006ce0 <BSP_IntHandler>
}
 8006c6a:	bf00      	nop
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop

08006c70 <BSP_IntHandlerLEDTS0_00>:
void BSP_IntHandlerLEDTS0_00 (void)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_LEDTS0_00);
 8006c74:	2066      	movs	r0, #102	; 0x66
 8006c76:	f000 f833 	bl	8006ce0 <BSP_IntHandler>
}
 8006c7a:	bf00      	nop
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop

08006c80 <BSP_IntHandlerFCE0_00>:
void BSP_IntHandlerFCE0_00 (void)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_FCE0_00);
 8006c84:	2068      	movs	r0, #104	; 0x68
 8006c86:	f000 f82b 	bl	8006ce0 <BSP_IntHandler>
}
 8006c8a:	bf00      	nop
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop

08006c90 <BSP_IntHandlerGPDMA0_00>:
void BSP_IntHandlerGPDMA0_00 (void)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_GPDMA0_00);
 8006c94:	2069      	movs	r0, #105	; 0x69
 8006c96:	f000 f823 	bl	8006ce0 <BSP_IntHandler>
}
 8006c9a:	bf00      	nop
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop

08006ca0 <BSP_IntHandlerSDMMC0_00>:
void BSP_IntHandlerSDMMC0_00 (void)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_SDMMC0_00);
 8006ca4:	206a      	movs	r0, #106	; 0x6a
 8006ca6:	f000 f81b 	bl	8006ce0 <BSP_IntHandler>
}
 8006caa:	bf00      	nop
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop

08006cb0 <BSP_IntHandlerUSB0_00>:
void BSP_IntHandlerUSB0_00 (void)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_USB0_00);
 8006cb4:	206b      	movs	r0, #107	; 0x6b
 8006cb6:	f000 f813 	bl	8006ce0 <BSP_IntHandler>
}
 8006cba:	bf00      	nop
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop

08006cc0 <BSP_IntHandlerETH0_00>:
void BSP_IntHandlerETH0_00 (void)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_ETH0_00);
 8006cc4:	206c      	movs	r0, #108	; 0x6c
 8006cc6:	f000 f80b 	bl	8006ce0 <BSP_IntHandler>
}
 8006cca:	bf00      	nop
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop

08006cd0 <BSP_IntHandlerGPDMA1_00>:
void BSP_IntHandlerGPDMA1_00 (void)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	af00      	add	r7, sp, #0
	BSP_IntHandler (BSP_INT_ID_GPDMA1_00);
 8006cd4:	206e      	movs	r0, #110	; 0x6e
 8006cd6:	f000 f803 	bl	8006ce0 <BSP_IntHandler>
}
 8006cda:	bf00      	nop
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	bf00      	nop

08006ce0 <BSP_IntHandler>:
 * \params   int_id interrupt that will be handled
 * \returns  none
 * \brief    central interrupt handler
 */
static  void  BSP_IntHandler (CPU_DATA  int_id)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
	CPU_FNCT_VOID  isr;
	CPU_SR_ALLOC();
 8006ce8:	2300      	movs	r3, #0
 8006cea:	60fb      	str	r3, [r7, #12]

	/* tell the OS that we are starting an ISR */
	CPU_CRITICAL_ENTER();
 8006cec:	f7f9 faf8 	bl	80002e0 <CPU_SR_Save>
 8006cf0:	60f8      	str	r0, [r7, #12]
	OSIntEnter();
 8006cf2:	f7fc fc75 	bl	80035e0 <OSIntEnter>
	CPU_CRITICAL_EXIT();
 8006cf6:	68f8      	ldr	r0, [r7, #12]
 8006cf8:	f7f9 faf6 	bl	80002e8 <CPU_SR_Restore>

	if (int_id < BSP_INT_ID_MAX) {
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2b6f      	cmp	r3, #111	; 0x6f
 8006d00:	d809      	bhi.n	8006d16 <BSP_IntHandler+0x36>
		isr = BSP_IntVectTbl[int_id];
 8006d02:	4a08      	ldr	r2, [pc, #32]	; (8006d24 <BSP_IntHandler+0x44>)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d0a:	60bb      	str	r3, [r7, #8]
		if (isr != (CPU_FNCT_VOID) 0) {
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d001      	beq.n	8006d16 <BSP_IntHandler+0x36>
			isr();
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	4798      	blx	r3
		}
	}
	/* tell the OS that we are leaving an ISR */
	OSIntExit();
 8006d16:	f7fc fc7f 	bl	8003618 <OSIntExit>
}
 8006d1a:	bf00      	nop
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	20001cf8 	.word	0x20001cf8

08006d28 <BSP_GPIO_Init>:
/**
 * @brief  Initialize UART1 CH1 - Tx=P0.1, Rx=P0.0, 9600-8N1
 * @return true on success, false otherwise
 */
_Bool BSP_GPIO_Init (void)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	af00      	add	r7, sp, #0

	XMC_GPIO_Init(SERVO_CCU4, &servo_config);
 8006d2c:	4a0d      	ldr	r2, [pc, #52]	; (8006d64 <BSP_GPIO_Init+0x3c>)
 8006d2e:	2103      	movs	r1, #3
 8006d30:	480d      	ldr	r0, [pc, #52]	; (8006d68 <BSP_GPIO_Init+0x40>)
 8006d32:	f001 f999 	bl	8008068 <XMC_GPIO_Init>

	XMC_GPIO_SetMode(ENDSTOP1,XMC_GPIO_MODE_INPUT_PULL_DOWN);
 8006d36:	2208      	movs	r2, #8
 8006d38:	210f      	movs	r1, #15
 8006d3a:	480b      	ldr	r0, [pc, #44]	; (8006d68 <BSP_GPIO_Init+0x40>)
 8006d3c:	f001 f954 	bl	8007fe8 <XMC_GPIO_SetMode>
	XMC_GPIO_SetMode(ENDSTOP2,XMC_GPIO_MODE_INPUT_PULL_DOWN);
 8006d40:	2208      	movs	r2, #8
 8006d42:	210d      	movs	r1, #13
 8006d44:	4808      	ldr	r0, [pc, #32]	; (8006d68 <BSP_GPIO_Init+0x40>)
 8006d46:	f001 f94f 	bl	8007fe8 <XMC_GPIO_SetMode>
	XMC_GPIO_SetMode(ENDSTOP3,XMC_GPIO_MODE_INPUT_PULL_DOWN);
 8006d4a:	2208      	movs	r2, #8
 8006d4c:	210e      	movs	r1, #14
 8006d4e:	4806      	ldr	r0, [pc, #24]	; (8006d68 <BSP_GPIO_Init+0x40>)
 8006d50:	f001 f94a 	bl	8007fe8 <XMC_GPIO_SetMode>
	XMC_GPIO_SetMode(ENDSTOP4,XMC_GPIO_MODE_INPUT_PULL_DOWN);
 8006d54:	2208      	movs	r2, #8
 8006d56:	210c      	movs	r1, #12
 8006d58:	4803      	ldr	r0, [pc, #12]	; (8006d68 <BSP_GPIO_Init+0x40>)
 8006d5a:	f001 f945 	bl	8007fe8 <XMC_GPIO_SetMode>

	return true;
 8006d5e:	2301      	movs	r3, #1
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	20000004 	.word	0x20000004
 8006d68:	48028100 	.word	0x48028100

08006d6c <XMC_USIC_CH_SetInputSource>:
 * Baudrate is configured by considering the peripheral frequency and the desired baudrate.
 * Optimum values of FDR->STEP and BRG->PDIV are calulated and used for generating the desired
 * baudrate.
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetStartTransmisionMode(), XMC_USIC_CH_SetInputSource() \n\n\n
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	460b      	mov	r3, r1
 8006d76:	70fb      	strb	r3, [r7, #3]
 8006d78:	4613      	mov	r3, r2
 8006d7a:	70bb      	strb	r3, [r7, #2]
 */
 8006d7c:	78f8      	ldrb	r0, [r7, #3]
 8006d7e:	78fb      	ldrb	r3, [r7, #3]
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	3306      	adds	r3, #6
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	4413      	add	r3, r2
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	f023 0207 	bic.w	r2, r3, #7
XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling);
 8006d8e:	78bb      	ldrb	r3, [r7, #2]
 * Optimum values of FDR->STEP and BRG->PDIV are calulated and used for generating the desired
 * baudrate.
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetStartTransmisionMode(), XMC_USIC_CH_SetInputSource() \n\n\n
 */
 8006d90:	431a      	orrs	r2, r3
 8006d92:	6879      	ldr	r1, [r7, #4]
 8006d94:	1d83      	adds	r3, r0, #6
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	440b      	add	r3, r1
 8006d9a:	605a      	str	r2, [r3, #4]
XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling);

 8006d9c:	bf00      	nop
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bc80      	pop	{r7}
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop

08006da8 <XMC_USIC_CH_SetMode>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	460b      	mov	r3, r1
 8006db2:	70fb      	strb	r3, [r7, #3]
  channel->TRBSCR |= (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db8:	f023 020f 	bic.w	r2, r3, #15
 8006dbc:	78fb      	ldrb	r3, [r7, #3]
 8006dbe:	431a      	orrs	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8006dc4:	bf00      	nop
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bc80      	pop	{r7}
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop

08006dd0 <XMC_SPI_CH_Start>:
 * <li>Set polarity for the Slave signal,</li>
 * <li>Enable Frame end mode(MSLS signal is kept active after transmission of a frame)</li>
 * </ul>
 */
void XMC_SPI_CH_Init(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config);

 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
/**
 * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 8006dd8:	2101      	movs	r1, #1
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f7ff ffe4 	bl	8006da8 <XMC_USIC_CH_SetMode>
 *
 8006de0:	bf00      	nop
 8006de2:	3708      	adds	r7, #8
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <XMC_SPI_CH_GetStatusFlag>:
 * After disabling the events, XMC_SPI_CH_EnableEvent() has to be invoked to re-enable the events.
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_EnableEvent()
 */
void XMC_SPI_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event);
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]

 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
/**
 8006df4:	4618      	mov	r0, r3
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bc80      	pop	{r7}
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop

08006e00 <XMC_SPI_CH_ClearStatusFlag>:
  return channel->PSR_SSCMode;
}

/**
 * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 * @param flag Protocol event status to be cleared for detection of next occurence.
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
 *              Refer @ XMC_SPI_CH_STATUS_FLAG_t for valid values. <b>OR</b> combinations of these enum item can be used 
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	431a      	orrs	r2, r3
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	64da      	str	r2, [r3, #76]	; 0x4c
 *              as input.
 8006e16:	bf00      	nop
 8006e18:	370c      	adds	r7, #12
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bc80      	pop	{r7}
 8006e1e:	4770      	bx	lr

08006e20 <XMC_SPI_CH_SetInputSource>:
 * @param  channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 *
 * @return None
 *
 * \par<b>Description</b><br>
 * Configure the handling of end of frame through software, by setting TCSR.EOF bit.\n\n
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	460b      	mov	r3, r1
 8006e2a:	70fb      	strb	r3, [r7, #3]
 8006e2c:	4613      	mov	r3, r2
 8006e2e:	70bb      	strb	r3, [r7, #2]
 * This can be used if the software handles the TBUF data without FIFO. If EOF is set, a valid content of the TBUF is 
 8006e30:	78fb      	ldrb	r3, [r7, #3]
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	3306      	adds	r3, #6
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4413      	add	r3, r2
 8006e3a:	2210      	movs	r2, #16
 8006e3c:	605a      	str	r2, [r3, #4]
 * considered as last word of a frame. After transfer of the last word, MSLS signal becomes inactive. For software 
 8006e3e:	78ba      	ldrb	r2, [r7, #2]
 8006e40:	78fb      	ldrb	r3, [r7, #3]
 8006e42:	4619      	mov	r1, r3
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f7ff ff91 	bl	8006d6c <XMC_USIC_CH_SetInputSource>
 * handling of EOF bit, it is recommended to configure TCSR.WLEMD as 0. \n
 8006e4a:	bf00      	nop
 8006e4c:	3708      	adds	r7, #8
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop

08006e54 <XMC_GPIO_SetOutputHigh>:

/**
 *
 * @param port constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	70fb      	strb	r3, [r7, #3]
 * @param pin  port pin number.
 *
 * @return None
 8006e60:	78fb      	ldrb	r3, [r7, #3]
 8006e62:	2201      	movs	r2, #1
 8006e64:	409a      	lsls	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	605a      	str	r2, [r3, #4]
 *
 8006e6a:	bf00      	nop
 8006e6c:	370c      	adds	r7, #12
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bc80      	pop	{r7}
 8006e72:	4770      	bx	lr

08006e74 <BSP_SPI_Init>:
 *  @brief This function configures the SPI interface to communicate with the MCP23S08 & the MCP3004
 *  @param none
 *  @return on success this function returns SPI_OK (0)
 */
uint8_t BSP_SPI_Init(void)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	af00      	add	r7, sp, #0
	/*Initialize and Start SPI*/
	XMC_SPI_CH_Init(XMC_SPI1_CH0, &spi_config);
 8006e78:	4929      	ldr	r1, [pc, #164]	; (8006f20 <BSP_SPI_Init+0xac>)
 8006e7a:	482a      	ldr	r0, [pc, #168]	; (8006f24 <BSP_SPI_Init+0xb0>)
 8006e7c:	f000 ff38 	bl	8007cf0 <XMC_SPI_CH_Init>

	/*Input source selected*/
	XMC_SPI_CH_SetInputSource(XMC_SPI1_CH0,XMC_SPI_CH_INPUT_DIN0,USIC1_C0_DX0_P0_4);
 8006e80:	2200      	movs	r2, #0
 8006e82:	2100      	movs	r1, #0
 8006e84:	4827      	ldr	r0, [pc, #156]	; (8006f24 <BSP_SPI_Init+0xb0>)
 8006e86:	f7ff ffcb 	bl	8006e20 <XMC_SPI_CH_SetInputSource>
	XMC_SPI_CH_EnableEvent(XMC_SPI1_CH0,XMC_SPI_CH_EVENT_STANDARD_RECEIVE);
 8006e8a:	4927      	ldr	r1, [pc, #156]	; (8006f28 <BSP_SPI_Init+0xb4>)
 8006e8c:	4825      	ldr	r0, [pc, #148]	; (8006f24 <BSP_SPI_Init+0xb0>)
 8006e8e:	f000 ffc3 	bl	8007e18 <XMC_SPI_CH_EnableEvent>
	XMC_SPI_CH_Start(XMC_SPI1_CH0);
 8006e92:	4824      	ldr	r0, [pc, #144]	; (8006f24 <BSP_SPI_Init+0xb0>)
 8006e94:	f7ff ff9c 	bl	8006dd0 <XMC_SPI_CH_Start>

	/*GPIO configuration*/
	XMC_GPIO_SetMode(SPI_MOSI, XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT2);
 8006e98:	2290      	movs	r2, #144	; 0x90
 8006e9a:	2105      	movs	r1, #5
 8006e9c:	4823      	ldr	r0, [pc, #140]	; (8006f2c <BSP_SPI_Init+0xb8>)
 8006e9e:	f001 f8a3 	bl	8007fe8 <XMC_GPIO_SetMode>
	XMC_GPIO_SetMode(SPI_MISO, XMC_GPIO_MODE_INPUT_TRISTATE);
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	2104      	movs	r1, #4
 8006ea6:	4821      	ldr	r0, [pc, #132]	; (8006f2c <BSP_SPI_Init+0xb8>)
 8006ea8:	f001 f89e 	bl	8007fe8 <XMC_GPIO_SetMode>
	XMC_GPIO_SetMode(SPI_SCLK, XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT2);
 8006eac:	2290      	movs	r2, #144	; 0x90
 8006eae:	210b      	movs	r1, #11
 8006eb0:	481e      	ldr	r0, [pc, #120]	; (8006f2c <BSP_SPI_Init+0xb8>)
 8006eb2:	f001 f899 	bl	8007fe8 <XMC_GPIO_SetMode>

	gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL;
 8006eb6:	4b1e      	ldr	r3, [pc, #120]	; (8006f30 <BSP_SPI_Init+0xbc>)
 8006eb8:	2280      	movs	r2, #128	; 0x80
 8006eba:	701a      	strb	r2, [r3, #0]
	gpio_config.output_level = XMC_GPIO_OUTPUT_LEVEL_HIGH;
 8006ebc:	4b1c      	ldr	r3, [pc, #112]	; (8006f30 <BSP_SPI_Init+0xbc>)
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	605a      	str	r2, [r3, #4]
	gpio_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_MEDIUM;
 8006ec2:	4b1b      	ldr	r3, [pc, #108]	; (8006f30 <BSP_SPI_Init+0xbc>)
 8006ec4:	2204      	movs	r2, #4
 8006ec6:	721a      	strb	r2, [r3, #8]

	XMC_GPIO_Init(MCP23S08_SS, &gpio_config); //IO-Expander CS
 8006ec8:	4a19      	ldr	r2, [pc, #100]	; (8006f30 <BSP_SPI_Init+0xbc>)
 8006eca:	2102      	movs	r1, #2
 8006ecc:	4819      	ldr	r0, [pc, #100]	; (8006f34 <BSP_SPI_Init+0xc0>)
 8006ece:	f001 f8cb 	bl	8008068 <XMC_GPIO_Init>
	XMC_GPIO_SetOutputHigh(MCP23S08_SS);
 8006ed2:	2102      	movs	r1, #2
 8006ed4:	4817      	ldr	r0, [pc, #92]	; (8006f34 <BSP_SPI_Init+0xc0>)
 8006ed6:	f7ff ffbd 	bl	8006e54 <XMC_GPIO_SetOutputHigh>

	gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL;
 8006eda:	4b15      	ldr	r3, [pc, #84]	; (8006f30 <BSP_SPI_Init+0xbc>)
 8006edc:	2280      	movs	r2, #128	; 0x80
 8006ede:	701a      	strb	r2, [r3, #0]
	gpio_config.output_level = XMC_GPIO_OUTPUT_LEVEL_HIGH;
 8006ee0:	4b13      	ldr	r3, [pc, #76]	; (8006f30 <BSP_SPI_Init+0xbc>)
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	605a      	str	r2, [r3, #4]
	gpio_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_MEDIUM;
 8006ee6:	4b12      	ldr	r3, [pc, #72]	; (8006f30 <BSP_SPI_Init+0xbc>)
 8006ee8:	2204      	movs	r2, #4
 8006eea:	721a      	strb	r2, [r3, #8]

	XMC_GPIO_Init(MCP3004_SS, &gpio_config); //ADC-CS
 8006eec:	4a10      	ldr	r2, [pc, #64]	; (8006f30 <BSP_SPI_Init+0xbc>)
 8006eee:	2104      	movs	r1, #4
 8006ef0:	4810      	ldr	r0, [pc, #64]	; (8006f34 <BSP_SPI_Init+0xc0>)
 8006ef2:	f001 f8b9 	bl	8008068 <XMC_GPIO_Init>
	XMC_GPIO_SetOutputHigh(MCP3004_SS);
 8006ef6:	2104      	movs	r1, #4
 8006ef8:	480e      	ldr	r0, [pc, #56]	; (8006f34 <BSP_SPI_Init+0xc0>)
 8006efa:	f7ff ffab 	bl	8006e54 <XMC_GPIO_SetOutputHigh>

	gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL;
 8006efe:	4b0c      	ldr	r3, [pc, #48]	; (8006f30 <BSP_SPI_Init+0xbc>)
 8006f00:	2280      	movs	r2, #128	; 0x80
 8006f02:	701a      	strb	r2, [r3, #0]
	gpio_config.output_level = XMC_GPIO_OUTPUT_LEVEL_HIGH;
 8006f04:	4b0a      	ldr	r3, [pc, #40]	; (8006f30 <BSP_SPI_Init+0xbc>)
 8006f06:	2201      	movs	r2, #1
 8006f08:	605a      	str	r2, [r3, #4]
	gpio_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_MEDIUM;
 8006f0a:	4b09      	ldr	r3, [pc, #36]	; (8006f30 <BSP_SPI_Init+0xbc>)
 8006f0c:	2204      	movs	r2, #4
 8006f0e:	721a      	strb	r2, [r3, #8]

	XMC_GPIO_Init(MCP23S08_RESET, &gpio_config); //IO-Expander Reset
 8006f10:	4a07      	ldr	r2, [pc, #28]	; (8006f30 <BSP_SPI_Init+0xbc>)
 8006f12:	210c      	movs	r1, #12
 8006f14:	4805      	ldr	r0, [pc, #20]	; (8006f2c <BSP_SPI_Init+0xb8>)
 8006f16:	f001 f8a7 	bl	8008068 <XMC_GPIO_Init>

	return SPI_OK;
 8006f1a:	2300      	movs	r3, #0
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	2000001c 	.word	0x2000001c
 8006f24:	48020000 	.word	0x48020000
 8006f28:	80004000 	.word	0x80004000
 8006f2c:	48028000 	.word	0x48028000
 8006f30:	20000010 	.word	0x20000010
 8006f34:	48028100 	.word	0x48028100

08006f38 <_spi_transmit>:
 *  @param channel ... SPI channel
 *		   spi_data .. byte which should be transmitted
 *  @return on success this function returns SPI_OK (0)
 */
uint8_t _spi_transmit(XMC_USIC_CH_t *const channel, uint8_t spi_data)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	460b      	mov	r3, r1
 8006f42:	70fb      	strb	r3, [r7, #3]
	XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

	XMC_SPI_CH_Transmit(channel, spi_data, XMC_SPI_CH_MODE_STANDARD);
 8006f44:	78fb      	ldrb	r3, [r7, #3]
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	2200      	movs	r2, #0
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 ff05 	bl	8007d5c <XMC_SPI_CH_Transmit>
	while((XMC_SPI_CH_GetStatusFlag(channel) & XMC_SPI_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION) == 0U);
 8006f52:	bf00      	nop
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f7ff ff47 	bl	8006de8 <XMC_SPI_CH_GetStatusFlag>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d0f7      	beq.n	8006f54 <_spi_transmit+0x1c>
	XMC_SPI_CH_ClearStatusFlag(channel, XMC_SPI_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION);
 8006f64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f7ff ff49 	bl	8006e00 <XMC_SPI_CH_ClearStatusFlag>

	return SPI_OK;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3708      	adds	r7, #8
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <_spi_receive>:
 *  @brief This function reads data from a specific SPI channel
 *  @param channel ... SPI channel
 *  @return byte which was received and is valid
 */
uint8_t _spi_receive(XMC_USIC_CH_t *const channel)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
	XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

	return XMC_SPI_CH_GetReceivedData(channel);
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 ff21 	bl	8007dc8 <XMC_SPI_CH_GetReceivedData>
 8006f86:	4603      	mov	r3, r0
 8006f88:	b2db      	uxtb	r3, r3
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3708      	adds	r7, #8
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop

08006f94 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8006f9e:	4908      	ldr	r1, [pc, #32]	; (8006fc0 <NVIC_EnableIRQ+0x2c>)
 8006fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fa4:	095b      	lsrs	r3, r3, #5
 8006fa6:	79fa      	ldrb	r2, [r7, #7]
 8006fa8:	f002 021f 	and.w	r2, r2, #31
 8006fac:	2001      	movs	r0, #1
 8006fae:	fa00 f202 	lsl.w	r2, r0, r2
 8006fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006fb6:	bf00      	nop
 8006fb8:	370c      	adds	r7, #12
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bc80      	pop	{r7}
 8006fbe:	4770      	bx	lr
 8006fc0:	e000e100 	.word	0xe000e100

08006fc4 <XMC_USIC_CH_SetInputSource>:
 * Baudrate is configured by considering the peripheral frequency and the desired baudrate.
 * Optimum values of FDR->STEP and BRG->PDIV are calulated and used for generating the desired
 * baudrate.
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetStartTransmisionMode(), XMC_USIC_CH_SetInputSource() \n\n\n
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	460b      	mov	r3, r1
 8006fce:	70fb      	strb	r3, [r7, #3]
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	70bb      	strb	r3, [r7, #2]
 */
 8006fd4:	78f8      	ldrb	r0, [r7, #3]
 8006fd6:	78fb      	ldrb	r3, [r7, #3]
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	3306      	adds	r3, #6
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	4413      	add	r3, r2
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	f023 0207 	bic.w	r2, r3, #7
XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling);
 8006fe6:	78bb      	ldrb	r3, [r7, #2]
 * Optimum values of FDR->STEP and BRG->PDIV are calulated and used for generating the desired
 * baudrate.
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetStartTransmisionMode(), XMC_USIC_CH_SetInputSource() \n\n\n
 */
 8006fe8:	431a      	orrs	r2, r3
 8006fea:	6879      	ldr	r1, [r7, #4]
 8006fec:	1d83      	adds	r3, r0, #6
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	440b      	add	r3, r1
 8006ff2:	605a      	str	r2, [r3, #4]
XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling);

 8006ff4:	bf00      	nop
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bc80      	pop	{r7}
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop

08007000 <XMC_UART_CH_Start>:
 * \par<b>Description</b><br>
 * Sets the USIC channel operation mode to UART mode.\n\n
 * CCR register bitfield \a Mode is set to 2(UART mode). This API should be called after configuring
 * the USIC channel. Transmission and reception can happen only when the UART mode is set. 
 * This is an inline function.
 *
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 * \par<b>Related APIs:</b><BR>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700c:	f023 030f 	bic.w	r3, r3, #15
 8007010:	f043 0202 	orr.w	r2, r3, #2
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	641a      	str	r2, [r3, #64]	; 0x40
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 8007018:	bf00      	nop
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	bc80      	pop	{r7}
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop

08007024 <XMC_UART_CH_SetInterruptNodePointer>:
 * For all the protocol events enlisted in the enumeration XMC_UART_CH_EVENT_t, one common
 * interrupt gets generated. The service request connects the interrupt node to the UART 
 * protocol events.
 * Note: NVIC node should be separately enabled to generate the interrupt.
 *
 * \par<b>Related APIs:</b><BR>
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	460b      	mov	r3, r1
 800702e:	70fb      	strb	r3, [r7, #3]
 * XMC_UART_CH_EnableEvent() \n\n\n
 8007030:	78fb      	ldrb	r3, [r7, #3]
 8007032:	461a      	mov	r2, r3
 8007034:	2110      	movs	r1, #16
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 fbe4 	bl	8007804 <XMC_USIC_CH_SetInterruptNodePointer>
 */
__STATIC_INLINE void XMC_UART_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
 800703c:	bf00      	nop
 800703e:	3708      	adds	r7, #8
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <XMC_UART_CH_SetInputSource>:
 * \par<b>Description</b><br>
 * Sets input soource for the UART communication.\n\n
 * It is used for configuring the input stage for data reception.
 * Selects the input data signal source among DXnA, DXnB.. DXnG for the input stage. 
 * The API can be used for the input stages DX0, DX3 and DX5. 
 *
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	460b      	mov	r3, r1
 800704e:	70fb      	strb	r3, [r7, #3]
 8007050:	4613      	mov	r3, r2
 8007052:	70bb      	strb	r3, [r7, #2]
 * \par<b>Related APIs:</b><BR>
 8007054:	78fb      	ldrb	r3, [r7, #3]
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	3306      	adds	r3, #6
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	4413      	add	r3, r2
 800705e:	2200      	movs	r2, #0
 8007060:	605a      	str	r2, [r3, #4]
 * XMC_UART_CH_EnableInputInversion() \n\n\n
 8007062:	78ba      	ldrb	r2, [r7, #2]
 8007064:	78fb      	ldrb	r3, [r7, #3]
 8007066:	4619      	mov	r1, r3
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f7ff ffab 	bl	8006fc4 <XMC_USIC_CH_SetInputSource>
 */
 800706e:	bf00      	nop
 8007070:	3708      	adds	r7, #8
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop

08007078 <BSP_UART_Init>:
/**
 * @brief  Initialize UART1 CH1 - Tx=P0.1, Rx=P0.0, 9600-8N1
 * @return true on success, false otherwise
 */
_Bool BSP_UART_Init (void)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	af00      	add	r7, sp, #0

	XMC_UART_CH_Init (XMC_UART1_CH1, &uart_config);
 800707c:	4917      	ldr	r1, [pc, #92]	; (80070dc <BSP_UART_Init+0x64>)
 800707e:	4818      	ldr	r0, [pc, #96]	; (80070e0 <BSP_UART_Init+0x68>)
 8007080:	f000 ff02 	bl	8007e88 <XMC_UART_CH_Init>
	XMC_UART_CH_Init (XMC_UART1_CH0, &uart_config);
 8007084:	4915      	ldr	r1, [pc, #84]	; (80070dc <BSP_UART_Init+0x64>)
 8007086:	4817      	ldr	r0, [pc, #92]	; (80070e4 <BSP_UART_Init+0x6c>)
 8007088:	f000 fefe 	bl	8007e88 <XMC_UART_CH_Init>
	XMC_UART_CH_SetInputSource (XMC_UART1_CH1, XMC_UART_CH_INPUT_RXD, 
 800708c:	2203      	movs	r2, #3
 800708e:	2100      	movs	r1, #0
 8007090:	4813      	ldr	r0, [pc, #76]	; (80070e0 <BSP_UART_Init+0x68>)
 8007092:	f7ff ffd7 	bl	8007044 <XMC_UART_CH_SetInputSource>
	                            USIC1_C1_DX0_P0_0);

	XMC_UART_CH_SetInterruptNodePointer	(XMC_UART1_CH1, 0) ;
 8007096:	2100      	movs	r1, #0
 8007098:	4811      	ldr	r0, [pc, #68]	; (80070e0 <BSP_UART_Init+0x68>)
 800709a:	f7ff ffc3 	bl	8007024 <XMC_UART_CH_SetInterruptNodePointer>
	XMC_UART_CH_EnableEvent (XMC_UART1_CH1, XMC_UART_CH_EVENT_STANDARD_RECEIVE);
 800709e:	4912      	ldr	r1, [pc, #72]	; (80070e8 <BSP_UART_Init+0x70>)
 80070a0:	480f      	ldr	r0, [pc, #60]	; (80070e0 <BSP_UART_Init+0x68>)
 80070a2:	f000 ff87 	bl	8007fb4 <XMC_UART_CH_EnableEvent>
	XMC_UART_CH_EnableEvent (XMC_UART1_CH1, 
 80070a6:	f04f 2180 	mov.w	r1, #2147516416	; 0x80008000
 80070aa:	480d      	ldr	r0, [pc, #52]	; (80070e0 <BSP_UART_Init+0x68>)
 80070ac:	f000 ff82 	bl	8007fb4 <XMC_UART_CH_EnableEvent>
	                         XMC_UART_CH_EVENT_ALTERNATIVE_RECEIVE);
	NVIC_EnableIRQ (USIC1_0_IRQn);
 80070b0:	205a      	movs	r0, #90	; 0x5a
 80070b2:	f7ff ff6f 	bl	8006f94 <NVIC_EnableIRQ>

	XMC_UART_CH_Start (XMC_UART1_CH1);
 80070b6:	480a      	ldr	r0, [pc, #40]	; (80070e0 <BSP_UART_Init+0x68>)
 80070b8:	f7ff ffa2 	bl	8007000 <XMC_UART_CH_Start>
	XMC_UART_CH_Start (XMC_UART1_CH0);
 80070bc:	4809      	ldr	r0, [pc, #36]	; (80070e4 <BSP_UART_Init+0x6c>)
 80070be:	f7ff ff9f 	bl	8007000 <XMC_UART_CH_Start>

	XMC_GPIO_SetMode (UART_TX, XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT2);
 80070c2:	2290      	movs	r2, #144	; 0x90
 80070c4:	2101      	movs	r1, #1
 80070c6:	4809      	ldr	r0, [pc, #36]	; (80070ec <BSP_UART_Init+0x74>)
 80070c8:	f000 ff8e 	bl	8007fe8 <XMC_GPIO_SetMode>
	XMC_GPIO_SetMode (UART_RX, XMC_GPIO_MODE_INPUT_TRISTATE);
 80070cc:	2200      	movs	r2, #0
 80070ce:	2100      	movs	r1, #0
 80070d0:	4806      	ldr	r0, [pc, #24]	; (80070ec <BSP_UART_Init+0x74>)
 80070d2:	f000 ff89 	bl	8007fe8 <XMC_GPIO_SetMode>

	return true;
 80070d6:	2301      	movs	r3, #1
}
 80070d8:	4618      	mov	r0, r3
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	20000024 	.word	0x20000024
 80070e0:	48020200 	.word	0x48020200
 80070e4:	48020000 	.word	0x48020000
 80070e8:	80004000 	.word	0x80004000
 80070ec:	48028000 	.word	0x48028000

080070f0 <BSP_LowLevelInit>:
 * @note Problems with Branch prediction if accessing the flash via the cached
 *       memory interface. In this silicon(step A11), branch prediction has to
 *       be switched off by setting PCON.PBS = 1.
 */
void  BSP_LowLevelInit (void)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
	CPU_INT32U  reg_val;

	/* Disable Watchdog timer */
	DEF_BIT_CLR (BSP_REG_WDT_CTR, BSP_BIT_WDT_CTR_ENB);
 80070f6:	4a0d      	ldr	r2, [pc, #52]	; (800712c <BSP_LowLevelInit+0x3c>)
 80070f8:	4b0c      	ldr	r3, [pc, #48]	; (800712c <BSP_LowLevelInit+0x3c>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f023 0301 	bic.w	r3, r3, #1
 8007100:	6013      	str	r3, [r2, #0]
	DEF_BIT_SET (BSP_REG_PREF_PCON, BSP_BIT_PREF_PCON_PBS);
 8007102:	4a0b      	ldr	r2, [pc, #44]	; (8007130 <BSP_LowLevelInit+0x40>)
 8007104:	4b0a      	ldr	r3, [pc, #40]	; (8007130 <BSP_LowLevelInit+0x40>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800710c:	6013      	str	r3, [r2, #0]

	reg_val = BSP_REG_FLASH0_FCON;
 800710e:	4b09      	ldr	r3, [pc, #36]	; (8007134 <BSP_LowLevelInit+0x44>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	607b      	str	r3, [r7, #4]
	reg_val = 0x3;
 8007114:	2303      	movs	r3, #3
 8007116:	607b      	str	r3, [r7, #4]
	BSP_REG_FLASH0_FCON = reg_val;
 8007118:	4a06      	ldr	r2, [pc, #24]	; (8007134 <BSP_LowLevelInit+0x44>)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6013      	str	r3, [r2, #0]

	BSP_SysInit();
 800711e:	f000 f80b 	bl	8007138 <BSP_SysInit>
}
 8007122:	bf00      	nop
 8007124:	3708      	adds	r7, #8
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	50008004 	.word	0x50008004
 8007130:	58004000 	.word	0x58004000
 8007134:	58002014 	.word	0x58002014

08007138 <BSP_SysInit>:
 *       result in multiple changes of the K2-Divider to avoid big frequency
 *       changes. Between the update of two K2-divider values 6 cycles of fpll
 *       should be waited.
 */
void  BSP_SysInit (void)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
	CPU_INT32U  reg_to;
	CPU_INT32U  reg;

	/* Set VCO and PLL power saving mode to normal behavior */
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON0, (BSP_BIT_PLLCON0_VCOPWD |
 800713e:	4a74      	ldr	r2, [pc, #464]	; (8007310 <BSP_SysInit+0x1d8>)
 8007140:	4b73      	ldr	r3, [pc, #460]	; (8007310 <BSP_SysInit+0x1d8>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007148:	f023 0302 	bic.w	r3, r3, #2
 800714c:	6013      	str	r3, [r2, #0]
					   BSP_BIT_PLLCON0_PLLPWD));

	reg = BSP_REG_SCU_OSCHPCTRL;
 800714e:	4b71      	ldr	r3, [pc, #452]	; (8007314 <BSP_SysInit+0x1dc>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	603b      	str	r3, [r7, #0]
	/* Set Ext. Crystal mod; osc power saving isn't entered */
	DEF_BIT_CLR (reg, (BSP_BIT_OSCHPCTRL_MODE_MASK  |
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800715a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800715e:	603b      	str	r3, [r7, #0]
			   BSP_BIT_OSCHPCTRL_OSCVAL_MASK));
	/* Cfg. foscref = fosc / (OSCVAL + 1) */
	DEF_BIT_SET (reg, BSP_BIT_OSCHPCTRL_OSCVAL);
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007166:	603b      	str	r3, [r7, #0]
	BSP_REG_SCU_OSCHPCTRL = reg;
 8007168:	4a6a      	ldr	r2, [pc, #424]	; (8007314 <BSP_SysInit+0x1dc>)
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	6013      	str	r3, [r2, #0]

	/* Set ext. osc as PLL input */
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON2, BSP_BIT_PLLCON2_PINSEL);
 800716e:	4a6a      	ldr	r2, [pc, #424]	; (8007318 <BSP_SysInit+0x1e0>)
 8007170:	4b69      	ldr	r3, [pc, #420]	; (8007318 <BSP_SysInit+0x1e0>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f023 0301 	bic.w	r3, r3, #1
 8007178:	6013      	str	r3, [r2, #0]
	/* Restart osc watchdog of the PLL */
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_OSCRES);
 800717a:	4a65      	ldr	r2, [pc, #404]	; (8007310 <BSP_SysInit+0x1d8>)
 800717c:	4b64      	ldr	r3, [pc, #400]	; (8007310 <BSP_SysInit+0x1d8>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007184:	6013      	str	r3, [r2, #0]
	/* Wait for stable OSC frequency */
	reg_to = BSP_REG_VAL_TO;
 8007186:	4b65      	ldr	r3, [pc, #404]	; (800731c <BSP_SysInit+0x1e4>)
 8007188:	607b      	str	r3, [r7, #4]
	while ( (DEF_BIT_IS_CLR (BSP_REG_SCU_PLLSTAT, (BSP_BIT_PLLSTAT_PLLLV |
 800718a:	e002      	b.n	8007192 <BSP_SysInit+0x5a>
						       BSP_BIT_PLLSTAT_PLLHV |
						       BSP_BIT_PLLSTAT_PLLSP))) &
		(reg_to > 0u)) {
		reg_to--;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	3b01      	subs	r3, #1
 8007190:	607b      	str	r3, [r7, #4]
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON2, BSP_BIT_PLLCON2_PINSEL);
	/* Restart osc watchdog of the PLL */
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_OSCRES);
	/* Wait for stable OSC frequency */
	reg_to = BSP_REG_VAL_TO;
	while ( (DEF_BIT_IS_CLR (BSP_REG_SCU_PLLSTAT, (BSP_BIT_PLLSTAT_PLLLV |
 8007192:	4b63      	ldr	r3, [pc, #396]	; (8007320 <BSP_SysInit+0x1e8>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f403 7360 	and.w	r3, r3, #896	; 0x380
 800719a:	2b00      	cmp	r3, #0
 800719c:	d101      	bne.n	80071a2 <BSP_SysInit+0x6a>
 800719e:	2301      	movs	r3, #1
 80071a0:	e000      	b.n	80071a4 <BSP_SysInit+0x6c>
 80071a2:	2300      	movs	r3, #0
						       BSP_BIT_PLLSTAT_PLLHV |
						       BSP_BIT_PLLSTAT_PLLSP))) &
		(reg_to > 0u)) {
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	2a00      	cmp	r2, #0
 80071a8:	bf14      	ite	ne
 80071aa:	2201      	movne	r2, #1
 80071ac:	2200      	moveq	r2, #0
 80071ae:	b2d2      	uxtb	r2, r2
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_OSCRES);
	/* Wait for stable OSC frequency */
	reg_to = BSP_REG_VAL_TO;
	while ( (DEF_BIT_IS_CLR (BSP_REG_SCU_PLLSTAT, (BSP_BIT_PLLSTAT_PLLLV |
						       BSP_BIT_PLLSTAT_PLLHV |
						       BSP_BIT_PLLSTAT_PLLSP))) &
 80071b0:	4013      	ands	r3, r2
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON2, BSP_BIT_PLLCON2_PINSEL);
	/* Restart osc watchdog of the PLL */
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_OSCRES);
	/* Wait for stable OSC frequency */
	reg_to = BSP_REG_VAL_TO;
	while ( (DEF_BIT_IS_CLR (BSP_REG_SCU_PLLSTAT, (BSP_BIT_PLLSTAT_PLLLV |
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1ea      	bne.n	800718c <BSP_SysInit+0x54>
						       BSP_BIT_PLLSTAT_PLLHV |
						       BSP_BIT_PLLSTAT_PLLSP))) &
		(reg_to > 0u)) {
		reg_to--;
	}
	if (reg_to == 0u) {
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d100      	bne.n	80071be <BSP_SysInit+0x86>
		while (DEF_TRUE);
 80071bc:	e7fe      	b.n	80071bc <BSP_SysInit+0x84>
	}
	/* ---------------- PLL CONFIGURATION ----------------- */
	/* Select OSC_FI as system clk */
	BSP_REG_SCU_SYSCLKCR = BSP_BIT_SYSCLKCR_OSC_FI;
 80071be:	4b59      	ldr	r3, [pc, #356]	; (8007324 <BSP_SysInit+0x1ec>)
 80071c0:	2200      	movs	r2, #0
 80071c2:	601a      	str	r2, [r3, #0]
	/* PLL is bypassed */
	DEF_BIT_SET (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_VCOBYP);
 80071c4:	4a52      	ldr	r2, [pc, #328]	; (8007310 <BSP_SysInit+0x1d8>)
 80071c6:	4b52      	ldr	r3, [pc, #328]	; (8007310 <BSP_SysInit+0x1d8>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f043 0301 	orr.w	r3, r3, #1
 80071ce:	6013      	str	r3, [r2, #0]
	/* Disconnect OSC_HP from PLL */
	DEF_BIT_SET (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_FINDIS);
 80071d0:	4a4f      	ldr	r2, [pc, #316]	; (8007310 <BSP_SysInit+0x1d8>)
 80071d2:	4b4f      	ldr	r3, [pc, #316]	; (8007310 <BSP_SysInit+0x1d8>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f043 0310 	orr.w	r3, r3, #16
 80071da:	6013      	str	r3, [r2, #0]

	/* fpll = (NDIV  * fosc) / (PDIV * K2DIV))              */
	/*      = (40 * 12MHz) / (1 * 20)) = 24MHz              */
	BSP_REG_SCU_PLLCON1 = ( ( (BSP_PLLCON1_K1DIV       - 1u) <<  0u)
 80071dc:	4b52      	ldr	r3, [pc, #328]	; (8007328 <BSP_SysInit+0x1f0>)
 80071de:	4a53      	ldr	r2, [pc, #332]	; (800732c <BSP_SysInit+0x1f4>)
 80071e0:	601a      	str	r2, [r3, #0]
				| ( (BSP_PLLCON1_NDIV        - 1u) <<  8u)
				| ( (BSP_PLLCON1_K2DIV_STEP1 - 1u) << 16u)
				| ( (BSP_PLLCON1_PDIV        - 1u) << 24u));

	/* Keeps OSC clk conn. to VCO in case of Loss-of-lock */
	BSP_REG_SCU_PLLCON0 |= BSP_BIT_PLLCON0_OSCDISCDIS;
 80071e2:	4a4b      	ldr	r2, [pc, #300]	; (8007310 <BSP_SysInit+0x1d8>)
 80071e4:	4b4a      	ldr	r3, [pc, #296]	; (8007310 <BSP_SysInit+0x1d8>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071ec:	6013      	str	r3, [r2, #0]
	/* Connect OSC_HP to PLL */
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_FINDIS);
 80071ee:	4a48      	ldr	r2, [pc, #288]	; (8007310 <BSP_SysInit+0x1d8>)
 80071f0:	4b47      	ldr	r3, [pc, #284]	; (8007310 <BSP_SysInit+0x1d8>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f023 0310 	bic.w	r3, r3, #16
 80071f8:	6013      	str	r3, [r2, #0]
	/* Restart PLL lock detection */
	DEF_BIT_SET (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_RESLD);
 80071fa:	4a45      	ldr	r2, [pc, #276]	; (8007310 <BSP_SysInit+0x1d8>)
 80071fc:	4b44      	ldr	r3, [pc, #272]	; (8007310 <BSP_SysInit+0x1d8>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007204:	6013      	str	r3, [r2, #0]

	/* Wait for PLL Lock */
	reg_to = BSP_REG_VAL_TO;
 8007206:	4b45      	ldr	r3, [pc, #276]	; (800731c <BSP_SysInit+0x1e4>)
 8007208:	607b      	str	r3, [r7, #4]
	while ( (DEF_BIT_IS_CLR (BSP_REG_SCU_PLLSTAT, BSP_BIT_PLLSTAT_VCOLOCK)) &
 800720a:	e002      	b.n	8007212 <BSP_SysInit+0xda>
		(reg_to > 0u)) {
		reg_to--;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	3b01      	subs	r3, #1
 8007210:	607b      	str	r3, [r7, #4]
	/* Restart PLL lock detection */
	DEF_BIT_SET (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_RESLD);

	/* Wait for PLL Lock */
	reg_to = BSP_REG_VAL_TO;
	while ( (DEF_BIT_IS_CLR (BSP_REG_SCU_PLLSTAT, BSP_BIT_PLLSTAT_VCOLOCK)) &
 8007212:	4b43      	ldr	r3, [pc, #268]	; (8007320 <BSP_SysInit+0x1e8>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 0304 	and.w	r3, r3, #4
 800721a:	2b00      	cmp	r3, #0
 800721c:	d101      	bne.n	8007222 <BSP_SysInit+0xea>
 800721e:	2301      	movs	r3, #1
 8007220:	e000      	b.n	8007224 <BSP_SysInit+0xec>
 8007222:	2300      	movs	r3, #0
		(reg_to > 0u)) {
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	2a00      	cmp	r2, #0
 8007228:	bf14      	ite	ne
 800722a:	2201      	movne	r2, #1
 800722c:	2200      	moveq	r2, #0
 800722e:	b2d2      	uxtb	r2, r2
	/* Restart PLL lock detection */
	DEF_BIT_SET (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_RESLD);

	/* Wait for PLL Lock */
	reg_to = BSP_REG_VAL_TO;
	while ( (DEF_BIT_IS_CLR (BSP_REG_SCU_PLLSTAT, BSP_BIT_PLLSTAT_VCOLOCK)) &
 8007230:	4013      	ands	r3, r2
 8007232:	2b00      	cmp	r3, #0
 8007234:	d1ea      	bne.n	800720c <BSP_SysInit+0xd4>
		(reg_to > 0u)) {
		reg_to--;
	}
	if (reg_to == 0u) {
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d100      	bne.n	800723e <BSP_SysInit+0x106>
		while (DEF_TRUE);
 800723c:	e7fe      	b.n	800723c <BSP_SysInit+0x104>
	}

	/* Normal opertaion, PLL is not bypassed */
	DEF_BIT_CLR (BSP_REG_SCU_PLLCON0, BSP_BIT_PLLCON0_VCOBYP);
 800723e:	4a34      	ldr	r2, [pc, #208]	; (8007310 <BSP_SysInit+0x1d8>)
 8007240:	4b33      	ldr	r3, [pc, #204]	; (8007310 <BSP_SysInit+0x1d8>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f023 0301 	bic.w	r3, r3, #1
 8007248:	6013      	str	r3, [r2, #0]
	/* Enable MMC clock */
	DEF_BIT_SET (BSP_REG_SCU_CLKSET, BSP_BIT_CLKSET_MMCEN);
 800724a:	4a39      	ldr	r2, [pc, #228]	; (8007330 <BSP_SysInit+0x1f8>)
 800724c:	4b38      	ldr	r3, [pc, #224]	; (8007330 <BSP_SysInit+0x1f8>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f043 0302 	orr.w	r3, r3, #2
 8007254:	6013      	str	r3, [r2, #0]
	/* fcpu = fsys */
	DEF_BIT_CLR (BSP_REG_SCU_CPUCLKCR, BSP_BIT_CPUCLKCR_CPUDIV);
 8007256:	4a37      	ldr	r2, [pc, #220]	; (8007334 <BSP_SysInit+0x1fc>)
 8007258:	4b36      	ldr	r3, [pc, #216]	; (8007334 <BSP_SysInit+0x1fc>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f023 0301 	bic.w	r3, r3, #1
 8007260:	6013      	str	r3, [r2, #0]
	/* fpb  = fsys */
	DEF_BIT_CLR (BSP_REG_SCU_PBCLKCR,  BSP_BIT_PBCLKCR_PBDIV);
 8007262:	4a35      	ldr	r2, [pc, #212]	; (8007338 <BSP_SysInit+0x200>)
 8007264:	4b34      	ldr	r3, [pc, #208]	; (8007338 <BSP_SysInit+0x200>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f023 0301 	bic.w	r3, r3, #1
 800726c:	6013      	str	r3, [r2, #0]
	/* fccu = fsys */
	DEF_BIT_CLR (BSP_REG_SCU_CCUCLKCR, BSP_BIT_CCUCLKCR_CCUDIV);
 800726e:	4a33      	ldr	r2, [pc, #204]	; (800733c <BSP_SysInit+0x204>)
 8007270:	4b32      	ldr	r3, [pc, #200]	; (800733c <BSP_SysInit+0x204>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f023 0301 	bic.w	r3, r3, #1
 8007278:	6013      	str	r3, [r2, #0]
	/* Select PLL clock as system clk */
	BSP_REG_SCU_SYSCLKCR |= BSP_BIT_SYSCLKCR_PLL_CLK;
 800727a:	4a2a      	ldr	r2, [pc, #168]	; (8007324 <BSP_SysInit+0x1ec>)
 800727c:	4b29      	ldr	r3, [pc, #164]	; (8007324 <BSP_SysInit+0x1ec>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007284:	6013      	str	r3, [r2, #0]
	/* Wait between K2 divider updates */
	reg_to = BSP_REG_VAL_TO;
 8007286:	4b25      	ldr	r3, [pc, #148]	; (800731c <BSP_SysInit+0x1e4>)
 8007288:	607b      	str	r3, [r7, #4]
	while (reg_to > 0u) {
 800728a:	e002      	b.n	8007292 <BSP_SysInit+0x15a>
		reg_to--;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	3b01      	subs	r3, #1
 8007290:	607b      	str	r3, [r7, #4]
	DEF_BIT_CLR (BSP_REG_SCU_CCUCLKCR, BSP_BIT_CCUCLKCR_CCUDIV);
	/* Select PLL clock as system clk */
	BSP_REG_SCU_SYSCLKCR |= BSP_BIT_SYSCLKCR_PLL_CLK;
	/* Wait between K2 divider updates */
	reg_to = BSP_REG_VAL_TO;
	while (reg_to > 0u) {
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d1f9      	bne.n	800728c <BSP_SysInit+0x154>
		reg_to--;
	}
	/* fpll = (NDIV  * fosc) / (PDIV * K2DIV)) */
	/*      = (40 * 12MHz) / (1 * 8)) = 60MHz  */
	reg  = (BSP_REG_SCU_PLLCON1 & ~BSP_PLLCON1_K2DIV_MASK);
 8007298:	4b23      	ldr	r3, [pc, #140]	; (8007328 <BSP_SysInit+0x1f0>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80072a0:	603b      	str	r3, [r7, #0]
	reg |= ( (BSP_PLLCON1_K2DIV_STEP2 - 1u) << 16);
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80072a8:	603b      	str	r3, [r7, #0]
	BSP_REG_SCU_PLLCON1 = reg;
 80072aa:	4a1f      	ldr	r2, [pc, #124]	; (8007328 <BSP_SysInit+0x1f0>)
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	6013      	str	r3, [r2, #0]
	/* Wait between K2 divider updates */
	reg_to = BSP_REG_VAL_TO;
 80072b0:	4b1a      	ldr	r3, [pc, #104]	; (800731c <BSP_SysInit+0x1e4>)
 80072b2:	607b      	str	r3, [r7, #4]
	while (reg_to > 0u) {
 80072b4:	e002      	b.n	80072bc <BSP_SysInit+0x184>
		reg_to--;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	3b01      	subs	r3, #1
 80072ba:	607b      	str	r3, [r7, #4]
	reg  = (BSP_REG_SCU_PLLCON1 & ~BSP_PLLCON1_K2DIV_MASK);
	reg |= ( (BSP_PLLCON1_K2DIV_STEP2 - 1u) << 16);
	BSP_REG_SCU_PLLCON1 = reg;
	/* Wait between K2 divider updates */
	reg_to = BSP_REG_VAL_TO;
	while (reg_to > 0u) {
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d1f9      	bne.n	80072b6 <BSP_SysInit+0x17e>
		reg_to--;
	}

	/* fpll = (NDIV  * fosc) / (PDIV * K2DIV)) */
	/*      = (40 * 12MHz) / (1 * 5)) = 96MHz  */
	reg                 = (BSP_REG_SCU_PLLCON1 & ~BSP_PLLCON1_K2DIV_MASK);
 80072c2:	4b19      	ldr	r3, [pc, #100]	; (8007328 <BSP_SysInit+0x1f0>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80072ca:	603b      	str	r3, [r7, #0]
	reg                |= ( (BSP_PLLCON1_K2DIV_STEP3 - 1u) << 16);
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80072d2:	603b      	str	r3, [r7, #0]
	BSP_REG_SCU_PLLCON1 = reg;
 80072d4:	4a14      	ldr	r2, [pc, #80]	; (8007328 <BSP_SysInit+0x1f0>)
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	6013      	str	r3, [r2, #0]
	/* Wait between K2 divider updates */
	reg_to = BSP_REG_VAL_TO;
 80072da:	4b10      	ldr	r3, [pc, #64]	; (800731c <BSP_SysInit+0x1e4>)
 80072dc:	607b      	str	r3, [r7, #4]
	while (reg_to > 0u) {
 80072de:	e002      	b.n	80072e6 <BSP_SysInit+0x1ae>
		reg_to--;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	3b01      	subs	r3, #1
 80072e4:	607b      	str	r3, [r7, #4]
	reg                 = (BSP_REG_SCU_PLLCON1 & ~BSP_PLLCON1_K2DIV_MASK);
	reg                |= ( (BSP_PLLCON1_K2DIV_STEP3 - 1u) << 16);
	BSP_REG_SCU_PLLCON1 = reg;
	/* Wait between K2 divider updates */
	reg_to = BSP_REG_VAL_TO;
	while (reg_to > 0u) {
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d1f9      	bne.n	80072e0 <BSP_SysInit+0x1a8>
		reg_to--;
	}
	/* fpll = (NDIV  * fosc) / (PDIV * K2DIV)) */
	/*      = (40 * 12MHz) / (1 * 4)) = 120MHz */
	reg                 = (BSP_REG_SCU_PLLCON1 & ~BSP_PLLCON1_K2DIV_MASK);
 80072ec:	4b0e      	ldr	r3, [pc, #56]	; (8007328 <BSP_SysInit+0x1f0>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80072f4:	603b      	str	r3, [r7, #0]
	reg                |= ( (BSP_PLLCON1_K2DIV_FINAL - 1u) << 16);
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80072fc:	603b      	str	r3, [r7, #0]
	BSP_REG_SCU_PLLCON1 = reg;
 80072fe:	4a0a      	ldr	r2, [pc, #40]	; (8007328 <BSP_SysInit+0x1f0>)
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	6013      	str	r3, [r2, #0]
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	bc80      	pop	{r7}
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop
 8007310:	50004714 	.word	0x50004714
 8007314:	50004704 	.word	0x50004704
 8007318:	5000471c 	.word	0x5000471c
 800731c:	0007ffff 	.word	0x0007ffff
 8007320:	50004710 	.word	0x50004710
 8007324:	5000460c 	.word	0x5000460c
 8007328:	50004718 	.word	0x50004718
 800732c:	00132700 	.word	0x00132700
 8007330:	50004604 	.word	0x50004604
 8007334:	50004610 	.word	0x50004610
 8007338:	50004614 	.word	0x50004614
 800733c:	50004620 	.word	0x50004620

08007340 <BSP_SysClkFreqGet>:
 *
 * @brief This function is used to retrieve system or CPU clock frequency
 *
 */
CPU_INT32U BSP_SysClkFreqGet (void)
{
 8007340:	b480      	push	{r7}
 8007342:	b085      	sub	sp, #20
 8007344:	af00      	add	r7, sp, #0
	CPU_INT08U  pll_p;
	CPU_INT08U  pll_k2;
	CPU_INT32U  cpu_freq;


	sysclk_src = (BSP_REG_SCU_SYSCLKCR & DEF_BIT_FIELD (2u, 16u)) >> 16u;
 8007346:	4b26      	ldr	r3, [pc, #152]	; (80073e0 <BSP_SysClkFreqGet+0xa0>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800734e:	0c1b      	lsrs	r3, r3, #16
 8007350:	72fb      	strb	r3, [r7, #11]
	sysclk_div = (BSP_REG_SCU_SYSCLKCR & DEF_BIT_FIELD (8u, 0u)) + 1u;
 8007352:	4b23      	ldr	r3, [pc, #140]	; (80073e0 <BSP_SysClkFreqGet+0xa0>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	b29b      	uxth	r3, r3
 8007358:	b2db      	uxtb	r3, r3
 800735a:	b29b      	uxth	r3, r3
 800735c:	3301      	adds	r3, #1
 800735e:	813b      	strh	r3, [r7, #8]

	switch (sysclk_src) {
 8007360:	7afb      	ldrb	r3, [r7, #11]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d002      	beq.n	800736c <BSP_SysClkFreqGet+0x2c>
 8007366:	2b01      	cmp	r3, #1
 8007368:	d003      	beq.n	8007372 <BSP_SysClkFreqGet+0x32>
 800736a:	e022      	b.n	80073b2 <BSP_SysClkFreqGet+0x72>
	case 0:
		/* Fast Internal Oscillator selected as system clk */
		cpu_freq = BSP_CFG_SYS_INT_OSC_FI_FREQ_HZ;
 800736c:	4b1d      	ldr	r3, [pc, #116]	; (80073e4 <BSP_SysClkFreqGet+0xa4>)
 800736e:	60fb      	str	r3, [r7, #12]
		break;
 8007370:	e021      	b.n	80073b6 <BSP_SysClkFreqGet+0x76>

	case 1:
		/* PLL clock is selected as system clk */
		cpu_freq = BSP_CFG_SYS_XTAL_OSC_FREQ_HZ;
 8007372:	4b1d      	ldr	r3, [pc, #116]	; (80073e8 <BSP_SysClkFreqGet+0xa8>)
 8007374:	60fb      	str	r3, [r7, #12]
		pll_n    = (BSP_REG_SCU_PLLCON1 >>  8u) + 1u;
 8007376:	4b1d      	ldr	r3, [pc, #116]	; (80073ec <BSP_SysClkFreqGet+0xac>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	0a1b      	lsrs	r3, r3, #8
 800737c:	b2db      	uxtb	r3, r3
 800737e:	3301      	adds	r3, #1
 8007380:	71fb      	strb	r3, [r7, #7]
		pll_p    = (BSP_REG_SCU_PLLCON1 >> 24u) + 1u;
 8007382:	4b1a      	ldr	r3, [pc, #104]	; (80073ec <BSP_SysClkFreqGet+0xac>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	0e1b      	lsrs	r3, r3, #24
 8007388:	b2db      	uxtb	r3, r3
 800738a:	3301      	adds	r3, #1
 800738c:	71bb      	strb	r3, [r7, #6]
		pll_k2   = (BSP_REG_SCU_PLLCON1 >> 16u) + 1u;
 800738e:	4b17      	ldr	r3, [pc, #92]	; (80073ec <BSP_SysClkFreqGet+0xac>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	0c1b      	lsrs	r3, r3, #16
 8007394:	b2db      	uxtb	r3, r3
 8007396:	3301      	adds	r3, #1
 8007398:	717b      	strb	r3, [r7, #5]
		cpu_freq = ( (cpu_freq / pll_p) * pll_n) / pll_k2;
 800739a:	79bb      	ldrb	r3, [r7, #6]
 800739c:	68fa      	ldr	r2, [r7, #12]
 800739e:	fbb2 f3f3 	udiv	r3, r2, r3
 80073a2:	79fa      	ldrb	r2, [r7, #7]
 80073a4:	fb02 f203 	mul.w	r2, r2, r3
 80073a8:	797b      	ldrb	r3, [r7, #5]
 80073aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ae:	60fb      	str	r3, [r7, #12]
		break;
 80073b0:	e001      	b.n	80073b6 <BSP_SysClkFreqGet+0x76>

	case 2:
	case 3:
	default:
		return ( (CPU_INT32U) 0u);
 80073b2:	2300      	movs	r3, #0
 80073b4:	e00e      	b.n	80073d4 <BSP_SysClkFreqGet+0x94>
	}
	cpu_freq /= sysclk_div;
 80073b6:	893b      	ldrh	r3, [r7, #8]
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80073be:	60fb      	str	r3, [r7, #12]
	if (DEF_BIT_IS_SET (BSP_REG_SCU_CPUCLKCR, BSP_BIT_CPUCLKCR_CPUDIV)) {
 80073c0:	4b0b      	ldr	r3, [pc, #44]	; (80073f0 <BSP_SysClkFreqGet+0xb0>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f003 0301 	and.w	r3, r3, #1
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d002      	beq.n	80073d2 <BSP_SysClkFreqGet+0x92>
		cpu_freq /= 2u;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	085b      	lsrs	r3, r3, #1
 80073d0:	60fb      	str	r3, [r7, #12]
	}
	return (cpu_freq);
 80073d2:	68fb      	ldr	r3, [r7, #12]
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3714      	adds	r7, #20
 80073d8:	46bd      	mov	sp, r7
 80073da:	bc80      	pop	{r7}
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop
 80073e0:	5000460c 	.word	0x5000460c
 80073e4:	016e3600 	.word	0x016e3600
 80073e8:	00b71b00 	.word	0x00b71b00
 80073ec:	50004718 	.word	0x50004718
 80073f0:	50004610 	.word	0x50004610

080073f4 <BSP_Init>:
 * @params none
 * @returns none
 * @brief Initialization of the board support.
 */
void  BSP_Init (void)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	af00      	add	r7, sp, #0
	BSP_IntInit();
 80073f8:	f7ff f88e 	bl	8006518 <BSP_IntInit>
	BSP_UART_Init();
 80073fc:	f7ff fe3c 	bl	8007078 <BSP_UART_Init>
	BSP_GPIO_Init();
 8007400:	f7ff fc92 	bl	8006d28 <BSP_GPIO_Init>
	BSP_CCU4_Init();
 8007404:	f7fe ff80 	bl	8006308 <BSP_CCU4_Init>
	if(BSP_SPI_Init()!=SPI_OK){
 8007408:	f7ff fd34 	bl	8006e74 <BSP_SPI_Init>
 800740c:	4603      	mov	r3, r0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d002      	beq.n	8007418 <BSP_Init+0x24>
		APP_TRACE_INFO ("SPI NOT OK ...\n");
 8007412:	4802      	ldr	r0, [pc, #8]	; (800741c <BSP_Init+0x28>)
 8007414:	f000 ffd0 	bl	80083b8 <puts>
		/*Error should never get here*/
	}
}
 8007418:	bf00      	nop
 800741a:	bd80      	pop	{r7, pc}
 800741c:	0800e5d0 	.word	0x0800e5d0

08007420 <ITM_SendChar>:
    \param [in]     ch  Character to transmit.

    \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  if ((ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8007428:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800742c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8007430:	f003 0301 	and.w	r3, r3, #1
 8007434:	2b00      	cmp	r3, #0
 8007436:	d012      	beq.n	800745e <ITM_SendChar+0x3e>
      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
 8007438:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800743c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8007440:	f003 0301 	and.w	r3, r3, #1

    \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if ((ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00a      	beq.n	800745e <ITM_SendChar+0x3e>
      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0].u32 == 0);
 8007448:	bf00      	nop
 800744a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d0fa      	beq.n	800744a <ITM_SendChar+0x2a>
    ITM->PORT[0].u8 = (uint8_t) ch;
 8007454:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	b2d2      	uxtb	r2, r2
 800745c:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800745e:	687b      	ldr	r3, [r7, #4]
}
 8007460:	4618      	mov	r0, r3
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	bc80      	pop	{r7}
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop

0800746c <initRetargetSwo>:
 *            CMSIS-Core > Reference > Debug Access
 *        (2) ARM Cortex-M4 Processor Technical Reference Manual
 *        (3) ARMv7-M Architecture Reference Manual
 */
void initRetargetSwo (void)
{
 800746c:	b480      	push	{r7}
 800746e:	af00      	add	r7, sp, #0
	// P2.1: After a system reset, this pin selects HWO0 (DB.TDO/DB.TRACESWO)
	// PORT2->HWSEL ... clear bits [3:2]
	PORT2->HWSEL &= ~PORT2_HWSEL_HW1_Msk;
 8007470:	4a1c      	ldr	r2, [pc, #112]	; (80074e4 <initRetargetSwo+0x78>)
 8007472:	4b1c      	ldr	r3, [pc, #112]	; (80074e4 <initRetargetSwo+0x78>)
 8007474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007476:	f023 030c 	bic.w	r3, r3, #12
 800747a:	6753      	str	r3, [r2, #116]	; 0x74
	// PORT2->HWSEL ... set bit [2] -> HWO0
	PORT2->HWSEL |= 0x01UL << PORT2_HWSEL_HW1_Pos;
 800747c:	4a19      	ldr	r2, [pc, #100]	; (80074e4 <initRetargetSwo+0x78>)
 800747e:	4b19      	ldr	r3, [pc, #100]	; (80074e4 <initRetargetSwo+0x78>)
 8007480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007482:	f043 0304 	orr.w	r3, r3, #4
 8007486:	6753      	str	r3, [r2, #116]	; 0x74

	// Enable trace systems
	// Source: ARMv7-M Architecture Reference Manual
	// DEMCR = Debug Exception and Monitor Control Register
	//         TRCENA ... global enable for DWT and ITM blocks
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8007488:	4a17      	ldr	r2, [pc, #92]	; (80074e8 <initRetargetSwo+0x7c>)
 800748a:	4b17      	ldr	r3, [pc, #92]	; (80074e8 <initRetargetSwo+0x7c>)
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007492:	60d3      	str	r3, [r2, #12]
	// SWO baud rate prescaler value
	// ACPR = Asynchronous Clock Prescaler Register
	//        fSWO = fCPU / (SWOSCALAR + 1)
	//        fSWO = 1MHz (maximum speed JLINK Lite CortexM)
	//        fCPU = 120MHz
	TPI->ACPR = 119UL;
 8007494:	4b15      	ldr	r3, [pc, #84]	; (80074ec <initRetargetSwo+0x80>)
 8007496:	2277      	movs	r2, #119	; 0x77
 8007498:	611a      	str	r2, [r3, #16]
	// Source: ARMv7-M Architecture Reference Manual
	// SPPR = Selected Pin Control Register
	//        0x0 ... Synchronous Trace Port Mode
	//        0x1 ... Asynchronous Serial Wire Output (Manchester)
	//        0x2 ... Asynchronous Serial Wire Output (NRZ)
	TPI->SPPR = 0x2UL;
 800749a:	4b14      	ldr	r3, [pc, #80]	; (80074ec <initRetargetSwo+0x80>)
 800749c:	2202      	movs	r2, #2
 800749e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	// Source: ARM Cortex-M4 Processor Technical Reference Manual
	// Source: infineonforums -> 358-ITM-printf-style-debugging-not-working
	// FFCR = Formatter and Flash Control Register
	//        0x0 ... continuous formatting disabled
	//        0x1 ... continuous formatting enabled
	TPI->FFCR &= ~TPI_FFCR_EnFCont_Msk;
 80074a2:	4a12      	ldr	r2, [pc, #72]	; (80074ec <initRetargetSwo+0x80>)
 80074a4:	4b11      	ldr	r3, [pc, #68]	; (80074ec <initRetargetSwo+0x80>)
 80074a6:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 80074aa:	f023 0302 	bic.w	r3, r3, #2
 80074ae:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

	// Unlock ITM
	// Source: infineonforums -> 358-ITM-printf-style-debugging-not-working
	ITM->LAR = 0xC5ACCE55;
 80074b2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80074b6:	4a0e      	ldr	r2, [pc, #56]	; (80074f0 <initRetargetSwo+0x84>)
 80074b8:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
	// Source: ARMv7-M Architecture Reference Manual, Sec. C1-7
	// TCR = Trace Control Register
	//       ITMENA ... enable ITM
	ITM->TCR |= ITM_TCR_ITMENA_Msk;
 80074bc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80074c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80074c4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80074c8:	f043 0301 	orr.w	r3, r3, #1
 80074cc:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
	// Source: ARMv7-M Architecture Reference Manual, Sec. C1-7
	// TER = Trace Enable Register
	//       STIMENA ... Stimulus Port #N is enabled when bit STIMENA[N]
	ITM->TER = 0xFFFFFFFF;
 80074d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80074d4:	f04f 32ff 	mov.w	r2, #4294967295
 80074d8:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
}
 80074dc:	bf00      	nop
 80074de:	46bd      	mov	sp, r7
 80074e0:	bc80      	pop	{r7}
 80074e2:	4770      	bx	lr
 80074e4:	48028200 	.word	0x48028200
 80074e8:	e000edf0 	.word	0xe000edf0
 80074ec:	e0040000 	.word	0xe0040000
 80074f0:	c5acce55 	.word	0xc5acce55

080074f4 <_write>:
 * @brief Retarget the printf() function to output via the ITM Debug module.
 *        This function relies on ITM_SendChar() defined in core_cm4.h of the
 *        CMSIS library.
 */
int _write (int file, char *buf, int nbytes)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b086      	sub	sp, #24
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
	int i;

	for (i = 0; i < nbytes; i++) {
 8007500:	2300      	movs	r3, #0
 8007502:	617b      	str	r3, [r7, #20]
 8007504:	e00a      	b.n	800751c <_write+0x28>
		ITM_SendChar ( (*buf++));
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	1c5a      	adds	r2, r3, #1
 800750a:	60ba      	str	r2, [r7, #8]
 800750c:	f993 3000 	ldrsb.w	r3, [r3]
 8007510:	4618      	mov	r0, r3
 8007512:	f7ff ff85 	bl	8007420 <ITM_SendChar>
 */
int _write (int file, char *buf, int nbytes)
{
	int i;

	for (i = 0; i < nbytes; i++) {
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	3301      	adds	r3, #1
 800751a:	617b      	str	r3, [r7, #20]
 800751c:	697a      	ldr	r2, [r7, #20]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	429a      	cmp	r2, r3
 8007522:	dbf0      	blt.n	8007506 <_write+0x12>
		ITM_SendChar ( (*buf++));
	}
	return nbytes;
 8007524:	687b      	ldr	r3, [r7, #4]
}
 8007526:	4618      	mov	r0, r3
 8007528:	3718      	adds	r7, #24
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop

08007530 <CPU_TS_TmrInit>:
 *
 *              See also CPU_TS_TmrRd()
 */
#if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
void  CPU_TS_TmrInit (void)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
	CPU_INT32U  fclk_freq;

	fclk_freq = BSP_SysClkFreqGet();
 8007536:	f7ff ff03 	bl	8007340 <BSP_SysClkFreqGet>
 800753a:	6078      	str	r0, [r7, #4]

	CPU_BSP_REG_DEMCR  |= DEF_BIT_24;
 800753c:	4a09      	ldr	r2, [pc, #36]	; (8007564 <CPU_TS_TmrInit+0x34>)
 800753e:	4b09      	ldr	r3, [pc, #36]	; (8007564 <CPU_TS_TmrInit+0x34>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007546:	6013      	str	r3, [r2, #0]
	CPU_BSP_REG_DWT_CR |= DEF_BIT_00;
 8007548:	4a07      	ldr	r2, [pc, #28]	; (8007568 <CPU_TS_TmrInit+0x38>)
 800754a:	4b07      	ldr	r3, [pc, #28]	; (8007568 <CPU_TS_TmrInit+0x38>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f043 0301 	orr.w	r3, r3, #1
 8007552:	6013      	str	r3, [r2, #0]

	CPU_TS_TmrFreqSet ( (CPU_TS_TMR_FREQ) fclk_freq);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f7fa fb99 	bl	8001c8c <CPU_TS_TmrFreqSet>
}
 800755a:	bf00      	nop
 800755c:	3708      	adds	r7, #8
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	e000edfc 	.word	0xe000edfc
 8007568:	e0001000 	.word	0xe0001000

0800756c <CPU_TS_TmrRd>:
 *             resolution inadequate to measure desired times.
 *
 */
#if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
CPU_TS_TMR  CPU_TS_TmrRd (void)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
	CPU_TS_TMR  ts_tmr_cnts;


	ts_tmr_cnts = (CPU_TS_TMR) CPU_BSP_REG_DWT_CYCCNT;
 8007572:	4b04      	ldr	r3, [pc, #16]	; (8007584 <CPU_TS_TmrRd+0x18>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	607b      	str	r3, [r7, #4]

	return (ts_tmr_cnts);
 8007578:	687b      	ldr	r3, [r7, #4]
}
 800757a:	4618      	mov	r0, r3
 800757c:	370c      	adds	r7, #12
 800757e:	46bd      	mov	sp, r7
 8007580:	bc80      	pop	{r7}
 8007582:	4770      	bx	lr
 8007584:	e0001004 	.word	0xe0001004

08007588 <_lseek>:

/*
 * File position seek
 */
__attribute__((weak)) int _lseek(int file, int offset, int whence)
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	607a      	str	r2, [r7, #4]
 file = file;
 offset = offset;
 whence = whence;
 return -1;
 8007594:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007598:	4618      	mov	r0, r3
 800759a:	3714      	adds	r7, #20
 800759c:	46bd      	mov	sp, r7
 800759e:	bc80      	pop	{r7}
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop

080075a4 <_read>:

/*
 * File read
 */
__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	607a      	str	r2, [r7, #4]
 file = file;
 len  = len;
 return 0;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3714      	adds	r7, #20
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bc80      	pop	{r7}
 80075ba:	4770      	bx	lr

080075bc <_close>:

/*
 * File close
 */
__attribute__((weak)) int _close(void)
{
 80075bc:	b480      	push	{r7}
 80075be:	af00      	add	r7, sp, #0
 return -1;
 80075c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bc80      	pop	{r7}
 80075ca:	4770      	bx	lr

080075cc <_fstat>:

/*
 * File status
 */
__attribute__((weak)) int _fstat(int file, struct stat *st)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
 file = file;
 if(st)
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d002      	beq.n	80075e2 <_fstat+0x16>
  return -1;
 80075dc:	f04f 33ff 	mov.w	r3, #4294967295
 80075e0:	e001      	b.n	80075e6 <_fstat+0x1a>
 else
  return -2;
 80075e2:	f06f 0301 	mvn.w	r3, #1
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	370c      	adds	r7, #12
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bc80      	pop	{r7}
 80075ee:	4770      	bx	lr

080075f0 <_sbrk>:
/* ========================================================================= */
/*
 * Heap break (position)
 */
__attribute__((weak)) void *_sbrk(int RequestedSize)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b087      	sub	sp, #28
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 unsigned int  HeapSize;
 static unsigned char *HeapBound;
 static unsigned char * heap= (unsigned char *)NULL;


 HeapSize   = (unsigned int)(&Heap_Bank1_Size);
 80075f8:	4b15      	ldr	r3, [pc, #84]	; (8007650 <_sbrk+0x60>)
 80075fa:	617b      	str	r3, [r7, #20]

 /*
  * If this is the first time malloc() was invoked, we start with the
  * begining of the heap.
  */
 if(heap == (unsigned char *)NULL)
 80075fc:	4b15      	ldr	r3, [pc, #84]	; (8007654 <_sbrk+0x64>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d108      	bne.n	8007616 <_sbrk+0x26>
  {
   heap = (unsigned char *)&Heap_Bank1_Start;
 8007604:	4b13      	ldr	r3, [pc, #76]	; (8007654 <_sbrk+0x64>)
 8007606:	4a14      	ldr	r2, [pc, #80]	; (8007658 <_sbrk+0x68>)
 8007608:	601a      	str	r2, [r3, #0]
   HeapBound  = (unsigned char *) (heap + HeapSize);
 800760a:	4b12      	ldr	r3, [pc, #72]	; (8007654 <_sbrk+0x64>)
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	4413      	add	r3, r2
 8007612:	4a12      	ldr	r2, [pc, #72]	; (800765c <_sbrk+0x6c>)
 8007614:	6013      	str	r3, [r2, #0]
  }

 /* Super duper algo to find out if we have memory for the latest request */
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;
 8007616:	4b0f      	ldr	r3, [pc, #60]	; (8007654 <_sbrk+0x64>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	613b      	str	r3, [r7, #16]

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
 800761c:	4b0d      	ldr	r3, [pc, #52]	; (8007654 <_sbrk+0x64>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	461a      	mov	r2, r3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4413      	add	r3, r2
 8007626:	3307      	adds	r3, #7
                                          & 0xFFFFFFF8);
 8007628:	f023 0307 	bic.w	r3, r3, #7
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
 800762c:	60fb      	str	r3, [r7, #12]
                                          & 0xFFFFFFF8);

 /* Return no memory condition if we sense we are crossing the limit */
 if (NextBreak >=  HeapBound )
 800762e:	4b0b      	ldr	r3, [pc, #44]	; (800765c <_sbrk+0x6c>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68fa      	ldr	r2, [r7, #12]
 8007634:	429a      	cmp	r2, r3
 8007636:	d301      	bcc.n	800763c <_sbrk+0x4c>
  return ((unsigned char *)NULL);
 8007638:	2300      	movs	r3, #0
 800763a:	e003      	b.n	8007644 <_sbrk+0x54>
 else
 {
  heap = NextBreak;
 800763c:	4a05      	ldr	r2, [pc, #20]	; (8007654 <_sbrk+0x64>)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6013      	str	r3, [r2, #0]
  return CurrBreak;
 8007642:	693b      	ldr	r3, [r7, #16]
 }
}
 8007644:	4618      	mov	r0, r3
 8007646:	371c      	adds	r7, #28
 8007648:	46bd      	mov	sp, r7
 800764a:	bc80      	pop	{r7}
 800764c:	4770      	bx	lr
 800764e:	bf00      	nop
 8007650:	0000c5b0 	.word	0x0000c5b0
 8007654:	20001ec4 	.word	0x20001ec4
 8007658:	20003a50 	.word	0x20003a50
 800765c:	20001ec8 	.word	0x20001ec8

08007660 <_init>:
 while(1){}
}

/* Init */
__attribute__((weak)) void _init(void)
{}
 8007660:	b480      	push	{r7}
 8007662:	af00      	add	r7, sp, #0
 8007664:	bf00      	nop
 8007666:	46bd      	mov	sp, r7
 8007668:	bc80      	pop	{r7}
 800766a:	4770      	bx	lr

0800766c <_isatty>:

/*
 * Terminal type evaluation
 */
__attribute__((weak)) int _isatty(int file)
{
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 file = file;
 return -1;
 8007674:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007678:	4618      	mov	r0, r3
 800767a:	370c      	adds	r7, #12
 800767c:	46bd      	mov	sp, r7
 800767e:	bc80      	pop	{r7}
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop

08007684 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4a1b      	ldr	r2, [pc, #108]	; (80076fc <XMC_USIC_CH_Enable+0x78>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d003      	beq.n	800769c <XMC_USIC_CH_Enable+0x18>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a1a      	ldr	r2, [pc, #104]	; (8007700 <XMC_USIC_CH_Enable+0x7c>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d103      	bne.n	80076a4 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 800769c:	4819      	ldr	r0, [pc, #100]	; (8007704 <XMC_USIC_CH_Enable+0x80>)
 800769e:	f000 f8cd 	bl	800783c <XMC_USIC_Enable>
 80076a2:	e016      	b.n	80076d2 <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	4a18      	ldr	r2, [pc, #96]	; (8007708 <XMC_USIC_CH_Enable+0x84>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d003      	beq.n	80076b4 <XMC_USIC_CH_Enable+0x30>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4a17      	ldr	r2, [pc, #92]	; (800770c <XMC_USIC_CH_Enable+0x88>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d103      	bne.n	80076bc <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 80076b4:	4816      	ldr	r0, [pc, #88]	; (8007710 <XMC_USIC_CH_Enable+0x8c>)
 80076b6:	f000 f8c1 	bl	800783c <XMC_USIC_Enable>
 80076ba:	e00a      	b.n	80076d2 <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	4a15      	ldr	r2, [pc, #84]	; (8007714 <XMC_USIC_CH_Enable+0x90>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d003      	beq.n	80076cc <XMC_USIC_CH_Enable+0x48>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	4a14      	ldr	r2, [pc, #80]	; (8007718 <XMC_USIC_CH_Enable+0x94>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d102      	bne.n	80076d2 <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 80076cc:	4813      	ldr	r0, [pc, #76]	; (800771c <XMC_USIC_CH_Enable+0x98>)
 80076ce:	f000 f8b5 	bl	800783c <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2203      	movs	r2, #3
 80076d6:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 80076d8:	bf00      	nop
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d0f9      	beq.n	80076da <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ea:	f023 020f 	bic.w	r2, r3, #15
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80076f2:	bf00      	nop
 80076f4:	3708      	adds	r7, #8
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	bf00      	nop
 80076fc:	40030000 	.word	0x40030000
 8007700:	40030200 	.word	0x40030200
 8007704:	40030008 	.word	0x40030008
 8007708:	48020000 	.word	0x48020000
 800770c:	48020200 	.word	0x48020200
 8007710:	48020008 	.word	0x48020008
 8007714:	48024000 	.word	0x48024000
 8007718:	48024200 	.word	0x48024200
 800771c:	48024008 	.word	0x48024008

08007720 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b08e      	sub	sp, #56	; 0x38
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	2b63      	cmp	r3, #99	; 0x63
 8007730:	d95a      	bls.n	80077e8 <XMC_USIC_CH_SetBaudrate+0xc8>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d057      	beq.n	80077e8 <XMC_USIC_CH_SetBaudrate+0xc8>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8007738:	f000 fa8c 	bl	8007c54 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 800773c:	4602      	mov	r2, r0
 800773e:	4b2f      	ldr	r3, [pc, #188]	; (80077fc <XMC_USIC_CH_SetBaudrate+0xdc>)
 8007740:	fba3 2302 	umull	r2, r3, r3, r2
 8007744:	095b      	lsrs	r3, r3, #5
 8007746:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	4a2c      	ldr	r2, [pc, #176]	; (80077fc <XMC_USIC_CH_SetBaudrate+0xdc>)
 800774c:	fba2 2303 	umull	r2, r3, r2, r3
 8007750:	095b      	lsrs	r3, r3, #5
 8007752:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
 8007754:	2301      	movs	r3, #1
 8007756:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 8007758:	2301      	movs	r3, #1
 800775a:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 800775c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8007760:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8007762:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8007766:	633b      	str	r3, [r7, #48]	; 0x30
 8007768:	e022      	b.n	80077b0 <XMC_USIC_CH_SetBaudrate+0x90>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 800776a:	6a3b      	ldr	r3, [r7, #32]
 800776c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800776e:	fb02 f203 	mul.w	r2, r2, r3
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	6879      	ldr	r1, [r7, #4]
 8007776:	fb01 f303 	mul.w	r3, r1, r3
 800777a:	fbb2 f3f3 	udiv	r3, r2, r3
 800777e:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 8007780:	69fb      	ldr	r3, [r7, #28]
 8007782:	0a9b      	lsrs	r3, r3, #10
 8007784:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800778c:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007794:	d209      	bcs.n	80077aa <XMC_USIC_CH_SetBaudrate+0x8a>
 8007796:	697a      	ldr	r2, [r7, #20]
 8007798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779a:	429a      	cmp	r2, r3
 800779c:	d205      	bcs.n	80077aa <XMC_USIC_CH_SetBaudrate+0x8a>
      {
        pdiv_frac_min = pdiv_frac;
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 80077a2:	69bb      	ldr	r3, [r7, #24]
 80077a4:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 80077a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a8:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 80077aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ac:	3b01      	subs	r3, #1
 80077ae:	633b      	str	r3, [r7, #48]	; 0x30
 80077b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1d9      	bne.n	800776a <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 80077b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b8:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    /*FHTW: BRG.SCLKCFG[31:30]-Bit (Bit 31:30 auf 01 setzen, damit mit positiver SCLK die Daten (MOSI) anliegen)*/
    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	695a      	ldr	r2, [r3, #20]
 80077c4:	4b0e      	ldr	r3, [pc, #56]	; (8007800 <XMC_USIC_CH_SetBaudrate+0xe0>)
 80077c6:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	3a01      	subs	r2, #1
 80077cc:	0292      	lsls	r2, r2, #10

    /*FHTW: BRG.SCLKCFG[31:30]-Bit (Bit 31:30 auf 01 setzen, damit mit positiver SCLK die Daten (MOSI) anliegen)*/
    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 80077ce:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos) |
 80077d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d2:	3b01      	subs	r3, #1
 80077d4:	041b      	lsls	r3, r3, #16
    /*FHTW: BRG.SCLKCFG[31:30]-Bit (Bit 31:30 auf 01 setzen, damit mit positiver SCLK die Daten (MOSI) anliegen)*/
    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 80077d6:	4313      	orrs	r3, r2
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos) |
 80077d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    /*FHTW: BRG.SCLKCFG[31:30]-Bit (Bit 31:30 auf 01 setzen, damit mit positiver SCLK die Daten (MOSI) anliegen)*/
    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos) |
				   (0x1UL<<USIC_CH_BRG_SCLKCFG_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 80077e0:	2300      	movs	r3, #0
 80077e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80077e6:	e002      	b.n	80077ee <XMC_USIC_CH_SetBaudrate+0xce>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  return status;
 80077ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3738      	adds	r7, #56	; 0x38
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	51eb851f 	.word	0x51eb851f
 8007800:	fc0080ef 	.word	0xfc0080ef

08007804 <XMC_USIC_CH_SetInterruptNodePointer>:
}

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
 8007804:	b480      	push	{r7}
 8007806:	b085      	sub	sp, #20
 8007808:	af00      	add	r7, sp, #0
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	460b      	mov	r3, r1
 800780e:	607a      	str	r2, [r7, #4]
 8007810:	72fb      	strb	r3, [r7, #11]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	699a      	ldr	r2, [r3, #24]
 8007816:	7afb      	ldrb	r3, [r7, #11]
 8007818:	2107      	movs	r1, #7
 800781a:	fa01 f303 	lsl.w	r3, r1, r3
 800781e:	43db      	mvns	r3, r3
 8007820:	401a      	ands	r2, r3
                  (service_request << (uint32_t)interrupt_node));
 8007822:	7afb      	ldrb	r3, [r7, #11]
 8007824:	6879      	ldr	r1, [r7, #4]
 8007826:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 800782a:	431a      	orrs	r2, r3
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	619a      	str	r2, [r3, #24]
                  (service_request << (uint32_t)interrupt_node));
}
 8007830:	bf00      	nop
 8007832:	3714      	adds	r7, #20
 8007834:	46bd      	mov	sp, r7
 8007836:	bc80      	pop	{r7}
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop

0800783c <XMC_USIC_Enable>:
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
                   (service_request << (uint32_t)interrupt_node));
}

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a0d      	ldr	r2, [pc, #52]	; (800787c <XMC_USIC_Enable+0x40>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d104      	bne.n	8007856 <XMC_USIC_Enable+0x1a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 800784c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007850:	f000 f9da 	bl	8007c08 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8007854:	e00e      	b.n	8007874 <XMC_USIC_Enable+0x38>
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
#endif	
  }
#if defined(USIC1)  
  else if (usic == USIC1)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4a09      	ldr	r2, [pc, #36]	; (8007880 <XMC_USIC_Enable+0x44>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d103      	bne.n	8007866 <XMC_USIC_Enable+0x2a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
#endif	
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 800785e:	4809      	ldr	r0, [pc, #36]	; (8007884 <XMC_USIC_Enable+0x48>)
 8007860:	f000 f9d2 	bl	8007c08 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8007864:	e006      	b.n	8007874 <XMC_USIC_Enable+0x38>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
#endif	
  }
#endif  
#if defined(USIC2)  
  else if (usic == USIC2)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4a07      	ldr	r2, [pc, #28]	; (8007888 <XMC_USIC_Enable+0x4c>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d102      	bne.n	8007874 <XMC_USIC_Enable+0x38>
  {
#if defined(CLOCK_GATING_SUPPORTED) 
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 800786e:	4807      	ldr	r0, [pc, #28]	; (800788c <XMC_USIC_Enable+0x50>)
 8007870:	f000 f9ca 	bl	8007c08 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8007874:	bf00      	nop
 8007876:	3708      	adds	r7, #8
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}
 800787c:	40030008 	.word	0x40030008
 8007880:	48020008 	.word	0x48020008
 8007884:	10000080 	.word	0x10000080
 8007888:	48024008 	.word	0x48024008
 800788c:	10000100 	.word	0x10000100

08007890 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	68db      	ldr	r3, [r3, #12]
 800789c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	60da      	str	r2, [r3, #12]
}
 80078a4:	bf00      	nop
 80078a6:	370c      	adds	r7, #12
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bc80      	pop	{r7}
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop

080078b0 <XMC_CCU4_lDeassertReset>:

  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  switch ((uint32_t)module)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a12      	ldr	r2, [pc, #72]	; (8007904 <XMC_CCU4_lDeassertReset+0x54>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d011      	beq.n	80078e4 <XMC_CCU4_lDeassertReset+0x34>
 80078c0:	4a10      	ldr	r2, [pc, #64]	; (8007904 <XMC_CCU4_lDeassertReset+0x54>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d803      	bhi.n	80078ce <XMC_CCU4_lDeassertReset+0x1e>
 80078c6:	4a10      	ldr	r2, [pc, #64]	; (8007908 <XMC_CCU4_lDeassertReset+0x58>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d007      	beq.n	80078dc <XMC_CCU4_lDeassertReset+0x2c>
      break;
#endif

    default:
      XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
      break;   
 80078cc:	e016      	b.n	80078fc <XMC_CCU4_lDeassertReset+0x4c>
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
  switch ((uint32_t)module)
 80078ce:	4a0f      	ldr	r2, [pc, #60]	; (800790c <XMC_CCU4_lDeassertReset+0x5c>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d00b      	beq.n	80078ec <XMC_CCU4_lDeassertReset+0x3c>
 80078d4:	4a0e      	ldr	r2, [pc, #56]	; (8007910 <XMC_CCU4_lDeassertReset+0x60>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d00c      	beq.n	80078f4 <XMC_CCU4_lDeassertReset+0x44>
      break;
#endif

    default:
      XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
      break;   
 80078da:	e00f      	b.n	80078fc <XMC_CCU4_lDeassertReset+0x4c>
__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
  switch ((uint32_t)module)
  {
    case (uint32_t)CCU40:
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 80078dc:	2004      	movs	r0, #4
 80078de:	f000 f993 	bl	8007c08 <XMC_SCU_RESET_DeassertPeripheralReset>
      break;
 80078e2:	e00b      	b.n	80078fc <XMC_CCU4_lDeassertReset+0x4c>
      
#if defined(CCU41)
    case (uint32_t)CCU41:
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 80078e4:	2008      	movs	r0, #8
 80078e6:	f000 f98f 	bl	8007c08 <XMC_SCU_RESET_DeassertPeripheralReset>
      break;
 80078ea:	e007      	b.n	80078fc <XMC_CCU4_lDeassertReset+0x4c>
#endif

#if defined(CCU42)
    case (uint32_t)CCU42:
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 80078ec:	2010      	movs	r0, #16
 80078ee:	f000 f98b 	bl	8007c08 <XMC_SCU_RESET_DeassertPeripheralReset>
      break;
 80078f2:	e003      	b.n	80078fc <XMC_CCU4_lDeassertReset+0x4c>
#endif

#if defined(CCU43)
    case (uint32_t)CCU43:
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 80078f4:	4807      	ldr	r0, [pc, #28]	; (8007914 <XMC_CCU4_lDeassertReset+0x64>)
 80078f6:	f000 f987 	bl	8007c08 <XMC_SCU_RESET_DeassertPeripheralReset>
      break;
 80078fa:	bf00      	nop
    default:
      XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
      break;   

  }
}
 80078fc:	bf00      	nop
 80078fe:	3708      	adds	r7, #8
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	40010000 	.word	0x40010000
 8007908:	4000c000 	.word	0x4000c000
 800790c:	40014000 	.word	0x40014000
 8007910:	48004000 	.word	0x48004000
 8007914:	10000001 	.word	0x10000001

08007918 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8007920:	2010      	movs	r0, #16
 8007922:	f000 f9a7 	bl	8007c74 <XMC_SCU_CLOCK_EnableClock>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f7ff ffc2 	bl	80078b0 <XMC_CCU4_lDeassertReset>
#endif
}
 800792c:	bf00      	nop
 800792e:	3708      	adds	r7, #8
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	460b      	mov	r3, r1
 800793e:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f7ff ffe9 	bl	8007918 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f7ff ffa2 	bl	8007890 <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007958:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 800795a:	78fb      	ldrb	r3, [r7, #3]
 800795c:	039b      	lsls	r3, r3, #14
 800795e:	68fa      	ldr	r2, [r7, #12]
 8007960:	4313      	orrs	r3, r2
 8007962:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	68fa      	ldr	r2, [r7, #12]
 8007968:	601a      	str	r2, [r3, #0]
}
 800796a:	bf00      	nop
 800796c:	3710      	adds	r7, #16
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop

08007974 <XMC_CCU4_SetModuleClock>:

/* API to select CCU4 module clock */
void XMC_CCU4_SetModuleClock(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_CLOCK_t clock)
{
 8007974:	b480      	push	{r7}
 8007976:	b085      	sub	sp, #20
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	460b      	mov	r3, r1
 800797e:	70fb      	strb	r3, [r7, #3]
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Clock", XMC_CCU4_SLICE_CHECK_CLOCK(clock));

  gctrl = module->GCTRL;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_PCIS_Msk);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800798c:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) clock) << CCU4_GCTRL_PCIS_Pos;
 800798e:	78fb      	ldrb	r3, [r7, #3]
 8007990:	011b      	lsls	r3, r3, #4
 8007992:	68fa      	ldr	r2, [r7, #12]
 8007994:	4313      	orrs	r3, r2
 8007996:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	68fa      	ldr	r2, [r7, #12]
 800799c:	601a      	str	r2, [r3, #0]
}
 800799e:	bf00      	nop
 80079a0:	3714      	adds	r7, #20
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bc80      	pop	{r7}
 80079a6:	4770      	bx	lr

080079a8 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
		                            const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	795b      	ldrb	r3, [r3, #5]
 80079be:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	051a      	lsls	r2, r3, #20
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	791b      	ldrb	r3, [r3, #4]
 80079ce:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	461a      	mov	r2, r3
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	795b      	ldrb	r3, [r3, #5]
 80079de:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	461a      	mov	r2, r3
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	795b      	ldrb	r3, [r3, #5]
 80079ee:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	461a      	mov	r2, r3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	791b      	ldrb	r3, [r3, #4]
 80079fe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	461a      	mov	r2, r3
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007a0a:	bf00      	nop
 8007a0c:	370c      	adds	r7, #12
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bc80      	pop	{r7}
 8007a12:	4770      	bx	lr

08007a14 <XMC_CCU4_SLICE_StartConfig>:

/* API to configure the Start trigger function of a slice */
void XMC_CCU4_SLICE_StartConfig(XMC_CCU4_SLICE_t *const slice,
		                        const XMC_CCU4_SLICE_EVENT_t event,
                                const XMC_CCU4_SLICE_START_MODE_t start_mode)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b085      	sub	sp, #20
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	70fb      	strb	r3, [r7, #3]
 8007a20:	4613      	mov	r3, r2
 8007a22:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Start Mode", 
             ((start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR) ||\
		          (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START)));
  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	60bb      	str	r3, [r7, #8]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_STRTS_Msk);
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	f023 0303 	bic.w	r3, r3, #3
 8007a30:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_STRTS_Pos;
 8007a32:	78fb      	ldrb	r3, [r7, #3]
 8007a34:	68ba      	ldr	r2, [r7, #8]
 8007a36:	4313      	orrs	r3, r2
 8007a38:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	68ba      	ldr	r2, [r7, #8]
 8007a3e:	605a      	str	r2, [r3, #4]
  
  tc  = slice->TC;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	695b      	ldr	r3, [r3, #20]
 8007a44:	60fb      	str	r3, [r7, #12]
  /* Next, Configure the start mode */
  if (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR)
 8007a46:	78bb      	ldrb	r3, [r7, #2]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d104      	bne.n	8007a56 <XMC_CCU4_SLICE_StartConfig+0x42>
  {
    tc |= (uint32_t)CCU4_CC4_TC_STRM_Msk;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007a52:	60fb      	str	r3, [r7, #12]
 8007a54:	e003      	b.n	8007a5e <XMC_CCU4_SLICE_StartConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t)CCU4_CC4_TC_STRM_Msk);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a5c:	60fb      	str	r3, [r7, #12]
  }
  
  slice->TC = tc;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	68fa      	ldr	r2, [r7, #12]
 8007a62:	615a      	str	r2, [r3, #20]
}
 8007a64:	bf00      	nop
 8007a66:	3714      	adds	r7, #20
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bc80      	pop	{r7}
 8007a6c:	4770      	bx	lr
 8007a6e:	bf00      	nop

08007a70 <XMC_CCU4_SLICE_ConfigureEvent>:

/* API to configure a slice trigger event */
void XMC_CCU4_SLICE_ConfigureEvent(XMC_CCU4_SLICE_t *const slice,
		                               const XMC_CCU4_SLICE_EVENT_t event,
                                   const XMC_CCU4_SLICE_EVENT_CONFIG_t *const config)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b089      	sub	sp, #36	; 0x24
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	460b      	mov	r3, r1
 8007a7a:	607a      	str	r2, [r7, #4]
 8007a7c:	72fb      	strb	r3, [r7, #11]
             ((config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
              (config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Debounce Period", 
             XMC_CCU4_SLICE_CHECK_EVENT_FILTER(config->duration));
  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
 8007a7e:	7afb      	ldrb	r3, [r7, #11]
 8007a80:	3b01      	subs	r3, #1
 8007a82:	77fb      	strb	r3, [r7, #31]
  ins |= ((uint32_t) config->mapped_input) << pos;

  slice->INS1 = ins;

#else
  ins = slice->INS;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	61bb      	str	r3, [r7, #24]
  
  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU4_CC4_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
 8007a8a:	7ffb      	ldrb	r3, [r7, #31]
 8007a8c:	005b      	lsls	r3, r3, #1
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	3310      	adds	r3, #16
 8007a92:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 8007a94:	7dfb      	ldrb	r3, [r7, #23]
 8007a96:	2203      	movs	r2, #3
 8007a98:	fa02 f303 	lsl.w	r3, r2, r3
 8007a9c:	43db      	mvns	r3, r3
 8007a9e:	69ba      	ldr	r2, [r7, #24]
 8007aa0:	4013      	ands	r3, r2
 8007aa2:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->edge) << pos;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	785b      	ldrb	r3, [r3, #1]
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	7dfb      	ldrb	r3, [r7, #23]
 8007aac:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab0:	69ba      	ldr	r2, [r7, #24]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	61bb      	str	r3, [r7, #24]
  
  /* Next, the level */
  pos = ((uint8_t) CCU4_CC4_INS_EV0LM_Pos) + offset;
 8007ab6:	7ffb      	ldrb	r3, [r7, #31]
 8007ab8:	3316      	adds	r3, #22
 8007aba:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 8007abc:	7dfb      	ldrb	r3, [r7, #23]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ac4:	43db      	mvns	r3, r3
 8007ac6:	69ba      	ldr	r2, [r7, #24]
 8007ac8:	4013      	ands	r3, r2
 8007aca:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->level) << pos;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	789b      	ldrb	r3, [r3, #2]
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	7dfb      	ldrb	r3, [r7, #23]
 8007ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad8:	69ba      	ldr	r2, [r7, #24]
 8007ada:	4313      	orrs	r3, r2
 8007adc:	61bb      	str	r3, [r7, #24]
  
  /* Next, the debounce filter */
  pos = ((uint8_t) CCU4_CC4_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
 8007ade:	7ffb      	ldrb	r3, [r7, #31]
 8007ae0:	005b      	lsls	r3, r3, #1
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	3319      	adds	r3, #25
 8007ae6:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 8007ae8:	7dfb      	ldrb	r3, [r7, #23]
 8007aea:	2203      	movs	r2, #3
 8007aec:	fa02 f303 	lsl.w	r3, r2, r3
 8007af0:	43db      	mvns	r3, r3
 8007af2:	69ba      	ldr	r2, [r7, #24]
 8007af4:	4013      	ands	r3, r2
 8007af6:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->duration) << pos;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	78db      	ldrb	r3, [r3, #3]
 8007afc:	461a      	mov	r2, r3
 8007afe:	7dfb      	ldrb	r3, [r7, #23]
 8007b00:	fa02 f303 	lsl.w	r3, r2, r3
 8007b04:	69ba      	ldr	r2, [r7, #24]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	61bb      	str	r3, [r7, #24]

  /* Finally the input */
  pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
 8007b0a:	7ffb      	ldrb	r3, [r7, #31]
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 8007b10:	7dfb      	ldrb	r3, [r7, #23]
 8007b12:	220f      	movs	r2, #15
 8007b14:	fa02 f303 	lsl.w	r3, r2, r3
 8007b18:	43db      	mvns	r3, r3
 8007b1a:	69ba      	ldr	r2, [r7, #24]
 8007b1c:	4013      	ands	r3, r2
 8007b1e:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->mapped_input) << pos;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	461a      	mov	r2, r3
 8007b26:	7dfb      	ldrb	r3, [r7, #23]
 8007b28:	fa02 f303 	lsl.w	r3, r2, r3
 8007b2c:	69ba      	ldr	r2, [r7, #24]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	61bb      	str	r3, [r7, #24]

  slice->INS = ins;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	69ba      	ldr	r2, [r7, #24]
 8007b36:	601a      	str	r2, [r3, #0]
#endif
}
 8007b38:	bf00      	nop
 8007b3a:	3724      	adds	r7, #36	; 0x24
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bc80      	pop	{r7}
 8007b40:	4770      	bx	lr
 8007b42:	bf00      	nop

08007b44 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b087      	sub	sp, #28
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	70fb      	strb	r3, [r7, #3]
 8007b50:	4613      	mov	r3, r2
 8007b52:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007b5a:	60fb      	str	r3, [r7, #12]
  
  switch(event)
 8007b5c:	78fb      	ldrb	r3, [r7, #3]
 8007b5e:	2b09      	cmp	r3, #9
 8007b60:	d82c      	bhi.n	8007bbc <XMC_CCU4_SLICE_SetInterruptNode+0x78>
 8007b62:	a201      	add	r2, pc, #4	; (adr r2, 8007b68 <XMC_CCU4_SLICE_SetInterruptNode+0x24>)
 8007b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b68:	08007b91 	.word	0x08007b91
 8007b6c:	08007b91 	.word	0x08007b91
 8007b70:	08007b9b 	.word	0x08007b9b
 8007b74:	08007b9b 	.word	0x08007b9b
 8007b78:	08007bbd 	.word	0x08007bbd
 8007b7c:	08007bbd 	.word	0x08007bbd
 8007b80:	08007bbd 	.word	0x08007bbd
 8007b84:	08007bbd 	.word	0x08007bbd
 8007b88:	08007ba5 	.word	0x08007ba5
 8007b8c:	08007bb1 	.word	0x08007bb1
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 8007b90:	2303      	movs	r3, #3
 8007b92:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 8007b94:	2300      	movs	r3, #0
 8007b96:	617b      	str	r3, [r7, #20]
      break;
 8007b98:	e016      	b.n	8007bc8 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 8007b9a:	230c      	movs	r3, #12
 8007b9c:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 8007b9e:	2302      	movs	r3, #2
 8007ba0:	617b      	str	r3, [r7, #20]
      break;
 8007ba2:	e011      	b.n	8007bc8 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 8007ba4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007ba8:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 8007baa:	2308      	movs	r3, #8
 8007bac:	617b      	str	r3, [r7, #20]
      break;
 8007bae:	e00b      	b.n	8007bc8 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 8007bb0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007bb4:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 8007bb6:	230a      	movs	r3, #10
 8007bb8:	617b      	str	r3, [r7, #20]
      break;
 8007bba:	e005      	b.n	8007bc8 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 8007bbc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8007bc0:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 8007bc2:	230c      	movs	r3, #12
 8007bc4:	617b      	str	r3, [r7, #20]
      break;
 8007bc6:	bf00      	nop
  }
  
  srs &= ~mask; 
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	43db      	mvns	r3, r3
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	4013      	ands	r3, r2
 8007bd0:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 8007bd2:	78ba      	ldrb	r2, [r7, #2]
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bda:	68fa      	ldr	r2, [r7, #12]
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8007be8:	bf00      	nop
 8007bea:	371c      	adds	r7, #28
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bc80      	pop	{r7}
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop

08007bf4 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007bf8:	4b02      	ldr	r3, [pc, #8]	; (8007c04 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x10>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bc80      	pop	{r7}
 8007c02:	4770      	bx	lr
 8007c04:	20000030 	.word	0x20000030

08007c08 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) |= (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	0f1b      	lsrs	r3, r3, #28
 8007c14:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007c1c:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) |= (uint32_t)mask;
 8007c1e:	68fa      	ldr	r2, [r7, #12]
 8007c20:	4613      	mov	r3, r2
 8007c22:	005b      	lsls	r3, r3, #1
 8007c24:	4413      	add	r3, r2
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	4a09      	ldr	r2, [pc, #36]	; (8007c50 <XMC_SCU_RESET_DeassertPeripheralReset+0x48>)
 8007c2a:	441a      	add	r2, r3
 8007c2c:	68f9      	ldr	r1, [r7, #12]
 8007c2e:	460b      	mov	r3, r1
 8007c30:	005b      	lsls	r3, r3, #1
 8007c32:	440b      	add	r3, r1
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	4619      	mov	r1, r3
 8007c38:	4b05      	ldr	r3, [pc, #20]	; (8007c50 <XMC_SCU_RESET_DeassertPeripheralReset+0x48>)
 8007c3a:	440b      	add	r3, r1
 8007c3c:	6819      	ldr	r1, [r3, #0]
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	430b      	orrs	r3, r1
 8007c42:	6013      	str	r3, [r2, #0]
}
 8007c44:	bf00      	nop
 8007c46:	3714      	adds	r7, #20
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bc80      	pop	{r7}
 8007c4c:	4770      	bx	lr
 8007c4e:	bf00      	nop
 8007c50:	50004414 	.word	0x50004414

08007c54 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8007c58:	f7ff ffcc 	bl	8007bf4 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8007c5c:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 8007c5e:	4b04      	ldr	r3, [pc, #16]	; (8007c70 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8007c60:	695b      	ldr	r3, [r3, #20]
 8007c62:	f003 0301 	and.w	r3, r3, #1
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8007c66:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	50004600 	.word	0x50004600

08007c74 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 8007c7e:	4a04      	ldr	r2, [pc, #16]	; (8007c90 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8007c80:	79fb      	ldrb	r3, [r7, #7]
 8007c82:	6053      	str	r3, [r2, #4]
}
 8007c84:	bf00      	nop
 8007c86:	370c      	adds	r7, #12
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bc80      	pop	{r7}
 8007c8c:	4770      	bx	lr
 8007c8e:	bf00      	nop
 8007c90:	50004600 	.word	0x50004600

08007c94 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ca6:	b2db      	uxtb	r3, r3
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	370c      	adds	r7, #12
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bc80      	pop	{r7}
 8007cb0:	4770      	bx	lr
 8007cb2:	bf00      	nop

08007cb4 <XMC_USIC_CH_GetReceiveBufferStatus>:
 * can be read from RBUF.
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cc0:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	370c      	adds	r7, #12
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bc80      	pop	{r7}
 8007ccc:	4770      	bx	lr
 8007cce:	bf00      	nop

08007cd0 <XMC_SPI_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_GetStatusFlag()
 */
__STATIC_INLINE void XMC_SPI_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	431a      	orrs	r2, r3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8007ce6:	bf00      	nop
 8007ce8:	370c      	adds	r7, #12
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bc80      	pop	{r7}
 8007cee:	4770      	bx	lr

08007cf0 <XMC_SPI_CH_Init>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/
 
/* Initializes the selected SPI channel with the config structure. */
void XMC_SPI_CH_Init(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  XMC_USIC_CH_Enable(channel);
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f7ff fcc2 	bl	8007684 <XMC_USIC_CH_Enable>
  
  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	791b      	ldrb	r3, [r3, #4]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d106      	bne.n	8007d16 <XMC_SPI_CH_Init+0x26>
  {
    /* Configure baud rate */
    (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING); 
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	2202      	movs	r2, #2
 8007d0e:	4619      	mov	r1, r3
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f7ff fd05 	bl	8007720 <XMC_USIC_CH_SetBaudrate>
  
  /* Configuration of USIC Shift Control */
  /* Transmission Mode (TRM) = 1  */
  /* Passive Data Level (PDL) = 1 */
  /* FHTW: SDIR-Bit (Bit 0 of SCTR) to 1 in order to send MSB first */
  channel->SCTR = USIC_CH_SCTR_PDL_Msk |
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	4a0f      	ldr	r2, [pc, #60]	; (8007d58 <XMC_SPI_CH_Init+0x68>)
 8007d1a:	635a      	str	r2, [r3, #52]	; 0x34
				  (0x1UL << USIC_CH_SCTR_SDIR_Pos);

  /* Configuration of USIC Transmit Control/Status Register */
  /* TBUF Data Enable (TDEN) = 1 */
  /* TBUF Data Single Shot Mode (TDSSM) = 1 */
  channel->TCSR = (uint32_t)(USIC_CH_TCSR_HPCMD_Msk |
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 8007d22:	639a      	str	r2, [r3, #56]	; 0x38
                  (0x01UL  << USIC_CH_TCSR_TDEN_Pos) |
                  USIC_CH_TCSR_TDSSM_Msk);

  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	791b      	ldrb	r3, [r3, #4]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d107      	bne.n	8007d3c <XMC_SPI_CH_Init+0x4c>
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
                           USIC_CH_PCR_SSCMode_SELCTR_Msk |
                           (uint32_t)config->selo_inversion |
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	795b      	ldrb	r3, [r3, #5]
                  USIC_CH_TCSR_TDSSM_Msk);

  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
 8007d30:	f043 030b 	orr.w	r3, r3, #11
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	461a      	mov	r2, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	63da      	str	r2, [r3, #60]	; 0x3c
                           (uint32_t)config->selo_inversion |
                           USIC_CH_PCR_SSCMode_FEM_Msk);
  }

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8007d42:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	88db      	ldrh	r3, [r3, #6]
 8007d48:	461a      	mov	r2, r3
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	641a      	str	r2, [r3, #64]	; 0x40
}
 8007d4e:	bf00      	nop
 8007d50:	3708      	adds	r7, #8
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop
 8007d58:	073f0103 	.word	0x073f0103

08007d5c <XMC_SPI_CH_Transmit>:
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SELO_Msk;
}

/* Puts the data into FIFO if FIFO mode is enabled or else into standard buffers, by setting the proper mode. */
void XMC_SPI_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data, const XMC_SPI_CH_MODE_t mode)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	460b      	mov	r3, r1
 8007d66:	807b      	strh	r3, [r7, #2]
 8007d68:	4613      	mov	r3, r2
 8007d6a:	707b      	strb	r3, [r7, #1]

  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d70:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
                 (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 8007d74:	787b      	ldrb	r3, [r7, #1]
 8007d76:	019b      	lsls	r3, r3, #6
 8007d78:	b2db      	uxtb	r3, r3

/* Puts the data into FIFO if FIFO mode is enabled or else into standard buffers, by setting the proper mode. */
void XMC_SPI_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data, const XMC_SPI_CH_MODE_t mode)
{

  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 8007d7a:	431a      	orrs	r2, r3
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	641a      	str	r2, [r3, #64]	; 0x40
                 (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);


  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007d86:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d112      	bne.n	8007db4 <XMC_SPI_CH_Transmit+0x58>
  {
    while((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(channel) == (uint32_t)XMC_USIC_CH_TBUF_STATUS_BUSY)
 8007d8e:	bf00      	nop
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f7ff ff7f 	bl	8007c94 <XMC_USIC_CH_GetTransmitBufferStatus>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b80      	cmp	r3, #128	; 0x80
 8007d9a:	d0f9      	beq.n	8007d90 <XMC_SPI_CH_Transmit+0x34>
    {
    }
  
    XMC_SPI_CH_ClearStatusFlag(channel, (uint32_t)XMC_SPI_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8007d9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f7ff ff95 	bl	8007cd0 <XMC_SPI_CH_ClearStatusFlag>
  
    channel->TBUF[mode] = data;
 8007da6:	787a      	ldrb	r2, [r7, #1]
 8007da8:	8879      	ldrh	r1, [r7, #2]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	3220      	adds	r2, #32
 8007dae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  else
  {
    channel->IN[mode] = data;
  }
}
 8007db2:	e005      	b.n	8007dc0 <XMC_SPI_CH_Transmit+0x64>
  
    channel->TBUF[mode] = data;
  }
  else
  {
    channel->IN[mode] = data;
 8007db4:	787a      	ldrb	r2, [r7, #1]
 8007db6:	8879      	ldrh	r1, [r7, #2]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	3260      	adds	r2, #96	; 0x60
 8007dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
}
 8007dc0:	bf00      	nop
 8007dc2:	3708      	adds	r7, #8
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <XMC_SPI_CH_GetReceivedData>:

/* Reads the data from the buffers based on the FIFO mode selection. */
uint16_t XMC_SPI_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8007dd6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d112      	bne.n	8007e04 <XMC_SPI_CH_GetReceivedData+0x3c>
  {
	/*FHTW: check ReceiveBuffer Status added */
	while(((uint32_t)XMC_USIC_CH_GetReceiveBufferStatus(channel) != (uint32_t)XMC_USIC_CH_RBUF_STATUS_DATA_VALID1)&&((uint32_t)XMC_USIC_CH_GetReceiveBufferStatus(channel) != (uint32_t)XMC_USIC_CH_RBUF_STATUS_DATA_VALID0))
 8007dde:	bf00      	nop
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f7ff ff67 	bl	8007cb4 <XMC_USIC_CH_GetReceiveBufferStatus>
 8007de6:	4603      	mov	r3, r0
 8007de8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007dec:	d006      	beq.n	8007dfc <XMC_SPI_CH_GetReceivedData+0x34>
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f7ff ff60 	bl	8007cb4 <XMC_USIC_CH_GetReceiveBufferStatus>
 8007df4:	4603      	mov	r3, r0
 8007df6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dfa:	d1f1      	bne.n	8007de0 <XMC_SPI_CH_GetReceivedData+0x18>
	{
	}
    retval = (uint16_t)channel->RBUF;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e00:	81fb      	strh	r3, [r7, #14]
 8007e02:	e003      	b.n	8007e0c <XMC_SPI_CH_GetReceivedData+0x44>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8007e0a:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 8007e0c:	89fb      	ldrh	r3, [r7, #14]
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3710      	adds	r7, #16
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop

08007e18 <XMC_SPI_CH_EnableEvent>:

  return status;
}

void XMC_SPI_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
  channel->CCR |= (event&0x1fc00U);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	f403 33fe 	and.w	r3, r3, #130048	; 0x1fc00
 8007e2c:	431a      	orrs	r2, r3
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_SSCMode |= ((event << 13U) & 0xe000U);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	035b      	lsls	r3, r3, #13
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	431a      	orrs	r2, r3
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007e42:	bf00      	nop
 8007e44:	370c      	adds	r7, #12
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bc80      	pop	{r7}
 8007e4a:	4770      	bx	lr

08007e4c <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007e5e:	b2db      	uxtb	r3, r3
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bc80      	pop	{r7}
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop

08007e6c <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	683a      	ldr	r2, [r7, #0]
 8007e7a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8007e7c:	bf00      	nop
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bc80      	pop	{r7}
 8007e84:	4770      	bx	lr
 8007e86:	bf00      	nop

08007e88 <XMC_UART_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 8007e92:	2310      	movs	r3, #16
 8007e94:	60fb      	str	r3, [r7, #12]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f7ff fbf4 	bl	8007684 <XMC_USIC_CH_Enable>
  
  if(config->oversampling != 0U)
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	79db      	ldrb	r3, [r3, #7]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d002      	beq.n	8007eaa <XMC_UART_CH_Init+0x22>
  {
    oversampling = (uint32_t)config->oversampling;
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	79db      	ldrb	r3, [r3, #7]
 8007ea8:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure baud rate */
  (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	68fa      	ldr	r2, [r7, #12]
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f7ff fc34 	bl	8007720 <XMC_USIC_CH_SetBaudrate>
   * Configure the number of stop bits
   * Pulse length is set to 0 to have standard UART signaling, 
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	799b      	ldrb	r3, [r3, #6]
 8007ebc:	3b01      	subs	r3, #1
 8007ebe:	005a      	lsls	r2, r3, #1
			             (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	085b      	lsrs	r3, r3, #1
 8007ec4:	3301      	adds	r3, #1
 8007ec6:	021b      	lsls	r3, r3, #8
   * Configure the number of stop bits
   * Pulse length is set to 0 to have standard UART signaling, 
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	f043 0201 	orr.w	r2, r3, #1
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	791b      	ldrb	r3, [r3, #4]
 8007ed6:	3b01      	subs	r3, #1
 8007ed8:	061b      	lsls	r3, r3, #24
 8007eda:	f443 7281 	orr.w	r2, r3, #258	; 0x102
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	635a      	str	r2, [r3, #52]	; 0x34
		              ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	795b      	ldrb	r3, [r3, #5]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d009      	beq.n	8007efe <XMC_UART_CH_Init+0x76>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	795b      	ldrb	r3, [r3, #5]
 8007ef2:	3b01      	subs	r3, #1
 8007ef4:	041b      	lsls	r3, r3, #16
 8007ef6:	431a      	orrs	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	635a      	str	r2, [r3, #52]	; 0x34
 8007efc:	e008      	b.n	8007f10 <XMC_UART_CH_Init+0x88>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	791b      	ldrb	r3, [r3, #4]
 8007f06:	3b01      	subs	r3, #1
 8007f08:	041b      	lsls	r3, r3, #16
 8007f0a:	431a      	orrs	r2, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8007f16:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8007f1e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	891b      	ldrh	r3, [r3, #8]
 8007f24:	461a      	mov	r2, r3
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	641a      	str	r2, [r3, #64]	; 0x40
}
 8007f2a:	bf00      	nop
 8007f2c:	3710      	adds	r7, #16
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop

08007f34 <XMC_UART_CH_Transmit>:
  } 
  return status;
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	807b      	strh	r3, [r7, #2]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007f46:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d110      	bne.n	8007f70 <XMC_UART_CH_Transmit+0x3c>
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8007f4e:	bf00      	nop
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f7ff ff7b 	bl	8007e4c <XMC_USIC_CH_GetTransmitBufferStatus>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b80      	cmp	r3, #128	; 0x80
 8007f5a:	d0f9      	beq.n	8007f50 <XMC_UART_CH_Transmit+0x1c>
    {
    }
  
    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8007f5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f7ff ff83 	bl	8007e6c <XMC_UART_CH_ClearStatusFlag>
  
    /*Transmit data */
    channel->TBUF[0U] = data;
 8007f66:	887a      	ldrh	r2, [r7, #2]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = data;
  }
}
 8007f6e:	e003      	b.n	8007f78 <XMC_UART_CH_Transmit+0x44>
    /*Transmit data */
    channel->TBUF[0U] = data;
  }
  else
  {
    channel->IN[0U] = data;
 8007f70:	887a      	ldrh	r2, [r7, #2]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8007f78:	bf00      	nop
 8007f7a:	3708      	adds	r7, #8
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <XMC_UART_CH_GetReceivedData>:

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b085      	sub	sp, #20
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8007f8e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d103      	bne.n	8007f9e <XMC_UART_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f9a:	81fb      	strh	r3, [r7, #14]
 8007f9c:	e003      	b.n	8007fa6 <XMC_UART_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8007fa4:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 8007fa6:	89fb      	ldrh	r3, [r7, #14]
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3714      	adds	r7, #20
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bc80      	pop	{r7}
 8007fb0:	4770      	bx	lr
 8007fb2:	bf00      	nop

08007fb4 <XMC_UART_CH_EnableEvent>:
  }
  return status;
}

void XMC_UART_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
  channel->CCR |= (event&0x1fc00U);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	f403 33fe 	and.w	r3, r3, #130048	; 0x1fc00
 8007fc8:	431a      	orrs	r2, r3
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_ASCMode |= (event&0xf8U);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8007fd8:	431a      	orrs	r2, r3
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007fde:	bf00      	nop
 8007fe0:	370c      	adds	r7, #12
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bc80      	pop	{r7}
 8007fe6:	4770      	bx	lr

08007fe8 <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	70fb      	strb	r3, [r7, #3]
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 8007ff8:	78fb      	ldrb	r3, [r7, #3]
 8007ffa:	089b      	lsrs	r3, r3, #2
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	4618      	mov	r0, r3
 8008000:	78fb      	ldrb	r3, [r7, #3]
 8008002:	089b      	lsrs	r3, r3, #2
 8008004:	b2db      	uxtb	r3, r3
 8008006:	461a      	mov	r2, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	3204      	adds	r2, #4
 800800c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008010:	78fb      	ldrb	r3, [r7, #3]
 8008012:	f003 0303 	and.w	r3, r3, #3
 8008016:	00db      	lsls	r3, r3, #3
 8008018:	21f8      	movs	r1, #248	; 0xf8
 800801a:	fa01 f303 	lsl.w	r3, r1, r3
 800801e:	43db      	mvns	r3, r3
 8008020:	ea02 0103 	and.w	r1, r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	1d02      	adds	r2, r0, #4
 8008028:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 800802c:	78fb      	ldrb	r3, [r7, #3]
 800802e:	089b      	lsrs	r3, r3, #2
 8008030:	b2db      	uxtb	r3, r3
 8008032:	4618      	mov	r0, r3
 8008034:	78fb      	ldrb	r3, [r7, #3]
 8008036:	089b      	lsrs	r3, r3, #2
 8008038:	b2db      	uxtb	r3, r3
 800803a:	461a      	mov	r2, r3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	3204      	adds	r2, #4
 8008040:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008044:	78b9      	ldrb	r1, [r7, #2]
 8008046:	78fb      	ldrb	r3, [r7, #3]
 8008048:	f003 0303 	and.w	r3, r3, #3
 800804c:	00db      	lsls	r3, r3, #3
 800804e:	fa01 f303 	lsl.w	r3, r1, r3
 8008052:	ea42 0103 	orr.w	r1, r2, r3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	1d02      	adds	r2, r0, #4
 800805a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800805e:	bf00      	nop
 8008060:	370c      	adds	r7, #12
 8008062:	46bd      	mov	sp, r7
 8008064:	bc80      	pop	{r7}
 8008066:	4770      	bx	lr

08008068 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8008068:	b480      	push	{r7}
 800806a:	b085      	sub	sp, #20
 800806c:	af00      	add	r7, sp, #0
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	460b      	mov	r3, r1
 8008072:	607a      	str	r2, [r7, #4]
 8008074:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 8008076:	7afb      	ldrb	r3, [r7, #11]
 8008078:	089b      	lsrs	r3, r3, #2
 800807a:	b2db      	uxtb	r3, r3
 800807c:	4618      	mov	r0, r3
 800807e:	7afb      	ldrb	r3, [r7, #11]
 8008080:	089b      	lsrs	r3, r3, #2
 8008082:	b2db      	uxtb	r3, r3
 8008084:	461a      	mov	r2, r3
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	3204      	adds	r2, #4
 800808a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800808e:	7afb      	ldrb	r3, [r7, #11]
 8008090:	f003 0303 	and.w	r3, r3, #3
 8008094:	00db      	lsls	r3, r3, #3
 8008096:	21f8      	movs	r1, #248	; 0xf8
 8008098:	fa01 f303 	lsl.w	r3, r1, r3
 800809c:	43db      	mvns	r3, r3
 800809e:	ea02 0103 	and.w	r1, r2, r3
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	1d02      	adds	r2, r0, #4
 80080a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80080ae:	7afb      	ldrb	r3, [r7, #11]
 80080b0:	005b      	lsls	r3, r3, #1
 80080b2:	2103      	movs	r1, #3
 80080b4:	fa01 f303 	lsl.w	r3, r1, r3
 80080b8:	43db      	mvns	r3, r3
 80080ba:	401a      	ands	r2, r3
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	4a37      	ldr	r2, [pc, #220]	; (80081a0 <XMC_GPIO_Init+0x138>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d003      	beq.n	80080d0 <XMC_GPIO_Init+0x68>
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	4a36      	ldr	r2, [pc, #216]	; (80081a4 <XMC_GPIO_Init+0x13c>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d10a      	bne.n	80080e6 <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80080d4:	7afb      	ldrb	r3, [r7, #11]
 80080d6:	2101      	movs	r1, #1
 80080d8:	fa01 f303 	lsl.w	r3, r1, r3
 80080dc:	43db      	mvns	r3, r3
 80080de:	401a      	ands	r2, r3
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	661a      	str	r2, [r3, #96]	; 0x60
 80080e4:	e03c      	b.n	8008160 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	685a      	ldr	r2, [r3, #4]
 80080ea:	7afb      	ldrb	r3, [r7, #11]
 80080ec:	409a      	lsls	r2, r3
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 80080f2:	7afb      	ldrb	r3, [r7, #11]
 80080f4:	08db      	lsrs	r3, r3, #3
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	4618      	mov	r0, r3
 80080fa:	7afb      	ldrb	r3, [r7, #11]
 80080fc:	08db      	lsrs	r3, r3, #3
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	461a      	mov	r2, r3
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	3210      	adds	r2, #16
 8008106:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800810a:	7afb      	ldrb	r3, [r7, #11]
 800810c:	f003 0307 	and.w	r3, r3, #7
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	2107      	movs	r1, #7
 8008114:	fa01 f303 	lsl.w	r3, r1, r3
 8008118:	43db      	mvns	r3, r3
 800811a:	ea02 0103 	and.w	r1, r2, r3
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f100 0210 	add.w	r2, r0, #16
 8008124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8008128:	7afb      	ldrb	r3, [r7, #11]
 800812a:	08db      	lsrs	r3, r3, #3
 800812c:	b2db      	uxtb	r3, r3
 800812e:	4618      	mov	r0, r3
 8008130:	7afb      	ldrb	r3, [r7, #11]
 8008132:	08db      	lsrs	r3, r3, #3
 8008134:	b2db      	uxtb	r3, r3
 8008136:	461a      	mov	r2, r3
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	3210      	adds	r2, #16
 800813c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	7a1b      	ldrb	r3, [r3, #8]
 8008144:	4619      	mov	r1, r3
 8008146:	7afb      	ldrb	r3, [r7, #11]
 8008148:	f003 0307 	and.w	r3, r3, #7
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	fa01 f303 	lsl.w	r3, r1, r3
 8008152:	ea42 0103 	orr.w	r1, r2, r3
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f100 0210 	add.w	r2, r0, #16
 800815c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8008160:	7afb      	ldrb	r3, [r7, #11]
 8008162:	089b      	lsrs	r3, r3, #2
 8008164:	b2db      	uxtb	r3, r3
 8008166:	4618      	mov	r0, r3
 8008168:	7afb      	ldrb	r3, [r7, #11]
 800816a:	089b      	lsrs	r3, r3, #2
 800816c:	b2db      	uxtb	r3, r3
 800816e:	461a      	mov	r2, r3
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	3204      	adds	r2, #4
 8008174:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	4619      	mov	r1, r3
 800817e:	7afb      	ldrb	r3, [r7, #11]
 8008180:	f003 0303 	and.w	r3, r3, #3
 8008184:	00db      	lsls	r3, r3, #3
 8008186:	fa01 f303 	lsl.w	r3, r1, r3
 800818a:	ea42 0103 	orr.w	r1, r2, r3
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	1d02      	adds	r2, r0, #4
 8008192:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8008196:	bf00      	nop
 8008198:	3714      	adds	r7, #20
 800819a:	46bd      	mov	sp, r7
 800819c:	bc80      	pop	{r7}
 800819e:	4770      	bx	lr
 80081a0:	48028e00 	.word	0x48028e00
 80081a4:	48028f00 	.word	0x48028f00

080081a8 <Reset_Handler>:
    .section  .text.Reset_Handler
    .weak  Reset_Handler
    .type  Reset_Handler, %function
Reset_Handler:
                                            @ Disable Branch prediction.
    ldr r0,=PREF_PCON
 80081a8:	4817      	ldr	r0, [pc, #92]	; (8008208 <LoopForever+0x2>)
    ldr r1,[r0]
 80081aa:	6801      	ldr	r1, [r0, #0]
    orr r1,r1,#0x00010000
 80081ac:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
    str r1,[r0]
 80081b0:	6001      	str	r1, [r0, #0]

                                            @ Clear existing parity errors if any.
    ldr r0,=SCU_GCU_PEFLAG
 80081b2:	4816      	ldr	r0, [pc, #88]	; (800820c <LoopForever+0x6>)
    ldr r1,=0xFFFFFFFF
 80081b4:	f04f 31ff 	mov.w	r1, #4294967295
    str r1,[r0]
 80081b8:	6001      	str	r1, [r0, #0]

                                            @ Disable parity.
    ldr r0,=SCU_GCU_PEEN
 80081ba:	4815      	ldr	r0, [pc, #84]	; (8008210 <LoopForever+0xa>)
    mov r1,#0
 80081bc:	f04f 0100 	mov.w	r1, #0
    str r1,[R0]
 80081c0:	6001      	str	r1, [r0, #0]
    AND     R1,  R1, #(0x3FFFFFFF)          @ Clear the LSPEN and ASPEN bits
    STR     R1, [R0]
    ISB                                     @ Reset pipeline now the FPU is enabled
#endif

    LDR     R1, =0xE000ED14                 @ Load address to CCR register
 80081c2:	4914      	ldr	r1, [pc, #80]	; (8008214 <LoopForever+0xe>)
    LDR.W   R0, [R1, #0x0]
 80081c4:	f8d1 0000 	ldr.w	r0, [r1]
    BIC     R0,  R0, #0x8                   @ Enable unaligned memory access
 80081c8:	f020 0008 	bic.w	r0, r0, #8
    STR.W   R0, [R1, #0x0]
 80081cc:	f8c1 0000 	str.w	r0, [r1]

    ldr sp, =_estack                        @ set stack pointer.
 80081d0:	f8df d044 	ldr.w	sp, [pc, #68]	; 8008218 <LoopForever+0x12>

                                            @ a) copy .data section (Copy from ROM to RAM).
    movs r1, #0
 80081d4:	2100      	movs	r1, #0
    b LoopCopyDataInit
 80081d6:	e003      	b.n	80081e0 <LoopCopyDataInit>

080081d8 <CopyDataInit>:

CopyDataInit:
    ldr r3, =_sidata
 80081d8:	4b10      	ldr	r3, [pc, #64]	; (800821c <LoopForever+0x16>)
    ldr r3, [r3, r1]
 80081da:	585b      	ldr	r3, [r3, r1]
    str r3, [r0, r1]
 80081dc:	5043      	str	r3, [r0, r1]
    adds r1, r1, #4
 80081de:	3104      	adds	r1, #4

080081e0 <LoopCopyDataInit>:

LoopCopyDataInit:
    ldr r0, =_sdata
 80081e0:	480f      	ldr	r0, [pc, #60]	; (8008220 <LoopForever+0x1a>)
    ldr r3, =_edata
 80081e2:	4b10      	ldr	r3, [pc, #64]	; (8008224 <LoopForever+0x1e>)
    adds r2, r0, r1
 80081e4:	1842      	adds	r2, r0, r1
    cmp r2, r3
 80081e6:	429a      	cmp	r2, r3
    bcc CopyDataInit
 80081e8:	d3f6      	bcc.n	80081d8 <CopyDataInit>
    ldr r2, =_sbss
 80081ea:	4a0f      	ldr	r2, [pc, #60]	; (8008228 <LoopForever+0x22>)
    b LoopFillZerobss
 80081ec:	e002      	b.n	80081f4 <LoopFillZerobss>

080081ee <FillZerobss>:

                                            @ b) Clear .bss section (Zero init).
FillZerobss:
    movs r3, #0
 80081ee:	2300      	movs	r3, #0
    str r3, [r2], #4
 80081f0:	f842 3b04 	str.w	r3, [r2], #4

080081f4 <LoopFillZerobss>:

LoopFillZerobss:
    ldr r3, = _ebss
 80081f4:	4b0d      	ldr	r3, [pc, #52]	; (800822c <LoopForever+0x26>)
    cmp r2, r3
 80081f6:	429a      	cmp	r2, r3
    bcc FillZerobss
 80081f8:	d3f9      	bcc.n	80081ee <FillZerobss>

    bl BSP_LowLevelInit                     @ c) Call system initialzation routine.
 80081fa:	f7fe ff79 	bl	80070f0 <BSP_LowLevelInit>

    bl __libc_init_array                    @ d) Run static constructors.
 80081fe:	f000 f81d 	bl	800823c <__libc_init_array>

    bl main                                 @ e) Enter main.
 8008202:	f7f9 f80d 	bl	8001220 <main>

08008206 <LoopForever>:

                                            @ f) Loop forever if returning from main.
LoopForever:
    b LoopForever
 8008206:	e7fe      	b.n	8008206 <LoopForever>
    .section  .text.Reset_Handler
    .weak  Reset_Handler
    .type  Reset_Handler, %function
Reset_Handler:
                                            @ Disable Branch prediction.
    ldr r0,=PREF_PCON
 8008208:	58004000 	.word	0x58004000
    ldr r1,[r0]
    orr r1,r1,#0x00010000
    str r1,[r0]

                                            @ Clear existing parity errors if any.
    ldr r0,=SCU_GCU_PEFLAG
 800820c:	50004150 	.word	0x50004150
    ldr r1,=0xFFFFFFFF
    str r1,[r0]

                                            @ Disable parity.
    ldr r0,=SCU_GCU_PEEN
 8008210:	5000413c 	.word	0x5000413c
    AND     R1,  R1, #(0x3FFFFFFF)          @ Clear the LSPEN and ASPEN bits
    STR     R1, [R0]
    ISB                                     @ Reset pipeline now the FPU is enabled
#endif

    LDR     R1, =0xE000ED14                 @ Load address to CCR register
 8008214:	e000ed14 	.word	0xe000ed14
    LDR.W   R0, [R1, #0x0]
    BIC     R0,  R0, #0x8                   @ Enable unaligned memory access
    STR.W   R0, [R1, #0x0]

    ldr sp, =_estack                        @ set stack pointer.
 8008218:	20010000 	.word	0x20010000
                                            @ a) copy .data section (Copy from ROM to RAM).
    movs r1, #0
    b LoopCopyDataInit

CopyDataInit:
    ldr r3, =_sidata
 800821c:	0800ea5c 	.word	0x0800ea5c
    ldr r3, [r3, r1]
    str r3, [r0, r1]
    adds r1, r1, #4

LoopCopyDataInit:
    ldr r0, =_sdata
 8008220:	20000000 	.word	0x20000000
    ldr r3, =_edata
 8008224:	200009e0 	.word	0x200009e0
    adds r2, r0, r1
    cmp r2, r3
    bcc CopyDataInit
    ldr r2, =_sbss
 8008228:	200009e0 	.word	0x200009e0
FillZerobss:
    movs r3, #0
    str r3, [r2], #4

LoopFillZerobss:
    ldr r3, = _ebss
 800822c:	2000384c 	.word	0x2000384c

08008230 <App_NMI_ISR>:

@ Dummy Exception Handlers (infinite loops which can be modified)

    .section	.text.App_NMI_ISR
App_NMI_ISR:
	b	App_NMI_ISR
 8008230:	e7fe      	b.n	8008230 <App_NMI_ISR>

08008232 <App_Fault_ISR>:
	.size	App_NMI_ISR, .-App_NMI_ISR


    .section	.text.App_Fault_ISR
App_Fault_ISR:
	b	App_Fault_ISR
 8008232:	e7fe      	b.n	8008232 <App_Fault_ISR>

08008234 <App_MemFault_ISR>:
	.size	App_Fault_ISR, .-App_Fault_ISR


    .section	.text.App_MemFault_ISR
App_MemFault_ISR:
	b	App_MemFault_ISR
 8008234:	e7fe      	b.n	8008234 <App_MemFault_ISR>

08008236 <App_BusFault_ISR>:
	.size	App_MemFault_ISR, .-App_MemFault_ISR


    .section	.text.App_BusFault_ISR
App_BusFault_ISR:
	b	App_BusFault_ISR
 8008236:	e7fe      	b.n	8008236 <App_BusFault_ISR>

08008238 <App_UsageFault_ISR>:
	.size	App_BusFault_ISR, .-App_BusFault_ISR


    .section	.text.App_UsageFault_ISR
App_UsageFault_ISR:
	b	App_UsageFault_ISR
 8008238:	e7fe      	b.n	8008238 <App_UsageFault_ISR>

0800823a <App_Spurious_ISR>:
	.size	App_UsageFault_ISR, .-App_UsageFault_ISR

    .section	.text.App_Spurious_ISR
App_Spurious_ISR:
	b	App_Spurious_ISR
 800823a:	e7fe      	b.n	800823a <App_Spurious_ISR>

0800823c <__libc_init_array>:
 800823c:	b570      	push	{r4, r5, r6, lr}
 800823e:	4e0f      	ldr	r6, [pc, #60]	; (800827c <__libc_init_array+0x40>)
 8008240:	4d0f      	ldr	r5, [pc, #60]	; (8008280 <__libc_init_array+0x44>)
 8008242:	1b76      	subs	r6, r6, r5
 8008244:	10b6      	asrs	r6, r6, #2
 8008246:	bf18      	it	ne
 8008248:	2400      	movne	r4, #0
 800824a:	d005      	beq.n	8008258 <__libc_init_array+0x1c>
 800824c:	3401      	adds	r4, #1
 800824e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008252:	4798      	blx	r3
 8008254:	42a6      	cmp	r6, r4
 8008256:	d1f9      	bne.n	800824c <__libc_init_array+0x10>
 8008258:	4e0a      	ldr	r6, [pc, #40]	; (8008284 <__libc_init_array+0x48>)
 800825a:	4d0b      	ldr	r5, [pc, #44]	; (8008288 <__libc_init_array+0x4c>)
 800825c:	1b76      	subs	r6, r6, r5
 800825e:	f7ff f9ff 	bl	8007660 <_init>
 8008262:	10b6      	asrs	r6, r6, #2
 8008264:	bf18      	it	ne
 8008266:	2400      	movne	r4, #0
 8008268:	d006      	beq.n	8008278 <__libc_init_array+0x3c>
 800826a:	3401      	adds	r4, #1
 800826c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008270:	4798      	blx	r3
 8008272:	42a6      	cmp	r6, r4
 8008274:	d1f9      	bne.n	800826a <__libc_init_array+0x2e>
 8008276:	bd70      	pop	{r4, r5, r6, pc}
 8008278:	bd70      	pop	{r4, r5, r6, pc}
 800827a:	bf00      	nop
 800827c:	0800ea5c 	.word	0x0800ea5c
 8008280:	0800ea5c 	.word	0x0800ea5c
 8008284:	0800ea5c 	.word	0x0800ea5c
 8008288:	0800ea5c 	.word	0x0800ea5c

0800828c <memset>:
 800828c:	b470      	push	{r4, r5, r6}
 800828e:	0784      	lsls	r4, r0, #30
 8008290:	d046      	beq.n	8008320 <memset+0x94>
 8008292:	1e54      	subs	r4, r2, #1
 8008294:	2a00      	cmp	r2, #0
 8008296:	d041      	beq.n	800831c <memset+0x90>
 8008298:	b2cd      	uxtb	r5, r1
 800829a:	4603      	mov	r3, r0
 800829c:	e002      	b.n	80082a4 <memset+0x18>
 800829e:	1e62      	subs	r2, r4, #1
 80082a0:	b3e4      	cbz	r4, 800831c <memset+0x90>
 80082a2:	4614      	mov	r4, r2
 80082a4:	f803 5b01 	strb.w	r5, [r3], #1
 80082a8:	079a      	lsls	r2, r3, #30
 80082aa:	d1f8      	bne.n	800829e <memset+0x12>
 80082ac:	2c03      	cmp	r4, #3
 80082ae:	d92e      	bls.n	800830e <memset+0x82>
 80082b0:	b2cd      	uxtb	r5, r1
 80082b2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80082b6:	2c0f      	cmp	r4, #15
 80082b8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80082bc:	d919      	bls.n	80082f2 <memset+0x66>
 80082be:	f103 0210 	add.w	r2, r3, #16
 80082c2:	4626      	mov	r6, r4
 80082c4:	3e10      	subs	r6, #16
 80082c6:	2e0f      	cmp	r6, #15
 80082c8:	f842 5c10 	str.w	r5, [r2, #-16]
 80082cc:	f842 5c0c 	str.w	r5, [r2, #-12]
 80082d0:	f842 5c08 	str.w	r5, [r2, #-8]
 80082d4:	f842 5c04 	str.w	r5, [r2, #-4]
 80082d8:	f102 0210 	add.w	r2, r2, #16
 80082dc:	d8f2      	bhi.n	80082c4 <memset+0x38>
 80082de:	f1a4 0210 	sub.w	r2, r4, #16
 80082e2:	f022 020f 	bic.w	r2, r2, #15
 80082e6:	f004 040f 	and.w	r4, r4, #15
 80082ea:	3210      	adds	r2, #16
 80082ec:	2c03      	cmp	r4, #3
 80082ee:	4413      	add	r3, r2
 80082f0:	d90d      	bls.n	800830e <memset+0x82>
 80082f2:	461e      	mov	r6, r3
 80082f4:	4622      	mov	r2, r4
 80082f6:	3a04      	subs	r2, #4
 80082f8:	2a03      	cmp	r2, #3
 80082fa:	f846 5b04 	str.w	r5, [r6], #4
 80082fe:	d8fa      	bhi.n	80082f6 <memset+0x6a>
 8008300:	1f22      	subs	r2, r4, #4
 8008302:	f022 0203 	bic.w	r2, r2, #3
 8008306:	3204      	adds	r2, #4
 8008308:	4413      	add	r3, r2
 800830a:	f004 0403 	and.w	r4, r4, #3
 800830e:	b12c      	cbz	r4, 800831c <memset+0x90>
 8008310:	b2c9      	uxtb	r1, r1
 8008312:	441c      	add	r4, r3
 8008314:	f803 1b01 	strb.w	r1, [r3], #1
 8008318:	42a3      	cmp	r3, r4
 800831a:	d1fb      	bne.n	8008314 <memset+0x88>
 800831c:	bc70      	pop	{r4, r5, r6}
 800831e:	4770      	bx	lr
 8008320:	4614      	mov	r4, r2
 8008322:	4603      	mov	r3, r0
 8008324:	e7c2      	b.n	80082ac <memset+0x20>
 8008326:	bf00      	nop

08008328 <printf>:
 8008328:	b40f      	push	{r0, r1, r2, r3}
 800832a:	b500      	push	{lr}
 800832c:	4907      	ldr	r1, [pc, #28]	; (800834c <printf+0x24>)
 800832e:	b083      	sub	sp, #12
 8008330:	ab04      	add	r3, sp, #16
 8008332:	6808      	ldr	r0, [r1, #0]
 8008334:	f853 2b04 	ldr.w	r2, [r3], #4
 8008338:	6881      	ldr	r1, [r0, #8]
 800833a:	9301      	str	r3, [sp, #4]
 800833c:	f001 fbc2 	bl	8009ac4 <_vfprintf_r>
 8008340:	b003      	add	sp, #12
 8008342:	f85d eb04 	ldr.w	lr, [sp], #4
 8008346:	b004      	add	sp, #16
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop
 800834c:	20000460 	.word	0x20000460

08008350 <_puts_r>:
 8008350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008352:	4605      	mov	r5, r0
 8008354:	b089      	sub	sp, #36	; 0x24
 8008356:	4608      	mov	r0, r1
 8008358:	460c      	mov	r4, r1
 800835a:	f7f8 fa11 	bl	8000780 <strlen>
 800835e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8008360:	4f14      	ldr	r7, [pc, #80]	; (80083b4 <_puts_r+0x64>)
 8008362:	9404      	str	r4, [sp, #16]
 8008364:	2601      	movs	r6, #1
 8008366:	1c44      	adds	r4, r0, #1
 8008368:	a904      	add	r1, sp, #16
 800836a:	2202      	movs	r2, #2
 800836c:	9403      	str	r4, [sp, #12]
 800836e:	9005      	str	r0, [sp, #20]
 8008370:	68ac      	ldr	r4, [r5, #8]
 8008372:	9706      	str	r7, [sp, #24]
 8008374:	9607      	str	r6, [sp, #28]
 8008376:	9101      	str	r1, [sp, #4]
 8008378:	9202      	str	r2, [sp, #8]
 800837a:	b1b3      	cbz	r3, 80083aa <_puts_r+0x5a>
 800837c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008380:	049a      	lsls	r2, r3, #18
 8008382:	d406      	bmi.n	8008392 <_puts_r+0x42>
 8008384:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008386:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800838a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800838e:	81a3      	strh	r3, [r4, #12]
 8008390:	6662      	str	r2, [r4, #100]	; 0x64
 8008392:	4621      	mov	r1, r4
 8008394:	4628      	mov	r0, r5
 8008396:	aa01      	add	r2, sp, #4
 8008398:	f004 f9e6 	bl	800c768 <__sfvwrite_r>
 800839c:	2800      	cmp	r0, #0
 800839e:	bf14      	ite	ne
 80083a0:	f04f 30ff 	movne.w	r0, #4294967295
 80083a4:	200a      	moveq	r0, #10
 80083a6:	b009      	add	sp, #36	; 0x24
 80083a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083aa:	4628      	mov	r0, r5
 80083ac:	f004 f89c 	bl	800c4e8 <__sinit>
 80083b0:	e7e4      	b.n	800837c <_puts_r+0x2c>
 80083b2:	bf00      	nop
 80083b4:	0800e7a8 	.word	0x0800e7a8

080083b8 <puts>:
 80083b8:	4b02      	ldr	r3, [pc, #8]	; (80083c4 <puts+0xc>)
 80083ba:	4601      	mov	r1, r0
 80083bc:	6818      	ldr	r0, [r3, #0]
 80083be:	f7ff bfc7 	b.w	8008350 <_puts_r>
 80083c2:	bf00      	nop
 80083c4:	20000460 	.word	0x20000460

080083c8 <sprintf>:
 80083c8:	b40e      	push	{r1, r2, r3}
 80083ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083cc:	b09c      	sub	sp, #112	; 0x70
 80083ce:	ab21      	add	r3, sp, #132	; 0x84
 80083d0:	490f      	ldr	r1, [pc, #60]	; (8008410 <sprintf+0x48>)
 80083d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80083d6:	9301      	str	r3, [sp, #4]
 80083d8:	4605      	mov	r5, r0
 80083da:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 80083de:	6808      	ldr	r0, [r1, #0]
 80083e0:	9502      	str	r5, [sp, #8]
 80083e2:	f44f 7702 	mov.w	r7, #520	; 0x208
 80083e6:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80083ea:	a902      	add	r1, sp, #8
 80083ec:	9506      	str	r5, [sp, #24]
 80083ee:	f8ad 7014 	strh.w	r7, [sp, #20]
 80083f2:	9404      	str	r4, [sp, #16]
 80083f4:	9407      	str	r4, [sp, #28]
 80083f6:	f8ad 6016 	strh.w	r6, [sp, #22]
 80083fa:	f000 f80b 	bl	8008414 <_svfprintf_r>
 80083fe:	9b02      	ldr	r3, [sp, #8]
 8008400:	2200      	movs	r2, #0
 8008402:	701a      	strb	r2, [r3, #0]
 8008404:	b01c      	add	sp, #112	; 0x70
 8008406:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800840a:	b003      	add	sp, #12
 800840c:	4770      	bx	lr
 800840e:	bf00      	nop
 8008410:	20000460 	.word	0x20000460

08008414 <_svfprintf_r>:
 8008414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008418:	b0c1      	sub	sp, #260	; 0x104
 800841a:	460c      	mov	r4, r1
 800841c:	9109      	str	r1, [sp, #36]	; 0x24
 800841e:	4615      	mov	r5, r2
 8008420:	930e      	str	r3, [sp, #56]	; 0x38
 8008422:	900a      	str	r0, [sp, #40]	; 0x28
 8008424:	f004 fb4c 	bl	800cac0 <_localeconv_r>
 8008428:	6803      	ldr	r3, [r0, #0]
 800842a:	9317      	str	r3, [sp, #92]	; 0x5c
 800842c:	4618      	mov	r0, r3
 800842e:	f7f8 f9a7 	bl	8000780 <strlen>
 8008432:	89a3      	ldrh	r3, [r4, #12]
 8008434:	9016      	str	r0, [sp, #88]	; 0x58
 8008436:	061e      	lsls	r6, r3, #24
 8008438:	d503      	bpl.n	8008442 <_svfprintf_r+0x2e>
 800843a:	6923      	ldr	r3, [r4, #16]
 800843c:	2b00      	cmp	r3, #0
 800843e:	f001 811a 	beq.w	8009676 <_svfprintf_r+0x1262>
 8008442:	2300      	movs	r3, #0
 8008444:	461a      	mov	r2, r3
 8008446:	9312      	str	r3, [sp, #72]	; 0x48
 8008448:	9325      	str	r3, [sp, #148]	; 0x94
 800844a:	9324      	str	r3, [sp, #144]	; 0x90
 800844c:	9319      	str	r3, [sp, #100]	; 0x64
 800844e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008450:	f8df a464 	ldr.w	sl, [pc, #1124]	; 80088b8 <_svfprintf_r+0x4a4>
 8008454:	9214      	str	r2, [sp, #80]	; 0x50
 8008456:	ab30      	add	r3, sp, #192	; 0xc0
 8008458:	9323      	str	r3, [sp, #140]	; 0x8c
 800845a:	4699      	mov	r9, r3
 800845c:	9215      	str	r2, [sp, #84]	; 0x54
 800845e:	46a8      	mov	r8, r5
 8008460:	f898 3000 	ldrb.w	r3, [r8]
 8008464:	4644      	mov	r4, r8
 8008466:	b1eb      	cbz	r3, 80084a4 <_svfprintf_r+0x90>
 8008468:	2b25      	cmp	r3, #37	; 0x25
 800846a:	d102      	bne.n	8008472 <_svfprintf_r+0x5e>
 800846c:	e01a      	b.n	80084a4 <_svfprintf_r+0x90>
 800846e:	2b25      	cmp	r3, #37	; 0x25
 8008470:	d003      	beq.n	800847a <_svfprintf_r+0x66>
 8008472:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008476:	2b00      	cmp	r3, #0
 8008478:	d1f9      	bne.n	800846e <_svfprintf_r+0x5a>
 800847a:	ebc8 0504 	rsb	r5, r8, r4
 800847e:	b18d      	cbz	r5, 80084a4 <_svfprintf_r+0x90>
 8008480:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008482:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8008484:	f8c9 8000 	str.w	r8, [r9]
 8008488:	3301      	adds	r3, #1
 800848a:	442a      	add	r2, r5
 800848c:	2b07      	cmp	r3, #7
 800848e:	f8c9 5004 	str.w	r5, [r9, #4]
 8008492:	9225      	str	r2, [sp, #148]	; 0x94
 8008494:	9324      	str	r3, [sp, #144]	; 0x90
 8008496:	f300 80a6 	bgt.w	80085e6 <_svfprintf_r+0x1d2>
 800849a:	f109 0908 	add.w	r9, r9, #8
 800849e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084a0:	442b      	add	r3, r5
 80084a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80084a4:	7823      	ldrb	r3, [r4, #0]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	f000 80a6 	beq.w	80085f8 <_svfprintf_r+0x1e4>
 80084ac:	2300      	movs	r3, #0
 80084ae:	461a      	mov	r2, r3
 80084b0:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 80084b4:	4619      	mov	r1, r3
 80084b6:	930c      	str	r3, [sp, #48]	; 0x30
 80084b8:	9307      	str	r3, [sp, #28]
 80084ba:	f04f 3bff 	mov.w	fp, #4294967295
 80084be:	7863      	ldrb	r3, [r4, #1]
 80084c0:	f104 0801 	add.w	r8, r4, #1
 80084c4:	465d      	mov	r5, fp
 80084c6:	f108 0801 	add.w	r8, r8, #1
 80084ca:	f1a3 0020 	sub.w	r0, r3, #32
 80084ce:	2858      	cmp	r0, #88	; 0x58
 80084d0:	f200 8425 	bhi.w	8008d1e <_svfprintf_r+0x90a>
 80084d4:	e8df f010 	tbh	[pc, r0, lsl #1]
 80084d8:	04230388 	.word	0x04230388
 80084dc:	03900423 	.word	0x03900423
 80084e0:	04230423 	.word	0x04230423
 80084e4:	04230423 	.word	0x04230423
 80084e8:	04230423 	.word	0x04230423
 80084ec:	03a50397 	.word	0x03a50397
 80084f0:	005d0423 	.word	0x005d0423
 80084f4:	042300e2 	.word	0x042300e2
 80084f8:	010500fe 	.word	0x010500fe
 80084fc:	01050105 	.word	0x01050105
 8008500:	01050105 	.word	0x01050105
 8008504:	01050105 	.word	0x01050105
 8008508:	01050105 	.word	0x01050105
 800850c:	04230423 	.word	0x04230423
 8008510:	04230423 	.word	0x04230423
 8008514:	04230423 	.word	0x04230423
 8008518:	04230423 	.word	0x04230423
 800851c:	04230423 	.word	0x04230423
 8008520:	02810115 	.word	0x02810115
 8008524:	02810423 	.word	0x02810423
 8008528:	04230423 	.word	0x04230423
 800852c:	04230423 	.word	0x04230423
 8008530:	042302c6 	.word	0x042302c6
 8008534:	02cd0423 	.word	0x02cd0423
 8008538:	04230423 	.word	0x04230423
 800853c:	04230423 	.word	0x04230423
 8008540:	02f70423 	.word	0x02f70423
 8008544:	04230423 	.word	0x04230423
 8008548:	04230325 	.word	0x04230325
 800854c:	04230423 	.word	0x04230423
 8008550:	04230423 	.word	0x04230423
 8008554:	04230423 	.word	0x04230423
 8008558:	04230423 	.word	0x04230423
 800855c:	03660423 	.word	0x03660423
 8008560:	02810379 	.word	0x02810379
 8008564:	02810281 	.word	0x02810281
 8008568:	03790381 	.word	0x03790381
 800856c:	04230423 	.word	0x04230423
 8008570:	042303d1 	.word	0x042303d1
 8008574:	00a303db 	.word	0x00a303db
 8008578:	03ee0064 	.word	0x03ee0064
 800857c:	03f50423 	.word	0x03f50423
 8008580:	03aa0423 	.word	0x03aa0423
 8008584:	04230423 	.word	0x04230423
 8008588:	03bc      	.short	0x03bc
 800858a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800858c:	930e      	str	r3, [sp, #56]	; 0x38
 800858e:	4240      	negs	r0, r0
 8008590:	900c      	str	r0, [sp, #48]	; 0x30
 8008592:	9b07      	ldr	r3, [sp, #28]
 8008594:	f043 0304 	orr.w	r3, r3, #4
 8008598:	9307      	str	r3, [sp, #28]
 800859a:	f898 3000 	ldrb.w	r3, [r8]
 800859e:	e792      	b.n	80084c6 <_svfprintf_r+0xb2>
 80085a0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80085a2:	46ab      	mov	fp, r5
 80085a4:	2100      	movs	r1, #0
 80085a6:	6804      	ldr	r4, [r0, #0]
 80085a8:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 80085ac:	1d07      	adds	r7, r0, #4
 80085ae:	9807      	ldr	r0, [sp, #28]
 80085b0:	2330      	movs	r3, #48	; 0x30
 80085b2:	2278      	movs	r2, #120	; 0x78
 80085b4:	458b      	cmp	fp, r1
 80085b6:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 80085ba:	f04f 0500 	mov.w	r5, #0
 80085be:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
 80085c2:	f040 0302 	orr.w	r3, r0, #2
 80085c6:	f2c0 83c7 	blt.w	8008d58 <_svfprintf_r+0x944>
 80085ca:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 80085ce:	f043 0302 	orr.w	r3, r3, #2
 80085d2:	9307      	str	r3, [sp, #28]
 80085d4:	ea54 0305 	orrs.w	r3, r4, r5
 80085d8:	970e      	str	r7, [sp, #56]	; 0x38
 80085da:	f000 8393 	beq.w	8008d04 <_svfprintf_r+0x8f0>
 80085de:	460f      	mov	r7, r1
 80085e0:	9211      	str	r2, [sp, #68]	; 0x44
 80085e2:	48b3      	ldr	r0, [pc, #716]	; (80088b0 <_svfprintf_r+0x49c>)
 80085e4:	e2ce      	b.n	8008b84 <_svfprintf_r+0x770>
 80085e6:	aa23      	add	r2, sp, #140	; 0x8c
 80085e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 80085ec:	f005 fb5e 	bl	800dcac <__ssprint_r>
 80085f0:	b948      	cbnz	r0, 8008606 <_svfprintf_r+0x1f2>
 80085f2:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 80085f6:	e752      	b.n	800849e <_svfprintf_r+0x8a>
 80085f8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80085fa:	b123      	cbz	r3, 8008606 <_svfprintf_r+0x1f2>
 80085fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80085fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008600:	aa23      	add	r2, sp, #140	; 0x8c
 8008602:	f005 fb53 	bl	800dcac <__ssprint_r>
 8008606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008608:	899b      	ldrh	r3, [r3, #12]
 800860a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800860e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008610:	bf18      	it	ne
 8008612:	f04f 33ff 	movne.w	r3, #4294967295
 8008616:	4618      	mov	r0, r3
 8008618:	b041      	add	sp, #260	; 0x104
 800861a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800861e:	9311      	str	r3, [sp, #68]	; 0x44
 8008620:	46ab      	mov	fp, r5
 8008622:	2a00      	cmp	r2, #0
 8008624:	f041 8233 	bne.w	8009a8e <_svfprintf_r+0x167a>
 8008628:	9a07      	ldr	r2, [sp, #28]
 800862a:	f012 0320 	ands.w	r3, r2, #32
 800862e:	f000 822e 	beq.w	8008a8e <_svfprintf_r+0x67a>
 8008632:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8008634:	3707      	adds	r7, #7
 8008636:	f027 0307 	bic.w	r3, r7, #7
 800863a:	2700      	movs	r7, #0
 800863c:	f103 0108 	add.w	r1, r3, #8
 8008640:	45bb      	cmp	fp, r7
 8008642:	910e      	str	r1, [sp, #56]	; 0x38
 8008644:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008648:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800864c:	f2c0 8779 	blt.w	8009542 <_svfprintf_r+0x112e>
 8008650:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8008654:	9307      	str	r3, [sp, #28]
 8008656:	ea54 0305 	orrs.w	r3, r4, r5
 800865a:	f000 8375 	beq.w	8008d48 <_svfprintf_r+0x934>
 800865e:	ae30      	add	r6, sp, #192	; 0xc0
 8008660:	08e2      	lsrs	r2, r4, #3
 8008662:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 8008666:	08e9      	lsrs	r1, r5, #3
 8008668:	f004 0307 	and.w	r3, r4, #7
 800866c:	460d      	mov	r5, r1
 800866e:	4614      	mov	r4, r2
 8008670:	3330      	adds	r3, #48	; 0x30
 8008672:	ea54 0205 	orrs.w	r2, r4, r5
 8008676:	f806 3d01 	strb.w	r3, [r6, #-1]!
 800867a:	d1f1      	bne.n	8008660 <_svfprintf_r+0x24c>
 800867c:	9a07      	ldr	r2, [sp, #28]
 800867e:	07d1      	lsls	r1, r2, #31
 8008680:	f140 8084 	bpl.w	800878c <_svfprintf_r+0x378>
 8008684:	2b30      	cmp	r3, #48	; 0x30
 8008686:	f000 8081 	beq.w	800878c <_svfprintf_r+0x378>
 800868a:	2230      	movs	r2, #48	; 0x30
 800868c:	1e73      	subs	r3, r6, #1
 800868e:	f806 2c01 	strb.w	r2, [r6, #-1]
 8008692:	aa30      	add	r2, sp, #192	; 0xc0
 8008694:	1ad2      	subs	r2, r2, r3
 8008696:	920d      	str	r2, [sp, #52]	; 0x34
 8008698:	461e      	mov	r6, r3
 800869a:	e07a      	b.n	8008792 <_svfprintf_r+0x37e>
 800869c:	f898 3000 	ldrb.w	r3, [r8]
 80086a0:	2b2a      	cmp	r3, #42	; 0x2a
 80086a2:	f108 0401 	add.w	r4, r8, #1
 80086a6:	f001 81b9 	beq.w	8009a1c <_svfprintf_r+0x1608>
 80086aa:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80086ae:	2809      	cmp	r0, #9
 80086b0:	bf98      	it	ls
 80086b2:	2500      	movls	r5, #0
 80086b4:	f201 816c 	bhi.w	8009990 <_svfprintf_r+0x157c>
 80086b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80086bc:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80086c0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80086c4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80086c8:	2809      	cmp	r0, #9
 80086ca:	d9f5      	bls.n	80086b8 <_svfprintf_r+0x2a4>
 80086cc:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 80086d0:	46a0      	mov	r8, r4
 80086d2:	e6fa      	b.n	80084ca <_svfprintf_r+0xb6>
 80086d4:	9b07      	ldr	r3, [sp, #28]
 80086d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086da:	9307      	str	r3, [sp, #28]
 80086dc:	f898 3000 	ldrb.w	r3, [r8]
 80086e0:	e6f1      	b.n	80084c6 <_svfprintf_r+0xb2>
 80086e2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80086e6:	2300      	movs	r3, #0
 80086e8:	461c      	mov	r4, r3
 80086ea:	f818 3b01 	ldrb.w	r3, [r8], #1
 80086ee:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80086f2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80086f6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80086fa:	2809      	cmp	r0, #9
 80086fc:	d9f5      	bls.n	80086ea <_svfprintf_r+0x2d6>
 80086fe:	940c      	str	r4, [sp, #48]	; 0x30
 8008700:	e6e3      	b.n	80084ca <_svfprintf_r+0xb6>
 8008702:	9311      	str	r3, [sp, #68]	; 0x44
 8008704:	46ab      	mov	fp, r5
 8008706:	2a00      	cmp	r2, #0
 8008708:	f041 81ab 	bne.w	8009a62 <_svfprintf_r+0x164e>
 800870c:	9b07      	ldr	r3, [sp, #28]
 800870e:	f043 0310 	orr.w	r3, r3, #16
 8008712:	9307      	str	r3, [sp, #28]
 8008714:	9b07      	ldr	r3, [sp, #28]
 8008716:	0698      	lsls	r0, r3, #26
 8008718:	f140 8530 	bpl.w	800917c <_svfprintf_r+0xd68>
 800871c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800871e:	3707      	adds	r7, #7
 8008720:	f027 0707 	bic.w	r7, r7, #7
 8008724:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008728:	f107 0108 	add.w	r1, r7, #8
 800872c:	910e      	str	r1, [sp, #56]	; 0x38
 800872e:	4614      	mov	r4, r2
 8008730:	461d      	mov	r5, r3
 8008732:	2a00      	cmp	r2, #0
 8008734:	f173 0300 	sbcs.w	r3, r3, #0
 8008738:	f2c0 855b 	blt.w	80091f2 <_svfprintf_r+0xdde>
 800873c:	f1bb 0f00 	cmp.w	fp, #0
 8008740:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 8008744:	f2c0 8538 	blt.w	80091b8 <_svfprintf_r+0xda4>
 8008748:	9b07      	ldr	r3, [sp, #28]
 800874a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800874e:	9307      	str	r3, [sp, #28]
 8008750:	ea54 0305 	orrs.w	r3, r4, r5
 8008754:	f000 81db 	beq.w	8008b0e <_svfprintf_r+0x6fa>
 8008758:	2d00      	cmp	r5, #0
 800875a:	bf08      	it	eq
 800875c:	2c0a      	cmpeq	r4, #10
 800875e:	f0c0 81db 	bcc.w	8008b18 <_svfprintf_r+0x704>
 8008762:	ae30      	add	r6, sp, #192	; 0xc0
 8008764:	4620      	mov	r0, r4
 8008766:	4629      	mov	r1, r5
 8008768:	220a      	movs	r2, #10
 800876a:	2300      	movs	r3, #0
 800876c:	f7f7 fdce 	bl	800030c <__aeabi_uldivmod>
 8008770:	3230      	adds	r2, #48	; 0x30
 8008772:	f806 2d01 	strb.w	r2, [r6, #-1]!
 8008776:	4620      	mov	r0, r4
 8008778:	4629      	mov	r1, r5
 800877a:	2300      	movs	r3, #0
 800877c:	220a      	movs	r2, #10
 800877e:	f7f7 fdc5 	bl	800030c <__aeabi_uldivmod>
 8008782:	4604      	mov	r4, r0
 8008784:	460d      	mov	r5, r1
 8008786:	ea54 0305 	orrs.w	r3, r4, r5
 800878a:	d1eb      	bne.n	8008764 <_svfprintf_r+0x350>
 800878c:	ab30      	add	r3, sp, #192	; 0xc0
 800878e:	1b9b      	subs	r3, r3, r6
 8008790:	930d      	str	r3, [sp, #52]	; 0x34
 8008792:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008794:	455b      	cmp	r3, fp
 8008796:	bfb8      	it	lt
 8008798:	465b      	movlt	r3, fp
 800879a:	9308      	str	r3, [sp, #32]
 800879c:	2300      	movs	r3, #0
 800879e:	9313      	str	r3, [sp, #76]	; 0x4c
 80087a0:	b117      	cbz	r7, 80087a8 <_svfprintf_r+0x394>
 80087a2:	9b08      	ldr	r3, [sp, #32]
 80087a4:	3301      	adds	r3, #1
 80087a6:	9308      	str	r3, [sp, #32]
 80087a8:	9b07      	ldr	r3, [sp, #28]
 80087aa:	f013 0302 	ands.w	r3, r3, #2
 80087ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80087b0:	d002      	beq.n	80087b8 <_svfprintf_r+0x3a4>
 80087b2:	9b08      	ldr	r3, [sp, #32]
 80087b4:	3302      	adds	r3, #2
 80087b6:	9308      	str	r3, [sp, #32]
 80087b8:	9b07      	ldr	r3, [sp, #28]
 80087ba:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 80087be:	9310      	str	r3, [sp, #64]	; 0x40
 80087c0:	f040 82d7 	bne.w	8008d72 <_svfprintf_r+0x95e>
 80087c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087c6:	9a08      	ldr	r2, [sp, #32]
 80087c8:	1a9d      	subs	r5, r3, r2
 80087ca:	2d00      	cmp	r5, #0
 80087cc:	f340 82d1 	ble.w	8008d72 <_svfprintf_r+0x95e>
 80087d0:	2d10      	cmp	r5, #16
 80087d2:	9925      	ldr	r1, [sp, #148]	; 0x94
 80087d4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80087d6:	4f37      	ldr	r7, [pc, #220]	; (80088b4 <_svfprintf_r+0x4a0>)
 80087d8:	dd27      	ble.n	800882a <_svfprintf_r+0x416>
 80087da:	9618      	str	r6, [sp, #96]	; 0x60
 80087dc:	4648      	mov	r0, r9
 80087de:	2410      	movs	r4, #16
 80087e0:	46b9      	mov	r9, r7
 80087e2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80087e4:	462f      	mov	r7, r5
 80087e6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80087e8:	e004      	b.n	80087f4 <_svfprintf_r+0x3e0>
 80087ea:	3f10      	subs	r7, #16
 80087ec:	2f10      	cmp	r7, #16
 80087ee:	f100 0008 	add.w	r0, r0, #8
 80087f2:	dd16      	ble.n	8008822 <_svfprintf_r+0x40e>
 80087f4:	3201      	adds	r2, #1
 80087f6:	4b2f      	ldr	r3, [pc, #188]	; (80088b4 <_svfprintf_r+0x4a0>)
 80087f8:	9224      	str	r2, [sp, #144]	; 0x90
 80087fa:	3110      	adds	r1, #16
 80087fc:	2a07      	cmp	r2, #7
 80087fe:	9125      	str	r1, [sp, #148]	; 0x94
 8008800:	e880 0018 	stmia.w	r0, {r3, r4}
 8008804:	ddf1      	ble.n	80087ea <_svfprintf_r+0x3d6>
 8008806:	aa23      	add	r2, sp, #140	; 0x8c
 8008808:	4631      	mov	r1, r6
 800880a:	4628      	mov	r0, r5
 800880c:	f005 fa4e 	bl	800dcac <__ssprint_r>
 8008810:	2800      	cmp	r0, #0
 8008812:	f47f aef8 	bne.w	8008606 <_svfprintf_r+0x1f2>
 8008816:	3f10      	subs	r7, #16
 8008818:	2f10      	cmp	r7, #16
 800881a:	9925      	ldr	r1, [sp, #148]	; 0x94
 800881c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800881e:	a830      	add	r0, sp, #192	; 0xc0
 8008820:	dce8      	bgt.n	80087f4 <_svfprintf_r+0x3e0>
 8008822:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8008824:	463d      	mov	r5, r7
 8008826:	464f      	mov	r7, r9
 8008828:	4681      	mov	r9, r0
 800882a:	3201      	adds	r2, #1
 800882c:	186c      	adds	r4, r5, r1
 800882e:	2a07      	cmp	r2, #7
 8008830:	9425      	str	r4, [sp, #148]	; 0x94
 8008832:	9224      	str	r2, [sp, #144]	; 0x90
 8008834:	f8c9 7000 	str.w	r7, [r9]
 8008838:	f8c9 5004 	str.w	r5, [r9, #4]
 800883c:	f300 8428 	bgt.w	8009090 <_svfprintf_r+0xc7c>
 8008840:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 8008844:	f109 0908 	add.w	r9, r9, #8
 8008848:	b177      	cbz	r7, 8008868 <_svfprintf_r+0x454>
 800884a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800884c:	3301      	adds	r3, #1
 800884e:	3401      	adds	r4, #1
 8008850:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
 8008854:	2201      	movs	r2, #1
 8008856:	2b07      	cmp	r3, #7
 8008858:	9425      	str	r4, [sp, #148]	; 0x94
 800885a:	9324      	str	r3, [sp, #144]	; 0x90
 800885c:	e889 0006 	stmia.w	r9, {r1, r2}
 8008860:	f300 83a0 	bgt.w	8008fa4 <_svfprintf_r+0xb90>
 8008864:	f109 0908 	add.w	r9, r9, #8
 8008868:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800886a:	b16b      	cbz	r3, 8008888 <_svfprintf_r+0x474>
 800886c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800886e:	3301      	adds	r3, #1
 8008870:	3402      	adds	r4, #2
 8008872:	a91c      	add	r1, sp, #112	; 0x70
 8008874:	2202      	movs	r2, #2
 8008876:	2b07      	cmp	r3, #7
 8008878:	9425      	str	r4, [sp, #148]	; 0x94
 800887a:	9324      	str	r3, [sp, #144]	; 0x90
 800887c:	e889 0006 	stmia.w	r9, {r1, r2}
 8008880:	f300 839c 	bgt.w	8008fbc <_svfprintf_r+0xba8>
 8008884:	f109 0908 	add.w	r9, r9, #8
 8008888:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800888a:	2b80      	cmp	r3, #128	; 0x80
 800888c:	f000 82d5 	beq.w	8008e3a <_svfprintf_r+0xa26>
 8008890:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008892:	ebc3 070b 	rsb	r7, r3, fp
 8008896:	2f00      	cmp	r7, #0
 8008898:	dd39      	ble.n	800890e <_svfprintf_r+0x4fa>
 800889a:	4a07      	ldr	r2, [pc, #28]	; (80088b8 <_svfprintf_r+0x4a4>)
 800889c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800889e:	920f      	str	r2, [sp, #60]	; 0x3c
 80088a0:	2f10      	cmp	r7, #16
 80088a2:	dd28      	ble.n	80088f6 <_svfprintf_r+0x4e2>
 80088a4:	4622      	mov	r2, r4
 80088a6:	f04f 0b10 	mov.w	fp, #16
 80088aa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80088ac:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80088ae:	e00a      	b.n	80088c6 <_svfprintf_r+0x4b2>
 80088b0:	0800e7e0 	.word	0x0800e7e0
 80088b4:	0800e800 	.word	0x0800e800
 80088b8:	0800e7ac 	.word	0x0800e7ac
 80088bc:	3f10      	subs	r7, #16
 80088be:	2f10      	cmp	r7, #16
 80088c0:	f109 0908 	add.w	r9, r9, #8
 80088c4:	dd16      	ble.n	80088f4 <_svfprintf_r+0x4e0>
 80088c6:	3301      	adds	r3, #1
 80088c8:	3210      	adds	r2, #16
 80088ca:	2b07      	cmp	r3, #7
 80088cc:	9225      	str	r2, [sp, #148]	; 0x94
 80088ce:	9324      	str	r3, [sp, #144]	; 0x90
 80088d0:	e889 0c00 	stmia.w	r9, {sl, fp}
 80088d4:	ddf2      	ble.n	80088bc <_svfprintf_r+0x4a8>
 80088d6:	aa23      	add	r2, sp, #140	; 0x8c
 80088d8:	4621      	mov	r1, r4
 80088da:	4628      	mov	r0, r5
 80088dc:	f005 f9e6 	bl	800dcac <__ssprint_r>
 80088e0:	2800      	cmp	r0, #0
 80088e2:	f47f ae90 	bne.w	8008606 <_svfprintf_r+0x1f2>
 80088e6:	3f10      	subs	r7, #16
 80088e8:	2f10      	cmp	r7, #16
 80088ea:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80088ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80088ee:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 80088f2:	dce8      	bgt.n	80088c6 <_svfprintf_r+0x4b2>
 80088f4:	4614      	mov	r4, r2
 80088f6:	3301      	adds	r3, #1
 80088f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80088fa:	9324      	str	r3, [sp, #144]	; 0x90
 80088fc:	443c      	add	r4, r7
 80088fe:	2b07      	cmp	r3, #7
 8008900:	9425      	str	r4, [sp, #148]	; 0x94
 8008902:	e889 0084 	stmia.w	r9, {r2, r7}
 8008906:	f300 8341 	bgt.w	8008f8c <_svfprintf_r+0xb78>
 800890a:	f109 0908 	add.w	r9, r9, #8
 800890e:	9b07      	ldr	r3, [sp, #28]
 8008910:	05da      	lsls	r2, r3, #23
 8008912:	f100 8230 	bmi.w	8008d76 <_svfprintf_r+0x962>
 8008916:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008918:	990d      	ldr	r1, [sp, #52]	; 0x34
 800891a:	f8c9 6000 	str.w	r6, [r9]
 800891e:	3301      	adds	r3, #1
 8008920:	440c      	add	r4, r1
 8008922:	2b07      	cmp	r3, #7
 8008924:	9425      	str	r4, [sp, #148]	; 0x94
 8008926:	f8c9 1004 	str.w	r1, [r9, #4]
 800892a:	9324      	str	r3, [sp, #144]	; 0x90
 800892c:	f300 8318 	bgt.w	8008f60 <_svfprintf_r+0xb4c>
 8008930:	f109 0908 	add.w	r9, r9, #8
 8008934:	9b07      	ldr	r3, [sp, #28]
 8008936:	0759      	lsls	r1, r3, #29
 8008938:	d53f      	bpl.n	80089ba <_svfprintf_r+0x5a6>
 800893a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800893c:	9a08      	ldr	r2, [sp, #32]
 800893e:	1a9d      	subs	r5, r3, r2
 8008940:	2d00      	cmp	r5, #0
 8008942:	dd3a      	ble.n	80089ba <_svfprintf_r+0x5a6>
 8008944:	2d10      	cmp	r5, #16
 8008946:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008948:	4fbc      	ldr	r7, [pc, #752]	; (8008c3c <_svfprintf_r+0x828>)
 800894a:	dd23      	ble.n	8008994 <_svfprintf_r+0x580>
 800894c:	4622      	mov	r2, r4
 800894e:	2610      	movs	r6, #16
 8008950:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8008954:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008956:	e004      	b.n	8008962 <_svfprintf_r+0x54e>
 8008958:	3d10      	subs	r5, #16
 800895a:	2d10      	cmp	r5, #16
 800895c:	f109 0908 	add.w	r9, r9, #8
 8008960:	dd17      	ble.n	8008992 <_svfprintf_r+0x57e>
 8008962:	3301      	adds	r3, #1
 8008964:	49b5      	ldr	r1, [pc, #724]	; (8008c3c <_svfprintf_r+0x828>)
 8008966:	9324      	str	r3, [sp, #144]	; 0x90
 8008968:	3210      	adds	r2, #16
 800896a:	2b07      	cmp	r3, #7
 800896c:	9225      	str	r2, [sp, #148]	; 0x94
 800896e:	e889 0042 	stmia.w	r9, {r1, r6}
 8008972:	ddf1      	ble.n	8008958 <_svfprintf_r+0x544>
 8008974:	aa23      	add	r2, sp, #140	; 0x8c
 8008976:	4621      	mov	r1, r4
 8008978:	4658      	mov	r0, fp
 800897a:	f005 f997 	bl	800dcac <__ssprint_r>
 800897e:	2800      	cmp	r0, #0
 8008980:	f47f ae41 	bne.w	8008606 <_svfprintf_r+0x1f2>
 8008984:	3d10      	subs	r5, #16
 8008986:	2d10      	cmp	r5, #16
 8008988:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800898a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800898c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8008990:	dce7      	bgt.n	8008962 <_svfprintf_r+0x54e>
 8008992:	4614      	mov	r4, r2
 8008994:	3301      	adds	r3, #1
 8008996:	442c      	add	r4, r5
 8008998:	2b07      	cmp	r3, #7
 800899a:	9425      	str	r4, [sp, #148]	; 0x94
 800899c:	9324      	str	r3, [sp, #144]	; 0x90
 800899e:	f8c9 7000 	str.w	r7, [r9]
 80089a2:	f8c9 5004 	str.w	r5, [r9, #4]
 80089a6:	dd08      	ble.n	80089ba <_svfprintf_r+0x5a6>
 80089a8:	aa23      	add	r2, sp, #140	; 0x8c
 80089aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089ac:	980a      	ldr	r0, [sp, #40]	; 0x28
 80089ae:	f005 f97d 	bl	800dcac <__ssprint_r>
 80089b2:	2800      	cmp	r0, #0
 80089b4:	f47f ae27 	bne.w	8008606 <_svfprintf_r+0x1f2>
 80089b8:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80089ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089be:	9908      	ldr	r1, [sp, #32]
 80089c0:	428a      	cmp	r2, r1
 80089c2:	bfac      	ite	ge
 80089c4:	189b      	addge	r3, r3, r2
 80089c6:	185b      	addlt	r3, r3, r1
 80089c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80089ca:	2c00      	cmp	r4, #0
 80089cc:	f040 82d4 	bne.w	8008f78 <_svfprintf_r+0xb64>
 80089d0:	2300      	movs	r3, #0
 80089d2:	9324      	str	r3, [sp, #144]	; 0x90
 80089d4:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 80089d8:	e542      	b.n	8008460 <_svfprintf_r+0x4c>
 80089da:	9311      	str	r3, [sp, #68]	; 0x44
 80089dc:	46ab      	mov	fp, r5
 80089de:	2a00      	cmp	r2, #0
 80089e0:	f041 8051 	bne.w	8009a86 <_svfprintf_r+0x1672>
 80089e4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80089e6:	3707      	adds	r7, #7
 80089e8:	f027 0307 	bic.w	r3, r7, #7
 80089ec:	f103 0208 	add.w	r2, r3, #8
 80089f0:	920e      	str	r2, [sp, #56]	; 0x38
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	9214      	str	r2, [sp, #80]	; 0x50
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	9315      	str	r3, [sp, #84]	; 0x54
 80089fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80089fc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80089fe:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8008a02:	4628      	mov	r0, r5
 8008a04:	4621      	mov	r1, r4
 8008a06:	f04f 32ff 	mov.w	r2, #4294967295
 8008a0a:	4b8d      	ldr	r3, [pc, #564]	; (8008c40 <_svfprintf_r+0x82c>)
 8008a0c:	f7f8 fbca 	bl	80011a4 <__aeabi_dcmpun>
 8008a10:	2800      	cmp	r0, #0
 8008a12:	f040 84c2 	bne.w	800939a <_svfprintf_r+0xf86>
 8008a16:	4628      	mov	r0, r5
 8008a18:	4621      	mov	r1, r4
 8008a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a1e:	4b88      	ldr	r3, [pc, #544]	; (8008c40 <_svfprintf_r+0x82c>)
 8008a20:	f7f8 fba2 	bl	8001168 <__aeabi_dcmple>
 8008a24:	2800      	cmp	r0, #0
 8008a26:	f040 84b8 	bne.w	800939a <_svfprintf_r+0xf86>
 8008a2a:	9814      	ldr	r0, [sp, #80]	; 0x50
 8008a2c:	9915      	ldr	r1, [sp, #84]	; 0x54
 8008a2e:	2200      	movs	r2, #0
 8008a30:	2300      	movs	r3, #0
 8008a32:	f7f8 fb8f 	bl	8001154 <__aeabi_dcmplt>
 8008a36:	2800      	cmp	r0, #0
 8008a38:	f040 874f 	bne.w	80098da <_svfprintf_r+0x14c6>
 8008a3c:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 8008a40:	4e80      	ldr	r6, [pc, #512]	; (8008c44 <_svfprintf_r+0x830>)
 8008a42:	4b81      	ldr	r3, [pc, #516]	; (8008c48 <_svfprintf_r+0x834>)
 8008a44:	9907      	ldr	r1, [sp, #28]
 8008a46:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008a4a:	9107      	str	r1, [sp, #28]
 8008a4c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008a4e:	2203      	movs	r2, #3
 8008a50:	f04f 0b00 	mov.w	fp, #0
 8008a54:	9208      	str	r2, [sp, #32]
 8008a56:	2947      	cmp	r1, #71	; 0x47
 8008a58:	bfd8      	it	le
 8008a5a:	461e      	movle	r6, r3
 8008a5c:	920d      	str	r2, [sp, #52]	; 0x34
 8008a5e:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8008a62:	e69d      	b.n	80087a0 <_svfprintf_r+0x38c>
 8008a64:	9b07      	ldr	r3, [sp, #28]
 8008a66:	f043 0308 	orr.w	r3, r3, #8
 8008a6a:	9307      	str	r3, [sp, #28]
 8008a6c:	f898 3000 	ldrb.w	r3, [r8]
 8008a70:	e529      	b.n	80084c6 <_svfprintf_r+0xb2>
 8008a72:	9311      	str	r3, [sp, #68]	; 0x44
 8008a74:	46ab      	mov	fp, r5
 8008a76:	2a00      	cmp	r2, #0
 8008a78:	f041 8011 	bne.w	8009a9e <_svfprintf_r+0x168a>
 8008a7c:	9b07      	ldr	r3, [sp, #28]
 8008a7e:	f043 0310 	orr.w	r3, r3, #16
 8008a82:	9307      	str	r3, [sp, #28]
 8008a84:	9a07      	ldr	r2, [sp, #28]
 8008a86:	f012 0320 	ands.w	r3, r2, #32
 8008a8a:	f47f add2 	bne.w	8008632 <_svfprintf_r+0x21e>
 8008a8e:	9907      	ldr	r1, [sp, #28]
 8008a90:	f011 0210 	ands.w	r2, r1, #16
 8008a94:	f000 852c 	beq.w	80094f0 <_svfprintf_r+0x10dc>
 8008a98:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008a9a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8008a9e:	f1bb 0f00 	cmp.w	fp, #0
 8008aa2:	6804      	ldr	r4, [r0, #0]
 8008aa4:	f100 0704 	add.w	r7, r0, #4
 8008aa8:	f04f 0500 	mov.w	r5, #0
 8008aac:	f2c0 8548 	blt.w	8009540 <_svfprintf_r+0x112c>
 8008ab0:	460a      	mov	r2, r1
 8008ab2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ab6:	9207      	str	r2, [sp, #28]
 8008ab8:	ea54 0205 	orrs.w	r2, r4, r5
 8008abc:	970e      	str	r7, [sp, #56]	; 0x38
 8008abe:	f000 8143 	beq.w	8008d48 <_svfprintf_r+0x934>
 8008ac2:	461f      	mov	r7, r3
 8008ac4:	e5cb      	b.n	800865e <_svfprintf_r+0x24a>
 8008ac6:	9311      	str	r3, [sp, #68]	; 0x44
 8008ac8:	46ab      	mov	fp, r5
 8008aca:	2a00      	cmp	r2, #0
 8008acc:	f040 87e3 	bne.w	8009a96 <_svfprintf_r+0x1682>
 8008ad0:	9b07      	ldr	r3, [sp, #28]
 8008ad2:	f043 0310 	orr.w	r3, r3, #16
 8008ad6:	9307      	str	r3, [sp, #28]
 8008ad8:	9a07      	ldr	r2, [sp, #28]
 8008ada:	f012 0320 	ands.w	r3, r2, #32
 8008ade:	f000 8332 	beq.w	8009146 <_svfprintf_r+0xd32>
 8008ae2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8008ae4:	3707      	adds	r7, #7
 8008ae6:	f027 0307 	bic.w	r3, r7, #7
 8008aea:	2700      	movs	r7, #0
 8008aec:	f103 0108 	add.w	r1, r3, #8
 8008af0:	45bb      	cmp	fp, r7
 8008af2:	910e      	str	r1, [sp, #56]	; 0x38
 8008af4:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008af8:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 8008afc:	f2c0 835c 	blt.w	80091b8 <_svfprintf_r+0xda4>
 8008b00:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8008b04:	9307      	str	r3, [sp, #28]
 8008b06:	ea54 0305 	orrs.w	r3, r4, r5
 8008b0a:	f47f ae25 	bne.w	8008758 <_svfprintf_r+0x344>
 8008b0e:	f1bb 0f00 	cmp.w	fp, #0
 8008b12:	f000 80fe 	beq.w	8008d12 <_svfprintf_r+0x8fe>
 8008b16:	2400      	movs	r4, #0
 8008b18:	ae40      	add	r6, sp, #256	; 0x100
 8008b1a:	3430      	adds	r4, #48	; 0x30
 8008b1c:	f806 4d41 	strb.w	r4, [r6, #-65]!
 8008b20:	e634      	b.n	800878c <_svfprintf_r+0x378>
 8008b22:	9311      	str	r3, [sp, #68]	; 0x44
 8008b24:	46ab      	mov	fp, r5
 8008b26:	2a00      	cmp	r2, #0
 8008b28:	f040 8797 	bne.w	8009a5a <_svfprintf_r+0x1646>
 8008b2c:	9b07      	ldr	r3, [sp, #28]
 8008b2e:	4847      	ldr	r0, [pc, #284]	; (8008c4c <_svfprintf_r+0x838>)
 8008b30:	069d      	lsls	r5, r3, #26
 8008b32:	f140 8097 	bpl.w	8008c64 <_svfprintf_r+0x850>
 8008b36:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8008b38:	3707      	adds	r7, #7
 8008b3a:	f027 0307 	bic.w	r3, r7, #7
 8008b3e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008b42:	f103 0208 	add.w	r2, r3, #8
 8008b46:	920e      	str	r2, [sp, #56]	; 0x38
 8008b48:	9a07      	ldr	r2, [sp, #28]
 8008b4a:	f012 0701 	ands.w	r7, r2, #1
 8008b4e:	f000 8241 	beq.w	8008fd4 <_svfprintf_r+0xbc0>
 8008b52:	ea54 0305 	orrs.w	r3, r4, r5
 8008b56:	f000 8505 	beq.w	8009564 <_svfprintf_r+0x1150>
 8008b5a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8008b5e:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
 8008b62:	2700      	movs	r7, #0
 8008b64:	9a07      	ldr	r2, [sp, #28]
 8008b66:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 8008b6a:	2330      	movs	r3, #48	; 0x30
 8008b6c:	45bb      	cmp	fp, r7
 8008b6e:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8008b72:	f042 0302 	orr.w	r3, r2, #2
 8008b76:	f2c0 86b5 	blt.w	80098e4 <_svfprintf_r+0x14d0>
 8008b7a:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8008b7e:	f043 0302 	orr.w	r3, r3, #2
 8008b82:	9307      	str	r3, [sp, #28]
 8008b84:	ae30      	add	r6, sp, #192	; 0xc0
 8008b86:	0923      	lsrs	r3, r4, #4
 8008b88:	f004 010f 	and.w	r1, r4, #15
 8008b8c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8008b90:	092a      	lsrs	r2, r5, #4
 8008b92:	461c      	mov	r4, r3
 8008b94:	4615      	mov	r5, r2
 8008b96:	5c43      	ldrb	r3, [r0, r1]
 8008b98:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8008b9c:	ea54 0305 	orrs.w	r3, r4, r5
 8008ba0:	d1f1      	bne.n	8008b86 <_svfprintf_r+0x772>
 8008ba2:	e5f3      	b.n	800878c <_svfprintf_r+0x378>
 8008ba4:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008ba6:	9311      	str	r3, [sp, #68]	; 0x44
 8008ba8:	680a      	ldr	r2, [r1, #0]
 8008baa:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 8008bae:	2300      	movs	r3, #0
 8008bb0:	460a      	mov	r2, r1
 8008bb2:	461f      	mov	r7, r3
 8008bb4:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8008bb8:	3204      	adds	r2, #4
 8008bba:	2301      	movs	r3, #1
 8008bbc:	9308      	str	r3, [sp, #32]
 8008bbe:	46bb      	mov	fp, r7
 8008bc0:	9713      	str	r7, [sp, #76]	; 0x4c
 8008bc2:	920e      	str	r2, [sp, #56]	; 0x38
 8008bc4:	930d      	str	r3, [sp, #52]	; 0x34
 8008bc6:	ae26      	add	r6, sp, #152	; 0x98
 8008bc8:	e5ee      	b.n	80087a8 <_svfprintf_r+0x394>
 8008bca:	9311      	str	r3, [sp, #68]	; 0x44
 8008bcc:	46ab      	mov	fp, r5
 8008bce:	2a00      	cmp	r2, #0
 8008bd0:	f43f ada0 	beq.w	8008714 <_svfprintf_r+0x300>
 8008bd4:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8008bd8:	e59c      	b.n	8008714 <_svfprintf_r+0x300>
 8008bda:	9b07      	ldr	r3, [sp, #28]
 8008bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008be0:	9307      	str	r3, [sp, #28]
 8008be2:	f898 3000 	ldrb.w	r3, [r8]
 8008be6:	e46e      	b.n	80084c6 <_svfprintf_r+0xb2>
 8008be8:	f898 3000 	ldrb.w	r3, [r8]
 8008bec:	2900      	cmp	r1, #0
 8008bee:	f47f ac6a 	bne.w	80084c6 <_svfprintf_r+0xb2>
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	2120      	movs	r1, #32
 8008bf6:	e466      	b.n	80084c6 <_svfprintf_r+0xb2>
 8008bf8:	9b07      	ldr	r3, [sp, #28]
 8008bfa:	f043 0301 	orr.w	r3, r3, #1
 8008bfe:	9307      	str	r3, [sp, #28]
 8008c00:	f898 3000 	ldrb.w	r3, [r8]
 8008c04:	e45f      	b.n	80084c6 <_svfprintf_r+0xb2>
 8008c06:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8008c08:	6823      	ldr	r3, [r4, #0]
 8008c0a:	930c      	str	r3, [sp, #48]	; 0x30
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	2800      	cmp	r0, #0
 8008c10:	4623      	mov	r3, r4
 8008c12:	f103 0304 	add.w	r3, r3, #4
 8008c16:	f6ff acb8 	blt.w	800858a <_svfprintf_r+0x176>
 8008c1a:	930e      	str	r3, [sp, #56]	; 0x38
 8008c1c:	f898 3000 	ldrb.w	r3, [r8]
 8008c20:	e451      	b.n	80084c6 <_svfprintf_r+0xb2>
 8008c22:	f898 3000 	ldrb.w	r3, [r8]
 8008c26:	2201      	movs	r2, #1
 8008c28:	212b      	movs	r1, #43	; 0x2b
 8008c2a:	e44c      	b.n	80084c6 <_svfprintf_r+0xb2>
 8008c2c:	9311      	str	r3, [sp, #68]	; 0x44
 8008c2e:	46ab      	mov	fp, r5
 8008c30:	2a00      	cmp	r2, #0
 8008c32:	f43f af51 	beq.w	8008ad8 <_svfprintf_r+0x6c4>
 8008c36:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8008c3a:	e74d      	b.n	8008ad8 <_svfprintf_r+0x6c4>
 8008c3c:	0800e800 	.word	0x0800e800
 8008c40:	7fefffff 	.word	0x7fefffff
 8008c44:	0800e7c0 	.word	0x0800e7c0
 8008c48:	0800e7bc 	.word	0x0800e7bc
 8008c4c:	0800e7cc 	.word	0x0800e7cc
 8008c50:	9311      	str	r3, [sp, #68]	; 0x44
 8008c52:	46ab      	mov	fp, r5
 8008c54:	2a00      	cmp	r2, #0
 8008c56:	f040 872a 	bne.w	8009aae <_svfprintf_r+0x169a>
 8008c5a:	9b07      	ldr	r3, [sp, #28]
 8008c5c:	4899      	ldr	r0, [pc, #612]	; (8008ec4 <_svfprintf_r+0xab0>)
 8008c5e:	069d      	lsls	r5, r3, #26
 8008c60:	f53f af69 	bmi.w	8008b36 <_svfprintf_r+0x722>
 8008c64:	9b07      	ldr	r3, [sp, #28]
 8008c66:	06dc      	lsls	r4, r3, #27
 8008c68:	f140 8435 	bpl.w	80094d6 <_svfprintf_r+0x10c2>
 8008c6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c6e:	4613      	mov	r3, r2
 8008c70:	3304      	adds	r3, #4
 8008c72:	6814      	ldr	r4, [r2, #0]
 8008c74:	930e      	str	r3, [sp, #56]	; 0x38
 8008c76:	2500      	movs	r5, #0
 8008c78:	e766      	b.n	8008b48 <_svfprintf_r+0x734>
 8008c7a:	f898 3000 	ldrb.w	r3, [r8]
 8008c7e:	2b6c      	cmp	r3, #108	; 0x6c
 8008c80:	f000 84e2 	beq.w	8009648 <_svfprintf_r+0x1234>
 8008c84:	9807      	ldr	r0, [sp, #28]
 8008c86:	f040 0010 	orr.w	r0, r0, #16
 8008c8a:	9007      	str	r0, [sp, #28]
 8008c8c:	e41b      	b.n	80084c6 <_svfprintf_r+0xb2>
 8008c8e:	2a00      	cmp	r2, #0
 8008c90:	f040 8709 	bne.w	8009aa6 <_svfprintf_r+0x1692>
 8008c94:	9b07      	ldr	r3, [sp, #28]
 8008c96:	069b      	lsls	r3, r3, #26
 8008c98:	f140 8406 	bpl.w	80094a8 <_svfprintf_r+0x1094>
 8008c9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008ca0:	6813      	ldr	r3, [r2, #0]
 8008ca2:	17cd      	asrs	r5, r1, #31
 8008ca4:	4608      	mov	r0, r1
 8008ca6:	3204      	adds	r2, #4
 8008ca8:	4629      	mov	r1, r5
 8008caa:	920e      	str	r2, [sp, #56]	; 0x38
 8008cac:	e9c3 0100 	strd	r0, r1, [r3]
 8008cb0:	f7ff bbd6 	b.w	8008460 <_svfprintf_r+0x4c>
 8008cb4:	9b07      	ldr	r3, [sp, #28]
 8008cb6:	f043 0320 	orr.w	r3, r3, #32
 8008cba:	9307      	str	r3, [sp, #28]
 8008cbc:	f898 3000 	ldrb.w	r3, [r8]
 8008cc0:	e401      	b.n	80084c6 <_svfprintf_r+0xb2>
 8008cc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008cc4:	9311      	str	r3, [sp, #68]	; 0x44
 8008cc6:	6816      	ldr	r6, [r2, #0]
 8008cc8:	2400      	movs	r4, #0
 8008cca:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
 8008cce:	1d17      	adds	r7, r2, #4
 8008cd0:	2e00      	cmp	r6, #0
 8008cd2:	f000 85cd 	beq.w	8009870 <_svfprintf_r+0x145c>
 8008cd6:	2d00      	cmp	r5, #0
 8008cd8:	f2c0 8518 	blt.w	800970c <_svfprintf_r+0x12f8>
 8008cdc:	462a      	mov	r2, r5
 8008cde:	4621      	mov	r1, r4
 8008ce0:	4630      	mov	r0, r6
 8008ce2:	f7f7 fdbd 	bl	8000860 <memchr>
 8008ce6:	2800      	cmp	r0, #0
 8008ce8:	f000 862a 	beq.w	8009940 <_svfprintf_r+0x152c>
 8008cec:	1b83      	subs	r3, r0, r6
 8008cee:	930d      	str	r3, [sp, #52]	; 0x34
 8008cf0:	46a3      	mov	fp, r4
 8008cf2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008cf6:	970e      	str	r7, [sp, #56]	; 0x38
 8008cf8:	9308      	str	r3, [sp, #32]
 8008cfa:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8008cfe:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 8008d02:	e54d      	b.n	80087a0 <_svfprintf_r+0x38c>
 8008d04:	486f      	ldr	r0, [pc, #444]	; (8008ec4 <_svfprintf_r+0xab0>)
 8008d06:	9211      	str	r2, [sp, #68]	; 0x44
 8008d08:	f1bb 0f00 	cmp.w	fp, #0
 8008d0c:	f040 8173 	bne.w	8008ff6 <_svfprintf_r+0xbe2>
 8008d10:	465f      	mov	r7, fp
 8008d12:	f04f 0b00 	mov.w	fp, #0
 8008d16:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8008d1a:	ae30      	add	r6, sp, #192	; 0xc0
 8008d1c:	e539      	b.n	8008792 <_svfprintf_r+0x37e>
 8008d1e:	9311      	str	r3, [sp, #68]	; 0x44
 8008d20:	2a00      	cmp	r2, #0
 8008d22:	f040 86ac 	bne.w	8009a7e <_svfprintf_r+0x166a>
 8008d26:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008d28:	2a00      	cmp	r2, #0
 8008d2a:	f43f ac65 	beq.w	80085f8 <_svfprintf_r+0x1e4>
 8008d2e:	2300      	movs	r3, #0
 8008d30:	2101      	movs	r1, #1
 8008d32:	461f      	mov	r7, r3
 8008d34:	9108      	str	r1, [sp, #32]
 8008d36:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 8008d3a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8008d3e:	469b      	mov	fp, r3
 8008d40:	9313      	str	r3, [sp, #76]	; 0x4c
 8008d42:	910d      	str	r1, [sp, #52]	; 0x34
 8008d44:	ae26      	add	r6, sp, #152	; 0x98
 8008d46:	e52f      	b.n	80087a8 <_svfprintf_r+0x394>
 8008d48:	f1bb 0f00 	cmp.w	fp, #0
 8008d4c:	f000 8603 	beq.w	8009956 <_svfprintf_r+0x1542>
 8008d50:	2700      	movs	r7, #0
 8008d52:	2400      	movs	r4, #0
 8008d54:	2500      	movs	r5, #0
 8008d56:	e482      	b.n	800865e <_svfprintf_r+0x24a>
 8008d58:	485a      	ldr	r0, [pc, #360]	; (8008ec4 <_svfprintf_r+0xab0>)
 8008d5a:	9307      	str	r3, [sp, #28]
 8008d5c:	9211      	str	r2, [sp, #68]	; 0x44
 8008d5e:	ea54 0305 	orrs.w	r3, r4, r5
 8008d62:	970e      	str	r7, [sp, #56]	; 0x38
 8008d64:	f04f 0700 	mov.w	r7, #0
 8008d68:	f47f af0c 	bne.w	8008b84 <_svfprintf_r+0x770>
 8008d6c:	2400      	movs	r4, #0
 8008d6e:	2500      	movs	r5, #0
 8008d70:	e708      	b.n	8008b84 <_svfprintf_r+0x770>
 8008d72:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8008d74:	e568      	b.n	8008848 <_svfprintf_r+0x434>
 8008d76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d78:	2b65      	cmp	r3, #101	; 0x65
 8008d7a:	f340 80a9 	ble.w	8008ed0 <_svfprintf_r+0xabc>
 8008d7e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8008d80:	9915      	ldr	r1, [sp, #84]	; 0x54
 8008d82:	2200      	movs	r2, #0
 8008d84:	2300      	movs	r3, #0
 8008d86:	f7f8 f9db 	bl	8001140 <__aeabi_dcmpeq>
 8008d8a:	2800      	cmp	r0, #0
 8008d8c:	f000 8135 	beq.w	8008ffa <_svfprintf_r+0xbe6>
 8008d90:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008d92:	4a4d      	ldr	r2, [pc, #308]	; (8008ec8 <_svfprintf_r+0xab4>)
 8008d94:	f8c9 2000 	str.w	r2, [r9]
 8008d98:	3301      	adds	r3, #1
 8008d9a:	3401      	adds	r4, #1
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	2b07      	cmp	r3, #7
 8008da0:	9425      	str	r4, [sp, #148]	; 0x94
 8008da2:	9324      	str	r3, [sp, #144]	; 0x90
 8008da4:	f8c9 2004 	str.w	r2, [r9, #4]
 8008da8:	f300 83e8 	bgt.w	800957c <_svfprintf_r+0x1168>
 8008dac:	f109 0908 	add.w	r9, r9, #8
 8008db0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008db2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008db4:	4293      	cmp	r3, r2
 8008db6:	db03      	blt.n	8008dc0 <_svfprintf_r+0x9ac>
 8008db8:	9b07      	ldr	r3, [sp, #28]
 8008dba:	07db      	lsls	r3, r3, #31
 8008dbc:	f57f adba 	bpl.w	8008934 <_svfprintf_r+0x520>
 8008dc0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008dc2:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008dc4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008dc6:	f8c9 2000 	str.w	r2, [r9]
 8008dca:	3301      	adds	r3, #1
 8008dcc:	440c      	add	r4, r1
 8008dce:	2b07      	cmp	r3, #7
 8008dd0:	9425      	str	r4, [sp, #148]	; 0x94
 8008dd2:	f8c9 1004 	str.w	r1, [r9, #4]
 8008dd6:	9324      	str	r3, [sp, #144]	; 0x90
 8008dd8:	f300 8440 	bgt.w	800965c <_svfprintf_r+0x1248>
 8008ddc:	f109 0908 	add.w	r9, r9, #8
 8008de0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008de2:	1e5d      	subs	r5, r3, #1
 8008de4:	2d00      	cmp	r5, #0
 8008de6:	f77f ada5 	ble.w	8008934 <_svfprintf_r+0x520>
 8008dea:	4a38      	ldr	r2, [pc, #224]	; (8008ecc <_svfprintf_r+0xab8>)
 8008dec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008dee:	920f      	str	r2, [sp, #60]	; 0x3c
 8008df0:	2d10      	cmp	r5, #16
 8008df2:	f340 81e6 	ble.w	80091c2 <_svfprintf_r+0xdae>
 8008df6:	2610      	movs	r6, #16
 8008df8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008dfa:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8008dfe:	e005      	b.n	8008e0c <_svfprintf_r+0x9f8>
 8008e00:	f109 0908 	add.w	r9, r9, #8
 8008e04:	3d10      	subs	r5, #16
 8008e06:	2d10      	cmp	r5, #16
 8008e08:	f340 81db 	ble.w	80091c2 <_svfprintf_r+0xdae>
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	3410      	adds	r4, #16
 8008e10:	2b07      	cmp	r3, #7
 8008e12:	9425      	str	r4, [sp, #148]	; 0x94
 8008e14:	9324      	str	r3, [sp, #144]	; 0x90
 8008e16:	f8c9 a000 	str.w	sl, [r9]
 8008e1a:	f8c9 6004 	str.w	r6, [r9, #4]
 8008e1e:	ddef      	ble.n	8008e00 <_svfprintf_r+0x9ec>
 8008e20:	aa23      	add	r2, sp, #140	; 0x8c
 8008e22:	4659      	mov	r1, fp
 8008e24:	4638      	mov	r0, r7
 8008e26:	f004 ff41 	bl	800dcac <__ssprint_r>
 8008e2a:	2800      	cmp	r0, #0
 8008e2c:	f47f abeb 	bne.w	8008606 <_svfprintf_r+0x1f2>
 8008e30:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8008e32:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008e34:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8008e38:	e7e4      	b.n	8008e04 <_svfprintf_r+0x9f0>
 8008e3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e3c:	9a08      	ldr	r2, [sp, #32]
 8008e3e:	1a9f      	subs	r7, r3, r2
 8008e40:	2f00      	cmp	r7, #0
 8008e42:	f77f ad25 	ble.w	8008890 <_svfprintf_r+0x47c>
 8008e46:	4a21      	ldr	r2, [pc, #132]	; (8008ecc <_svfprintf_r+0xab8>)
 8008e48:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008e4a:	920f      	str	r2, [sp, #60]	; 0x3c
 8008e4c:	2f10      	cmp	r7, #16
 8008e4e:	dd2b      	ble.n	8008ea8 <_svfprintf_r+0xa94>
 8008e50:	464a      	mov	r2, r9
 8008e52:	4621      	mov	r1, r4
 8008e54:	46b9      	mov	r9, r7
 8008e56:	2510      	movs	r5, #16
 8008e58:	4637      	mov	r7, r6
 8008e5a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008e5c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008e5e:	e006      	b.n	8008e6e <_svfprintf_r+0xa5a>
 8008e60:	f1a9 0910 	sub.w	r9, r9, #16
 8008e64:	f1b9 0f10 	cmp.w	r9, #16
 8008e68:	f102 0208 	add.w	r2, r2, #8
 8008e6c:	dd18      	ble.n	8008ea0 <_svfprintf_r+0xa8c>
 8008e6e:	3301      	adds	r3, #1
 8008e70:	3110      	adds	r1, #16
 8008e72:	2b07      	cmp	r3, #7
 8008e74:	9125      	str	r1, [sp, #148]	; 0x94
 8008e76:	9324      	str	r3, [sp, #144]	; 0x90
 8008e78:	f8c2 a000 	str.w	sl, [r2]
 8008e7c:	6055      	str	r5, [r2, #4]
 8008e7e:	ddef      	ble.n	8008e60 <_svfprintf_r+0xa4c>
 8008e80:	aa23      	add	r2, sp, #140	; 0x8c
 8008e82:	4631      	mov	r1, r6
 8008e84:	4620      	mov	r0, r4
 8008e86:	f004 ff11 	bl	800dcac <__ssprint_r>
 8008e8a:	2800      	cmp	r0, #0
 8008e8c:	f47f abbb 	bne.w	8008606 <_svfprintf_r+0x1f2>
 8008e90:	f1a9 0910 	sub.w	r9, r9, #16
 8008e94:	f1b9 0f10 	cmp.w	r9, #16
 8008e98:	9925      	ldr	r1, [sp, #148]	; 0x94
 8008e9a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008e9c:	aa30      	add	r2, sp, #192	; 0xc0
 8008e9e:	dce6      	bgt.n	8008e6e <_svfprintf_r+0xa5a>
 8008ea0:	463e      	mov	r6, r7
 8008ea2:	460c      	mov	r4, r1
 8008ea4:	464f      	mov	r7, r9
 8008ea6:	4691      	mov	r9, r2
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008eac:	9324      	str	r3, [sp, #144]	; 0x90
 8008eae:	443c      	add	r4, r7
 8008eb0:	2b07      	cmp	r3, #7
 8008eb2:	9425      	str	r4, [sp, #148]	; 0x94
 8008eb4:	e889 0084 	stmia.w	r9, {r2, r7}
 8008eb8:	f300 8245 	bgt.w	8009346 <_svfprintf_r+0xf32>
 8008ebc:	f109 0908 	add.w	r9, r9, #8
 8008ec0:	e4e6      	b.n	8008890 <_svfprintf_r+0x47c>
 8008ec2:	bf00      	nop
 8008ec4:	0800e7e0 	.word	0x0800e7e0
 8008ec8:	0800e7fc 	.word	0x0800e7fc
 8008ecc:	0800e7ac 	.word	0x0800e7ac
 8008ed0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ed2:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	f340 8208 	ble.w	80092ea <_svfprintf_r+0xed6>
 8008eda:	3501      	adds	r5, #1
 8008edc:	3401      	adds	r4, #1
 8008ede:	2301      	movs	r3, #1
 8008ee0:	2d07      	cmp	r5, #7
 8008ee2:	9425      	str	r4, [sp, #148]	; 0x94
 8008ee4:	9524      	str	r5, [sp, #144]	; 0x90
 8008ee6:	f8c9 6000 	str.w	r6, [r9]
 8008eea:	f8c9 3004 	str.w	r3, [r9, #4]
 8008eee:	f300 820d 	bgt.w	800930c <_svfprintf_r+0xef8>
 8008ef2:	f109 0908 	add.w	r9, r9, #8
 8008ef6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008ef8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008efa:	f8c9 3000 	str.w	r3, [r9]
 8008efe:	3501      	adds	r5, #1
 8008f00:	4414      	add	r4, r2
 8008f02:	2d07      	cmp	r5, #7
 8008f04:	9425      	str	r4, [sp, #148]	; 0x94
 8008f06:	9524      	str	r5, [sp, #144]	; 0x90
 8008f08:	f8c9 2004 	str.w	r2, [r9, #4]
 8008f0c:	f300 820e 	bgt.w	800932c <_svfprintf_r+0xf18>
 8008f10:	f109 0908 	add.w	r9, r9, #8
 8008f14:	2300      	movs	r3, #0
 8008f16:	9814      	ldr	r0, [sp, #80]	; 0x50
 8008f18:	9915      	ldr	r1, [sp, #84]	; 0x54
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f7f8 f910 	bl	8001140 <__aeabi_dcmpeq>
 8008f20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f22:	2800      	cmp	r0, #0
 8008f24:	f040 80c3 	bne.w	80090ae <_svfprintf_r+0xc9a>
 8008f28:	3b01      	subs	r3, #1
 8008f2a:	3501      	adds	r5, #1
 8008f2c:	3601      	adds	r6, #1
 8008f2e:	441c      	add	r4, r3
 8008f30:	2d07      	cmp	r5, #7
 8008f32:	9524      	str	r5, [sp, #144]	; 0x90
 8008f34:	9425      	str	r4, [sp, #148]	; 0x94
 8008f36:	f8c9 6000 	str.w	r6, [r9]
 8008f3a:	f8c9 3004 	str.w	r3, [r9, #4]
 8008f3e:	f300 80f5 	bgt.w	800912c <_svfprintf_r+0xd18>
 8008f42:	f109 0908 	add.w	r9, r9, #8
 8008f46:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008f48:	f8c9 2004 	str.w	r2, [r9, #4]
 8008f4c:	3501      	adds	r5, #1
 8008f4e:	4414      	add	r4, r2
 8008f50:	ab1f      	add	r3, sp, #124	; 0x7c
 8008f52:	2d07      	cmp	r5, #7
 8008f54:	9425      	str	r4, [sp, #148]	; 0x94
 8008f56:	9524      	str	r5, [sp, #144]	; 0x90
 8008f58:	f8c9 3000 	str.w	r3, [r9]
 8008f5c:	f77f ace8 	ble.w	8008930 <_svfprintf_r+0x51c>
 8008f60:	aa23      	add	r2, sp, #140	; 0x8c
 8008f62:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f64:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008f66:	f004 fea1 	bl	800dcac <__ssprint_r>
 8008f6a:	2800      	cmp	r0, #0
 8008f6c:	f47f ab4b 	bne.w	8008606 <_svfprintf_r+0x1f2>
 8008f70:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8008f72:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8008f76:	e4dd      	b.n	8008934 <_svfprintf_r+0x520>
 8008f78:	aa23      	add	r2, sp, #140	; 0x8c
 8008f7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f7c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008f7e:	f004 fe95 	bl	800dcac <__ssprint_r>
 8008f82:	2800      	cmp	r0, #0
 8008f84:	f43f ad24 	beq.w	80089d0 <_svfprintf_r+0x5bc>
 8008f88:	f7ff bb3d 	b.w	8008606 <_svfprintf_r+0x1f2>
 8008f8c:	aa23      	add	r2, sp, #140	; 0x8c
 8008f8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f90:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008f92:	f004 fe8b 	bl	800dcac <__ssprint_r>
 8008f96:	2800      	cmp	r0, #0
 8008f98:	f47f ab35 	bne.w	8008606 <_svfprintf_r+0x1f2>
 8008f9c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8008f9e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8008fa2:	e4b4      	b.n	800890e <_svfprintf_r+0x4fa>
 8008fa4:	aa23      	add	r2, sp, #140	; 0x8c
 8008fa6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fa8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008faa:	f004 fe7f 	bl	800dcac <__ssprint_r>
 8008fae:	2800      	cmp	r0, #0
 8008fb0:	f47f ab29 	bne.w	8008606 <_svfprintf_r+0x1f2>
 8008fb4:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8008fb6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8008fba:	e455      	b.n	8008868 <_svfprintf_r+0x454>
 8008fbc:	aa23      	add	r2, sp, #140	; 0x8c
 8008fbe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fc0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008fc2:	f004 fe73 	bl	800dcac <__ssprint_r>
 8008fc6:	2800      	cmp	r0, #0
 8008fc8:	f47f ab1d 	bne.w	8008606 <_svfprintf_r+0x1f2>
 8008fcc:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8008fce:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8008fd2:	e459      	b.n	8008888 <_svfprintf_r+0x474>
 8008fd4:	f1bb 0f00 	cmp.w	fp, #0
 8008fd8:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 8008fdc:	f2c0 82da 	blt.w	8009594 <_svfprintf_r+0x1180>
 8008fe0:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8008fe4:	9307      	str	r3, [sp, #28]
 8008fe6:	ea54 0305 	orrs.w	r3, r4, r5
 8008fea:	f47f adcb 	bne.w	8008b84 <_svfprintf_r+0x770>
 8008fee:	f1bb 0f00 	cmp.w	fp, #0
 8008ff2:	f43f ae8d 	beq.w	8008d10 <_svfprintf_r+0x8fc>
 8008ff6:	2700      	movs	r7, #0
 8008ff8:	e6b8      	b.n	8008d6c <_svfprintf_r+0x958>
 8008ffa:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8008ffc:	2d00      	cmp	r5, #0
 8008ffe:	f340 82cc 	ble.w	800959a <_svfprintf_r+0x1186>
 8009002:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009004:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009006:	4293      	cmp	r3, r2
 8009008:	bfa8      	it	ge
 800900a:	4613      	movge	r3, r2
 800900c:	2b00      	cmp	r3, #0
 800900e:	461d      	mov	r5, r3
 8009010:	dd0d      	ble.n	800902e <_svfprintf_r+0xc1a>
 8009012:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009014:	f8c9 6000 	str.w	r6, [r9]
 8009018:	3301      	adds	r3, #1
 800901a:	442c      	add	r4, r5
 800901c:	2b07      	cmp	r3, #7
 800901e:	9425      	str	r4, [sp, #148]	; 0x94
 8009020:	f8c9 5004 	str.w	r5, [r9, #4]
 8009024:	9324      	str	r3, [sp, #144]	; 0x90
 8009026:	f300 83a3 	bgt.w	8009770 <_svfprintf_r+0x135c>
 800902a:	f109 0908 	add.w	r9, r9, #8
 800902e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009030:	2d00      	cmp	r5, #0
 8009032:	bfa8      	it	ge
 8009034:	1b5b      	subge	r3, r3, r5
 8009036:	2b00      	cmp	r3, #0
 8009038:	461d      	mov	r5, r3
 800903a:	f340 80f6 	ble.w	800922a <_svfprintf_r+0xe16>
 800903e:	4aba      	ldr	r2, [pc, #744]	; (8009328 <_svfprintf_r+0xf14>)
 8009040:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009042:	920f      	str	r2, [sp, #60]	; 0x3c
 8009044:	2d10      	cmp	r5, #16
 8009046:	f340 8280 	ble.w	800954a <_svfprintf_r+0x1136>
 800904a:	4622      	mov	r2, r4
 800904c:	2710      	movs	r7, #16
 800904e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8009052:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009054:	e005      	b.n	8009062 <_svfprintf_r+0xc4e>
 8009056:	f109 0908 	add.w	r9, r9, #8
 800905a:	3d10      	subs	r5, #16
 800905c:	2d10      	cmp	r5, #16
 800905e:	f340 8273 	ble.w	8009548 <_svfprintf_r+0x1134>
 8009062:	3301      	adds	r3, #1
 8009064:	3210      	adds	r2, #16
 8009066:	2b07      	cmp	r3, #7
 8009068:	9225      	str	r2, [sp, #148]	; 0x94
 800906a:	9324      	str	r3, [sp, #144]	; 0x90
 800906c:	f8c9 a000 	str.w	sl, [r9]
 8009070:	f8c9 7004 	str.w	r7, [r9, #4]
 8009074:	ddef      	ble.n	8009056 <_svfprintf_r+0xc42>
 8009076:	aa23      	add	r2, sp, #140	; 0x8c
 8009078:	4621      	mov	r1, r4
 800907a:	4658      	mov	r0, fp
 800907c:	f004 fe16 	bl	800dcac <__ssprint_r>
 8009080:	2800      	cmp	r0, #0
 8009082:	f47f aac0 	bne.w	8008606 <_svfprintf_r+0x1f2>
 8009086:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8009088:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800908a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800908e:	e7e4      	b.n	800905a <_svfprintf_r+0xc46>
 8009090:	aa23      	add	r2, sp, #140	; 0x8c
 8009092:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009094:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009096:	f004 fe09 	bl	800dcac <__ssprint_r>
 800909a:	2800      	cmp	r0, #0
 800909c:	f47f aab3 	bne.w	8008606 <_svfprintf_r+0x1f2>
 80090a0:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 80090a4:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80090a6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 80090aa:	f7ff bbcd 	b.w	8008848 <_svfprintf_r+0x434>
 80090ae:	1e5e      	subs	r6, r3, #1
 80090b0:	2e00      	cmp	r6, #0
 80090b2:	f77f af48 	ble.w	8008f46 <_svfprintf_r+0xb32>
 80090b6:	4b9c      	ldr	r3, [pc, #624]	; (8009328 <_svfprintf_r+0xf14>)
 80090b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80090ba:	2e10      	cmp	r6, #16
 80090bc:	dd2c      	ble.n	8009118 <_svfprintf_r+0xd04>
 80090be:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 80090c2:	2710      	movs	r7, #16
 80090c4:	46b0      	mov	r8, r6
 80090c6:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80090ca:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80090cc:	e006      	b.n	80090dc <_svfprintf_r+0xcc8>
 80090ce:	f1a8 0810 	sub.w	r8, r8, #16
 80090d2:	f1b8 0f10 	cmp.w	r8, #16
 80090d6:	f109 0908 	add.w	r9, r9, #8
 80090da:	dd1a      	ble.n	8009112 <_svfprintf_r+0xcfe>
 80090dc:	3501      	adds	r5, #1
 80090de:	3410      	adds	r4, #16
 80090e0:	2d07      	cmp	r5, #7
 80090e2:	9425      	str	r4, [sp, #148]	; 0x94
 80090e4:	9524      	str	r5, [sp, #144]	; 0x90
 80090e6:	f8c9 a000 	str.w	sl, [r9]
 80090ea:	f8c9 7004 	str.w	r7, [r9, #4]
 80090ee:	ddee      	ble.n	80090ce <_svfprintf_r+0xcba>
 80090f0:	aa23      	add	r2, sp, #140	; 0x8c
 80090f2:	4631      	mov	r1, r6
 80090f4:	4658      	mov	r0, fp
 80090f6:	f004 fdd9 	bl	800dcac <__ssprint_r>
 80090fa:	2800      	cmp	r0, #0
 80090fc:	f47f aa83 	bne.w	8008606 <_svfprintf_r+0x1f2>
 8009100:	f1a8 0810 	sub.w	r8, r8, #16
 8009104:	f1b8 0f10 	cmp.w	r8, #16
 8009108:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800910a:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800910c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8009110:	dce4      	bgt.n	80090dc <_svfprintf_r+0xcc8>
 8009112:	4646      	mov	r6, r8
 8009114:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8009118:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800911a:	3501      	adds	r5, #1
 800911c:	4434      	add	r4, r6
 800911e:	2d07      	cmp	r5, #7
 8009120:	9425      	str	r4, [sp, #148]	; 0x94
 8009122:	9524      	str	r5, [sp, #144]	; 0x90
 8009124:	e889 0048 	stmia.w	r9, {r3, r6}
 8009128:	f77f af0b 	ble.w	8008f42 <_svfprintf_r+0xb2e>
 800912c:	aa23      	add	r2, sp, #140	; 0x8c
 800912e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009130:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009132:	f004 fdbb 	bl	800dcac <__ssprint_r>
 8009136:	2800      	cmp	r0, #0
 8009138:	f47f aa65 	bne.w	8008606 <_svfprintf_r+0x1f2>
 800913c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800913e:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8009140:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8009144:	e6ff      	b.n	8008f46 <_svfprintf_r+0xb32>
 8009146:	9907      	ldr	r1, [sp, #28]
 8009148:	f011 0210 	ands.w	r2, r1, #16
 800914c:	f000 8108 	beq.w	8009360 <_svfprintf_r+0xf4c>
 8009150:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009152:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8009156:	f1bb 0f00 	cmp.w	fp, #0
 800915a:	6804      	ldr	r4, [r0, #0]
 800915c:	f100 0704 	add.w	r7, r0, #4
 8009160:	f04f 0500 	mov.w	r5, #0
 8009164:	db26      	blt.n	80091b4 <_svfprintf_r+0xda0>
 8009166:	460a      	mov	r2, r1
 8009168:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800916c:	9207      	str	r2, [sp, #28]
 800916e:	ea54 0205 	orrs.w	r2, r4, r5
 8009172:	970e      	str	r7, [sp, #56]	; 0x38
 8009174:	461f      	mov	r7, r3
 8009176:	f47f aaef 	bne.w	8008758 <_svfprintf_r+0x344>
 800917a:	e4c8      	b.n	8008b0e <_svfprintf_r+0x6fa>
 800917c:	9b07      	ldr	r3, [sp, #28]
 800917e:	06d9      	lsls	r1, r3, #27
 8009180:	d42a      	bmi.n	80091d8 <_svfprintf_r+0xdc4>
 8009182:	9b07      	ldr	r3, [sp, #28]
 8009184:	065a      	lsls	r2, r3, #25
 8009186:	d527      	bpl.n	80091d8 <_svfprintf_r+0xdc4>
 8009188:	990e      	ldr	r1, [sp, #56]	; 0x38
 800918a:	f9b1 4000 	ldrsh.w	r4, [r1]
 800918e:	3104      	adds	r1, #4
 8009190:	17e5      	asrs	r5, r4, #31
 8009192:	4622      	mov	r2, r4
 8009194:	462b      	mov	r3, r5
 8009196:	910e      	str	r1, [sp, #56]	; 0x38
 8009198:	f7ff bacb 	b.w	8008732 <_svfprintf_r+0x31e>
 800919c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800919e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 80091a2:	f1bb 0f00 	cmp.w	fp, #0
 80091a6:	680c      	ldr	r4, [r1, #0]
 80091a8:	f101 0704 	add.w	r7, r1, #4
 80091ac:	f04f 0500 	mov.w	r5, #0
 80091b0:	f280 8245 	bge.w	800963e <_svfprintf_r+0x122a>
 80091b4:	970e      	str	r7, [sp, #56]	; 0x38
 80091b6:	461f      	mov	r7, r3
 80091b8:	ea54 0305 	orrs.w	r3, r4, r5
 80091bc:	f47f aacc 	bne.w	8008758 <_svfprintf_r+0x344>
 80091c0:	e4aa      	b.n	8008b18 <_svfprintf_r+0x704>
 80091c2:	3301      	adds	r3, #1
 80091c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80091c6:	9324      	str	r3, [sp, #144]	; 0x90
 80091c8:	442c      	add	r4, r5
 80091ca:	2b07      	cmp	r3, #7
 80091cc:	9425      	str	r4, [sp, #148]	; 0x94
 80091ce:	e889 0024 	stmia.w	r9, {r2, r5}
 80091d2:	f77f abad 	ble.w	8008930 <_svfprintf_r+0x51c>
 80091d6:	e6c3      	b.n	8008f60 <_svfprintf_r+0xb4c>
 80091d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80091da:	6814      	ldr	r4, [r2, #0]
 80091dc:	4613      	mov	r3, r2
 80091de:	3304      	adds	r3, #4
 80091e0:	17e5      	asrs	r5, r4, #31
 80091e2:	4622      	mov	r2, r4
 80091e4:	930e      	str	r3, [sp, #56]	; 0x38
 80091e6:	2a00      	cmp	r2, #0
 80091e8:	462b      	mov	r3, r5
 80091ea:	f173 0300 	sbcs.w	r3, r3, #0
 80091ee:	f6bf aaa5 	bge.w	800873c <_svfprintf_r+0x328>
 80091f2:	4264      	negs	r4, r4
 80091f4:	f04f 072d 	mov.w	r7, #45	; 0x2d
 80091f8:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 80091fc:	f1bb 0f00 	cmp.w	fp, #0
 8009200:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 8009204:	f6ff aaa8 	blt.w	8008758 <_svfprintf_r+0x344>
 8009208:	9b07      	ldr	r3, [sp, #28]
 800920a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800920e:	9307      	str	r3, [sp, #28]
 8009210:	f7ff baa2 	b.w	8008758 <_svfprintf_r+0x344>
 8009214:	aa23      	add	r2, sp, #140	; 0x8c
 8009216:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009218:	980a      	ldr	r0, [sp, #40]	; 0x28
 800921a:	f004 fd47 	bl	800dcac <__ssprint_r>
 800921e:	2800      	cmp	r0, #0
 8009220:	f47f a9f1 	bne.w	8008606 <_svfprintf_r+0x1f2>
 8009224:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8009226:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800922a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800922c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800922e:	4432      	add	r2, r6
 8009230:	4617      	mov	r7, r2
 8009232:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009234:	4293      	cmp	r3, r2
 8009236:	db47      	blt.n	80092c8 <_svfprintf_r+0xeb4>
 8009238:	9a07      	ldr	r2, [sp, #28]
 800923a:	07d5      	lsls	r5, r2, #31
 800923c:	d444      	bmi.n	80092c8 <_svfprintf_r+0xeb4>
 800923e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009240:	440e      	add	r6, r1
 8009242:	1bf5      	subs	r5, r6, r7
 8009244:	1acb      	subs	r3, r1, r3
 8009246:	429d      	cmp	r5, r3
 8009248:	bfa8      	it	ge
 800924a:	461d      	movge	r5, r3
 800924c:	2d00      	cmp	r5, #0
 800924e:	462e      	mov	r6, r5
 8009250:	dd0d      	ble.n	800926e <_svfprintf_r+0xe5a>
 8009252:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009254:	f8c9 7000 	str.w	r7, [r9]
 8009258:	3201      	adds	r2, #1
 800925a:	442c      	add	r4, r5
 800925c:	2a07      	cmp	r2, #7
 800925e:	9425      	str	r4, [sp, #148]	; 0x94
 8009260:	f8c9 5004 	str.w	r5, [r9, #4]
 8009264:	9224      	str	r2, [sp, #144]	; 0x90
 8009266:	f300 8312 	bgt.w	800988e <_svfprintf_r+0x147a>
 800926a:	f109 0908 	add.w	r9, r9, #8
 800926e:	2e00      	cmp	r6, #0
 8009270:	bfac      	ite	ge
 8009272:	1b9d      	subge	r5, r3, r6
 8009274:	461d      	movlt	r5, r3
 8009276:	2d00      	cmp	r5, #0
 8009278:	f77f ab5c 	ble.w	8008934 <_svfprintf_r+0x520>
 800927c:	4a2a      	ldr	r2, [pc, #168]	; (8009328 <_svfprintf_r+0xf14>)
 800927e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009280:	920f      	str	r2, [sp, #60]	; 0x3c
 8009282:	2d10      	cmp	r5, #16
 8009284:	dd9d      	ble.n	80091c2 <_svfprintf_r+0xdae>
 8009286:	2610      	movs	r6, #16
 8009288:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800928a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800928e:	e004      	b.n	800929a <_svfprintf_r+0xe86>
 8009290:	f109 0908 	add.w	r9, r9, #8
 8009294:	3d10      	subs	r5, #16
 8009296:	2d10      	cmp	r5, #16
 8009298:	dd93      	ble.n	80091c2 <_svfprintf_r+0xdae>
 800929a:	3301      	adds	r3, #1
 800929c:	3410      	adds	r4, #16
 800929e:	2b07      	cmp	r3, #7
 80092a0:	9425      	str	r4, [sp, #148]	; 0x94
 80092a2:	9324      	str	r3, [sp, #144]	; 0x90
 80092a4:	f8c9 a000 	str.w	sl, [r9]
 80092a8:	f8c9 6004 	str.w	r6, [r9, #4]
 80092ac:	ddf0      	ble.n	8009290 <_svfprintf_r+0xe7c>
 80092ae:	aa23      	add	r2, sp, #140	; 0x8c
 80092b0:	4659      	mov	r1, fp
 80092b2:	4638      	mov	r0, r7
 80092b4:	f004 fcfa 	bl	800dcac <__ssprint_r>
 80092b8:	2800      	cmp	r0, #0
 80092ba:	f47f a9a4 	bne.w	8008606 <_svfprintf_r+0x1f2>
 80092be:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80092c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80092c2:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 80092c6:	e7e5      	b.n	8009294 <_svfprintf_r+0xe80>
 80092c8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80092ca:	9816      	ldr	r0, [sp, #88]	; 0x58
 80092cc:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80092ce:	f8c9 1000 	str.w	r1, [r9]
 80092d2:	3201      	adds	r2, #1
 80092d4:	4404      	add	r4, r0
 80092d6:	2a07      	cmp	r2, #7
 80092d8:	9425      	str	r4, [sp, #148]	; 0x94
 80092da:	f8c9 0004 	str.w	r0, [r9, #4]
 80092de:	9224      	str	r2, [sp, #144]	; 0x90
 80092e0:	f300 82a5 	bgt.w	800982e <_svfprintf_r+0x141a>
 80092e4:	f109 0908 	add.w	r9, r9, #8
 80092e8:	e7a9      	b.n	800923e <_svfprintf_r+0xe2a>
 80092ea:	9b07      	ldr	r3, [sp, #28]
 80092ec:	07d8      	lsls	r0, r3, #31
 80092ee:	f53f adf4 	bmi.w	8008eda <_svfprintf_r+0xac6>
 80092f2:	3501      	adds	r5, #1
 80092f4:	3401      	adds	r4, #1
 80092f6:	2301      	movs	r3, #1
 80092f8:	2d07      	cmp	r5, #7
 80092fa:	9425      	str	r4, [sp, #148]	; 0x94
 80092fc:	9524      	str	r5, [sp, #144]	; 0x90
 80092fe:	f8c9 6000 	str.w	r6, [r9]
 8009302:	f8c9 3004 	str.w	r3, [r9, #4]
 8009306:	f77f ae1c 	ble.w	8008f42 <_svfprintf_r+0xb2e>
 800930a:	e70f      	b.n	800912c <_svfprintf_r+0xd18>
 800930c:	aa23      	add	r2, sp, #140	; 0x8c
 800930e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009310:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009312:	f004 fccb 	bl	800dcac <__ssprint_r>
 8009316:	2800      	cmp	r0, #0
 8009318:	f47f a975 	bne.w	8008606 <_svfprintf_r+0x1f2>
 800931c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800931e:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8009320:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8009324:	e5e7      	b.n	8008ef6 <_svfprintf_r+0xae2>
 8009326:	bf00      	nop
 8009328:	0800e7ac 	.word	0x0800e7ac
 800932c:	aa23      	add	r2, sp, #140	; 0x8c
 800932e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009330:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009332:	f004 fcbb 	bl	800dcac <__ssprint_r>
 8009336:	2800      	cmp	r0, #0
 8009338:	f47f a965 	bne.w	8008606 <_svfprintf_r+0x1f2>
 800933c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800933e:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8009340:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8009344:	e5e6      	b.n	8008f14 <_svfprintf_r+0xb00>
 8009346:	aa23      	add	r2, sp, #140	; 0x8c
 8009348:	9909      	ldr	r1, [sp, #36]	; 0x24
 800934a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800934c:	f004 fcae 	bl	800dcac <__ssprint_r>
 8009350:	2800      	cmp	r0, #0
 8009352:	f47f a958 	bne.w	8008606 <_svfprintf_r+0x1f2>
 8009356:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8009358:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800935c:	f7ff ba98 	b.w	8008890 <_svfprintf_r+0x47c>
 8009360:	9907      	ldr	r1, [sp, #28]
 8009362:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 8009366:	f43f af19 	beq.w	800919c <_svfprintf_r+0xd88>
 800936a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800936c:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
 8009370:	4603      	mov	r3, r0
 8009372:	f1bb 0f00 	cmp.w	fp, #0
 8009376:	f103 0304 	add.w	r3, r3, #4
 800937a:	8804      	ldrh	r4, [r0, #0]
 800937c:	f04f 0500 	mov.w	r5, #0
 8009380:	f2c0 81b9 	blt.w	80096f6 <_svfprintf_r+0x12e2>
 8009384:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009388:	9107      	str	r1, [sp, #28]
 800938a:	ea54 0105 	orrs.w	r1, r4, r5
 800938e:	930e      	str	r3, [sp, #56]	; 0x38
 8009390:	4617      	mov	r7, r2
 8009392:	f47f a9e1 	bne.w	8008758 <_svfprintf_r+0x344>
 8009396:	f7ff bbba 	b.w	8008b0e <_svfprintf_r+0x6fa>
 800939a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800939c:	4622      	mov	r2, r4
 800939e:	4620      	mov	r0, r4
 80093a0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80093a2:	4623      	mov	r3, r4
 80093a4:	4621      	mov	r1, r4
 80093a6:	f7f7 fefd 	bl	80011a4 <__aeabi_dcmpun>
 80093aa:	2800      	cmp	r0, #0
 80093ac:	f040 8315 	bne.w	80099da <_svfprintf_r+0x15c6>
 80093b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80093b2:	f1bb 3fff 	cmp.w	fp, #4294967295
 80093b6:	f023 0320 	bic.w	r3, r3, #32
 80093ba:	930d      	str	r3, [sp, #52]	; 0x34
 80093bc:	f000 8276 	beq.w	80098ac <_svfprintf_r+0x1498>
 80093c0:	2b47      	cmp	r3, #71	; 0x47
 80093c2:	f000 8192 	beq.w	80096ea <_svfprintf_r+0x12d6>
 80093c6:	9b07      	ldr	r3, [sp, #28]
 80093c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093cc:	9310      	str	r3, [sp, #64]	; 0x40
 80093ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093d0:	1e1f      	subs	r7, r3, #0
 80093d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80093d4:	9308      	str	r3, [sp, #32]
 80093d6:	bfbb      	ittet	lt
 80093d8:	463b      	movlt	r3, r7
 80093da:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
 80093de:	2300      	movge	r3, #0
 80093e0:	232d      	movlt	r3, #45	; 0x2d
 80093e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80093e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80093e6:	2b66      	cmp	r3, #102	; 0x66
 80093e8:	f000 8263 	beq.w	80098b2 <_svfprintf_r+0x149e>
 80093ec:	2b46      	cmp	r3, #70	; 0x46
 80093ee:	f000 815e 	beq.w	80096ae <_svfprintf_r+0x129a>
 80093f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093f4:	9a08      	ldr	r2, [sp, #32]
 80093f6:	2b45      	cmp	r3, #69	; 0x45
 80093f8:	a821      	add	r0, sp, #132	; 0x84
 80093fa:	a91e      	add	r1, sp, #120	; 0x78
 80093fc:	bf0c      	ite	eq
 80093fe:	f10b 0501 	addeq.w	r5, fp, #1
 8009402:	465d      	movne	r5, fp
 8009404:	9004      	str	r0, [sp, #16]
 8009406:	9103      	str	r1, [sp, #12]
 8009408:	a81d      	add	r0, sp, #116	; 0x74
 800940a:	2102      	movs	r1, #2
 800940c:	463b      	mov	r3, r7
 800940e:	9002      	str	r0, [sp, #8]
 8009410:	9501      	str	r5, [sp, #4]
 8009412:	9100      	str	r1, [sp, #0]
 8009414:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009416:	f002 f803 	bl	800b420 <_dtoa_r>
 800941a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800941c:	2b67      	cmp	r3, #103	; 0x67
 800941e:	4606      	mov	r6, r0
 8009420:	f040 827d 	bne.w	800991e <_svfprintf_r+0x150a>
 8009424:	9b07      	ldr	r3, [sp, #28]
 8009426:	07da      	lsls	r2, r3, #31
 8009428:	f140 82bf 	bpl.w	80099aa <_svfprintf_r+0x1596>
 800942c:	1974      	adds	r4, r6, r5
 800942e:	9808      	ldr	r0, [sp, #32]
 8009430:	4639      	mov	r1, r7
 8009432:	2200      	movs	r2, #0
 8009434:	2300      	movs	r3, #0
 8009436:	f7f7 fe83 	bl	8001140 <__aeabi_dcmpeq>
 800943a:	2800      	cmp	r0, #0
 800943c:	f040 81a4 	bne.w	8009788 <_svfprintf_r+0x1374>
 8009440:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009442:	429c      	cmp	r4, r3
 8009444:	d906      	bls.n	8009454 <_svfprintf_r+0x1040>
 8009446:	2130      	movs	r1, #48	; 0x30
 8009448:	1c5a      	adds	r2, r3, #1
 800944a:	9221      	str	r2, [sp, #132]	; 0x84
 800944c:	7019      	strb	r1, [r3, #0]
 800944e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009450:	429c      	cmp	r4, r3
 8009452:	d8f9      	bhi.n	8009448 <_svfprintf_r+0x1034>
 8009454:	1b9b      	subs	r3, r3, r6
 8009456:	9312      	str	r3, [sp, #72]	; 0x48
 8009458:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800945a:	2b47      	cmp	r3, #71	; 0x47
 800945c:	f000 8181 	beq.w	8009762 <_svfprintf_r+0x134e>
 8009460:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009462:	2b65      	cmp	r3, #101	; 0x65
 8009464:	f340 826a 	ble.w	800993c <_svfprintf_r+0x1528>
 8009468:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800946a:	2b66      	cmp	r3, #102	; 0x66
 800946c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800946e:	9313      	str	r3, [sp, #76]	; 0x4c
 8009470:	f000 8247 	beq.w	8009902 <_svfprintf_r+0x14ee>
 8009474:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009476:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009478:	428a      	cmp	r2, r1
 800947a:	f2c0 8236 	blt.w	80098ea <_svfprintf_r+0x14d6>
 800947e:	9b07      	ldr	r3, [sp, #28]
 8009480:	07d9      	lsls	r1, r3, #31
 8009482:	f100 8289 	bmi.w	8009998 <_svfprintf_r+0x1584>
 8009486:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800948a:	920d      	str	r2, [sp, #52]	; 0x34
 800948c:	2267      	movs	r2, #103	; 0x67
 800948e:	9211      	str	r2, [sp, #68]	; 0x44
 8009490:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009492:	2a00      	cmp	r2, #0
 8009494:	f040 815b 	bne.w	800974e <_svfprintf_r+0x133a>
 8009498:	9308      	str	r3, [sp, #32]
 800949a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800949c:	9307      	str	r3, [sp, #28]
 800949e:	4693      	mov	fp, r2
 80094a0:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 80094a4:	f7ff b97c 	b.w	80087a0 <_svfprintf_r+0x38c>
 80094a8:	9b07      	ldr	r3, [sp, #28]
 80094aa:	06df      	lsls	r7, r3, #27
 80094ac:	d40b      	bmi.n	80094c6 <_svfprintf_r+0x10b2>
 80094ae:	9b07      	ldr	r3, [sp, #28]
 80094b0:	065e      	lsls	r6, r3, #25
 80094b2:	d508      	bpl.n	80094c6 <_svfprintf_r+0x10b2>
 80094b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80094b6:	6813      	ldr	r3, [r2, #0]
 80094b8:	3204      	adds	r2, #4
 80094ba:	920e      	str	r2, [sp, #56]	; 0x38
 80094bc:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80094c0:	801a      	strh	r2, [r3, #0]
 80094c2:	f7fe bfcd 	b.w	8008460 <_svfprintf_r+0x4c>
 80094c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80094c8:	6813      	ldr	r3, [r2, #0]
 80094ca:	3204      	adds	r2, #4
 80094cc:	920e      	str	r2, [sp, #56]	; 0x38
 80094ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80094d0:	601a      	str	r2, [r3, #0]
 80094d2:	f7fe bfc5 	b.w	8008460 <_svfprintf_r+0x4c>
 80094d6:	9b07      	ldr	r3, [sp, #28]
 80094d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80094da:	f013 0f40 	tst.w	r3, #64	; 0x40
 80094de:	4613      	mov	r3, r2
 80094e0:	f000 810e 	beq.w	8009700 <_svfprintf_r+0x12ec>
 80094e4:	3304      	adds	r3, #4
 80094e6:	8814      	ldrh	r4, [r2, #0]
 80094e8:	930e      	str	r3, [sp, #56]	; 0x38
 80094ea:	2500      	movs	r5, #0
 80094ec:	f7ff bb2c 	b.w	8008b48 <_svfprintf_r+0x734>
 80094f0:	9907      	ldr	r1, [sp, #28]
 80094f2:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 80094f6:	d017      	beq.n	8009528 <_svfprintf_r+0x1114>
 80094f8:	980e      	ldr	r0, [sp, #56]	; 0x38
 80094fa:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
 80094fe:	4603      	mov	r3, r0
 8009500:	f1bb 0f00 	cmp.w	fp, #0
 8009504:	f103 0304 	add.w	r3, r3, #4
 8009508:	8804      	ldrh	r4, [r0, #0]
 800950a:	f04f 0500 	mov.w	r5, #0
 800950e:	f2c0 80f5 	blt.w	80096fc <_svfprintf_r+0x12e8>
 8009512:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009516:	9107      	str	r1, [sp, #28]
 8009518:	ea54 0105 	orrs.w	r1, r4, r5
 800951c:	930e      	str	r3, [sp, #56]	; 0x38
 800951e:	f43f ac13 	beq.w	8008d48 <_svfprintf_r+0x934>
 8009522:	4617      	mov	r7, r2
 8009524:	f7ff b89b 	b.w	800865e <_svfprintf_r+0x24a>
 8009528:	990e      	ldr	r1, [sp, #56]	; 0x38
 800952a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800952e:	f1bb 0f00 	cmp.w	fp, #0
 8009532:	680c      	ldr	r4, [r1, #0]
 8009534:	f101 0704 	add.w	r7, r1, #4
 8009538:	f04f 0500 	mov.w	r5, #0
 800953c:	f280 8081 	bge.w	8009642 <_svfprintf_r+0x122e>
 8009540:	970e      	str	r7, [sp, #56]	; 0x38
 8009542:	2700      	movs	r7, #0
 8009544:	f7ff b88b 	b.w	800865e <_svfprintf_r+0x24a>
 8009548:	4614      	mov	r4, r2
 800954a:	3301      	adds	r3, #1
 800954c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800954e:	9324      	str	r3, [sp, #144]	; 0x90
 8009550:	442c      	add	r4, r5
 8009552:	2b07      	cmp	r3, #7
 8009554:	9425      	str	r4, [sp, #148]	; 0x94
 8009556:	e889 0024 	stmia.w	r9, {r2, r5}
 800955a:	f73f ae5b 	bgt.w	8009214 <_svfprintf_r+0xe00>
 800955e:	f109 0908 	add.w	r9, r9, #8
 8009562:	e662      	b.n	800922a <_svfprintf_r+0xe16>
 8009564:	2700      	movs	r7, #0
 8009566:	45bb      	cmp	fp, r7
 8009568:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800956c:	f6ff abfe 	blt.w	8008d6c <_svfprintf_r+0x958>
 8009570:	9b07      	ldr	r3, [sp, #28]
 8009572:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009576:	9307      	str	r3, [sp, #28]
 8009578:	f7ff bbc6 	b.w	8008d08 <_svfprintf_r+0x8f4>
 800957c:	aa23      	add	r2, sp, #140	; 0x8c
 800957e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009580:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009582:	f004 fb93 	bl	800dcac <__ssprint_r>
 8009586:	2800      	cmp	r0, #0
 8009588:	f47f a83d 	bne.w	8008606 <_svfprintf_r+0x1f2>
 800958c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800958e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8009592:	e40d      	b.n	8008db0 <_svfprintf_r+0x99c>
 8009594:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8009596:	f7ff bbe2 	b.w	8008d5e <_svfprintf_r+0x94a>
 800959a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800959c:	4ab1      	ldr	r2, [pc, #708]	; (8009864 <_svfprintf_r+0x1450>)
 800959e:	f8c9 2000 	str.w	r2, [r9]
 80095a2:	3301      	adds	r3, #1
 80095a4:	3401      	adds	r4, #1
 80095a6:	2201      	movs	r2, #1
 80095a8:	2b07      	cmp	r3, #7
 80095aa:	9425      	str	r4, [sp, #148]	; 0x94
 80095ac:	9324      	str	r3, [sp, #144]	; 0x90
 80095ae:	f8c9 2004 	str.w	r2, [r9, #4]
 80095b2:	dc6f      	bgt.n	8009694 <_svfprintf_r+0x1280>
 80095b4:	f109 0908 	add.w	r9, r9, #8
 80095b8:	b92d      	cbnz	r5, 80095c6 <_svfprintf_r+0x11b2>
 80095ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80095bc:	b91b      	cbnz	r3, 80095c6 <_svfprintf_r+0x11b2>
 80095be:	9b07      	ldr	r3, [sp, #28]
 80095c0:	07df      	lsls	r7, r3, #31
 80095c2:	f57f a9b7 	bpl.w	8008934 <_svfprintf_r+0x520>
 80095c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80095c8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80095ca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80095cc:	f8c9 2000 	str.w	r2, [r9]
 80095d0:	3301      	adds	r3, #1
 80095d2:	440c      	add	r4, r1
 80095d4:	2b07      	cmp	r3, #7
 80095d6:	9425      	str	r4, [sp, #148]	; 0x94
 80095d8:	f8c9 1004 	str.w	r1, [r9, #4]
 80095dc:	9324      	str	r3, [sp, #144]	; 0x90
 80095de:	f300 81c9 	bgt.w	8009974 <_svfprintf_r+0x1560>
 80095e2:	f109 0908 	add.w	r9, r9, #8
 80095e6:	426d      	negs	r5, r5
 80095e8:	2d00      	cmp	r5, #0
 80095ea:	f340 80a3 	ble.w	8009734 <_svfprintf_r+0x1320>
 80095ee:	4a9e      	ldr	r2, [pc, #632]	; (8009868 <_svfprintf_r+0x1454>)
 80095f0:	920f      	str	r2, [sp, #60]	; 0x3c
 80095f2:	2d10      	cmp	r5, #16
 80095f4:	f340 8129 	ble.w	800984a <_svfprintf_r+0x1436>
 80095f8:	4622      	mov	r2, r4
 80095fa:	2710      	movs	r7, #16
 80095fc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8009600:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009602:	e005      	b.n	8009610 <_svfprintf_r+0x11fc>
 8009604:	f109 0908 	add.w	r9, r9, #8
 8009608:	3d10      	subs	r5, #16
 800960a:	2d10      	cmp	r5, #16
 800960c:	f340 811c 	ble.w	8009848 <_svfprintf_r+0x1434>
 8009610:	3301      	adds	r3, #1
 8009612:	3210      	adds	r2, #16
 8009614:	2b07      	cmp	r3, #7
 8009616:	9225      	str	r2, [sp, #148]	; 0x94
 8009618:	9324      	str	r3, [sp, #144]	; 0x90
 800961a:	f8c9 a000 	str.w	sl, [r9]
 800961e:	f8c9 7004 	str.w	r7, [r9, #4]
 8009622:	ddef      	ble.n	8009604 <_svfprintf_r+0x11f0>
 8009624:	aa23      	add	r2, sp, #140	; 0x8c
 8009626:	4621      	mov	r1, r4
 8009628:	4658      	mov	r0, fp
 800962a:	f004 fb3f 	bl	800dcac <__ssprint_r>
 800962e:	2800      	cmp	r0, #0
 8009630:	f47e afe9 	bne.w	8008606 <_svfprintf_r+0x1f2>
 8009634:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8009636:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009638:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800963c:	e7e4      	b.n	8009608 <_svfprintf_r+0x11f4>
 800963e:	9a07      	ldr	r2, [sp, #28]
 8009640:	e592      	b.n	8009168 <_svfprintf_r+0xd54>
 8009642:	9a07      	ldr	r2, [sp, #28]
 8009644:	f7ff ba35 	b.w	8008ab2 <_svfprintf_r+0x69e>
 8009648:	9b07      	ldr	r3, [sp, #28]
 800964a:	f043 0320 	orr.w	r3, r3, #32
 800964e:	9307      	str	r3, [sp, #28]
 8009650:	f108 0801 	add.w	r8, r8, #1
 8009654:	f898 3000 	ldrb.w	r3, [r8]
 8009658:	f7fe bf35 	b.w	80084c6 <_svfprintf_r+0xb2>
 800965c:	aa23      	add	r2, sp, #140	; 0x8c
 800965e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009660:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009662:	f004 fb23 	bl	800dcac <__ssprint_r>
 8009666:	2800      	cmp	r0, #0
 8009668:	f47e afcd 	bne.w	8008606 <_svfprintf_r+0x1f2>
 800966c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800966e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8009672:	f7ff bbb5 	b.w	8008de0 <_svfprintf_r+0x9cc>
 8009676:	2140      	movs	r1, #64	; 0x40
 8009678:	980a      	ldr	r0, [sp, #40]	; 0x28
 800967a:	f003 faa3 	bl	800cbc4 <_malloc_r>
 800967e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009680:	6010      	str	r0, [r2, #0]
 8009682:	6110      	str	r0, [r2, #16]
 8009684:	2800      	cmp	r0, #0
 8009686:	f000 81f3 	beq.w	8009a70 <_svfprintf_r+0x165c>
 800968a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800968c:	2340      	movs	r3, #64	; 0x40
 800968e:	6153      	str	r3, [r2, #20]
 8009690:	f7fe bed7 	b.w	8008442 <_svfprintf_r+0x2e>
 8009694:	aa23      	add	r2, sp, #140	; 0x8c
 8009696:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009698:	980a      	ldr	r0, [sp, #40]	; 0x28
 800969a:	f004 fb07 	bl	800dcac <__ssprint_r>
 800969e:	2800      	cmp	r0, #0
 80096a0:	f47e afb1 	bne.w	8008606 <_svfprintf_r+0x1f2>
 80096a4:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80096a6:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80096a8:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 80096ac:	e784      	b.n	80095b8 <_svfprintf_r+0x11a4>
 80096ae:	a821      	add	r0, sp, #132	; 0x84
 80096b0:	a91e      	add	r1, sp, #120	; 0x78
 80096b2:	9004      	str	r0, [sp, #16]
 80096b4:	9103      	str	r1, [sp, #12]
 80096b6:	a81d      	add	r0, sp, #116	; 0x74
 80096b8:	2103      	movs	r1, #3
 80096ba:	9002      	str	r0, [sp, #8]
 80096bc:	9a08      	ldr	r2, [sp, #32]
 80096be:	f8cd b004 	str.w	fp, [sp, #4]
 80096c2:	463b      	mov	r3, r7
 80096c4:	9100      	str	r1, [sp, #0]
 80096c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80096c8:	f001 feaa 	bl	800b420 <_dtoa_r>
 80096cc:	465d      	mov	r5, fp
 80096ce:	4606      	mov	r6, r0
 80096d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80096d2:	2b46      	cmp	r3, #70	; 0x46
 80096d4:	eb06 0405 	add.w	r4, r6, r5
 80096d8:	f47f aea9 	bne.w	800942e <_svfprintf_r+0x101a>
 80096dc:	7833      	ldrb	r3, [r6, #0]
 80096de:	2b30      	cmp	r3, #48	; 0x30
 80096e0:	f000 816d 	beq.w	80099be <_svfprintf_r+0x15aa>
 80096e4:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80096e6:	442c      	add	r4, r5
 80096e8:	e6a1      	b.n	800942e <_svfprintf_r+0x101a>
 80096ea:	f1bb 0f00 	cmp.w	fp, #0
 80096ee:	bf08      	it	eq
 80096f0:	f04f 0b01 	moveq.w	fp, #1
 80096f4:	e667      	b.n	80093c6 <_svfprintf_r+0xfb2>
 80096f6:	930e      	str	r3, [sp, #56]	; 0x38
 80096f8:	4617      	mov	r7, r2
 80096fa:	e55d      	b.n	80091b8 <_svfprintf_r+0xda4>
 80096fc:	930e      	str	r3, [sp, #56]	; 0x38
 80096fe:	e720      	b.n	8009542 <_svfprintf_r+0x112e>
 8009700:	3304      	adds	r3, #4
 8009702:	6814      	ldr	r4, [r2, #0]
 8009704:	930e      	str	r3, [sp, #56]	; 0x38
 8009706:	2500      	movs	r5, #0
 8009708:	f7ff ba1e 	b.w	8008b48 <_svfprintf_r+0x734>
 800970c:	4630      	mov	r0, r6
 800970e:	f7f7 f837 	bl	8000780 <strlen>
 8009712:	46a3      	mov	fp, r4
 8009714:	4603      	mov	r3, r0
 8009716:	900d      	str	r0, [sp, #52]	; 0x34
 8009718:	f7ff baeb 	b.w	8008cf2 <_svfprintf_r+0x8de>
 800971c:	aa23      	add	r2, sp, #140	; 0x8c
 800971e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009720:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009722:	f004 fac3 	bl	800dcac <__ssprint_r>
 8009726:	2800      	cmp	r0, #0
 8009728:	f47e af6d 	bne.w	8008606 <_svfprintf_r+0x1f2>
 800972c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800972e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009730:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8009734:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009736:	f8c9 6000 	str.w	r6, [r9]
 800973a:	3301      	adds	r3, #1
 800973c:	440c      	add	r4, r1
 800973e:	2b07      	cmp	r3, #7
 8009740:	9425      	str	r4, [sp, #148]	; 0x94
 8009742:	9324      	str	r3, [sp, #144]	; 0x90
 8009744:	f8c9 1004 	str.w	r1, [r9, #4]
 8009748:	f77f a8f2 	ble.w	8008930 <_svfprintf_r+0x51c>
 800974c:	e408      	b.n	8008f60 <_svfprintf_r+0xb4c>
 800974e:	272d      	movs	r7, #45	; 0x2d
 8009750:	9308      	str	r3, [sp, #32]
 8009752:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009754:	9307      	str	r3, [sp, #28]
 8009756:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800975a:	f04f 0b00 	mov.w	fp, #0
 800975e:	f7ff b820 	b.w	80087a2 <_svfprintf_r+0x38e>
 8009762:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009764:	1cdd      	adds	r5, r3, #3
 8009766:	db11      	blt.n	800978c <_svfprintf_r+0x1378>
 8009768:	459b      	cmp	fp, r3
 800976a:	db0f      	blt.n	800978c <_svfprintf_r+0x1378>
 800976c:	9313      	str	r3, [sp, #76]	; 0x4c
 800976e:	e681      	b.n	8009474 <_svfprintf_r+0x1060>
 8009770:	aa23      	add	r2, sp, #140	; 0x8c
 8009772:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009774:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009776:	f004 fa99 	bl	800dcac <__ssprint_r>
 800977a:	2800      	cmp	r0, #0
 800977c:	f47e af43 	bne.w	8008606 <_svfprintf_r+0x1f2>
 8009780:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8009782:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8009786:	e452      	b.n	800902e <_svfprintf_r+0xc1a>
 8009788:	4623      	mov	r3, r4
 800978a:	e663      	b.n	8009454 <_svfprintf_r+0x1040>
 800978c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800978e:	3a02      	subs	r2, #2
 8009790:	9211      	str	r2, [sp, #68]	; 0x44
 8009792:	3b01      	subs	r3, #1
 8009794:	2b00      	cmp	r3, #0
 8009796:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800979a:	931d      	str	r3, [sp, #116]	; 0x74
 800979c:	bfb8      	it	lt
 800979e:	425b      	neglt	r3, r3
 80097a0:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
 80097a4:	bfb4      	ite	lt
 80097a6:	222d      	movlt	r2, #45	; 0x2d
 80097a8:	222b      	movge	r2, #43	; 0x2b
 80097aa:	2b09      	cmp	r3, #9
 80097ac:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
 80097b0:	f340 80fd 	ble.w	80099ae <_svfprintf_r+0x159a>
 80097b4:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
 80097b8:	4604      	mov	r4, r0
 80097ba:	4a2c      	ldr	r2, [pc, #176]	; (800986c <_svfprintf_r+0x1458>)
 80097bc:	fb82 2103 	smull	r2, r1, r2, r3
 80097c0:	17da      	asrs	r2, r3, #31
 80097c2:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 80097c6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80097ca:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 80097ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80097d2:	2a09      	cmp	r2, #9
 80097d4:	4613      	mov	r3, r2
 80097d6:	f804 1d01 	strb.w	r1, [r4, #-1]!
 80097da:	dcee      	bgt.n	80097ba <_svfprintf_r+0x13a6>
 80097dc:	4621      	mov	r1, r4
 80097de:	3330      	adds	r3, #48	; 0x30
 80097e0:	b2da      	uxtb	r2, r3
 80097e2:	f801 2d01 	strb.w	r2, [r1, #-1]!
 80097e6:	4288      	cmp	r0, r1
 80097e8:	f240 813f 	bls.w	8009a6a <_svfprintf_r+0x1656>
 80097ec:	f10d 017e 	add.w	r1, sp, #126	; 0x7e
 80097f0:	4623      	mov	r3, r4
 80097f2:	e001      	b.n	80097f8 <_svfprintf_r+0x13e4>
 80097f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097f8:	f801 2b01 	strb.w	r2, [r1], #1
 80097fc:	4298      	cmp	r0, r3
 80097fe:	d1f9      	bne.n	80097f4 <_svfprintf_r+0x13e0>
 8009800:	1c43      	adds	r3, r0, #1
 8009802:	1b1b      	subs	r3, r3, r4
 8009804:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
 8009808:	4413      	add	r3, r2
 800980a:	aa1f      	add	r2, sp, #124	; 0x7c
 800980c:	1a9b      	subs	r3, r3, r2
 800980e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009810:	9319      	str	r3, [sp, #100]	; 0x64
 8009812:	2a01      	cmp	r2, #1
 8009814:	4413      	add	r3, r2
 8009816:	930d      	str	r3, [sp, #52]	; 0x34
 8009818:	f340 80f6 	ble.w	8009a08 <_svfprintf_r+0x15f4>
 800981c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800981e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009820:	4413      	add	r3, r2
 8009822:	2200      	movs	r2, #0
 8009824:	930d      	str	r3, [sp, #52]	; 0x34
 8009826:	9213      	str	r2, [sp, #76]	; 0x4c
 8009828:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800982c:	e630      	b.n	8009490 <_svfprintf_r+0x107c>
 800982e:	aa23      	add	r2, sp, #140	; 0x8c
 8009830:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009832:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009834:	f004 fa3a 	bl	800dcac <__ssprint_r>
 8009838:	2800      	cmp	r0, #0
 800983a:	f47e aee4 	bne.w	8008606 <_svfprintf_r+0x1f2>
 800983e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009840:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8009842:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8009846:	e4fa      	b.n	800923e <_svfprintf_r+0xe2a>
 8009848:	4614      	mov	r4, r2
 800984a:	3301      	adds	r3, #1
 800984c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800984e:	9324      	str	r3, [sp, #144]	; 0x90
 8009850:	442c      	add	r4, r5
 8009852:	2b07      	cmp	r3, #7
 8009854:	9425      	str	r4, [sp, #148]	; 0x94
 8009856:	e889 0024 	stmia.w	r9, {r2, r5}
 800985a:	f73f af5f 	bgt.w	800971c <_svfprintf_r+0x1308>
 800985e:	f109 0908 	add.w	r9, r9, #8
 8009862:	e767      	b.n	8009734 <_svfprintf_r+0x1320>
 8009864:	0800e7fc 	.word	0x0800e7fc
 8009868:	0800e7ac 	.word	0x0800e7ac
 800986c:	66666667 	.word	0x66666667
 8009870:	2d06      	cmp	r5, #6
 8009872:	462b      	mov	r3, r5
 8009874:	bf28      	it	cs
 8009876:	2306      	movcs	r3, #6
 8009878:	930d      	str	r3, [sp, #52]	; 0x34
 800987a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800987e:	46b3      	mov	fp, r6
 8009880:	970e      	str	r7, [sp, #56]	; 0x38
 8009882:	9613      	str	r6, [sp, #76]	; 0x4c
 8009884:	4637      	mov	r7, r6
 8009886:	9308      	str	r3, [sp, #32]
 8009888:	4e8b      	ldr	r6, [pc, #556]	; (8009ab8 <_svfprintf_r+0x16a4>)
 800988a:	f7fe bf89 	b.w	80087a0 <_svfprintf_r+0x38c>
 800988e:	aa23      	add	r2, sp, #140	; 0x8c
 8009890:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009892:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009894:	f004 fa0a 	bl	800dcac <__ssprint_r>
 8009898:	2800      	cmp	r0, #0
 800989a:	f47e aeb4 	bne.w	8008606 <_svfprintf_r+0x1f2>
 800989e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80098a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80098a2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80098a4:	1ad3      	subs	r3, r2, r3
 80098a6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 80098aa:	e4e0      	b.n	800926e <_svfprintf_r+0xe5a>
 80098ac:	f04f 0b06 	mov.w	fp, #6
 80098b0:	e589      	b.n	80093c6 <_svfprintf_r+0xfb2>
 80098b2:	a821      	add	r0, sp, #132	; 0x84
 80098b4:	a91e      	add	r1, sp, #120	; 0x78
 80098b6:	9004      	str	r0, [sp, #16]
 80098b8:	9103      	str	r1, [sp, #12]
 80098ba:	a81d      	add	r0, sp, #116	; 0x74
 80098bc:	2103      	movs	r1, #3
 80098be:	9002      	str	r0, [sp, #8]
 80098c0:	9a08      	ldr	r2, [sp, #32]
 80098c2:	f8cd b004 	str.w	fp, [sp, #4]
 80098c6:	463b      	mov	r3, r7
 80098c8:	9100      	str	r1, [sp, #0]
 80098ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 80098cc:	f001 fda8 	bl	800b420 <_dtoa_r>
 80098d0:	465d      	mov	r5, fp
 80098d2:	4606      	mov	r6, r0
 80098d4:	eb00 040b 	add.w	r4, r0, fp
 80098d8:	e700      	b.n	80096dc <_svfprintf_r+0x12c8>
 80098da:	272d      	movs	r7, #45	; 0x2d
 80098dc:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 80098e0:	f7ff b8ae 	b.w	8008a40 <_svfprintf_r+0x62c>
 80098e4:	9307      	str	r3, [sp, #28]
 80098e6:	f7ff b94d 	b.w	8008b84 <_svfprintf_r+0x770>
 80098ea:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80098ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80098ee:	4413      	add	r3, r2
 80098f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80098f2:	930d      	str	r3, [sp, #52]	; 0x34
 80098f4:	2a00      	cmp	r2, #0
 80098f6:	dd7f      	ble.n	80099f8 <_svfprintf_r+0x15e4>
 80098f8:	2267      	movs	r2, #103	; 0x67
 80098fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80098fe:	9211      	str	r2, [sp, #68]	; 0x44
 8009900:	e5c6      	b.n	8009490 <_svfprintf_r+0x107c>
 8009902:	2b00      	cmp	r3, #0
 8009904:	f340 8098 	ble.w	8009a38 <_svfprintf_r+0x1624>
 8009908:	f1bb 0f00 	cmp.w	fp, #0
 800990c:	d16b      	bne.n	80099e6 <_svfprintf_r+0x15d2>
 800990e:	9a07      	ldr	r2, [sp, #28]
 8009910:	07d4      	lsls	r4, r2, #31
 8009912:	d468      	bmi.n	80099e6 <_svfprintf_r+0x15d2>
 8009914:	461a      	mov	r2, r3
 8009916:	920d      	str	r2, [sp, #52]	; 0x34
 8009918:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800991c:	e5b8      	b.n	8009490 <_svfprintf_r+0x107c>
 800991e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009920:	2b47      	cmp	r3, #71	; 0x47
 8009922:	f47f ad83 	bne.w	800942c <_svfprintf_r+0x1018>
 8009926:	9b07      	ldr	r3, [sp, #28]
 8009928:	07db      	lsls	r3, r3, #31
 800992a:	f53f aed1 	bmi.w	80096d0 <_svfprintf_r+0x12bc>
 800992e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009930:	1b9b      	subs	r3, r3, r6
 8009932:	9312      	str	r3, [sp, #72]	; 0x48
 8009934:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009936:	2b47      	cmp	r3, #71	; 0x47
 8009938:	f43f af13 	beq.w	8009762 <_svfprintf_r+0x134e>
 800993c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800993e:	e728      	b.n	8009792 <_svfprintf_r+0x137e>
 8009940:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8009944:	970e      	str	r7, [sp, #56]	; 0x38
 8009946:	9308      	str	r3, [sp, #32]
 8009948:	950d      	str	r5, [sp, #52]	; 0x34
 800994a:	4683      	mov	fp, r0
 800994c:	9013      	str	r0, [sp, #76]	; 0x4c
 800994e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 8009952:	f7fe bf25 	b.w	80087a0 <_svfprintf_r+0x38c>
 8009956:	9b07      	ldr	r3, [sp, #28]
 8009958:	07db      	lsls	r3, r3, #31
 800995a:	465f      	mov	r7, fp
 800995c:	d505      	bpl.n	800996a <_svfprintf_r+0x1556>
 800995e:	ae40      	add	r6, sp, #256	; 0x100
 8009960:	2330      	movs	r3, #48	; 0x30
 8009962:	f806 3d41 	strb.w	r3, [r6, #-65]!
 8009966:	f7fe bf11 	b.w	800878c <_svfprintf_r+0x378>
 800996a:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 800996e:	ae30      	add	r6, sp, #192	; 0xc0
 8009970:	f7fe bf0f 	b.w	8008792 <_svfprintf_r+0x37e>
 8009974:	aa23      	add	r2, sp, #140	; 0x8c
 8009976:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009978:	980a      	ldr	r0, [sp, #40]	; 0x28
 800997a:	f004 f997 	bl	800dcac <__ssprint_r>
 800997e:	2800      	cmp	r0, #0
 8009980:	f47e ae41 	bne.w	8008606 <_svfprintf_r+0x1f2>
 8009984:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8009986:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8009988:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800998a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800998e:	e62a      	b.n	80095e6 <_svfprintf_r+0x11d2>
 8009990:	46a0      	mov	r8, r4
 8009992:	2500      	movs	r5, #0
 8009994:	f7fe bd99 	b.w	80084ca <_svfprintf_r+0xb6>
 8009998:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800999a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800999c:	4413      	add	r3, r2
 800999e:	2267      	movs	r2, #103	; 0x67
 80099a0:	930d      	str	r3, [sp, #52]	; 0x34
 80099a2:	9211      	str	r2, [sp, #68]	; 0x44
 80099a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80099a8:	e572      	b.n	8009490 <_svfprintf_r+0x107c>
 80099aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099ac:	e552      	b.n	8009454 <_svfprintf_r+0x1040>
 80099ae:	3330      	adds	r3, #48	; 0x30
 80099b0:	2230      	movs	r2, #48	; 0x30
 80099b2:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 80099b6:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
 80099ba:	ab20      	add	r3, sp, #128	; 0x80
 80099bc:	e725      	b.n	800980a <_svfprintf_r+0x13f6>
 80099be:	9808      	ldr	r0, [sp, #32]
 80099c0:	4639      	mov	r1, r7
 80099c2:	2200      	movs	r2, #0
 80099c4:	2300      	movs	r3, #0
 80099c6:	f7f7 fbbb 	bl	8001140 <__aeabi_dcmpeq>
 80099ca:	2800      	cmp	r0, #0
 80099cc:	f47f ae8a 	bne.w	80096e4 <_svfprintf_r+0x12d0>
 80099d0:	f1c5 0501 	rsb	r5, r5, #1
 80099d4:	951d      	str	r5, [sp, #116]	; 0x74
 80099d6:	442c      	add	r4, r5
 80099d8:	e529      	b.n	800942e <_svfprintf_r+0x101a>
 80099da:	4e38      	ldr	r6, [pc, #224]	; (8009abc <_svfprintf_r+0x16a8>)
 80099dc:	4b38      	ldr	r3, [pc, #224]	; (8009ac0 <_svfprintf_r+0x16ac>)
 80099de:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 80099e2:	f7ff b82f 	b.w	8008a44 <_svfprintf_r+0x630>
 80099e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80099e8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80099ea:	189d      	adds	r5, r3, r2
 80099ec:	eb05 030b 	add.w	r3, r5, fp
 80099f0:	930d      	str	r3, [sp, #52]	; 0x34
 80099f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80099f6:	e54b      	b.n	8009490 <_svfprintf_r+0x107c>
 80099f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80099fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80099fc:	f1c3 0301 	rsb	r3, r3, #1
 8009a00:	441a      	add	r2, r3
 8009a02:	4613      	mov	r3, r2
 8009a04:	920d      	str	r2, [sp, #52]	; 0x34
 8009a06:	e777      	b.n	80098f8 <_svfprintf_r+0x14e4>
 8009a08:	9b07      	ldr	r3, [sp, #28]
 8009a0a:	f013 0301 	ands.w	r3, r3, #1
 8009a0e:	f47f af05 	bne.w	800981c <_svfprintf_r+0x1408>
 8009a12:	9313      	str	r3, [sp, #76]	; 0x4c
 8009a14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a16:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009a1a:	e539      	b.n	8009490 <_svfprintf_r+0x107c>
 8009a1c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009a1e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009a22:	6805      	ldr	r5, [r0, #0]
 8009a24:	3004      	adds	r0, #4
 8009a26:	2d00      	cmp	r5, #0
 8009a28:	900e      	str	r0, [sp, #56]	; 0x38
 8009a2a:	46a0      	mov	r8, r4
 8009a2c:	f6be ad4b 	bge.w	80084c6 <_svfprintf_r+0xb2>
 8009a30:	f04f 35ff 	mov.w	r5, #4294967295
 8009a34:	f7fe bd47 	b.w	80084c6 <_svfprintf_r+0xb2>
 8009a38:	f1bb 0f00 	cmp.w	fp, #0
 8009a3c:	d102      	bne.n	8009a44 <_svfprintf_r+0x1630>
 8009a3e:	9b07      	ldr	r3, [sp, #28]
 8009a40:	07d8      	lsls	r0, r3, #31
 8009a42:	d507      	bpl.n	8009a54 <_svfprintf_r+0x1640>
 8009a44:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009a46:	1c5d      	adds	r5, r3, #1
 8009a48:	eb05 030b 	add.w	r3, r5, fp
 8009a4c:	930d      	str	r3, [sp, #52]	; 0x34
 8009a4e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009a52:	e51d      	b.n	8009490 <_svfprintf_r+0x107c>
 8009a54:	2301      	movs	r3, #1
 8009a56:	930d      	str	r3, [sp, #52]	; 0x34
 8009a58:	e51a      	b.n	8009490 <_svfprintf_r+0x107c>
 8009a5a:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8009a5e:	f7ff b865 	b.w	8008b2c <_svfprintf_r+0x718>
 8009a62:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8009a66:	f7fe be51 	b.w	800870c <_svfprintf_r+0x2f8>
 8009a6a:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
 8009a6e:	e6cc      	b.n	800980a <_svfprintf_r+0x13f6>
 8009a70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a72:	230c      	movs	r3, #12
 8009a74:	6013      	str	r3, [r2, #0]
 8009a76:	f04f 30ff 	mov.w	r0, #4294967295
 8009a7a:	f7fe bdcd 	b.w	8008618 <_svfprintf_r+0x204>
 8009a7e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8009a82:	f7ff b950 	b.w	8008d26 <_svfprintf_r+0x912>
 8009a86:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8009a8a:	f7fe bfab 	b.w	80089e4 <_svfprintf_r+0x5d0>
 8009a8e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8009a92:	f7fe bdc9 	b.w	8008628 <_svfprintf_r+0x214>
 8009a96:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8009a9a:	f7ff b819 	b.w	8008ad0 <_svfprintf_r+0x6bc>
 8009a9e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8009aa2:	f7fe bfeb 	b.w	8008a7c <_svfprintf_r+0x668>
 8009aa6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8009aaa:	f7ff b8f3 	b.w	8008c94 <_svfprintf_r+0x880>
 8009aae:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8009ab2:	f7ff b8d2 	b.w	8008c5a <_svfprintf_r+0x846>
 8009ab6:	bf00      	nop
 8009ab8:	0800e7f4 	.word	0x0800e7f4
 8009abc:	0800e7c8 	.word	0x0800e7c8
 8009ac0:	0800e7c4 	.word	0x0800e7c4

08009ac4 <_vfprintf_r>:
 8009ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ac8:	b0c1      	sub	sp, #260	; 0x104
 8009aca:	461c      	mov	r4, r3
 8009acc:	9108      	str	r1, [sp, #32]
 8009ace:	4616      	mov	r6, r2
 8009ad0:	4605      	mov	r5, r0
 8009ad2:	900a      	str	r0, [sp, #40]	; 0x28
 8009ad4:	f002 fff4 	bl	800cac0 <_localeconv_r>
 8009ad8:	6803      	ldr	r3, [r0, #0]
 8009ada:	9317      	str	r3, [sp, #92]	; 0x5c
 8009adc:	4618      	mov	r0, r3
 8009ade:	f7f6 fe4f 	bl	8000780 <strlen>
 8009ae2:	940e      	str	r4, [sp, #56]	; 0x38
 8009ae4:	9016      	str	r0, [sp, #88]	; 0x58
 8009ae6:	b11d      	cbz	r5, 8009af0 <_vfprintf_r+0x2c>
 8009ae8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	f000 8122 	beq.w	8009d34 <_vfprintf_r+0x270>
 8009af0:	9808      	ldr	r0, [sp, #32]
 8009af2:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
 8009af6:	b293      	uxth	r3, r2
 8009af8:	0499      	lsls	r1, r3, #18
 8009afa:	d407      	bmi.n	8009b0c <_vfprintf_r+0x48>
 8009afc:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8009afe:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 8009b02:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8009b06:	8183      	strh	r3, [r0, #12]
 8009b08:	6641      	str	r1, [r0, #100]	; 0x64
 8009b0a:	b29b      	uxth	r3, r3
 8009b0c:	071a      	lsls	r2, r3, #28
 8009b0e:	f140 80dc 	bpl.w	8009cca <_vfprintf_r+0x206>
 8009b12:	9a08      	ldr	r2, [sp, #32]
 8009b14:	6912      	ldr	r2, [r2, #16]
 8009b16:	2a00      	cmp	r2, #0
 8009b18:	f000 80d7 	beq.w	8009cca <_vfprintf_r+0x206>
 8009b1c:	f003 031a 	and.w	r3, r3, #26
 8009b20:	2b0a      	cmp	r3, #10
 8009b22:	f000 80e0 	beq.w	8009ce6 <_vfprintf_r+0x222>
 8009b26:	2300      	movs	r3, #0
 8009b28:	461a      	mov	r2, r3
 8009b2a:	9312      	str	r3, [sp, #72]	; 0x48
 8009b2c:	9325      	str	r3, [sp, #148]	; 0x94
 8009b2e:	9324      	str	r3, [sp, #144]	; 0x90
 8009b30:	9319      	str	r3, [sp, #100]	; 0x64
 8009b32:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b34:	f8df a3fc 	ldr.w	sl, [pc, #1020]	; 8009f34 <_vfprintf_r+0x470>
 8009b38:	9214      	str	r2, [sp, #80]	; 0x50
 8009b3a:	ab30      	add	r3, sp, #192	; 0xc0
 8009b3c:	9323      	str	r3, [sp, #140]	; 0x8c
 8009b3e:	4699      	mov	r9, r3
 8009b40:	9215      	str	r2, [sp, #84]	; 0x54
 8009b42:	46b0      	mov	r8, r6
 8009b44:	f898 3000 	ldrb.w	r3, [r8]
 8009b48:	4644      	mov	r4, r8
 8009b4a:	b1eb      	cbz	r3, 8009b88 <_vfprintf_r+0xc4>
 8009b4c:	2b25      	cmp	r3, #37	; 0x25
 8009b4e:	d102      	bne.n	8009b56 <_vfprintf_r+0x92>
 8009b50:	e01a      	b.n	8009b88 <_vfprintf_r+0xc4>
 8009b52:	2b25      	cmp	r3, #37	; 0x25
 8009b54:	d003      	beq.n	8009b5e <_vfprintf_r+0x9a>
 8009b56:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d1f9      	bne.n	8009b52 <_vfprintf_r+0x8e>
 8009b5e:	ebc8 0504 	rsb	r5, r8, r4
 8009b62:	b18d      	cbz	r5, 8009b88 <_vfprintf_r+0xc4>
 8009b64:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009b66:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8009b68:	f8c9 8000 	str.w	r8, [r9]
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	442a      	add	r2, r5
 8009b70:	2b07      	cmp	r3, #7
 8009b72:	f8c9 5004 	str.w	r5, [r9, #4]
 8009b76:	9225      	str	r2, [sp, #148]	; 0x94
 8009b78:	9324      	str	r3, [sp, #144]	; 0x90
 8009b7a:	f300 80c2 	bgt.w	8009d02 <_vfprintf_r+0x23e>
 8009b7e:	f109 0908 	add.w	r9, r9, #8
 8009b82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b84:	442b      	add	r3, r5
 8009b86:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b88:	7823      	ldrb	r3, [r4, #0]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	f000 80c2 	beq.w	8009d14 <_vfprintf_r+0x250>
 8009b90:	2300      	movs	r3, #0
 8009b92:	461a      	mov	r2, r3
 8009b94:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8009b98:	4619      	mov	r1, r3
 8009b9a:	930c      	str	r3, [sp, #48]	; 0x30
 8009b9c:	9307      	str	r3, [sp, #28]
 8009b9e:	f04f 3bff 	mov.w	fp, #4294967295
 8009ba2:	7863      	ldrb	r3, [r4, #1]
 8009ba4:	f104 0801 	add.w	r8, r4, #1
 8009ba8:	465d      	mov	r5, fp
 8009baa:	f108 0801 	add.w	r8, r8, #1
 8009bae:	f1a3 0020 	sub.w	r0, r3, #32
 8009bb2:	2858      	cmp	r0, #88	; 0x58
 8009bb4:	f200 844b 	bhi.w	800a44e <_vfprintf_r+0x98a>
 8009bb8:	e8df f010 	tbh	[pc, r0, lsl #1]
 8009bbc:	04490401 	.word	0x04490401
 8009bc0:	040a0449 	.word	0x040a0449
 8009bc4:	04490449 	.word	0x04490449
 8009bc8:	04490449 	.word	0x04490449
 8009bcc:	04490449 	.word	0x04490449
 8009bd0:	043b035d 	.word	0x043b035d
 8009bd4:	005d0449 	.word	0x005d0449
 8009bd8:	044900fe 	.word	0x044900fe
 8009bdc:	036b011a 	.word	0x036b011a
 8009be0:	036b036b 	.word	0x036b036b
 8009be4:	036b036b 	.word	0x036b036b
 8009be8:	036b036b 	.word	0x036b036b
 8009bec:	036b036b 	.word	0x036b036b
 8009bf0:	04490449 	.word	0x04490449
 8009bf4:	04490449 	.word	0x04490449
 8009bf8:	04490449 	.word	0x04490449
 8009bfc:	04490449 	.word	0x04490449
 8009c00:	04490449 	.word	0x04490449
 8009c04:	0398037b 	.word	0x0398037b
 8009c08:	03980449 	.word	0x03980449
 8009c0c:	04490449 	.word	0x04490449
 8009c10:	04490449 	.word	0x04490449
 8009c14:	044903dd 	.word	0x044903dd
 8009c18:	01210449 	.word	0x01210449
 8009c1c:	04490449 	.word	0x04490449
 8009c20:	04490449 	.word	0x04490449
 8009c24:	014a0449 	.word	0x014a0449
 8009c28:	04490449 	.word	0x04490449
 8009c2c:	044902b0 	.word	0x044902b0
 8009c30:	04490449 	.word	0x04490449
 8009c34:	04490449 	.word	0x04490449
 8009c38:	04490449 	.word	0x04490449
 8009c3c:	04490449 	.word	0x04490449
 8009c40:	02f10449 	.word	0x02f10449
 8009c44:	03980304 	.word	0x03980304
 8009c48:	03980398 	.word	0x03980398
 8009c4c:	0304033a 	.word	0x0304033a
 8009c50:	04490449 	.word	0x04490449
 8009c54:	04490341 	.word	0x04490341
 8009c58:	00c0034b 	.word	0x00c0034b
 8009c5c:	04120064 	.word	0x04120064
 8009c60:	041a0449 	.word	0x041a0449
 8009c64:	03e40449 	.word	0x03e40449
 8009c68:	04490449 	.word	0x04490449
 8009c6c:	03ec      	.short	0x03ec
 8009c6e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009c70:	930e      	str	r3, [sp, #56]	; 0x38
 8009c72:	4240      	negs	r0, r0
 8009c74:	900c      	str	r0, [sp, #48]	; 0x30
 8009c76:	9b07      	ldr	r3, [sp, #28]
 8009c78:	f043 0304 	orr.w	r3, r3, #4
 8009c7c:	9307      	str	r3, [sp, #28]
 8009c7e:	f898 3000 	ldrb.w	r3, [r8]
 8009c82:	e792      	b.n	8009baa <_vfprintf_r+0xe6>
 8009c84:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009c86:	46ab      	mov	fp, r5
 8009c88:	2100      	movs	r1, #0
 8009c8a:	6804      	ldr	r4, [r0, #0]
 8009c8c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8009c90:	1d07      	adds	r7, r0, #4
 8009c92:	9807      	ldr	r0, [sp, #28]
 8009c94:	2330      	movs	r3, #48	; 0x30
 8009c96:	2278      	movs	r2, #120	; 0x78
 8009c98:	458b      	cmp	fp, r1
 8009c9a:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8009c9e:	f04f 0500 	mov.w	r5, #0
 8009ca2:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
 8009ca6:	f040 0302 	orr.w	r3, r0, #2
 8009caa:	f2c0 83ed 	blt.w	800a488 <_vfprintf_r+0x9c4>
 8009cae:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 8009cb2:	f043 0302 	orr.w	r3, r3, #2
 8009cb6:	9307      	str	r3, [sp, #28]
 8009cb8:	ea54 0305 	orrs.w	r3, r4, r5
 8009cbc:	970e      	str	r7, [sp, #56]	; 0x38
 8009cbe:	f000 83be 	beq.w	800a43e <_vfprintf_r+0x97a>
 8009cc2:	460f      	mov	r7, r1
 8009cc4:	9211      	str	r2, [sp, #68]	; 0x44
 8009cc6:	4899      	ldr	r0, [pc, #612]	; (8009f2c <_vfprintf_r+0x468>)
 8009cc8:	e259      	b.n	800a17e <_vfprintf_r+0x6ba>
 8009cca:	9908      	ldr	r1, [sp, #32]
 8009ccc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009cce:	f001 faaf 	bl	800b230 <__swsetup_r>
 8009cd2:	2800      	cmp	r0, #0
 8009cd4:	f041 8015 	bne.w	800ad02 <_vfprintf_r+0x123e>
 8009cd8:	9b08      	ldr	r3, [sp, #32]
 8009cda:	899b      	ldrh	r3, [r3, #12]
 8009cdc:	f003 031a 	and.w	r3, r3, #26
 8009ce0:	2b0a      	cmp	r3, #10
 8009ce2:	f47f af20 	bne.w	8009b26 <_vfprintf_r+0x62>
 8009ce6:	9908      	ldr	r1, [sp, #32]
 8009ce8:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	f6ff af1a 	blt.w	8009b26 <_vfprintf_r+0x62>
 8009cf2:	4623      	mov	r3, r4
 8009cf4:	4632      	mov	r2, r6
 8009cf6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009cf8:	f001 fa64 	bl	800b1c4 <__sbprintf>
 8009cfc:	b041      	add	sp, #260	; 0x104
 8009cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d02:	aa23      	add	r2, sp, #140	; 0x8c
 8009d04:	9908      	ldr	r1, [sp, #32]
 8009d06:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009d08:	f004 f88c 	bl	800de24 <__sprint_r>
 8009d0c:	b948      	cbnz	r0, 8009d22 <_vfprintf_r+0x25e>
 8009d0e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 8009d12:	e736      	b.n	8009b82 <_vfprintf_r+0xbe>
 8009d14:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8009d16:	b123      	cbz	r3, 8009d22 <_vfprintf_r+0x25e>
 8009d18:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009d1a:	9908      	ldr	r1, [sp, #32]
 8009d1c:	aa23      	add	r2, sp, #140	; 0x8c
 8009d1e:	f004 f881 	bl	800de24 <__sprint_r>
 8009d22:	9b08      	ldr	r3, [sp, #32]
 8009d24:	899b      	ldrh	r3, [r3, #12]
 8009d26:	0659      	lsls	r1, r3, #25
 8009d28:	f100 87eb 	bmi.w	800ad02 <_vfprintf_r+0x123e>
 8009d2c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009d2e:	b041      	add	sp, #260	; 0x104
 8009d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d34:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009d36:	f002 fbd7 	bl	800c4e8 <__sinit>
 8009d3a:	e6d9      	b.n	8009af0 <_vfprintf_r+0x2c>
 8009d3c:	9311      	str	r3, [sp, #68]	; 0x44
 8009d3e:	46ab      	mov	fp, r5
 8009d40:	2a00      	cmp	r2, #0
 8009d42:	f041 8221 	bne.w	800b188 <_vfprintf_r+0x16c4>
 8009d46:	9a07      	ldr	r2, [sp, #28]
 8009d48:	f012 0320 	ands.w	r3, r2, #32
 8009d4c:	d064      	beq.n	8009e18 <_vfprintf_r+0x354>
 8009d4e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8009d50:	3707      	adds	r7, #7
 8009d52:	f027 0307 	bic.w	r3, r7, #7
 8009d56:	2700      	movs	r7, #0
 8009d58:	f103 0108 	add.w	r1, r3, #8
 8009d5c:	45bb      	cmp	fp, r7
 8009d5e:	910e      	str	r1, [sp, #56]	; 0x38
 8009d60:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009d64:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 8009d68:	f2c0 873c 	blt.w	800abe4 <_vfprintf_r+0x1120>
 8009d6c:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8009d70:	9307      	str	r3, [sp, #28]
 8009d72:	ea54 0305 	orrs.w	r3, r4, r5
 8009d76:	f000 837f 	beq.w	800a478 <_vfprintf_r+0x9b4>
 8009d7a:	ae30      	add	r6, sp, #192	; 0xc0
 8009d7c:	08e2      	lsrs	r2, r4, #3
 8009d7e:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 8009d82:	08e9      	lsrs	r1, r5, #3
 8009d84:	f004 0307 	and.w	r3, r4, #7
 8009d88:	460d      	mov	r5, r1
 8009d8a:	4614      	mov	r4, r2
 8009d8c:	3330      	adds	r3, #48	; 0x30
 8009d8e:	ea54 0205 	orrs.w	r2, r4, r5
 8009d92:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8009d96:	d1f1      	bne.n	8009d7c <_vfprintf_r+0x2b8>
 8009d98:	9a07      	ldr	r2, [sp, #28]
 8009d9a:	07d2      	lsls	r2, r2, #31
 8009d9c:	f140 8096 	bpl.w	8009ecc <_vfprintf_r+0x408>
 8009da0:	2b30      	cmp	r3, #48	; 0x30
 8009da2:	f000 8093 	beq.w	8009ecc <_vfprintf_r+0x408>
 8009da6:	2230      	movs	r2, #48	; 0x30
 8009da8:	1e73      	subs	r3, r6, #1
 8009daa:	f806 2c01 	strb.w	r2, [r6, #-1]
 8009dae:	aa30      	add	r2, sp, #192	; 0xc0
 8009db0:	1ad2      	subs	r2, r2, r3
 8009db2:	920d      	str	r2, [sp, #52]	; 0x34
 8009db4:	461e      	mov	r6, r3
 8009db6:	e08c      	b.n	8009ed2 <_vfprintf_r+0x40e>
 8009db8:	f898 3000 	ldrb.w	r3, [r8]
 8009dbc:	2b2a      	cmp	r3, #42	; 0x2a
 8009dbe:	f108 0401 	add.w	r4, r8, #1
 8009dc2:	f001 81bf 	beq.w	800b144 <_vfprintf_r+0x1680>
 8009dc6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8009dca:	2809      	cmp	r0, #9
 8009dcc:	bf98      	it	ls
 8009dce:	2500      	movls	r5, #0
 8009dd0:	f201 814e 	bhi.w	800b070 <_vfprintf_r+0x15ac>
 8009dd4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009dd8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8009ddc:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8009de0:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8009de4:	2809      	cmp	r0, #9
 8009de6:	d9f5      	bls.n	8009dd4 <_vfprintf_r+0x310>
 8009de8:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8009dec:	46a0      	mov	r8, r4
 8009dee:	e6de      	b.n	8009bae <_vfprintf_r+0xea>
 8009df0:	9b07      	ldr	r3, [sp, #28]
 8009df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009df6:	9307      	str	r3, [sp, #28]
 8009df8:	f898 3000 	ldrb.w	r3, [r8]
 8009dfc:	e6d5      	b.n	8009baa <_vfprintf_r+0xe6>
 8009dfe:	9311      	str	r3, [sp, #68]	; 0x44
 8009e00:	46ab      	mov	fp, r5
 8009e02:	2a00      	cmp	r2, #0
 8009e04:	f041 81c4 	bne.w	800b190 <_vfprintf_r+0x16cc>
 8009e08:	9b07      	ldr	r3, [sp, #28]
 8009e0a:	f043 0310 	orr.w	r3, r3, #16
 8009e0e:	9307      	str	r3, [sp, #28]
 8009e10:	9a07      	ldr	r2, [sp, #28]
 8009e12:	f012 0320 	ands.w	r3, r2, #32
 8009e16:	d19a      	bne.n	8009d4e <_vfprintf_r+0x28a>
 8009e18:	9907      	ldr	r1, [sp, #28]
 8009e1a:	f011 0210 	ands.w	r2, r1, #16
 8009e1e:	f000 86d0 	beq.w	800abc2 <_vfprintf_r+0x10fe>
 8009e22:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009e24:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8009e28:	f1bb 0f00 	cmp.w	fp, #0
 8009e2c:	6804      	ldr	r4, [r0, #0]
 8009e2e:	f100 0704 	add.w	r7, r0, #4
 8009e32:	f04f 0500 	mov.w	r5, #0
 8009e36:	f2c0 86d4 	blt.w	800abe2 <_vfprintf_r+0x111e>
 8009e3a:	460a      	mov	r2, r1
 8009e3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009e40:	9207      	str	r2, [sp, #28]
 8009e42:	ea54 0205 	orrs.w	r2, r4, r5
 8009e46:	970e      	str	r7, [sp, #56]	; 0x38
 8009e48:	f000 8316 	beq.w	800a478 <_vfprintf_r+0x9b4>
 8009e4c:	461f      	mov	r7, r3
 8009e4e:	e794      	b.n	8009d7a <_vfprintf_r+0x2b6>
 8009e50:	9311      	str	r3, [sp, #68]	; 0x44
 8009e52:	46ab      	mov	fp, r5
 8009e54:	2a00      	cmp	r2, #0
 8009e56:	f041 818f 	bne.w	800b178 <_vfprintf_r+0x16b4>
 8009e5a:	9b07      	ldr	r3, [sp, #28]
 8009e5c:	f043 0310 	orr.w	r3, r3, #16
 8009e60:	9307      	str	r3, [sp, #28]
 8009e62:	9a07      	ldr	r2, [sp, #28]
 8009e64:	f012 0320 	ands.w	r3, r2, #32
 8009e68:	f000 84f8 	beq.w	800a85c <_vfprintf_r+0xd98>
 8009e6c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8009e6e:	3707      	adds	r7, #7
 8009e70:	f027 0307 	bic.w	r3, r7, #7
 8009e74:	2700      	movs	r7, #0
 8009e76:	f103 0108 	add.w	r1, r3, #8
 8009e7a:	45bb      	cmp	fp, r7
 8009e7c:	910e      	str	r1, [sp, #56]	; 0x38
 8009e7e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009e82:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 8009e86:	f2c0 8516 	blt.w	800a8b6 <_vfprintf_r+0xdf2>
 8009e8a:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8009e8e:	9307      	str	r3, [sp, #28]
 8009e90:	ea54 0305 	orrs.w	r3, r4, r5
 8009e94:	f000 81bc 	beq.w	800a210 <_vfprintf_r+0x74c>
 8009e98:	2d00      	cmp	r5, #0
 8009e9a:	bf08      	it	eq
 8009e9c:	2c0a      	cmpeq	r4, #10
 8009e9e:	f0c0 850e 	bcc.w	800a8be <_vfprintf_r+0xdfa>
 8009ea2:	ae30      	add	r6, sp, #192	; 0xc0
 8009ea4:	4620      	mov	r0, r4
 8009ea6:	4629      	mov	r1, r5
 8009ea8:	220a      	movs	r2, #10
 8009eaa:	2300      	movs	r3, #0
 8009eac:	f7f6 fa2e 	bl	800030c <__aeabi_uldivmod>
 8009eb0:	3230      	adds	r2, #48	; 0x30
 8009eb2:	f806 2d01 	strb.w	r2, [r6, #-1]!
 8009eb6:	4620      	mov	r0, r4
 8009eb8:	4629      	mov	r1, r5
 8009eba:	2300      	movs	r3, #0
 8009ebc:	220a      	movs	r2, #10
 8009ebe:	f7f6 fa25 	bl	800030c <__aeabi_uldivmod>
 8009ec2:	4604      	mov	r4, r0
 8009ec4:	460d      	mov	r5, r1
 8009ec6:	ea54 0305 	orrs.w	r3, r4, r5
 8009eca:	d1eb      	bne.n	8009ea4 <_vfprintf_r+0x3e0>
 8009ecc:	ab30      	add	r3, sp, #192	; 0xc0
 8009ece:	1b9b      	subs	r3, r3, r6
 8009ed0:	930d      	str	r3, [sp, #52]	; 0x34
 8009ed2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ed4:	455b      	cmp	r3, fp
 8009ed6:	bfb8      	it	lt
 8009ed8:	465b      	movlt	r3, fp
 8009eda:	9309      	str	r3, [sp, #36]	; 0x24
 8009edc:	2300      	movs	r3, #0
 8009ede:	9313      	str	r3, [sp, #76]	; 0x4c
 8009ee0:	b117      	cbz	r7, 8009ee8 <_vfprintf_r+0x424>
 8009ee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ee4:	3301      	adds	r3, #1
 8009ee6:	9309      	str	r3, [sp, #36]	; 0x24
 8009ee8:	9b07      	ldr	r3, [sp, #28]
 8009eea:	f013 0302 	ands.w	r3, r3, #2
 8009eee:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ef0:	d002      	beq.n	8009ef8 <_vfprintf_r+0x434>
 8009ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ef4:	3302      	adds	r3, #2
 8009ef6:	9309      	str	r3, [sp, #36]	; 0x24
 8009ef8:	9b07      	ldr	r3, [sp, #28]
 8009efa:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 8009efe:	9310      	str	r3, [sp, #64]	; 0x40
 8009f00:	f040 82cf 	bne.w	800a4a2 <_vfprintf_r+0x9de>
 8009f04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f08:	1a9d      	subs	r5, r3, r2
 8009f0a:	2d00      	cmp	r5, #0
 8009f0c:	f340 82c9 	ble.w	800a4a2 <_vfprintf_r+0x9de>
 8009f10:	2d10      	cmp	r5, #16
 8009f12:	9925      	ldr	r1, [sp, #148]	; 0x94
 8009f14:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009f16:	4f06      	ldr	r7, [pc, #24]	; (8009f30 <_vfprintf_r+0x46c>)
 8009f18:	dd2e      	ble.n	8009f78 <_vfprintf_r+0x4b4>
 8009f1a:	9618      	str	r6, [sp, #96]	; 0x60
 8009f1c:	4648      	mov	r0, r9
 8009f1e:	2410      	movs	r4, #16
 8009f20:	46b9      	mov	r9, r7
 8009f22:	9e08      	ldr	r6, [sp, #32]
 8009f24:	462f      	mov	r7, r5
 8009f26:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009f28:	e00b      	b.n	8009f42 <_vfprintf_r+0x47e>
 8009f2a:	bf00      	nop
 8009f2c:	0800e7e0 	.word	0x0800e7e0
 8009f30:	0800e820 	.word	0x0800e820
 8009f34:	0800e810 	.word	0x0800e810
 8009f38:	3f10      	subs	r7, #16
 8009f3a:	2f10      	cmp	r7, #16
 8009f3c:	f100 0008 	add.w	r0, r0, #8
 8009f40:	dd16      	ble.n	8009f70 <_vfprintf_r+0x4ac>
 8009f42:	3201      	adds	r2, #1
 8009f44:	4bb7      	ldr	r3, [pc, #732]	; (800a224 <_vfprintf_r+0x760>)
 8009f46:	9224      	str	r2, [sp, #144]	; 0x90
 8009f48:	3110      	adds	r1, #16
 8009f4a:	2a07      	cmp	r2, #7
 8009f4c:	9125      	str	r1, [sp, #148]	; 0x94
 8009f4e:	e880 0018 	stmia.w	r0, {r3, r4}
 8009f52:	ddf1      	ble.n	8009f38 <_vfprintf_r+0x474>
 8009f54:	aa23      	add	r2, sp, #140	; 0x8c
 8009f56:	4631      	mov	r1, r6
 8009f58:	4628      	mov	r0, r5
 8009f5a:	f003 ff63 	bl	800de24 <__sprint_r>
 8009f5e:	2800      	cmp	r0, #0
 8009f60:	f47f aedf 	bne.w	8009d22 <_vfprintf_r+0x25e>
 8009f64:	3f10      	subs	r7, #16
 8009f66:	2f10      	cmp	r7, #16
 8009f68:	9925      	ldr	r1, [sp, #148]	; 0x94
 8009f6a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009f6c:	a830      	add	r0, sp, #192	; 0xc0
 8009f6e:	dce8      	bgt.n	8009f42 <_vfprintf_r+0x47e>
 8009f70:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8009f72:	463d      	mov	r5, r7
 8009f74:	464f      	mov	r7, r9
 8009f76:	4681      	mov	r9, r0
 8009f78:	3201      	adds	r2, #1
 8009f7a:	186c      	adds	r4, r5, r1
 8009f7c:	2a07      	cmp	r2, #7
 8009f7e:	9425      	str	r4, [sp, #148]	; 0x94
 8009f80:	9224      	str	r2, [sp, #144]	; 0x90
 8009f82:	f8c9 7000 	str.w	r7, [r9]
 8009f86:	f8c9 5004 	str.w	r5, [r9, #4]
 8009f8a:	f300 841f 	bgt.w	800a7cc <_vfprintf_r+0xd08>
 8009f8e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 8009f92:	f109 0908 	add.w	r9, r9, #8
 8009f96:	b177      	cbz	r7, 8009fb6 <_vfprintf_r+0x4f2>
 8009f98:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	3401      	adds	r4, #1
 8009f9e:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	2b07      	cmp	r3, #7
 8009fa6:	9425      	str	r4, [sp, #148]	; 0x94
 8009fa8:	9324      	str	r3, [sp, #144]	; 0x90
 8009faa:	e889 0006 	stmia.w	r9, {r1, r2}
 8009fae:	f300 8397 	bgt.w	800a6e0 <_vfprintf_r+0xc1c>
 8009fb2:	f109 0908 	add.w	r9, r9, #8
 8009fb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009fb8:	b16b      	cbz	r3, 8009fd6 <_vfprintf_r+0x512>
 8009fba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009fbc:	3301      	adds	r3, #1
 8009fbe:	3402      	adds	r4, #2
 8009fc0:	a91c      	add	r1, sp, #112	; 0x70
 8009fc2:	2202      	movs	r2, #2
 8009fc4:	2b07      	cmp	r3, #7
 8009fc6:	9425      	str	r4, [sp, #148]	; 0x94
 8009fc8:	9324      	str	r3, [sp, #144]	; 0x90
 8009fca:	e889 0006 	stmia.w	r9, {r1, r2}
 8009fce:	f300 8393 	bgt.w	800a6f8 <_vfprintf_r+0xc34>
 8009fd2:	f109 0908 	add.w	r9, r9, #8
 8009fd6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009fd8:	2b80      	cmp	r3, #128	; 0x80
 8009fda:	f000 82c6 	beq.w	800a56a <_vfprintf_r+0xaa6>
 8009fde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fe0:	ebc3 070b 	rsb	r7, r3, fp
 8009fe4:	2f00      	cmp	r7, #0
 8009fe6:	dd33      	ble.n	800a050 <_vfprintf_r+0x58c>
 8009fe8:	4a8f      	ldr	r2, [pc, #572]	; (800a228 <_vfprintf_r+0x764>)
 8009fea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009fec:	920f      	str	r2, [sp, #60]	; 0x3c
 8009fee:	2f10      	cmp	r7, #16
 8009ff0:	dd22      	ble.n	800a038 <_vfprintf_r+0x574>
 8009ff2:	4622      	mov	r2, r4
 8009ff4:	f04f 0b10 	mov.w	fp, #16
 8009ff8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009ffa:	9c08      	ldr	r4, [sp, #32]
 8009ffc:	e004      	b.n	800a008 <_vfprintf_r+0x544>
 8009ffe:	3f10      	subs	r7, #16
 800a000:	2f10      	cmp	r7, #16
 800a002:	f109 0908 	add.w	r9, r9, #8
 800a006:	dd16      	ble.n	800a036 <_vfprintf_r+0x572>
 800a008:	3301      	adds	r3, #1
 800a00a:	3210      	adds	r2, #16
 800a00c:	2b07      	cmp	r3, #7
 800a00e:	9225      	str	r2, [sp, #148]	; 0x94
 800a010:	9324      	str	r3, [sp, #144]	; 0x90
 800a012:	e889 0c00 	stmia.w	r9, {sl, fp}
 800a016:	ddf2      	ble.n	8009ffe <_vfprintf_r+0x53a>
 800a018:	aa23      	add	r2, sp, #140	; 0x8c
 800a01a:	4621      	mov	r1, r4
 800a01c:	4628      	mov	r0, r5
 800a01e:	f003 ff01 	bl	800de24 <__sprint_r>
 800a022:	2800      	cmp	r0, #0
 800a024:	f47f ae7d 	bne.w	8009d22 <_vfprintf_r+0x25e>
 800a028:	3f10      	subs	r7, #16
 800a02a:	2f10      	cmp	r7, #16
 800a02c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800a02e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a030:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a034:	dce8      	bgt.n	800a008 <_vfprintf_r+0x544>
 800a036:	4614      	mov	r4, r2
 800a038:	3301      	adds	r3, #1
 800a03a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a03c:	9324      	str	r3, [sp, #144]	; 0x90
 800a03e:	443c      	add	r4, r7
 800a040:	2b07      	cmp	r3, #7
 800a042:	9425      	str	r4, [sp, #148]	; 0x94
 800a044:	e889 0084 	stmia.w	r9, {r2, r7}
 800a048:	f300 833e 	bgt.w	800a6c8 <_vfprintf_r+0xc04>
 800a04c:	f109 0908 	add.w	r9, r9, #8
 800a050:	9b07      	ldr	r3, [sp, #28]
 800a052:	05dd      	lsls	r5, r3, #23
 800a054:	f100 8227 	bmi.w	800a4a6 <_vfprintf_r+0x9e2>
 800a058:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a05a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a05c:	f8c9 6000 	str.w	r6, [r9]
 800a060:	3301      	adds	r3, #1
 800a062:	440c      	add	r4, r1
 800a064:	2b07      	cmp	r3, #7
 800a066:	9425      	str	r4, [sp, #148]	; 0x94
 800a068:	f8c9 1004 	str.w	r1, [r9, #4]
 800a06c:	9324      	str	r3, [sp, #144]	; 0x90
 800a06e:	f300 8315 	bgt.w	800a69c <_vfprintf_r+0xbd8>
 800a072:	f109 0908 	add.w	r9, r9, #8
 800a076:	9b07      	ldr	r3, [sp, #28]
 800a078:	0758      	lsls	r0, r3, #29
 800a07a:	d53f      	bpl.n	800a0fc <_vfprintf_r+0x638>
 800a07c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a07e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a080:	1a9d      	subs	r5, r3, r2
 800a082:	2d00      	cmp	r5, #0
 800a084:	dd3a      	ble.n	800a0fc <_vfprintf_r+0x638>
 800a086:	2d10      	cmp	r5, #16
 800a088:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a08a:	4f66      	ldr	r7, [pc, #408]	; (800a224 <_vfprintf_r+0x760>)
 800a08c:	dd23      	ble.n	800a0d6 <_vfprintf_r+0x612>
 800a08e:	4622      	mov	r2, r4
 800a090:	2610      	movs	r6, #16
 800a092:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800a096:	9c08      	ldr	r4, [sp, #32]
 800a098:	e004      	b.n	800a0a4 <_vfprintf_r+0x5e0>
 800a09a:	3d10      	subs	r5, #16
 800a09c:	2d10      	cmp	r5, #16
 800a09e:	f109 0908 	add.w	r9, r9, #8
 800a0a2:	dd17      	ble.n	800a0d4 <_vfprintf_r+0x610>
 800a0a4:	3301      	adds	r3, #1
 800a0a6:	495f      	ldr	r1, [pc, #380]	; (800a224 <_vfprintf_r+0x760>)
 800a0a8:	9324      	str	r3, [sp, #144]	; 0x90
 800a0aa:	3210      	adds	r2, #16
 800a0ac:	2b07      	cmp	r3, #7
 800a0ae:	9225      	str	r2, [sp, #148]	; 0x94
 800a0b0:	e889 0042 	stmia.w	r9, {r1, r6}
 800a0b4:	ddf1      	ble.n	800a09a <_vfprintf_r+0x5d6>
 800a0b6:	aa23      	add	r2, sp, #140	; 0x8c
 800a0b8:	4621      	mov	r1, r4
 800a0ba:	4658      	mov	r0, fp
 800a0bc:	f003 feb2 	bl	800de24 <__sprint_r>
 800a0c0:	2800      	cmp	r0, #0
 800a0c2:	f47f ae2e 	bne.w	8009d22 <_vfprintf_r+0x25e>
 800a0c6:	3d10      	subs	r5, #16
 800a0c8:	2d10      	cmp	r5, #16
 800a0ca:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800a0cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a0ce:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a0d2:	dce7      	bgt.n	800a0a4 <_vfprintf_r+0x5e0>
 800a0d4:	4614      	mov	r4, r2
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	442c      	add	r4, r5
 800a0da:	2b07      	cmp	r3, #7
 800a0dc:	9425      	str	r4, [sp, #148]	; 0x94
 800a0de:	9324      	str	r3, [sp, #144]	; 0x90
 800a0e0:	f8c9 7000 	str.w	r7, [r9]
 800a0e4:	f8c9 5004 	str.w	r5, [r9, #4]
 800a0e8:	dd08      	ble.n	800a0fc <_vfprintf_r+0x638>
 800a0ea:	aa23      	add	r2, sp, #140	; 0x8c
 800a0ec:	9908      	ldr	r1, [sp, #32]
 800a0ee:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a0f0:	f003 fe98 	bl	800de24 <__sprint_r>
 800a0f4:	2800      	cmp	r0, #0
 800a0f6:	f47f ae14 	bne.w	8009d22 <_vfprintf_r+0x25e>
 800a0fa:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800a0fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a100:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a102:	428a      	cmp	r2, r1
 800a104:	bfac      	ite	ge
 800a106:	189b      	addge	r3, r3, r2
 800a108:	185b      	addlt	r3, r3, r1
 800a10a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a10c:	2c00      	cmp	r4, #0
 800a10e:	f040 82d1 	bne.w	800a6b4 <_vfprintf_r+0xbf0>
 800a112:	2300      	movs	r3, #0
 800a114:	9324      	str	r3, [sp, #144]	; 0x90
 800a116:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a11a:	e513      	b.n	8009b44 <_vfprintf_r+0x80>
 800a11c:	9311      	str	r3, [sp, #68]	; 0x44
 800a11e:	46ab      	mov	fp, r5
 800a120:	2a00      	cmp	r2, #0
 800a122:	f041 8025 	bne.w	800b170 <_vfprintf_r+0x16ac>
 800a126:	9b07      	ldr	r3, [sp, #28]
 800a128:	4840      	ldr	r0, [pc, #256]	; (800a22c <_vfprintf_r+0x768>)
 800a12a:	069c      	lsls	r4, r3, #26
 800a12c:	f140 813c 	bpl.w	800a3a8 <_vfprintf_r+0x8e4>
 800a130:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800a132:	3707      	adds	r7, #7
 800a134:	f027 0307 	bic.w	r3, r7, #7
 800a138:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a13c:	f103 0208 	add.w	r2, r3, #8
 800a140:	920e      	str	r2, [sp, #56]	; 0x38
 800a142:	9a07      	ldr	r2, [sp, #28]
 800a144:	f012 0701 	ands.w	r7, r2, #1
 800a148:	f000 82e2 	beq.w	800a710 <_vfprintf_r+0xc4c>
 800a14c:	ea54 0305 	orrs.w	r3, r4, r5
 800a150:	f000 856b 	beq.w	800ac2a <_vfprintf_r+0x1166>
 800a154:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800a158:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
 800a15c:	2700      	movs	r7, #0
 800a15e:	9a07      	ldr	r2, [sp, #28]
 800a160:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800a164:	2330      	movs	r3, #48	; 0x30
 800a166:	45bb      	cmp	fp, r7
 800a168:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 800a16c:	f042 0302 	orr.w	r3, r2, #2
 800a170:	f2c0 872d 	blt.w	800afce <_vfprintf_r+0x150a>
 800a174:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 800a178:	f043 0302 	orr.w	r3, r3, #2
 800a17c:	9307      	str	r3, [sp, #28]
 800a17e:	ae30      	add	r6, sp, #192	; 0xc0
 800a180:	0923      	lsrs	r3, r4, #4
 800a182:	f004 010f 	and.w	r1, r4, #15
 800a186:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 800a18a:	092a      	lsrs	r2, r5, #4
 800a18c:	461c      	mov	r4, r3
 800a18e:	4615      	mov	r5, r2
 800a190:	5c43      	ldrb	r3, [r0, r1]
 800a192:	f806 3d01 	strb.w	r3, [r6, #-1]!
 800a196:	ea54 0305 	orrs.w	r3, r4, r5
 800a19a:	d1f1      	bne.n	800a180 <_vfprintf_r+0x6bc>
 800a19c:	e696      	b.n	8009ecc <_vfprintf_r+0x408>
 800a19e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a1a0:	9311      	str	r3, [sp, #68]	; 0x44
 800a1a2:	680a      	ldr	r2, [r1, #0]
 800a1a4:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	460a      	mov	r2, r1
 800a1ac:	461f      	mov	r7, r3
 800a1ae:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800a1b2:	3204      	adds	r2, #4
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	9309      	str	r3, [sp, #36]	; 0x24
 800a1b8:	46bb      	mov	fp, r7
 800a1ba:	9713      	str	r7, [sp, #76]	; 0x4c
 800a1bc:	920e      	str	r2, [sp, #56]	; 0x38
 800a1be:	930d      	str	r3, [sp, #52]	; 0x34
 800a1c0:	ae26      	add	r6, sp, #152	; 0x98
 800a1c2:	e691      	b.n	8009ee8 <_vfprintf_r+0x424>
 800a1c4:	9311      	str	r3, [sp, #68]	; 0x44
 800a1c6:	46ab      	mov	fp, r5
 800a1c8:	2a00      	cmp	r2, #0
 800a1ca:	f040 87cd 	bne.w	800b168 <_vfprintf_r+0x16a4>
 800a1ce:	9b07      	ldr	r3, [sp, #28]
 800a1d0:	069f      	lsls	r7, r3, #26
 800a1d2:	d57a      	bpl.n	800a2ca <_vfprintf_r+0x806>
 800a1d4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800a1d6:	3707      	adds	r7, #7
 800a1d8:	f027 0707 	bic.w	r7, r7, #7
 800a1dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1e0:	f107 0108 	add.w	r1, r7, #8
 800a1e4:	910e      	str	r1, [sp, #56]	; 0x38
 800a1e6:	4614      	mov	r4, r2
 800a1e8:	461d      	mov	r5, r3
 800a1ea:	2a00      	cmp	r2, #0
 800a1ec:	f173 0300 	sbcs.w	r3, r3, #0
 800a1f0:	f2c0 8438 	blt.w	800aa64 <_vfprintf_r+0xfa0>
 800a1f4:	f1bb 0f00 	cmp.w	fp, #0
 800a1f8:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800a1fc:	f2c0 835b 	blt.w	800a8b6 <_vfprintf_r+0xdf2>
 800a200:	9b07      	ldr	r3, [sp, #28]
 800a202:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a206:	9307      	str	r3, [sp, #28]
 800a208:	ea54 0305 	orrs.w	r3, r4, r5
 800a20c:	f47f ae44 	bne.w	8009e98 <_vfprintf_r+0x3d4>
 800a210:	f1bb 0f00 	cmp.w	fp, #0
 800a214:	f040 8414 	bne.w	800aa40 <_vfprintf_r+0xf7c>
 800a218:	f04f 0b00 	mov.w	fp, #0
 800a21c:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 800a220:	ae30      	add	r6, sp, #192	; 0xc0
 800a222:	e656      	b.n	8009ed2 <_vfprintf_r+0x40e>
 800a224:	0800e820 	.word	0x0800e820
 800a228:	0800e810 	.word	0x0800e810
 800a22c:	0800e7cc 	.word	0x0800e7cc
 800a230:	9b07      	ldr	r3, [sp, #28]
 800a232:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a236:	9307      	str	r3, [sp, #28]
 800a238:	f898 3000 	ldrb.w	r3, [r8]
 800a23c:	e4b5      	b.n	8009baa <_vfprintf_r+0xe6>
 800a23e:	f898 3000 	ldrb.w	r3, [r8]
 800a242:	2b6c      	cmp	r3, #108	; 0x6c
 800a244:	f000 85c8 	beq.w	800add8 <_vfprintf_r+0x1314>
 800a248:	9807      	ldr	r0, [sp, #28]
 800a24a:	f040 0010 	orr.w	r0, r0, #16
 800a24e:	9007      	str	r0, [sp, #28]
 800a250:	e4ab      	b.n	8009baa <_vfprintf_r+0xe6>
 800a252:	2a00      	cmp	r2, #0
 800a254:	f040 8784 	bne.w	800b160 <_vfprintf_r+0x169c>
 800a258:	9b07      	ldr	r3, [sp, #28]
 800a25a:	069f      	lsls	r7, r3, #26
 800a25c:	f140 8413 	bpl.w	800aa86 <_vfprintf_r+0xfc2>
 800a260:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a262:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a264:	6813      	ldr	r3, [r2, #0]
 800a266:	17cd      	asrs	r5, r1, #31
 800a268:	4608      	mov	r0, r1
 800a26a:	3204      	adds	r2, #4
 800a26c:	4629      	mov	r1, r5
 800a26e:	920e      	str	r2, [sp, #56]	; 0x38
 800a270:	e9c3 0100 	strd	r0, r1, [r3]
 800a274:	e466      	b.n	8009b44 <_vfprintf_r+0x80>
 800a276:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800a278:	6823      	ldr	r3, [r4, #0]
 800a27a:	930c      	str	r3, [sp, #48]	; 0x30
 800a27c:	4618      	mov	r0, r3
 800a27e:	2800      	cmp	r0, #0
 800a280:	4623      	mov	r3, r4
 800a282:	f103 0304 	add.w	r3, r3, #4
 800a286:	f6ff acf2 	blt.w	8009c6e <_vfprintf_r+0x1aa>
 800a28a:	930e      	str	r3, [sp, #56]	; 0x38
 800a28c:	f898 3000 	ldrb.w	r3, [r8]
 800a290:	e48b      	b.n	8009baa <_vfprintf_r+0xe6>
 800a292:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800a296:	2300      	movs	r3, #0
 800a298:	461c      	mov	r4, r3
 800a29a:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a29e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800a2a2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800a2a6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800a2aa:	2809      	cmp	r0, #9
 800a2ac:	d9f5      	bls.n	800a29a <_vfprintf_r+0x7d6>
 800a2ae:	940c      	str	r4, [sp, #48]	; 0x30
 800a2b0:	e47d      	b.n	8009bae <_vfprintf_r+0xea>
 800a2b2:	9311      	str	r3, [sp, #68]	; 0x44
 800a2b4:	46ab      	mov	fp, r5
 800a2b6:	2a00      	cmp	r2, #0
 800a2b8:	f040 8771 	bne.w	800b19e <_vfprintf_r+0x16da>
 800a2bc:	9b07      	ldr	r3, [sp, #28]
 800a2be:	f043 0310 	orr.w	r3, r3, #16
 800a2c2:	9307      	str	r3, [sp, #28]
 800a2c4:	9b07      	ldr	r3, [sp, #28]
 800a2c6:	069f      	lsls	r7, r3, #26
 800a2c8:	d484      	bmi.n	800a1d4 <_vfprintf_r+0x710>
 800a2ca:	9b07      	ldr	r3, [sp, #28]
 800a2cc:	06de      	lsls	r6, r3, #27
 800a2ce:	f100 82bc 	bmi.w	800a84a <_vfprintf_r+0xd86>
 800a2d2:	9b07      	ldr	r3, [sp, #28]
 800a2d4:	065d      	lsls	r5, r3, #25
 800a2d6:	f140 82b8 	bpl.w	800a84a <_vfprintf_r+0xd86>
 800a2da:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a2dc:	f9b1 4000 	ldrsh.w	r4, [r1]
 800a2e0:	3104      	adds	r1, #4
 800a2e2:	17e5      	asrs	r5, r4, #31
 800a2e4:	4622      	mov	r2, r4
 800a2e6:	462b      	mov	r3, r5
 800a2e8:	910e      	str	r1, [sp, #56]	; 0x38
 800a2ea:	e77e      	b.n	800a1ea <_vfprintf_r+0x726>
 800a2ec:	9311      	str	r3, [sp, #68]	; 0x44
 800a2ee:	46ab      	mov	fp, r5
 800a2f0:	2a00      	cmp	r2, #0
 800a2f2:	f040 8758 	bne.w	800b1a6 <_vfprintf_r+0x16e2>
 800a2f6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800a2f8:	3707      	adds	r7, #7
 800a2fa:	f027 0307 	bic.w	r3, r7, #7
 800a2fe:	f103 0208 	add.w	r2, r3, #8
 800a302:	920e      	str	r2, [sp, #56]	; 0x38
 800a304:	681a      	ldr	r2, [r3, #0]
 800a306:	9214      	str	r2, [sp, #80]	; 0x50
 800a308:	685b      	ldr	r3, [r3, #4]
 800a30a:	9315      	str	r3, [sp, #84]	; 0x54
 800a30c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a30e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800a310:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800a314:	4628      	mov	r0, r5
 800a316:	4621      	mov	r1, r4
 800a318:	f04f 32ff 	mov.w	r2, #4294967295
 800a31c:	4bb5      	ldr	r3, [pc, #724]	; (800a5f4 <_vfprintf_r+0xb30>)
 800a31e:	f7f6 ff41 	bl	80011a4 <__aeabi_dcmpun>
 800a322:	2800      	cmp	r0, #0
 800a324:	f040 83c6 	bne.w	800aab4 <_vfprintf_r+0xff0>
 800a328:	4628      	mov	r0, r5
 800a32a:	4621      	mov	r1, r4
 800a32c:	f04f 32ff 	mov.w	r2, #4294967295
 800a330:	4bb0      	ldr	r3, [pc, #704]	; (800a5f4 <_vfprintf_r+0xb30>)
 800a332:	f7f6 ff19 	bl	8001168 <__aeabi_dcmple>
 800a336:	2800      	cmp	r0, #0
 800a338:	f040 83bc 	bne.w	800aab4 <_vfprintf_r+0xff0>
 800a33c:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a33e:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a340:	2200      	movs	r2, #0
 800a342:	2300      	movs	r3, #0
 800a344:	f7f6 ff06 	bl	8001154 <__aeabi_dcmplt>
 800a348:	2800      	cmp	r0, #0
 800a34a:	f040 8646 	bne.w	800afda <_vfprintf_r+0x1516>
 800a34e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800a352:	4ea9      	ldr	r6, [pc, #676]	; (800a5f8 <_vfprintf_r+0xb34>)
 800a354:	4ba9      	ldr	r3, [pc, #676]	; (800a5fc <_vfprintf_r+0xb38>)
 800a356:	9907      	ldr	r1, [sp, #28]
 800a358:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a35c:	9107      	str	r1, [sp, #28]
 800a35e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a360:	2203      	movs	r2, #3
 800a362:	f04f 0b00 	mov.w	fp, #0
 800a366:	9209      	str	r2, [sp, #36]	; 0x24
 800a368:	2947      	cmp	r1, #71	; 0x47
 800a36a:	bfd8      	it	le
 800a36c:	461e      	movle	r6, r3
 800a36e:	920d      	str	r2, [sp, #52]	; 0x34
 800a370:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 800a374:	e5b4      	b.n	8009ee0 <_vfprintf_r+0x41c>
 800a376:	9b07      	ldr	r3, [sp, #28]
 800a378:	f043 0308 	orr.w	r3, r3, #8
 800a37c:	9307      	str	r3, [sp, #28]
 800a37e:	f898 3000 	ldrb.w	r3, [r8]
 800a382:	e412      	b.n	8009baa <_vfprintf_r+0xe6>
 800a384:	9311      	str	r3, [sp, #68]	; 0x44
 800a386:	46ab      	mov	fp, r5
 800a388:	2a00      	cmp	r2, #0
 800a38a:	f43f ad6a 	beq.w	8009e62 <_vfprintf_r+0x39e>
 800a38e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800a392:	e566      	b.n	8009e62 <_vfprintf_r+0x39e>
 800a394:	9311      	str	r3, [sp, #68]	; 0x44
 800a396:	46ab      	mov	fp, r5
 800a398:	2a00      	cmp	r2, #0
 800a39a:	f040 8708 	bne.w	800b1ae <_vfprintf_r+0x16ea>
 800a39e:	9b07      	ldr	r3, [sp, #28]
 800a3a0:	4897      	ldr	r0, [pc, #604]	; (800a600 <_vfprintf_r+0xb3c>)
 800a3a2:	069c      	lsls	r4, r3, #26
 800a3a4:	f53f aec4 	bmi.w	800a130 <_vfprintf_r+0x66c>
 800a3a8:	9b07      	ldr	r3, [sp, #28]
 800a3aa:	06d9      	lsls	r1, r3, #27
 800a3ac:	f140 841f 	bpl.w	800abee <_vfprintf_r+0x112a>
 800a3b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a3b2:	4613      	mov	r3, r2
 800a3b4:	3304      	adds	r3, #4
 800a3b6:	6814      	ldr	r4, [r2, #0]
 800a3b8:	930e      	str	r3, [sp, #56]	; 0x38
 800a3ba:	2500      	movs	r5, #0
 800a3bc:	e6c1      	b.n	800a142 <_vfprintf_r+0x67e>
 800a3be:	f898 3000 	ldrb.w	r3, [r8]
 800a3c2:	2900      	cmp	r1, #0
 800a3c4:	f47f abf1 	bne.w	8009baa <_vfprintf_r+0xe6>
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	2120      	movs	r1, #32
 800a3cc:	f7ff bbed 	b.w	8009baa <_vfprintf_r+0xe6>
 800a3d0:	9b07      	ldr	r3, [sp, #28]
 800a3d2:	f043 0301 	orr.w	r3, r3, #1
 800a3d6:	9307      	str	r3, [sp, #28]
 800a3d8:	f898 3000 	ldrb.w	r3, [r8]
 800a3dc:	f7ff bbe5 	b.w	8009baa <_vfprintf_r+0xe6>
 800a3e0:	9b07      	ldr	r3, [sp, #28]
 800a3e2:	f043 0320 	orr.w	r3, r3, #32
 800a3e6:	9307      	str	r3, [sp, #28]
 800a3e8:	f898 3000 	ldrb.w	r3, [r8]
 800a3ec:	f7ff bbdd 	b.w	8009baa <_vfprintf_r+0xe6>
 800a3f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a3f2:	9311      	str	r3, [sp, #68]	; 0x44
 800a3f4:	6816      	ldr	r6, [r2, #0]
 800a3f6:	2400      	movs	r4, #0
 800a3f8:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
 800a3fc:	1d17      	adds	r7, r2, #4
 800a3fe:	2e00      	cmp	r6, #0
 800a400:	f000 85c2 	beq.w	800af88 <_vfprintf_r+0x14c4>
 800a404:	2d00      	cmp	r5, #0
 800a406:	f2c0 84fe 	blt.w	800ae06 <_vfprintf_r+0x1342>
 800a40a:	462a      	mov	r2, r5
 800a40c:	4621      	mov	r1, r4
 800a40e:	4630      	mov	r0, r6
 800a410:	f7f6 fa26 	bl	8000860 <memchr>
 800a414:	2800      	cmp	r0, #0
 800a416:	f000 8600 	beq.w	800b01a <_vfprintf_r+0x1556>
 800a41a:	1b83      	subs	r3, r0, r6
 800a41c:	930d      	str	r3, [sp, #52]	; 0x34
 800a41e:	46a3      	mov	fp, r4
 800a420:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a424:	970e      	str	r7, [sp, #56]	; 0x38
 800a426:	9309      	str	r3, [sp, #36]	; 0x24
 800a428:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 800a42c:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800a430:	e556      	b.n	8009ee0 <_vfprintf_r+0x41c>
 800a432:	f898 3000 	ldrb.w	r3, [r8]
 800a436:	2201      	movs	r2, #1
 800a438:	212b      	movs	r1, #43	; 0x2b
 800a43a:	f7ff bbb6 	b.w	8009baa <_vfprintf_r+0xe6>
 800a43e:	4870      	ldr	r0, [pc, #448]	; (800a600 <_vfprintf_r+0xb3c>)
 800a440:	9211      	str	r2, [sp, #68]	; 0x44
 800a442:	f1bb 0f00 	cmp.w	fp, #0
 800a446:	f040 8174 	bne.w	800a732 <_vfprintf_r+0xc6e>
 800a44a:	465f      	mov	r7, fp
 800a44c:	e6e4      	b.n	800a218 <_vfprintf_r+0x754>
 800a44e:	9311      	str	r3, [sp, #68]	; 0x44
 800a450:	2a00      	cmp	r2, #0
 800a452:	f040 8695 	bne.w	800b180 <_vfprintf_r+0x16bc>
 800a456:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a458:	2a00      	cmp	r2, #0
 800a45a:	f43f ac5b 	beq.w	8009d14 <_vfprintf_r+0x250>
 800a45e:	2300      	movs	r3, #0
 800a460:	2101      	movs	r1, #1
 800a462:	461f      	mov	r7, r3
 800a464:	9109      	str	r1, [sp, #36]	; 0x24
 800a466:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 800a46a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800a46e:	469b      	mov	fp, r3
 800a470:	9313      	str	r3, [sp, #76]	; 0x4c
 800a472:	910d      	str	r1, [sp, #52]	; 0x34
 800a474:	ae26      	add	r6, sp, #152	; 0x98
 800a476:	e537      	b.n	8009ee8 <_vfprintf_r+0x424>
 800a478:	f1bb 0f00 	cmp.w	fp, #0
 800a47c:	f000 85d8 	beq.w	800b030 <_vfprintf_r+0x156c>
 800a480:	2700      	movs	r7, #0
 800a482:	2400      	movs	r4, #0
 800a484:	2500      	movs	r5, #0
 800a486:	e478      	b.n	8009d7a <_vfprintf_r+0x2b6>
 800a488:	485d      	ldr	r0, [pc, #372]	; (800a600 <_vfprintf_r+0xb3c>)
 800a48a:	9307      	str	r3, [sp, #28]
 800a48c:	9211      	str	r2, [sp, #68]	; 0x44
 800a48e:	ea54 0305 	orrs.w	r3, r4, r5
 800a492:	970e      	str	r7, [sp, #56]	; 0x38
 800a494:	f04f 0700 	mov.w	r7, #0
 800a498:	f47f ae71 	bne.w	800a17e <_vfprintf_r+0x6ba>
 800a49c:	2400      	movs	r4, #0
 800a49e:	2500      	movs	r5, #0
 800a4a0:	e66d      	b.n	800a17e <_vfprintf_r+0x6ba>
 800a4a2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800a4a4:	e577      	b.n	8009f96 <_vfprintf_r+0x4d2>
 800a4a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a4a8:	2b65      	cmp	r3, #101	; 0x65
 800a4aa:	f340 80af 	ble.w	800a60c <_vfprintf_r+0xb48>
 800a4ae:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a4b0:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	f7f6 fe43 	bl	8001140 <__aeabi_dcmpeq>
 800a4ba:	2800      	cmp	r0, #0
 800a4bc:	f000 813b 	beq.w	800a736 <_vfprintf_r+0xc72>
 800a4c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a4c2:	4a50      	ldr	r2, [pc, #320]	; (800a604 <_vfprintf_r+0xb40>)
 800a4c4:	f8c9 2000 	str.w	r2, [r9]
 800a4c8:	3301      	adds	r3, #1
 800a4ca:	3401      	adds	r4, #1
 800a4cc:	2201      	movs	r2, #1
 800a4ce:	2b07      	cmp	r3, #7
 800a4d0:	9425      	str	r4, [sp, #148]	; 0x94
 800a4d2:	9324      	str	r3, [sp, #144]	; 0x90
 800a4d4:	f8c9 2004 	str.w	r2, [r9, #4]
 800a4d8:	f300 83b2 	bgt.w	800ac40 <_vfprintf_r+0x117c>
 800a4dc:	f109 0908 	add.w	r9, r9, #8
 800a4e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a4e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	db03      	blt.n	800a4f0 <_vfprintf_r+0xa2c>
 800a4e8:	9b07      	ldr	r3, [sp, #28]
 800a4ea:	07d8      	lsls	r0, r3, #31
 800a4ec:	f57f adc3 	bpl.w	800a076 <_vfprintf_r+0x5b2>
 800a4f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a4f2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a4f4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a4f6:	f8c9 2000 	str.w	r2, [r9]
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	440c      	add	r4, r1
 800a4fe:	2b07      	cmp	r3, #7
 800a500:	9425      	str	r4, [sp, #148]	; 0x94
 800a502:	f8c9 1004 	str.w	r1, [r9, #4]
 800a506:	9324      	str	r3, [sp, #144]	; 0x90
 800a508:	f300 8470 	bgt.w	800adec <_vfprintf_r+0x1328>
 800a50c:	f109 0908 	add.w	r9, r9, #8
 800a510:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a512:	1e5d      	subs	r5, r3, #1
 800a514:	2d00      	cmp	r5, #0
 800a516:	f77f adae 	ble.w	800a076 <_vfprintf_r+0x5b2>
 800a51a:	4a3b      	ldr	r2, [pc, #236]	; (800a608 <_vfprintf_r+0xb44>)
 800a51c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a51e:	920f      	str	r2, [sp, #60]	; 0x3c
 800a520:	2d10      	cmp	r5, #16
 800a522:	f340 81d2 	ble.w	800a8ca <_vfprintf_r+0xe06>
 800a526:	2610      	movs	r6, #16
 800a528:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800a52a:	f8dd b020 	ldr.w	fp, [sp, #32]
 800a52e:	e005      	b.n	800a53c <_vfprintf_r+0xa78>
 800a530:	f109 0908 	add.w	r9, r9, #8
 800a534:	3d10      	subs	r5, #16
 800a536:	2d10      	cmp	r5, #16
 800a538:	f340 81c7 	ble.w	800a8ca <_vfprintf_r+0xe06>
 800a53c:	3301      	adds	r3, #1
 800a53e:	3410      	adds	r4, #16
 800a540:	2b07      	cmp	r3, #7
 800a542:	9425      	str	r4, [sp, #148]	; 0x94
 800a544:	9324      	str	r3, [sp, #144]	; 0x90
 800a546:	f8c9 a000 	str.w	sl, [r9]
 800a54a:	f8c9 6004 	str.w	r6, [r9, #4]
 800a54e:	ddef      	ble.n	800a530 <_vfprintf_r+0xa6c>
 800a550:	aa23      	add	r2, sp, #140	; 0x8c
 800a552:	4659      	mov	r1, fp
 800a554:	4638      	mov	r0, r7
 800a556:	f003 fc65 	bl	800de24 <__sprint_r>
 800a55a:	2800      	cmp	r0, #0
 800a55c:	f47f abe1 	bne.w	8009d22 <_vfprintf_r+0x25e>
 800a560:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800a562:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a564:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a568:	e7e4      	b.n	800a534 <_vfprintf_r+0xa70>
 800a56a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a56c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a56e:	1a9f      	subs	r7, r3, r2
 800a570:	2f00      	cmp	r7, #0
 800a572:	f77f ad34 	ble.w	8009fde <_vfprintf_r+0x51a>
 800a576:	4a24      	ldr	r2, [pc, #144]	; (800a608 <_vfprintf_r+0xb44>)
 800a578:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a57a:	920f      	str	r2, [sp, #60]	; 0x3c
 800a57c:	2f10      	cmp	r7, #16
 800a57e:	dd2b      	ble.n	800a5d8 <_vfprintf_r+0xb14>
 800a580:	464a      	mov	r2, r9
 800a582:	4621      	mov	r1, r4
 800a584:	46b9      	mov	r9, r7
 800a586:	2510      	movs	r5, #16
 800a588:	4637      	mov	r7, r6
 800a58a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a58c:	9e08      	ldr	r6, [sp, #32]
 800a58e:	e006      	b.n	800a59e <_vfprintf_r+0xada>
 800a590:	f1a9 0910 	sub.w	r9, r9, #16
 800a594:	f1b9 0f10 	cmp.w	r9, #16
 800a598:	f102 0208 	add.w	r2, r2, #8
 800a59c:	dd18      	ble.n	800a5d0 <_vfprintf_r+0xb0c>
 800a59e:	3301      	adds	r3, #1
 800a5a0:	3110      	adds	r1, #16
 800a5a2:	2b07      	cmp	r3, #7
 800a5a4:	9125      	str	r1, [sp, #148]	; 0x94
 800a5a6:	9324      	str	r3, [sp, #144]	; 0x90
 800a5a8:	f8c2 a000 	str.w	sl, [r2]
 800a5ac:	6055      	str	r5, [r2, #4]
 800a5ae:	ddef      	ble.n	800a590 <_vfprintf_r+0xacc>
 800a5b0:	aa23      	add	r2, sp, #140	; 0x8c
 800a5b2:	4631      	mov	r1, r6
 800a5b4:	4620      	mov	r0, r4
 800a5b6:	f003 fc35 	bl	800de24 <__sprint_r>
 800a5ba:	2800      	cmp	r0, #0
 800a5bc:	f47f abb1 	bne.w	8009d22 <_vfprintf_r+0x25e>
 800a5c0:	f1a9 0910 	sub.w	r9, r9, #16
 800a5c4:	f1b9 0f10 	cmp.w	r9, #16
 800a5c8:	9925      	ldr	r1, [sp, #148]	; 0x94
 800a5ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a5cc:	aa30      	add	r2, sp, #192	; 0xc0
 800a5ce:	dce6      	bgt.n	800a59e <_vfprintf_r+0xada>
 800a5d0:	463e      	mov	r6, r7
 800a5d2:	460c      	mov	r4, r1
 800a5d4:	464f      	mov	r7, r9
 800a5d6:	4691      	mov	r9, r2
 800a5d8:	3301      	adds	r3, #1
 800a5da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a5dc:	9324      	str	r3, [sp, #144]	; 0x90
 800a5de:	443c      	add	r4, r7
 800a5e0:	2b07      	cmp	r3, #7
 800a5e2:	9425      	str	r4, [sp, #148]	; 0x94
 800a5e4:	e889 0084 	stmia.w	r9, {r2, r7}
 800a5e8:	f300 822c 	bgt.w	800aa44 <_vfprintf_r+0xf80>
 800a5ec:	f109 0908 	add.w	r9, r9, #8
 800a5f0:	e4f5      	b.n	8009fde <_vfprintf_r+0x51a>
 800a5f2:	bf00      	nop
 800a5f4:	7fefffff 	.word	0x7fefffff
 800a5f8:	0800e7c0 	.word	0x0800e7c0
 800a5fc:	0800e7bc 	.word	0x0800e7bc
 800a600:	0800e7e0 	.word	0x0800e7e0
 800a604:	0800e7fc 	.word	0x0800e7fc
 800a608:	0800e810 	.word	0x0800e810
 800a60c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a60e:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800a610:	2b01      	cmp	r3, #1
 800a612:	f340 81d0 	ble.w	800a9b6 <_vfprintf_r+0xef2>
 800a616:	3501      	adds	r5, #1
 800a618:	3401      	adds	r4, #1
 800a61a:	2301      	movs	r3, #1
 800a61c:	2d07      	cmp	r5, #7
 800a61e:	9425      	str	r4, [sp, #148]	; 0x94
 800a620:	9524      	str	r5, [sp, #144]	; 0x90
 800a622:	f8c9 6000 	str.w	r6, [r9]
 800a626:	f8c9 3004 	str.w	r3, [r9, #4]
 800a62a:	f300 81e1 	bgt.w	800a9f0 <_vfprintf_r+0xf2c>
 800a62e:	f109 0908 	add.w	r9, r9, #8
 800a632:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a634:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a636:	f8c9 3000 	str.w	r3, [r9]
 800a63a:	3501      	adds	r5, #1
 800a63c:	4414      	add	r4, r2
 800a63e:	2d07      	cmp	r5, #7
 800a640:	9425      	str	r4, [sp, #148]	; 0x94
 800a642:	9524      	str	r5, [sp, #144]	; 0x90
 800a644:	f8c9 2004 	str.w	r2, [r9, #4]
 800a648:	f300 81ed 	bgt.w	800aa26 <_vfprintf_r+0xf62>
 800a64c:	f109 0908 	add.w	r9, r9, #8
 800a650:	2300      	movs	r3, #0
 800a652:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a654:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a656:	2200      	movs	r2, #0
 800a658:	f7f6 fd72 	bl	8001140 <__aeabi_dcmpeq>
 800a65c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a65e:	2800      	cmp	r0, #0
 800a660:	f040 80c3 	bne.w	800a7ea <_vfprintf_r+0xd26>
 800a664:	3b01      	subs	r3, #1
 800a666:	3501      	adds	r5, #1
 800a668:	3601      	adds	r6, #1
 800a66a:	441c      	add	r4, r3
 800a66c:	2d07      	cmp	r5, #7
 800a66e:	9524      	str	r5, [sp, #144]	; 0x90
 800a670:	9425      	str	r4, [sp, #148]	; 0x94
 800a672:	f8c9 6000 	str.w	r6, [r9]
 800a676:	f8c9 3004 	str.w	r3, [r9, #4]
 800a67a:	f300 81ac 	bgt.w	800a9d6 <_vfprintf_r+0xf12>
 800a67e:	f109 0908 	add.w	r9, r9, #8
 800a682:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a684:	f8c9 2004 	str.w	r2, [r9, #4]
 800a688:	3501      	adds	r5, #1
 800a68a:	4414      	add	r4, r2
 800a68c:	ab1f      	add	r3, sp, #124	; 0x7c
 800a68e:	2d07      	cmp	r5, #7
 800a690:	9425      	str	r4, [sp, #148]	; 0x94
 800a692:	9524      	str	r5, [sp, #144]	; 0x90
 800a694:	f8c9 3000 	str.w	r3, [r9]
 800a698:	f77f aceb 	ble.w	800a072 <_vfprintf_r+0x5ae>
 800a69c:	aa23      	add	r2, sp, #140	; 0x8c
 800a69e:	9908      	ldr	r1, [sp, #32]
 800a6a0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a6a2:	f003 fbbf 	bl	800de24 <__sprint_r>
 800a6a6:	2800      	cmp	r0, #0
 800a6a8:	f47f ab3b 	bne.w	8009d22 <_vfprintf_r+0x25e>
 800a6ac:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800a6ae:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a6b2:	e4e0      	b.n	800a076 <_vfprintf_r+0x5b2>
 800a6b4:	aa23      	add	r2, sp, #140	; 0x8c
 800a6b6:	9908      	ldr	r1, [sp, #32]
 800a6b8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a6ba:	f003 fbb3 	bl	800de24 <__sprint_r>
 800a6be:	2800      	cmp	r0, #0
 800a6c0:	f43f ad27 	beq.w	800a112 <_vfprintf_r+0x64e>
 800a6c4:	f7ff bb2d 	b.w	8009d22 <_vfprintf_r+0x25e>
 800a6c8:	aa23      	add	r2, sp, #140	; 0x8c
 800a6ca:	9908      	ldr	r1, [sp, #32]
 800a6cc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a6ce:	f003 fba9 	bl	800de24 <__sprint_r>
 800a6d2:	2800      	cmp	r0, #0
 800a6d4:	f47f ab25 	bne.w	8009d22 <_vfprintf_r+0x25e>
 800a6d8:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800a6da:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a6de:	e4b7      	b.n	800a050 <_vfprintf_r+0x58c>
 800a6e0:	aa23      	add	r2, sp, #140	; 0x8c
 800a6e2:	9908      	ldr	r1, [sp, #32]
 800a6e4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a6e6:	f003 fb9d 	bl	800de24 <__sprint_r>
 800a6ea:	2800      	cmp	r0, #0
 800a6ec:	f47f ab19 	bne.w	8009d22 <_vfprintf_r+0x25e>
 800a6f0:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800a6f2:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a6f6:	e45e      	b.n	8009fb6 <_vfprintf_r+0x4f2>
 800a6f8:	aa23      	add	r2, sp, #140	; 0x8c
 800a6fa:	9908      	ldr	r1, [sp, #32]
 800a6fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a6fe:	f003 fb91 	bl	800de24 <__sprint_r>
 800a702:	2800      	cmp	r0, #0
 800a704:	f47f ab0d 	bne.w	8009d22 <_vfprintf_r+0x25e>
 800a708:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800a70a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a70e:	e462      	b.n	8009fd6 <_vfprintf_r+0x512>
 800a710:	f1bb 0f00 	cmp.w	fp, #0
 800a714:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800a718:	f2c0 829e 	blt.w	800ac58 <_vfprintf_r+0x1194>
 800a71c:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 800a720:	9307      	str	r3, [sp, #28]
 800a722:	ea54 0305 	orrs.w	r3, r4, r5
 800a726:	f47f ad2a 	bne.w	800a17e <_vfprintf_r+0x6ba>
 800a72a:	f1bb 0f00 	cmp.w	fp, #0
 800a72e:	f43f ae8c 	beq.w	800a44a <_vfprintf_r+0x986>
 800a732:	2700      	movs	r7, #0
 800a734:	e6b2      	b.n	800a49c <_vfprintf_r+0x9d8>
 800a736:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800a738:	2d00      	cmp	r5, #0
 800a73a:	f340 828f 	ble.w	800ac5c <_vfprintf_r+0x1198>
 800a73e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a740:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a742:	4293      	cmp	r3, r2
 800a744:	bfa8      	it	ge
 800a746:	4613      	movge	r3, r2
 800a748:	2b00      	cmp	r3, #0
 800a74a:	461d      	mov	r5, r3
 800a74c:	dd0d      	ble.n	800a76a <_vfprintf_r+0xca6>
 800a74e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a750:	f8c9 6000 	str.w	r6, [r9]
 800a754:	3301      	adds	r3, #1
 800a756:	442c      	add	r4, r5
 800a758:	2b07      	cmp	r3, #7
 800a75a:	9425      	str	r4, [sp, #148]	; 0x94
 800a75c:	f8c9 5004 	str.w	r5, [r9, #4]
 800a760:	9324      	str	r3, [sp, #144]	; 0x90
 800a762:	f300 8384 	bgt.w	800ae6e <_vfprintf_r+0x13aa>
 800a766:	f109 0908 	add.w	r9, r9, #8
 800a76a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a76c:	2d00      	cmp	r5, #0
 800a76e:	bfa8      	it	ge
 800a770:	1b5b      	subge	r3, r3, r5
 800a772:	2b00      	cmp	r3, #0
 800a774:	461d      	mov	r5, r3
 800a776:	f340 80be 	ble.w	800a8f6 <_vfprintf_r+0xe32>
 800a77a:	4ab9      	ldr	r2, [pc, #740]	; (800aa60 <_vfprintf_r+0xf9c>)
 800a77c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a77e:	920f      	str	r2, [sp, #60]	; 0x3c
 800a780:	2d10      	cmp	r5, #16
 800a782:	f340 8245 	ble.w	800ac10 <_vfprintf_r+0x114c>
 800a786:	4622      	mov	r2, r4
 800a788:	2710      	movs	r7, #16
 800a78a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800a78e:	9c08      	ldr	r4, [sp, #32]
 800a790:	e005      	b.n	800a79e <_vfprintf_r+0xcda>
 800a792:	f109 0908 	add.w	r9, r9, #8
 800a796:	3d10      	subs	r5, #16
 800a798:	2d10      	cmp	r5, #16
 800a79a:	f340 8238 	ble.w	800ac0e <_vfprintf_r+0x114a>
 800a79e:	3301      	adds	r3, #1
 800a7a0:	3210      	adds	r2, #16
 800a7a2:	2b07      	cmp	r3, #7
 800a7a4:	9225      	str	r2, [sp, #148]	; 0x94
 800a7a6:	9324      	str	r3, [sp, #144]	; 0x90
 800a7a8:	f8c9 a000 	str.w	sl, [r9]
 800a7ac:	f8c9 7004 	str.w	r7, [r9, #4]
 800a7b0:	ddef      	ble.n	800a792 <_vfprintf_r+0xcce>
 800a7b2:	aa23      	add	r2, sp, #140	; 0x8c
 800a7b4:	4621      	mov	r1, r4
 800a7b6:	4658      	mov	r0, fp
 800a7b8:	f003 fb34 	bl	800de24 <__sprint_r>
 800a7bc:	2800      	cmp	r0, #0
 800a7be:	f47f aab0 	bne.w	8009d22 <_vfprintf_r+0x25e>
 800a7c2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800a7c4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a7c6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a7ca:	e7e4      	b.n	800a796 <_vfprintf_r+0xcd2>
 800a7cc:	aa23      	add	r2, sp, #140	; 0x8c
 800a7ce:	9908      	ldr	r1, [sp, #32]
 800a7d0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a7d2:	f003 fb27 	bl	800de24 <__sprint_r>
 800a7d6:	2800      	cmp	r0, #0
 800a7d8:	f47f aaa3 	bne.w	8009d22 <_vfprintf_r+0x25e>
 800a7dc:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800a7e0:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800a7e2:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a7e6:	f7ff bbd6 	b.w	8009f96 <_vfprintf_r+0x4d2>
 800a7ea:	1e5e      	subs	r6, r3, #1
 800a7ec:	2e00      	cmp	r6, #0
 800a7ee:	f77f af48 	ble.w	800a682 <_vfprintf_r+0xbbe>
 800a7f2:	4b9b      	ldr	r3, [pc, #620]	; (800aa60 <_vfprintf_r+0xf9c>)
 800a7f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a7f6:	2e10      	cmp	r6, #16
 800a7f8:	f340 810a 	ble.w	800aa10 <_vfprintf_r+0xf4c>
 800a7fc:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 800a800:	2710      	movs	r7, #16
 800a802:	46b0      	mov	r8, r6
 800a804:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800a808:	9e08      	ldr	r6, [sp, #32]
 800a80a:	e007      	b.n	800a81c <_vfprintf_r+0xd58>
 800a80c:	f109 0908 	add.w	r9, r9, #8
 800a810:	f1a8 0810 	sub.w	r8, r8, #16
 800a814:	f1b8 0f10 	cmp.w	r8, #16
 800a818:	f340 80f7 	ble.w	800aa0a <_vfprintf_r+0xf46>
 800a81c:	3501      	adds	r5, #1
 800a81e:	3410      	adds	r4, #16
 800a820:	2d07      	cmp	r5, #7
 800a822:	9425      	str	r4, [sp, #148]	; 0x94
 800a824:	9524      	str	r5, [sp, #144]	; 0x90
 800a826:	f8c9 a000 	str.w	sl, [r9]
 800a82a:	f8c9 7004 	str.w	r7, [r9, #4]
 800a82e:	dded      	ble.n	800a80c <_vfprintf_r+0xd48>
 800a830:	aa23      	add	r2, sp, #140	; 0x8c
 800a832:	4631      	mov	r1, r6
 800a834:	4658      	mov	r0, fp
 800a836:	f003 faf5 	bl	800de24 <__sprint_r>
 800a83a:	2800      	cmp	r0, #0
 800a83c:	f47f aa71 	bne.w	8009d22 <_vfprintf_r+0x25e>
 800a840:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800a842:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800a844:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a848:	e7e2      	b.n	800a810 <_vfprintf_r+0xd4c>
 800a84a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a84c:	6814      	ldr	r4, [r2, #0]
 800a84e:	4613      	mov	r3, r2
 800a850:	3304      	adds	r3, #4
 800a852:	17e5      	asrs	r5, r4, #31
 800a854:	930e      	str	r3, [sp, #56]	; 0x38
 800a856:	4622      	mov	r2, r4
 800a858:	462b      	mov	r3, r5
 800a85a:	e4c6      	b.n	800a1ea <_vfprintf_r+0x726>
 800a85c:	9907      	ldr	r1, [sp, #28]
 800a85e:	f011 0210 	ands.w	r2, r1, #16
 800a862:	d015      	beq.n	800a890 <_vfprintf_r+0xdcc>
 800a864:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a866:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800a86a:	f1bb 0f00 	cmp.w	fp, #0
 800a86e:	6804      	ldr	r4, [r0, #0]
 800a870:	f100 0704 	add.w	r7, r0, #4
 800a874:	f04f 0500 	mov.w	r5, #0
 800a878:	db1b      	blt.n	800a8b2 <_vfprintf_r+0xdee>
 800a87a:	460a      	mov	r2, r1
 800a87c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a880:	9207      	str	r2, [sp, #28]
 800a882:	ea54 0205 	orrs.w	r2, r4, r5
 800a886:	970e      	str	r7, [sp, #56]	; 0x38
 800a888:	461f      	mov	r7, r3
 800a88a:	f47f ab05 	bne.w	8009e98 <_vfprintf_r+0x3d4>
 800a88e:	e4bf      	b.n	800a210 <_vfprintf_r+0x74c>
 800a890:	9907      	ldr	r1, [sp, #28]
 800a892:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 800a896:	f040 8256 	bne.w	800ad46 <_vfprintf_r+0x1282>
 800a89a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a89c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800a8a0:	f1bb 0f00 	cmp.w	fp, #0
 800a8a4:	680c      	ldr	r4, [r1, #0]
 800a8a6:	f101 0704 	add.w	r7, r1, #4
 800a8aa:	f04f 0500 	mov.w	r5, #0
 800a8ae:	f280 819c 	bge.w	800abea <_vfprintf_r+0x1126>
 800a8b2:	970e      	str	r7, [sp, #56]	; 0x38
 800a8b4:	461f      	mov	r7, r3
 800a8b6:	ea54 0305 	orrs.w	r3, r4, r5
 800a8ba:	f47f aaed 	bne.w	8009e98 <_vfprintf_r+0x3d4>
 800a8be:	ae40      	add	r6, sp, #256	; 0x100
 800a8c0:	3430      	adds	r4, #48	; 0x30
 800a8c2:	f806 4d41 	strb.w	r4, [r6, #-65]!
 800a8c6:	f7ff bb01 	b.w	8009ecc <_vfprintf_r+0x408>
 800a8ca:	3301      	adds	r3, #1
 800a8cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a8ce:	9324      	str	r3, [sp, #144]	; 0x90
 800a8d0:	442c      	add	r4, r5
 800a8d2:	2b07      	cmp	r3, #7
 800a8d4:	9425      	str	r4, [sp, #148]	; 0x94
 800a8d6:	e889 0024 	stmia.w	r9, {r2, r5}
 800a8da:	f77f abca 	ble.w	800a072 <_vfprintf_r+0x5ae>
 800a8de:	e6dd      	b.n	800a69c <_vfprintf_r+0xbd8>
 800a8e0:	aa23      	add	r2, sp, #140	; 0x8c
 800a8e2:	9908      	ldr	r1, [sp, #32]
 800a8e4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a8e6:	f003 fa9d 	bl	800de24 <__sprint_r>
 800a8ea:	2800      	cmp	r0, #0
 800a8ec:	f47f aa19 	bne.w	8009d22 <_vfprintf_r+0x25e>
 800a8f0:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800a8f2:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a8f6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a8f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a8fa:	4432      	add	r2, r6
 800a8fc:	4617      	mov	r7, r2
 800a8fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a900:	4293      	cmp	r3, r2
 800a902:	db47      	blt.n	800a994 <_vfprintf_r+0xed0>
 800a904:	9a07      	ldr	r2, [sp, #28]
 800a906:	07d2      	lsls	r2, r2, #31
 800a908:	d444      	bmi.n	800a994 <_vfprintf_r+0xed0>
 800a90a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a90c:	440e      	add	r6, r1
 800a90e:	1bf5      	subs	r5, r6, r7
 800a910:	1acb      	subs	r3, r1, r3
 800a912:	429d      	cmp	r5, r3
 800a914:	bfa8      	it	ge
 800a916:	461d      	movge	r5, r3
 800a918:	2d00      	cmp	r5, #0
 800a91a:	462e      	mov	r6, r5
 800a91c:	dd0d      	ble.n	800a93a <_vfprintf_r+0xe76>
 800a91e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a920:	f8c9 7000 	str.w	r7, [r9]
 800a924:	3201      	adds	r2, #1
 800a926:	442c      	add	r4, r5
 800a928:	2a07      	cmp	r2, #7
 800a92a:	9425      	str	r4, [sp, #148]	; 0x94
 800a92c:	f8c9 5004 	str.w	r5, [r9, #4]
 800a930:	9224      	str	r2, [sp, #144]	; 0x90
 800a932:	f300 831a 	bgt.w	800af6a <_vfprintf_r+0x14a6>
 800a936:	f109 0908 	add.w	r9, r9, #8
 800a93a:	2e00      	cmp	r6, #0
 800a93c:	bfac      	ite	ge
 800a93e:	1b9d      	subge	r5, r3, r6
 800a940:	461d      	movlt	r5, r3
 800a942:	2d00      	cmp	r5, #0
 800a944:	f77f ab97 	ble.w	800a076 <_vfprintf_r+0x5b2>
 800a948:	4a45      	ldr	r2, [pc, #276]	; (800aa60 <_vfprintf_r+0xf9c>)
 800a94a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a94c:	920f      	str	r2, [sp, #60]	; 0x3c
 800a94e:	2d10      	cmp	r5, #16
 800a950:	ddbb      	ble.n	800a8ca <_vfprintf_r+0xe06>
 800a952:	2610      	movs	r6, #16
 800a954:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800a956:	f8dd b020 	ldr.w	fp, [sp, #32]
 800a95a:	e004      	b.n	800a966 <_vfprintf_r+0xea2>
 800a95c:	f109 0908 	add.w	r9, r9, #8
 800a960:	3d10      	subs	r5, #16
 800a962:	2d10      	cmp	r5, #16
 800a964:	ddb1      	ble.n	800a8ca <_vfprintf_r+0xe06>
 800a966:	3301      	adds	r3, #1
 800a968:	3410      	adds	r4, #16
 800a96a:	2b07      	cmp	r3, #7
 800a96c:	9425      	str	r4, [sp, #148]	; 0x94
 800a96e:	9324      	str	r3, [sp, #144]	; 0x90
 800a970:	f8c9 a000 	str.w	sl, [r9]
 800a974:	f8c9 6004 	str.w	r6, [r9, #4]
 800a978:	ddf0      	ble.n	800a95c <_vfprintf_r+0xe98>
 800a97a:	aa23      	add	r2, sp, #140	; 0x8c
 800a97c:	4659      	mov	r1, fp
 800a97e:	4638      	mov	r0, r7
 800a980:	f003 fa50 	bl	800de24 <__sprint_r>
 800a984:	2800      	cmp	r0, #0
 800a986:	f47f a9cc 	bne.w	8009d22 <_vfprintf_r+0x25e>
 800a98a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800a98c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a98e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a992:	e7e5      	b.n	800a960 <_vfprintf_r+0xe9c>
 800a994:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a996:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a998:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800a99a:	f8c9 1000 	str.w	r1, [r9]
 800a99e:	3201      	adds	r2, #1
 800a9a0:	4404      	add	r4, r0
 800a9a2:	2a07      	cmp	r2, #7
 800a9a4:	9425      	str	r4, [sp, #148]	; 0x94
 800a9a6:	f8c9 0004 	str.w	r0, [r9, #4]
 800a9aa:	9224      	str	r2, [sp, #144]	; 0x90
 800a9ac:	f300 8278 	bgt.w	800aea0 <_vfprintf_r+0x13dc>
 800a9b0:	f109 0908 	add.w	r9, r9, #8
 800a9b4:	e7a9      	b.n	800a90a <_vfprintf_r+0xe46>
 800a9b6:	9b07      	ldr	r3, [sp, #28]
 800a9b8:	07df      	lsls	r7, r3, #31
 800a9ba:	f53f ae2c 	bmi.w	800a616 <_vfprintf_r+0xb52>
 800a9be:	3501      	adds	r5, #1
 800a9c0:	3401      	adds	r4, #1
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	2d07      	cmp	r5, #7
 800a9c6:	9425      	str	r4, [sp, #148]	; 0x94
 800a9c8:	9524      	str	r5, [sp, #144]	; 0x90
 800a9ca:	f8c9 6000 	str.w	r6, [r9]
 800a9ce:	f8c9 3004 	str.w	r3, [r9, #4]
 800a9d2:	f77f ae54 	ble.w	800a67e <_vfprintf_r+0xbba>
 800a9d6:	aa23      	add	r2, sp, #140	; 0x8c
 800a9d8:	9908      	ldr	r1, [sp, #32]
 800a9da:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a9dc:	f003 fa22 	bl	800de24 <__sprint_r>
 800a9e0:	2800      	cmp	r0, #0
 800a9e2:	f47f a99e 	bne.w	8009d22 <_vfprintf_r+0x25e>
 800a9e6:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800a9e8:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800a9ea:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800a9ee:	e648      	b.n	800a682 <_vfprintf_r+0xbbe>
 800a9f0:	aa23      	add	r2, sp, #140	; 0x8c
 800a9f2:	9908      	ldr	r1, [sp, #32]
 800a9f4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a9f6:	f003 fa15 	bl	800de24 <__sprint_r>
 800a9fa:	2800      	cmp	r0, #0
 800a9fc:	f47f a991 	bne.w	8009d22 <_vfprintf_r+0x25e>
 800aa00:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800aa02:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800aa04:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800aa08:	e613      	b.n	800a632 <_vfprintf_r+0xb6e>
 800aa0a:	4646      	mov	r6, r8
 800aa0c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800aa10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa12:	3501      	adds	r5, #1
 800aa14:	4434      	add	r4, r6
 800aa16:	2d07      	cmp	r5, #7
 800aa18:	9425      	str	r4, [sp, #148]	; 0x94
 800aa1a:	9524      	str	r5, [sp, #144]	; 0x90
 800aa1c:	e889 0048 	stmia.w	r9, {r3, r6}
 800aa20:	f77f ae2d 	ble.w	800a67e <_vfprintf_r+0xbba>
 800aa24:	e7d7      	b.n	800a9d6 <_vfprintf_r+0xf12>
 800aa26:	aa23      	add	r2, sp, #140	; 0x8c
 800aa28:	9908      	ldr	r1, [sp, #32]
 800aa2a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aa2c:	f003 f9fa 	bl	800de24 <__sprint_r>
 800aa30:	2800      	cmp	r0, #0
 800aa32:	f47f a976 	bne.w	8009d22 <_vfprintf_r+0x25e>
 800aa36:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800aa38:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800aa3a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800aa3e:	e607      	b.n	800a650 <_vfprintf_r+0xb8c>
 800aa40:	2400      	movs	r4, #0
 800aa42:	e73c      	b.n	800a8be <_vfprintf_r+0xdfa>
 800aa44:	aa23      	add	r2, sp, #140	; 0x8c
 800aa46:	9908      	ldr	r1, [sp, #32]
 800aa48:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aa4a:	f003 f9eb 	bl	800de24 <__sprint_r>
 800aa4e:	2800      	cmp	r0, #0
 800aa50:	f47f a967 	bne.w	8009d22 <_vfprintf_r+0x25e>
 800aa54:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800aa56:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800aa5a:	f7ff bac0 	b.w	8009fde <_vfprintf_r+0x51a>
 800aa5e:	bf00      	nop
 800aa60:	0800e810 	.word	0x0800e810
 800aa64:	4264      	negs	r4, r4
 800aa66:	f04f 072d 	mov.w	r7, #45	; 0x2d
 800aa6a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800aa6e:	f1bb 0f00 	cmp.w	fp, #0
 800aa72:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800aa76:	f6ff aa0f 	blt.w	8009e98 <_vfprintf_r+0x3d4>
 800aa7a:	9b07      	ldr	r3, [sp, #28]
 800aa7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa80:	9307      	str	r3, [sp, #28]
 800aa82:	f7ff ba09 	b.w	8009e98 <_vfprintf_r+0x3d4>
 800aa86:	9b07      	ldr	r3, [sp, #28]
 800aa88:	06de      	lsls	r6, r3, #27
 800aa8a:	d40b      	bmi.n	800aaa4 <_vfprintf_r+0xfe0>
 800aa8c:	9b07      	ldr	r3, [sp, #28]
 800aa8e:	065d      	lsls	r5, r3, #25
 800aa90:	d508      	bpl.n	800aaa4 <_vfprintf_r+0xfe0>
 800aa92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa94:	6813      	ldr	r3, [r2, #0]
 800aa96:	3204      	adds	r2, #4
 800aa98:	920e      	str	r2, [sp, #56]	; 0x38
 800aa9a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800aa9e:	801a      	strh	r2, [r3, #0]
 800aaa0:	f7ff b850 	b.w	8009b44 <_vfprintf_r+0x80>
 800aaa4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aaa6:	6813      	ldr	r3, [r2, #0]
 800aaa8:	3204      	adds	r2, #4
 800aaaa:	920e      	str	r2, [sp, #56]	; 0x38
 800aaac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aaae:	601a      	str	r2, [r3, #0]
 800aab0:	f7ff b848 	b.w	8009b44 <_vfprintf_r+0x80>
 800aab4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800aab6:	4622      	mov	r2, r4
 800aab8:	4620      	mov	r0, r4
 800aaba:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800aabc:	4623      	mov	r3, r4
 800aabe:	4621      	mov	r1, r4
 800aac0:	f7f6 fb70 	bl	80011a4 <__aeabi_dcmpun>
 800aac4:	2800      	cmp	r0, #0
 800aac6:	f040 8306 	bne.w	800b0d6 <_vfprintf_r+0x1612>
 800aaca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aacc:	f1bb 3fff 	cmp.w	fp, #4294967295
 800aad0:	f023 0320 	bic.w	r3, r3, #32
 800aad4:	930d      	str	r3, [sp, #52]	; 0x34
 800aad6:	f000 827d 	beq.w	800afd4 <_vfprintf_r+0x1510>
 800aada:	2b47      	cmp	r3, #71	; 0x47
 800aadc:	f000 8176 	beq.w	800adcc <_vfprintf_r+0x1308>
 800aae0:	9b07      	ldr	r3, [sp, #28]
 800aae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aae6:	9310      	str	r3, [sp, #64]	; 0x40
 800aae8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aaea:	1e1f      	subs	r7, r3, #0
 800aaec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aaee:	9309      	str	r3, [sp, #36]	; 0x24
 800aaf0:	bfbb      	ittet	lt
 800aaf2:	463b      	movlt	r3, r7
 800aaf4:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
 800aaf8:	2300      	movge	r3, #0
 800aafa:	232d      	movlt	r3, #45	; 0x2d
 800aafc:	930f      	str	r3, [sp, #60]	; 0x3c
 800aafe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab00:	2b66      	cmp	r3, #102	; 0x66
 800ab02:	f000 8250 	beq.w	800afa6 <_vfprintf_r+0x14e2>
 800ab06:	2b46      	cmp	r3, #70	; 0x46
 800ab08:	f000 8135 	beq.w	800ad76 <_vfprintf_r+0x12b2>
 800ab0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab10:	2b45      	cmp	r3, #69	; 0x45
 800ab12:	a821      	add	r0, sp, #132	; 0x84
 800ab14:	a91e      	add	r1, sp, #120	; 0x78
 800ab16:	bf0c      	ite	eq
 800ab18:	f10b 0501 	addeq.w	r5, fp, #1
 800ab1c:	465d      	movne	r5, fp
 800ab1e:	9004      	str	r0, [sp, #16]
 800ab20:	9103      	str	r1, [sp, #12]
 800ab22:	a81d      	add	r0, sp, #116	; 0x74
 800ab24:	2102      	movs	r1, #2
 800ab26:	463b      	mov	r3, r7
 800ab28:	9002      	str	r0, [sp, #8]
 800ab2a:	9501      	str	r5, [sp, #4]
 800ab2c:	9100      	str	r1, [sp, #0]
 800ab2e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ab30:	f000 fc76 	bl	800b420 <_dtoa_r>
 800ab34:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab36:	2b67      	cmp	r3, #103	; 0x67
 800ab38:	4606      	mov	r6, r0
 800ab3a:	f040 8288 	bne.w	800b04e <_vfprintf_r+0x158a>
 800ab3e:	9b07      	ldr	r3, [sp, #28]
 800ab40:	07da      	lsls	r2, r3, #31
 800ab42:	f140 82bd 	bpl.w	800b0c0 <_vfprintf_r+0x15fc>
 800ab46:	1974      	adds	r4, r6, r5
 800ab48:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab4a:	4639      	mov	r1, r7
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	2300      	movs	r3, #0
 800ab50:	f7f6 faf6 	bl	8001140 <__aeabi_dcmpeq>
 800ab54:	2800      	cmp	r0, #0
 800ab56:	f040 8188 	bne.w	800ae6a <_vfprintf_r+0x13a6>
 800ab5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab5c:	429c      	cmp	r4, r3
 800ab5e:	d906      	bls.n	800ab6e <_vfprintf_r+0x10aa>
 800ab60:	2130      	movs	r1, #48	; 0x30
 800ab62:	1c5a      	adds	r2, r3, #1
 800ab64:	9221      	str	r2, [sp, #132]	; 0x84
 800ab66:	7019      	strb	r1, [r3, #0]
 800ab68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab6a:	429c      	cmp	r4, r3
 800ab6c:	d8f9      	bhi.n	800ab62 <_vfprintf_r+0x109e>
 800ab6e:	1b9b      	subs	r3, r3, r6
 800ab70:	9312      	str	r3, [sp, #72]	; 0x48
 800ab72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab74:	2b47      	cmp	r3, #71	; 0x47
 800ab76:	f000 8171 	beq.w	800ae5c <_vfprintf_r+0x1398>
 800ab7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab7c:	2b65      	cmp	r3, #101	; 0x65
 800ab7e:	f340 8275 	ble.w	800b06c <_vfprintf_r+0x15a8>
 800ab82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab84:	2b66      	cmp	r3, #102	; 0x66
 800ab86:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ab88:	9313      	str	r3, [sp, #76]	; 0x4c
 800ab8a:	f000 8238 	beq.w	800affe <_vfprintf_r+0x153a>
 800ab8e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ab90:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ab92:	428a      	cmp	r2, r1
 800ab94:	f2c0 8226 	blt.w	800afe4 <_vfprintf_r+0x1520>
 800ab98:	9b07      	ldr	r3, [sp, #28]
 800ab9a:	07db      	lsls	r3, r3, #31
 800ab9c:	f100 827d 	bmi.w	800b09a <_vfprintf_r+0x15d6>
 800aba0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800aba4:	920d      	str	r2, [sp, #52]	; 0x34
 800aba6:	2267      	movs	r2, #103	; 0x67
 800aba8:	9211      	str	r2, [sp, #68]	; 0x44
 800abaa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800abac:	2a00      	cmp	r2, #0
 800abae:	f040 814b 	bne.w	800ae48 <_vfprintf_r+0x1384>
 800abb2:	9309      	str	r3, [sp, #36]	; 0x24
 800abb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800abb6:	9307      	str	r3, [sp, #28]
 800abb8:	4693      	mov	fp, r2
 800abba:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800abbe:	f7ff b98f 	b.w	8009ee0 <_vfprintf_r+0x41c>
 800abc2:	9907      	ldr	r1, [sp, #28]
 800abc4:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 800abc8:	f040 809f 	bne.w	800ad0a <_vfprintf_r+0x1246>
 800abcc:	990e      	ldr	r1, [sp, #56]	; 0x38
 800abce:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800abd2:	f1bb 0f00 	cmp.w	fp, #0
 800abd6:	680c      	ldr	r4, [r1, #0]
 800abd8:	f101 0704 	add.w	r7, r1, #4
 800abdc:	f04f 0500 	mov.w	r5, #0
 800abe0:	da12      	bge.n	800ac08 <_vfprintf_r+0x1144>
 800abe2:	970e      	str	r7, [sp, #56]	; 0x38
 800abe4:	2700      	movs	r7, #0
 800abe6:	f7ff b8c8 	b.w	8009d7a <_vfprintf_r+0x2b6>
 800abea:	9a07      	ldr	r2, [sp, #28]
 800abec:	e646      	b.n	800a87c <_vfprintf_r+0xdb8>
 800abee:	9b07      	ldr	r3, [sp, #28]
 800abf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800abf2:	f013 0f40 	tst.w	r3, #64	; 0x40
 800abf6:	4613      	mov	r3, r2
 800abf8:	f000 809f 	beq.w	800ad3a <_vfprintf_r+0x1276>
 800abfc:	3304      	adds	r3, #4
 800abfe:	8814      	ldrh	r4, [r2, #0]
 800ac00:	930e      	str	r3, [sp, #56]	; 0x38
 800ac02:	2500      	movs	r5, #0
 800ac04:	f7ff ba9d 	b.w	800a142 <_vfprintf_r+0x67e>
 800ac08:	9a07      	ldr	r2, [sp, #28]
 800ac0a:	f7ff b917 	b.w	8009e3c <_vfprintf_r+0x378>
 800ac0e:	4614      	mov	r4, r2
 800ac10:	3301      	adds	r3, #1
 800ac12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ac14:	9324      	str	r3, [sp, #144]	; 0x90
 800ac16:	442c      	add	r4, r5
 800ac18:	2b07      	cmp	r3, #7
 800ac1a:	9425      	str	r4, [sp, #148]	; 0x94
 800ac1c:	e889 0024 	stmia.w	r9, {r2, r5}
 800ac20:	f73f ae5e 	bgt.w	800a8e0 <_vfprintf_r+0xe1c>
 800ac24:	f109 0908 	add.w	r9, r9, #8
 800ac28:	e665      	b.n	800a8f6 <_vfprintf_r+0xe32>
 800ac2a:	2700      	movs	r7, #0
 800ac2c:	45bb      	cmp	fp, r7
 800ac2e:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800ac32:	f6ff ac33 	blt.w	800a49c <_vfprintf_r+0x9d8>
 800ac36:	9b07      	ldr	r3, [sp, #28]
 800ac38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac3c:	9307      	str	r3, [sp, #28]
 800ac3e:	e400      	b.n	800a442 <_vfprintf_r+0x97e>
 800ac40:	aa23      	add	r2, sp, #140	; 0x8c
 800ac42:	9908      	ldr	r1, [sp, #32]
 800ac44:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ac46:	f003 f8ed 	bl	800de24 <__sprint_r>
 800ac4a:	2800      	cmp	r0, #0
 800ac4c:	f47f a869 	bne.w	8009d22 <_vfprintf_r+0x25e>
 800ac50:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800ac52:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800ac56:	e443      	b.n	800a4e0 <_vfprintf_r+0xa1c>
 800ac58:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800ac5a:	e418      	b.n	800a48e <_vfprintf_r+0x9ca>
 800ac5c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ac5e:	4ab1      	ldr	r2, [pc, #708]	; (800af24 <_vfprintf_r+0x1460>)
 800ac60:	f8c9 2000 	str.w	r2, [r9]
 800ac64:	3301      	adds	r3, #1
 800ac66:	3401      	adds	r4, #1
 800ac68:	2201      	movs	r2, #1
 800ac6a:	2b07      	cmp	r3, #7
 800ac6c:	9425      	str	r4, [sp, #148]	; 0x94
 800ac6e:	9324      	str	r3, [sp, #144]	; 0x90
 800ac70:	f8c9 2004 	str.w	r2, [r9, #4]
 800ac74:	f300 809d 	bgt.w	800adb2 <_vfprintf_r+0x12ee>
 800ac78:	f109 0908 	add.w	r9, r9, #8
 800ac7c:	b92d      	cbnz	r5, 800ac8a <_vfprintf_r+0x11c6>
 800ac7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ac80:	b91b      	cbnz	r3, 800ac8a <_vfprintf_r+0x11c6>
 800ac82:	9b07      	ldr	r3, [sp, #28]
 800ac84:	07d9      	lsls	r1, r3, #31
 800ac86:	f57f a9f6 	bpl.w	800a076 <_vfprintf_r+0x5b2>
 800ac8a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ac8c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ac8e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ac90:	f8c9 2000 	str.w	r2, [r9]
 800ac94:	3301      	adds	r3, #1
 800ac96:	440c      	add	r4, r1
 800ac98:	2b07      	cmp	r3, #7
 800ac9a:	9425      	str	r4, [sp, #148]	; 0x94
 800ac9c:	f8c9 1004 	str.w	r1, [r9, #4]
 800aca0:	9324      	str	r3, [sp, #144]	; 0x90
 800aca2:	f300 81e9 	bgt.w	800b078 <_vfprintf_r+0x15b4>
 800aca6:	f109 0908 	add.w	r9, r9, #8
 800acaa:	426d      	negs	r5, r5
 800acac:	2d00      	cmp	r5, #0
 800acae:	f340 80be 	ble.w	800ae2e <_vfprintf_r+0x136a>
 800acb2:	4a9d      	ldr	r2, [pc, #628]	; (800af28 <_vfprintf_r+0x1464>)
 800acb4:	920f      	str	r2, [sp, #60]	; 0x3c
 800acb6:	2d10      	cmp	r5, #16
 800acb8:	f340 80e6 	ble.w	800ae88 <_vfprintf_r+0x13c4>
 800acbc:	4622      	mov	r2, r4
 800acbe:	2710      	movs	r7, #16
 800acc0:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800acc4:	9c08      	ldr	r4, [sp, #32]
 800acc6:	e005      	b.n	800acd4 <_vfprintf_r+0x1210>
 800acc8:	f109 0908 	add.w	r9, r9, #8
 800accc:	3d10      	subs	r5, #16
 800acce:	2d10      	cmp	r5, #16
 800acd0:	f340 80d9 	ble.w	800ae86 <_vfprintf_r+0x13c2>
 800acd4:	3301      	adds	r3, #1
 800acd6:	3210      	adds	r2, #16
 800acd8:	2b07      	cmp	r3, #7
 800acda:	9225      	str	r2, [sp, #148]	; 0x94
 800acdc:	9324      	str	r3, [sp, #144]	; 0x90
 800acde:	f8c9 a000 	str.w	sl, [r9]
 800ace2:	f8c9 7004 	str.w	r7, [r9, #4]
 800ace6:	ddef      	ble.n	800acc8 <_vfprintf_r+0x1204>
 800ace8:	aa23      	add	r2, sp, #140	; 0x8c
 800acea:	4621      	mov	r1, r4
 800acec:	4658      	mov	r0, fp
 800acee:	f003 f899 	bl	800de24 <__sprint_r>
 800acf2:	2800      	cmp	r0, #0
 800acf4:	f47f a815 	bne.w	8009d22 <_vfprintf_r+0x25e>
 800acf8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800acfa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800acfc:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800ad00:	e7e4      	b.n	800accc <_vfprintf_r+0x1208>
 800ad02:	f04f 30ff 	mov.w	r0, #4294967295
 800ad06:	f7ff b812 	b.w	8009d2e <_vfprintf_r+0x26a>
 800ad0a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ad0c:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
 800ad10:	4603      	mov	r3, r0
 800ad12:	f1bb 0f00 	cmp.w	fp, #0
 800ad16:	f103 0304 	add.w	r3, r3, #4
 800ad1a:	8804      	ldrh	r4, [r0, #0]
 800ad1c:	f04f 0500 	mov.w	r5, #0
 800ad20:	f2c0 81c4 	blt.w	800b0ac <_vfprintf_r+0x15e8>
 800ad24:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ad28:	9107      	str	r1, [sp, #28]
 800ad2a:	ea54 0105 	orrs.w	r1, r4, r5
 800ad2e:	930e      	str	r3, [sp, #56]	; 0x38
 800ad30:	f43f aba2 	beq.w	800a478 <_vfprintf_r+0x9b4>
 800ad34:	4617      	mov	r7, r2
 800ad36:	f7ff b820 	b.w	8009d7a <_vfprintf_r+0x2b6>
 800ad3a:	3304      	adds	r3, #4
 800ad3c:	6814      	ldr	r4, [r2, #0]
 800ad3e:	930e      	str	r3, [sp, #56]	; 0x38
 800ad40:	2500      	movs	r5, #0
 800ad42:	f7ff b9fe 	b.w	800a142 <_vfprintf_r+0x67e>
 800ad46:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ad48:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	f1bb 0f00 	cmp.w	fp, #0
 800ad52:	f103 0304 	add.w	r3, r3, #4
 800ad56:	8804      	ldrh	r4, [r0, #0]
 800ad58:	f04f 0500 	mov.w	r5, #0
 800ad5c:	f2c0 819a 	blt.w	800b094 <_vfprintf_r+0x15d0>
 800ad60:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ad64:	9107      	str	r1, [sp, #28]
 800ad66:	ea54 0105 	orrs.w	r1, r4, r5
 800ad6a:	930e      	str	r3, [sp, #56]	; 0x38
 800ad6c:	4617      	mov	r7, r2
 800ad6e:	f47f a893 	bne.w	8009e98 <_vfprintf_r+0x3d4>
 800ad72:	f7ff ba4d 	b.w	800a210 <_vfprintf_r+0x74c>
 800ad76:	a821      	add	r0, sp, #132	; 0x84
 800ad78:	a91e      	add	r1, sp, #120	; 0x78
 800ad7a:	9004      	str	r0, [sp, #16]
 800ad7c:	9103      	str	r1, [sp, #12]
 800ad7e:	a81d      	add	r0, sp, #116	; 0x74
 800ad80:	2103      	movs	r1, #3
 800ad82:	9002      	str	r0, [sp, #8]
 800ad84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad86:	f8cd b004 	str.w	fp, [sp, #4]
 800ad8a:	463b      	mov	r3, r7
 800ad8c:	9100      	str	r1, [sp, #0]
 800ad8e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ad90:	f000 fb46 	bl	800b420 <_dtoa_r>
 800ad94:	465d      	mov	r5, fp
 800ad96:	4606      	mov	r6, r0
 800ad98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad9a:	2b46      	cmp	r3, #70	; 0x46
 800ad9c:	eb06 0405 	add.w	r4, r6, r5
 800ada0:	f47f aed2 	bne.w	800ab48 <_vfprintf_r+0x1084>
 800ada4:	7833      	ldrb	r3, [r6, #0]
 800ada6:	2b30      	cmp	r3, #48	; 0x30
 800ada8:	f000 819b 	beq.w	800b0e2 <_vfprintf_r+0x161e>
 800adac:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800adae:	442c      	add	r4, r5
 800adb0:	e6ca      	b.n	800ab48 <_vfprintf_r+0x1084>
 800adb2:	aa23      	add	r2, sp, #140	; 0x8c
 800adb4:	9908      	ldr	r1, [sp, #32]
 800adb6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800adb8:	f003 f834 	bl	800de24 <__sprint_r>
 800adbc:	2800      	cmp	r0, #0
 800adbe:	f47e afb0 	bne.w	8009d22 <_vfprintf_r+0x25e>
 800adc2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800adc4:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800adc6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800adca:	e757      	b.n	800ac7c <_vfprintf_r+0x11b8>
 800adcc:	f1bb 0f00 	cmp.w	fp, #0
 800add0:	bf08      	it	eq
 800add2:	f04f 0b01 	moveq.w	fp, #1
 800add6:	e683      	b.n	800aae0 <_vfprintf_r+0x101c>
 800add8:	9b07      	ldr	r3, [sp, #28]
 800adda:	f043 0320 	orr.w	r3, r3, #32
 800adde:	9307      	str	r3, [sp, #28]
 800ade0:	f108 0801 	add.w	r8, r8, #1
 800ade4:	f898 3000 	ldrb.w	r3, [r8]
 800ade8:	f7fe bedf 	b.w	8009baa <_vfprintf_r+0xe6>
 800adec:	aa23      	add	r2, sp, #140	; 0x8c
 800adee:	9908      	ldr	r1, [sp, #32]
 800adf0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800adf2:	f003 f817 	bl	800de24 <__sprint_r>
 800adf6:	2800      	cmp	r0, #0
 800adf8:	f47e af93 	bne.w	8009d22 <_vfprintf_r+0x25e>
 800adfc:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800adfe:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800ae02:	f7ff bb85 	b.w	800a510 <_vfprintf_r+0xa4c>
 800ae06:	4630      	mov	r0, r6
 800ae08:	f7f5 fcba 	bl	8000780 <strlen>
 800ae0c:	46a3      	mov	fp, r4
 800ae0e:	4603      	mov	r3, r0
 800ae10:	900d      	str	r0, [sp, #52]	; 0x34
 800ae12:	f7ff bb05 	b.w	800a420 <_vfprintf_r+0x95c>
 800ae16:	aa23      	add	r2, sp, #140	; 0x8c
 800ae18:	9908      	ldr	r1, [sp, #32]
 800ae1a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ae1c:	f003 f802 	bl	800de24 <__sprint_r>
 800ae20:	2800      	cmp	r0, #0
 800ae22:	f47e af7e 	bne.w	8009d22 <_vfprintf_r+0x25e>
 800ae26:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800ae28:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ae2a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800ae2e:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ae30:	f8c9 6000 	str.w	r6, [r9]
 800ae34:	3301      	adds	r3, #1
 800ae36:	440c      	add	r4, r1
 800ae38:	2b07      	cmp	r3, #7
 800ae3a:	9425      	str	r4, [sp, #148]	; 0x94
 800ae3c:	9324      	str	r3, [sp, #144]	; 0x90
 800ae3e:	f8c9 1004 	str.w	r1, [r9, #4]
 800ae42:	f77f a916 	ble.w	800a072 <_vfprintf_r+0x5ae>
 800ae46:	e429      	b.n	800a69c <_vfprintf_r+0xbd8>
 800ae48:	272d      	movs	r7, #45	; 0x2d
 800ae4a:	9309      	str	r3, [sp, #36]	; 0x24
 800ae4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae4e:	9307      	str	r3, [sp, #28]
 800ae50:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800ae54:	f04f 0b00 	mov.w	fp, #0
 800ae58:	f7ff b843 	b.w	8009ee2 <_vfprintf_r+0x41e>
 800ae5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ae5e:	1cd8      	adds	r0, r3, #3
 800ae60:	db2b      	blt.n	800aeba <_vfprintf_r+0x13f6>
 800ae62:	459b      	cmp	fp, r3
 800ae64:	db29      	blt.n	800aeba <_vfprintf_r+0x13f6>
 800ae66:	9313      	str	r3, [sp, #76]	; 0x4c
 800ae68:	e691      	b.n	800ab8e <_vfprintf_r+0x10ca>
 800ae6a:	4623      	mov	r3, r4
 800ae6c:	e67f      	b.n	800ab6e <_vfprintf_r+0x10aa>
 800ae6e:	aa23      	add	r2, sp, #140	; 0x8c
 800ae70:	9908      	ldr	r1, [sp, #32]
 800ae72:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ae74:	f002 ffd6 	bl	800de24 <__sprint_r>
 800ae78:	2800      	cmp	r0, #0
 800ae7a:	f47e af52 	bne.w	8009d22 <_vfprintf_r+0x25e>
 800ae7e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800ae80:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800ae84:	e471      	b.n	800a76a <_vfprintf_r+0xca6>
 800ae86:	4614      	mov	r4, r2
 800ae88:	3301      	adds	r3, #1
 800ae8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ae8c:	9324      	str	r3, [sp, #144]	; 0x90
 800ae8e:	442c      	add	r4, r5
 800ae90:	2b07      	cmp	r3, #7
 800ae92:	9425      	str	r4, [sp, #148]	; 0x94
 800ae94:	e889 0024 	stmia.w	r9, {r2, r5}
 800ae98:	dcbd      	bgt.n	800ae16 <_vfprintf_r+0x1352>
 800ae9a:	f109 0908 	add.w	r9, r9, #8
 800ae9e:	e7c6      	b.n	800ae2e <_vfprintf_r+0x136a>
 800aea0:	aa23      	add	r2, sp, #140	; 0x8c
 800aea2:	9908      	ldr	r1, [sp, #32]
 800aea4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aea6:	f002 ffbd 	bl	800de24 <__sprint_r>
 800aeaa:	2800      	cmp	r0, #0
 800aeac:	f47e af39 	bne.w	8009d22 <_vfprintf_r+0x25e>
 800aeb0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aeb2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800aeb4:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800aeb8:	e527      	b.n	800a90a <_vfprintf_r+0xe46>
 800aeba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800aebc:	3a02      	subs	r2, #2
 800aebe:	9211      	str	r2, [sp, #68]	; 0x44
 800aec0:	3b01      	subs	r3, #1
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800aec8:	931d      	str	r3, [sp, #116]	; 0x74
 800aeca:	bfb8      	it	lt
 800aecc:	425b      	neglt	r3, r3
 800aece:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
 800aed2:	bfb4      	ite	lt
 800aed4:	222d      	movlt	r2, #45	; 0x2d
 800aed6:	222b      	movge	r2, #43	; 0x2b
 800aed8:	2b09      	cmp	r3, #9
 800aeda:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
 800aede:	f340 80e7 	ble.w	800b0b0 <_vfprintf_r+0x15ec>
 800aee2:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
 800aee6:	4604      	mov	r4, r0
 800aee8:	4a10      	ldr	r2, [pc, #64]	; (800af2c <_vfprintf_r+0x1468>)
 800aeea:	fb82 2103 	smull	r2, r1, r2, r3
 800aeee:	17da      	asrs	r2, r3, #31
 800aef0:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 800aef4:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800aef8:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 800aefc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800af00:	2a09      	cmp	r2, #9
 800af02:	4613      	mov	r3, r2
 800af04:	f804 1d01 	strb.w	r1, [r4, #-1]!
 800af08:	dcee      	bgt.n	800aee8 <_vfprintf_r+0x1424>
 800af0a:	4621      	mov	r1, r4
 800af0c:	3330      	adds	r3, #48	; 0x30
 800af0e:	b2da      	uxtb	r2, r3
 800af10:	f801 2d01 	strb.w	r2, [r1, #-1]!
 800af14:	4288      	cmp	r0, r1
 800af16:	f240 813f 	bls.w	800b198 <_vfprintf_r+0x16d4>
 800af1a:	f10d 017e 	add.w	r1, sp, #126	; 0x7e
 800af1e:	4623      	mov	r3, r4
 800af20:	e008      	b.n	800af34 <_vfprintf_r+0x1470>
 800af22:	bf00      	nop
 800af24:	0800e7fc 	.word	0x0800e7fc
 800af28:	0800e810 	.word	0x0800e810
 800af2c:	66666667 	.word	0x66666667
 800af30:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af34:	f801 2b01 	strb.w	r2, [r1], #1
 800af38:	4298      	cmp	r0, r3
 800af3a:	d1f9      	bne.n	800af30 <_vfprintf_r+0x146c>
 800af3c:	1c43      	adds	r3, r0, #1
 800af3e:	1b1b      	subs	r3, r3, r4
 800af40:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
 800af44:	4413      	add	r3, r2
 800af46:	aa1f      	add	r2, sp, #124	; 0x7c
 800af48:	1a9b      	subs	r3, r3, r2
 800af4a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800af4c:	9319      	str	r3, [sp, #100]	; 0x64
 800af4e:	2a01      	cmp	r2, #1
 800af50:	4413      	add	r3, r2
 800af52:	930d      	str	r3, [sp, #52]	; 0x34
 800af54:	f340 80db 	ble.w	800b10e <_vfprintf_r+0x164a>
 800af58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af5a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800af5c:	4413      	add	r3, r2
 800af5e:	2200      	movs	r2, #0
 800af60:	930d      	str	r3, [sp, #52]	; 0x34
 800af62:	9213      	str	r2, [sp, #76]	; 0x4c
 800af64:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800af68:	e61f      	b.n	800abaa <_vfprintf_r+0x10e6>
 800af6a:	aa23      	add	r2, sp, #140	; 0x8c
 800af6c:	9908      	ldr	r1, [sp, #32]
 800af6e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800af70:	f002 ff58 	bl	800de24 <__sprint_r>
 800af74:	2800      	cmp	r0, #0
 800af76:	f47e aed4 	bne.w	8009d22 <_vfprintf_r+0x25e>
 800af7a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800af7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800af7e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800af80:	1ad3      	subs	r3, r2, r3
 800af82:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800af86:	e4d8      	b.n	800a93a <_vfprintf_r+0xe76>
 800af88:	2d06      	cmp	r5, #6
 800af8a:	462b      	mov	r3, r5
 800af8c:	bf28      	it	cs
 800af8e:	2306      	movcs	r3, #6
 800af90:	930d      	str	r3, [sp, #52]	; 0x34
 800af92:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800af96:	46b3      	mov	fp, r6
 800af98:	970e      	str	r7, [sp, #56]	; 0x38
 800af9a:	9613      	str	r6, [sp, #76]	; 0x4c
 800af9c:	4637      	mov	r7, r6
 800af9e:	9309      	str	r3, [sp, #36]	; 0x24
 800afa0:	4e85      	ldr	r6, [pc, #532]	; (800b1b8 <_vfprintf_r+0x16f4>)
 800afa2:	f7fe bf9d 	b.w	8009ee0 <_vfprintf_r+0x41c>
 800afa6:	a821      	add	r0, sp, #132	; 0x84
 800afa8:	a91e      	add	r1, sp, #120	; 0x78
 800afaa:	9004      	str	r0, [sp, #16]
 800afac:	9103      	str	r1, [sp, #12]
 800afae:	a81d      	add	r0, sp, #116	; 0x74
 800afb0:	2103      	movs	r1, #3
 800afb2:	9002      	str	r0, [sp, #8]
 800afb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afb6:	f8cd b004 	str.w	fp, [sp, #4]
 800afba:	463b      	mov	r3, r7
 800afbc:	9100      	str	r1, [sp, #0]
 800afbe:	980a      	ldr	r0, [sp, #40]	; 0x28
 800afc0:	f000 fa2e 	bl	800b420 <_dtoa_r>
 800afc4:	465d      	mov	r5, fp
 800afc6:	4606      	mov	r6, r0
 800afc8:	eb00 040b 	add.w	r4, r0, fp
 800afcc:	e6ea      	b.n	800ada4 <_vfprintf_r+0x12e0>
 800afce:	9307      	str	r3, [sp, #28]
 800afd0:	f7ff b8d5 	b.w	800a17e <_vfprintf_r+0x6ba>
 800afd4:	f04f 0b06 	mov.w	fp, #6
 800afd8:	e582      	b.n	800aae0 <_vfprintf_r+0x101c>
 800afda:	272d      	movs	r7, #45	; 0x2d
 800afdc:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800afe0:	f7ff b9b7 	b.w	800a352 <_vfprintf_r+0x88e>
 800afe4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800afe6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800afe8:	4413      	add	r3, r2
 800afea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800afec:	930d      	str	r3, [sp, #52]	; 0x34
 800afee:	2a00      	cmp	r2, #0
 800aff0:	f340 8085 	ble.w	800b0fe <_vfprintf_r+0x163a>
 800aff4:	2267      	movs	r2, #103	; 0x67
 800aff6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800affa:	9211      	str	r2, [sp, #68]	; 0x44
 800affc:	e5d5      	b.n	800abaa <_vfprintf_r+0x10e6>
 800affe:	2b00      	cmp	r3, #0
 800b000:	f340 808f 	ble.w	800b122 <_vfprintf_r+0x165e>
 800b004:	f1bb 0f00 	cmp.w	fp, #0
 800b008:	d15c      	bne.n	800b0c4 <_vfprintf_r+0x1600>
 800b00a:	9a07      	ldr	r2, [sp, #28]
 800b00c:	07d1      	lsls	r1, r2, #31
 800b00e:	d459      	bmi.n	800b0c4 <_vfprintf_r+0x1600>
 800b010:	461a      	mov	r2, r3
 800b012:	920d      	str	r2, [sp, #52]	; 0x34
 800b014:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b018:	e5c7      	b.n	800abaa <_vfprintf_r+0x10e6>
 800b01a:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 800b01e:	970e      	str	r7, [sp, #56]	; 0x38
 800b020:	9309      	str	r3, [sp, #36]	; 0x24
 800b022:	950d      	str	r5, [sp, #52]	; 0x34
 800b024:	4683      	mov	fp, r0
 800b026:	9013      	str	r0, [sp, #76]	; 0x4c
 800b028:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800b02c:	f7fe bf58 	b.w	8009ee0 <_vfprintf_r+0x41c>
 800b030:	9b07      	ldr	r3, [sp, #28]
 800b032:	07db      	lsls	r3, r3, #31
 800b034:	465f      	mov	r7, fp
 800b036:	d505      	bpl.n	800b044 <_vfprintf_r+0x1580>
 800b038:	ae40      	add	r6, sp, #256	; 0x100
 800b03a:	2330      	movs	r3, #48	; 0x30
 800b03c:	f806 3d41 	strb.w	r3, [r6, #-65]!
 800b040:	f7fe bf44 	b.w	8009ecc <_vfprintf_r+0x408>
 800b044:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 800b048:	ae30      	add	r6, sp, #192	; 0xc0
 800b04a:	f7fe bf42 	b.w	8009ed2 <_vfprintf_r+0x40e>
 800b04e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b050:	2b47      	cmp	r3, #71	; 0x47
 800b052:	f47f ad78 	bne.w	800ab46 <_vfprintf_r+0x1082>
 800b056:	9b07      	ldr	r3, [sp, #28]
 800b058:	07dc      	lsls	r4, r3, #31
 800b05a:	f53f ae9d 	bmi.w	800ad98 <_vfprintf_r+0x12d4>
 800b05e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b060:	1b9b      	subs	r3, r3, r6
 800b062:	9312      	str	r3, [sp, #72]	; 0x48
 800b064:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b066:	2b47      	cmp	r3, #71	; 0x47
 800b068:	f43f aef8 	beq.w	800ae5c <_vfprintf_r+0x1398>
 800b06c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b06e:	e727      	b.n	800aec0 <_vfprintf_r+0x13fc>
 800b070:	46a0      	mov	r8, r4
 800b072:	2500      	movs	r5, #0
 800b074:	f7fe bd9b 	b.w	8009bae <_vfprintf_r+0xea>
 800b078:	aa23      	add	r2, sp, #140	; 0x8c
 800b07a:	9908      	ldr	r1, [sp, #32]
 800b07c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b07e:	f002 fed1 	bl	800de24 <__sprint_r>
 800b082:	2800      	cmp	r0, #0
 800b084:	f47e ae4d 	bne.w	8009d22 <_vfprintf_r+0x25e>
 800b088:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800b08a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800b08c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b08e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b092:	e60a      	b.n	800acaa <_vfprintf_r+0x11e6>
 800b094:	930e      	str	r3, [sp, #56]	; 0x38
 800b096:	4617      	mov	r7, r2
 800b098:	e40d      	b.n	800a8b6 <_vfprintf_r+0xdf2>
 800b09a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b09c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b09e:	4413      	add	r3, r2
 800b0a0:	2267      	movs	r2, #103	; 0x67
 800b0a2:	930d      	str	r3, [sp, #52]	; 0x34
 800b0a4:	9211      	str	r2, [sp, #68]	; 0x44
 800b0a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b0aa:	e57e      	b.n	800abaa <_vfprintf_r+0x10e6>
 800b0ac:	930e      	str	r3, [sp, #56]	; 0x38
 800b0ae:	e599      	b.n	800abe4 <_vfprintf_r+0x1120>
 800b0b0:	3330      	adds	r3, #48	; 0x30
 800b0b2:	2230      	movs	r2, #48	; 0x30
 800b0b4:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 800b0b8:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
 800b0bc:	ab20      	add	r3, sp, #128	; 0x80
 800b0be:	e742      	b.n	800af46 <_vfprintf_r+0x1482>
 800b0c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0c2:	e554      	b.n	800ab6e <_vfprintf_r+0x10aa>
 800b0c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b0c6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b0c8:	189d      	adds	r5, r3, r2
 800b0ca:	eb05 030b 	add.w	r3, r5, fp
 800b0ce:	930d      	str	r3, [sp, #52]	; 0x34
 800b0d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b0d4:	e569      	b.n	800abaa <_vfprintf_r+0x10e6>
 800b0d6:	4e39      	ldr	r6, [pc, #228]	; (800b1bc <_vfprintf_r+0x16f8>)
 800b0d8:	4b39      	ldr	r3, [pc, #228]	; (800b1c0 <_vfprintf_r+0x16fc>)
 800b0da:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800b0de:	f7ff b93a 	b.w	800a356 <_vfprintf_r+0x892>
 800b0e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b0e4:	4639      	mov	r1, r7
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	f7f6 f829 	bl	8001140 <__aeabi_dcmpeq>
 800b0ee:	2800      	cmp	r0, #0
 800b0f0:	f47f ae5c 	bne.w	800adac <_vfprintf_r+0x12e8>
 800b0f4:	f1c5 0501 	rsb	r5, r5, #1
 800b0f8:	951d      	str	r5, [sp, #116]	; 0x74
 800b0fa:	442c      	add	r4, r5
 800b0fc:	e524      	b.n	800ab48 <_vfprintf_r+0x1084>
 800b0fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b100:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b102:	f1c3 0301 	rsb	r3, r3, #1
 800b106:	441a      	add	r2, r3
 800b108:	4613      	mov	r3, r2
 800b10a:	920d      	str	r2, [sp, #52]	; 0x34
 800b10c:	e772      	b.n	800aff4 <_vfprintf_r+0x1530>
 800b10e:	9b07      	ldr	r3, [sp, #28]
 800b110:	f013 0301 	ands.w	r3, r3, #1
 800b114:	f47f af20 	bne.w	800af58 <_vfprintf_r+0x1494>
 800b118:	9313      	str	r3, [sp, #76]	; 0x4c
 800b11a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b11c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b120:	e543      	b.n	800abaa <_vfprintf_r+0x10e6>
 800b122:	f1bb 0f00 	cmp.w	fp, #0
 800b126:	d102      	bne.n	800b12e <_vfprintf_r+0x166a>
 800b128:	9b07      	ldr	r3, [sp, #28]
 800b12a:	07da      	lsls	r2, r3, #31
 800b12c:	d507      	bpl.n	800b13e <_vfprintf_r+0x167a>
 800b12e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b130:	1c5d      	adds	r5, r3, #1
 800b132:	eb05 030b 	add.w	r3, r5, fp
 800b136:	930d      	str	r3, [sp, #52]	; 0x34
 800b138:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b13c:	e535      	b.n	800abaa <_vfprintf_r+0x10e6>
 800b13e:	2301      	movs	r3, #1
 800b140:	930d      	str	r3, [sp, #52]	; 0x34
 800b142:	e532      	b.n	800abaa <_vfprintf_r+0x10e6>
 800b144:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b146:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b14a:	6805      	ldr	r5, [r0, #0]
 800b14c:	3004      	adds	r0, #4
 800b14e:	2d00      	cmp	r5, #0
 800b150:	900e      	str	r0, [sp, #56]	; 0x38
 800b152:	46a0      	mov	r8, r4
 800b154:	f6be ad29 	bge.w	8009baa <_vfprintf_r+0xe6>
 800b158:	f04f 35ff 	mov.w	r5, #4294967295
 800b15c:	f7fe bd25 	b.w	8009baa <_vfprintf_r+0xe6>
 800b160:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800b164:	f7ff b878 	b.w	800a258 <_vfprintf_r+0x794>
 800b168:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800b16c:	f7ff b82f 	b.w	800a1ce <_vfprintf_r+0x70a>
 800b170:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800b174:	f7fe bfd7 	b.w	800a126 <_vfprintf_r+0x662>
 800b178:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800b17c:	f7fe be6d 	b.w	8009e5a <_vfprintf_r+0x396>
 800b180:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800b184:	f7ff b967 	b.w	800a456 <_vfprintf_r+0x992>
 800b188:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800b18c:	f7fe bddb 	b.w	8009d46 <_vfprintf_r+0x282>
 800b190:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800b194:	f7fe be38 	b.w	8009e08 <_vfprintf_r+0x344>
 800b198:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
 800b19c:	e6d3      	b.n	800af46 <_vfprintf_r+0x1482>
 800b19e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800b1a2:	f7ff b88b 	b.w	800a2bc <_vfprintf_r+0x7f8>
 800b1a6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800b1aa:	f7ff b8a4 	b.w	800a2f6 <_vfprintf_r+0x832>
 800b1ae:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800b1b2:	f7ff b8f4 	b.w	800a39e <_vfprintf_r+0x8da>
 800b1b6:	bf00      	nop
 800b1b8:	0800e7f4 	.word	0x0800e7f4
 800b1bc:	0800e7c8 	.word	0x0800e7c8
 800b1c0:	0800e7c4 	.word	0x0800e7c4

0800b1c4 <__sbprintf>:
 800b1c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1c6:	460c      	mov	r4, r1
 800b1c8:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 800b1cc:	8989      	ldrh	r1, [r1, #12]
 800b1ce:	6e66      	ldr	r6, [r4, #100]	; 0x64
 800b1d0:	89e5      	ldrh	r5, [r4, #14]
 800b1d2:	9619      	str	r6, [sp, #100]	; 0x64
 800b1d4:	f021 0102 	bic.w	r1, r1, #2
 800b1d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b1da:	f8ad 500e 	strh.w	r5, [sp, #14]
 800b1de:	2500      	movs	r5, #0
 800b1e0:	69e7      	ldr	r7, [r4, #28]
 800b1e2:	f8ad 100c 	strh.w	r1, [sp, #12]
 800b1e6:	9609      	str	r6, [sp, #36]	; 0x24
 800b1e8:	9506      	str	r5, [sp, #24]
 800b1ea:	ae1a      	add	r6, sp, #104	; 0x68
 800b1ec:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800b1f0:	4669      	mov	r1, sp
 800b1f2:	9600      	str	r6, [sp, #0]
 800b1f4:	9604      	str	r6, [sp, #16]
 800b1f6:	9502      	str	r5, [sp, #8]
 800b1f8:	9505      	str	r5, [sp, #20]
 800b1fa:	9707      	str	r7, [sp, #28]
 800b1fc:	4606      	mov	r6, r0
 800b1fe:	f7fe fc61 	bl	8009ac4 <_vfprintf_r>
 800b202:	1e05      	subs	r5, r0, #0
 800b204:	db07      	blt.n	800b216 <__sbprintf+0x52>
 800b206:	4630      	mov	r0, r6
 800b208:	4669      	mov	r1, sp
 800b20a:	f001 f8d9 	bl	800c3c0 <_fflush_r>
 800b20e:	2800      	cmp	r0, #0
 800b210:	bf18      	it	ne
 800b212:	f04f 35ff 	movne.w	r5, #4294967295
 800b216:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800b21a:	065b      	lsls	r3, r3, #25
 800b21c:	d503      	bpl.n	800b226 <__sbprintf+0x62>
 800b21e:	89a3      	ldrh	r3, [r4, #12]
 800b220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b224:	81a3      	strh	r3, [r4, #12]
 800b226:	4628      	mov	r0, r5
 800b228:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 800b22c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b22e:	bf00      	nop

0800b230 <__swsetup_r>:
 800b230:	b538      	push	{r3, r4, r5, lr}
 800b232:	4b30      	ldr	r3, [pc, #192]	; (800b2f4 <__swsetup_r+0xc4>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	4605      	mov	r5, r0
 800b238:	460c      	mov	r4, r1
 800b23a:	b113      	cbz	r3, 800b242 <__swsetup_r+0x12>
 800b23c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b23e:	2a00      	cmp	r2, #0
 800b240:	d038      	beq.n	800b2b4 <__swsetup_r+0x84>
 800b242:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b246:	b293      	uxth	r3, r2
 800b248:	0718      	lsls	r0, r3, #28
 800b24a:	d50c      	bpl.n	800b266 <__swsetup_r+0x36>
 800b24c:	6920      	ldr	r0, [r4, #16]
 800b24e:	b1a8      	cbz	r0, 800b27c <__swsetup_r+0x4c>
 800b250:	f013 0201 	ands.w	r2, r3, #1
 800b254:	d01e      	beq.n	800b294 <__swsetup_r+0x64>
 800b256:	6963      	ldr	r3, [r4, #20]
 800b258:	2200      	movs	r2, #0
 800b25a:	425b      	negs	r3, r3
 800b25c:	61a3      	str	r3, [r4, #24]
 800b25e:	60a2      	str	r2, [r4, #8]
 800b260:	b1f0      	cbz	r0, 800b2a0 <__swsetup_r+0x70>
 800b262:	2000      	movs	r0, #0
 800b264:	bd38      	pop	{r3, r4, r5, pc}
 800b266:	06d9      	lsls	r1, r3, #27
 800b268:	d53c      	bpl.n	800b2e4 <__swsetup_r+0xb4>
 800b26a:	0758      	lsls	r0, r3, #29
 800b26c:	d426      	bmi.n	800b2bc <__swsetup_r+0x8c>
 800b26e:	6920      	ldr	r0, [r4, #16]
 800b270:	f042 0308 	orr.w	r3, r2, #8
 800b274:	81a3      	strh	r3, [r4, #12]
 800b276:	b29b      	uxth	r3, r3
 800b278:	2800      	cmp	r0, #0
 800b27a:	d1e9      	bne.n	800b250 <__swsetup_r+0x20>
 800b27c:	f403 7220 	and.w	r2, r3, #640	; 0x280
 800b280:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800b284:	d0e4      	beq.n	800b250 <__swsetup_r+0x20>
 800b286:	4628      	mov	r0, r5
 800b288:	4621      	mov	r1, r4
 800b28a:	f001 fc57 	bl	800cb3c <__smakebuf_r>
 800b28e:	89a3      	ldrh	r3, [r4, #12]
 800b290:	6920      	ldr	r0, [r4, #16]
 800b292:	e7dd      	b.n	800b250 <__swsetup_r+0x20>
 800b294:	0799      	lsls	r1, r3, #30
 800b296:	bf58      	it	pl
 800b298:	6962      	ldrpl	r2, [r4, #20]
 800b29a:	60a2      	str	r2, [r4, #8]
 800b29c:	2800      	cmp	r0, #0
 800b29e:	d1e0      	bne.n	800b262 <__swsetup_r+0x32>
 800b2a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2a4:	061a      	lsls	r2, r3, #24
 800b2a6:	d5dd      	bpl.n	800b264 <__swsetup_r+0x34>
 800b2a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2ac:	81a3      	strh	r3, [r4, #12]
 800b2ae:	f04f 30ff 	mov.w	r0, #4294967295
 800b2b2:	bd38      	pop	{r3, r4, r5, pc}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f001 f917 	bl	800c4e8 <__sinit>
 800b2ba:	e7c2      	b.n	800b242 <__swsetup_r+0x12>
 800b2bc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b2be:	b151      	cbz	r1, 800b2d6 <__swsetup_r+0xa6>
 800b2c0:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800b2c4:	4299      	cmp	r1, r3
 800b2c6:	d004      	beq.n	800b2d2 <__swsetup_r+0xa2>
 800b2c8:	4628      	mov	r0, r5
 800b2ca:	f001 f965 	bl	800c598 <_free_r>
 800b2ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	6323      	str	r3, [r4, #48]	; 0x30
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	6920      	ldr	r0, [r4, #16]
 800b2da:	6063      	str	r3, [r4, #4]
 800b2dc:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 800b2e0:	6020      	str	r0, [r4, #0]
 800b2e2:	e7c5      	b.n	800b270 <__swsetup_r+0x40>
 800b2e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b2e8:	2309      	movs	r3, #9
 800b2ea:	602b      	str	r3, [r5, #0]
 800b2ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b2f0:	81a2      	strh	r2, [r4, #12]
 800b2f2:	bd38      	pop	{r3, r4, r5, pc}
 800b2f4:	20000460 	.word	0x20000460

0800b2f8 <quorem>:
 800b2f8:	6902      	ldr	r2, [r0, #16]
 800b2fa:	690b      	ldr	r3, [r1, #16]
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	f300 808d 	bgt.w	800b41c <quorem+0x124>
 800b302:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b306:	f103 38ff 	add.w	r8, r3, #4294967295
 800b30a:	f101 0714 	add.w	r7, r1, #20
 800b30e:	f100 0b14 	add.w	fp, r0, #20
 800b312:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 800b316:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 800b31a:	ea4f 0488 	mov.w	r4, r8, lsl #2
 800b31e:	b083      	sub	sp, #12
 800b320:	3201      	adds	r2, #1
 800b322:	fbb3 f9f2 	udiv	r9, r3, r2
 800b326:	eb0b 0304 	add.w	r3, fp, r4
 800b32a:	9400      	str	r4, [sp, #0]
 800b32c:	eb07 0a04 	add.w	sl, r7, r4
 800b330:	9301      	str	r3, [sp, #4]
 800b332:	f1b9 0f00 	cmp.w	r9, #0
 800b336:	d039      	beq.n	800b3ac <quorem+0xb4>
 800b338:	2500      	movs	r5, #0
 800b33a:	46bc      	mov	ip, r7
 800b33c:	46de      	mov	lr, fp
 800b33e:	462b      	mov	r3, r5
 800b340:	f85c 6b04 	ldr.w	r6, [ip], #4
 800b344:	f8de 2000 	ldr.w	r2, [lr]
 800b348:	b2b4      	uxth	r4, r6
 800b34a:	fb09 5504 	mla	r5, r9, r4, r5
 800b34e:	0c36      	lsrs	r6, r6, #16
 800b350:	0c2c      	lsrs	r4, r5, #16
 800b352:	fb09 4406 	mla	r4, r9, r6, r4
 800b356:	b2ad      	uxth	r5, r5
 800b358:	1b5b      	subs	r3, r3, r5
 800b35a:	b2a6      	uxth	r6, r4
 800b35c:	fa13 f382 	uxtah	r3, r3, r2
 800b360:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
 800b364:	eb06 4623 	add.w	r6, r6, r3, asr #16
 800b368:	b29b      	uxth	r3, r3
 800b36a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800b36e:	45e2      	cmp	sl, ip
 800b370:	f84e 3b04 	str.w	r3, [lr], #4
 800b374:	ea4f 4514 	mov.w	r5, r4, lsr #16
 800b378:	ea4f 4326 	mov.w	r3, r6, asr #16
 800b37c:	d2e0      	bcs.n	800b340 <quorem+0x48>
 800b37e:	9b00      	ldr	r3, [sp, #0]
 800b380:	f85b 3003 	ldr.w	r3, [fp, r3]
 800b384:	b993      	cbnz	r3, 800b3ac <quorem+0xb4>
 800b386:	9c01      	ldr	r4, [sp, #4]
 800b388:	1f23      	subs	r3, r4, #4
 800b38a:	459b      	cmp	fp, r3
 800b38c:	d20c      	bcs.n	800b3a8 <quorem+0xb0>
 800b38e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800b392:	b94b      	cbnz	r3, 800b3a8 <quorem+0xb0>
 800b394:	f1a4 0308 	sub.w	r3, r4, #8
 800b398:	e002      	b.n	800b3a0 <quorem+0xa8>
 800b39a:	681a      	ldr	r2, [r3, #0]
 800b39c:	3b04      	subs	r3, #4
 800b39e:	b91a      	cbnz	r2, 800b3a8 <quorem+0xb0>
 800b3a0:	459b      	cmp	fp, r3
 800b3a2:	f108 38ff 	add.w	r8, r8, #4294967295
 800b3a6:	d3f8      	bcc.n	800b39a <quorem+0xa2>
 800b3a8:	f8c0 8010 	str.w	r8, [r0, #16]
 800b3ac:	4604      	mov	r4, r0
 800b3ae:	f002 f931 	bl	800d614 <__mcmp>
 800b3b2:	2800      	cmp	r0, #0
 800b3b4:	db2e      	blt.n	800b414 <quorem+0x11c>
 800b3b6:	f109 0901 	add.w	r9, r9, #1
 800b3ba:	465d      	mov	r5, fp
 800b3bc:	2300      	movs	r3, #0
 800b3be:	f857 1b04 	ldr.w	r1, [r7], #4
 800b3c2:	6828      	ldr	r0, [r5, #0]
 800b3c4:	b28a      	uxth	r2, r1
 800b3c6:	1a9a      	subs	r2, r3, r2
 800b3c8:	0c09      	lsrs	r1, r1, #16
 800b3ca:	fa12 f280 	uxtah	r2, r2, r0
 800b3ce:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 800b3d2:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800b3d6:	b291      	uxth	r1, r2
 800b3d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800b3dc:	45ba      	cmp	sl, r7
 800b3de:	f845 1b04 	str.w	r1, [r5], #4
 800b3e2:	ea4f 4323 	mov.w	r3, r3, asr #16
 800b3e6:	d2ea      	bcs.n	800b3be <quorem+0xc6>
 800b3e8:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 800b3ec:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 800b3f0:	b982      	cbnz	r2, 800b414 <quorem+0x11c>
 800b3f2:	1f1a      	subs	r2, r3, #4
 800b3f4:	4593      	cmp	fp, r2
 800b3f6:	d20b      	bcs.n	800b410 <quorem+0x118>
 800b3f8:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800b3fc:	b942      	cbnz	r2, 800b410 <quorem+0x118>
 800b3fe:	3b08      	subs	r3, #8
 800b400:	e002      	b.n	800b408 <quorem+0x110>
 800b402:	681a      	ldr	r2, [r3, #0]
 800b404:	3b04      	subs	r3, #4
 800b406:	b91a      	cbnz	r2, 800b410 <quorem+0x118>
 800b408:	459b      	cmp	fp, r3
 800b40a:	f108 38ff 	add.w	r8, r8, #4294967295
 800b40e:	d3f8      	bcc.n	800b402 <quorem+0x10a>
 800b410:	f8c4 8010 	str.w	r8, [r4, #16]
 800b414:	4648      	mov	r0, r9
 800b416:	b003      	add	sp, #12
 800b418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b41c:	2000      	movs	r0, #0
 800b41e:	4770      	bx	lr

0800b420 <_dtoa_r>:
 800b420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b424:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800b426:	b097      	sub	sp, #92	; 0x5c
 800b428:	4681      	mov	r9, r0
 800b42a:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800b42c:	4692      	mov	sl, r2
 800b42e:	469b      	mov	fp, r3
 800b430:	b149      	cbz	r1, 800b446 <_dtoa_r+0x26>
 800b432:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b434:	604a      	str	r2, [r1, #4]
 800b436:	2301      	movs	r3, #1
 800b438:	4093      	lsls	r3, r2
 800b43a:	608b      	str	r3, [r1, #8]
 800b43c:	f001 ff08 	bl	800d250 <_Bfree>
 800b440:	2300      	movs	r3, #0
 800b442:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 800b446:	f1bb 0f00 	cmp.w	fp, #0
 800b44a:	46d8      	mov	r8, fp
 800b44c:	db33      	blt.n	800b4b6 <_dtoa_r+0x96>
 800b44e:	2300      	movs	r3, #0
 800b450:	6023      	str	r3, [r4, #0]
 800b452:	4ba5      	ldr	r3, [pc, #660]	; (800b6e8 <_dtoa_r+0x2c8>)
 800b454:	461a      	mov	r2, r3
 800b456:	ea08 0303 	and.w	r3, r8, r3
 800b45a:	4293      	cmp	r3, r2
 800b45c:	d014      	beq.n	800b488 <_dtoa_r+0x68>
 800b45e:	4650      	mov	r0, sl
 800b460:	4659      	mov	r1, fp
 800b462:	2200      	movs	r2, #0
 800b464:	2300      	movs	r3, #0
 800b466:	f7f5 fe6b 	bl	8001140 <__aeabi_dcmpeq>
 800b46a:	4605      	mov	r5, r0
 800b46c:	b348      	cbz	r0, 800b4c2 <_dtoa_r+0xa2>
 800b46e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b470:	2301      	movs	r3, #1
 800b472:	6013      	str	r3, [r2, #0]
 800b474:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b476:	2b00      	cmp	r3, #0
 800b478:	f000 80c5 	beq.w	800b606 <_dtoa_r+0x1e6>
 800b47c:	489b      	ldr	r0, [pc, #620]	; (800b6ec <_dtoa_r+0x2cc>)
 800b47e:	6018      	str	r0, [r3, #0]
 800b480:	3801      	subs	r0, #1
 800b482:	b017      	add	sp, #92	; 0x5c
 800b484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b488:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b48a:	f242 730f 	movw	r3, #9999	; 0x270f
 800b48e:	6013      	str	r3, [r2, #0]
 800b490:	f1ba 0f00 	cmp.w	sl, #0
 800b494:	f000 80a2 	beq.w	800b5dc <_dtoa_r+0x1bc>
 800b498:	4895      	ldr	r0, [pc, #596]	; (800b6f0 <_dtoa_r+0x2d0>)
 800b49a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d0f0      	beq.n	800b482 <_dtoa_r+0x62>
 800b4a0:	78c3      	ldrb	r3, [r0, #3]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	f000 80b1 	beq.w	800b60a <_dtoa_r+0x1ea>
 800b4a8:	f100 0308 	add.w	r3, r0, #8
 800b4ac:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b4ae:	6013      	str	r3, [r2, #0]
 800b4b0:	b017      	add	sp, #92	; 0x5c
 800b4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
 800b4bc:	6023      	str	r3, [r4, #0]
 800b4be:	46c3      	mov	fp, r8
 800b4c0:	e7c7      	b.n	800b452 <_dtoa_r+0x32>
 800b4c2:	aa14      	add	r2, sp, #80	; 0x50
 800b4c4:	ab15      	add	r3, sp, #84	; 0x54
 800b4c6:	9201      	str	r2, [sp, #4]
 800b4c8:	9300      	str	r3, [sp, #0]
 800b4ca:	4652      	mov	r2, sl
 800b4cc:	465b      	mov	r3, fp
 800b4ce:	4648      	mov	r0, r9
 800b4d0:	f002 f94a 	bl	800d768 <__d2b>
 800b4d4:	ea5f 5418 	movs.w	r4, r8, lsr #20
 800b4d8:	9008      	str	r0, [sp, #32]
 800b4da:	f040 8088 	bne.w	800b5ee <_dtoa_r+0x1ce>
 800b4de:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800b4e0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800b4e2:	442c      	add	r4, r5
 800b4e4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800b4e8:	2b20      	cmp	r3, #32
 800b4ea:	f340 8291 	ble.w	800ba10 <_dtoa_r+0x5f0>
 800b4ee:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800b4f2:	f204 4012 	addw	r0, r4, #1042	; 0x412
 800b4f6:	fa08 f803 	lsl.w	r8, r8, r3
 800b4fa:	fa2a f000 	lsr.w	r0, sl, r0
 800b4fe:	ea40 0008 	orr.w	r0, r0, r8
 800b502:	f7f5 fb3f 	bl	8000b84 <__aeabi_ui2d>
 800b506:	2301      	movs	r3, #1
 800b508:	3c01      	subs	r4, #1
 800b50a:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800b50e:	9310      	str	r3, [sp, #64]	; 0x40
 800b510:	2200      	movs	r2, #0
 800b512:	4b78      	ldr	r3, [pc, #480]	; (800b6f4 <_dtoa_r+0x2d4>)
 800b514:	f7f5 f9f8 	bl	8000908 <__aeabi_dsub>
 800b518:	a36d      	add	r3, pc, #436	; (adr r3, 800b6d0 <_dtoa_r+0x2b0>)
 800b51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b51e:	f7f5 fba7 	bl	8000c70 <__aeabi_dmul>
 800b522:	a36d      	add	r3, pc, #436	; (adr r3, 800b6d8 <_dtoa_r+0x2b8>)
 800b524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b528:	f7f5 f9f0 	bl	800090c <__adddf3>
 800b52c:	4606      	mov	r6, r0
 800b52e:	4620      	mov	r0, r4
 800b530:	460f      	mov	r7, r1
 800b532:	f7f5 fb37 	bl	8000ba4 <__aeabi_i2d>
 800b536:	a36a      	add	r3, pc, #424	; (adr r3, 800b6e0 <_dtoa_r+0x2c0>)
 800b538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b53c:	f7f5 fb98 	bl	8000c70 <__aeabi_dmul>
 800b540:	4602      	mov	r2, r0
 800b542:	460b      	mov	r3, r1
 800b544:	4630      	mov	r0, r6
 800b546:	4639      	mov	r1, r7
 800b548:	f7f5 f9e0 	bl	800090c <__adddf3>
 800b54c:	4606      	mov	r6, r0
 800b54e:	460f      	mov	r7, r1
 800b550:	f7f5 fe3e 	bl	80011d0 <__aeabi_d2iz>
 800b554:	2200      	movs	r2, #0
 800b556:	9004      	str	r0, [sp, #16]
 800b558:	2300      	movs	r3, #0
 800b55a:	4630      	mov	r0, r6
 800b55c:	4639      	mov	r1, r7
 800b55e:	f7f5 fdf9 	bl	8001154 <__aeabi_dcmplt>
 800b562:	2800      	cmp	r0, #0
 800b564:	f040 8230 	bne.w	800b9c8 <_dtoa_r+0x5a8>
 800b568:	9e04      	ldr	r6, [sp, #16]
 800b56a:	2e16      	cmp	r6, #22
 800b56c:	f200 8229 	bhi.w	800b9c2 <_dtoa_r+0x5a2>
 800b570:	4b61      	ldr	r3, [pc, #388]	; (800b6f8 <_dtoa_r+0x2d8>)
 800b572:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b576:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b57a:	4652      	mov	r2, sl
 800b57c:	465b      	mov	r3, fp
 800b57e:	f7f5 fe07 	bl	8001190 <__aeabi_dcmpgt>
 800b582:	2800      	cmp	r0, #0
 800b584:	f000 8249 	beq.w	800ba1a <_dtoa_r+0x5fa>
 800b588:	1e73      	subs	r3, r6, #1
 800b58a:	9304      	str	r3, [sp, #16]
 800b58c:	2300      	movs	r3, #0
 800b58e:	930c      	str	r3, [sp, #48]	; 0x30
 800b590:	1b2c      	subs	r4, r5, r4
 800b592:	1e63      	subs	r3, r4, #1
 800b594:	9302      	str	r3, [sp, #8]
 800b596:	f100 8232 	bmi.w	800b9fe <_dtoa_r+0x5de>
 800b59a:	2300      	movs	r3, #0
 800b59c:	9305      	str	r3, [sp, #20]
 800b59e:	9b04      	ldr	r3, [sp, #16]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	f2c0 8223 	blt.w	800b9ec <_dtoa_r+0x5cc>
 800b5a6:	9a02      	ldr	r2, [sp, #8]
 800b5a8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b5aa:	4611      	mov	r1, r2
 800b5ac:	4419      	add	r1, r3
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	9102      	str	r1, [sp, #8]
 800b5b2:	930a      	str	r3, [sp, #40]	; 0x28
 800b5b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b5b6:	2b09      	cmp	r3, #9
 800b5b8:	d829      	bhi.n	800b60e <_dtoa_r+0x1ee>
 800b5ba:	2b05      	cmp	r3, #5
 800b5bc:	f340 8658 	ble.w	800c270 <_dtoa_r+0xe50>
 800b5c0:	3b04      	subs	r3, #4
 800b5c2:	9320      	str	r3, [sp, #128]	; 0x80
 800b5c4:	2500      	movs	r5, #0
 800b5c6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b5c8:	3b02      	subs	r3, #2
 800b5ca:	2b03      	cmp	r3, #3
 800b5cc:	f200 8635 	bhi.w	800c23a <_dtoa_r+0xe1a>
 800b5d0:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b5d4:	0228032c 	.word	0x0228032c
 800b5d8:	04590337 	.word	0x04590337
 800b5dc:	4b44      	ldr	r3, [pc, #272]	; (800b6f0 <_dtoa_r+0x2d0>)
 800b5de:	4a47      	ldr	r2, [pc, #284]	; (800b6fc <_dtoa_r+0x2dc>)
 800b5e0:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800b5e4:	2800      	cmp	r0, #0
 800b5e6:	bf14      	ite	ne
 800b5e8:	4618      	movne	r0, r3
 800b5ea:	4610      	moveq	r0, r2
 800b5ec:	e755      	b.n	800b49a <_dtoa_r+0x7a>
 800b5ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b5f2:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800b5f6:	9510      	str	r5, [sp, #64]	; 0x40
 800b5f8:	4650      	mov	r0, sl
 800b5fa:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b5fe:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b602:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800b604:	e784      	b.n	800b510 <_dtoa_r+0xf0>
 800b606:	483e      	ldr	r0, [pc, #248]	; (800b700 <_dtoa_r+0x2e0>)
 800b608:	e73b      	b.n	800b482 <_dtoa_r+0x62>
 800b60a:	1cc3      	adds	r3, r0, #3
 800b60c:	e74e      	b.n	800b4ac <_dtoa_r+0x8c>
 800b60e:	2100      	movs	r1, #0
 800b610:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800b614:	4648      	mov	r0, r9
 800b616:	9120      	str	r1, [sp, #128]	; 0x80
 800b618:	f001 fdf4 	bl	800d204 <_Balloc>
 800b61c:	f04f 33ff 	mov.w	r3, #4294967295
 800b620:	9306      	str	r3, [sp, #24]
 800b622:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b624:	930d      	str	r3, [sp, #52]	; 0x34
 800b626:	2301      	movs	r3, #1
 800b628:	9007      	str	r0, [sp, #28]
 800b62a:	9221      	str	r2, [sp, #132]	; 0x84
 800b62c:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800b630:	9309      	str	r3, [sp, #36]	; 0x24
 800b632:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b634:	2b00      	cmp	r3, #0
 800b636:	f2c0 80d1 	blt.w	800b7dc <_dtoa_r+0x3bc>
 800b63a:	9a04      	ldr	r2, [sp, #16]
 800b63c:	2a0e      	cmp	r2, #14
 800b63e:	f300 80cd 	bgt.w	800b7dc <_dtoa_r+0x3bc>
 800b642:	4b2d      	ldr	r3, [pc, #180]	; (800b6f8 <_dtoa_r+0x2d8>)
 800b644:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b648:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b64c:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b650:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b652:	2b00      	cmp	r3, #0
 800b654:	f2c0 8300 	blt.w	800bc58 <_dtoa_r+0x838>
 800b658:	4656      	mov	r6, sl
 800b65a:	465f      	mov	r7, fp
 800b65c:	4650      	mov	r0, sl
 800b65e:	4659      	mov	r1, fp
 800b660:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 800b664:	4652      	mov	r2, sl
 800b666:	465b      	mov	r3, fp
 800b668:	f7f5 fc2c 	bl	8000ec4 <__aeabi_ddiv>
 800b66c:	f7f5 fdb0 	bl	80011d0 <__aeabi_d2iz>
 800b670:	4604      	mov	r4, r0
 800b672:	f7f5 fa97 	bl	8000ba4 <__aeabi_i2d>
 800b676:	4652      	mov	r2, sl
 800b678:	465b      	mov	r3, fp
 800b67a:	f7f5 faf9 	bl	8000c70 <__aeabi_dmul>
 800b67e:	460b      	mov	r3, r1
 800b680:	4602      	mov	r2, r0
 800b682:	4639      	mov	r1, r7
 800b684:	4630      	mov	r0, r6
 800b686:	f7f5 f93f 	bl	8000908 <__aeabi_dsub>
 800b68a:	9d07      	ldr	r5, [sp, #28]
 800b68c:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800b690:	702b      	strb	r3, [r5, #0]
 800b692:	9b06      	ldr	r3, [sp, #24]
 800b694:	2b01      	cmp	r3, #1
 800b696:	4606      	mov	r6, r0
 800b698:	460f      	mov	r7, r1
 800b69a:	f105 0501 	add.w	r5, r5, #1
 800b69e:	d062      	beq.n	800b766 <_dtoa_r+0x346>
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	4b18      	ldr	r3, [pc, #96]	; (800b704 <_dtoa_r+0x2e4>)
 800b6a4:	f7f5 fae4 	bl	8000c70 <__aeabi_dmul>
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	4606      	mov	r6, r0
 800b6ae:	460f      	mov	r7, r1
 800b6b0:	f7f5 fd46 	bl	8001140 <__aeabi_dcmpeq>
 800b6b4:	2800      	cmp	r0, #0
 800b6b6:	d17e      	bne.n	800b7b6 <_dtoa_r+0x396>
 800b6b8:	f8cd 9014 	str.w	r9, [sp, #20]
 800b6bc:	f8dd a018 	ldr.w	sl, [sp, #24]
 800b6c0:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800b6c4:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b6c8:	e029      	b.n	800b71e <_dtoa_r+0x2fe>
 800b6ca:	bf00      	nop
 800b6cc:	f3af 8000 	nop.w
 800b6d0:	636f4361 	.word	0x636f4361
 800b6d4:	3fd287a7 	.word	0x3fd287a7
 800b6d8:	8b60c8b3 	.word	0x8b60c8b3
 800b6dc:	3fc68a28 	.word	0x3fc68a28
 800b6e0:	509f79fb 	.word	0x509f79fb
 800b6e4:	3fd34413 	.word	0x3fd34413
 800b6e8:	7ff00000 	.word	0x7ff00000
 800b6ec:	0800e7fd 	.word	0x0800e7fd
 800b6f0:	0800e83c 	.word	0x0800e83c
 800b6f4:	3ff80000 	.word	0x3ff80000
 800b6f8:	0800e840 	.word	0x0800e840
 800b6fc:	0800e830 	.word	0x0800e830
 800b700:	0800e7fc 	.word	0x0800e7fc
 800b704:	40240000 	.word	0x40240000
 800b708:	f7f5 fab2 	bl	8000c70 <__aeabi_dmul>
 800b70c:	2200      	movs	r2, #0
 800b70e:	2300      	movs	r3, #0
 800b710:	4606      	mov	r6, r0
 800b712:	460f      	mov	r7, r1
 800b714:	f7f5 fd14 	bl	8001140 <__aeabi_dcmpeq>
 800b718:	2800      	cmp	r0, #0
 800b71a:	f040 83b7 	bne.w	800be8c <_dtoa_r+0xa6c>
 800b71e:	4642      	mov	r2, r8
 800b720:	464b      	mov	r3, r9
 800b722:	4630      	mov	r0, r6
 800b724:	4639      	mov	r1, r7
 800b726:	f7f5 fbcd 	bl	8000ec4 <__aeabi_ddiv>
 800b72a:	f7f5 fd51 	bl	80011d0 <__aeabi_d2iz>
 800b72e:	4604      	mov	r4, r0
 800b730:	f7f5 fa38 	bl	8000ba4 <__aeabi_i2d>
 800b734:	4642      	mov	r2, r8
 800b736:	464b      	mov	r3, r9
 800b738:	f7f5 fa9a 	bl	8000c70 <__aeabi_dmul>
 800b73c:	4602      	mov	r2, r0
 800b73e:	460b      	mov	r3, r1
 800b740:	4630      	mov	r0, r6
 800b742:	4639      	mov	r1, r7
 800b744:	f7f5 f8e0 	bl	8000908 <__aeabi_dsub>
 800b748:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800b74c:	f805 eb01 	strb.w	lr, [r5], #1
 800b750:	ebcb 0e05 	rsb	lr, fp, r5
 800b754:	45d6      	cmp	lr, sl
 800b756:	4606      	mov	r6, r0
 800b758:	460f      	mov	r7, r1
 800b75a:	f04f 0200 	mov.w	r2, #0
 800b75e:	4bb0      	ldr	r3, [pc, #704]	; (800ba20 <_dtoa_r+0x600>)
 800b760:	d1d2      	bne.n	800b708 <_dtoa_r+0x2e8>
 800b762:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800b766:	4632      	mov	r2, r6
 800b768:	463b      	mov	r3, r7
 800b76a:	4630      	mov	r0, r6
 800b76c:	4639      	mov	r1, r7
 800b76e:	f7f5 f8cd 	bl	800090c <__adddf3>
 800b772:	4606      	mov	r6, r0
 800b774:	460f      	mov	r7, r1
 800b776:	4602      	mov	r2, r0
 800b778:	460b      	mov	r3, r1
 800b77a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b77e:	f7f5 fce9 	bl	8001154 <__aeabi_dcmplt>
 800b782:	b940      	cbnz	r0, 800b796 <_dtoa_r+0x376>
 800b784:	4632      	mov	r2, r6
 800b786:	463b      	mov	r3, r7
 800b788:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b78c:	f7f5 fcd8 	bl	8001140 <__aeabi_dcmpeq>
 800b790:	b188      	cbz	r0, 800b7b6 <_dtoa_r+0x396>
 800b792:	07e3      	lsls	r3, r4, #31
 800b794:	d50f      	bpl.n	800b7b6 <_dtoa_r+0x396>
 800b796:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 800b79a:	9a07      	ldr	r2, [sp, #28]
 800b79c:	1e6b      	subs	r3, r5, #1
 800b79e:	e004      	b.n	800b7aa <_dtoa_r+0x38a>
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	f000 842c 	beq.w	800bffe <_dtoa_r+0xbde>
 800b7a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b7aa:	2c39      	cmp	r4, #57	; 0x39
 800b7ac:	f103 0501 	add.w	r5, r3, #1
 800b7b0:	d0f6      	beq.n	800b7a0 <_dtoa_r+0x380>
 800b7b2:	3401      	adds	r4, #1
 800b7b4:	701c      	strb	r4, [r3, #0]
 800b7b6:	9908      	ldr	r1, [sp, #32]
 800b7b8:	4648      	mov	r0, r9
 800b7ba:	f001 fd49 	bl	800d250 <_Bfree>
 800b7be:	2200      	movs	r2, #0
 800b7c0:	9b04      	ldr	r3, [sp, #16]
 800b7c2:	702a      	strb	r2, [r5, #0]
 800b7c4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b7c6:	3301      	adds	r3, #1
 800b7c8:	6013      	str	r3, [r2, #0]
 800b7ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	f000 83a7 	beq.w	800bf20 <_dtoa_r+0xb00>
 800b7d2:	9807      	ldr	r0, [sp, #28]
 800b7d4:	601d      	str	r5, [r3, #0]
 800b7d6:	b017      	add	sp, #92	; 0x5c
 800b7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7de:	2a00      	cmp	r2, #0
 800b7e0:	f000 8112 	beq.w	800ba08 <_dtoa_r+0x5e8>
 800b7e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b7e6:	2a01      	cmp	r2, #1
 800b7e8:	f340 8258 	ble.w	800bc9c <_dtoa_r+0x87c>
 800b7ec:	9b06      	ldr	r3, [sp, #24]
 800b7ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b7f0:	1e5f      	subs	r7, r3, #1
 800b7f2:	42ba      	cmp	r2, r7
 800b7f4:	f2c0 8397 	blt.w	800bf26 <_dtoa_r+0xb06>
 800b7f8:	1bd7      	subs	r7, r2, r7
 800b7fa:	9b06      	ldr	r3, [sp, #24]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	f2c0 848a 	blt.w	800c116 <_dtoa_r+0xcf6>
 800b802:	9d05      	ldr	r5, [sp, #20]
 800b804:	9b06      	ldr	r3, [sp, #24]
 800b806:	9a05      	ldr	r2, [sp, #20]
 800b808:	441a      	add	r2, r3
 800b80a:	9205      	str	r2, [sp, #20]
 800b80c:	9a02      	ldr	r2, [sp, #8]
 800b80e:	2101      	movs	r1, #1
 800b810:	441a      	add	r2, r3
 800b812:	4648      	mov	r0, r9
 800b814:	9202      	str	r2, [sp, #8]
 800b816:	f001 fdb3 	bl	800d380 <__i2b>
 800b81a:	4606      	mov	r6, r0
 800b81c:	b165      	cbz	r5, 800b838 <_dtoa_r+0x418>
 800b81e:	9902      	ldr	r1, [sp, #8]
 800b820:	2900      	cmp	r1, #0
 800b822:	460b      	mov	r3, r1
 800b824:	dd08      	ble.n	800b838 <_dtoa_r+0x418>
 800b826:	42a9      	cmp	r1, r5
 800b828:	9a05      	ldr	r2, [sp, #20]
 800b82a:	bfa8      	it	ge
 800b82c:	462b      	movge	r3, r5
 800b82e:	1ad2      	subs	r2, r2, r3
 800b830:	1aed      	subs	r5, r5, r3
 800b832:	1acb      	subs	r3, r1, r3
 800b834:	9205      	str	r2, [sp, #20]
 800b836:	9302      	str	r3, [sp, #8]
 800b838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	f340 82fc 	ble.w	800be38 <_dtoa_r+0xa18>
 800b840:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b842:	2a00      	cmp	r2, #0
 800b844:	f000 8201 	beq.w	800bc4a <_dtoa_r+0x82a>
 800b848:	2f00      	cmp	r7, #0
 800b84a:	f000 81fe 	beq.w	800bc4a <_dtoa_r+0x82a>
 800b84e:	4631      	mov	r1, r6
 800b850:	463a      	mov	r2, r7
 800b852:	4648      	mov	r0, r9
 800b854:	f001 fe36 	bl	800d4c4 <__pow5mult>
 800b858:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b85c:	4601      	mov	r1, r0
 800b85e:	4642      	mov	r2, r8
 800b860:	4606      	mov	r6, r0
 800b862:	4648      	mov	r0, r9
 800b864:	f001 fd96 	bl	800d394 <__multiply>
 800b868:	4641      	mov	r1, r8
 800b86a:	4604      	mov	r4, r0
 800b86c:	4648      	mov	r0, r9
 800b86e:	f001 fcef 	bl	800d250 <_Bfree>
 800b872:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b874:	1bdb      	subs	r3, r3, r7
 800b876:	930a      	str	r3, [sp, #40]	; 0x28
 800b878:	f040 81e6 	bne.w	800bc48 <_dtoa_r+0x828>
 800b87c:	2101      	movs	r1, #1
 800b87e:	4648      	mov	r0, r9
 800b880:	f001 fd7e 	bl	800d380 <__i2b>
 800b884:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b886:	4680      	mov	r8, r0
 800b888:	2b00      	cmp	r3, #0
 800b88a:	f000 8219 	beq.w	800bcc0 <_dtoa_r+0x8a0>
 800b88e:	4601      	mov	r1, r0
 800b890:	461a      	mov	r2, r3
 800b892:	4648      	mov	r0, r9
 800b894:	f001 fe16 	bl	800d4c4 <__pow5mult>
 800b898:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b89a:	2b01      	cmp	r3, #1
 800b89c:	4680      	mov	r8, r0
 800b89e:	f340 82f8 	ble.w	800be92 <_dtoa_r+0xa72>
 800b8a2:	2700      	movs	r7, #0
 800b8a4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b8a8:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800b8ac:	6918      	ldr	r0, [r3, #16]
 800b8ae:	f001 fd19 	bl	800d2e4 <__hi0bits>
 800b8b2:	f1c0 0020 	rsb	r0, r0, #32
 800b8b6:	9a02      	ldr	r2, [sp, #8]
 800b8b8:	4410      	add	r0, r2
 800b8ba:	f010 001f 	ands.w	r0, r0, #31
 800b8be:	f000 81f6 	beq.w	800bcae <_dtoa_r+0x88e>
 800b8c2:	f1c0 0320 	rsb	r3, r0, #32
 800b8c6:	2b04      	cmp	r3, #4
 800b8c8:	f340 84ca 	ble.w	800c260 <_dtoa_r+0xe40>
 800b8cc:	9b05      	ldr	r3, [sp, #20]
 800b8ce:	f1c0 001c 	rsb	r0, r0, #28
 800b8d2:	4403      	add	r3, r0
 800b8d4:	9305      	str	r3, [sp, #20]
 800b8d6:	4613      	mov	r3, r2
 800b8d8:	4403      	add	r3, r0
 800b8da:	4405      	add	r5, r0
 800b8dc:	9302      	str	r3, [sp, #8]
 800b8de:	9b05      	ldr	r3, [sp, #20]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	dd05      	ble.n	800b8f0 <_dtoa_r+0x4d0>
 800b8e4:	4621      	mov	r1, r4
 800b8e6:	461a      	mov	r2, r3
 800b8e8:	4648      	mov	r0, r9
 800b8ea:	f001 fe3b 	bl	800d564 <__lshift>
 800b8ee:	4604      	mov	r4, r0
 800b8f0:	9b02      	ldr	r3, [sp, #8]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	dd05      	ble.n	800b902 <_dtoa_r+0x4e2>
 800b8f6:	4641      	mov	r1, r8
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	4648      	mov	r0, r9
 800b8fc:	f001 fe32 	bl	800d564 <__lshift>
 800b900:	4680      	mov	r8, r0
 800b902:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b904:	2b00      	cmp	r3, #0
 800b906:	f040 827c 	bne.w	800be02 <_dtoa_r+0x9e2>
 800b90a:	9b06      	ldr	r3, [sp, #24]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	f340 8295 	ble.w	800be3c <_dtoa_r+0xa1c>
 800b912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b914:	2b00      	cmp	r3, #0
 800b916:	f040 81f5 	bne.w	800bd04 <_dtoa_r+0x8e4>
 800b91a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800b91e:	9f06      	ldr	r7, [sp, #24]
 800b920:	465d      	mov	r5, fp
 800b922:	e002      	b.n	800b92a <_dtoa_r+0x50a>
 800b924:	f001 fc9e 	bl	800d264 <__multadd>
 800b928:	4604      	mov	r4, r0
 800b92a:	4641      	mov	r1, r8
 800b92c:	4620      	mov	r0, r4
 800b92e:	f7ff fce3 	bl	800b2f8 <quorem>
 800b932:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b936:	f805 ab01 	strb.w	sl, [r5], #1
 800b93a:	ebcb 0305 	rsb	r3, fp, r5
 800b93e:	42bb      	cmp	r3, r7
 800b940:	f04f 020a 	mov.w	r2, #10
 800b944:	f04f 0300 	mov.w	r3, #0
 800b948:	4621      	mov	r1, r4
 800b94a:	4648      	mov	r0, r9
 800b94c:	dbea      	blt.n	800b924 <_dtoa_r+0x504>
 800b94e:	9b07      	ldr	r3, [sp, #28]
 800b950:	9a06      	ldr	r2, [sp, #24]
 800b952:	2a01      	cmp	r2, #1
 800b954:	bfac      	ite	ge
 800b956:	189b      	addge	r3, r3, r2
 800b958:	3301      	addlt	r3, #1
 800b95a:	461d      	mov	r5, r3
 800b95c:	f04f 0b00 	mov.w	fp, #0
 800b960:	4621      	mov	r1, r4
 800b962:	2201      	movs	r2, #1
 800b964:	4648      	mov	r0, r9
 800b966:	f001 fdfd 	bl	800d564 <__lshift>
 800b96a:	4641      	mov	r1, r8
 800b96c:	9008      	str	r0, [sp, #32]
 800b96e:	f001 fe51 	bl	800d614 <__mcmp>
 800b972:	2800      	cmp	r0, #0
 800b974:	f340 830d 	ble.w	800bf92 <_dtoa_r+0xb72>
 800b978:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b97c:	9907      	ldr	r1, [sp, #28]
 800b97e:	1e6b      	subs	r3, r5, #1
 800b980:	e004      	b.n	800b98c <_dtoa_r+0x56c>
 800b982:	428b      	cmp	r3, r1
 800b984:	f000 8278 	beq.w	800be78 <_dtoa_r+0xa58>
 800b988:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b98c:	2a39      	cmp	r2, #57	; 0x39
 800b98e:	f103 0501 	add.w	r5, r3, #1
 800b992:	d0f6      	beq.n	800b982 <_dtoa_r+0x562>
 800b994:	3201      	adds	r2, #1
 800b996:	701a      	strb	r2, [r3, #0]
 800b998:	4641      	mov	r1, r8
 800b99a:	4648      	mov	r0, r9
 800b99c:	f001 fc58 	bl	800d250 <_Bfree>
 800b9a0:	2e00      	cmp	r6, #0
 800b9a2:	f43f af08 	beq.w	800b7b6 <_dtoa_r+0x396>
 800b9a6:	f1bb 0f00 	cmp.w	fp, #0
 800b9aa:	d005      	beq.n	800b9b8 <_dtoa_r+0x598>
 800b9ac:	45b3      	cmp	fp, r6
 800b9ae:	d003      	beq.n	800b9b8 <_dtoa_r+0x598>
 800b9b0:	4659      	mov	r1, fp
 800b9b2:	4648      	mov	r0, r9
 800b9b4:	f001 fc4c 	bl	800d250 <_Bfree>
 800b9b8:	4631      	mov	r1, r6
 800b9ba:	4648      	mov	r0, r9
 800b9bc:	f001 fc48 	bl	800d250 <_Bfree>
 800b9c0:	e6f9      	b.n	800b7b6 <_dtoa_r+0x396>
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	930c      	str	r3, [sp, #48]	; 0x30
 800b9c6:	e5e3      	b.n	800b590 <_dtoa_r+0x170>
 800b9c8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b9cc:	4640      	mov	r0, r8
 800b9ce:	f7f5 f8e9 	bl	8000ba4 <__aeabi_i2d>
 800b9d2:	4602      	mov	r2, r0
 800b9d4:	460b      	mov	r3, r1
 800b9d6:	4630      	mov	r0, r6
 800b9d8:	4639      	mov	r1, r7
 800b9da:	f7f5 fbb1 	bl	8001140 <__aeabi_dcmpeq>
 800b9de:	2800      	cmp	r0, #0
 800b9e0:	f47f adc2 	bne.w	800b568 <_dtoa_r+0x148>
 800b9e4:	f108 33ff 	add.w	r3, r8, #4294967295
 800b9e8:	9304      	str	r3, [sp, #16]
 800b9ea:	e5bd      	b.n	800b568 <_dtoa_r+0x148>
 800b9ec:	9a05      	ldr	r2, [sp, #20]
 800b9ee:	9b04      	ldr	r3, [sp, #16]
 800b9f0:	1ad2      	subs	r2, r2, r3
 800b9f2:	425b      	negs	r3, r3
 800b9f4:	930a      	str	r3, [sp, #40]	; 0x28
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	9205      	str	r2, [sp, #20]
 800b9fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800b9fc:	e5da      	b.n	800b5b4 <_dtoa_r+0x194>
 800b9fe:	425b      	negs	r3, r3
 800ba00:	9305      	str	r3, [sp, #20]
 800ba02:	2300      	movs	r3, #0
 800ba04:	9302      	str	r3, [sp, #8]
 800ba06:	e5ca      	b.n	800b59e <_dtoa_r+0x17e>
 800ba08:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800ba0a:	9d05      	ldr	r5, [sp, #20]
 800ba0c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ba0e:	e705      	b.n	800b81c <_dtoa_r+0x3fc>
 800ba10:	f1c3 0820 	rsb	r8, r3, #32
 800ba14:	fa0a f008 	lsl.w	r0, sl, r8
 800ba18:	e573      	b.n	800b502 <_dtoa_r+0xe2>
 800ba1a:	900c      	str	r0, [sp, #48]	; 0x30
 800ba1c:	e5b8      	b.n	800b590 <_dtoa_r+0x170>
 800ba1e:	bf00      	nop
 800ba20:	40240000 	.word	0x40240000
 800ba24:	2300      	movs	r3, #0
 800ba26:	9309      	str	r3, [sp, #36]	; 0x24
 800ba28:	9b04      	ldr	r3, [sp, #16]
 800ba2a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ba2c:	4413      	add	r3, r2
 800ba2e:	930d      	str	r3, [sp, #52]	; 0x34
 800ba30:	3301      	adds	r3, #1
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	9306      	str	r3, [sp, #24]
 800ba36:	f340 8283 	ble.w	800bf40 <_dtoa_r+0xb20>
 800ba3a:	9c06      	ldr	r4, [sp, #24]
 800ba3c:	4626      	mov	r6, r4
 800ba3e:	2100      	movs	r1, #0
 800ba40:	2e17      	cmp	r6, #23
 800ba42:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800ba46:	d90b      	bls.n	800ba60 <_dtoa_r+0x640>
 800ba48:	2201      	movs	r2, #1
 800ba4a:	2304      	movs	r3, #4
 800ba4c:	005b      	lsls	r3, r3, #1
 800ba4e:	f103 0014 	add.w	r0, r3, #20
 800ba52:	42b0      	cmp	r0, r6
 800ba54:	4611      	mov	r1, r2
 800ba56:	f102 0201 	add.w	r2, r2, #1
 800ba5a:	d9f7      	bls.n	800ba4c <_dtoa_r+0x62c>
 800ba5c:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800ba60:	4648      	mov	r0, r9
 800ba62:	f001 fbcf 	bl	800d204 <_Balloc>
 800ba66:	2c0e      	cmp	r4, #14
 800ba68:	9007      	str	r0, [sp, #28]
 800ba6a:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800ba6e:	f63f ade0 	bhi.w	800b632 <_dtoa_r+0x212>
 800ba72:	2d00      	cmp	r5, #0
 800ba74:	f43f addd 	beq.w	800b632 <_dtoa_r+0x212>
 800ba78:	9904      	ldr	r1, [sp, #16]
 800ba7a:	4657      	mov	r7, sl
 800ba7c:	46d8      	mov	r8, fp
 800ba7e:	2900      	cmp	r1, #0
 800ba80:	e9cd 780e 	strd	r7, r8, [sp, #56]	; 0x38
 800ba84:	f340 8292 	ble.w	800bfac <_dtoa_r+0xb8c>
 800ba88:	4b91      	ldr	r3, [pc, #580]	; (800bcd0 <_dtoa_r+0x8b0>)
 800ba8a:	f001 020f 	and.w	r2, r1, #15
 800ba8e:	110e      	asrs	r6, r1, #4
 800ba90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba94:	06f0      	lsls	r0, r6, #27
 800ba96:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ba9a:	f140 824c 	bpl.w	800bf36 <_dtoa_r+0xb16>
 800ba9e:	4b8d      	ldr	r3, [pc, #564]	; (800bcd4 <_dtoa_r+0x8b4>)
 800baa0:	4650      	mov	r0, sl
 800baa2:	4659      	mov	r1, fp
 800baa4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800baa8:	f7f5 fa0c 	bl	8000ec4 <__aeabi_ddiv>
 800baac:	f006 060f 	and.w	r6, r6, #15
 800bab0:	4682      	mov	sl, r0
 800bab2:	468b      	mov	fp, r1
 800bab4:	f04f 0803 	mov.w	r8, #3
 800bab8:	b186      	cbz	r6, 800badc <_dtoa_r+0x6bc>
 800baba:	4f86      	ldr	r7, [pc, #536]	; (800bcd4 <_dtoa_r+0x8b4>)
 800babc:	07f1      	lsls	r1, r6, #31
 800babe:	d509      	bpl.n	800bad4 <_dtoa_r+0x6b4>
 800bac0:	4620      	mov	r0, r4
 800bac2:	4629      	mov	r1, r5
 800bac4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bac8:	f7f5 f8d2 	bl	8000c70 <__aeabi_dmul>
 800bacc:	f108 0801 	add.w	r8, r8, #1
 800bad0:	4604      	mov	r4, r0
 800bad2:	460d      	mov	r5, r1
 800bad4:	1076      	asrs	r6, r6, #1
 800bad6:	f107 0708 	add.w	r7, r7, #8
 800bada:	d1ef      	bne.n	800babc <_dtoa_r+0x69c>
 800badc:	4622      	mov	r2, r4
 800bade:	462b      	mov	r3, r5
 800bae0:	4650      	mov	r0, sl
 800bae2:	4659      	mov	r1, fp
 800bae4:	f7f5 f9ee 	bl	8000ec4 <__aeabi_ddiv>
 800bae8:	4606      	mov	r6, r0
 800baea:	460f      	mov	r7, r1
 800baec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800baee:	b143      	cbz	r3, 800bb02 <_dtoa_r+0x6e2>
 800baf0:	2200      	movs	r2, #0
 800baf2:	4b79      	ldr	r3, [pc, #484]	; (800bcd8 <_dtoa_r+0x8b8>)
 800baf4:	4630      	mov	r0, r6
 800baf6:	4639      	mov	r1, r7
 800baf8:	f7f5 fb2c 	bl	8001154 <__aeabi_dcmplt>
 800bafc:	2800      	cmp	r0, #0
 800bafe:	f040 8320 	bne.w	800c142 <_dtoa_r+0xd22>
 800bb02:	4640      	mov	r0, r8
 800bb04:	f7f5 f84e 	bl	8000ba4 <__aeabi_i2d>
 800bb08:	4632      	mov	r2, r6
 800bb0a:	463b      	mov	r3, r7
 800bb0c:	f7f5 f8b0 	bl	8000c70 <__aeabi_dmul>
 800bb10:	4b72      	ldr	r3, [pc, #456]	; (800bcdc <_dtoa_r+0x8bc>)
 800bb12:	2200      	movs	r2, #0
 800bb14:	f7f4 fefa 	bl	800090c <__adddf3>
 800bb18:	9b06      	ldr	r3, [sp, #24]
 800bb1a:	4604      	mov	r4, r0
 800bb1c:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	f000 81df 	beq.w	800bee4 <_dtoa_r+0xac4>
 800bb26:	9b04      	ldr	r3, [sp, #16]
 800bb28:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800bb2c:	9311      	str	r3, [sp, #68]	; 0x44
 800bb2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	f000 8297 	beq.w	800c064 <_dtoa_r+0xc44>
 800bb36:	4b66      	ldr	r3, [pc, #408]	; (800bcd0 <_dtoa_r+0x8b0>)
 800bb38:	4969      	ldr	r1, [pc, #420]	; (800bce0 <_dtoa_r+0x8c0>)
 800bb3a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bb3e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bb42:	2000      	movs	r0, #0
 800bb44:	f7f5 f9be 	bl	8000ec4 <__aeabi_ddiv>
 800bb48:	4622      	mov	r2, r4
 800bb4a:	462b      	mov	r3, r5
 800bb4c:	f7f4 fedc 	bl	8000908 <__aeabi_dsub>
 800bb50:	4682      	mov	sl, r0
 800bb52:	468b      	mov	fp, r1
 800bb54:	4630      	mov	r0, r6
 800bb56:	4639      	mov	r1, r7
 800bb58:	f7f5 fb3a 	bl	80011d0 <__aeabi_d2iz>
 800bb5c:	4604      	mov	r4, r0
 800bb5e:	f7f5 f821 	bl	8000ba4 <__aeabi_i2d>
 800bb62:	4602      	mov	r2, r0
 800bb64:	460b      	mov	r3, r1
 800bb66:	4630      	mov	r0, r6
 800bb68:	4639      	mov	r1, r7
 800bb6a:	f7f4 fecd 	bl	8000908 <__aeabi_dsub>
 800bb6e:	3430      	adds	r4, #48	; 0x30
 800bb70:	9d07      	ldr	r5, [sp, #28]
 800bb72:	b2e4      	uxtb	r4, r4
 800bb74:	4606      	mov	r6, r0
 800bb76:	460f      	mov	r7, r1
 800bb78:	702c      	strb	r4, [r5, #0]
 800bb7a:	4602      	mov	r2, r0
 800bb7c:	460b      	mov	r3, r1
 800bb7e:	4650      	mov	r0, sl
 800bb80:	4659      	mov	r1, fp
 800bb82:	3501      	adds	r5, #1
 800bb84:	f7f5 fb04 	bl	8001190 <__aeabi_dcmpgt>
 800bb88:	2800      	cmp	r0, #0
 800bb8a:	d14c      	bne.n	800bc26 <_dtoa_r+0x806>
 800bb8c:	4632      	mov	r2, r6
 800bb8e:	463b      	mov	r3, r7
 800bb90:	2000      	movs	r0, #0
 800bb92:	4951      	ldr	r1, [pc, #324]	; (800bcd8 <_dtoa_r+0x8b8>)
 800bb94:	f7f4 feb8 	bl	8000908 <__aeabi_dsub>
 800bb98:	4602      	mov	r2, r0
 800bb9a:	460b      	mov	r3, r1
 800bb9c:	4650      	mov	r0, sl
 800bb9e:	4659      	mov	r1, fp
 800bba0:	f7f5 faf6 	bl	8001190 <__aeabi_dcmpgt>
 800bba4:	2800      	cmp	r0, #0
 800bba6:	f040 830d 	bne.w	800c1c4 <_dtoa_r+0xda4>
 800bbaa:	f1b8 0f01 	cmp.w	r8, #1
 800bbae:	f340 81b3 	ble.w	800bf18 <_dtoa_r+0xaf8>
 800bbb2:	9b07      	ldr	r3, [sp, #28]
 800bbb4:	4498      	add	r8, r3
 800bbb6:	e00d      	b.n	800bbd4 <_dtoa_r+0x7b4>
 800bbb8:	2000      	movs	r0, #0
 800bbba:	4947      	ldr	r1, [pc, #284]	; (800bcd8 <_dtoa_r+0x8b8>)
 800bbbc:	f7f4 fea4 	bl	8000908 <__aeabi_dsub>
 800bbc0:	4652      	mov	r2, sl
 800bbc2:	465b      	mov	r3, fp
 800bbc4:	f7f5 fac6 	bl	8001154 <__aeabi_dcmplt>
 800bbc8:	2800      	cmp	r0, #0
 800bbca:	f040 82fb 	bne.w	800c1c4 <_dtoa_r+0xda4>
 800bbce:	4545      	cmp	r5, r8
 800bbd0:	f000 81a2 	beq.w	800bf18 <_dtoa_r+0xaf8>
 800bbd4:	4650      	mov	r0, sl
 800bbd6:	4659      	mov	r1, fp
 800bbd8:	2200      	movs	r2, #0
 800bbda:	4b42      	ldr	r3, [pc, #264]	; (800bce4 <_dtoa_r+0x8c4>)
 800bbdc:	f7f5 f848 	bl	8000c70 <__aeabi_dmul>
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	4b40      	ldr	r3, [pc, #256]	; (800bce4 <_dtoa_r+0x8c4>)
 800bbe4:	4682      	mov	sl, r0
 800bbe6:	468b      	mov	fp, r1
 800bbe8:	4630      	mov	r0, r6
 800bbea:	4639      	mov	r1, r7
 800bbec:	f7f5 f840 	bl	8000c70 <__aeabi_dmul>
 800bbf0:	460f      	mov	r7, r1
 800bbf2:	4606      	mov	r6, r0
 800bbf4:	f7f5 faec 	bl	80011d0 <__aeabi_d2iz>
 800bbf8:	4604      	mov	r4, r0
 800bbfa:	f7f4 ffd3 	bl	8000ba4 <__aeabi_i2d>
 800bbfe:	4602      	mov	r2, r0
 800bc00:	460b      	mov	r3, r1
 800bc02:	4630      	mov	r0, r6
 800bc04:	4639      	mov	r1, r7
 800bc06:	f7f4 fe7f 	bl	8000908 <__aeabi_dsub>
 800bc0a:	3430      	adds	r4, #48	; 0x30
 800bc0c:	b2e4      	uxtb	r4, r4
 800bc0e:	4652      	mov	r2, sl
 800bc10:	465b      	mov	r3, fp
 800bc12:	f805 4b01 	strb.w	r4, [r5], #1
 800bc16:	4606      	mov	r6, r0
 800bc18:	460f      	mov	r7, r1
 800bc1a:	f7f5 fa9b 	bl	8001154 <__aeabi_dcmplt>
 800bc1e:	4632      	mov	r2, r6
 800bc20:	463b      	mov	r3, r7
 800bc22:	2800      	cmp	r0, #0
 800bc24:	d0c8      	beq.n	800bbb8 <_dtoa_r+0x798>
 800bc26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bc28:	9304      	str	r3, [sp, #16]
 800bc2a:	e5c4      	b.n	800b7b6 <_dtoa_r+0x396>
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	9309      	str	r3, [sp, #36]	; 0x24
 800bc30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	f340 8189 	ble.w	800bf4a <_dtoa_r+0xb2a>
 800bc38:	461e      	mov	r6, r3
 800bc3a:	461c      	mov	r4, r3
 800bc3c:	930d      	str	r3, [sp, #52]	; 0x34
 800bc3e:	9306      	str	r3, [sp, #24]
 800bc40:	e6fd      	b.n	800ba3e <_dtoa_r+0x61e>
 800bc42:	2301      	movs	r3, #1
 800bc44:	9309      	str	r3, [sp, #36]	; 0x24
 800bc46:	e7f3      	b.n	800bc30 <_dtoa_r+0x810>
 800bc48:	9408      	str	r4, [sp, #32]
 800bc4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc4c:	9908      	ldr	r1, [sp, #32]
 800bc4e:	4648      	mov	r0, r9
 800bc50:	f001 fc38 	bl	800d4c4 <__pow5mult>
 800bc54:	4604      	mov	r4, r0
 800bc56:	e611      	b.n	800b87c <_dtoa_r+0x45c>
 800bc58:	9b06      	ldr	r3, [sp, #24]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	f73f acfc 	bgt.w	800b658 <_dtoa_r+0x238>
 800bc60:	f040 82da 	bne.w	800c218 <_dtoa_r+0xdf8>
 800bc64:	2200      	movs	r2, #0
 800bc66:	4b20      	ldr	r3, [pc, #128]	; (800bce8 <_dtoa_r+0x8c8>)
 800bc68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc6c:	f7f5 f800 	bl	8000c70 <__aeabi_dmul>
 800bc70:	4652      	mov	r2, sl
 800bc72:	465b      	mov	r3, fp
 800bc74:	f7f5 fa82 	bl	800117c <__aeabi_dcmpge>
 800bc78:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800bc7c:	4646      	mov	r6, r8
 800bc7e:	2800      	cmp	r0, #0
 800bc80:	f000 80f2 	beq.w	800be68 <_dtoa_r+0xa48>
 800bc84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc86:	9d07      	ldr	r5, [sp, #28]
 800bc88:	43db      	mvns	r3, r3
 800bc8a:	9304      	str	r3, [sp, #16]
 800bc8c:	4641      	mov	r1, r8
 800bc8e:	4648      	mov	r0, r9
 800bc90:	f001 fade 	bl	800d250 <_Bfree>
 800bc94:	2e00      	cmp	r6, #0
 800bc96:	f43f ad8e 	beq.w	800b7b6 <_dtoa_r+0x396>
 800bc9a:	e68d      	b.n	800b9b8 <_dtoa_r+0x598>
 800bc9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bc9e:	2a00      	cmp	r2, #0
 800bca0:	f000 8241 	beq.w	800c126 <_dtoa_r+0xd06>
 800bca4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bca8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800bcaa:	9d05      	ldr	r5, [sp, #20]
 800bcac:	e5ab      	b.n	800b806 <_dtoa_r+0x3e6>
 800bcae:	201c      	movs	r0, #28
 800bcb0:	9b05      	ldr	r3, [sp, #20]
 800bcb2:	4403      	add	r3, r0
 800bcb4:	9305      	str	r3, [sp, #20]
 800bcb6:	9b02      	ldr	r3, [sp, #8]
 800bcb8:	4403      	add	r3, r0
 800bcba:	4405      	add	r5, r0
 800bcbc:	9302      	str	r3, [sp, #8]
 800bcbe:	e60e      	b.n	800b8de <_dtoa_r+0x4be>
 800bcc0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800bcc2:	2b01      	cmp	r3, #1
 800bcc4:	f340 8282 	ble.w	800c1cc <_dtoa_r+0xdac>
 800bcc8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800bcca:	2001      	movs	r0, #1
 800bccc:	e5f3      	b.n	800b8b6 <_dtoa_r+0x496>
 800bcce:	bf00      	nop
 800bcd0:	0800e840 	.word	0x0800e840
 800bcd4:	0800e918 	.word	0x0800e918
 800bcd8:	3ff00000 	.word	0x3ff00000
 800bcdc:	401c0000 	.word	0x401c0000
 800bce0:	3fe00000 	.word	0x3fe00000
 800bce4:	40240000 	.word	0x40240000
 800bce8:	40140000 	.word	0x40140000
 800bcec:	4631      	mov	r1, r6
 800bcee:	2300      	movs	r3, #0
 800bcf0:	220a      	movs	r2, #10
 800bcf2:	4648      	mov	r0, r9
 800bcf4:	f001 fab6 	bl	800d264 <__multadd>
 800bcf8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	4606      	mov	r6, r0
 800bcfe:	f340 8297 	ble.w	800c230 <_dtoa_r+0xe10>
 800bd02:	9306      	str	r3, [sp, #24]
 800bd04:	2d00      	cmp	r5, #0
 800bd06:	dd05      	ble.n	800bd14 <_dtoa_r+0x8f4>
 800bd08:	4631      	mov	r1, r6
 800bd0a:	462a      	mov	r2, r5
 800bd0c:	4648      	mov	r0, r9
 800bd0e:	f001 fc29 	bl	800d564 <__lshift>
 800bd12:	4606      	mov	r6, r0
 800bd14:	2f00      	cmp	r7, #0
 800bd16:	f040 817c 	bne.w	800c012 <_dtoa_r+0xbf2>
 800bd1a:	9605      	str	r6, [sp, #20]
 800bd1c:	9b06      	ldr	r3, [sp, #24]
 800bd1e:	9a07      	ldr	r2, [sp, #28]
 800bd20:	f8dd b014 	ldr.w	fp, [sp, #20]
 800bd24:	3b01      	subs	r3, #1
 800bd26:	18d3      	adds	r3, r2, r3
 800bd28:	9308      	str	r3, [sp, #32]
 800bd2a:	f00a 0301 	and.w	r3, sl, #1
 800bd2e:	9309      	str	r3, [sp, #36]	; 0x24
 800bd30:	4617      	mov	r7, r2
 800bd32:	46c2      	mov	sl, r8
 800bd34:	4651      	mov	r1, sl
 800bd36:	4620      	mov	r0, r4
 800bd38:	f7ff fade 	bl	800b2f8 <quorem>
 800bd3c:	4631      	mov	r1, r6
 800bd3e:	4605      	mov	r5, r0
 800bd40:	4620      	mov	r0, r4
 800bd42:	f001 fc67 	bl	800d614 <__mcmp>
 800bd46:	465a      	mov	r2, fp
 800bd48:	9002      	str	r0, [sp, #8]
 800bd4a:	4651      	mov	r1, sl
 800bd4c:	4648      	mov	r0, r9
 800bd4e:	f001 fc81 	bl	800d654 <__mdiff>
 800bd52:	68c2      	ldr	r2, [r0, #12]
 800bd54:	4680      	mov	r8, r0
 800bd56:	f105 0330 	add.w	r3, r5, #48	; 0x30
 800bd5a:	2a00      	cmp	r2, #0
 800bd5c:	d149      	bne.n	800bdf2 <_dtoa_r+0x9d2>
 800bd5e:	4601      	mov	r1, r0
 800bd60:	4620      	mov	r0, r4
 800bd62:	9306      	str	r3, [sp, #24]
 800bd64:	f001 fc56 	bl	800d614 <__mcmp>
 800bd68:	4641      	mov	r1, r8
 800bd6a:	9005      	str	r0, [sp, #20]
 800bd6c:	4648      	mov	r0, r9
 800bd6e:	f001 fa6f 	bl	800d250 <_Bfree>
 800bd72:	9a05      	ldr	r2, [sp, #20]
 800bd74:	9b06      	ldr	r3, [sp, #24]
 800bd76:	b92a      	cbnz	r2, 800bd84 <_dtoa_r+0x964>
 800bd78:	9920      	ldr	r1, [sp, #128]	; 0x80
 800bd7a:	b919      	cbnz	r1, 800bd84 <_dtoa_r+0x964>
 800bd7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd7e:	2900      	cmp	r1, #0
 800bd80:	f000 8236 	beq.w	800c1f0 <_dtoa_r+0xdd0>
 800bd84:	9902      	ldr	r1, [sp, #8]
 800bd86:	2900      	cmp	r1, #0
 800bd88:	f2c0 80e4 	blt.w	800bf54 <_dtoa_r+0xb34>
 800bd8c:	d105      	bne.n	800bd9a <_dtoa_r+0x97a>
 800bd8e:	9920      	ldr	r1, [sp, #128]	; 0x80
 800bd90:	b919      	cbnz	r1, 800bd9a <_dtoa_r+0x97a>
 800bd92:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd94:	2900      	cmp	r1, #0
 800bd96:	f000 80dd 	beq.w	800bf54 <_dtoa_r+0xb34>
 800bd9a:	2a00      	cmp	r2, #0
 800bd9c:	f300 814d 	bgt.w	800c03a <_dtoa_r+0xc1a>
 800bda0:	9a08      	ldr	r2, [sp, #32]
 800bda2:	703b      	strb	r3, [r7, #0]
 800bda4:	f107 0801 	add.w	r8, r7, #1
 800bda8:	4297      	cmp	r7, r2
 800bdaa:	4645      	mov	r5, r8
 800bdac:	f000 8154 	beq.w	800c058 <_dtoa_r+0xc38>
 800bdb0:	4621      	mov	r1, r4
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	220a      	movs	r2, #10
 800bdb6:	4648      	mov	r0, r9
 800bdb8:	f001 fa54 	bl	800d264 <__multadd>
 800bdbc:	455e      	cmp	r6, fp
 800bdbe:	4604      	mov	r4, r0
 800bdc0:	4631      	mov	r1, r6
 800bdc2:	f04f 0300 	mov.w	r3, #0
 800bdc6:	f04f 020a 	mov.w	r2, #10
 800bdca:	4648      	mov	r0, r9
 800bdcc:	d00b      	beq.n	800bde6 <_dtoa_r+0x9c6>
 800bdce:	f001 fa49 	bl	800d264 <__multadd>
 800bdd2:	4659      	mov	r1, fp
 800bdd4:	4606      	mov	r6, r0
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	220a      	movs	r2, #10
 800bdda:	4648      	mov	r0, r9
 800bddc:	f001 fa42 	bl	800d264 <__multadd>
 800bde0:	4647      	mov	r7, r8
 800bde2:	4683      	mov	fp, r0
 800bde4:	e7a6      	b.n	800bd34 <_dtoa_r+0x914>
 800bde6:	f001 fa3d 	bl	800d264 <__multadd>
 800bdea:	4647      	mov	r7, r8
 800bdec:	4606      	mov	r6, r0
 800bdee:	4683      	mov	fp, r0
 800bdf0:	e7a0      	b.n	800bd34 <_dtoa_r+0x914>
 800bdf2:	4601      	mov	r1, r0
 800bdf4:	4648      	mov	r0, r9
 800bdf6:	9305      	str	r3, [sp, #20]
 800bdf8:	f001 fa2a 	bl	800d250 <_Bfree>
 800bdfc:	2201      	movs	r2, #1
 800bdfe:	9b05      	ldr	r3, [sp, #20]
 800be00:	e7c0      	b.n	800bd84 <_dtoa_r+0x964>
 800be02:	4641      	mov	r1, r8
 800be04:	4620      	mov	r0, r4
 800be06:	f001 fc05 	bl	800d614 <__mcmp>
 800be0a:	2800      	cmp	r0, #0
 800be0c:	f6bf ad7d 	bge.w	800b90a <_dtoa_r+0x4ea>
 800be10:	4621      	mov	r1, r4
 800be12:	9c04      	ldr	r4, [sp, #16]
 800be14:	2300      	movs	r3, #0
 800be16:	3c01      	subs	r4, #1
 800be18:	220a      	movs	r2, #10
 800be1a:	4648      	mov	r0, r9
 800be1c:	9404      	str	r4, [sp, #16]
 800be1e:	f001 fa21 	bl	800d264 <__multadd>
 800be22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be24:	4604      	mov	r4, r0
 800be26:	2b00      	cmp	r3, #0
 800be28:	f47f af60 	bne.w	800bcec <_dtoa_r+0x8cc>
 800be2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be2e:	2b00      	cmp	r3, #0
 800be30:	f340 81f6 	ble.w	800c220 <_dtoa_r+0xe00>
 800be34:	9306      	str	r3, [sp, #24]
 800be36:	e570      	b.n	800b91a <_dtoa_r+0x4fa>
 800be38:	9c08      	ldr	r4, [sp, #32]
 800be3a:	e51f      	b.n	800b87c <_dtoa_r+0x45c>
 800be3c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800be3e:	2b02      	cmp	r3, #2
 800be40:	f77f ad67 	ble.w	800b912 <_dtoa_r+0x4f2>
 800be44:	9b06      	ldr	r3, [sp, #24]
 800be46:	2b00      	cmp	r3, #0
 800be48:	f040 8179 	bne.w	800c13e <_dtoa_r+0xd1e>
 800be4c:	4641      	mov	r1, r8
 800be4e:	2205      	movs	r2, #5
 800be50:	4648      	mov	r0, r9
 800be52:	f001 fa07 	bl	800d264 <__multadd>
 800be56:	4601      	mov	r1, r0
 800be58:	4680      	mov	r8, r0
 800be5a:	4620      	mov	r0, r4
 800be5c:	f001 fbda 	bl	800d614 <__mcmp>
 800be60:	2800      	cmp	r0, #0
 800be62:	9408      	str	r4, [sp, #32]
 800be64:	f77f af0e 	ble.w	800bc84 <_dtoa_r+0x864>
 800be68:	9a04      	ldr	r2, [sp, #16]
 800be6a:	9907      	ldr	r1, [sp, #28]
 800be6c:	2331      	movs	r3, #49	; 0x31
 800be6e:	3201      	adds	r2, #1
 800be70:	9204      	str	r2, [sp, #16]
 800be72:	700b      	strb	r3, [r1, #0]
 800be74:	1c4d      	adds	r5, r1, #1
 800be76:	e709      	b.n	800bc8c <_dtoa_r+0x86c>
 800be78:	9a04      	ldr	r2, [sp, #16]
 800be7a:	3201      	adds	r2, #1
 800be7c:	9204      	str	r2, [sp, #16]
 800be7e:	9a07      	ldr	r2, [sp, #28]
 800be80:	2331      	movs	r3, #49	; 0x31
 800be82:	7013      	strb	r3, [r2, #0]
 800be84:	e588      	b.n	800b998 <_dtoa_r+0x578>
 800be86:	2301      	movs	r3, #1
 800be88:	9309      	str	r3, [sp, #36]	; 0x24
 800be8a:	e5cd      	b.n	800ba28 <_dtoa_r+0x608>
 800be8c:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800be90:	e491      	b.n	800b7b6 <_dtoa_r+0x396>
 800be92:	f1ba 0f00 	cmp.w	sl, #0
 800be96:	f47f ad04 	bne.w	800b8a2 <_dtoa_r+0x482>
 800be9a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	f040 813f 	bne.w	800c122 <_dtoa_r+0xd02>
 800bea4:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800bea8:	0d3f      	lsrs	r7, r7, #20
 800beaa:	053f      	lsls	r7, r7, #20
 800beac:	b137      	cbz	r7, 800bebc <_dtoa_r+0xa9c>
 800beae:	9b05      	ldr	r3, [sp, #20]
 800beb0:	3301      	adds	r3, #1
 800beb2:	9305      	str	r3, [sp, #20]
 800beb4:	9b02      	ldr	r3, [sp, #8]
 800beb6:	3301      	adds	r3, #1
 800beb8:	9302      	str	r3, [sp, #8]
 800beba:	2701      	movs	r7, #1
 800bebc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bebe:	2001      	movs	r0, #1
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	f43f acf8 	beq.w	800b8b6 <_dtoa_r+0x496>
 800bec6:	e4ed      	b.n	800b8a4 <_dtoa_r+0x484>
 800bec8:	4640      	mov	r0, r8
 800beca:	f7f4 fe6b 	bl	8000ba4 <__aeabi_i2d>
 800bece:	4632      	mov	r2, r6
 800bed0:	463b      	mov	r3, r7
 800bed2:	f7f4 fecd 	bl	8000c70 <__aeabi_dmul>
 800bed6:	2200      	movs	r2, #0
 800bed8:	4bbf      	ldr	r3, [pc, #764]	; (800c1d8 <_dtoa_r+0xdb8>)
 800beda:	f7f4 fd17 	bl	800090c <__adddf3>
 800bede:	4604      	mov	r4, r0
 800bee0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800bee4:	4630      	mov	r0, r6
 800bee6:	4639      	mov	r1, r7
 800bee8:	2200      	movs	r2, #0
 800beea:	4bbc      	ldr	r3, [pc, #752]	; (800c1dc <_dtoa_r+0xdbc>)
 800beec:	f7f4 fd0c 	bl	8000908 <__aeabi_dsub>
 800bef0:	4622      	mov	r2, r4
 800bef2:	462b      	mov	r3, r5
 800bef4:	4606      	mov	r6, r0
 800bef6:	460f      	mov	r7, r1
 800bef8:	f7f5 f94a 	bl	8001190 <__aeabi_dcmpgt>
 800befc:	4680      	mov	r8, r0
 800befe:	2800      	cmp	r0, #0
 800bf00:	f040 8105 	bne.w	800c10e <_dtoa_r+0xcee>
 800bf04:	4622      	mov	r2, r4
 800bf06:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800bf0a:	4630      	mov	r0, r6
 800bf0c:	4639      	mov	r1, r7
 800bf0e:	f7f5 f921 	bl	8001154 <__aeabi_dcmplt>
 800bf12:	b108      	cbz	r0, 800bf18 <_dtoa_r+0xaf8>
 800bf14:	4646      	mov	r6, r8
 800bf16:	e6b5      	b.n	800bc84 <_dtoa_r+0x864>
 800bf18:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
 800bf1c:	f7ff bb89 	b.w	800b632 <_dtoa_r+0x212>
 800bf20:	9807      	ldr	r0, [sp, #28]
 800bf22:	f7ff baae 	b.w	800b482 <_dtoa_r+0x62>
 800bf26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bf2a:	970a      	str	r7, [sp, #40]	; 0x28
 800bf2c:	1afb      	subs	r3, r7, r3
 800bf2e:	441a      	add	r2, r3
 800bf30:	920b      	str	r2, [sp, #44]	; 0x2c
 800bf32:	2700      	movs	r7, #0
 800bf34:	e461      	b.n	800b7fa <_dtoa_r+0x3da>
 800bf36:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
 800bf3a:	f04f 0802 	mov.w	r8, #2
 800bf3e:	e5bb      	b.n	800bab8 <_dtoa_r+0x698>
 800bf40:	461c      	mov	r4, r3
 800bf42:	2100      	movs	r1, #0
 800bf44:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800bf48:	e58a      	b.n	800ba60 <_dtoa_r+0x640>
 800bf4a:	2401      	movs	r4, #1
 800bf4c:	9421      	str	r4, [sp, #132]	; 0x84
 800bf4e:	940d      	str	r4, [sp, #52]	; 0x34
 800bf50:	9406      	str	r4, [sp, #24]
 800bf52:	e7f6      	b.n	800bf42 <_dtoa_r+0xb22>
 800bf54:	2a00      	cmp	r2, #0
 800bf56:	46d0      	mov	r8, sl
 800bf58:	f8cd b014 	str.w	fp, [sp, #20]
 800bf5c:	469a      	mov	sl, r3
 800bf5e:	dd11      	ble.n	800bf84 <_dtoa_r+0xb64>
 800bf60:	4621      	mov	r1, r4
 800bf62:	2201      	movs	r2, #1
 800bf64:	4648      	mov	r0, r9
 800bf66:	f001 fafd 	bl	800d564 <__lshift>
 800bf6a:	4641      	mov	r1, r8
 800bf6c:	4604      	mov	r4, r0
 800bf6e:	f001 fb51 	bl	800d614 <__mcmp>
 800bf72:	2800      	cmp	r0, #0
 800bf74:	f340 8149 	ble.w	800c20a <_dtoa_r+0xdea>
 800bf78:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bf7c:	f000 8106 	beq.w	800c18c <_dtoa_r+0xd6c>
 800bf80:	f105 0a31 	add.w	sl, r5, #49	; 0x31
 800bf84:	46b3      	mov	fp, r6
 800bf86:	f887 a000 	strb.w	sl, [r7]
 800bf8a:	1c7d      	adds	r5, r7, #1
 800bf8c:	9e05      	ldr	r6, [sp, #20]
 800bf8e:	9408      	str	r4, [sp, #32]
 800bf90:	e502      	b.n	800b998 <_dtoa_r+0x578>
 800bf92:	d104      	bne.n	800bf9e <_dtoa_r+0xb7e>
 800bf94:	f01a 0f01 	tst.w	sl, #1
 800bf98:	d001      	beq.n	800bf9e <_dtoa_r+0xb7e>
 800bf9a:	e4ed      	b.n	800b978 <_dtoa_r+0x558>
 800bf9c:	4615      	mov	r5, r2
 800bf9e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bfa2:	2b30      	cmp	r3, #48	; 0x30
 800bfa4:	f105 32ff 	add.w	r2, r5, #4294967295
 800bfa8:	d0f8      	beq.n	800bf9c <_dtoa_r+0xb7c>
 800bfaa:	e4f5      	b.n	800b998 <_dtoa_r+0x578>
 800bfac:	9b04      	ldr	r3, [sp, #16]
 800bfae:	425c      	negs	r4, r3
 800bfb0:	2c00      	cmp	r4, #0
 800bfb2:	f000 80bf 	beq.w	800c134 <_dtoa_r+0xd14>
 800bfb6:	4b8a      	ldr	r3, [pc, #552]	; (800c1e0 <_dtoa_r+0xdc0>)
 800bfb8:	f004 020f 	and.w	r2, r4, #15
 800bfbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bfc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800bfc8:	f7f4 fe52 	bl	8000c70 <__aeabi_dmul>
 800bfcc:	1124      	asrs	r4, r4, #4
 800bfce:	4606      	mov	r6, r0
 800bfd0:	460f      	mov	r7, r1
 800bfd2:	f000 812a 	beq.w	800c22a <_dtoa_r+0xe0a>
 800bfd6:	4d83      	ldr	r5, [pc, #524]	; (800c1e4 <_dtoa_r+0xdc4>)
 800bfd8:	f04f 0802 	mov.w	r8, #2
 800bfdc:	07e2      	lsls	r2, r4, #31
 800bfde:	d509      	bpl.n	800bff4 <_dtoa_r+0xbd4>
 800bfe0:	4630      	mov	r0, r6
 800bfe2:	4639      	mov	r1, r7
 800bfe4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bfe8:	f7f4 fe42 	bl	8000c70 <__aeabi_dmul>
 800bfec:	f108 0801 	add.w	r8, r8, #1
 800bff0:	4606      	mov	r6, r0
 800bff2:	460f      	mov	r7, r1
 800bff4:	1064      	asrs	r4, r4, #1
 800bff6:	f105 0508 	add.w	r5, r5, #8
 800bffa:	d1ef      	bne.n	800bfdc <_dtoa_r+0xbbc>
 800bffc:	e576      	b.n	800baec <_dtoa_r+0x6cc>
 800bffe:	9907      	ldr	r1, [sp, #28]
 800c000:	2230      	movs	r2, #48	; 0x30
 800c002:	700a      	strb	r2, [r1, #0]
 800c004:	9a04      	ldr	r2, [sp, #16]
 800c006:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 800c00a:	3201      	adds	r2, #1
 800c00c:	9204      	str	r2, [sp, #16]
 800c00e:	f7ff bbd0 	b.w	800b7b2 <_dtoa_r+0x392>
 800c012:	6871      	ldr	r1, [r6, #4]
 800c014:	4648      	mov	r0, r9
 800c016:	f001 f8f5 	bl	800d204 <_Balloc>
 800c01a:	6933      	ldr	r3, [r6, #16]
 800c01c:	1c9a      	adds	r2, r3, #2
 800c01e:	4605      	mov	r5, r0
 800c020:	0092      	lsls	r2, r2, #2
 800c022:	f106 010c 	add.w	r1, r6, #12
 800c026:	300c      	adds	r0, #12
 800c028:	f7f4 fafc 	bl	8000624 <memcpy>
 800c02c:	4629      	mov	r1, r5
 800c02e:	2201      	movs	r2, #1
 800c030:	4648      	mov	r0, r9
 800c032:	f001 fa97 	bl	800d564 <__lshift>
 800c036:	9005      	str	r0, [sp, #20]
 800c038:	e670      	b.n	800bd1c <_dtoa_r+0x8fc>
 800c03a:	2b39      	cmp	r3, #57	; 0x39
 800c03c:	f8cd b014 	str.w	fp, [sp, #20]
 800c040:	46d0      	mov	r8, sl
 800c042:	f000 80a3 	beq.w	800c18c <_dtoa_r+0xd6c>
 800c046:	f103 0a01 	add.w	sl, r3, #1
 800c04a:	46b3      	mov	fp, r6
 800c04c:	f887 a000 	strb.w	sl, [r7]
 800c050:	1c7d      	adds	r5, r7, #1
 800c052:	9e05      	ldr	r6, [sp, #20]
 800c054:	9408      	str	r4, [sp, #32]
 800c056:	e49f      	b.n	800b998 <_dtoa_r+0x578>
 800c058:	465a      	mov	r2, fp
 800c05a:	46d0      	mov	r8, sl
 800c05c:	46b3      	mov	fp, r6
 800c05e:	469a      	mov	sl, r3
 800c060:	4616      	mov	r6, r2
 800c062:	e47d      	b.n	800b960 <_dtoa_r+0x540>
 800c064:	495e      	ldr	r1, [pc, #376]	; (800c1e0 <_dtoa_r+0xdc0>)
 800c066:	f108 3aff 	add.w	sl, r8, #4294967295
 800c06a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c06e:	4622      	mov	r2, r4
 800c070:	462b      	mov	r3, r5
 800c072:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c076:	f7f4 fdfb 	bl	8000c70 <__aeabi_dmul>
 800c07a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800c07e:	4639      	mov	r1, r7
 800c080:	4630      	mov	r0, r6
 800c082:	f7f5 f8a5 	bl	80011d0 <__aeabi_d2iz>
 800c086:	4604      	mov	r4, r0
 800c088:	f7f4 fd8c 	bl	8000ba4 <__aeabi_i2d>
 800c08c:	4602      	mov	r2, r0
 800c08e:	460b      	mov	r3, r1
 800c090:	4630      	mov	r0, r6
 800c092:	4639      	mov	r1, r7
 800c094:	f7f4 fc38 	bl	8000908 <__aeabi_dsub>
 800c098:	9a07      	ldr	r2, [sp, #28]
 800c09a:	3430      	adds	r4, #48	; 0x30
 800c09c:	f1b8 0f01 	cmp.w	r8, #1
 800c0a0:	4606      	mov	r6, r0
 800c0a2:	460f      	mov	r7, r1
 800c0a4:	7014      	strb	r4, [r2, #0]
 800c0a6:	f102 0501 	add.w	r5, r2, #1
 800c0aa:	d01e      	beq.n	800c0ea <_dtoa_r+0xcca>
 800c0ac:	9b07      	ldr	r3, [sp, #28]
 800c0ae:	eb03 0b08 	add.w	fp, r3, r8
 800c0b2:	46a8      	mov	r8, r5
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	4b4c      	ldr	r3, [pc, #304]	; (800c1e8 <_dtoa_r+0xdc8>)
 800c0b8:	4630      	mov	r0, r6
 800c0ba:	4639      	mov	r1, r7
 800c0bc:	f7f4 fdd8 	bl	8000c70 <__aeabi_dmul>
 800c0c0:	460f      	mov	r7, r1
 800c0c2:	4606      	mov	r6, r0
 800c0c4:	f7f5 f884 	bl	80011d0 <__aeabi_d2iz>
 800c0c8:	4604      	mov	r4, r0
 800c0ca:	f7f4 fd6b 	bl	8000ba4 <__aeabi_i2d>
 800c0ce:	3430      	adds	r4, #48	; 0x30
 800c0d0:	4602      	mov	r2, r0
 800c0d2:	460b      	mov	r3, r1
 800c0d4:	4630      	mov	r0, r6
 800c0d6:	4639      	mov	r1, r7
 800c0d8:	f7f4 fc16 	bl	8000908 <__aeabi_dsub>
 800c0dc:	f808 4b01 	strb.w	r4, [r8], #1
 800c0e0:	45c3      	cmp	fp, r8
 800c0e2:	4606      	mov	r6, r0
 800c0e4:	460f      	mov	r7, r1
 800c0e6:	d1e5      	bne.n	800c0b4 <_dtoa_r+0xc94>
 800c0e8:	4455      	add	r5, sl
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	4b3f      	ldr	r3, [pc, #252]	; (800c1ec <_dtoa_r+0xdcc>)
 800c0ee:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800c0f2:	f7f4 fc0b 	bl	800090c <__adddf3>
 800c0f6:	4632      	mov	r2, r6
 800c0f8:	463b      	mov	r3, r7
 800c0fa:	f7f5 f82b 	bl	8001154 <__aeabi_dcmplt>
 800c0fe:	2800      	cmp	r0, #0
 800c100:	d04c      	beq.n	800c19c <_dtoa_r+0xd7c>
 800c102:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c104:	9304      	str	r3, [sp, #16]
 800c106:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 800c10a:	f7ff bb46 	b.w	800b79a <_dtoa_r+0x37a>
 800c10e:	f04f 0800 	mov.w	r8, #0
 800c112:	4646      	mov	r6, r8
 800c114:	e6a8      	b.n	800be68 <_dtoa_r+0xa48>
 800c116:	9b05      	ldr	r3, [sp, #20]
 800c118:	9a06      	ldr	r2, [sp, #24]
 800c11a:	1a9d      	subs	r5, r3, r2
 800c11c:	2300      	movs	r3, #0
 800c11e:	f7ff bb72 	b.w	800b806 <_dtoa_r+0x3e6>
 800c122:	2700      	movs	r7, #0
 800c124:	e6ca      	b.n	800bebc <_dtoa_r+0xa9c>
 800c126:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c128:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c12a:	9d05      	ldr	r5, [sp, #20]
 800c12c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c130:	f7ff bb69 	b.w	800b806 <_dtoa_r+0x3e6>
 800c134:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 800c138:	f04f 0802 	mov.w	r8, #2
 800c13c:	e4d6      	b.n	800baec <_dtoa_r+0x6cc>
 800c13e:	9408      	str	r4, [sp, #32]
 800c140:	e5a0      	b.n	800bc84 <_dtoa_r+0x864>
 800c142:	9b06      	ldr	r3, [sp, #24]
 800c144:	2b00      	cmp	r3, #0
 800c146:	f43f aebf 	beq.w	800bec8 <_dtoa_r+0xaa8>
 800c14a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	f77f aee3 	ble.w	800bf18 <_dtoa_r+0xaf8>
 800c152:	2200      	movs	r2, #0
 800c154:	4b24      	ldr	r3, [pc, #144]	; (800c1e8 <_dtoa_r+0xdc8>)
 800c156:	4630      	mov	r0, r6
 800c158:	4639      	mov	r1, r7
 800c15a:	f7f4 fd89 	bl	8000c70 <__aeabi_dmul>
 800c15e:	4606      	mov	r6, r0
 800c160:	460f      	mov	r7, r1
 800c162:	f108 0001 	add.w	r0, r8, #1
 800c166:	f7f4 fd1d 	bl	8000ba4 <__aeabi_i2d>
 800c16a:	4632      	mov	r2, r6
 800c16c:	463b      	mov	r3, r7
 800c16e:	f7f4 fd7f 	bl	8000c70 <__aeabi_dmul>
 800c172:	2200      	movs	r2, #0
 800c174:	4b18      	ldr	r3, [pc, #96]	; (800c1d8 <_dtoa_r+0xdb8>)
 800c176:	f7f4 fbc9 	bl	800090c <__adddf3>
 800c17a:	9a04      	ldr	r2, [sp, #16]
 800c17c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800c180:	3a01      	subs	r2, #1
 800c182:	4604      	mov	r4, r0
 800c184:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800c188:	9211      	str	r2, [sp, #68]	; 0x44
 800c18a:	e4d0      	b.n	800bb2e <_dtoa_r+0x70e>
 800c18c:	2239      	movs	r2, #57	; 0x39
 800c18e:	46b3      	mov	fp, r6
 800c190:	9408      	str	r4, [sp, #32]
 800c192:	9e05      	ldr	r6, [sp, #20]
 800c194:	703a      	strb	r2, [r7, #0]
 800c196:	1c7d      	adds	r5, r7, #1
 800c198:	f7ff bbf0 	b.w	800b97c <_dtoa_r+0x55c>
 800c19c:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800c1a0:	2000      	movs	r0, #0
 800c1a2:	4912      	ldr	r1, [pc, #72]	; (800c1ec <_dtoa_r+0xdcc>)
 800c1a4:	f7f4 fbb0 	bl	8000908 <__aeabi_dsub>
 800c1a8:	4632      	mov	r2, r6
 800c1aa:	463b      	mov	r3, r7
 800c1ac:	f7f4 fff0 	bl	8001190 <__aeabi_dcmpgt>
 800c1b0:	b908      	cbnz	r0, 800c1b6 <_dtoa_r+0xd96>
 800c1b2:	e6b1      	b.n	800bf18 <_dtoa_r+0xaf8>
 800c1b4:	4615      	mov	r5, r2
 800c1b6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c1ba:	2b30      	cmp	r3, #48	; 0x30
 800c1bc:	f105 32ff 	add.w	r2, r5, #4294967295
 800c1c0:	d0f8      	beq.n	800c1b4 <_dtoa_r+0xd94>
 800c1c2:	e530      	b.n	800bc26 <_dtoa_r+0x806>
 800c1c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c1c6:	9304      	str	r3, [sp, #16]
 800c1c8:	f7ff bae7 	b.w	800b79a <_dtoa_r+0x37a>
 800c1cc:	f1ba 0f00 	cmp.w	sl, #0
 800c1d0:	f47f ad7a 	bne.w	800bcc8 <_dtoa_r+0x8a8>
 800c1d4:	e661      	b.n	800be9a <_dtoa_r+0xa7a>
 800c1d6:	bf00      	nop
 800c1d8:	401c0000 	.word	0x401c0000
 800c1dc:	40140000 	.word	0x40140000
 800c1e0:	0800e840 	.word	0x0800e840
 800c1e4:	0800e918 	.word	0x0800e918
 800c1e8:	40240000 	.word	0x40240000
 800c1ec:	3fe00000 	.word	0x3fe00000
 800c1f0:	2b39      	cmp	r3, #57	; 0x39
 800c1f2:	f8cd b014 	str.w	fp, [sp, #20]
 800c1f6:	46d0      	mov	r8, sl
 800c1f8:	f8dd b008 	ldr.w	fp, [sp, #8]
 800c1fc:	469a      	mov	sl, r3
 800c1fe:	d0c5      	beq.n	800c18c <_dtoa_r+0xd6c>
 800c200:	f1bb 0f00 	cmp.w	fp, #0
 800c204:	f73f aebc 	bgt.w	800bf80 <_dtoa_r+0xb60>
 800c208:	e6bc      	b.n	800bf84 <_dtoa_r+0xb64>
 800c20a:	f47f aebb 	bne.w	800bf84 <_dtoa_r+0xb64>
 800c20e:	f01a 0f01 	tst.w	sl, #1
 800c212:	f43f aeb7 	beq.w	800bf84 <_dtoa_r+0xb64>
 800c216:	e6af      	b.n	800bf78 <_dtoa_r+0xb58>
 800c218:	f04f 0800 	mov.w	r8, #0
 800c21c:	4646      	mov	r6, r8
 800c21e:	e531      	b.n	800bc84 <_dtoa_r+0x864>
 800c220:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c222:	2b02      	cmp	r3, #2
 800c224:	dc21      	bgt.n	800c26a <_dtoa_r+0xe4a>
 800c226:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c228:	e604      	b.n	800be34 <_dtoa_r+0xa14>
 800c22a:	f04f 0802 	mov.w	r8, #2
 800c22e:	e45d      	b.n	800baec <_dtoa_r+0x6cc>
 800c230:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c232:	2b02      	cmp	r3, #2
 800c234:	dc19      	bgt.n	800c26a <_dtoa_r+0xe4a>
 800c236:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c238:	e563      	b.n	800bd02 <_dtoa_r+0x8e2>
 800c23a:	2400      	movs	r4, #0
 800c23c:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 800c240:	4621      	mov	r1, r4
 800c242:	4648      	mov	r0, r9
 800c244:	f000 ffde 	bl	800d204 <_Balloc>
 800c248:	f04f 33ff 	mov.w	r3, #4294967295
 800c24c:	9306      	str	r3, [sp, #24]
 800c24e:	930d      	str	r3, [sp, #52]	; 0x34
 800c250:	2301      	movs	r3, #1
 800c252:	9007      	str	r0, [sp, #28]
 800c254:	9421      	str	r4, [sp, #132]	; 0x84
 800c256:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800c25a:	9309      	str	r3, [sp, #36]	; 0x24
 800c25c:	f7ff b9e9 	b.w	800b632 <_dtoa_r+0x212>
 800c260:	f43f ab3d 	beq.w	800b8de <_dtoa_r+0x4be>
 800c264:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 800c268:	e522      	b.n	800bcb0 <_dtoa_r+0x890>
 800c26a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c26c:	9306      	str	r3, [sp, #24]
 800c26e:	e5e9      	b.n	800be44 <_dtoa_r+0xa24>
 800c270:	2501      	movs	r5, #1
 800c272:	f7ff b9a8 	b.w	800b5c6 <_dtoa_r+0x1a6>
 800c276:	bf00      	nop

0800c278 <__sflush_r>:
 800c278:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 800c27c:	b29a      	uxth	r2, r3
 800c27e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c282:	460d      	mov	r5, r1
 800c284:	0711      	lsls	r1, r2, #28
 800c286:	4680      	mov	r8, r0
 800c288:	d43c      	bmi.n	800c304 <__sflush_r+0x8c>
 800c28a:	686a      	ldr	r2, [r5, #4]
 800c28c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c290:	2a00      	cmp	r2, #0
 800c292:	81ab      	strh	r3, [r5, #12]
 800c294:	dd73      	ble.n	800c37e <__sflush_r+0x106>
 800c296:	6aac      	ldr	r4, [r5, #40]	; 0x28
 800c298:	2c00      	cmp	r4, #0
 800c29a:	d04b      	beq.n	800c334 <__sflush_r+0xbc>
 800c29c:	b29b      	uxth	r3, r3
 800c29e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800c2a2:	2100      	movs	r1, #0
 800c2a4:	b292      	uxth	r2, r2
 800c2a6:	f8d8 6000 	ldr.w	r6, [r8]
 800c2aa:	f8c8 1000 	str.w	r1, [r8]
 800c2ae:	2a00      	cmp	r2, #0
 800c2b0:	d069      	beq.n	800c386 <__sflush_r+0x10e>
 800c2b2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800c2b4:	075f      	lsls	r7, r3, #29
 800c2b6:	d505      	bpl.n	800c2c4 <__sflush_r+0x4c>
 800c2b8:	6869      	ldr	r1, [r5, #4]
 800c2ba:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800c2bc:	1a52      	subs	r2, r2, r1
 800c2be:	b10b      	cbz	r3, 800c2c4 <__sflush_r+0x4c>
 800c2c0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800c2c2:	1ad2      	subs	r2, r2, r3
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	69e9      	ldr	r1, [r5, #28]
 800c2c8:	4640      	mov	r0, r8
 800c2ca:	47a0      	blx	r4
 800c2cc:	1c44      	adds	r4, r0, #1
 800c2ce:	d03c      	beq.n	800c34a <__sflush_r+0xd2>
 800c2d0:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 800c2d4:	692a      	ldr	r2, [r5, #16]
 800c2d6:	602a      	str	r2, [r5, #0]
 800c2d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c2dc:	2200      	movs	r2, #0
 800c2de:	81ab      	strh	r3, [r5, #12]
 800c2e0:	04db      	lsls	r3, r3, #19
 800c2e2:	606a      	str	r2, [r5, #4]
 800c2e4:	d449      	bmi.n	800c37a <__sflush_r+0x102>
 800c2e6:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800c2e8:	f8c8 6000 	str.w	r6, [r8]
 800c2ec:	b311      	cbz	r1, 800c334 <__sflush_r+0xbc>
 800c2ee:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800c2f2:	4299      	cmp	r1, r3
 800c2f4:	d002      	beq.n	800c2fc <__sflush_r+0x84>
 800c2f6:	4640      	mov	r0, r8
 800c2f8:	f000 f94e 	bl	800c598 <_free_r>
 800c2fc:	2000      	movs	r0, #0
 800c2fe:	6328      	str	r0, [r5, #48]	; 0x30
 800c300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c304:	692e      	ldr	r6, [r5, #16]
 800c306:	b1ae      	cbz	r6, 800c334 <__sflush_r+0xbc>
 800c308:	682c      	ldr	r4, [r5, #0]
 800c30a:	602e      	str	r6, [r5, #0]
 800c30c:	0790      	lsls	r0, r2, #30
 800c30e:	bf0c      	ite	eq
 800c310:	696b      	ldreq	r3, [r5, #20]
 800c312:	2300      	movne	r3, #0
 800c314:	1ba4      	subs	r4, r4, r6
 800c316:	60ab      	str	r3, [r5, #8]
 800c318:	e00a      	b.n	800c330 <__sflush_r+0xb8>
 800c31a:	4623      	mov	r3, r4
 800c31c:	4632      	mov	r2, r6
 800c31e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800c320:	69e9      	ldr	r1, [r5, #28]
 800c322:	4640      	mov	r0, r8
 800c324:	47b8      	blx	r7
 800c326:	2800      	cmp	r0, #0
 800c328:	eba4 0400 	sub.w	r4, r4, r0
 800c32c:	4406      	add	r6, r0
 800c32e:	dd04      	ble.n	800c33a <__sflush_r+0xc2>
 800c330:	2c00      	cmp	r4, #0
 800c332:	dcf2      	bgt.n	800c31a <__sflush_r+0xa2>
 800c334:	2000      	movs	r0, #0
 800c336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c33a:	89ab      	ldrh	r3, [r5, #12]
 800c33c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c340:	81ab      	strh	r3, [r5, #12]
 800c342:	f04f 30ff 	mov.w	r0, #4294967295
 800c346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c34a:	f8d8 2000 	ldr.w	r2, [r8]
 800c34e:	2a1d      	cmp	r2, #29
 800c350:	d8f3      	bhi.n	800c33a <__sflush_r+0xc2>
 800c352:	4b1a      	ldr	r3, [pc, #104]	; (800c3bc <__sflush_r+0x144>)
 800c354:	40d3      	lsrs	r3, r2
 800c356:	f003 0301 	and.w	r3, r3, #1
 800c35a:	f083 0401 	eor.w	r4, r3, #1
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d0eb      	beq.n	800c33a <__sflush_r+0xc2>
 800c362:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 800c366:	6929      	ldr	r1, [r5, #16]
 800c368:	6029      	str	r1, [r5, #0]
 800c36a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c36e:	04d9      	lsls	r1, r3, #19
 800c370:	606c      	str	r4, [r5, #4]
 800c372:	81ab      	strh	r3, [r5, #12]
 800c374:	d5b7      	bpl.n	800c2e6 <__sflush_r+0x6e>
 800c376:	2a00      	cmp	r2, #0
 800c378:	d1b5      	bne.n	800c2e6 <__sflush_r+0x6e>
 800c37a:	6528      	str	r0, [r5, #80]	; 0x50
 800c37c:	e7b3      	b.n	800c2e6 <__sflush_r+0x6e>
 800c37e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800c380:	2a00      	cmp	r2, #0
 800c382:	dc88      	bgt.n	800c296 <__sflush_r+0x1e>
 800c384:	e7d6      	b.n	800c334 <__sflush_r+0xbc>
 800c386:	2301      	movs	r3, #1
 800c388:	69e9      	ldr	r1, [r5, #28]
 800c38a:	4640      	mov	r0, r8
 800c38c:	47a0      	blx	r4
 800c38e:	1c43      	adds	r3, r0, #1
 800c390:	4602      	mov	r2, r0
 800c392:	d002      	beq.n	800c39a <__sflush_r+0x122>
 800c394:	89ab      	ldrh	r3, [r5, #12]
 800c396:	6aac      	ldr	r4, [r5, #40]	; 0x28
 800c398:	e78c      	b.n	800c2b4 <__sflush_r+0x3c>
 800c39a:	f8d8 3000 	ldr.w	r3, [r8]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d0f8      	beq.n	800c394 <__sflush_r+0x11c>
 800c3a2:	2b1d      	cmp	r3, #29
 800c3a4:	d001      	beq.n	800c3aa <__sflush_r+0x132>
 800c3a6:	2b16      	cmp	r3, #22
 800c3a8:	d102      	bne.n	800c3b0 <__sflush_r+0x138>
 800c3aa:	f8c8 6000 	str.w	r6, [r8]
 800c3ae:	e7c1      	b.n	800c334 <__sflush_r+0xbc>
 800c3b0:	89ab      	ldrh	r3, [r5, #12]
 800c3b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3b6:	81ab      	strh	r3, [r5, #12]
 800c3b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3bc:	20400001 	.word	0x20400001

0800c3c0 <_fflush_r>:
 800c3c0:	b510      	push	{r4, lr}
 800c3c2:	4604      	mov	r4, r0
 800c3c4:	b082      	sub	sp, #8
 800c3c6:	b108      	cbz	r0, 800c3cc <_fflush_r+0xc>
 800c3c8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c3ca:	b153      	cbz	r3, 800c3e2 <_fflush_r+0x22>
 800c3cc:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 800c3d0:	b908      	cbnz	r0, 800c3d6 <_fflush_r+0x16>
 800c3d2:	b002      	add	sp, #8
 800c3d4:	bd10      	pop	{r4, pc}
 800c3d6:	4620      	mov	r0, r4
 800c3d8:	b002      	add	sp, #8
 800c3da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3de:	f7ff bf4b 	b.w	800c278 <__sflush_r>
 800c3e2:	9101      	str	r1, [sp, #4]
 800c3e4:	f000 f880 	bl	800c4e8 <__sinit>
 800c3e8:	9901      	ldr	r1, [sp, #4]
 800c3ea:	e7ef      	b.n	800c3cc <_fflush_r+0xc>

0800c3ec <_cleanup_r>:
 800c3ec:	4901      	ldr	r1, [pc, #4]	; (800c3f4 <_cleanup_r+0x8>)
 800c3ee:	f000 bb3d 	b.w	800ca6c <_fwalk_reent>
 800c3f2:	bf00      	nop
 800c3f4:	0800dee9 	.word	0x0800dee9

0800c3f8 <__sinit.part.1>:
 800c3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3fc:	4b35      	ldr	r3, [pc, #212]	; (800c4d4 <__sinit.part.1+0xdc>)
 800c3fe:	6845      	ldr	r5, [r0, #4]
 800c400:	63c3      	str	r3, [r0, #60]	; 0x3c
 800c402:	2400      	movs	r4, #0
 800c404:	4607      	mov	r7, r0
 800c406:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 800c40a:	2304      	movs	r3, #4
 800c40c:	2103      	movs	r1, #3
 800c40e:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
 800c412:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 800c416:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 800c41a:	b083      	sub	sp, #12
 800c41c:	602c      	str	r4, [r5, #0]
 800c41e:	606c      	str	r4, [r5, #4]
 800c420:	60ac      	str	r4, [r5, #8]
 800c422:	666c      	str	r4, [r5, #100]	; 0x64
 800c424:	81ec      	strh	r4, [r5, #14]
 800c426:	612c      	str	r4, [r5, #16]
 800c428:	616c      	str	r4, [r5, #20]
 800c42a:	61ac      	str	r4, [r5, #24]
 800c42c:	81ab      	strh	r3, [r5, #12]
 800c42e:	4621      	mov	r1, r4
 800c430:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 800c434:	2208      	movs	r2, #8
 800c436:	f7fb ff29 	bl	800828c <memset>
 800c43a:	68be      	ldr	r6, [r7, #8]
 800c43c:	f8df b098 	ldr.w	fp, [pc, #152]	; 800c4d8 <__sinit.part.1+0xe0>
 800c440:	f8df a098 	ldr.w	sl, [pc, #152]	; 800c4dc <__sinit.part.1+0xe4>
 800c444:	f8df 9098 	ldr.w	r9, [pc, #152]	; 800c4e0 <__sinit.part.1+0xe8>
 800c448:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800c4e4 <__sinit.part.1+0xec>
 800c44c:	f8c5 b020 	str.w	fp, [r5, #32]
 800c450:	2301      	movs	r3, #1
 800c452:	2209      	movs	r2, #9
 800c454:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 800c458:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 800c45c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 800c460:	61ed      	str	r5, [r5, #28]
 800c462:	4621      	mov	r1, r4
 800c464:	81f3      	strh	r3, [r6, #14]
 800c466:	81b2      	strh	r2, [r6, #12]
 800c468:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 800c46c:	6034      	str	r4, [r6, #0]
 800c46e:	6074      	str	r4, [r6, #4]
 800c470:	60b4      	str	r4, [r6, #8]
 800c472:	6674      	str	r4, [r6, #100]	; 0x64
 800c474:	6134      	str	r4, [r6, #16]
 800c476:	6174      	str	r4, [r6, #20]
 800c478:	61b4      	str	r4, [r6, #24]
 800c47a:	2208      	movs	r2, #8
 800c47c:	9301      	str	r3, [sp, #4]
 800c47e:	f7fb ff05 	bl	800828c <memset>
 800c482:	68fd      	ldr	r5, [r7, #12]
 800c484:	61f6      	str	r6, [r6, #28]
 800c486:	2012      	movs	r0, #18
 800c488:	2202      	movs	r2, #2
 800c48a:	f8c6 b020 	str.w	fp, [r6, #32]
 800c48e:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 800c492:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 800c496:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 800c49a:	4621      	mov	r1, r4
 800c49c:	81a8      	strh	r0, [r5, #12]
 800c49e:	81ea      	strh	r2, [r5, #14]
 800c4a0:	602c      	str	r4, [r5, #0]
 800c4a2:	606c      	str	r4, [r5, #4]
 800c4a4:	60ac      	str	r4, [r5, #8]
 800c4a6:	666c      	str	r4, [r5, #100]	; 0x64
 800c4a8:	612c      	str	r4, [r5, #16]
 800c4aa:	616c      	str	r4, [r5, #20]
 800c4ac:	61ac      	str	r4, [r5, #24]
 800c4ae:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 800c4b2:	2208      	movs	r2, #8
 800c4b4:	f7fb feea 	bl	800828c <memset>
 800c4b8:	9b01      	ldr	r3, [sp, #4]
 800c4ba:	61ed      	str	r5, [r5, #28]
 800c4bc:	f8c5 b020 	str.w	fp, [r5, #32]
 800c4c0:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 800c4c4:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 800c4c8:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 800c4cc:	63bb      	str	r3, [r7, #56]	; 0x38
 800c4ce:	b003      	add	sp, #12
 800c4d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4d4:	0800c3ed 	.word	0x0800c3ed
 800c4d8:	0800dc25 	.word	0x0800dc25
 800c4dc:	0800dc49 	.word	0x0800dc49
 800c4e0:	0800dc85 	.word	0x0800dc85
 800c4e4:	0800dca5 	.word	0x0800dca5

0800c4e8 <__sinit>:
 800c4e8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c4ea:	b103      	cbz	r3, 800c4ee <__sinit+0x6>
 800c4ec:	4770      	bx	lr
 800c4ee:	f7ff bf83 	b.w	800c3f8 <__sinit.part.1>
 800c4f2:	bf00      	nop

0800c4f4 <__sfp_lock_acquire>:
 800c4f4:	4770      	bx	lr
 800c4f6:	bf00      	nop

0800c4f8 <__sfp_lock_release>:
 800c4f8:	4770      	bx	lr
 800c4fa:	bf00      	nop

0800c4fc <_malloc_trim_r>:
 800c4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4fe:	4f23      	ldr	r7, [pc, #140]	; (800c58c <_malloc_trim_r+0x90>)
 800c500:	460c      	mov	r4, r1
 800c502:	4606      	mov	r6, r0
 800c504:	f000 fe7a 	bl	800d1fc <__malloc_lock>
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	685d      	ldr	r5, [r3, #4]
 800c50c:	f025 0503 	bic.w	r5, r5, #3
 800c510:	1b29      	subs	r1, r5, r4
 800c512:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 800c516:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 800c51a:	f021 010f 	bic.w	r1, r1, #15
 800c51e:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 800c522:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800c526:	db07      	blt.n	800c538 <_malloc_trim_r+0x3c>
 800c528:	2100      	movs	r1, #0
 800c52a:	4630      	mov	r0, r6
 800c52c:	f001 fb68 	bl	800dc00 <_sbrk_r>
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	442b      	add	r3, r5
 800c534:	4298      	cmp	r0, r3
 800c536:	d004      	beq.n	800c542 <_malloc_trim_r+0x46>
 800c538:	4630      	mov	r0, r6
 800c53a:	f000 fe61 	bl	800d200 <__malloc_unlock>
 800c53e:	2000      	movs	r0, #0
 800c540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c542:	4261      	negs	r1, r4
 800c544:	4630      	mov	r0, r6
 800c546:	f001 fb5b 	bl	800dc00 <_sbrk_r>
 800c54a:	3001      	adds	r0, #1
 800c54c:	d00d      	beq.n	800c56a <_malloc_trim_r+0x6e>
 800c54e:	4b10      	ldr	r3, [pc, #64]	; (800c590 <_malloc_trim_r+0x94>)
 800c550:	68ba      	ldr	r2, [r7, #8]
 800c552:	6819      	ldr	r1, [r3, #0]
 800c554:	1b2d      	subs	r5, r5, r4
 800c556:	f045 0501 	orr.w	r5, r5, #1
 800c55a:	4630      	mov	r0, r6
 800c55c:	1b09      	subs	r1, r1, r4
 800c55e:	6055      	str	r5, [r2, #4]
 800c560:	6019      	str	r1, [r3, #0]
 800c562:	f000 fe4d 	bl	800d200 <__malloc_unlock>
 800c566:	2001      	movs	r0, #1
 800c568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c56a:	2100      	movs	r1, #0
 800c56c:	4630      	mov	r0, r6
 800c56e:	f001 fb47 	bl	800dc00 <_sbrk_r>
 800c572:	68ba      	ldr	r2, [r7, #8]
 800c574:	1a83      	subs	r3, r0, r2
 800c576:	2b0f      	cmp	r3, #15
 800c578:	ddde      	ble.n	800c538 <_malloc_trim_r+0x3c>
 800c57a:	4c06      	ldr	r4, [pc, #24]	; (800c594 <_malloc_trim_r+0x98>)
 800c57c:	4904      	ldr	r1, [pc, #16]	; (800c590 <_malloc_trim_r+0x94>)
 800c57e:	6824      	ldr	r4, [r4, #0]
 800c580:	f043 0301 	orr.w	r3, r3, #1
 800c584:	1b00      	subs	r0, r0, r4
 800c586:	6053      	str	r3, [r2, #4]
 800c588:	6008      	str	r0, [r1, #0]
 800c58a:	e7d5      	b.n	800c538 <_malloc_trim_r+0x3c>
 800c58c:	20000464 	.word	0x20000464
 800c590:	20001ed8 	.word	0x20001ed8
 800c594:	20000870 	.word	0x20000870

0800c598 <_free_r>:
 800c598:	2900      	cmp	r1, #0
 800c59a:	d045      	beq.n	800c628 <_free_r+0x90>
 800c59c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5a0:	460d      	mov	r5, r1
 800c5a2:	4680      	mov	r8, r0
 800c5a4:	f000 fe2a 	bl	800d1fc <__malloc_lock>
 800c5a8:	f855 7c04 	ldr.w	r7, [r5, #-4]
 800c5ac:	496a      	ldr	r1, [pc, #424]	; (800c758 <_free_r+0x1c0>)
 800c5ae:	f027 0301 	bic.w	r3, r7, #1
 800c5b2:	f1a5 0408 	sub.w	r4, r5, #8
 800c5b6:	18e2      	adds	r2, r4, r3
 800c5b8:	688e      	ldr	r6, [r1, #8]
 800c5ba:	6850      	ldr	r0, [r2, #4]
 800c5bc:	42b2      	cmp	r2, r6
 800c5be:	f020 0003 	bic.w	r0, r0, #3
 800c5c2:	d062      	beq.n	800c68a <_free_r+0xf2>
 800c5c4:	07fe      	lsls	r6, r7, #31
 800c5c6:	6050      	str	r0, [r2, #4]
 800c5c8:	d40b      	bmi.n	800c5e2 <_free_r+0x4a>
 800c5ca:	f855 7c08 	ldr.w	r7, [r5, #-8]
 800c5ce:	1be4      	subs	r4, r4, r7
 800c5d0:	f101 0e08 	add.w	lr, r1, #8
 800c5d4:	68a5      	ldr	r5, [r4, #8]
 800c5d6:	4575      	cmp	r5, lr
 800c5d8:	443b      	add	r3, r7
 800c5da:	d06f      	beq.n	800c6bc <_free_r+0x124>
 800c5dc:	68e7      	ldr	r7, [r4, #12]
 800c5de:	60ef      	str	r7, [r5, #12]
 800c5e0:	60bd      	str	r5, [r7, #8]
 800c5e2:	1815      	adds	r5, r2, r0
 800c5e4:	686d      	ldr	r5, [r5, #4]
 800c5e6:	07ed      	lsls	r5, r5, #31
 800c5e8:	d542      	bpl.n	800c670 <_free_r+0xd8>
 800c5ea:	f043 0201 	orr.w	r2, r3, #1
 800c5ee:	6062      	str	r2, [r4, #4]
 800c5f0:	50e3      	str	r3, [r4, r3]
 800c5f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c5f6:	d218      	bcs.n	800c62a <_free_r+0x92>
 800c5f8:	08db      	lsrs	r3, r3, #3
 800c5fa:	1c5a      	adds	r2, r3, #1
 800c5fc:	684d      	ldr	r5, [r1, #4]
 800c5fe:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
 800c602:	60a7      	str	r7, [r4, #8]
 800c604:	2001      	movs	r0, #1
 800c606:	109b      	asrs	r3, r3, #2
 800c608:	fa00 f303 	lsl.w	r3, r0, r3
 800c60c:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
 800c610:	431d      	orrs	r5, r3
 800c612:	3808      	subs	r0, #8
 800c614:	60e0      	str	r0, [r4, #12]
 800c616:	604d      	str	r5, [r1, #4]
 800c618:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
 800c61c:	60fc      	str	r4, [r7, #12]
 800c61e:	4640      	mov	r0, r8
 800c620:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c624:	f000 bdec 	b.w	800d200 <__malloc_unlock>
 800c628:	4770      	bx	lr
 800c62a:	0a5a      	lsrs	r2, r3, #9
 800c62c:	2a04      	cmp	r2, #4
 800c62e:	d853      	bhi.n	800c6d8 <_free_r+0x140>
 800c630:	099a      	lsrs	r2, r3, #6
 800c632:	f102 0739 	add.w	r7, r2, #57	; 0x39
 800c636:	007f      	lsls	r7, r7, #1
 800c638:	f102 0538 	add.w	r5, r2, #56	; 0x38
 800c63c:	eb01 0087 	add.w	r0, r1, r7, lsl #2
 800c640:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
 800c644:	4944      	ldr	r1, [pc, #272]	; (800c758 <_free_r+0x1c0>)
 800c646:	3808      	subs	r0, #8
 800c648:	4290      	cmp	r0, r2
 800c64a:	d04d      	beq.n	800c6e8 <_free_r+0x150>
 800c64c:	6851      	ldr	r1, [r2, #4]
 800c64e:	f021 0103 	bic.w	r1, r1, #3
 800c652:	428b      	cmp	r3, r1
 800c654:	d202      	bcs.n	800c65c <_free_r+0xc4>
 800c656:	6892      	ldr	r2, [r2, #8]
 800c658:	4290      	cmp	r0, r2
 800c65a:	d1f7      	bne.n	800c64c <_free_r+0xb4>
 800c65c:	68d0      	ldr	r0, [r2, #12]
 800c65e:	60e0      	str	r0, [r4, #12]
 800c660:	60a2      	str	r2, [r4, #8]
 800c662:	6084      	str	r4, [r0, #8]
 800c664:	60d4      	str	r4, [r2, #12]
 800c666:	4640      	mov	r0, r8
 800c668:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c66c:	f000 bdc8 	b.w	800d200 <__malloc_unlock>
 800c670:	6895      	ldr	r5, [r2, #8]
 800c672:	4f3a      	ldr	r7, [pc, #232]	; (800c75c <_free_r+0x1c4>)
 800c674:	42bd      	cmp	r5, r7
 800c676:	4403      	add	r3, r0
 800c678:	d03f      	beq.n	800c6fa <_free_r+0x162>
 800c67a:	68d0      	ldr	r0, [r2, #12]
 800c67c:	60e8      	str	r0, [r5, #12]
 800c67e:	f043 0201 	orr.w	r2, r3, #1
 800c682:	6085      	str	r5, [r0, #8]
 800c684:	6062      	str	r2, [r4, #4]
 800c686:	50e3      	str	r3, [r4, r3]
 800c688:	e7b3      	b.n	800c5f2 <_free_r+0x5a>
 800c68a:	07ff      	lsls	r7, r7, #31
 800c68c:	4403      	add	r3, r0
 800c68e:	d407      	bmi.n	800c6a0 <_free_r+0x108>
 800c690:	f855 2c08 	ldr.w	r2, [r5, #-8]
 800c694:	1aa4      	subs	r4, r4, r2
 800c696:	4413      	add	r3, r2
 800c698:	68a0      	ldr	r0, [r4, #8]
 800c69a:	68e2      	ldr	r2, [r4, #12]
 800c69c:	60c2      	str	r2, [r0, #12]
 800c69e:	6090      	str	r0, [r2, #8]
 800c6a0:	4a2f      	ldr	r2, [pc, #188]	; (800c760 <_free_r+0x1c8>)
 800c6a2:	6812      	ldr	r2, [r2, #0]
 800c6a4:	f043 0001 	orr.w	r0, r3, #1
 800c6a8:	4293      	cmp	r3, r2
 800c6aa:	6060      	str	r0, [r4, #4]
 800c6ac:	608c      	str	r4, [r1, #8]
 800c6ae:	d3b6      	bcc.n	800c61e <_free_r+0x86>
 800c6b0:	4b2c      	ldr	r3, [pc, #176]	; (800c764 <_free_r+0x1cc>)
 800c6b2:	4640      	mov	r0, r8
 800c6b4:	6819      	ldr	r1, [r3, #0]
 800c6b6:	f7ff ff21 	bl	800c4fc <_malloc_trim_r>
 800c6ba:	e7b0      	b.n	800c61e <_free_r+0x86>
 800c6bc:	1811      	adds	r1, r2, r0
 800c6be:	6849      	ldr	r1, [r1, #4]
 800c6c0:	07c9      	lsls	r1, r1, #31
 800c6c2:	d444      	bmi.n	800c74e <_free_r+0x1b6>
 800c6c4:	6891      	ldr	r1, [r2, #8]
 800c6c6:	68d2      	ldr	r2, [r2, #12]
 800c6c8:	60ca      	str	r2, [r1, #12]
 800c6ca:	4403      	add	r3, r0
 800c6cc:	f043 0001 	orr.w	r0, r3, #1
 800c6d0:	6091      	str	r1, [r2, #8]
 800c6d2:	6060      	str	r0, [r4, #4]
 800c6d4:	50e3      	str	r3, [r4, r3]
 800c6d6:	e7a2      	b.n	800c61e <_free_r+0x86>
 800c6d8:	2a14      	cmp	r2, #20
 800c6da:	d817      	bhi.n	800c70c <_free_r+0x174>
 800c6dc:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 800c6e0:	007f      	lsls	r7, r7, #1
 800c6e2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 800c6e6:	e7a9      	b.n	800c63c <_free_r+0xa4>
 800c6e8:	10aa      	asrs	r2, r5, #2
 800c6ea:	684b      	ldr	r3, [r1, #4]
 800c6ec:	2501      	movs	r5, #1
 800c6ee:	fa05 f202 	lsl.w	r2, r5, r2
 800c6f2:	4313      	orrs	r3, r2
 800c6f4:	604b      	str	r3, [r1, #4]
 800c6f6:	4602      	mov	r2, r0
 800c6f8:	e7b1      	b.n	800c65e <_free_r+0xc6>
 800c6fa:	f043 0201 	orr.w	r2, r3, #1
 800c6fe:	614c      	str	r4, [r1, #20]
 800c700:	610c      	str	r4, [r1, #16]
 800c702:	60e5      	str	r5, [r4, #12]
 800c704:	60a5      	str	r5, [r4, #8]
 800c706:	6062      	str	r2, [r4, #4]
 800c708:	50e3      	str	r3, [r4, r3]
 800c70a:	e788      	b.n	800c61e <_free_r+0x86>
 800c70c:	2a54      	cmp	r2, #84	; 0x54
 800c70e:	d806      	bhi.n	800c71e <_free_r+0x186>
 800c710:	0b1a      	lsrs	r2, r3, #12
 800c712:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 800c716:	007f      	lsls	r7, r7, #1
 800c718:	f102 056e 	add.w	r5, r2, #110	; 0x6e
 800c71c:	e78e      	b.n	800c63c <_free_r+0xa4>
 800c71e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800c722:	d806      	bhi.n	800c732 <_free_r+0x19a>
 800c724:	0bda      	lsrs	r2, r3, #15
 800c726:	f102 0778 	add.w	r7, r2, #120	; 0x78
 800c72a:	007f      	lsls	r7, r7, #1
 800c72c:	f102 0577 	add.w	r5, r2, #119	; 0x77
 800c730:	e784      	b.n	800c63c <_free_r+0xa4>
 800c732:	f240 5054 	movw	r0, #1364	; 0x554
 800c736:	4282      	cmp	r2, r0
 800c738:	d806      	bhi.n	800c748 <_free_r+0x1b0>
 800c73a:	0c9a      	lsrs	r2, r3, #18
 800c73c:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 800c740:	007f      	lsls	r7, r7, #1
 800c742:	f102 057c 	add.w	r5, r2, #124	; 0x7c
 800c746:	e779      	b.n	800c63c <_free_r+0xa4>
 800c748:	27fe      	movs	r7, #254	; 0xfe
 800c74a:	257e      	movs	r5, #126	; 0x7e
 800c74c:	e776      	b.n	800c63c <_free_r+0xa4>
 800c74e:	f043 0201 	orr.w	r2, r3, #1
 800c752:	6062      	str	r2, [r4, #4]
 800c754:	50e3      	str	r3, [r4, r3]
 800c756:	e762      	b.n	800c61e <_free_r+0x86>
 800c758:	20000464 	.word	0x20000464
 800c75c:	2000046c 	.word	0x2000046c
 800c760:	2000086c 	.word	0x2000086c
 800c764:	20001ed4 	.word	0x20001ed4

0800c768 <__sfvwrite_r>:
 800c768:	6893      	ldr	r3, [r2, #8]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d076      	beq.n	800c85c <__sfvwrite_r+0xf4>
 800c76e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c772:	898b      	ldrh	r3, [r1, #12]
 800c774:	b085      	sub	sp, #20
 800c776:	460c      	mov	r4, r1
 800c778:	0719      	lsls	r1, r3, #28
 800c77a:	9001      	str	r0, [sp, #4]
 800c77c:	4616      	mov	r6, r2
 800c77e:	d529      	bpl.n	800c7d4 <__sfvwrite_r+0x6c>
 800c780:	6922      	ldr	r2, [r4, #16]
 800c782:	b33a      	cbz	r2, 800c7d4 <__sfvwrite_r+0x6c>
 800c784:	f003 0802 	and.w	r8, r3, #2
 800c788:	fa1f f088 	uxth.w	r0, r8
 800c78c:	6835      	ldr	r5, [r6, #0]
 800c78e:	2800      	cmp	r0, #0
 800c790:	d02f      	beq.n	800c7f2 <__sfvwrite_r+0x8a>
 800c792:	f04f 0900 	mov.w	r9, #0
 800c796:	4fb4      	ldr	r7, [pc, #720]	; (800ca68 <__sfvwrite_r+0x300>)
 800c798:	46c8      	mov	r8, r9
 800c79a:	46b2      	mov	sl, r6
 800c79c:	45b8      	cmp	r8, r7
 800c79e:	4643      	mov	r3, r8
 800c7a0:	464a      	mov	r2, r9
 800c7a2:	bf28      	it	cs
 800c7a4:	463b      	movcs	r3, r7
 800c7a6:	9801      	ldr	r0, [sp, #4]
 800c7a8:	f1b8 0f00 	cmp.w	r8, #0
 800c7ac:	d050      	beq.n	800c850 <__sfvwrite_r+0xe8>
 800c7ae:	69e1      	ldr	r1, [r4, #28]
 800c7b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c7b2:	47b0      	blx	r6
 800c7b4:	2800      	cmp	r0, #0
 800c7b6:	dd71      	ble.n	800c89c <__sfvwrite_r+0x134>
 800c7b8:	f8da 3008 	ldr.w	r3, [sl, #8]
 800c7bc:	1a1b      	subs	r3, r3, r0
 800c7be:	4481      	add	r9, r0
 800c7c0:	ebc0 0808 	rsb	r8, r0, r8
 800c7c4:	f8ca 3008 	str.w	r3, [sl, #8]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d1e7      	bne.n	800c79c <__sfvwrite_r+0x34>
 800c7cc:	2000      	movs	r0, #0
 800c7ce:	b005      	add	sp, #20
 800c7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7d4:	4621      	mov	r1, r4
 800c7d6:	9801      	ldr	r0, [sp, #4]
 800c7d8:	f7fe fd2a 	bl	800b230 <__swsetup_r>
 800c7dc:	2800      	cmp	r0, #0
 800c7de:	f040 813a 	bne.w	800ca56 <__sfvwrite_r+0x2ee>
 800c7e2:	89a3      	ldrh	r3, [r4, #12]
 800c7e4:	6835      	ldr	r5, [r6, #0]
 800c7e6:	f003 0802 	and.w	r8, r3, #2
 800c7ea:	fa1f f088 	uxth.w	r0, r8
 800c7ee:	2800      	cmp	r0, #0
 800c7f0:	d1cf      	bne.n	800c792 <__sfvwrite_r+0x2a>
 800c7f2:	f013 0901 	ands.w	r9, r3, #1
 800c7f6:	d15b      	bne.n	800c8b0 <__sfvwrite_r+0x148>
 800c7f8:	464f      	mov	r7, r9
 800c7fa:	9602      	str	r6, [sp, #8]
 800c7fc:	b31f      	cbz	r7, 800c846 <__sfvwrite_r+0xde>
 800c7fe:	059a      	lsls	r2, r3, #22
 800c800:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800c804:	d52c      	bpl.n	800c860 <__sfvwrite_r+0xf8>
 800c806:	4547      	cmp	r7, r8
 800c808:	46c2      	mov	sl, r8
 800c80a:	f0c0 80a4 	bcc.w	800c956 <__sfvwrite_r+0x1ee>
 800c80e:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800c812:	f040 80b1 	bne.w	800c978 <__sfvwrite_r+0x210>
 800c816:	6820      	ldr	r0, [r4, #0]
 800c818:	4652      	mov	r2, sl
 800c81a:	4649      	mov	r1, r9
 800c81c:	f000 fc8a 	bl	800d134 <memmove>
 800c820:	68a0      	ldr	r0, [r4, #8]
 800c822:	6823      	ldr	r3, [r4, #0]
 800c824:	ebc8 0000 	rsb	r0, r8, r0
 800c828:	4453      	add	r3, sl
 800c82a:	60a0      	str	r0, [r4, #8]
 800c82c:	6023      	str	r3, [r4, #0]
 800c82e:	4638      	mov	r0, r7
 800c830:	9a02      	ldr	r2, [sp, #8]
 800c832:	6893      	ldr	r3, [r2, #8]
 800c834:	1a1b      	subs	r3, r3, r0
 800c836:	4481      	add	r9, r0
 800c838:	1a3f      	subs	r7, r7, r0
 800c83a:	6093      	str	r3, [r2, #8]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d0c5      	beq.n	800c7cc <__sfvwrite_r+0x64>
 800c840:	89a3      	ldrh	r3, [r4, #12]
 800c842:	2f00      	cmp	r7, #0
 800c844:	d1db      	bne.n	800c7fe <__sfvwrite_r+0x96>
 800c846:	f8d5 9000 	ldr.w	r9, [r5]
 800c84a:	686f      	ldr	r7, [r5, #4]
 800c84c:	3508      	adds	r5, #8
 800c84e:	e7d5      	b.n	800c7fc <__sfvwrite_r+0x94>
 800c850:	f8d5 9000 	ldr.w	r9, [r5]
 800c854:	f8d5 8004 	ldr.w	r8, [r5, #4]
 800c858:	3508      	adds	r5, #8
 800c85a:	e79f      	b.n	800c79c <__sfvwrite_r+0x34>
 800c85c:	2000      	movs	r0, #0
 800c85e:	4770      	bx	lr
 800c860:	6820      	ldr	r0, [r4, #0]
 800c862:	6923      	ldr	r3, [r4, #16]
 800c864:	4298      	cmp	r0, r3
 800c866:	d803      	bhi.n	800c870 <__sfvwrite_r+0x108>
 800c868:	6961      	ldr	r1, [r4, #20]
 800c86a:	428f      	cmp	r7, r1
 800c86c:	f080 80b7 	bcs.w	800c9de <__sfvwrite_r+0x276>
 800c870:	45b8      	cmp	r8, r7
 800c872:	bf28      	it	cs
 800c874:	46b8      	movcs	r8, r7
 800c876:	4642      	mov	r2, r8
 800c878:	4649      	mov	r1, r9
 800c87a:	f000 fc5b 	bl	800d134 <memmove>
 800c87e:	68a3      	ldr	r3, [r4, #8]
 800c880:	6822      	ldr	r2, [r4, #0]
 800c882:	ebc8 0303 	rsb	r3, r8, r3
 800c886:	4442      	add	r2, r8
 800c888:	60a3      	str	r3, [r4, #8]
 800c88a:	6022      	str	r2, [r4, #0]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d149      	bne.n	800c924 <__sfvwrite_r+0x1bc>
 800c890:	4621      	mov	r1, r4
 800c892:	9801      	ldr	r0, [sp, #4]
 800c894:	f7ff fd94 	bl	800c3c0 <_fflush_r>
 800c898:	2800      	cmp	r0, #0
 800c89a:	d043      	beq.n	800c924 <__sfvwrite_r+0x1bc>
 800c89c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c8a8:	81a3      	strh	r3, [r4, #12]
 800c8aa:	b005      	add	sp, #20
 800c8ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8b0:	4680      	mov	r8, r0
 800c8b2:	9002      	str	r0, [sp, #8]
 800c8b4:	4682      	mov	sl, r0
 800c8b6:	4681      	mov	r9, r0
 800c8b8:	f1b9 0f00 	cmp.w	r9, #0
 800c8bc:	d02a      	beq.n	800c914 <__sfvwrite_r+0x1ac>
 800c8be:	9b02      	ldr	r3, [sp, #8]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d04c      	beq.n	800c95e <__sfvwrite_r+0x1f6>
 800c8c4:	6820      	ldr	r0, [r4, #0]
 800c8c6:	6923      	ldr	r3, [r4, #16]
 800c8c8:	6962      	ldr	r2, [r4, #20]
 800c8ca:	45c8      	cmp	r8, r9
 800c8cc:	46c3      	mov	fp, r8
 800c8ce:	bf28      	it	cs
 800c8d0:	46cb      	movcs	fp, r9
 800c8d2:	4298      	cmp	r0, r3
 800c8d4:	465f      	mov	r7, fp
 800c8d6:	d904      	bls.n	800c8e2 <__sfvwrite_r+0x17a>
 800c8d8:	68a3      	ldr	r3, [r4, #8]
 800c8da:	4413      	add	r3, r2
 800c8dc:	459b      	cmp	fp, r3
 800c8de:	f300 8090 	bgt.w	800ca02 <__sfvwrite_r+0x29a>
 800c8e2:	4593      	cmp	fp, r2
 800c8e4:	db20      	blt.n	800c928 <__sfvwrite_r+0x1c0>
 800c8e6:	4613      	mov	r3, r2
 800c8e8:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800c8ea:	69e1      	ldr	r1, [r4, #28]
 800c8ec:	9801      	ldr	r0, [sp, #4]
 800c8ee:	4652      	mov	r2, sl
 800c8f0:	47b8      	blx	r7
 800c8f2:	1e07      	subs	r7, r0, #0
 800c8f4:	ddd2      	ble.n	800c89c <__sfvwrite_r+0x134>
 800c8f6:	ebb8 0807 	subs.w	r8, r8, r7
 800c8fa:	d023      	beq.n	800c944 <__sfvwrite_r+0x1dc>
 800c8fc:	68b3      	ldr	r3, [r6, #8]
 800c8fe:	1bdb      	subs	r3, r3, r7
 800c900:	44ba      	add	sl, r7
 800c902:	ebc7 0909 	rsb	r9, r7, r9
 800c906:	60b3      	str	r3, [r6, #8]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	f43f af5f 	beq.w	800c7cc <__sfvwrite_r+0x64>
 800c90e:	f1b9 0f00 	cmp.w	r9, #0
 800c912:	d1d4      	bne.n	800c8be <__sfvwrite_r+0x156>
 800c914:	2300      	movs	r3, #0
 800c916:	f8d5 a000 	ldr.w	sl, [r5]
 800c91a:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800c91e:	9302      	str	r3, [sp, #8]
 800c920:	3508      	adds	r5, #8
 800c922:	e7c9      	b.n	800c8b8 <__sfvwrite_r+0x150>
 800c924:	4640      	mov	r0, r8
 800c926:	e783      	b.n	800c830 <__sfvwrite_r+0xc8>
 800c928:	465a      	mov	r2, fp
 800c92a:	4651      	mov	r1, sl
 800c92c:	f000 fc02 	bl	800d134 <memmove>
 800c930:	68a2      	ldr	r2, [r4, #8]
 800c932:	6823      	ldr	r3, [r4, #0]
 800c934:	ebcb 0202 	rsb	r2, fp, r2
 800c938:	445b      	add	r3, fp
 800c93a:	ebb8 0807 	subs.w	r8, r8, r7
 800c93e:	60a2      	str	r2, [r4, #8]
 800c940:	6023      	str	r3, [r4, #0]
 800c942:	d1db      	bne.n	800c8fc <__sfvwrite_r+0x194>
 800c944:	4621      	mov	r1, r4
 800c946:	9801      	ldr	r0, [sp, #4]
 800c948:	f7ff fd3a 	bl	800c3c0 <_fflush_r>
 800c94c:	2800      	cmp	r0, #0
 800c94e:	d1a5      	bne.n	800c89c <__sfvwrite_r+0x134>
 800c950:	f8cd 8008 	str.w	r8, [sp, #8]
 800c954:	e7d2      	b.n	800c8fc <__sfvwrite_r+0x194>
 800c956:	6820      	ldr	r0, [r4, #0]
 800c958:	46b8      	mov	r8, r7
 800c95a:	46ba      	mov	sl, r7
 800c95c:	e75c      	b.n	800c818 <__sfvwrite_r+0xb0>
 800c95e:	464a      	mov	r2, r9
 800c960:	210a      	movs	r1, #10
 800c962:	4650      	mov	r0, sl
 800c964:	f7f3 ff7c 	bl	8000860 <memchr>
 800c968:	2800      	cmp	r0, #0
 800c96a:	d06f      	beq.n	800ca4c <__sfvwrite_r+0x2e4>
 800c96c:	3001      	adds	r0, #1
 800c96e:	2301      	movs	r3, #1
 800c970:	ebca 0800 	rsb	r8, sl, r0
 800c974:	9302      	str	r3, [sp, #8]
 800c976:	e7a5      	b.n	800c8c4 <__sfvwrite_r+0x15c>
 800c978:	6962      	ldr	r2, [r4, #20]
 800c97a:	6820      	ldr	r0, [r4, #0]
 800c97c:	6921      	ldr	r1, [r4, #16]
 800c97e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
 800c982:	ebc1 0a00 	rsb	sl, r1, r0
 800c986:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
 800c98a:	f10a 0001 	add.w	r0, sl, #1
 800c98e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c992:	4438      	add	r0, r7
 800c994:	4540      	cmp	r0, r8
 800c996:	4642      	mov	r2, r8
 800c998:	bf84      	itt	hi
 800c99a:	4680      	movhi	r8, r0
 800c99c:	4642      	movhi	r2, r8
 800c99e:	055b      	lsls	r3, r3, #21
 800c9a0:	d542      	bpl.n	800ca28 <__sfvwrite_r+0x2c0>
 800c9a2:	4611      	mov	r1, r2
 800c9a4:	9801      	ldr	r0, [sp, #4]
 800c9a6:	f000 f90d 	bl	800cbc4 <_malloc_r>
 800c9aa:	4683      	mov	fp, r0
 800c9ac:	2800      	cmp	r0, #0
 800c9ae:	d055      	beq.n	800ca5c <__sfvwrite_r+0x2f4>
 800c9b0:	4652      	mov	r2, sl
 800c9b2:	6921      	ldr	r1, [r4, #16]
 800c9b4:	f7f3 fe36 	bl	8000624 <memcpy>
 800c9b8:	89a3      	ldrh	r3, [r4, #12]
 800c9ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c9be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9c2:	81a3      	strh	r3, [r4, #12]
 800c9c4:	ebca 0308 	rsb	r3, sl, r8
 800c9c8:	eb0b 000a 	add.w	r0, fp, sl
 800c9cc:	f8c4 8014 	str.w	r8, [r4, #20]
 800c9d0:	f8c4 b010 	str.w	fp, [r4, #16]
 800c9d4:	6020      	str	r0, [r4, #0]
 800c9d6:	60a3      	str	r3, [r4, #8]
 800c9d8:	46b8      	mov	r8, r7
 800c9da:	46ba      	mov	sl, r7
 800c9dc:	e71c      	b.n	800c818 <__sfvwrite_r+0xb0>
 800c9de:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c9e2:	42bb      	cmp	r3, r7
 800c9e4:	bf28      	it	cs
 800c9e6:	463b      	movcs	r3, r7
 800c9e8:	464a      	mov	r2, r9
 800c9ea:	fb93 f3f1 	sdiv	r3, r3, r1
 800c9ee:	9801      	ldr	r0, [sp, #4]
 800c9f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c9f2:	fb01 f303 	mul.w	r3, r1, r3
 800c9f6:	69e1      	ldr	r1, [r4, #28]
 800c9f8:	47b0      	blx	r6
 800c9fa:	2800      	cmp	r0, #0
 800c9fc:	f73f af18 	bgt.w	800c830 <__sfvwrite_r+0xc8>
 800ca00:	e74c      	b.n	800c89c <__sfvwrite_r+0x134>
 800ca02:	461a      	mov	r2, r3
 800ca04:	4651      	mov	r1, sl
 800ca06:	9303      	str	r3, [sp, #12]
 800ca08:	f000 fb94 	bl	800d134 <memmove>
 800ca0c:	6822      	ldr	r2, [r4, #0]
 800ca0e:	9b03      	ldr	r3, [sp, #12]
 800ca10:	9801      	ldr	r0, [sp, #4]
 800ca12:	441a      	add	r2, r3
 800ca14:	6022      	str	r2, [r4, #0]
 800ca16:	4621      	mov	r1, r4
 800ca18:	f7ff fcd2 	bl	800c3c0 <_fflush_r>
 800ca1c:	9b03      	ldr	r3, [sp, #12]
 800ca1e:	2800      	cmp	r0, #0
 800ca20:	f47f af3c 	bne.w	800c89c <__sfvwrite_r+0x134>
 800ca24:	461f      	mov	r7, r3
 800ca26:	e766      	b.n	800c8f6 <__sfvwrite_r+0x18e>
 800ca28:	9801      	ldr	r0, [sp, #4]
 800ca2a:	f000 fef9 	bl	800d820 <_realloc_r>
 800ca2e:	4683      	mov	fp, r0
 800ca30:	2800      	cmp	r0, #0
 800ca32:	d1c7      	bne.n	800c9c4 <__sfvwrite_r+0x25c>
 800ca34:	9d01      	ldr	r5, [sp, #4]
 800ca36:	6921      	ldr	r1, [r4, #16]
 800ca38:	4628      	mov	r0, r5
 800ca3a:	f7ff fdad 	bl	800c598 <_free_r>
 800ca3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca42:	220c      	movs	r2, #12
 800ca44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ca48:	602a      	str	r2, [r5, #0]
 800ca4a:	e729      	b.n	800c8a0 <__sfvwrite_r+0x138>
 800ca4c:	2301      	movs	r3, #1
 800ca4e:	f109 0801 	add.w	r8, r9, #1
 800ca52:	9302      	str	r3, [sp, #8]
 800ca54:	e736      	b.n	800c8c4 <__sfvwrite_r+0x15c>
 800ca56:	f04f 30ff 	mov.w	r0, #4294967295
 800ca5a:	e6b8      	b.n	800c7ce <__sfvwrite_r+0x66>
 800ca5c:	9a01      	ldr	r2, [sp, #4]
 800ca5e:	230c      	movs	r3, #12
 800ca60:	6013      	str	r3, [r2, #0]
 800ca62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca66:	e71b      	b.n	800c8a0 <__sfvwrite_r+0x138>
 800ca68:	7ffffc00 	.word	0x7ffffc00

0800ca6c <_fwalk_reent>:
 800ca6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca70:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 800ca74:	d01f      	beq.n	800cab6 <_fwalk_reent+0x4a>
 800ca76:	4688      	mov	r8, r1
 800ca78:	4606      	mov	r6, r0
 800ca7a:	f04f 0900 	mov.w	r9, #0
 800ca7e:	687d      	ldr	r5, [r7, #4]
 800ca80:	68bc      	ldr	r4, [r7, #8]
 800ca82:	3d01      	subs	r5, #1
 800ca84:	d411      	bmi.n	800caaa <_fwalk_reent+0x3e>
 800ca86:	89a3      	ldrh	r3, [r4, #12]
 800ca88:	2b01      	cmp	r3, #1
 800ca8a:	f105 35ff 	add.w	r5, r5, #4294967295
 800ca8e:	d908      	bls.n	800caa2 <_fwalk_reent+0x36>
 800ca90:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800ca94:	3301      	adds	r3, #1
 800ca96:	4621      	mov	r1, r4
 800ca98:	4630      	mov	r0, r6
 800ca9a:	d002      	beq.n	800caa2 <_fwalk_reent+0x36>
 800ca9c:	47c0      	blx	r8
 800ca9e:	ea49 0900 	orr.w	r9, r9, r0
 800caa2:	1c6b      	adds	r3, r5, #1
 800caa4:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800caa8:	d1ed      	bne.n	800ca86 <_fwalk_reent+0x1a>
 800caaa:	683f      	ldr	r7, [r7, #0]
 800caac:	2f00      	cmp	r7, #0
 800caae:	d1e6      	bne.n	800ca7e <_fwalk_reent+0x12>
 800cab0:	4648      	mov	r0, r9
 800cab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cab6:	46b9      	mov	r9, r7
 800cab8:	4648      	mov	r0, r9
 800caba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cabe:	bf00      	nop

0800cac0 <_localeconv_r>:
 800cac0:	4a04      	ldr	r2, [pc, #16]	; (800cad4 <_localeconv_r+0x14>)
 800cac2:	4b05      	ldr	r3, [pc, #20]	; (800cad8 <_localeconv_r+0x18>)
 800cac4:	6812      	ldr	r2, [r2, #0]
 800cac6:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800cac8:	2800      	cmp	r0, #0
 800caca:	bf08      	it	eq
 800cacc:	4618      	moveq	r0, r3
 800cace:	30f0      	adds	r0, #240	; 0xf0
 800cad0:	4770      	bx	lr
 800cad2:	bf00      	nop
 800cad4:	20000460 	.word	0x20000460
 800cad8:	20000874 	.word	0x20000874

0800cadc <__swhatbuf_r>:
 800cadc:	b570      	push	{r4, r5, r6, lr}
 800cade:	460d      	mov	r5, r1
 800cae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cae4:	2900      	cmp	r1, #0
 800cae6:	b090      	sub	sp, #64	; 0x40
 800cae8:	4614      	mov	r4, r2
 800caea:	461e      	mov	r6, r3
 800caec:	db14      	blt.n	800cb18 <__swhatbuf_r+0x3c>
 800caee:	aa01      	add	r2, sp, #4
 800caf0:	f001 fa9a 	bl	800e028 <_fstat_r>
 800caf4:	2800      	cmp	r0, #0
 800caf6:	db0f      	blt.n	800cb18 <__swhatbuf_r+0x3c>
 800caf8:	9a02      	ldr	r2, [sp, #8]
 800cafa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cafe:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
 800cb02:	fab2 f282 	clz	r2, r2
 800cb06:	0952      	lsrs	r2, r2, #5
 800cb08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb0c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800cb10:	6032      	str	r2, [r6, #0]
 800cb12:	6023      	str	r3, [r4, #0]
 800cb14:	b010      	add	sp, #64	; 0x40
 800cb16:	bd70      	pop	{r4, r5, r6, pc}
 800cb18:	89a8      	ldrh	r0, [r5, #12]
 800cb1a:	f000 0080 	and.w	r0, r0, #128	; 0x80
 800cb1e:	b282      	uxth	r2, r0
 800cb20:	2000      	movs	r0, #0
 800cb22:	6030      	str	r0, [r6, #0]
 800cb24:	b11a      	cbz	r2, 800cb2e <__swhatbuf_r+0x52>
 800cb26:	2340      	movs	r3, #64	; 0x40
 800cb28:	6023      	str	r3, [r4, #0]
 800cb2a:	b010      	add	sp, #64	; 0x40
 800cb2c:	bd70      	pop	{r4, r5, r6, pc}
 800cb2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb32:	4610      	mov	r0, r2
 800cb34:	6023      	str	r3, [r4, #0]
 800cb36:	b010      	add	sp, #64	; 0x40
 800cb38:	bd70      	pop	{r4, r5, r6, pc}
 800cb3a:	bf00      	nop

0800cb3c <__smakebuf_r>:
 800cb3c:	898a      	ldrh	r2, [r1, #12]
 800cb3e:	0792      	lsls	r2, r2, #30
 800cb40:	460b      	mov	r3, r1
 800cb42:	d506      	bpl.n	800cb52 <__smakebuf_r+0x16>
 800cb44:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cb48:	2101      	movs	r1, #1
 800cb4a:	601a      	str	r2, [r3, #0]
 800cb4c:	611a      	str	r2, [r3, #16]
 800cb4e:	6159      	str	r1, [r3, #20]
 800cb50:	4770      	bx	lr
 800cb52:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb54:	b083      	sub	sp, #12
 800cb56:	ab01      	add	r3, sp, #4
 800cb58:	466a      	mov	r2, sp
 800cb5a:	460c      	mov	r4, r1
 800cb5c:	4605      	mov	r5, r0
 800cb5e:	f7ff ffbd 	bl	800cadc <__swhatbuf_r>
 800cb62:	9900      	ldr	r1, [sp, #0]
 800cb64:	4606      	mov	r6, r0
 800cb66:	4628      	mov	r0, r5
 800cb68:	f000 f82c 	bl	800cbc4 <_malloc_r>
 800cb6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb70:	b1d0      	cbz	r0, 800cba8 <__smakebuf_r+0x6c>
 800cb72:	9a01      	ldr	r2, [sp, #4]
 800cb74:	4f12      	ldr	r7, [pc, #72]	; (800cbc0 <__smakebuf_r+0x84>)
 800cb76:	9900      	ldr	r1, [sp, #0]
 800cb78:	63ef      	str	r7, [r5, #60]	; 0x3c
 800cb7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb7e:	81a3      	strh	r3, [r4, #12]
 800cb80:	6020      	str	r0, [r4, #0]
 800cb82:	6120      	str	r0, [r4, #16]
 800cb84:	6161      	str	r1, [r4, #20]
 800cb86:	b91a      	cbnz	r2, 800cb90 <__smakebuf_r+0x54>
 800cb88:	4333      	orrs	r3, r6
 800cb8a:	81a3      	strh	r3, [r4, #12]
 800cb8c:	b003      	add	sp, #12
 800cb8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb90:	4628      	mov	r0, r5
 800cb92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb96:	f001 fa5b 	bl	800e050 <_isatty_r>
 800cb9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb9e:	2800      	cmp	r0, #0
 800cba0:	d0f2      	beq.n	800cb88 <__smakebuf_r+0x4c>
 800cba2:	f043 0301 	orr.w	r3, r3, #1
 800cba6:	e7ef      	b.n	800cb88 <__smakebuf_r+0x4c>
 800cba8:	059a      	lsls	r2, r3, #22
 800cbaa:	d4ef      	bmi.n	800cb8c <__smakebuf_r+0x50>
 800cbac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cbb0:	f043 0302 	orr.w	r3, r3, #2
 800cbb4:	2101      	movs	r1, #1
 800cbb6:	81a3      	strh	r3, [r4, #12]
 800cbb8:	6022      	str	r2, [r4, #0]
 800cbba:	6122      	str	r2, [r4, #16]
 800cbbc:	6161      	str	r1, [r4, #20]
 800cbbe:	e7e5      	b.n	800cb8c <__smakebuf_r+0x50>
 800cbc0:	0800c3ed 	.word	0x0800c3ed

0800cbc4 <_malloc_r>:
 800cbc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbc8:	f101 050b 	add.w	r5, r1, #11
 800cbcc:	2d16      	cmp	r5, #22
 800cbce:	b083      	sub	sp, #12
 800cbd0:	4606      	mov	r6, r0
 800cbd2:	f240 809f 	bls.w	800cd14 <_malloc_r+0x150>
 800cbd6:	f035 0507 	bics.w	r5, r5, #7
 800cbda:	f100 80bf 	bmi.w	800cd5c <_malloc_r+0x198>
 800cbde:	42a9      	cmp	r1, r5
 800cbe0:	f200 80bc 	bhi.w	800cd5c <_malloc_r+0x198>
 800cbe4:	f000 fb0a 	bl	800d1fc <__malloc_lock>
 800cbe8:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 800cbec:	f0c0 829c 	bcc.w	800d128 <_malloc_r+0x564>
 800cbf0:	0a6b      	lsrs	r3, r5, #9
 800cbf2:	f000 80ba 	beq.w	800cd6a <_malloc_r+0x1a6>
 800cbf6:	2b04      	cmp	r3, #4
 800cbf8:	f200 8183 	bhi.w	800cf02 <_malloc_r+0x33e>
 800cbfc:	09a8      	lsrs	r0, r5, #6
 800cbfe:	f100 0e39 	add.w	lr, r0, #57	; 0x39
 800cc02:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800cc06:	3038      	adds	r0, #56	; 0x38
 800cc08:	4fc4      	ldr	r7, [pc, #784]	; (800cf1c <_malloc_r+0x358>)
 800cc0a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800cc0e:	f1a3 0108 	sub.w	r1, r3, #8
 800cc12:	685c      	ldr	r4, [r3, #4]
 800cc14:	42a1      	cmp	r1, r4
 800cc16:	d107      	bne.n	800cc28 <_malloc_r+0x64>
 800cc18:	e0ac      	b.n	800cd74 <_malloc_r+0x1b0>
 800cc1a:	2a00      	cmp	r2, #0
 800cc1c:	f280 80ac 	bge.w	800cd78 <_malloc_r+0x1b4>
 800cc20:	68e4      	ldr	r4, [r4, #12]
 800cc22:	42a1      	cmp	r1, r4
 800cc24:	f000 80a6 	beq.w	800cd74 <_malloc_r+0x1b0>
 800cc28:	6863      	ldr	r3, [r4, #4]
 800cc2a:	f023 0303 	bic.w	r3, r3, #3
 800cc2e:	1b5a      	subs	r2, r3, r5
 800cc30:	2a0f      	cmp	r2, #15
 800cc32:	ddf2      	ble.n	800cc1a <_malloc_r+0x56>
 800cc34:	49b9      	ldr	r1, [pc, #740]	; (800cf1c <_malloc_r+0x358>)
 800cc36:	693c      	ldr	r4, [r7, #16]
 800cc38:	f101 0e08 	add.w	lr, r1, #8
 800cc3c:	4574      	cmp	r4, lr
 800cc3e:	f000 81b3 	beq.w	800cfa8 <_malloc_r+0x3e4>
 800cc42:	6863      	ldr	r3, [r4, #4]
 800cc44:	f023 0303 	bic.w	r3, r3, #3
 800cc48:	1b5a      	subs	r2, r3, r5
 800cc4a:	2a0f      	cmp	r2, #15
 800cc4c:	f300 8199 	bgt.w	800cf82 <_malloc_r+0x3be>
 800cc50:	2a00      	cmp	r2, #0
 800cc52:	f8c1 e014 	str.w	lr, [r1, #20]
 800cc56:	f8c1 e010 	str.w	lr, [r1, #16]
 800cc5a:	f280 809e 	bge.w	800cd9a <_malloc_r+0x1d6>
 800cc5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc62:	f080 8167 	bcs.w	800cf34 <_malloc_r+0x370>
 800cc66:	08db      	lsrs	r3, r3, #3
 800cc68:	f103 0c01 	add.w	ip, r3, #1
 800cc6c:	2201      	movs	r2, #1
 800cc6e:	109b      	asrs	r3, r3, #2
 800cc70:	fa02 f303 	lsl.w	r3, r2, r3
 800cc74:	684a      	ldr	r2, [r1, #4]
 800cc76:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
 800cc7a:	f8c4 8008 	str.w	r8, [r4, #8]
 800cc7e:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
 800cc82:	431a      	orrs	r2, r3
 800cc84:	f1a9 0308 	sub.w	r3, r9, #8
 800cc88:	60e3      	str	r3, [r4, #12]
 800cc8a:	604a      	str	r2, [r1, #4]
 800cc8c:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
 800cc90:	f8c8 400c 	str.w	r4, [r8, #12]
 800cc94:	1083      	asrs	r3, r0, #2
 800cc96:	2401      	movs	r4, #1
 800cc98:	409c      	lsls	r4, r3
 800cc9a:	4294      	cmp	r4, r2
 800cc9c:	f200 808a 	bhi.w	800cdb4 <_malloc_r+0x1f0>
 800cca0:	4214      	tst	r4, r2
 800cca2:	d106      	bne.n	800ccb2 <_malloc_r+0xee>
 800cca4:	f020 0003 	bic.w	r0, r0, #3
 800cca8:	0064      	lsls	r4, r4, #1
 800ccaa:	4214      	tst	r4, r2
 800ccac:	f100 0004 	add.w	r0, r0, #4
 800ccb0:	d0fa      	beq.n	800cca8 <_malloc_r+0xe4>
 800ccb2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 800ccb6:	46cc      	mov	ip, r9
 800ccb8:	4680      	mov	r8, r0
 800ccba:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800ccbe:	458c      	cmp	ip, r1
 800ccc0:	d107      	bne.n	800ccd2 <_malloc_r+0x10e>
 800ccc2:	e173      	b.n	800cfac <_malloc_r+0x3e8>
 800ccc4:	2a00      	cmp	r2, #0
 800ccc6:	f280 8181 	bge.w	800cfcc <_malloc_r+0x408>
 800ccca:	68c9      	ldr	r1, [r1, #12]
 800cccc:	458c      	cmp	ip, r1
 800ccce:	f000 816d 	beq.w	800cfac <_malloc_r+0x3e8>
 800ccd2:	684b      	ldr	r3, [r1, #4]
 800ccd4:	f023 0303 	bic.w	r3, r3, #3
 800ccd8:	1b5a      	subs	r2, r3, r5
 800ccda:	2a0f      	cmp	r2, #15
 800ccdc:	ddf2      	ble.n	800ccc4 <_malloc_r+0x100>
 800ccde:	460c      	mov	r4, r1
 800cce0:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800cce4:	f854 8f08 	ldr.w	r8, [r4, #8]!
 800cce8:	194b      	adds	r3, r1, r5
 800ccea:	f045 0501 	orr.w	r5, r5, #1
 800ccee:	604d      	str	r5, [r1, #4]
 800ccf0:	f042 0101 	orr.w	r1, r2, #1
 800ccf4:	f8c8 c00c 	str.w	ip, [r8, #12]
 800ccf8:	4630      	mov	r0, r6
 800ccfa:	f8cc 8008 	str.w	r8, [ip, #8]
 800ccfe:	617b      	str	r3, [r7, #20]
 800cd00:	613b      	str	r3, [r7, #16]
 800cd02:	f8c3 e00c 	str.w	lr, [r3, #12]
 800cd06:	f8c3 e008 	str.w	lr, [r3, #8]
 800cd0a:	6059      	str	r1, [r3, #4]
 800cd0c:	509a      	str	r2, [r3, r2]
 800cd0e:	f000 fa77 	bl	800d200 <__malloc_unlock>
 800cd12:	e01f      	b.n	800cd54 <_malloc_r+0x190>
 800cd14:	2910      	cmp	r1, #16
 800cd16:	d821      	bhi.n	800cd5c <_malloc_r+0x198>
 800cd18:	f000 fa70 	bl	800d1fc <__malloc_lock>
 800cd1c:	2510      	movs	r5, #16
 800cd1e:	2306      	movs	r3, #6
 800cd20:	2002      	movs	r0, #2
 800cd22:	4f7e      	ldr	r7, [pc, #504]	; (800cf1c <_malloc_r+0x358>)
 800cd24:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800cd28:	f1a3 0208 	sub.w	r2, r3, #8
 800cd2c:	685c      	ldr	r4, [r3, #4]
 800cd2e:	4294      	cmp	r4, r2
 800cd30:	f000 8145 	beq.w	800cfbe <_malloc_r+0x3fa>
 800cd34:	6863      	ldr	r3, [r4, #4]
 800cd36:	68e1      	ldr	r1, [r4, #12]
 800cd38:	68a5      	ldr	r5, [r4, #8]
 800cd3a:	f023 0303 	bic.w	r3, r3, #3
 800cd3e:	4423      	add	r3, r4
 800cd40:	4630      	mov	r0, r6
 800cd42:	685a      	ldr	r2, [r3, #4]
 800cd44:	60e9      	str	r1, [r5, #12]
 800cd46:	f042 0201 	orr.w	r2, r2, #1
 800cd4a:	608d      	str	r5, [r1, #8]
 800cd4c:	605a      	str	r2, [r3, #4]
 800cd4e:	f000 fa57 	bl	800d200 <__malloc_unlock>
 800cd52:	3408      	adds	r4, #8
 800cd54:	4620      	mov	r0, r4
 800cd56:	b003      	add	sp, #12
 800cd58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd5c:	2400      	movs	r4, #0
 800cd5e:	230c      	movs	r3, #12
 800cd60:	4620      	mov	r0, r4
 800cd62:	6033      	str	r3, [r6, #0]
 800cd64:	b003      	add	sp, #12
 800cd66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd6a:	2380      	movs	r3, #128	; 0x80
 800cd6c:	f04f 0e40 	mov.w	lr, #64	; 0x40
 800cd70:	203f      	movs	r0, #63	; 0x3f
 800cd72:	e749      	b.n	800cc08 <_malloc_r+0x44>
 800cd74:	4670      	mov	r0, lr
 800cd76:	e75d      	b.n	800cc34 <_malloc_r+0x70>
 800cd78:	4423      	add	r3, r4
 800cd7a:	68e1      	ldr	r1, [r4, #12]
 800cd7c:	685a      	ldr	r2, [r3, #4]
 800cd7e:	68a5      	ldr	r5, [r4, #8]
 800cd80:	f042 0201 	orr.w	r2, r2, #1
 800cd84:	60e9      	str	r1, [r5, #12]
 800cd86:	4630      	mov	r0, r6
 800cd88:	608d      	str	r5, [r1, #8]
 800cd8a:	605a      	str	r2, [r3, #4]
 800cd8c:	f000 fa38 	bl	800d200 <__malloc_unlock>
 800cd90:	3408      	adds	r4, #8
 800cd92:	4620      	mov	r0, r4
 800cd94:	b003      	add	sp, #12
 800cd96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd9a:	4423      	add	r3, r4
 800cd9c:	4630      	mov	r0, r6
 800cd9e:	685a      	ldr	r2, [r3, #4]
 800cda0:	f042 0201 	orr.w	r2, r2, #1
 800cda4:	605a      	str	r2, [r3, #4]
 800cda6:	f000 fa2b 	bl	800d200 <__malloc_unlock>
 800cdaa:	3408      	adds	r4, #8
 800cdac:	4620      	mov	r0, r4
 800cdae:	b003      	add	sp, #12
 800cdb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdb4:	68bc      	ldr	r4, [r7, #8]
 800cdb6:	6863      	ldr	r3, [r4, #4]
 800cdb8:	f023 0803 	bic.w	r8, r3, #3
 800cdbc:	45a8      	cmp	r8, r5
 800cdbe:	d304      	bcc.n	800cdca <_malloc_r+0x206>
 800cdc0:	ebc5 0308 	rsb	r3, r5, r8
 800cdc4:	2b0f      	cmp	r3, #15
 800cdc6:	f300 808c 	bgt.w	800cee2 <_malloc_r+0x31e>
 800cdca:	4b55      	ldr	r3, [pc, #340]	; (800cf20 <_malloc_r+0x35c>)
 800cdcc:	f8df 9160 	ldr.w	r9, [pc, #352]	; 800cf30 <_malloc_r+0x36c>
 800cdd0:	681a      	ldr	r2, [r3, #0]
 800cdd2:	f8d9 3000 	ldr.w	r3, [r9]
 800cdd6:	3301      	adds	r3, #1
 800cdd8:	442a      	add	r2, r5
 800cdda:	eb04 0a08 	add.w	sl, r4, r8
 800cdde:	f000 8160 	beq.w	800d0a2 <_malloc_r+0x4de>
 800cde2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cde6:	320f      	adds	r2, #15
 800cde8:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800cdec:	f022 020f 	bic.w	r2, r2, #15
 800cdf0:	4611      	mov	r1, r2
 800cdf2:	4630      	mov	r0, r6
 800cdf4:	9201      	str	r2, [sp, #4]
 800cdf6:	f000 ff03 	bl	800dc00 <_sbrk_r>
 800cdfa:	f1b0 3fff 	cmp.w	r0, #4294967295
 800cdfe:	4683      	mov	fp, r0
 800ce00:	9a01      	ldr	r2, [sp, #4]
 800ce02:	f000 8158 	beq.w	800d0b6 <_malloc_r+0x4f2>
 800ce06:	4582      	cmp	sl, r0
 800ce08:	f200 80fc 	bhi.w	800d004 <_malloc_r+0x440>
 800ce0c:	4b45      	ldr	r3, [pc, #276]	; (800cf24 <_malloc_r+0x360>)
 800ce0e:	6819      	ldr	r1, [r3, #0]
 800ce10:	45da      	cmp	sl, fp
 800ce12:	4411      	add	r1, r2
 800ce14:	6019      	str	r1, [r3, #0]
 800ce16:	f000 8153 	beq.w	800d0c0 <_malloc_r+0x4fc>
 800ce1a:	f8d9 0000 	ldr.w	r0, [r9]
 800ce1e:	f8df e110 	ldr.w	lr, [pc, #272]	; 800cf30 <_malloc_r+0x36c>
 800ce22:	3001      	adds	r0, #1
 800ce24:	bf1b      	ittet	ne
 800ce26:	ebca 0a0b 	rsbne	sl, sl, fp
 800ce2a:	4451      	addne	r1, sl
 800ce2c:	f8ce b000 	streq.w	fp, [lr]
 800ce30:	6019      	strne	r1, [r3, #0]
 800ce32:	f01b 0107 	ands.w	r1, fp, #7
 800ce36:	f000 8117 	beq.w	800d068 <_malloc_r+0x4a4>
 800ce3a:	f1c1 0008 	rsb	r0, r1, #8
 800ce3e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 800ce42:	4483      	add	fp, r0
 800ce44:	3108      	adds	r1, #8
 800ce46:	445a      	add	r2, fp
 800ce48:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800ce4c:	ebc2 0901 	rsb	r9, r2, r1
 800ce50:	4649      	mov	r1, r9
 800ce52:	4630      	mov	r0, r6
 800ce54:	9301      	str	r3, [sp, #4]
 800ce56:	f000 fed3 	bl	800dc00 <_sbrk_r>
 800ce5a:	1c43      	adds	r3, r0, #1
 800ce5c:	9b01      	ldr	r3, [sp, #4]
 800ce5e:	f000 813f 	beq.w	800d0e0 <_malloc_r+0x51c>
 800ce62:	ebcb 0200 	rsb	r2, fp, r0
 800ce66:	444a      	add	r2, r9
 800ce68:	f042 0201 	orr.w	r2, r2, #1
 800ce6c:	6819      	ldr	r1, [r3, #0]
 800ce6e:	f8c7 b008 	str.w	fp, [r7, #8]
 800ce72:	4449      	add	r1, r9
 800ce74:	42bc      	cmp	r4, r7
 800ce76:	f8cb 2004 	str.w	r2, [fp, #4]
 800ce7a:	6019      	str	r1, [r3, #0]
 800ce7c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 800cf24 <_malloc_r+0x360>
 800ce80:	d016      	beq.n	800ceb0 <_malloc_r+0x2ec>
 800ce82:	f1b8 0f0f 	cmp.w	r8, #15
 800ce86:	f240 80fd 	bls.w	800d084 <_malloc_r+0x4c0>
 800ce8a:	6862      	ldr	r2, [r4, #4]
 800ce8c:	f1a8 030c 	sub.w	r3, r8, #12
 800ce90:	f023 0307 	bic.w	r3, r3, #7
 800ce94:	18e0      	adds	r0, r4, r3
 800ce96:	f002 0201 	and.w	r2, r2, #1
 800ce9a:	f04f 0e05 	mov.w	lr, #5
 800ce9e:	431a      	orrs	r2, r3
 800cea0:	2b0f      	cmp	r3, #15
 800cea2:	6062      	str	r2, [r4, #4]
 800cea4:	f8c0 e004 	str.w	lr, [r0, #4]
 800cea8:	f8c0 e008 	str.w	lr, [r0, #8]
 800ceac:	f200 811c 	bhi.w	800d0e8 <_malloc_r+0x524>
 800ceb0:	4b1d      	ldr	r3, [pc, #116]	; (800cf28 <_malloc_r+0x364>)
 800ceb2:	68bc      	ldr	r4, [r7, #8]
 800ceb4:	681a      	ldr	r2, [r3, #0]
 800ceb6:	4291      	cmp	r1, r2
 800ceb8:	bf88      	it	hi
 800ceba:	6019      	strhi	r1, [r3, #0]
 800cebc:	4b1b      	ldr	r3, [pc, #108]	; (800cf2c <_malloc_r+0x368>)
 800cebe:	681a      	ldr	r2, [r3, #0]
 800cec0:	4291      	cmp	r1, r2
 800cec2:	6862      	ldr	r2, [r4, #4]
 800cec4:	bf88      	it	hi
 800cec6:	6019      	strhi	r1, [r3, #0]
 800cec8:	f022 0203 	bic.w	r2, r2, #3
 800cecc:	4295      	cmp	r5, r2
 800cece:	eba2 0305 	sub.w	r3, r2, r5
 800ced2:	d801      	bhi.n	800ced8 <_malloc_r+0x314>
 800ced4:	2b0f      	cmp	r3, #15
 800ced6:	dc04      	bgt.n	800cee2 <_malloc_r+0x31e>
 800ced8:	4630      	mov	r0, r6
 800ceda:	f000 f991 	bl	800d200 <__malloc_unlock>
 800cede:	2400      	movs	r4, #0
 800cee0:	e738      	b.n	800cd54 <_malloc_r+0x190>
 800cee2:	1962      	adds	r2, r4, r5
 800cee4:	f043 0301 	orr.w	r3, r3, #1
 800cee8:	f045 0501 	orr.w	r5, r5, #1
 800ceec:	6065      	str	r5, [r4, #4]
 800ceee:	4630      	mov	r0, r6
 800cef0:	60ba      	str	r2, [r7, #8]
 800cef2:	6053      	str	r3, [r2, #4]
 800cef4:	f000 f984 	bl	800d200 <__malloc_unlock>
 800cef8:	3408      	adds	r4, #8
 800cefa:	4620      	mov	r0, r4
 800cefc:	b003      	add	sp, #12
 800cefe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf02:	2b14      	cmp	r3, #20
 800cf04:	d971      	bls.n	800cfea <_malloc_r+0x426>
 800cf06:	2b54      	cmp	r3, #84	; 0x54
 800cf08:	f200 80a4 	bhi.w	800d054 <_malloc_r+0x490>
 800cf0c:	0b28      	lsrs	r0, r5, #12
 800cf0e:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
 800cf12:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800cf16:	306e      	adds	r0, #110	; 0x6e
 800cf18:	e676      	b.n	800cc08 <_malloc_r+0x44>
 800cf1a:	bf00      	nop
 800cf1c:	20000464 	.word	0x20000464
 800cf20:	20001ed4 	.word	0x20001ed4
 800cf24:	20001ed8 	.word	0x20001ed8
 800cf28:	20001ed0 	.word	0x20001ed0
 800cf2c:	20001ecc 	.word	0x20001ecc
 800cf30:	20000870 	.word	0x20000870
 800cf34:	0a5a      	lsrs	r2, r3, #9
 800cf36:	2a04      	cmp	r2, #4
 800cf38:	d95e      	bls.n	800cff8 <_malloc_r+0x434>
 800cf3a:	2a14      	cmp	r2, #20
 800cf3c:	f200 80b3 	bhi.w	800d0a6 <_malloc_r+0x4e2>
 800cf40:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 800cf44:	0049      	lsls	r1, r1, #1
 800cf46:	325b      	adds	r2, #91	; 0x5b
 800cf48:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
 800cf4c:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800cf50:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 800d130 <_malloc_r+0x56c>
 800cf54:	f1ac 0c08 	sub.w	ip, ip, #8
 800cf58:	458c      	cmp	ip, r1
 800cf5a:	f000 8088 	beq.w	800d06e <_malloc_r+0x4aa>
 800cf5e:	684a      	ldr	r2, [r1, #4]
 800cf60:	f022 0203 	bic.w	r2, r2, #3
 800cf64:	4293      	cmp	r3, r2
 800cf66:	d202      	bcs.n	800cf6e <_malloc_r+0x3aa>
 800cf68:	6889      	ldr	r1, [r1, #8]
 800cf6a:	458c      	cmp	ip, r1
 800cf6c:	d1f7      	bne.n	800cf5e <_malloc_r+0x39a>
 800cf6e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800cf72:	687a      	ldr	r2, [r7, #4]
 800cf74:	f8c4 c00c 	str.w	ip, [r4, #12]
 800cf78:	60a1      	str	r1, [r4, #8]
 800cf7a:	f8cc 4008 	str.w	r4, [ip, #8]
 800cf7e:	60cc      	str	r4, [r1, #12]
 800cf80:	e688      	b.n	800cc94 <_malloc_r+0xd0>
 800cf82:	1963      	adds	r3, r4, r5
 800cf84:	f042 0701 	orr.w	r7, r2, #1
 800cf88:	f045 0501 	orr.w	r5, r5, #1
 800cf8c:	6065      	str	r5, [r4, #4]
 800cf8e:	4630      	mov	r0, r6
 800cf90:	614b      	str	r3, [r1, #20]
 800cf92:	610b      	str	r3, [r1, #16]
 800cf94:	f8c3 e00c 	str.w	lr, [r3, #12]
 800cf98:	f8c3 e008 	str.w	lr, [r3, #8]
 800cf9c:	605f      	str	r7, [r3, #4]
 800cf9e:	509a      	str	r2, [r3, r2]
 800cfa0:	3408      	adds	r4, #8
 800cfa2:	f000 f92d 	bl	800d200 <__malloc_unlock>
 800cfa6:	e6d5      	b.n	800cd54 <_malloc_r+0x190>
 800cfa8:	684a      	ldr	r2, [r1, #4]
 800cfaa:	e673      	b.n	800cc94 <_malloc_r+0xd0>
 800cfac:	f108 0801 	add.w	r8, r8, #1
 800cfb0:	f018 0f03 	tst.w	r8, #3
 800cfb4:	f10c 0c08 	add.w	ip, ip, #8
 800cfb8:	f47f ae7f 	bne.w	800ccba <_malloc_r+0xf6>
 800cfbc:	e030      	b.n	800d020 <_malloc_r+0x45c>
 800cfbe:	68dc      	ldr	r4, [r3, #12]
 800cfc0:	42a3      	cmp	r3, r4
 800cfc2:	bf08      	it	eq
 800cfc4:	3002      	addeq	r0, #2
 800cfc6:	f43f ae35 	beq.w	800cc34 <_malloc_r+0x70>
 800cfca:	e6b3      	b.n	800cd34 <_malloc_r+0x170>
 800cfcc:	440b      	add	r3, r1
 800cfce:	460c      	mov	r4, r1
 800cfd0:	685a      	ldr	r2, [r3, #4]
 800cfd2:	68c9      	ldr	r1, [r1, #12]
 800cfd4:	f854 5f08 	ldr.w	r5, [r4, #8]!
 800cfd8:	f042 0201 	orr.w	r2, r2, #1
 800cfdc:	605a      	str	r2, [r3, #4]
 800cfde:	4630      	mov	r0, r6
 800cfe0:	60e9      	str	r1, [r5, #12]
 800cfe2:	608d      	str	r5, [r1, #8]
 800cfe4:	f000 f90c 	bl	800d200 <__malloc_unlock>
 800cfe8:	e6b4      	b.n	800cd54 <_malloc_r+0x190>
 800cfea:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
 800cfee:	f103 005b 	add.w	r0, r3, #91	; 0x5b
 800cff2:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800cff6:	e607      	b.n	800cc08 <_malloc_r+0x44>
 800cff8:	099a      	lsrs	r2, r3, #6
 800cffa:	f102 0139 	add.w	r1, r2, #57	; 0x39
 800cffe:	0049      	lsls	r1, r1, #1
 800d000:	3238      	adds	r2, #56	; 0x38
 800d002:	e7a1      	b.n	800cf48 <_malloc_r+0x384>
 800d004:	42bc      	cmp	r4, r7
 800d006:	4b4a      	ldr	r3, [pc, #296]	; (800d130 <_malloc_r+0x56c>)
 800d008:	f43f af00 	beq.w	800ce0c <_malloc_r+0x248>
 800d00c:	689c      	ldr	r4, [r3, #8]
 800d00e:	6862      	ldr	r2, [r4, #4]
 800d010:	f022 0203 	bic.w	r2, r2, #3
 800d014:	e75a      	b.n	800cecc <_malloc_r+0x308>
 800d016:	f859 3908 	ldr.w	r3, [r9], #-8
 800d01a:	4599      	cmp	r9, r3
 800d01c:	f040 8082 	bne.w	800d124 <_malloc_r+0x560>
 800d020:	f010 0f03 	tst.w	r0, #3
 800d024:	f100 30ff 	add.w	r0, r0, #4294967295
 800d028:	d1f5      	bne.n	800d016 <_malloc_r+0x452>
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	ea23 0304 	bic.w	r3, r3, r4
 800d030:	607b      	str	r3, [r7, #4]
 800d032:	0064      	lsls	r4, r4, #1
 800d034:	429c      	cmp	r4, r3
 800d036:	f63f aebd 	bhi.w	800cdb4 <_malloc_r+0x1f0>
 800d03a:	2c00      	cmp	r4, #0
 800d03c:	f43f aeba 	beq.w	800cdb4 <_malloc_r+0x1f0>
 800d040:	421c      	tst	r4, r3
 800d042:	4640      	mov	r0, r8
 800d044:	f47f ae35 	bne.w	800ccb2 <_malloc_r+0xee>
 800d048:	0064      	lsls	r4, r4, #1
 800d04a:	421c      	tst	r4, r3
 800d04c:	f100 0004 	add.w	r0, r0, #4
 800d050:	d0fa      	beq.n	800d048 <_malloc_r+0x484>
 800d052:	e62e      	b.n	800ccb2 <_malloc_r+0xee>
 800d054:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800d058:	d818      	bhi.n	800d08c <_malloc_r+0x4c8>
 800d05a:	0be8      	lsrs	r0, r5, #15
 800d05c:	f100 0e78 	add.w	lr, r0, #120	; 0x78
 800d060:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800d064:	3077      	adds	r0, #119	; 0x77
 800d066:	e5cf      	b.n	800cc08 <_malloc_r+0x44>
 800d068:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d06c:	e6eb      	b.n	800ce46 <_malloc_r+0x282>
 800d06e:	2101      	movs	r1, #1
 800d070:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d074:	1092      	asrs	r2, r2, #2
 800d076:	fa01 f202 	lsl.w	r2, r1, r2
 800d07a:	431a      	orrs	r2, r3
 800d07c:	f8c8 2004 	str.w	r2, [r8, #4]
 800d080:	4661      	mov	r1, ip
 800d082:	e777      	b.n	800cf74 <_malloc_r+0x3b0>
 800d084:	2301      	movs	r3, #1
 800d086:	f8cb 3004 	str.w	r3, [fp, #4]
 800d08a:	e725      	b.n	800ced8 <_malloc_r+0x314>
 800d08c:	f240 5254 	movw	r2, #1364	; 0x554
 800d090:	4293      	cmp	r3, r2
 800d092:	d820      	bhi.n	800d0d6 <_malloc_r+0x512>
 800d094:	0ca8      	lsrs	r0, r5, #18
 800d096:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
 800d09a:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800d09e:	307c      	adds	r0, #124	; 0x7c
 800d0a0:	e5b2      	b.n	800cc08 <_malloc_r+0x44>
 800d0a2:	3210      	adds	r2, #16
 800d0a4:	e6a4      	b.n	800cdf0 <_malloc_r+0x22c>
 800d0a6:	2a54      	cmp	r2, #84	; 0x54
 800d0a8:	d826      	bhi.n	800d0f8 <_malloc_r+0x534>
 800d0aa:	0b1a      	lsrs	r2, r3, #12
 800d0ac:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 800d0b0:	0049      	lsls	r1, r1, #1
 800d0b2:	326e      	adds	r2, #110	; 0x6e
 800d0b4:	e748      	b.n	800cf48 <_malloc_r+0x384>
 800d0b6:	68bc      	ldr	r4, [r7, #8]
 800d0b8:	6862      	ldr	r2, [r4, #4]
 800d0ba:	f022 0203 	bic.w	r2, r2, #3
 800d0be:	e705      	b.n	800cecc <_malloc_r+0x308>
 800d0c0:	f3ca 000b 	ubfx	r0, sl, #0, #12
 800d0c4:	2800      	cmp	r0, #0
 800d0c6:	f47f aea8 	bne.w	800ce1a <_malloc_r+0x256>
 800d0ca:	4442      	add	r2, r8
 800d0cc:	68bb      	ldr	r3, [r7, #8]
 800d0ce:	f042 0201 	orr.w	r2, r2, #1
 800d0d2:	605a      	str	r2, [r3, #4]
 800d0d4:	e6ec      	b.n	800ceb0 <_malloc_r+0x2ec>
 800d0d6:	23fe      	movs	r3, #254	; 0xfe
 800d0d8:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
 800d0dc:	207e      	movs	r0, #126	; 0x7e
 800d0de:	e593      	b.n	800cc08 <_malloc_r+0x44>
 800d0e0:	2201      	movs	r2, #1
 800d0e2:	f04f 0900 	mov.w	r9, #0
 800d0e6:	e6c1      	b.n	800ce6c <_malloc_r+0x2a8>
 800d0e8:	f104 0108 	add.w	r1, r4, #8
 800d0ec:	4630      	mov	r0, r6
 800d0ee:	f7ff fa53 	bl	800c598 <_free_r>
 800d0f2:	f8d9 1000 	ldr.w	r1, [r9]
 800d0f6:	e6db      	b.n	800ceb0 <_malloc_r+0x2ec>
 800d0f8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800d0fc:	d805      	bhi.n	800d10a <_malloc_r+0x546>
 800d0fe:	0bda      	lsrs	r2, r3, #15
 800d100:	f102 0178 	add.w	r1, r2, #120	; 0x78
 800d104:	0049      	lsls	r1, r1, #1
 800d106:	3277      	adds	r2, #119	; 0x77
 800d108:	e71e      	b.n	800cf48 <_malloc_r+0x384>
 800d10a:	f240 5154 	movw	r1, #1364	; 0x554
 800d10e:	428a      	cmp	r2, r1
 800d110:	d805      	bhi.n	800d11e <_malloc_r+0x55a>
 800d112:	0c9a      	lsrs	r2, r3, #18
 800d114:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 800d118:	0049      	lsls	r1, r1, #1
 800d11a:	327c      	adds	r2, #124	; 0x7c
 800d11c:	e714      	b.n	800cf48 <_malloc_r+0x384>
 800d11e:	21fe      	movs	r1, #254	; 0xfe
 800d120:	227e      	movs	r2, #126	; 0x7e
 800d122:	e711      	b.n	800cf48 <_malloc_r+0x384>
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	e784      	b.n	800d032 <_malloc_r+0x46e>
 800d128:	08e8      	lsrs	r0, r5, #3
 800d12a:	1c43      	adds	r3, r0, #1
 800d12c:	005b      	lsls	r3, r3, #1
 800d12e:	e5f8      	b.n	800cd22 <_malloc_r+0x15e>
 800d130:	20000464 	.word	0x20000464

0800d134 <memmove>:
 800d134:	4288      	cmp	r0, r1
 800d136:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d138:	d90d      	bls.n	800d156 <memmove+0x22>
 800d13a:	188b      	adds	r3, r1, r2
 800d13c:	4298      	cmp	r0, r3
 800d13e:	d20a      	bcs.n	800d156 <memmove+0x22>
 800d140:	1881      	adds	r1, r0, r2
 800d142:	2a00      	cmp	r2, #0
 800d144:	d051      	beq.n	800d1ea <memmove+0xb6>
 800d146:	1a9a      	subs	r2, r3, r2
 800d148:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d14c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d150:	4293      	cmp	r3, r2
 800d152:	d1f9      	bne.n	800d148 <memmove+0x14>
 800d154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d156:	2a0f      	cmp	r2, #15
 800d158:	d948      	bls.n	800d1ec <memmove+0xb8>
 800d15a:	ea41 0300 	orr.w	r3, r1, r0
 800d15e:	079b      	lsls	r3, r3, #30
 800d160:	d146      	bne.n	800d1f0 <memmove+0xbc>
 800d162:	f100 0410 	add.w	r4, r0, #16
 800d166:	f101 0310 	add.w	r3, r1, #16
 800d16a:	4615      	mov	r5, r2
 800d16c:	f853 6c10 	ldr.w	r6, [r3, #-16]
 800d170:	f844 6c10 	str.w	r6, [r4, #-16]
 800d174:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 800d178:	f844 6c0c 	str.w	r6, [r4, #-12]
 800d17c:	f853 6c08 	ldr.w	r6, [r3, #-8]
 800d180:	f844 6c08 	str.w	r6, [r4, #-8]
 800d184:	3d10      	subs	r5, #16
 800d186:	f853 6c04 	ldr.w	r6, [r3, #-4]
 800d18a:	f844 6c04 	str.w	r6, [r4, #-4]
 800d18e:	2d0f      	cmp	r5, #15
 800d190:	f103 0310 	add.w	r3, r3, #16
 800d194:	f104 0410 	add.w	r4, r4, #16
 800d198:	d8e8      	bhi.n	800d16c <memmove+0x38>
 800d19a:	f1a2 0310 	sub.w	r3, r2, #16
 800d19e:	f023 030f 	bic.w	r3, r3, #15
 800d1a2:	f002 0e0f 	and.w	lr, r2, #15
 800d1a6:	3310      	adds	r3, #16
 800d1a8:	f1be 0f03 	cmp.w	lr, #3
 800d1ac:	4419      	add	r1, r3
 800d1ae:	4403      	add	r3, r0
 800d1b0:	d921      	bls.n	800d1f6 <memmove+0xc2>
 800d1b2:	1f1e      	subs	r6, r3, #4
 800d1b4:	460d      	mov	r5, r1
 800d1b6:	4674      	mov	r4, lr
 800d1b8:	3c04      	subs	r4, #4
 800d1ba:	f855 7b04 	ldr.w	r7, [r5], #4
 800d1be:	f846 7f04 	str.w	r7, [r6, #4]!
 800d1c2:	2c03      	cmp	r4, #3
 800d1c4:	d8f8      	bhi.n	800d1b8 <memmove+0x84>
 800d1c6:	f1ae 0404 	sub.w	r4, lr, #4
 800d1ca:	f024 0403 	bic.w	r4, r4, #3
 800d1ce:	3404      	adds	r4, #4
 800d1d0:	4423      	add	r3, r4
 800d1d2:	4421      	add	r1, r4
 800d1d4:	f002 0203 	and.w	r2, r2, #3
 800d1d8:	b162      	cbz	r2, 800d1f4 <memmove+0xc0>
 800d1da:	3b01      	subs	r3, #1
 800d1dc:	440a      	add	r2, r1
 800d1de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d1e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d1e6:	428a      	cmp	r2, r1
 800d1e8:	d1f9      	bne.n	800d1de <memmove+0xaa>
 800d1ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	e7f3      	b.n	800d1d8 <memmove+0xa4>
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	e7f2      	b.n	800d1da <memmove+0xa6>
 800d1f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1f6:	4672      	mov	r2, lr
 800d1f8:	e7ee      	b.n	800d1d8 <memmove+0xa4>
 800d1fa:	bf00      	nop

0800d1fc <__malloc_lock>:
 800d1fc:	4770      	bx	lr
 800d1fe:	bf00      	nop

0800d200 <__malloc_unlock>:
 800d200:	4770      	bx	lr
 800d202:	bf00      	nop

0800d204 <_Balloc>:
 800d204:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800d206:	b570      	push	{r4, r5, r6, lr}
 800d208:	4605      	mov	r5, r0
 800d20a:	460c      	mov	r4, r1
 800d20c:	b14b      	cbz	r3, 800d222 <_Balloc+0x1e>
 800d20e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d212:	b180      	cbz	r0, 800d236 <_Balloc+0x32>
 800d214:	6802      	ldr	r2, [r0, #0]
 800d216:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800d21a:	2300      	movs	r3, #0
 800d21c:	6103      	str	r3, [r0, #16]
 800d21e:	60c3      	str	r3, [r0, #12]
 800d220:	bd70      	pop	{r4, r5, r6, pc}
 800d222:	2221      	movs	r2, #33	; 0x21
 800d224:	2104      	movs	r1, #4
 800d226:	f000 fe1d 	bl	800de64 <_calloc_r>
 800d22a:	64e8      	str	r0, [r5, #76]	; 0x4c
 800d22c:	4603      	mov	r3, r0
 800d22e:	2800      	cmp	r0, #0
 800d230:	d1ed      	bne.n	800d20e <_Balloc+0xa>
 800d232:	2000      	movs	r0, #0
 800d234:	bd70      	pop	{r4, r5, r6, pc}
 800d236:	2101      	movs	r1, #1
 800d238:	fa01 f604 	lsl.w	r6, r1, r4
 800d23c:	1d72      	adds	r2, r6, #5
 800d23e:	4628      	mov	r0, r5
 800d240:	0092      	lsls	r2, r2, #2
 800d242:	f000 fe0f 	bl	800de64 <_calloc_r>
 800d246:	2800      	cmp	r0, #0
 800d248:	d0f3      	beq.n	800d232 <_Balloc+0x2e>
 800d24a:	6044      	str	r4, [r0, #4]
 800d24c:	6086      	str	r6, [r0, #8]
 800d24e:	e7e4      	b.n	800d21a <_Balloc+0x16>

0800d250 <_Bfree>:
 800d250:	b131      	cbz	r1, 800d260 <_Bfree+0x10>
 800d252:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800d254:	684a      	ldr	r2, [r1, #4]
 800d256:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d25a:	6008      	str	r0, [r1, #0]
 800d25c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800d260:	4770      	bx	lr
 800d262:	bf00      	nop

0800d264 <__multadd>:
 800d264:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d266:	690c      	ldr	r4, [r1, #16]
 800d268:	b083      	sub	sp, #12
 800d26a:	460d      	mov	r5, r1
 800d26c:	4606      	mov	r6, r0
 800d26e:	f101 0e14 	add.w	lr, r1, #20
 800d272:	2700      	movs	r7, #0
 800d274:	f8de 0000 	ldr.w	r0, [lr]
 800d278:	b281      	uxth	r1, r0
 800d27a:	fb02 3101 	mla	r1, r2, r1, r3
 800d27e:	0c0b      	lsrs	r3, r1, #16
 800d280:	0c00      	lsrs	r0, r0, #16
 800d282:	fb02 3300 	mla	r3, r2, r0, r3
 800d286:	b289      	uxth	r1, r1
 800d288:	3701      	adds	r7, #1
 800d28a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d28e:	42bc      	cmp	r4, r7
 800d290:	f84e 1b04 	str.w	r1, [lr], #4
 800d294:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800d298:	dcec      	bgt.n	800d274 <__multadd+0x10>
 800d29a:	b13b      	cbz	r3, 800d2ac <__multadd+0x48>
 800d29c:	68aa      	ldr	r2, [r5, #8]
 800d29e:	4294      	cmp	r4, r2
 800d2a0:	da07      	bge.n	800d2b2 <__multadd+0x4e>
 800d2a2:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 800d2a6:	3401      	adds	r4, #1
 800d2a8:	6153      	str	r3, [r2, #20]
 800d2aa:	612c      	str	r4, [r5, #16]
 800d2ac:	4628      	mov	r0, r5
 800d2ae:	b003      	add	sp, #12
 800d2b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2b2:	6869      	ldr	r1, [r5, #4]
 800d2b4:	9301      	str	r3, [sp, #4]
 800d2b6:	3101      	adds	r1, #1
 800d2b8:	4630      	mov	r0, r6
 800d2ba:	f7ff ffa3 	bl	800d204 <_Balloc>
 800d2be:	692a      	ldr	r2, [r5, #16]
 800d2c0:	3202      	adds	r2, #2
 800d2c2:	f105 010c 	add.w	r1, r5, #12
 800d2c6:	4607      	mov	r7, r0
 800d2c8:	0092      	lsls	r2, r2, #2
 800d2ca:	300c      	adds	r0, #12
 800d2cc:	f7f3 f9aa 	bl	8000624 <memcpy>
 800d2d0:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 800d2d2:	6869      	ldr	r1, [r5, #4]
 800d2d4:	9b01      	ldr	r3, [sp, #4]
 800d2d6:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800d2da:	6028      	str	r0, [r5, #0]
 800d2dc:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 800d2e0:	463d      	mov	r5, r7
 800d2e2:	e7de      	b.n	800d2a2 <__multadd+0x3e>

0800d2e4 <__hi0bits>:
 800d2e4:	0c03      	lsrs	r3, r0, #16
 800d2e6:	041b      	lsls	r3, r3, #16
 800d2e8:	b9b3      	cbnz	r3, 800d318 <__hi0bits+0x34>
 800d2ea:	0400      	lsls	r0, r0, #16
 800d2ec:	2310      	movs	r3, #16
 800d2ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d2f2:	bf04      	itt	eq
 800d2f4:	0200      	lsleq	r0, r0, #8
 800d2f6:	3308      	addeq	r3, #8
 800d2f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d2fc:	bf04      	itt	eq
 800d2fe:	0100      	lsleq	r0, r0, #4
 800d300:	3304      	addeq	r3, #4
 800d302:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d306:	bf04      	itt	eq
 800d308:	0080      	lsleq	r0, r0, #2
 800d30a:	3302      	addeq	r3, #2
 800d30c:	2800      	cmp	r0, #0
 800d30e:	db07      	blt.n	800d320 <__hi0bits+0x3c>
 800d310:	0042      	lsls	r2, r0, #1
 800d312:	d403      	bmi.n	800d31c <__hi0bits+0x38>
 800d314:	2020      	movs	r0, #32
 800d316:	4770      	bx	lr
 800d318:	2300      	movs	r3, #0
 800d31a:	e7e8      	b.n	800d2ee <__hi0bits+0xa>
 800d31c:	1c58      	adds	r0, r3, #1
 800d31e:	4770      	bx	lr
 800d320:	4618      	mov	r0, r3
 800d322:	4770      	bx	lr

0800d324 <__lo0bits>:
 800d324:	6803      	ldr	r3, [r0, #0]
 800d326:	f013 0207 	ands.w	r2, r3, #7
 800d32a:	d007      	beq.n	800d33c <__lo0bits+0x18>
 800d32c:	07d9      	lsls	r1, r3, #31
 800d32e:	d420      	bmi.n	800d372 <__lo0bits+0x4e>
 800d330:	079a      	lsls	r2, r3, #30
 800d332:	d420      	bmi.n	800d376 <__lo0bits+0x52>
 800d334:	089b      	lsrs	r3, r3, #2
 800d336:	6003      	str	r3, [r0, #0]
 800d338:	2002      	movs	r0, #2
 800d33a:	4770      	bx	lr
 800d33c:	b299      	uxth	r1, r3
 800d33e:	b909      	cbnz	r1, 800d344 <__lo0bits+0x20>
 800d340:	0c1b      	lsrs	r3, r3, #16
 800d342:	2210      	movs	r2, #16
 800d344:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d348:	bf04      	itt	eq
 800d34a:	0a1b      	lsreq	r3, r3, #8
 800d34c:	3208      	addeq	r2, #8
 800d34e:	0719      	lsls	r1, r3, #28
 800d350:	bf04      	itt	eq
 800d352:	091b      	lsreq	r3, r3, #4
 800d354:	3204      	addeq	r2, #4
 800d356:	0799      	lsls	r1, r3, #30
 800d358:	bf04      	itt	eq
 800d35a:	089b      	lsreq	r3, r3, #2
 800d35c:	3202      	addeq	r2, #2
 800d35e:	07d9      	lsls	r1, r3, #31
 800d360:	d404      	bmi.n	800d36c <__lo0bits+0x48>
 800d362:	085b      	lsrs	r3, r3, #1
 800d364:	d101      	bne.n	800d36a <__lo0bits+0x46>
 800d366:	2020      	movs	r0, #32
 800d368:	4770      	bx	lr
 800d36a:	3201      	adds	r2, #1
 800d36c:	6003      	str	r3, [r0, #0]
 800d36e:	4610      	mov	r0, r2
 800d370:	4770      	bx	lr
 800d372:	2000      	movs	r0, #0
 800d374:	4770      	bx	lr
 800d376:	085b      	lsrs	r3, r3, #1
 800d378:	6003      	str	r3, [r0, #0]
 800d37a:	2001      	movs	r0, #1
 800d37c:	4770      	bx	lr
 800d37e:	bf00      	nop

0800d380 <__i2b>:
 800d380:	b510      	push	{r4, lr}
 800d382:	460c      	mov	r4, r1
 800d384:	2101      	movs	r1, #1
 800d386:	f7ff ff3d 	bl	800d204 <_Balloc>
 800d38a:	2201      	movs	r2, #1
 800d38c:	6144      	str	r4, [r0, #20]
 800d38e:	6102      	str	r2, [r0, #16]
 800d390:	bd10      	pop	{r4, pc}
 800d392:	bf00      	nop

0800d394 <__multiply>:
 800d394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d398:	690d      	ldr	r5, [r1, #16]
 800d39a:	6917      	ldr	r7, [r2, #16]
 800d39c:	42bd      	cmp	r5, r7
 800d39e:	b083      	sub	sp, #12
 800d3a0:	460c      	mov	r4, r1
 800d3a2:	4616      	mov	r6, r2
 800d3a4:	da04      	bge.n	800d3b0 <__multiply+0x1c>
 800d3a6:	462a      	mov	r2, r5
 800d3a8:	4634      	mov	r4, r6
 800d3aa:	463d      	mov	r5, r7
 800d3ac:	460e      	mov	r6, r1
 800d3ae:	4617      	mov	r7, r2
 800d3b0:	68a3      	ldr	r3, [r4, #8]
 800d3b2:	6861      	ldr	r1, [r4, #4]
 800d3b4:	eb05 0807 	add.w	r8, r5, r7
 800d3b8:	4598      	cmp	r8, r3
 800d3ba:	bfc8      	it	gt
 800d3bc:	3101      	addgt	r1, #1
 800d3be:	f7ff ff21 	bl	800d204 <_Balloc>
 800d3c2:	f100 0c14 	add.w	ip, r0, #20
 800d3c6:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 800d3ca:	45cc      	cmp	ip, r9
 800d3cc:	9000      	str	r0, [sp, #0]
 800d3ce:	d205      	bcs.n	800d3dc <__multiply+0x48>
 800d3d0:	4663      	mov	r3, ip
 800d3d2:	2100      	movs	r1, #0
 800d3d4:	f843 1b04 	str.w	r1, [r3], #4
 800d3d8:	4599      	cmp	r9, r3
 800d3da:	d8fb      	bhi.n	800d3d4 <__multiply+0x40>
 800d3dc:	f106 0214 	add.w	r2, r6, #20
 800d3e0:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 800d3e4:	f104 0314 	add.w	r3, r4, #20
 800d3e8:	4552      	cmp	r2, sl
 800d3ea:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
 800d3ee:	d254      	bcs.n	800d49a <__multiply+0x106>
 800d3f0:	f8cd 9004 	str.w	r9, [sp, #4]
 800d3f4:	4699      	mov	r9, r3
 800d3f6:	f852 3b04 	ldr.w	r3, [r2], #4
 800d3fa:	fa1f fb83 	uxth.w	fp, r3
 800d3fe:	f1bb 0f00 	cmp.w	fp, #0
 800d402:	d020      	beq.n	800d446 <__multiply+0xb2>
 800d404:	2000      	movs	r0, #0
 800d406:	464f      	mov	r7, r9
 800d408:	4666      	mov	r6, ip
 800d40a:	4605      	mov	r5, r0
 800d40c:	e000      	b.n	800d410 <__multiply+0x7c>
 800d40e:	461e      	mov	r6, r3
 800d410:	f857 4b04 	ldr.w	r4, [r7], #4
 800d414:	6830      	ldr	r0, [r6, #0]
 800d416:	b2a1      	uxth	r1, r4
 800d418:	b283      	uxth	r3, r0
 800d41a:	fb0b 3101 	mla	r1, fp, r1, r3
 800d41e:	0c24      	lsrs	r4, r4, #16
 800d420:	0c00      	lsrs	r0, r0, #16
 800d422:	194b      	adds	r3, r1, r5
 800d424:	fb0b 0004 	mla	r0, fp, r4, r0
 800d428:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 800d42c:	b299      	uxth	r1, r3
 800d42e:	4633      	mov	r3, r6
 800d430:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d434:	45be      	cmp	lr, r7
 800d436:	ea4f 4510 	mov.w	r5, r0, lsr #16
 800d43a:	f843 1b04 	str.w	r1, [r3], #4
 800d43e:	d8e6      	bhi.n	800d40e <__multiply+0x7a>
 800d440:	6075      	str	r5, [r6, #4]
 800d442:	f852 3c04 	ldr.w	r3, [r2, #-4]
 800d446:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 800d44a:	d020      	beq.n	800d48e <__multiply+0xfa>
 800d44c:	f8dc 3000 	ldr.w	r3, [ip]
 800d450:	4667      	mov	r7, ip
 800d452:	4618      	mov	r0, r3
 800d454:	464d      	mov	r5, r9
 800d456:	2100      	movs	r1, #0
 800d458:	e000      	b.n	800d45c <__multiply+0xc8>
 800d45a:	4637      	mov	r7, r6
 800d45c:	882c      	ldrh	r4, [r5, #0]
 800d45e:	0c00      	lsrs	r0, r0, #16
 800d460:	fb0b 0004 	mla	r0, fp, r4, r0
 800d464:	4401      	add	r1, r0
 800d466:	b29c      	uxth	r4, r3
 800d468:	463e      	mov	r6, r7
 800d46a:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 800d46e:	f846 3b04 	str.w	r3, [r6], #4
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	f855 4b04 	ldr.w	r4, [r5], #4
 800d478:	b283      	uxth	r3, r0
 800d47a:	0c24      	lsrs	r4, r4, #16
 800d47c:	fb0b 3404 	mla	r4, fp, r4, r3
 800d480:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 800d484:	45ae      	cmp	lr, r5
 800d486:	ea4f 4113 	mov.w	r1, r3, lsr #16
 800d48a:	d8e6      	bhi.n	800d45a <__multiply+0xc6>
 800d48c:	607b      	str	r3, [r7, #4]
 800d48e:	4592      	cmp	sl, r2
 800d490:	f10c 0c04 	add.w	ip, ip, #4
 800d494:	d8af      	bhi.n	800d3f6 <__multiply+0x62>
 800d496:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d49a:	f1b8 0f00 	cmp.w	r8, #0
 800d49e:	dd0b      	ble.n	800d4b8 <__multiply+0x124>
 800d4a0:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800d4a4:	f1a9 0904 	sub.w	r9, r9, #4
 800d4a8:	b11b      	cbz	r3, 800d4b2 <__multiply+0x11e>
 800d4aa:	e005      	b.n	800d4b8 <__multiply+0x124>
 800d4ac:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 800d4b0:	b913      	cbnz	r3, 800d4b8 <__multiply+0x124>
 800d4b2:	f1b8 0801 	subs.w	r8, r8, #1
 800d4b6:	d1f9      	bne.n	800d4ac <__multiply+0x118>
 800d4b8:	9800      	ldr	r0, [sp, #0]
 800d4ba:	f8c0 8010 	str.w	r8, [r0, #16]
 800d4be:	b003      	add	sp, #12
 800d4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d4c4 <__pow5mult>:
 800d4c4:	f012 0303 	ands.w	r3, r2, #3
 800d4c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4cc:	4614      	mov	r4, r2
 800d4ce:	4607      	mov	r7, r0
 800d4d0:	d12e      	bne.n	800d530 <__pow5mult+0x6c>
 800d4d2:	460e      	mov	r6, r1
 800d4d4:	10a4      	asrs	r4, r4, #2
 800d4d6:	d01c      	beq.n	800d512 <__pow5mult+0x4e>
 800d4d8:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 800d4da:	b395      	cbz	r5, 800d542 <__pow5mult+0x7e>
 800d4dc:	07e3      	lsls	r3, r4, #31
 800d4de:	f04f 0800 	mov.w	r8, #0
 800d4e2:	d406      	bmi.n	800d4f2 <__pow5mult+0x2e>
 800d4e4:	1064      	asrs	r4, r4, #1
 800d4e6:	d014      	beq.n	800d512 <__pow5mult+0x4e>
 800d4e8:	6828      	ldr	r0, [r5, #0]
 800d4ea:	b1a8      	cbz	r0, 800d518 <__pow5mult+0x54>
 800d4ec:	4605      	mov	r5, r0
 800d4ee:	07e3      	lsls	r3, r4, #31
 800d4f0:	d5f8      	bpl.n	800d4e4 <__pow5mult+0x20>
 800d4f2:	462a      	mov	r2, r5
 800d4f4:	4631      	mov	r1, r6
 800d4f6:	4638      	mov	r0, r7
 800d4f8:	f7ff ff4c 	bl	800d394 <__multiply>
 800d4fc:	b1b6      	cbz	r6, 800d52c <__pow5mult+0x68>
 800d4fe:	6872      	ldr	r2, [r6, #4]
 800d500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d502:	1064      	asrs	r4, r4, #1
 800d504:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d508:	6031      	str	r1, [r6, #0]
 800d50a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 800d50e:	4606      	mov	r6, r0
 800d510:	d1ea      	bne.n	800d4e8 <__pow5mult+0x24>
 800d512:	4630      	mov	r0, r6
 800d514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d518:	462a      	mov	r2, r5
 800d51a:	4629      	mov	r1, r5
 800d51c:	4638      	mov	r0, r7
 800d51e:	f7ff ff39 	bl	800d394 <__multiply>
 800d522:	6028      	str	r0, [r5, #0]
 800d524:	f8c0 8000 	str.w	r8, [r0]
 800d528:	4605      	mov	r5, r0
 800d52a:	e7e0      	b.n	800d4ee <__pow5mult+0x2a>
 800d52c:	4606      	mov	r6, r0
 800d52e:	e7d9      	b.n	800d4e4 <__pow5mult+0x20>
 800d530:	1e5a      	subs	r2, r3, #1
 800d532:	4d0b      	ldr	r5, [pc, #44]	; (800d560 <__pow5mult+0x9c>)
 800d534:	2300      	movs	r3, #0
 800d536:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800d53a:	f7ff fe93 	bl	800d264 <__multadd>
 800d53e:	4606      	mov	r6, r0
 800d540:	e7c8      	b.n	800d4d4 <__pow5mult+0x10>
 800d542:	2101      	movs	r1, #1
 800d544:	4638      	mov	r0, r7
 800d546:	f7ff fe5d 	bl	800d204 <_Balloc>
 800d54a:	f240 2171 	movw	r1, #625	; 0x271
 800d54e:	2201      	movs	r2, #1
 800d550:	2300      	movs	r3, #0
 800d552:	6141      	str	r1, [r0, #20]
 800d554:	6102      	str	r2, [r0, #16]
 800d556:	4605      	mov	r5, r0
 800d558:	64b8      	str	r0, [r7, #72]	; 0x48
 800d55a:	6003      	str	r3, [r0, #0]
 800d55c:	e7be      	b.n	800d4dc <__pow5mult+0x18>
 800d55e:	bf00      	nop
 800d560:	0800e908 	.word	0x0800e908

0800d564 <__lshift>:
 800d564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d568:	4691      	mov	r9, r2
 800d56a:	690a      	ldr	r2, [r1, #16]
 800d56c:	688b      	ldr	r3, [r1, #8]
 800d56e:	ea4f 1469 	mov.w	r4, r9, asr #5
 800d572:	eb04 0802 	add.w	r8, r4, r2
 800d576:	f108 0501 	add.w	r5, r8, #1
 800d57a:	429d      	cmp	r5, r3
 800d57c:	460e      	mov	r6, r1
 800d57e:	4682      	mov	sl, r0
 800d580:	6849      	ldr	r1, [r1, #4]
 800d582:	dd04      	ble.n	800d58e <__lshift+0x2a>
 800d584:	005b      	lsls	r3, r3, #1
 800d586:	429d      	cmp	r5, r3
 800d588:	f101 0101 	add.w	r1, r1, #1
 800d58c:	dcfa      	bgt.n	800d584 <__lshift+0x20>
 800d58e:	4650      	mov	r0, sl
 800d590:	f7ff fe38 	bl	800d204 <_Balloc>
 800d594:	2c00      	cmp	r4, #0
 800d596:	f100 0214 	add.w	r2, r0, #20
 800d59a:	dd38      	ble.n	800d60e <__lshift+0xaa>
 800d59c:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 800d5a0:	2100      	movs	r1, #0
 800d5a2:	f842 1b04 	str.w	r1, [r2], #4
 800d5a6:	4293      	cmp	r3, r2
 800d5a8:	d1fb      	bne.n	800d5a2 <__lshift+0x3e>
 800d5aa:	6934      	ldr	r4, [r6, #16]
 800d5ac:	f106 0114 	add.w	r1, r6, #20
 800d5b0:	f019 091f 	ands.w	r9, r9, #31
 800d5b4:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
 800d5b8:	d021      	beq.n	800d5fe <__lshift+0x9a>
 800d5ba:	f1c9 0220 	rsb	r2, r9, #32
 800d5be:	2400      	movs	r4, #0
 800d5c0:	680f      	ldr	r7, [r1, #0]
 800d5c2:	fa07 fc09 	lsl.w	ip, r7, r9
 800d5c6:	ea4c 0404 	orr.w	r4, ip, r4
 800d5ca:	469c      	mov	ip, r3
 800d5cc:	f843 4b04 	str.w	r4, [r3], #4
 800d5d0:	f851 4b04 	ldr.w	r4, [r1], #4
 800d5d4:	458e      	cmp	lr, r1
 800d5d6:	fa24 f402 	lsr.w	r4, r4, r2
 800d5da:	d8f1      	bhi.n	800d5c0 <__lshift+0x5c>
 800d5dc:	f8cc 4004 	str.w	r4, [ip, #4]
 800d5e0:	b10c      	cbz	r4, 800d5e6 <__lshift+0x82>
 800d5e2:	f108 0502 	add.w	r5, r8, #2
 800d5e6:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 800d5ea:	6872      	ldr	r2, [r6, #4]
 800d5ec:	3d01      	subs	r5, #1
 800d5ee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d5f2:	6105      	str	r5, [r0, #16]
 800d5f4:	6031      	str	r1, [r6, #0]
 800d5f6:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 800d5fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5fe:	3b04      	subs	r3, #4
 800d600:	f851 2b04 	ldr.w	r2, [r1], #4
 800d604:	f843 2f04 	str.w	r2, [r3, #4]!
 800d608:	458e      	cmp	lr, r1
 800d60a:	d8f9      	bhi.n	800d600 <__lshift+0x9c>
 800d60c:	e7eb      	b.n	800d5e6 <__lshift+0x82>
 800d60e:	4613      	mov	r3, r2
 800d610:	e7cb      	b.n	800d5aa <__lshift+0x46>
 800d612:	bf00      	nop

0800d614 <__mcmp>:
 800d614:	6902      	ldr	r2, [r0, #16]
 800d616:	690b      	ldr	r3, [r1, #16]
 800d618:	1ad2      	subs	r2, r2, r3
 800d61a:	d112      	bne.n	800d642 <__mcmp+0x2e>
 800d61c:	009b      	lsls	r3, r3, #2
 800d61e:	3014      	adds	r0, #20
 800d620:	3114      	adds	r1, #20
 800d622:	4419      	add	r1, r3
 800d624:	b410      	push	{r4}
 800d626:	4403      	add	r3, r0
 800d628:	e001      	b.n	800d62e <__mcmp+0x1a>
 800d62a:	4298      	cmp	r0, r3
 800d62c:	d20b      	bcs.n	800d646 <__mcmp+0x32>
 800d62e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800d632:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d636:	4294      	cmp	r4, r2
 800d638:	d0f7      	beq.n	800d62a <__mcmp+0x16>
 800d63a:	d307      	bcc.n	800d64c <__mcmp+0x38>
 800d63c:	2001      	movs	r0, #1
 800d63e:	bc10      	pop	{r4}
 800d640:	4770      	bx	lr
 800d642:	4610      	mov	r0, r2
 800d644:	4770      	bx	lr
 800d646:	2000      	movs	r0, #0
 800d648:	bc10      	pop	{r4}
 800d64a:	4770      	bx	lr
 800d64c:	f04f 30ff 	mov.w	r0, #4294967295
 800d650:	e7f5      	b.n	800d63e <__mcmp+0x2a>
 800d652:	bf00      	nop

0800d654 <__mdiff>:
 800d654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d658:	690b      	ldr	r3, [r1, #16]
 800d65a:	460f      	mov	r7, r1
 800d65c:	6911      	ldr	r1, [r2, #16]
 800d65e:	1a5b      	subs	r3, r3, r1
 800d660:	2b00      	cmp	r3, #0
 800d662:	4690      	mov	r8, r2
 800d664:	d117      	bne.n	800d696 <__mdiff+0x42>
 800d666:	0089      	lsls	r1, r1, #2
 800d668:	f107 0214 	add.w	r2, r7, #20
 800d66c:	f108 0514 	add.w	r5, r8, #20
 800d670:	1853      	adds	r3, r2, r1
 800d672:	4429      	add	r1, r5
 800d674:	e001      	b.n	800d67a <__mdiff+0x26>
 800d676:	429a      	cmp	r2, r3
 800d678:	d25e      	bcs.n	800d738 <__mdiff+0xe4>
 800d67a:	f853 6d04 	ldr.w	r6, [r3, #-4]!
 800d67e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d682:	42a6      	cmp	r6, r4
 800d684:	d0f7      	beq.n	800d676 <__mdiff+0x22>
 800d686:	d260      	bcs.n	800d74a <__mdiff+0xf6>
 800d688:	463b      	mov	r3, r7
 800d68a:	4614      	mov	r4, r2
 800d68c:	4647      	mov	r7, r8
 800d68e:	f04f 0901 	mov.w	r9, #1
 800d692:	4698      	mov	r8, r3
 800d694:	e006      	b.n	800d6a4 <__mdiff+0x50>
 800d696:	db5d      	blt.n	800d754 <__mdiff+0x100>
 800d698:	f107 0514 	add.w	r5, r7, #20
 800d69c:	f102 0414 	add.w	r4, r2, #20
 800d6a0:	f04f 0900 	mov.w	r9, #0
 800d6a4:	6879      	ldr	r1, [r7, #4]
 800d6a6:	f7ff fdad 	bl	800d204 <_Balloc>
 800d6aa:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800d6ae:	693e      	ldr	r6, [r7, #16]
 800d6b0:	f8c0 900c 	str.w	r9, [r0, #12]
 800d6b4:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 800d6b8:	46a6      	mov	lr, r4
 800d6ba:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 800d6be:	f100 0414 	add.w	r4, r0, #20
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	f85e 1b04 	ldr.w	r1, [lr], #4
 800d6c8:	f855 8b04 	ldr.w	r8, [r5], #4
 800d6cc:	b28a      	uxth	r2, r1
 800d6ce:	fa13 f388 	uxtah	r3, r3, r8
 800d6d2:	0c09      	lsrs	r1, r1, #16
 800d6d4:	1a9a      	subs	r2, r3, r2
 800d6d6:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
 800d6da:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800d6de:	b292      	uxth	r2, r2
 800d6e0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d6e4:	45f4      	cmp	ip, lr
 800d6e6:	f844 2b04 	str.w	r2, [r4], #4
 800d6ea:	ea4f 4323 	mov.w	r3, r3, asr #16
 800d6ee:	d8e9      	bhi.n	800d6c4 <__mdiff+0x70>
 800d6f0:	42af      	cmp	r7, r5
 800d6f2:	d917      	bls.n	800d724 <__mdiff+0xd0>
 800d6f4:	46a4      	mov	ip, r4
 800d6f6:	4629      	mov	r1, r5
 800d6f8:	f851 eb04 	ldr.w	lr, [r1], #4
 800d6fc:	fa13 f28e 	uxtah	r2, r3, lr
 800d700:	1413      	asrs	r3, r2, #16
 800d702:	eb03 431e 	add.w	r3, r3, lr, lsr #16
 800d706:	b292      	uxth	r2, r2
 800d708:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d70c:	428f      	cmp	r7, r1
 800d70e:	f84c 2b04 	str.w	r2, [ip], #4
 800d712:	ea4f 4323 	mov.w	r3, r3, asr #16
 800d716:	d8ef      	bhi.n	800d6f8 <__mdiff+0xa4>
 800d718:	43ed      	mvns	r5, r5
 800d71a:	443d      	add	r5, r7
 800d71c:	f025 0503 	bic.w	r5, r5, #3
 800d720:	3504      	adds	r5, #4
 800d722:	442c      	add	r4, r5
 800d724:	3c04      	subs	r4, #4
 800d726:	b922      	cbnz	r2, 800d732 <__mdiff+0xde>
 800d728:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 800d72c:	3e01      	subs	r6, #1
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d0fa      	beq.n	800d728 <__mdiff+0xd4>
 800d732:	6106      	str	r6, [r0, #16]
 800d734:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d738:	2100      	movs	r1, #0
 800d73a:	f7ff fd63 	bl	800d204 <_Balloc>
 800d73e:	2201      	movs	r2, #1
 800d740:	2300      	movs	r3, #0
 800d742:	6102      	str	r2, [r0, #16]
 800d744:	6143      	str	r3, [r0, #20]
 800d746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d74a:	462c      	mov	r4, r5
 800d74c:	f04f 0900 	mov.w	r9, #0
 800d750:	4615      	mov	r5, r2
 800d752:	e7a7      	b.n	800d6a4 <__mdiff+0x50>
 800d754:	463b      	mov	r3, r7
 800d756:	f107 0414 	add.w	r4, r7, #20
 800d75a:	f108 0514 	add.w	r5, r8, #20
 800d75e:	4647      	mov	r7, r8
 800d760:	f04f 0901 	mov.w	r9, #1
 800d764:	4698      	mov	r8, r3
 800d766:	e79d      	b.n	800d6a4 <__mdiff+0x50>

0800d768 <__d2b>:
 800d768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d76c:	b082      	sub	sp, #8
 800d76e:	2101      	movs	r1, #1
 800d770:	461c      	mov	r4, r3
 800d772:	f3c3 570a 	ubfx	r7, r3, #20, #11
 800d776:	4615      	mov	r5, r2
 800d778:	9e08      	ldr	r6, [sp, #32]
 800d77a:	f7ff fd43 	bl	800d204 <_Balloc>
 800d77e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d782:	4680      	mov	r8, r0
 800d784:	b10f      	cbz	r7, 800d78a <__d2b+0x22>
 800d786:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800d78a:	9401      	str	r4, [sp, #4]
 800d78c:	b31d      	cbz	r5, 800d7d6 <__d2b+0x6e>
 800d78e:	a802      	add	r0, sp, #8
 800d790:	f840 5d08 	str.w	r5, [r0, #-8]!
 800d794:	f7ff fdc6 	bl	800d324 <__lo0bits>
 800d798:	2800      	cmp	r0, #0
 800d79a:	d134      	bne.n	800d806 <__d2b+0x9e>
 800d79c:	e89d 000c 	ldmia.w	sp, {r2, r3}
 800d7a0:	f8c8 2014 	str.w	r2, [r8, #20]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	bf0c      	ite	eq
 800d7a8:	2101      	moveq	r1, #1
 800d7aa:	2102      	movne	r1, #2
 800d7ac:	f8c8 3018 	str.w	r3, [r8, #24]
 800d7b0:	f8c8 1010 	str.w	r1, [r8, #16]
 800d7b4:	b9df      	cbnz	r7, 800d7ee <__d2b+0x86>
 800d7b6:	eb08 0381 	add.w	r3, r8, r1, lsl #2
 800d7ba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d7be:	6030      	str	r0, [r6, #0]
 800d7c0:	6918      	ldr	r0, [r3, #16]
 800d7c2:	f7ff fd8f 	bl	800d2e4 <__hi0bits>
 800d7c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7c8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d7cc:	6018      	str	r0, [r3, #0]
 800d7ce:	4640      	mov	r0, r8
 800d7d0:	b002      	add	sp, #8
 800d7d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7d6:	a801      	add	r0, sp, #4
 800d7d8:	f7ff fda4 	bl	800d324 <__lo0bits>
 800d7dc:	9b01      	ldr	r3, [sp, #4]
 800d7de:	f8c8 3014 	str.w	r3, [r8, #20]
 800d7e2:	2101      	movs	r1, #1
 800d7e4:	3020      	adds	r0, #32
 800d7e6:	f8c8 1010 	str.w	r1, [r8, #16]
 800d7ea:	2f00      	cmp	r7, #0
 800d7ec:	d0e3      	beq.n	800d7b6 <__d2b+0x4e>
 800d7ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7f0:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
 800d7f4:	4407      	add	r7, r0
 800d7f6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d7fa:	6037      	str	r7, [r6, #0]
 800d7fc:	6018      	str	r0, [r3, #0]
 800d7fe:	4640      	mov	r0, r8
 800d800:	b002      	add	sp, #8
 800d802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d806:	e89d 000c 	ldmia.w	sp, {r2, r3}
 800d80a:	f1c0 0120 	rsb	r1, r0, #32
 800d80e:	fa03 f101 	lsl.w	r1, r3, r1
 800d812:	430a      	orrs	r2, r1
 800d814:	40c3      	lsrs	r3, r0
 800d816:	9301      	str	r3, [sp, #4]
 800d818:	f8c8 2014 	str.w	r2, [r8, #20]
 800d81c:	e7c2      	b.n	800d7a4 <__d2b+0x3c>
 800d81e:	bf00      	nop

0800d820 <_realloc_r>:
 800d820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d824:	4617      	mov	r7, r2
 800d826:	b083      	sub	sp, #12
 800d828:	2900      	cmp	r1, #0
 800d82a:	f000 80c1 	beq.w	800d9b0 <_realloc_r+0x190>
 800d82e:	460e      	mov	r6, r1
 800d830:	4681      	mov	r9, r0
 800d832:	f107 050b 	add.w	r5, r7, #11
 800d836:	f7ff fce1 	bl	800d1fc <__malloc_lock>
 800d83a:	f856 ec04 	ldr.w	lr, [r6, #-4]
 800d83e:	2d16      	cmp	r5, #22
 800d840:	f02e 0403 	bic.w	r4, lr, #3
 800d844:	f1a6 0808 	sub.w	r8, r6, #8
 800d848:	d840      	bhi.n	800d8cc <_realloc_r+0xac>
 800d84a:	2210      	movs	r2, #16
 800d84c:	4615      	mov	r5, r2
 800d84e:	42af      	cmp	r7, r5
 800d850:	d841      	bhi.n	800d8d6 <_realloc_r+0xb6>
 800d852:	4294      	cmp	r4, r2
 800d854:	da75      	bge.n	800d942 <_realloc_r+0x122>
 800d856:	4bc9      	ldr	r3, [pc, #804]	; (800db7c <_realloc_r+0x35c>)
 800d858:	6899      	ldr	r1, [r3, #8]
 800d85a:	eb08 0004 	add.w	r0, r8, r4
 800d85e:	4288      	cmp	r0, r1
 800d860:	6841      	ldr	r1, [r0, #4]
 800d862:	f000 80d9 	beq.w	800da18 <_realloc_r+0x1f8>
 800d866:	f021 0301 	bic.w	r3, r1, #1
 800d86a:	4403      	add	r3, r0
 800d86c:	685b      	ldr	r3, [r3, #4]
 800d86e:	07db      	lsls	r3, r3, #31
 800d870:	d57d      	bpl.n	800d96e <_realloc_r+0x14e>
 800d872:	f01e 0f01 	tst.w	lr, #1
 800d876:	d035      	beq.n	800d8e4 <_realloc_r+0xc4>
 800d878:	4639      	mov	r1, r7
 800d87a:	4648      	mov	r0, r9
 800d87c:	f7ff f9a2 	bl	800cbc4 <_malloc_r>
 800d880:	4607      	mov	r7, r0
 800d882:	b1e0      	cbz	r0, 800d8be <_realloc_r+0x9e>
 800d884:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d888:	f023 0301 	bic.w	r3, r3, #1
 800d88c:	4443      	add	r3, r8
 800d88e:	f1a0 0208 	sub.w	r2, r0, #8
 800d892:	429a      	cmp	r2, r3
 800d894:	f000 8144 	beq.w	800db20 <_realloc_r+0x300>
 800d898:	1f22      	subs	r2, r4, #4
 800d89a:	2a24      	cmp	r2, #36	; 0x24
 800d89c:	f200 8131 	bhi.w	800db02 <_realloc_r+0x2e2>
 800d8a0:	2a13      	cmp	r2, #19
 800d8a2:	f200 8104 	bhi.w	800daae <_realloc_r+0x28e>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	4632      	mov	r2, r6
 800d8aa:	6811      	ldr	r1, [r2, #0]
 800d8ac:	6019      	str	r1, [r3, #0]
 800d8ae:	6851      	ldr	r1, [r2, #4]
 800d8b0:	6059      	str	r1, [r3, #4]
 800d8b2:	6892      	ldr	r2, [r2, #8]
 800d8b4:	609a      	str	r2, [r3, #8]
 800d8b6:	4631      	mov	r1, r6
 800d8b8:	4648      	mov	r0, r9
 800d8ba:	f7fe fe6d 	bl	800c598 <_free_r>
 800d8be:	4648      	mov	r0, r9
 800d8c0:	f7ff fc9e 	bl	800d200 <__malloc_unlock>
 800d8c4:	4638      	mov	r0, r7
 800d8c6:	b003      	add	sp, #12
 800d8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8cc:	f025 0507 	bic.w	r5, r5, #7
 800d8d0:	2d00      	cmp	r5, #0
 800d8d2:	462a      	mov	r2, r5
 800d8d4:	dabb      	bge.n	800d84e <_realloc_r+0x2e>
 800d8d6:	230c      	movs	r3, #12
 800d8d8:	2000      	movs	r0, #0
 800d8da:	f8c9 3000 	str.w	r3, [r9]
 800d8de:	b003      	add	sp, #12
 800d8e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8e4:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800d8e8:	ebc3 0a08 	rsb	sl, r3, r8
 800d8ec:	f8da 3004 	ldr.w	r3, [sl, #4]
 800d8f0:	f023 0c03 	bic.w	ip, r3, #3
 800d8f4:	eb04 030c 	add.w	r3, r4, ip
 800d8f8:	4293      	cmp	r3, r2
 800d8fa:	dbbd      	blt.n	800d878 <_realloc_r+0x58>
 800d8fc:	4657      	mov	r7, sl
 800d8fe:	f8da 100c 	ldr.w	r1, [sl, #12]
 800d902:	f857 0f08 	ldr.w	r0, [r7, #8]!
 800d906:	1f22      	subs	r2, r4, #4
 800d908:	2a24      	cmp	r2, #36	; 0x24
 800d90a:	60c1      	str	r1, [r0, #12]
 800d90c:	6088      	str	r0, [r1, #8]
 800d90e:	f200 8117 	bhi.w	800db40 <_realloc_r+0x320>
 800d912:	2a13      	cmp	r2, #19
 800d914:	f240 8112 	bls.w	800db3c <_realloc_r+0x31c>
 800d918:	6831      	ldr	r1, [r6, #0]
 800d91a:	f8ca 1008 	str.w	r1, [sl, #8]
 800d91e:	6871      	ldr	r1, [r6, #4]
 800d920:	f8ca 100c 	str.w	r1, [sl, #12]
 800d924:	2a1b      	cmp	r2, #27
 800d926:	f200 812b 	bhi.w	800db80 <_realloc_r+0x360>
 800d92a:	3608      	adds	r6, #8
 800d92c:	f10a 0210 	add.w	r2, sl, #16
 800d930:	6831      	ldr	r1, [r6, #0]
 800d932:	6011      	str	r1, [r2, #0]
 800d934:	6871      	ldr	r1, [r6, #4]
 800d936:	6051      	str	r1, [r2, #4]
 800d938:	68b1      	ldr	r1, [r6, #8]
 800d93a:	6091      	str	r1, [r2, #8]
 800d93c:	463e      	mov	r6, r7
 800d93e:	461c      	mov	r4, r3
 800d940:	46d0      	mov	r8, sl
 800d942:	1b63      	subs	r3, r4, r5
 800d944:	2b0f      	cmp	r3, #15
 800d946:	d81d      	bhi.n	800d984 <_realloc_r+0x164>
 800d948:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d94c:	f003 0301 	and.w	r3, r3, #1
 800d950:	4323      	orrs	r3, r4
 800d952:	4444      	add	r4, r8
 800d954:	f8c8 3004 	str.w	r3, [r8, #4]
 800d958:	6863      	ldr	r3, [r4, #4]
 800d95a:	f043 0301 	orr.w	r3, r3, #1
 800d95e:	6063      	str	r3, [r4, #4]
 800d960:	4648      	mov	r0, r9
 800d962:	f7ff fc4d 	bl	800d200 <__malloc_unlock>
 800d966:	4630      	mov	r0, r6
 800d968:	b003      	add	sp, #12
 800d96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d96e:	f021 0103 	bic.w	r1, r1, #3
 800d972:	4421      	add	r1, r4
 800d974:	4291      	cmp	r1, r2
 800d976:	db21      	blt.n	800d9bc <_realloc_r+0x19c>
 800d978:	68c3      	ldr	r3, [r0, #12]
 800d97a:	6882      	ldr	r2, [r0, #8]
 800d97c:	460c      	mov	r4, r1
 800d97e:	60d3      	str	r3, [r2, #12]
 800d980:	609a      	str	r2, [r3, #8]
 800d982:	e7de      	b.n	800d942 <_realloc_r+0x122>
 800d984:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800d988:	eb08 0105 	add.w	r1, r8, r5
 800d98c:	f002 0201 	and.w	r2, r2, #1
 800d990:	4315      	orrs	r5, r2
 800d992:	f043 0201 	orr.w	r2, r3, #1
 800d996:	440b      	add	r3, r1
 800d998:	f8c8 5004 	str.w	r5, [r8, #4]
 800d99c:	604a      	str	r2, [r1, #4]
 800d99e:	685a      	ldr	r2, [r3, #4]
 800d9a0:	f042 0201 	orr.w	r2, r2, #1
 800d9a4:	3108      	adds	r1, #8
 800d9a6:	605a      	str	r2, [r3, #4]
 800d9a8:	4648      	mov	r0, r9
 800d9aa:	f7fe fdf5 	bl	800c598 <_free_r>
 800d9ae:	e7d7      	b.n	800d960 <_realloc_r+0x140>
 800d9b0:	4611      	mov	r1, r2
 800d9b2:	b003      	add	sp, #12
 800d9b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9b8:	f7ff b904 	b.w	800cbc4 <_malloc_r>
 800d9bc:	f01e 0f01 	tst.w	lr, #1
 800d9c0:	f47f af5a 	bne.w	800d878 <_realloc_r+0x58>
 800d9c4:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800d9c8:	ebc3 0a08 	rsb	sl, r3, r8
 800d9cc:	f8da 3004 	ldr.w	r3, [sl, #4]
 800d9d0:	f023 0c03 	bic.w	ip, r3, #3
 800d9d4:	eb01 0e0c 	add.w	lr, r1, ip
 800d9d8:	4596      	cmp	lr, r2
 800d9da:	db8b      	blt.n	800d8f4 <_realloc_r+0xd4>
 800d9dc:	68c3      	ldr	r3, [r0, #12]
 800d9de:	6882      	ldr	r2, [r0, #8]
 800d9e0:	4657      	mov	r7, sl
 800d9e2:	60d3      	str	r3, [r2, #12]
 800d9e4:	609a      	str	r2, [r3, #8]
 800d9e6:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800d9ea:	f8da 300c 	ldr.w	r3, [sl, #12]
 800d9ee:	60cb      	str	r3, [r1, #12]
 800d9f0:	1f22      	subs	r2, r4, #4
 800d9f2:	2a24      	cmp	r2, #36	; 0x24
 800d9f4:	6099      	str	r1, [r3, #8]
 800d9f6:	f200 8099 	bhi.w	800db2c <_realloc_r+0x30c>
 800d9fa:	2a13      	cmp	r2, #19
 800d9fc:	d962      	bls.n	800dac4 <_realloc_r+0x2a4>
 800d9fe:	6833      	ldr	r3, [r6, #0]
 800da00:	f8ca 3008 	str.w	r3, [sl, #8]
 800da04:	6873      	ldr	r3, [r6, #4]
 800da06:	f8ca 300c 	str.w	r3, [sl, #12]
 800da0a:	2a1b      	cmp	r2, #27
 800da0c:	f200 80a0 	bhi.w	800db50 <_realloc_r+0x330>
 800da10:	3608      	adds	r6, #8
 800da12:	f10a 0310 	add.w	r3, sl, #16
 800da16:	e056      	b.n	800dac6 <_realloc_r+0x2a6>
 800da18:	f021 0b03 	bic.w	fp, r1, #3
 800da1c:	44a3      	add	fp, r4
 800da1e:	f105 0010 	add.w	r0, r5, #16
 800da22:	4583      	cmp	fp, r0
 800da24:	da59      	bge.n	800dada <_realloc_r+0x2ba>
 800da26:	f01e 0f01 	tst.w	lr, #1
 800da2a:	f47f af25 	bne.w	800d878 <_realloc_r+0x58>
 800da2e:	f856 1c08 	ldr.w	r1, [r6, #-8]
 800da32:	ebc1 0a08 	rsb	sl, r1, r8
 800da36:	f8da 1004 	ldr.w	r1, [sl, #4]
 800da3a:	f021 0c03 	bic.w	ip, r1, #3
 800da3e:	44e3      	add	fp, ip
 800da40:	4558      	cmp	r0, fp
 800da42:	f73f af57 	bgt.w	800d8f4 <_realloc_r+0xd4>
 800da46:	4657      	mov	r7, sl
 800da48:	f8da 100c 	ldr.w	r1, [sl, #12]
 800da4c:	f857 0f08 	ldr.w	r0, [r7, #8]!
 800da50:	1f22      	subs	r2, r4, #4
 800da52:	2a24      	cmp	r2, #36	; 0x24
 800da54:	60c1      	str	r1, [r0, #12]
 800da56:	6088      	str	r0, [r1, #8]
 800da58:	f200 80b4 	bhi.w	800dbc4 <_realloc_r+0x3a4>
 800da5c:	2a13      	cmp	r2, #19
 800da5e:	f240 80a5 	bls.w	800dbac <_realloc_r+0x38c>
 800da62:	6831      	ldr	r1, [r6, #0]
 800da64:	f8ca 1008 	str.w	r1, [sl, #8]
 800da68:	6871      	ldr	r1, [r6, #4]
 800da6a:	f8ca 100c 	str.w	r1, [sl, #12]
 800da6e:	2a1b      	cmp	r2, #27
 800da70:	f200 80af 	bhi.w	800dbd2 <_realloc_r+0x3b2>
 800da74:	3608      	adds	r6, #8
 800da76:	f10a 0210 	add.w	r2, sl, #16
 800da7a:	6831      	ldr	r1, [r6, #0]
 800da7c:	6011      	str	r1, [r2, #0]
 800da7e:	6871      	ldr	r1, [r6, #4]
 800da80:	6051      	str	r1, [r2, #4]
 800da82:	68b1      	ldr	r1, [r6, #8]
 800da84:	6091      	str	r1, [r2, #8]
 800da86:	eb0a 0105 	add.w	r1, sl, r5
 800da8a:	ebc5 020b 	rsb	r2, r5, fp
 800da8e:	f042 0201 	orr.w	r2, r2, #1
 800da92:	6099      	str	r1, [r3, #8]
 800da94:	604a      	str	r2, [r1, #4]
 800da96:	f8da 3004 	ldr.w	r3, [sl, #4]
 800da9a:	f003 0301 	and.w	r3, r3, #1
 800da9e:	431d      	orrs	r5, r3
 800daa0:	4648      	mov	r0, r9
 800daa2:	f8ca 5004 	str.w	r5, [sl, #4]
 800daa6:	f7ff fbab 	bl	800d200 <__malloc_unlock>
 800daaa:	4638      	mov	r0, r7
 800daac:	e75c      	b.n	800d968 <_realloc_r+0x148>
 800daae:	6833      	ldr	r3, [r6, #0]
 800dab0:	6003      	str	r3, [r0, #0]
 800dab2:	6873      	ldr	r3, [r6, #4]
 800dab4:	6043      	str	r3, [r0, #4]
 800dab6:	2a1b      	cmp	r2, #27
 800dab8:	d827      	bhi.n	800db0a <_realloc_r+0x2ea>
 800daba:	f100 0308 	add.w	r3, r0, #8
 800dabe:	f106 0208 	add.w	r2, r6, #8
 800dac2:	e6f2      	b.n	800d8aa <_realloc_r+0x8a>
 800dac4:	463b      	mov	r3, r7
 800dac6:	6832      	ldr	r2, [r6, #0]
 800dac8:	601a      	str	r2, [r3, #0]
 800daca:	6872      	ldr	r2, [r6, #4]
 800dacc:	605a      	str	r2, [r3, #4]
 800dace:	68b2      	ldr	r2, [r6, #8]
 800dad0:	609a      	str	r2, [r3, #8]
 800dad2:	463e      	mov	r6, r7
 800dad4:	4674      	mov	r4, lr
 800dad6:	46d0      	mov	r8, sl
 800dad8:	e733      	b.n	800d942 <_realloc_r+0x122>
 800dada:	eb08 0105 	add.w	r1, r8, r5
 800dade:	ebc5 0b0b 	rsb	fp, r5, fp
 800dae2:	f04b 0201 	orr.w	r2, fp, #1
 800dae6:	6099      	str	r1, [r3, #8]
 800dae8:	604a      	str	r2, [r1, #4]
 800daea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800daee:	f003 0301 	and.w	r3, r3, #1
 800daf2:	431d      	orrs	r5, r3
 800daf4:	4648      	mov	r0, r9
 800daf6:	f846 5c04 	str.w	r5, [r6, #-4]
 800dafa:	f7ff fb81 	bl	800d200 <__malloc_unlock>
 800dafe:	4630      	mov	r0, r6
 800db00:	e732      	b.n	800d968 <_realloc_r+0x148>
 800db02:	4631      	mov	r1, r6
 800db04:	f7ff fb16 	bl	800d134 <memmove>
 800db08:	e6d5      	b.n	800d8b6 <_realloc_r+0x96>
 800db0a:	68b3      	ldr	r3, [r6, #8]
 800db0c:	6083      	str	r3, [r0, #8]
 800db0e:	68f3      	ldr	r3, [r6, #12]
 800db10:	60c3      	str	r3, [r0, #12]
 800db12:	2a24      	cmp	r2, #36	; 0x24
 800db14:	d028      	beq.n	800db68 <_realloc_r+0x348>
 800db16:	f100 0310 	add.w	r3, r0, #16
 800db1a:	f106 0210 	add.w	r2, r6, #16
 800db1e:	e6c4      	b.n	800d8aa <_realloc_r+0x8a>
 800db20:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800db24:	f023 0303 	bic.w	r3, r3, #3
 800db28:	441c      	add	r4, r3
 800db2a:	e70a      	b.n	800d942 <_realloc_r+0x122>
 800db2c:	4631      	mov	r1, r6
 800db2e:	4638      	mov	r0, r7
 800db30:	4674      	mov	r4, lr
 800db32:	46d0      	mov	r8, sl
 800db34:	f7ff fafe 	bl	800d134 <memmove>
 800db38:	463e      	mov	r6, r7
 800db3a:	e702      	b.n	800d942 <_realloc_r+0x122>
 800db3c:	463a      	mov	r2, r7
 800db3e:	e6f7      	b.n	800d930 <_realloc_r+0x110>
 800db40:	4631      	mov	r1, r6
 800db42:	4638      	mov	r0, r7
 800db44:	461c      	mov	r4, r3
 800db46:	46d0      	mov	r8, sl
 800db48:	f7ff faf4 	bl	800d134 <memmove>
 800db4c:	463e      	mov	r6, r7
 800db4e:	e6f8      	b.n	800d942 <_realloc_r+0x122>
 800db50:	68b3      	ldr	r3, [r6, #8]
 800db52:	f8ca 3010 	str.w	r3, [sl, #16]
 800db56:	68f3      	ldr	r3, [r6, #12]
 800db58:	f8ca 3014 	str.w	r3, [sl, #20]
 800db5c:	2a24      	cmp	r2, #36	; 0x24
 800db5e:	d01b      	beq.n	800db98 <_realloc_r+0x378>
 800db60:	3610      	adds	r6, #16
 800db62:	f10a 0318 	add.w	r3, sl, #24
 800db66:	e7ae      	b.n	800dac6 <_realloc_r+0x2a6>
 800db68:	6933      	ldr	r3, [r6, #16]
 800db6a:	6103      	str	r3, [r0, #16]
 800db6c:	6973      	ldr	r3, [r6, #20]
 800db6e:	6143      	str	r3, [r0, #20]
 800db70:	f106 0218 	add.w	r2, r6, #24
 800db74:	f100 0318 	add.w	r3, r0, #24
 800db78:	e697      	b.n	800d8aa <_realloc_r+0x8a>
 800db7a:	bf00      	nop
 800db7c:	20000464 	.word	0x20000464
 800db80:	68b1      	ldr	r1, [r6, #8]
 800db82:	f8ca 1010 	str.w	r1, [sl, #16]
 800db86:	68f1      	ldr	r1, [r6, #12]
 800db88:	f8ca 1014 	str.w	r1, [sl, #20]
 800db8c:	2a24      	cmp	r2, #36	; 0x24
 800db8e:	d00f      	beq.n	800dbb0 <_realloc_r+0x390>
 800db90:	3610      	adds	r6, #16
 800db92:	f10a 0218 	add.w	r2, sl, #24
 800db96:	e6cb      	b.n	800d930 <_realloc_r+0x110>
 800db98:	6933      	ldr	r3, [r6, #16]
 800db9a:	f8ca 3018 	str.w	r3, [sl, #24]
 800db9e:	6973      	ldr	r3, [r6, #20]
 800dba0:	f8ca 301c 	str.w	r3, [sl, #28]
 800dba4:	3618      	adds	r6, #24
 800dba6:	f10a 0320 	add.w	r3, sl, #32
 800dbaa:	e78c      	b.n	800dac6 <_realloc_r+0x2a6>
 800dbac:	463a      	mov	r2, r7
 800dbae:	e764      	b.n	800da7a <_realloc_r+0x25a>
 800dbb0:	6932      	ldr	r2, [r6, #16]
 800dbb2:	f8ca 2018 	str.w	r2, [sl, #24]
 800dbb6:	6972      	ldr	r2, [r6, #20]
 800dbb8:	f8ca 201c 	str.w	r2, [sl, #28]
 800dbbc:	3618      	adds	r6, #24
 800dbbe:	f10a 0220 	add.w	r2, sl, #32
 800dbc2:	e6b5      	b.n	800d930 <_realloc_r+0x110>
 800dbc4:	4631      	mov	r1, r6
 800dbc6:	4638      	mov	r0, r7
 800dbc8:	9301      	str	r3, [sp, #4]
 800dbca:	f7ff fab3 	bl	800d134 <memmove>
 800dbce:	9b01      	ldr	r3, [sp, #4]
 800dbd0:	e759      	b.n	800da86 <_realloc_r+0x266>
 800dbd2:	68b1      	ldr	r1, [r6, #8]
 800dbd4:	f8ca 1010 	str.w	r1, [sl, #16]
 800dbd8:	68f1      	ldr	r1, [r6, #12]
 800dbda:	f8ca 1014 	str.w	r1, [sl, #20]
 800dbde:	2a24      	cmp	r2, #36	; 0x24
 800dbe0:	d003      	beq.n	800dbea <_realloc_r+0x3ca>
 800dbe2:	3610      	adds	r6, #16
 800dbe4:	f10a 0218 	add.w	r2, sl, #24
 800dbe8:	e747      	b.n	800da7a <_realloc_r+0x25a>
 800dbea:	6932      	ldr	r2, [r6, #16]
 800dbec:	f8ca 2018 	str.w	r2, [sl, #24]
 800dbf0:	6972      	ldr	r2, [r6, #20]
 800dbf2:	f8ca 201c 	str.w	r2, [sl, #28]
 800dbf6:	3618      	adds	r6, #24
 800dbf8:	f10a 0220 	add.w	r2, sl, #32
 800dbfc:	e73d      	b.n	800da7a <_realloc_r+0x25a>
 800dbfe:	bf00      	nop

0800dc00 <_sbrk_r>:
 800dc00:	b538      	push	{r3, r4, r5, lr}
 800dc02:	4c07      	ldr	r4, [pc, #28]	; (800dc20 <_sbrk_r+0x20>)
 800dc04:	2300      	movs	r3, #0
 800dc06:	4605      	mov	r5, r0
 800dc08:	4608      	mov	r0, r1
 800dc0a:	6023      	str	r3, [r4, #0]
 800dc0c:	f7f9 fcf0 	bl	80075f0 <_sbrk>
 800dc10:	1c43      	adds	r3, r0, #1
 800dc12:	d000      	beq.n	800dc16 <_sbrk_r+0x16>
 800dc14:	bd38      	pop	{r3, r4, r5, pc}
 800dc16:	6823      	ldr	r3, [r4, #0]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d0fb      	beq.n	800dc14 <_sbrk_r+0x14>
 800dc1c:	602b      	str	r3, [r5, #0]
 800dc1e:	bd38      	pop	{r3, r4, r5, pc}
 800dc20:	20003848 	.word	0x20003848

0800dc24 <__sread>:
 800dc24:	b510      	push	{r4, lr}
 800dc26:	460c      	mov	r4, r1
 800dc28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc2c:	f000 fa5c 	bl	800e0e8 <_read_r>
 800dc30:	2800      	cmp	r0, #0
 800dc32:	db03      	blt.n	800dc3c <__sread+0x18>
 800dc34:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800dc36:	4403      	add	r3, r0
 800dc38:	6523      	str	r3, [r4, #80]	; 0x50
 800dc3a:	bd10      	pop	{r4, pc}
 800dc3c:	89a3      	ldrh	r3, [r4, #12]
 800dc3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dc42:	81a3      	strh	r3, [r4, #12]
 800dc44:	bd10      	pop	{r4, pc}
 800dc46:	bf00      	nop

0800dc48 <__swrite>:
 800dc48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc4c:	4616      	mov	r6, r2
 800dc4e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dc52:	461f      	mov	r7, r3
 800dc54:	05d3      	lsls	r3, r2, #23
 800dc56:	460c      	mov	r4, r1
 800dc58:	4605      	mov	r5, r0
 800dc5a:	d507      	bpl.n	800dc6c <__swrite+0x24>
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	2302      	movs	r3, #2
 800dc60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc64:	f000 fa14 	bl	800e090 <_lseek_r>
 800dc68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dc6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc70:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800dc74:	81a2      	strh	r2, [r4, #12]
 800dc76:	463b      	mov	r3, r7
 800dc78:	4632      	mov	r2, r6
 800dc7a:	4628      	mov	r0, r5
 800dc7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc80:	f000 b8da 	b.w	800de38 <_write_r>

0800dc84 <__sseek>:
 800dc84:	b510      	push	{r4, lr}
 800dc86:	460c      	mov	r4, r1
 800dc88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc8c:	f000 fa00 	bl	800e090 <_lseek_r>
 800dc90:	89a3      	ldrh	r3, [r4, #12]
 800dc92:	1c42      	adds	r2, r0, #1
 800dc94:	bf0e      	itee	eq
 800dc96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dc9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dc9e:	6520      	strne	r0, [r4, #80]	; 0x50
 800dca0:	81a3      	strh	r3, [r4, #12]
 800dca2:	bd10      	pop	{r4, pc}

0800dca4 <__sclose>:
 800dca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dca8:	f000 b90c 	b.w	800dec4 <_close_r>

0800dcac <__ssprint_r>:
 800dcac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcb0:	6893      	ldr	r3, [r2, #8]
 800dcb2:	b083      	sub	sp, #12
 800dcb4:	4690      	mov	r8, r2
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d072      	beq.n	800dda0 <__ssprint_r+0xf4>
 800dcba:	4683      	mov	fp, r0
 800dcbc:	f04f 0900 	mov.w	r9, #0
 800dcc0:	6816      	ldr	r6, [r2, #0]
 800dcc2:	6808      	ldr	r0, [r1, #0]
 800dcc4:	688b      	ldr	r3, [r1, #8]
 800dcc6:	460d      	mov	r5, r1
 800dcc8:	464c      	mov	r4, r9
 800dcca:	2c00      	cmp	r4, #0
 800dccc:	d045      	beq.n	800dd5a <__ssprint_r+0xae>
 800dcce:	429c      	cmp	r4, r3
 800dcd0:	461f      	mov	r7, r3
 800dcd2:	469a      	mov	sl, r3
 800dcd4:	d346      	bcc.n	800dd64 <__ssprint_r+0xb8>
 800dcd6:	89ab      	ldrh	r3, [r5, #12]
 800dcd8:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800dcdc:	d02d      	beq.n	800dd3a <__ssprint_r+0x8e>
 800dcde:	696f      	ldr	r7, [r5, #20]
 800dce0:	6929      	ldr	r1, [r5, #16]
 800dce2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800dce6:	ebc1 0a00 	rsb	sl, r1, r0
 800dcea:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 800dcee:	1c60      	adds	r0, r4, #1
 800dcf0:	107f      	asrs	r7, r7, #1
 800dcf2:	4450      	add	r0, sl
 800dcf4:	42b8      	cmp	r0, r7
 800dcf6:	463a      	mov	r2, r7
 800dcf8:	bf84      	itt	hi
 800dcfa:	4607      	movhi	r7, r0
 800dcfc:	463a      	movhi	r2, r7
 800dcfe:	055b      	lsls	r3, r3, #21
 800dd00:	d533      	bpl.n	800dd6a <__ssprint_r+0xbe>
 800dd02:	4611      	mov	r1, r2
 800dd04:	4658      	mov	r0, fp
 800dd06:	f7fe ff5d 	bl	800cbc4 <_malloc_r>
 800dd0a:	2800      	cmp	r0, #0
 800dd0c:	d037      	beq.n	800dd7e <__ssprint_r+0xd2>
 800dd0e:	4652      	mov	r2, sl
 800dd10:	6929      	ldr	r1, [r5, #16]
 800dd12:	9001      	str	r0, [sp, #4]
 800dd14:	f7f2 fc86 	bl	8000624 <memcpy>
 800dd18:	89aa      	ldrh	r2, [r5, #12]
 800dd1a:	9b01      	ldr	r3, [sp, #4]
 800dd1c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800dd20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800dd24:	81aa      	strh	r2, [r5, #12]
 800dd26:	ebca 0207 	rsb	r2, sl, r7
 800dd2a:	eb03 000a 	add.w	r0, r3, sl
 800dd2e:	616f      	str	r7, [r5, #20]
 800dd30:	612b      	str	r3, [r5, #16]
 800dd32:	6028      	str	r0, [r5, #0]
 800dd34:	60aa      	str	r2, [r5, #8]
 800dd36:	4627      	mov	r7, r4
 800dd38:	46a2      	mov	sl, r4
 800dd3a:	4652      	mov	r2, sl
 800dd3c:	4649      	mov	r1, r9
 800dd3e:	f7ff f9f9 	bl	800d134 <memmove>
 800dd42:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800dd46:	68ab      	ldr	r3, [r5, #8]
 800dd48:	6828      	ldr	r0, [r5, #0]
 800dd4a:	1bdb      	subs	r3, r3, r7
 800dd4c:	4450      	add	r0, sl
 800dd4e:	1b14      	subs	r4, r2, r4
 800dd50:	60ab      	str	r3, [r5, #8]
 800dd52:	6028      	str	r0, [r5, #0]
 800dd54:	f8c8 4008 	str.w	r4, [r8, #8]
 800dd58:	b314      	cbz	r4, 800dda0 <__ssprint_r+0xf4>
 800dd5a:	f8d6 9000 	ldr.w	r9, [r6]
 800dd5e:	6874      	ldr	r4, [r6, #4]
 800dd60:	3608      	adds	r6, #8
 800dd62:	e7b2      	b.n	800dcca <__ssprint_r+0x1e>
 800dd64:	4627      	mov	r7, r4
 800dd66:	46a2      	mov	sl, r4
 800dd68:	e7e7      	b.n	800dd3a <__ssprint_r+0x8e>
 800dd6a:	4658      	mov	r0, fp
 800dd6c:	f7ff fd58 	bl	800d820 <_realloc_r>
 800dd70:	4603      	mov	r3, r0
 800dd72:	2800      	cmp	r0, #0
 800dd74:	d1d7      	bne.n	800dd26 <__ssprint_r+0x7a>
 800dd76:	6929      	ldr	r1, [r5, #16]
 800dd78:	4658      	mov	r0, fp
 800dd7a:	f7fe fc0d 	bl	800c598 <_free_r>
 800dd7e:	230c      	movs	r3, #12
 800dd80:	f8cb 3000 	str.w	r3, [fp]
 800dd84:	89ab      	ldrh	r3, [r5, #12]
 800dd86:	2200      	movs	r2, #0
 800dd88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd8c:	f04f 30ff 	mov.w	r0, #4294967295
 800dd90:	81ab      	strh	r3, [r5, #12]
 800dd92:	f8c8 2008 	str.w	r2, [r8, #8]
 800dd96:	f8c8 2004 	str.w	r2, [r8, #4]
 800dd9a:	b003      	add	sp, #12
 800dd9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dda0:	2000      	movs	r0, #0
 800dda2:	f8c8 0004 	str.w	r0, [r8, #4]
 800dda6:	b003      	add	sp, #12
 800dda8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ddac <__sprint_r.part.0>:
 800ddac:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800ddae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddb2:	049c      	lsls	r4, r3, #18
 800ddb4:	4692      	mov	sl, r2
 800ddb6:	d52c      	bpl.n	800de12 <__sprint_r.part.0+0x66>
 800ddb8:	6893      	ldr	r3, [r2, #8]
 800ddba:	6812      	ldr	r2, [r2, #0]
 800ddbc:	b33b      	cbz	r3, 800de0e <__sprint_r.part.0+0x62>
 800ddbe:	460f      	mov	r7, r1
 800ddc0:	4680      	mov	r8, r0
 800ddc2:	f102 0908 	add.w	r9, r2, #8
 800ddc6:	e919 0060 	ldmdb	r9, {r5, r6}
 800ddca:	08b6      	lsrs	r6, r6, #2
 800ddcc:	d017      	beq.n	800ddfe <__sprint_r.part.0+0x52>
 800ddce:	3d04      	subs	r5, #4
 800ddd0:	2400      	movs	r4, #0
 800ddd2:	e001      	b.n	800ddd8 <__sprint_r.part.0+0x2c>
 800ddd4:	42a6      	cmp	r6, r4
 800ddd6:	d010      	beq.n	800ddfa <__sprint_r.part.0+0x4e>
 800ddd8:	463a      	mov	r2, r7
 800ddda:	f855 1f04 	ldr.w	r1, [r5, #4]!
 800ddde:	4640      	mov	r0, r8
 800dde0:	f000 f910 	bl	800e004 <_fputwc_r>
 800dde4:	1c43      	adds	r3, r0, #1
 800dde6:	f104 0401 	add.w	r4, r4, #1
 800ddea:	d1f3      	bne.n	800ddd4 <__sprint_r.part.0+0x28>
 800ddec:	2300      	movs	r3, #0
 800ddee:	f8ca 3008 	str.w	r3, [sl, #8]
 800ddf2:	f8ca 3004 	str.w	r3, [sl, #4]
 800ddf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddfa:	f8da 3008 	ldr.w	r3, [sl, #8]
 800ddfe:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
 800de02:	f8ca 3008 	str.w	r3, [sl, #8]
 800de06:	f109 0908 	add.w	r9, r9, #8
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d1db      	bne.n	800ddc6 <__sprint_r.part.0+0x1a>
 800de0e:	2000      	movs	r0, #0
 800de10:	e7ec      	b.n	800ddec <__sprint_r.part.0+0x40>
 800de12:	f7fe fca9 	bl	800c768 <__sfvwrite_r>
 800de16:	2300      	movs	r3, #0
 800de18:	f8ca 3008 	str.w	r3, [sl, #8]
 800de1c:	f8ca 3004 	str.w	r3, [sl, #4]
 800de20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800de24 <__sprint_r>:
 800de24:	6893      	ldr	r3, [r2, #8]
 800de26:	b10b      	cbz	r3, 800de2c <__sprint_r+0x8>
 800de28:	f7ff bfc0 	b.w	800ddac <__sprint_r.part.0>
 800de2c:	b410      	push	{r4}
 800de2e:	4618      	mov	r0, r3
 800de30:	6053      	str	r3, [r2, #4]
 800de32:	bc10      	pop	{r4}
 800de34:	4770      	bx	lr
 800de36:	bf00      	nop

0800de38 <_write_r>:
 800de38:	b570      	push	{r4, r5, r6, lr}
 800de3a:	460d      	mov	r5, r1
 800de3c:	4c08      	ldr	r4, [pc, #32]	; (800de60 <_write_r+0x28>)
 800de3e:	4611      	mov	r1, r2
 800de40:	4606      	mov	r6, r0
 800de42:	461a      	mov	r2, r3
 800de44:	4628      	mov	r0, r5
 800de46:	2300      	movs	r3, #0
 800de48:	6023      	str	r3, [r4, #0]
 800de4a:	f7f9 fb53 	bl	80074f4 <_write>
 800de4e:	1c43      	adds	r3, r0, #1
 800de50:	d000      	beq.n	800de54 <_write_r+0x1c>
 800de52:	bd70      	pop	{r4, r5, r6, pc}
 800de54:	6823      	ldr	r3, [r4, #0]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d0fb      	beq.n	800de52 <_write_r+0x1a>
 800de5a:	6033      	str	r3, [r6, #0]
 800de5c:	bd70      	pop	{r4, r5, r6, pc}
 800de5e:	bf00      	nop
 800de60:	20003848 	.word	0x20003848

0800de64 <_calloc_r>:
 800de64:	b510      	push	{r4, lr}
 800de66:	fb02 f101 	mul.w	r1, r2, r1
 800de6a:	f7fe feab 	bl	800cbc4 <_malloc_r>
 800de6e:	4604      	mov	r4, r0
 800de70:	b1d8      	cbz	r0, 800deaa <_calloc_r+0x46>
 800de72:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800de76:	f022 0203 	bic.w	r2, r2, #3
 800de7a:	3a04      	subs	r2, #4
 800de7c:	2a24      	cmp	r2, #36	; 0x24
 800de7e:	d818      	bhi.n	800deb2 <_calloc_r+0x4e>
 800de80:	2a13      	cmp	r2, #19
 800de82:	d914      	bls.n	800deae <_calloc_r+0x4a>
 800de84:	2300      	movs	r3, #0
 800de86:	2a1b      	cmp	r2, #27
 800de88:	6003      	str	r3, [r0, #0]
 800de8a:	6043      	str	r3, [r0, #4]
 800de8c:	d916      	bls.n	800debc <_calloc_r+0x58>
 800de8e:	2a24      	cmp	r2, #36	; 0x24
 800de90:	6083      	str	r3, [r0, #8]
 800de92:	60c3      	str	r3, [r0, #12]
 800de94:	bf11      	iteee	ne
 800de96:	f100 0210 	addne.w	r2, r0, #16
 800de9a:	6103      	streq	r3, [r0, #16]
 800de9c:	6143      	streq	r3, [r0, #20]
 800de9e:	f100 0218 	addeq.w	r2, r0, #24
 800dea2:	2300      	movs	r3, #0
 800dea4:	6013      	str	r3, [r2, #0]
 800dea6:	6053      	str	r3, [r2, #4]
 800dea8:	6093      	str	r3, [r2, #8]
 800deaa:	4620      	mov	r0, r4
 800deac:	bd10      	pop	{r4, pc}
 800deae:	4602      	mov	r2, r0
 800deb0:	e7f7      	b.n	800dea2 <_calloc_r+0x3e>
 800deb2:	2100      	movs	r1, #0
 800deb4:	f7fa f9ea 	bl	800828c <memset>
 800deb8:	4620      	mov	r0, r4
 800deba:	bd10      	pop	{r4, pc}
 800debc:	f100 0208 	add.w	r2, r0, #8
 800dec0:	e7ef      	b.n	800dea2 <_calloc_r+0x3e>
 800dec2:	bf00      	nop

0800dec4 <_close_r>:
 800dec4:	b538      	push	{r3, r4, r5, lr}
 800dec6:	4c07      	ldr	r4, [pc, #28]	; (800dee4 <_close_r+0x20>)
 800dec8:	2300      	movs	r3, #0
 800deca:	4605      	mov	r5, r0
 800decc:	4608      	mov	r0, r1
 800dece:	6023      	str	r3, [r4, #0]
 800ded0:	f7f9 fb74 	bl	80075bc <_close>
 800ded4:	1c43      	adds	r3, r0, #1
 800ded6:	d000      	beq.n	800deda <_close_r+0x16>
 800ded8:	bd38      	pop	{r3, r4, r5, pc}
 800deda:	6823      	ldr	r3, [r4, #0]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d0fb      	beq.n	800ded8 <_close_r+0x14>
 800dee0:	602b      	str	r3, [r5, #0]
 800dee2:	bd38      	pop	{r3, r4, r5, pc}
 800dee4:	20003848 	.word	0x20003848

0800dee8 <_fclose_r>:
 800dee8:	2900      	cmp	r1, #0
 800deea:	d03d      	beq.n	800df68 <_fclose_r+0x80>
 800deec:	b570      	push	{r4, r5, r6, lr}
 800deee:	4605      	mov	r5, r0
 800def0:	460c      	mov	r4, r1
 800def2:	b108      	cbz	r0, 800def8 <_fclose_r+0x10>
 800def4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800def6:	b37b      	cbz	r3, 800df58 <_fclose_r+0x70>
 800def8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800defc:	b90b      	cbnz	r3, 800df02 <_fclose_r+0x1a>
 800defe:	2000      	movs	r0, #0
 800df00:	bd70      	pop	{r4, r5, r6, pc}
 800df02:	4621      	mov	r1, r4
 800df04:	4628      	mov	r0, r5
 800df06:	f7fe f9b7 	bl	800c278 <__sflush_r>
 800df0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800df0c:	4606      	mov	r6, r0
 800df0e:	b133      	cbz	r3, 800df1e <_fclose_r+0x36>
 800df10:	69e1      	ldr	r1, [r4, #28]
 800df12:	4628      	mov	r0, r5
 800df14:	4798      	blx	r3
 800df16:	2800      	cmp	r0, #0
 800df18:	bfb8      	it	lt
 800df1a:	f04f 36ff 	movlt.w	r6, #4294967295
 800df1e:	89a3      	ldrh	r3, [r4, #12]
 800df20:	061b      	lsls	r3, r3, #24
 800df22:	d41c      	bmi.n	800df5e <_fclose_r+0x76>
 800df24:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800df26:	b141      	cbz	r1, 800df3a <_fclose_r+0x52>
 800df28:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800df2c:	4299      	cmp	r1, r3
 800df2e:	d002      	beq.n	800df36 <_fclose_r+0x4e>
 800df30:	4628      	mov	r0, r5
 800df32:	f7fe fb31 	bl	800c598 <_free_r>
 800df36:	2300      	movs	r3, #0
 800df38:	6323      	str	r3, [r4, #48]	; 0x30
 800df3a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800df3c:	b121      	cbz	r1, 800df48 <_fclose_r+0x60>
 800df3e:	4628      	mov	r0, r5
 800df40:	f7fe fb2a 	bl	800c598 <_free_r>
 800df44:	2300      	movs	r3, #0
 800df46:	6463      	str	r3, [r4, #68]	; 0x44
 800df48:	f7fe fad4 	bl	800c4f4 <__sfp_lock_acquire>
 800df4c:	2300      	movs	r3, #0
 800df4e:	81a3      	strh	r3, [r4, #12]
 800df50:	f7fe fad2 	bl	800c4f8 <__sfp_lock_release>
 800df54:	4630      	mov	r0, r6
 800df56:	bd70      	pop	{r4, r5, r6, pc}
 800df58:	f7fe fac6 	bl	800c4e8 <__sinit>
 800df5c:	e7cc      	b.n	800def8 <_fclose_r+0x10>
 800df5e:	6921      	ldr	r1, [r4, #16]
 800df60:	4628      	mov	r0, r5
 800df62:	f7fe fb19 	bl	800c598 <_free_r>
 800df66:	e7dd      	b.n	800df24 <_fclose_r+0x3c>
 800df68:	2000      	movs	r0, #0
 800df6a:	4770      	bx	lr

0800df6c <__fputwc>:
 800df6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df70:	b082      	sub	sp, #8
 800df72:	4680      	mov	r8, r0
 800df74:	4689      	mov	r9, r1
 800df76:	4614      	mov	r4, r2
 800df78:	f000 f87c 	bl	800e074 <__locale_mb_cur_max>
 800df7c:	2801      	cmp	r0, #1
 800df7e:	d033      	beq.n	800dfe8 <__fputwc+0x7c>
 800df80:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800df84:	464a      	mov	r2, r9
 800df86:	a901      	add	r1, sp, #4
 800df88:	4640      	mov	r0, r8
 800df8a:	f000 f919 	bl	800e1c0 <_wcrtomb_r>
 800df8e:	f1b0 3fff 	cmp.w	r0, #4294967295
 800df92:	4682      	mov	sl, r0
 800df94:	d021      	beq.n	800dfda <__fputwc+0x6e>
 800df96:	b388      	cbz	r0, 800dffc <__fputwc+0x90>
 800df98:	f89d 6004 	ldrb.w	r6, [sp, #4]
 800df9c:	2500      	movs	r5, #0
 800df9e:	e008      	b.n	800dfb2 <__fputwc+0x46>
 800dfa0:	6823      	ldr	r3, [r4, #0]
 800dfa2:	1c5a      	adds	r2, r3, #1
 800dfa4:	6022      	str	r2, [r4, #0]
 800dfa6:	701e      	strb	r6, [r3, #0]
 800dfa8:	3501      	adds	r5, #1
 800dfaa:	4555      	cmp	r5, sl
 800dfac:	d226      	bcs.n	800dffc <__fputwc+0x90>
 800dfae:	ab01      	add	r3, sp, #4
 800dfb0:	5d5e      	ldrb	r6, [r3, r5]
 800dfb2:	68a3      	ldr	r3, [r4, #8]
 800dfb4:	3b01      	subs	r3, #1
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	60a3      	str	r3, [r4, #8]
 800dfba:	daf1      	bge.n	800dfa0 <__fputwc+0x34>
 800dfbc:	69a7      	ldr	r7, [r4, #24]
 800dfbe:	42bb      	cmp	r3, r7
 800dfc0:	4631      	mov	r1, r6
 800dfc2:	4622      	mov	r2, r4
 800dfc4:	4640      	mov	r0, r8
 800dfc6:	db01      	blt.n	800dfcc <__fputwc+0x60>
 800dfc8:	2e0a      	cmp	r6, #10
 800dfca:	d1e9      	bne.n	800dfa0 <__fputwc+0x34>
 800dfcc:	f000 f8a2 	bl	800e114 <__swbuf_r>
 800dfd0:	1c43      	adds	r3, r0, #1
 800dfd2:	d1e9      	bne.n	800dfa8 <__fputwc+0x3c>
 800dfd4:	b002      	add	sp, #8
 800dfd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfda:	89a3      	ldrh	r3, [r4, #12]
 800dfdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dfe0:	81a3      	strh	r3, [r4, #12]
 800dfe2:	b002      	add	sp, #8
 800dfe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfe8:	f109 33ff 	add.w	r3, r9, #4294967295
 800dfec:	2bfe      	cmp	r3, #254	; 0xfe
 800dfee:	d8c7      	bhi.n	800df80 <__fputwc+0x14>
 800dff0:	fa5f f689 	uxtb.w	r6, r9
 800dff4:	4682      	mov	sl, r0
 800dff6:	f88d 6004 	strb.w	r6, [sp, #4]
 800dffa:	e7cf      	b.n	800df9c <__fputwc+0x30>
 800dffc:	4648      	mov	r0, r9
 800dffe:	b002      	add	sp, #8
 800e000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e004 <_fputwc_r>:
 800e004:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 800e008:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800e00c:	d10a      	bne.n	800e024 <_fputwc_r+0x20>
 800e00e:	b410      	push	{r4}
 800e010:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800e012:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e016:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 800e01a:	6654      	str	r4, [r2, #100]	; 0x64
 800e01c:	8193      	strh	r3, [r2, #12]
 800e01e:	bc10      	pop	{r4}
 800e020:	f7ff bfa4 	b.w	800df6c <__fputwc>
 800e024:	f7ff bfa2 	b.w	800df6c <__fputwc>

0800e028 <_fstat_r>:
 800e028:	b538      	push	{r3, r4, r5, lr}
 800e02a:	460b      	mov	r3, r1
 800e02c:	4c07      	ldr	r4, [pc, #28]	; (800e04c <_fstat_r+0x24>)
 800e02e:	4605      	mov	r5, r0
 800e030:	4611      	mov	r1, r2
 800e032:	4618      	mov	r0, r3
 800e034:	2300      	movs	r3, #0
 800e036:	6023      	str	r3, [r4, #0]
 800e038:	f7f9 fac8 	bl	80075cc <_fstat>
 800e03c:	1c43      	adds	r3, r0, #1
 800e03e:	d000      	beq.n	800e042 <_fstat_r+0x1a>
 800e040:	bd38      	pop	{r3, r4, r5, pc}
 800e042:	6823      	ldr	r3, [r4, #0]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d0fb      	beq.n	800e040 <_fstat_r+0x18>
 800e048:	602b      	str	r3, [r5, #0]
 800e04a:	bd38      	pop	{r3, r4, r5, pc}
 800e04c:	20003848 	.word	0x20003848

0800e050 <_isatty_r>:
 800e050:	b538      	push	{r3, r4, r5, lr}
 800e052:	4c07      	ldr	r4, [pc, #28]	; (800e070 <_isatty_r+0x20>)
 800e054:	2300      	movs	r3, #0
 800e056:	4605      	mov	r5, r0
 800e058:	4608      	mov	r0, r1
 800e05a:	6023      	str	r3, [r4, #0]
 800e05c:	f7f9 fb06 	bl	800766c <_isatty>
 800e060:	1c43      	adds	r3, r0, #1
 800e062:	d000      	beq.n	800e066 <_isatty_r+0x16>
 800e064:	bd38      	pop	{r3, r4, r5, pc}
 800e066:	6823      	ldr	r3, [r4, #0]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d0fb      	beq.n	800e064 <_isatty_r+0x14>
 800e06c:	602b      	str	r3, [r5, #0]
 800e06e:	bd38      	pop	{r3, r4, r5, pc}
 800e070:	20003848 	.word	0x20003848

0800e074 <__locale_mb_cur_max>:
 800e074:	4b04      	ldr	r3, [pc, #16]	; (800e088 <__locale_mb_cur_max+0x14>)
 800e076:	4a05      	ldr	r2, [pc, #20]	; (800e08c <__locale_mb_cur_max+0x18>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	bf08      	it	eq
 800e080:	4613      	moveq	r3, r2
 800e082:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800e086:	4770      	bx	lr
 800e088:	20000460 	.word	0x20000460
 800e08c:	20000874 	.word	0x20000874

0800e090 <_lseek_r>:
 800e090:	b570      	push	{r4, r5, r6, lr}
 800e092:	460d      	mov	r5, r1
 800e094:	4c08      	ldr	r4, [pc, #32]	; (800e0b8 <_lseek_r+0x28>)
 800e096:	4611      	mov	r1, r2
 800e098:	4606      	mov	r6, r0
 800e09a:	461a      	mov	r2, r3
 800e09c:	4628      	mov	r0, r5
 800e09e:	2300      	movs	r3, #0
 800e0a0:	6023      	str	r3, [r4, #0]
 800e0a2:	f7f9 fa71 	bl	8007588 <_lseek>
 800e0a6:	1c43      	adds	r3, r0, #1
 800e0a8:	d000      	beq.n	800e0ac <_lseek_r+0x1c>
 800e0aa:	bd70      	pop	{r4, r5, r6, pc}
 800e0ac:	6823      	ldr	r3, [r4, #0]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d0fb      	beq.n	800e0aa <_lseek_r+0x1a>
 800e0b2:	6033      	str	r3, [r6, #0]
 800e0b4:	bd70      	pop	{r4, r5, r6, pc}
 800e0b6:	bf00      	nop
 800e0b8:	20003848 	.word	0x20003848

0800e0bc <__ascii_mbtowc>:
 800e0bc:	b082      	sub	sp, #8
 800e0be:	b149      	cbz	r1, 800e0d4 <__ascii_mbtowc+0x18>
 800e0c0:	b15a      	cbz	r2, 800e0da <__ascii_mbtowc+0x1e>
 800e0c2:	b16b      	cbz	r3, 800e0e0 <__ascii_mbtowc+0x24>
 800e0c4:	7813      	ldrb	r3, [r2, #0]
 800e0c6:	600b      	str	r3, [r1, #0]
 800e0c8:	7812      	ldrb	r2, [r2, #0]
 800e0ca:	1c10      	adds	r0, r2, #0
 800e0cc:	bf18      	it	ne
 800e0ce:	2001      	movne	r0, #1
 800e0d0:	b002      	add	sp, #8
 800e0d2:	4770      	bx	lr
 800e0d4:	a901      	add	r1, sp, #4
 800e0d6:	2a00      	cmp	r2, #0
 800e0d8:	d1f3      	bne.n	800e0c2 <__ascii_mbtowc+0x6>
 800e0da:	4610      	mov	r0, r2
 800e0dc:	b002      	add	sp, #8
 800e0de:	4770      	bx	lr
 800e0e0:	f06f 0001 	mvn.w	r0, #1
 800e0e4:	e7f4      	b.n	800e0d0 <__ascii_mbtowc+0x14>
 800e0e6:	bf00      	nop

0800e0e8 <_read_r>:
 800e0e8:	b570      	push	{r4, r5, r6, lr}
 800e0ea:	460d      	mov	r5, r1
 800e0ec:	4c08      	ldr	r4, [pc, #32]	; (800e110 <_read_r+0x28>)
 800e0ee:	4611      	mov	r1, r2
 800e0f0:	4606      	mov	r6, r0
 800e0f2:	461a      	mov	r2, r3
 800e0f4:	4628      	mov	r0, r5
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	6023      	str	r3, [r4, #0]
 800e0fa:	f7f9 fa53 	bl	80075a4 <_read>
 800e0fe:	1c43      	adds	r3, r0, #1
 800e100:	d000      	beq.n	800e104 <_read_r+0x1c>
 800e102:	bd70      	pop	{r4, r5, r6, pc}
 800e104:	6823      	ldr	r3, [r4, #0]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d0fb      	beq.n	800e102 <_read_r+0x1a>
 800e10a:	6033      	str	r3, [r6, #0]
 800e10c:	bd70      	pop	{r4, r5, r6, pc}
 800e10e:	bf00      	nop
 800e110:	20003848 	.word	0x20003848

0800e114 <__swbuf_r>:
 800e114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e116:	460d      	mov	r5, r1
 800e118:	4614      	mov	r4, r2
 800e11a:	4606      	mov	r6, r0
 800e11c:	b110      	cbz	r0, 800e124 <__swbuf_r+0x10>
 800e11e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e120:	2b00      	cmp	r3, #0
 800e122:	d04a      	beq.n	800e1ba <__swbuf_r+0xa6>
 800e124:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e128:	69a3      	ldr	r3, [r4, #24]
 800e12a:	60a3      	str	r3, [r4, #8]
 800e12c:	b291      	uxth	r1, r2
 800e12e:	0708      	lsls	r0, r1, #28
 800e130:	d538      	bpl.n	800e1a4 <__swbuf_r+0x90>
 800e132:	6923      	ldr	r3, [r4, #16]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d035      	beq.n	800e1a4 <__swbuf_r+0x90>
 800e138:	0489      	lsls	r1, r1, #18
 800e13a:	b2ef      	uxtb	r7, r5
 800e13c:	d515      	bpl.n	800e16a <__swbuf_r+0x56>
 800e13e:	6822      	ldr	r2, [r4, #0]
 800e140:	6961      	ldr	r1, [r4, #20]
 800e142:	1ad3      	subs	r3, r2, r3
 800e144:	428b      	cmp	r3, r1
 800e146:	da1c      	bge.n	800e182 <__swbuf_r+0x6e>
 800e148:	3301      	adds	r3, #1
 800e14a:	68a1      	ldr	r1, [r4, #8]
 800e14c:	1c50      	adds	r0, r2, #1
 800e14e:	3901      	subs	r1, #1
 800e150:	60a1      	str	r1, [r4, #8]
 800e152:	6020      	str	r0, [r4, #0]
 800e154:	7015      	strb	r5, [r2, #0]
 800e156:	6962      	ldr	r2, [r4, #20]
 800e158:	429a      	cmp	r2, r3
 800e15a:	d01a      	beq.n	800e192 <__swbuf_r+0x7e>
 800e15c:	89a3      	ldrh	r3, [r4, #12]
 800e15e:	07db      	lsls	r3, r3, #31
 800e160:	d501      	bpl.n	800e166 <__swbuf_r+0x52>
 800e162:	2f0a      	cmp	r7, #10
 800e164:	d015      	beq.n	800e192 <__swbuf_r+0x7e>
 800e166:	4638      	mov	r0, r7
 800e168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e16a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800e16c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e170:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800e174:	81a2      	strh	r2, [r4, #12]
 800e176:	6822      	ldr	r2, [r4, #0]
 800e178:	6661      	str	r1, [r4, #100]	; 0x64
 800e17a:	6961      	ldr	r1, [r4, #20]
 800e17c:	1ad3      	subs	r3, r2, r3
 800e17e:	428b      	cmp	r3, r1
 800e180:	dbe2      	blt.n	800e148 <__swbuf_r+0x34>
 800e182:	4621      	mov	r1, r4
 800e184:	4630      	mov	r0, r6
 800e186:	f7fe f91b 	bl	800c3c0 <_fflush_r>
 800e18a:	b940      	cbnz	r0, 800e19e <__swbuf_r+0x8a>
 800e18c:	6822      	ldr	r2, [r4, #0]
 800e18e:	2301      	movs	r3, #1
 800e190:	e7db      	b.n	800e14a <__swbuf_r+0x36>
 800e192:	4621      	mov	r1, r4
 800e194:	4630      	mov	r0, r6
 800e196:	f7fe f913 	bl	800c3c0 <_fflush_r>
 800e19a:	2800      	cmp	r0, #0
 800e19c:	d0e3      	beq.n	800e166 <__swbuf_r+0x52>
 800e19e:	f04f 37ff 	mov.w	r7, #4294967295
 800e1a2:	e7e0      	b.n	800e166 <__swbuf_r+0x52>
 800e1a4:	4621      	mov	r1, r4
 800e1a6:	4630      	mov	r0, r6
 800e1a8:	f7fd f842 	bl	800b230 <__swsetup_r>
 800e1ac:	2800      	cmp	r0, #0
 800e1ae:	d1f6      	bne.n	800e19e <__swbuf_r+0x8a>
 800e1b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e1b4:	6923      	ldr	r3, [r4, #16]
 800e1b6:	b291      	uxth	r1, r2
 800e1b8:	e7be      	b.n	800e138 <__swbuf_r+0x24>
 800e1ba:	f7fe f995 	bl	800c4e8 <__sinit>
 800e1be:	e7b1      	b.n	800e124 <__swbuf_r+0x10>

0800e1c0 <_wcrtomb_r>:
 800e1c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1c2:	4606      	mov	r6, r0
 800e1c4:	b085      	sub	sp, #20
 800e1c6:	461f      	mov	r7, r3
 800e1c8:	b189      	cbz	r1, 800e1ee <_wcrtomb_r+0x2e>
 800e1ca:	4c10      	ldr	r4, [pc, #64]	; (800e20c <_wcrtomb_r+0x4c>)
 800e1cc:	4d10      	ldr	r5, [pc, #64]	; (800e210 <_wcrtomb_r+0x50>)
 800e1ce:	6824      	ldr	r4, [r4, #0]
 800e1d0:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800e1d2:	2c00      	cmp	r4, #0
 800e1d4:	bf08      	it	eq
 800e1d6:	462c      	moveq	r4, r5
 800e1d8:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 800e1dc:	47a0      	blx	r4
 800e1de:	1c43      	adds	r3, r0, #1
 800e1e0:	d103      	bne.n	800e1ea <_wcrtomb_r+0x2a>
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	238a      	movs	r3, #138	; 0x8a
 800e1e6:	603a      	str	r2, [r7, #0]
 800e1e8:	6033      	str	r3, [r6, #0]
 800e1ea:	b005      	add	sp, #20
 800e1ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1ee:	460c      	mov	r4, r1
 800e1f0:	4906      	ldr	r1, [pc, #24]	; (800e20c <_wcrtomb_r+0x4c>)
 800e1f2:	4a07      	ldr	r2, [pc, #28]	; (800e210 <_wcrtomb_r+0x50>)
 800e1f4:	6809      	ldr	r1, [r1, #0]
 800e1f6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e1f8:	2900      	cmp	r1, #0
 800e1fa:	bf08      	it	eq
 800e1fc:	4611      	moveq	r1, r2
 800e1fe:	4622      	mov	r2, r4
 800e200:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
 800e204:	a901      	add	r1, sp, #4
 800e206:	47a0      	blx	r4
 800e208:	e7e9      	b.n	800e1de <_wcrtomb_r+0x1e>
 800e20a:	bf00      	nop
 800e20c:	20000460 	.word	0x20000460
 800e210:	20000874 	.word	0x20000874

0800e214 <__ascii_wctomb>:
 800e214:	b121      	cbz	r1, 800e220 <__ascii_wctomb+0xc>
 800e216:	2aff      	cmp	r2, #255	; 0xff
 800e218:	d804      	bhi.n	800e224 <__ascii_wctomb+0x10>
 800e21a:	700a      	strb	r2, [r1, #0]
 800e21c:	2001      	movs	r0, #1
 800e21e:	4770      	bx	lr
 800e220:	4608      	mov	r0, r1
 800e222:	4770      	bx	lr
 800e224:	238a      	movs	r3, #138	; 0x8a
 800e226:	6003      	str	r3, [r0, #0]
 800e228:	f04f 30ff 	mov.w	r0, #4294967295
 800e22c:	4770      	bx	lr
 800e22e:	bf00      	nop
